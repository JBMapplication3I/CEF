// <autogenerated>
// <copyright file="Mapping.Contacts.UserFile.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Contacts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForUserFile
    {
        public sealed class AnonUserFile : UserFile
        {
            // public new User? Master { get; set; }
        }

        public static readonly Func<UserFile?, string?, IUserFileModel?> MapUserFileModelFromEntityFull = CreateUserFileModelFromEntityFull;

        public static readonly Func<UserFile?, string?, IUserFileModel?> MapUserFileModelFromEntityLite = CreateUserFileModelFromEntityLite;

        public static readonly Func<UserFile?, string?, IUserFileModel?> MapUserFileModelFromEntityList = CreateUserFileModelFromEntityList;

        public static Func<IUserFile, IUserFileModel, string?, IUserFileModel>? CreateUserFileModelFromEntityHooksFull { get; set; }

        public static Func<IUserFile, IUserFileModel, string?, IUserFileModel>? CreateUserFileModelFromEntityHooksLite { get; set; }

        public static Func<IUserFile, IUserFileModel, string?, IUserFileModel>? CreateUserFileModelFromEntityHooksList { get; set; }

        public static Expression<Func<UserFile, AnonUserFile>>? PreBuiltUserFileSQLSelectorFull { get; set; }

        public static Expression<Func<UserFile, AnonUserFile>>? PreBuiltUserFileSQLSelectorLite { get; set; }

        public static Expression<Func<UserFile, AnonUserFile>>? PreBuiltUserFileSQLSelectorList { get; set; }

        /// <summary>An <see cref="IUserFileModel"/> extension method that creates a(n) <see cref="UserFile"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="UserFile"/> entity.</returns>
        public static IUserFile CreateUserFileEntity(
            this IUserFileModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IUserFileModel, UserFile>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateUserFileFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IUserFileModel"/> extension method that updates a(n) <see cref="UserFile"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="UserFile"/> entity.</returns>
        public static IUserFile UpdateUserFileFromModel(
            this IUserFile entity,
            IUserFileModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // UserFile Properties
            entity.FileAccessTypeID = model.FileAccessTypeID;
            entity.SeoDescription = model.SeoDescription;
            entity.SeoKeywords = model.SeoKeywords;
            entity.SeoMetaData = model.SeoMetaData;
            entity.SeoPageTitle = model.SeoPageTitle;
            entity.SeoUrl = model.SeoUrl;
            entity.SortOrder = model.SortOrder;
            // UserFile's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenUserFileSQLSelectorFull()
        {
            PreBuiltUserFileSQLSelectorFull = x => x == null ? null! : new AnonUserFile
            {
                SeoUrl = x.SeoUrl,
                SeoKeywords = x.SeoKeywords,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                MasterID = x.MasterID,
                SlaveID = x.SlaveID,
                Slave = ModelMapperForStoredFile.PreBuiltStoredFileSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                FileAccessTypeID = x.FileAccessTypeID,
                SortOrder = x.SortOrder,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenUserFileSQLSelectorLite()
        {
            PreBuiltUserFileSQLSelectorLite = x => x == null ? null! : new AnonUserFile
            {
                SeoUrl = x.SeoUrl,
                SeoKeywords = x.SeoKeywords,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                MasterID = x.MasterID,
                SlaveID = x.SlaveID,
                Slave = ModelMapperForStoredFile.PreBuiltStoredFileSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                FileAccessTypeID = x.FileAccessTypeID,
                SortOrder = x.SortOrder,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenUserFileSQLSelectorList()
        {
            PreBuiltUserFileSQLSelectorList = x => x == null ? null! : new AnonUserFile
            {
                SeoUrl = x.SeoUrl,
                MasterID = x.MasterID,
                SlaveID = x.SlaveID,
                Slave = ModelMapperForStoredFile.PreBuiltStoredFileSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                FileAccessTypeID = x.FileAccessTypeID,
                SortOrder = x.SortOrder,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                Master = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties
            };
        }

        public static IEnumerable<IUserFileModel> SelectFullUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltUserFileSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IUserFileModel> SelectLiteUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltUserFileSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IUserFileModel> SelectListUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltUserFileSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityList(x, contextProfileName))!;
        }

        public static IUserFileModel? SelectFirstFullUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserFileSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IUserFileModel? SelectFirstListUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserFileSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IUserFileModel? SelectSingleFullUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserFileSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IUserFileModel? SelectSingleLiteUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserFileSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IUserFileModel? SelectSingleListUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserFileSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateUserFileModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IUserFileModel> results, int totalPages, int totalCount) SelectFullUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltUserFileSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateUserFileModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IUserFileModel> results, int totalPages, int totalCount) SelectLiteUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltUserFileSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateUserFileModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IUserFileModel> results, int totalPages, int totalCount) SelectListUserFileAndMapToUserFileModel(
            this IQueryable<UserFile> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserFileSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltUserFileSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateUserFileModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IUserFileModel? CreateUserFileModelFromEntityFull(this IUserFile? entity, string? contextProfileName)
        {
            return CreateUserFileModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IUserFileModel? CreateUserFileModelFromEntityLite(this IUserFile? entity, string? contextProfileName)
        {
            return CreateUserFileModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IUserFileModel? CreateUserFileModelFromEntityList(this IUserFile? entity, string? contextProfileName)
        {
            return CreateUserFileModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IUserFileModel? CreateUserFileModelFromEntity(
            this IUserFile? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IUserFileModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // UserFile's Properties
                    // UserFile's Related Objects
                    model.Slave = ModelMapperForStoredFile.CreateStoredFileModelFromEntityLite(entity.Slave, contextProfileName);
                    // UserFile's Associated Objects
                    // Additional Mappings
                    if (CreateUserFileModelFromEntityHooksFull != null) { model = CreateUserFileModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // UserFile's Properties
                    model.SeoDescription = entity.SeoDescription;
                    model.SeoKeywords = entity.SeoKeywords;
                    model.SeoMetaData = entity.SeoMetaData;
                    model.SeoPageTitle = entity.SeoPageTitle;
                    // UserFile's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // UserFile's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateUserFileModelFromEntityHooksLite != null) { model = CreateUserFileModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // UserFile's Properties
                    model.FileAccessTypeID = entity.FileAccessTypeID;
                    model.SeoUrl = entity.SeoUrl;
                    model.SortOrder = entity.SortOrder;
                    // UserFile's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterUserName = entity.Master?.UserName;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    // UserFile's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateUserFileModelFromEntityHooksList != null) { model = CreateUserFileModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
