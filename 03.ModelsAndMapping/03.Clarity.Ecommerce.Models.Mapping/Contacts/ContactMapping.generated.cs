// <autogenerated>
// <copyright file="Mapping.Contacts.Contact.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Contacts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForContact
    {
        public sealed class AnonContact : Contact
        {
            public new IEnumerable<ContactImage>? Images { get; set; }
        }

        public static readonly Func<Contact?, string?, IContactModel?> MapContactModelFromEntityFull = CreateContactModelFromEntityFull;

        public static readonly Func<Contact?, string?, IContactModel?> MapContactModelFromEntityLite = CreateContactModelFromEntityLite;

        public static readonly Func<Contact?, string?, IContactModel?> MapContactModelFromEntityList = CreateContactModelFromEntityList;

        public static Func<IContact, IContactModel, string?, IContactModel>? CreateContactModelFromEntityHooksFull { get; set; }

        public static Func<IContact, IContactModel, string?, IContactModel>? CreateContactModelFromEntityHooksLite { get; set; }

        public static Func<IContact, IContactModel, string?, IContactModel>? CreateContactModelFromEntityHooksList { get; set; }

        public static Expression<Func<Contact, AnonContact>>? PreBuiltContactSQLSelectorFull { get; set; }

        public static Expression<Func<Contact, AnonContact>>? PreBuiltContactSQLSelectorLite { get; set; }

        public static Expression<Func<Contact, AnonContact>>? PreBuiltContactSQLSelectorList { get; set; }

        /// <summary>An <see cref="IContactModel"/> extension method that creates a(n) <see cref="Contact"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Contact"/> entity.</returns>
        public static IContact CreateContactEntity(
            this IContactModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IContactModel, Contact>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateContactFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IContactModel"/> extension method that updates a(n) <see cref="Contact"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Contact"/> entity.</returns>
        public static IContact UpdateContactFromModel(
            this IContact entity,
            IContactModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Contact Properties
            entity.Email1 = model.Email1;
            entity.Fax1 = model.Fax1;
            entity.FirstName = model.FirstName;
            entity.FullName = model.FullName;
            entity.LastName = model.LastName;
            entity.MiddleName = model.MiddleName;
            entity.Phone1 = model.Phone1;
            entity.Phone2 = model.Phone2;
            entity.Phone3 = model.Phone3;
            entity.Website1 = model.Website1;
            // Contact's Related Objects
            // Contact's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenContactSQLSelectorFull()
        {
            PreBuiltContactSQLSelectorFull = x => x == null ? null! : new AnonContact
            {
                TypeID = x.TypeID,
                Type = ModelMapperForContactType.PreBuiltContactTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForContactImage.PreBuiltContactImageSQLSelectorList.Expand().Compile()).ToList(),
                FirstName = x.FirstName,
                MiddleName = x.MiddleName,
                LastName = x.LastName,
                FullName = x.FullName,
                Phone1 = x.Phone1,
                Phone2 = x.Phone2,
                Phone3 = x.Phone3,
                Fax1 = x.Fax1,
                Email1 = x.Email1,
                Website1 = x.Website1,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenContactSQLSelectorLite()
        {
            PreBuiltContactSQLSelectorLite = x => x == null ? null! : new AnonContact
            {
                TypeID = x.TypeID,
                Type = ModelMapperForContactType.PreBuiltContactTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                FirstName = x.FirstName,
                MiddleName = x.MiddleName,
                LastName = x.LastName,
                FullName = x.FullName,
                Phone1 = x.Phone1,
                Phone2 = x.Phone2,
                Phone3 = x.Phone3,
                Fax1 = x.Fax1,
                Email1 = x.Email1,
                Website1 = x.Website1,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenContactSQLSelectorList()
        {
            PreBuiltContactSQLSelectorList = x => x == null ? null! : new AnonContact
            {
                TypeID = x.TypeID,
                Type = ModelMapperForContactType.PreBuiltContactTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                FirstName = x.FirstName,
                MiddleName = x.MiddleName,
                LastName = x.LastName,
                FullName = x.FullName,
                Phone1 = x.Phone1,
                Phone2 = x.Phone2,
                Phone3 = x.Phone3,
                Fax1 = x.Fax1,
                Email1 = x.Email1,
                Website1 = x.Website1,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IContactModel> SelectFullContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltContactSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IContactModel> SelectLiteContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltContactSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IContactModel> SelectListContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltContactSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityList(x, contextProfileName))!;
        }

        public static IContactModel? SelectFirstFullContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContactSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IContactModel? SelectFirstListContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContactSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IContactModel? SelectSingleFullContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContactSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IContactModel? SelectSingleLiteContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContactSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IContactModel? SelectSingleListContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContactSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateContactModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IContactModel> results, int totalPages, int totalCount) SelectFullContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltContactSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateContactModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IContactModel> results, int totalPages, int totalCount) SelectLiteContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltContactSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateContactModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IContactModel> results, int totalPages, int totalCount) SelectListContactAndMapToContactModel(
            this IQueryable<Contact> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContactSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltContactSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateContactModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IContactModel? CreateContactModelFromEntityFull(this IContact? entity, string? contextProfileName)
        {
            return CreateContactModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IContactModel? CreateContactModelFromEntityLite(this IContact? entity, string? contextProfileName)
        {
            return CreateContactModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IContactModel? CreateContactModelFromEntityList(this IContact? entity, string? contextProfileName)
        {
            return CreateContactModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IContactModel? CreateContactModelFromEntity(
            this IContact? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IContactModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForContactType.CreateContactTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Contact's Properties
                    // Contact's Related Objects
                    // Contact's Associated Objects
                    model.Images = (entity is AnonContact ? ((AnonContact)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForContactImage.CreateContactImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateContactModelFromEntityHooksFull != null) { model = CreateContactModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Contact's Properties
                    // Contact's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Contact's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateContactModelFromEntityHooksLite != null) { model = CreateContactModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Contact's Properties
                    model.Email1 = entity.Email1;
                    model.Fax1 = entity.Fax1;
                    model.FirstName = entity.FirstName;
                    model.FullName = entity.FullName;
                    model.LastName = entity.LastName;
                    model.MiddleName = entity.MiddleName;
                    model.Phone1 = entity.Phone1;
                    model.Phone2 = entity.Phone2;
                    model.Phone3 = entity.Phone3;
                    model.Website1 = entity.Website1;
                    // Contact's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AddressID = entity.AddressID;
                    model.Address = ModelMapperForAddress.CreateAddressModelFromEntityLite(entity.Address, contextProfileName);
                    model.AddressKey = entity.Address?.CustomKey;
                    // Contact's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateContactModelFromEntityHooksList != null) { model = CreateContactModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
