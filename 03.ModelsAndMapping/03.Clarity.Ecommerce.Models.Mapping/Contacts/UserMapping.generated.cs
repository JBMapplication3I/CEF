// <autogenerated>
// <copyright file="Mapping.Contacts.User.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Contacts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForUser
    {
        public sealed class AnonUser : User
        {
            public new IEnumerable<BrandUser>? Brands { get; set; }
            public new IEnumerable<UserFile>? StoredFiles { get; set; }
            public new IEnumerable<UserImage>? Images { get; set; }
        }

        public static readonly Func<User?, string?, IUserModel?> MapUserModelFromEntityFull = CreateUserModelFromEntityFull;

        public static readonly Func<User?, string?, IUserModel?> MapUserModelFromEntityLite = CreateUserModelFromEntityLite;

        public static readonly Func<User?, string?, IUserModel?> MapUserModelFromEntityList = CreateUserModelFromEntityList;

        public static Func<IUser, IUserModel, string?, IUserModel>? CreateUserModelFromEntityHooksFull { get; set; }

        public static Func<IUser, IUserModel, string?, IUserModel>? CreateUserModelFromEntityHooksLite { get; set; }

        public static Func<IUser, IUserModel, string?, IUserModel>? CreateUserModelFromEntityHooksList { get; set; }

        public static Expression<Func<User, AnonUser>>? PreBuiltUserSQLSelectorFull { get; set; }

        public static Expression<Func<User, AnonUser>>? PreBuiltUserSQLSelectorLite { get; set; }

        public static Expression<Func<User, AnonUser>>? PreBuiltUserSQLSelectorList { get; set; }

        /// <summary>An <see cref="IUserModel"/> extension method that creates a(n) <see cref="User"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="User"/> entity.</returns>
        public static IUser CreateUserEntity(
            this IUserModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IUserModel, User>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateUserFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IUserModel"/> extension method that updates a(n) <see cref="User"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="User"/> entity.</returns>
        public static IUser UpdateUserFromModel(
            this IUser entity,
            IUserModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // User Properties
            entity.AccessFailedCount = model.AccessFailedCount;
            entity.DateOfBirth = model.DateOfBirth;
            entity.DisplayName = model.DisplayName;
            entity.Email = model.Email;
            entity.EmailConfirmed = model.EmailConfirmed;
            entity.Gender = model.Gender;
            entity.IsApproved = model.IsApproved;
            entity.IsSMSAllowed = model.IsSMSAllowed;
            entity.LockoutEnabled = model.LockoutEnabled;
            entity.LockoutEndDateUtc = model.LockoutEndDateUtc;
            entity.PhoneNumber = model.PhoneNumber;
            entity.PhoneNumberConfirmed = model.PhoneNumberConfirmed;
            entity.RequirePasswordChangeOnNextLogin = model.RequirePasswordChangeOnNextLogin;
            entity.SecurityStamp = model.SecurityStamp;
            entity.TwoFactorEnabled = model.TwoFactorEnabled;
            entity.UseAutoPay = model.UseAutoPay;
            entity.UserName = model.UserName;
            // User's Related Objects
            // User's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenUserSQLSelectorFull()
        {
            PreBuiltUserSQLSelectorFull = x => x == null ? null! : new AnonUser
            {
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                TypeID = x.TypeID,
                Type = ModelMapperForUserType.PreBuiltUserTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForUserStatus.PreBuiltUserStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandUser.PreBuiltBrandUserSQLSelectorList.Expand().Compile()).ToList(),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForUserImage.PreBuiltUserImageSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForUserFile.PreBuiltUserFileSQLSelectorList.Expand().Compile()).ToList(),
                UserName = x.UserName,
                Email = x.Email,
                SecurityStamp = x.SecurityStamp,
                PhoneNumber = x.PhoneNumber,
                LockoutEndDateUtc = x.LockoutEndDateUtc,
                IsApproved = x.IsApproved,
                RequirePasswordChangeOnNextLogin = x.RequirePasswordChangeOnNextLogin,
                DisplayName = x.DisplayName,
                DateOfBirth = x.DateOfBirth,
                Gender = x.Gender,
                IsSMSAllowed = x.IsSMSAllowed,
                UseAutoPay = x.UseAutoPay,
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                PreferredStoreID = x.PreferredStoreID,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                LanguageID = x.LanguageID,
                Language = ModelMapperForLanguage.PreBuiltLanguageSQLSelectorList.Expand().Compile().Invoke(x.Language!),
                UserOnlineStatusID = x.UserOnlineStatusID,
                UserOnlineStatus = ModelMapperForUserOnlineStatus.PreBuiltUserOnlineStatusSQLSelectorList.Expand().Compile().Invoke(x.UserOnlineStatus!),
                EmailConfirmed = x.EmailConfirmed,
                PhoneNumberConfirmed = x.PhoneNumberConfirmed,
                TwoFactorEnabled = x.TwoFactorEnabled,
                LockoutEnabled = x.LockoutEnabled,
                AccessFailedCount = x.AccessFailedCount,
            };
        }

        public static void GenUserSQLSelectorLite()
        {
            PreBuiltUserSQLSelectorLite = x => x == null ? null! : new AnonUser
            {
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                TypeID = x.TypeID,
                Type = ModelMapperForUserType.PreBuiltUserTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForUserStatus.PreBuiltUserStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                UserName = x.UserName,
                Email = x.Email,
                SecurityStamp = x.SecurityStamp,
                PhoneNumber = x.PhoneNumber,
                LockoutEndDateUtc = x.LockoutEndDateUtc,
                IsApproved = x.IsApproved,
                RequirePasswordChangeOnNextLogin = x.RequirePasswordChangeOnNextLogin,
                DisplayName = x.DisplayName,
                DateOfBirth = x.DateOfBirth,
                Gender = x.Gender,
                IsSMSAllowed = x.IsSMSAllowed,
                UseAutoPay = x.UseAutoPay,
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                PreferredStoreID = x.PreferredStoreID,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                LanguageID = x.LanguageID,
                Language = ModelMapperForLanguage.PreBuiltLanguageSQLSelectorList.Expand().Compile().Invoke(x.Language!),
                UserOnlineStatusID = x.UserOnlineStatusID,
                UserOnlineStatus = ModelMapperForUserOnlineStatus.PreBuiltUserOnlineStatusSQLSelectorList.Expand().Compile().Invoke(x.UserOnlineStatus!),
                EmailConfirmed = x.EmailConfirmed,
                PhoneNumberConfirmed = x.PhoneNumberConfirmed,
                TwoFactorEnabled = x.TwoFactorEnabled,
                LockoutEnabled = x.LockoutEnabled,
                AccessFailedCount = x.AccessFailedCount,
            };
        }

        public static void GenUserSQLSelectorList()
        {
            PreBuiltUserSQLSelectorList = x => x == null ? null! : new AnonUser
            {
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                TypeID = x.TypeID,
                Type = ModelMapperForUserType.PreBuiltUserTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForUserStatus.PreBuiltUserStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                UserName = x.UserName,
                Email = x.Email,
                SecurityStamp = x.SecurityStamp,
                PhoneNumber = x.PhoneNumber,
                LockoutEndDateUtc = x.LockoutEndDateUtc,
                IsApproved = x.IsApproved,
                RequirePasswordChangeOnNextLogin = x.RequirePasswordChangeOnNextLogin,
                DisplayName = x.DisplayName,
                DateOfBirth = x.DateOfBirth,
                Gender = x.Gender,
                IsSMSAllowed = x.IsSMSAllowed,
                UseAutoPay = x.UseAutoPay,
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!), // For Flattening Properties (List)
                PreferredStoreID = x.PreferredStoreID,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!), // For Flattening Properties (List)
                LanguageID = x.LanguageID,
                Language = ModelMapperForLanguage.PreBuiltLanguageSQLSelectorList.Expand().Compile().Invoke(x.Language!), // For Flattening Properties (List)
                UserOnlineStatusID = x.UserOnlineStatusID,
                UserOnlineStatus = ModelMapperForUserOnlineStatus.PreBuiltUserOnlineStatusSQLSelectorList.Expand().Compile().Invoke(x.UserOnlineStatus!), // For Flattening Properties (List)
                EmailConfirmed = x.EmailConfirmed,
                PhoneNumberConfirmed = x.PhoneNumberConfirmed,
                TwoFactorEnabled = x.TwoFactorEnabled,
                LockoutEnabled = x.LockoutEnabled,
                AccessFailedCount = x.AccessFailedCount,
            };
        }

        public static IEnumerable<IUserModel> SelectFullUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltUserSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IUserModel> SelectLiteUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltUserSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IUserModel> SelectListUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltUserSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityList(x, contextProfileName))!;
        }

        public static IUserModel? SelectFirstFullUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IUserModel? SelectFirstListUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IUserModel? SelectSingleFullUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IUserModel? SelectSingleLiteUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IUserModel? SelectSingleListUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltUserSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateUserModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IUserModel> results, int totalPages, int totalCount) SelectFullUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltUserSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateUserModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IUserModel> results, int totalPages, int totalCount) SelectLiteUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltUserSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateUserModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IUserModel> results, int totalPages, int totalCount) SelectListUserAndMapToUserModel(
            this IQueryable<User> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltUserSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltUserSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateUserModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IUserModel? CreateUserModelFromEntityFull(this IUser? entity, string? contextProfileName)
        {
            return CreateUserModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IUserModel? CreateUserModelFromEntityLite(this IUser? entity, string? contextProfileName)
        {
            return CreateUserModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IUserModel? CreateUserModelFromEntityList(this IUser? entity, string? contextProfileName)
        {
            return CreateUserModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IUserModel? CreateUserModelFromEntity(
            this IUser? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IUserModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForUserType.CreateUserTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForUserStatus.CreateUserStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonUser ? ((AnonUser)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // User's Properties
                    // User's Related Objects
                    model.Account = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Account, contextProfileName);
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    model.Currency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.Currency, contextProfileName);
                    model.Language = ModelMapperForLanguage.CreateLanguageModelFromEntityLite(entity.Language, contextProfileName);
                    model.Type = ModelMapperForUserType.CreateUserTypeModelFromEntityLite(entity.Type, contextProfileName);
                    model.UserOnlineStatus = ModelMapperForUserOnlineStatus.CreateUserOnlineStatusModelFromEntityLite(entity.UserOnlineStatus, contextProfileName);
                    // User's Associated Objects
                    model.Brands = (entity is AnonUser ? ((AnonUser)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandUser.CreateBrandUserModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonUser ? ((AnonUser)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForUserImage.CreateUserImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonUser ? ((AnonUser)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForUserFile.CreateUserFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateUserModelFromEntityHooksFull != null) { model = CreateUserModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // User's Properties
                    // User's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // User's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateUserModelFromEntityHooksLite != null) { model = CreateUserModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // User's Properties
                    model.AccessFailedCount = entity.AccessFailedCount;
                    model.DateOfBirth = entity.DateOfBirth;
                    model.DisplayName = entity.DisplayName;
                    model.Email = entity.Email;
                    model.EmailConfirmed = entity.EmailConfirmed;
                    model.Gender = entity.Gender;
                    model.IsApproved = entity.IsApproved;
                    model.IsSMSAllowed = entity.IsSMSAllowed;
                    model.LockoutEnabled = entity.LockoutEnabled;
                    model.LockoutEndDateUtc = entity.LockoutEndDateUtc;
                    model.PhoneNumber = entity.PhoneNumber;
                    model.PhoneNumberConfirmed = entity.PhoneNumberConfirmed;
                    model.RequirePasswordChangeOnNextLogin = entity.RequirePasswordChangeOnNextLogin;
                    model.SecurityStamp = entity.SecurityStamp;
                    model.TwoFactorEnabled = entity.TwoFactorEnabled;
                    model.UseAutoPay = entity.UseAutoPay;
                    model.UserName = entity.UserName;
                    // User's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountID = entity.AccountID;
                    model.AccountKey = entity.Account?.CustomKey;
                    model.AccountName = entity.Account?.Name;
                    model.ContactID = entity.ContactID;
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    model.CurrencyID = entity.CurrencyID;
                    model.CurrencyKey = entity.Currency?.CustomKey;
                    model.CurrencyName = entity.Currency?.Name;
                    model.LanguageID = entity.LanguageID;
                    model.LanguageKey = entity.Language?.CustomKey;
                    model.TypeID = entity.TypeID;
                    model.TypeKey = entity.Type?.CustomKey;
                    model.TypeName = entity.Type?.Name;
                    model.TypeDisplayName = entity.Type?.DisplayName;
                    model.TypeTranslationKey = entity.Type?.TranslationKey;
                    model.TypeSortOrder = entity.Type?.SortOrder;
                    model.UserOnlineStatusID = entity.UserOnlineStatusID;
                    model.UserOnlineStatusKey = entity.UserOnlineStatus?.CustomKey;
                    model.UserOnlineStatusName = entity.UserOnlineStatus?.Name;
                    // User's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateUserModelFromEntityHooksList != null) { model = CreateUserModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
