// <autogenerated>
// <copyright file="Mapping.Contacts.ProfanityFilter.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Contacts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForProfanityFilter
    {
        public sealed class AnonProfanityFilter : ProfanityFilter
        {
        }

        public static readonly Func<ProfanityFilter?, string?, IProfanityFilterModel?> MapProfanityFilterModelFromEntityFull = CreateProfanityFilterModelFromEntityFull;

        public static readonly Func<ProfanityFilter?, string?, IProfanityFilterModel?> MapProfanityFilterModelFromEntityLite = CreateProfanityFilterModelFromEntityLite;

        public static readonly Func<ProfanityFilter?, string?, IProfanityFilterModel?> MapProfanityFilterModelFromEntityList = CreateProfanityFilterModelFromEntityList;

        public static Func<IProfanityFilter, IProfanityFilterModel, string?, IProfanityFilterModel>? CreateProfanityFilterModelFromEntityHooksFull { get; set; }

        public static Func<IProfanityFilter, IProfanityFilterModel, string?, IProfanityFilterModel>? CreateProfanityFilterModelFromEntityHooksLite { get; set; }

        public static Func<IProfanityFilter, IProfanityFilterModel, string?, IProfanityFilterModel>? CreateProfanityFilterModelFromEntityHooksList { get; set; }

        public static Expression<Func<ProfanityFilter, AnonProfanityFilter>>? PreBuiltProfanityFilterSQLSelectorFull { get; set; }

        public static Expression<Func<ProfanityFilter, AnonProfanityFilter>>? PreBuiltProfanityFilterSQLSelectorLite { get; set; }

        public static Expression<Func<ProfanityFilter, AnonProfanityFilter>>? PreBuiltProfanityFilterSQLSelectorList { get; set; }

        /// <summary>An <see cref="IProfanityFilterModel"/> extension method that creates a(n) <see cref="ProfanityFilter"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ProfanityFilter"/> entity.</returns>
        public static IProfanityFilter CreateProfanityFilterEntity(
            this IProfanityFilterModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IProfanityFilterModel, ProfanityFilter>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateProfanityFilterFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IProfanityFilterModel"/> extension method that updates a(n) <see cref="ProfanityFilter"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ProfanityFilter"/> entity.</returns>
        public static IProfanityFilter UpdateProfanityFilterFromModel(
            this IProfanityFilter entity,
            IProfanityFilterModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenProfanityFilterSQLSelectorFull()
        {
            PreBuiltProfanityFilterSQLSelectorFull = x => x == null ? null! : new AnonProfanityFilter
            {
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProfanityFilterSQLSelectorLite()
        {
            PreBuiltProfanityFilterSQLSelectorLite = x => x == null ? null! : new AnonProfanityFilter
            {
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProfanityFilterSQLSelectorList()
        {
            PreBuiltProfanityFilterSQLSelectorList = x => x == null ? null! : new AnonProfanityFilter
            {
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IProfanityFilterModel> SelectFullProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProfanityFilterSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IProfanityFilterModel> SelectLiteProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProfanityFilterSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IProfanityFilterModel> SelectListProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProfanityFilterSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityList(x, contextProfileName))!;
        }

        public static IProfanityFilterModel? SelectFirstFullProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProfanityFilterSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProfanityFilterModel? SelectFirstListProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProfanityFilterSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProfanityFilterModel? SelectSingleFullProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProfanityFilterSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProfanityFilterModel? SelectSingleLiteProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProfanityFilterSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProfanityFilterModel? SelectSingleListProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProfanityFilterSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProfanityFilterModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IProfanityFilterModel> results, int totalPages, int totalCount) SelectFullProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProfanityFilterSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateProfanityFilterModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProfanityFilterModel> results, int totalPages, int totalCount) SelectLiteProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProfanityFilterSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateProfanityFilterModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProfanityFilterModel> results, int totalPages, int totalCount) SelectListProfanityFilterAndMapToProfanityFilterModel(
            this IQueryable<ProfanityFilter> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProfanityFilterSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProfanityFilterSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateProfanityFilterModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IProfanityFilterModel? CreateProfanityFilterModelFromEntityFull(this IProfanityFilter? entity, string? contextProfileName)
        {
            return CreateProfanityFilterModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IProfanityFilterModel? CreateProfanityFilterModelFromEntityLite(this IProfanityFilter? entity, string? contextProfileName)
        {
            return CreateProfanityFilterModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IProfanityFilterModel? CreateProfanityFilterModelFromEntityList(this IProfanityFilter? entity, string? contextProfileName)
        {
            return CreateProfanityFilterModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IProfanityFilterModel? CreateProfanityFilterModelFromEntity(
            this IProfanityFilter? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IProfanityFilterModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProfanityFilter's Properties
                    // ProfanityFilter's Related Objects
                    // ProfanityFilter's Associated Objects
                    // Additional Mappings
                    if (CreateProfanityFilterModelFromEntityHooksFull != null) { model = CreateProfanityFilterModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProfanityFilter's Properties
                    // ProfanityFilter's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ProfanityFilter's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProfanityFilterModelFromEntityHooksLite != null) { model = CreateProfanityFilterModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ProfanityFilter's Properties
                    // ProfanityFilter's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ProfanityFilter's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProfanityFilterModelFromEntityHooksList != null) { model = CreateProfanityFilterModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
