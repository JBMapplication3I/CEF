// <autogenerated>
// <copyright file="Mapping.Contacts.ReferralCode.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Contacts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForReferralCode
    {
        public sealed class AnonReferralCode : ReferralCode
        {
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<ReferralCode?, string?, IReferralCodeModel?> MapReferralCodeModelFromEntityFull = CreateReferralCodeModelFromEntityFull;

        public static readonly Func<ReferralCode?, string?, IReferralCodeModel?> MapReferralCodeModelFromEntityLite = CreateReferralCodeModelFromEntityLite;

        public static readonly Func<ReferralCode?, string?, IReferralCodeModel?> MapReferralCodeModelFromEntityList = CreateReferralCodeModelFromEntityList;

        public static Func<IReferralCode, IReferralCodeModel, string?, IReferralCodeModel>? CreateReferralCodeModelFromEntityHooksFull { get; set; }

        public static Func<IReferralCode, IReferralCodeModel, string?, IReferralCodeModel>? CreateReferralCodeModelFromEntityHooksLite { get; set; }

        public static Func<IReferralCode, IReferralCodeModel, string?, IReferralCodeModel>? CreateReferralCodeModelFromEntityHooksList { get; set; }

        public static Expression<Func<ReferralCode, AnonReferralCode>>? PreBuiltReferralCodeSQLSelectorFull { get; set; }

        public static Expression<Func<ReferralCode, AnonReferralCode>>? PreBuiltReferralCodeSQLSelectorLite { get; set; }

        public static Expression<Func<ReferralCode, AnonReferralCode>>? PreBuiltReferralCodeSQLSelectorList { get; set; }

        /// <summary>An <see cref="IReferralCodeModel"/> extension method that creates a(n) <see cref="ReferralCode"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ReferralCode"/> entity.</returns>
        public static IReferralCode CreateReferralCodeEntity(
            this IReferralCodeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IReferralCodeModel, ReferralCode>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateReferralCodeFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IReferralCodeModel"/> extension method that updates a(n) <see cref="ReferralCode"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ReferralCode"/> entity.</returns>
        public static IReferralCode UpdateReferralCodeFromModel(
            this IReferralCode entity,
            IReferralCodeModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ReferralCode Properties
            entity.Code = model.Code;
            // ReferralCode's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenReferralCodeSQLSelectorFull()
        {
            PreBuiltReferralCodeSQLSelectorFull = x => x == null ? null! : new AnonReferralCode
            {
                TypeID = x.TypeID,
                Type = ModelMapperForReferralCodeType.PreBuiltReferralCodeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForReferralCodeStatus.PreBuiltReferralCodeStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                Code = x.Code,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenReferralCodeSQLSelectorLite()
        {
            PreBuiltReferralCodeSQLSelectorLite = x => x == null ? null! : new AnonReferralCode
            {
                TypeID = x.TypeID,
                Type = ModelMapperForReferralCodeType.PreBuiltReferralCodeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForReferralCodeStatus.PreBuiltReferralCodeStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                Code = x.Code,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenReferralCodeSQLSelectorList()
        {
            PreBuiltReferralCodeSQLSelectorList = x => x == null ? null! : new AnonReferralCode
            {
                TypeID = x.TypeID,
                Type = ModelMapperForReferralCodeType.PreBuiltReferralCodeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForReferralCodeStatus.PreBuiltReferralCodeStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                Code = x.Code,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IReferralCodeModel> SelectFullReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReferralCodeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IReferralCodeModel> SelectLiteReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReferralCodeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IReferralCodeModel> SelectListReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReferralCodeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityList(x, contextProfileName))!;
        }

        public static IReferralCodeModel? SelectFirstFullReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReferralCodeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IReferralCodeModel? SelectFirstListReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReferralCodeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IReferralCodeModel? SelectSingleFullReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReferralCodeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IReferralCodeModel? SelectSingleLiteReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReferralCodeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IReferralCodeModel? SelectSingleListReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReferralCodeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReferralCodeModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IReferralCodeModel> results, int totalPages, int totalCount) SelectFullReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReferralCodeSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateReferralCodeModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IReferralCodeModel> results, int totalPages, int totalCount) SelectLiteReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReferralCodeSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateReferralCodeModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IReferralCodeModel> results, int totalPages, int totalCount) SelectListReferralCodeAndMapToReferralCodeModel(
            this IQueryable<ReferralCode> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReferralCodeSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReferralCodeSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateReferralCodeModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IReferralCodeModel? CreateReferralCodeModelFromEntityFull(this IReferralCode? entity, string? contextProfileName)
        {
            return CreateReferralCodeModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IReferralCodeModel? CreateReferralCodeModelFromEntityLite(this IReferralCode? entity, string? contextProfileName)
        {
            return CreateReferralCodeModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IReferralCodeModel? CreateReferralCodeModelFromEntityList(this IReferralCode? entity, string? contextProfileName)
        {
            return CreateReferralCodeModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IReferralCodeModel? CreateReferralCodeModelFromEntity(
            this IReferralCode? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IReferralCodeModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForReferralCodeType.CreateReferralCodeTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForReferralCodeStatus.CreateReferralCodeStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // ReferralCode's Properties
                    // ReferralCode's Related Objects
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // ReferralCode's Associated Objects
                    // Additional Mappings
                    if (CreateReferralCodeModelFromEntityHooksFull != null) { model = CreateReferralCodeModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ReferralCode's Properties
                    // ReferralCode's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ReferralCode's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateReferralCodeModelFromEntityHooksLite != null) { model = CreateReferralCodeModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ReferralCode's Properties
                    model.Code = entity.Code;
                    // ReferralCode's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    model.UserUserName = entity.User?.UserName;
                    // ReferralCode's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateReferralCodeModelFromEntityHooksList != null) { model = CreateReferralCodeModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
