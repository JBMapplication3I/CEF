// <autogenerated>
// <copyright file="Mapping.Returning.SalesReturnItem.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Returning section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForSalesReturnItem
    {
        public sealed class AnonSalesReturnItem : SalesReturnItem
        {
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<SalesReturnItemTarget>? Targets { get; set; }
            public Contact? UserContact { get; set; }
            // public new SalesReturn? Master { get; set; }
        }

        public static readonly Func<SalesReturnItem?, string?, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>?> MapSalesReturnItemModelFromEntityFull = CreateSalesReturnItemModelFromEntityFull;

        public static readonly Func<SalesReturnItem?, string?, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>?> MapSalesReturnItemModelFromEntityLite = CreateSalesReturnItemModelFromEntityLite;

        public static readonly Func<SalesReturnItem?, string?, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>?> MapSalesReturnItemModelFromEntityList = CreateSalesReturnItemModelFromEntityList;

        public static Func<ISalesReturnItem, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>, string?, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>>? CreateSalesReturnItemModelFromEntityHooksFull { get; set; }

        public static Func<ISalesReturnItem, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>, string?, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>>? CreateSalesReturnItemModelFromEntityHooksLite { get; set; }

        public static Func<ISalesReturnItem, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>, string?, ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>>? CreateSalesReturnItemModelFromEntityHooksList { get; set; }

        public static Expression<Func<SalesReturnItem, AnonSalesReturnItem>>? PreBuiltSalesReturnItemSQLSelectorFull { get; set; }

        public static Expression<Func<SalesReturnItem, AnonSalesReturnItem>>? PreBuiltSalesReturnItemSQLSelectorLite { get; set; }

        public static Expression<Func<SalesReturnItem, AnonSalesReturnItem>>? PreBuiltSalesReturnItemSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISalesItemBaseModel"/> extension method that creates a(n) <see cref="SalesReturnItem"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="SalesReturnItem"/> entity.</returns>
        public static ISalesReturnItem CreateSalesReturnItemEntity(
            this ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel> model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ISalesItemBaseModel, SalesReturnItem>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateSalesReturnItemFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISalesItemBaseModel"/> extension method that updates a(n) <see cref="SalesReturnItem"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="SalesReturnItem"/> entity.</returns>
        public static ISalesReturnItem UpdateSalesReturnItemFromModel(
            this ISalesReturnItem entity,
            ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel> model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ISalesItemBase Properties
            entity.Quantity = model.Quantity;
            entity.QuantityBackOrdered = model.QuantityBackOrdered ?? 0m;
            entity.QuantityPreSold = model.QuantityPreSold ?? 0m;
            entity.UnitCorePrice = model.UnitCorePrice;
            entity.UnitSoldPrice = model.UnitSoldPrice;
            entity.UnitCorePriceInSellingCurrency = model.UnitCorePriceInSellingCurrency;
            entity.UnitSoldPriceInSellingCurrency = model.UnitSoldPriceInSellingCurrency;
            entity.Sku = model.Sku;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            entity.ForceUniqueLineItemKey = model.ForceUniqueLineItemKey;
            // SalesReturnItem Properties
            entity.RestockingFeeAmount = model.RestockingFeeAmount;
            // SalesReturnItem's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenSalesReturnItemSQLSelectorFull()
        {
            PreBuiltSalesReturnItemSQLSelectorFull = x => x == null ? null! : new AnonSalesReturnItem
            {
                RestockingFeeAmount = x.RestockingFeeAmount,
                SalesReturnReasonID = x.SalesReturnReasonID,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Sku = x.Sku,
                UnitOfMeasure = x.UnitOfMeasure,
                ForceUniqueLineItemKey = x.ForceUniqueLineItemKey,
                Quantity = x.Quantity,
                QuantityBackOrdered = x.QuantityBackOrdered,
                QuantityPreSold = x.QuantityPreSold,
                UnitCorePrice = x.UnitCorePrice,
                UnitSoldPrice = x.UnitSoldPrice,
                UnitCorePriceInSellingCurrency = x.UnitCorePriceInSellingCurrency,
                UnitSoldPriceInSellingCurrency = x.UnitSoldPriceInSellingCurrency,
                Status = x.Status,
                MasterID = x.MasterID,
                OriginalCurrencyID = x.OriginalCurrencyID,
                OriginalCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.OriginalCurrency!),
                SellingCurrencyID = x.SellingCurrencyID,
                SellingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.SellingCurrency!),
                Targets = x.Targets!.Where(y => y.Active).Select(ModelMapperForSalesReturnItemTarget.PreBuiltSalesReturnItemTargetSQLSelectorList.Expand().Compile()).ToList(),
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSalesReturnItemSQLSelectorLite()
        {
            PreBuiltSalesReturnItemSQLSelectorLite = x => x == null ? null! : new AnonSalesReturnItem
            {
                RestockingFeeAmount = x.RestockingFeeAmount,
                SalesReturnReasonID = x.SalesReturnReasonID,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Sku = x.Sku,
                UnitOfMeasure = x.UnitOfMeasure,
                ForceUniqueLineItemKey = x.ForceUniqueLineItemKey,
                Quantity = x.Quantity,
                QuantityBackOrdered = x.QuantityBackOrdered,
                QuantityPreSold = x.QuantityPreSold,
                UnitCorePrice = x.UnitCorePrice,
                UnitSoldPrice = x.UnitSoldPrice,
                UnitCorePriceInSellingCurrency = x.UnitCorePriceInSellingCurrency,
                UnitSoldPriceInSellingCurrency = x.UnitSoldPriceInSellingCurrency,
                Status = x.Status,
                MasterID = x.MasterID,
                OriginalCurrencyID = x.OriginalCurrencyID,
                OriginalCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.OriginalCurrency!),
                SellingCurrencyID = x.SellingCurrencyID,
                SellingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.SellingCurrency!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSalesReturnItemSQLSelectorList()
        {
            PreBuiltSalesReturnItemSQLSelectorList = x => x == null ? null! : new AnonSalesReturnItem
            {
                RestockingFeeAmount = x.RestockingFeeAmount,
                SalesReturnReasonID = x.SalesReturnReasonID,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                Sku = x.Sku,
                UnitOfMeasure = x.UnitOfMeasure,
                ForceUniqueLineItemKey = x.ForceUniqueLineItemKey,
                Quantity = x.Quantity,
                QuantityBackOrdered = x.QuantityBackOrdered,
                QuantityPreSold = x.QuantityPreSold,
                UnitCorePrice = x.UnitCorePrice,
                UnitSoldPrice = x.UnitSoldPrice,
                UnitCorePriceInSellingCurrency = x.UnitCorePriceInSellingCurrency,
                UnitSoldPriceInSellingCurrency = x.UnitSoldPriceInSellingCurrency,
                Status = x.Status,
                MasterID = x.MasterID,
                OriginalCurrencyID = x.OriginalCurrencyID,
                OriginalCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.OriginalCurrency!), // For Flattening Properties (List)
                SellingCurrencyID = x.SellingCurrencyID,
                SellingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.SellingCurrency!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>> SelectFullSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesReturnItemSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>> SelectLiteSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesReturnItemSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>> SelectListSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesReturnItemSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityList(x, contextProfileName))!;
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? SelectFirstFullSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesReturnItemSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? SelectFirstListSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesReturnItemSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? SelectSingleFullSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesReturnItemSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? SelectSingleLiteSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesReturnItemSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? SelectSingleListSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesReturnItemSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesReturnItemModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>> results, int totalPages, int totalCount) SelectFullSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesReturnItemSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateSalesReturnItemModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>> results, int totalPages, int totalCount) SelectLiteSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesReturnItemSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateSalesReturnItemModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>> results, int totalPages, int totalCount) SelectListSalesReturnItemAndMapToSalesItemBaseModel(
            this IQueryable<SalesReturnItem> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesReturnItemSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesReturnItemSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateSalesReturnItemModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? CreateSalesReturnItemModelFromEntityFull(this ISalesReturnItem? entity, string? contextProfileName)
        {
            return CreateSalesReturnItemModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? CreateSalesReturnItemModelFromEntityLite(this ISalesReturnItem? entity, string? contextProfileName)
        {
            return CreateSalesReturnItemModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? CreateSalesReturnItemModelFromEntityList(this ISalesReturnItem? entity, string? contextProfileName)
        {
            return CreateSalesReturnItemModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>? CreateSalesReturnItemModelFromEntity(
            this ISalesReturnItem? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapSalesItemBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ISalesItemBase<,,,,> Properties
                    model.Discounts = (entity is AnonSalesReturnItem ? ((AnonSalesReturnItem)entity).Discounts : entity.Discounts)?.Where(x => x.Active).Select(x => ModelMapperForAppliedSalesReturnItemDiscount.CreateAppliedSalesReturnItemDiscountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Targets = (entity is AnonSalesReturnItem ? ((AnonSalesReturnItem)entity).Targets : entity.Targets)?.Where(x => x.Active).Select(x => ModelMapperForSalesReturnItemTarget.CreateSalesReturnItemTargetModelFromEntityList(x, contextProfileName)).ToList()!;
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonSalesReturnItem ? ((AnonSalesReturnItem)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // SalesReturnItem's Properties
                    // SalesReturnItem's Related Objects
                    // SalesReturnItem's Associated Objects
                    // Additional Mappings
                    if (CreateSalesReturnItemModelFromEntityHooksFull != null) { model = CreateSalesReturnItemModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // SalesReturnItem's Properties
                    // SalesReturnItem's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // SalesReturnItem's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSalesReturnItemModelFromEntityHooksLite != null) { model = CreateSalesReturnItemModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // SalesReturnItem's Properties
                    model.RestockingFeeAmount = entity.RestockingFeeAmount;
                    // SalesReturnItem's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // SalesReturnItem's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSalesReturnItemModelFromEntityHooksList != null) { model = CreateSalesReturnItemModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
