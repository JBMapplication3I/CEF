<#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Diagnostics"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.Models"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ import namespace="Clarity.Ecommerce.Models"
#><#@ import namespace="System.Reflection"
#><#+
void AppendFlatteningProperties(MapResults mapResults, string theTypeName, string relatedPropertyName, string relatedPropertyTypeName)
{
    try
    {
        var modelInterface = AppDomain.CurrentDomain.GetAssemblies()
            .Where(x => x.FullName.Contains("Clarity.Ecommerce"))
            .SelectMany(x => x.GetTypes().Where(t => t.Name == "I" + HelpFunctions.SwapToModelType(theTypeName) + "Model"))
            .FirstOrDefault();
        if (modelInterface == null) { return; }
        PropertyInfo[] publicProperties = modelInterface.GetPublicProperties();
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "Key" || x.Name == relatedPropertyName + "CustomKey")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "Key" || x.Name == relatedPropertyName + "CustomKey");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.CustomKey;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "Name")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "Name");
            if (relatedPropertyName == "User")
            {
                mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.UserName;", keyProperty.Name, relatedPropertyName));
                mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            }
            else
            {
                mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.Name;", keyProperty.Name, relatedPropertyName));
                mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            }
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "DisplayName")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "DisplayName");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.DisplayName;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "TranslationKey")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "TranslationKey");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.TranslationKey;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "SortOrder")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "SortOrder");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.SortOrder;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "Code")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "Code");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.Code;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "PrimaryImageFileName")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "PrimaryImageFileName");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = (entity is Anon{2} ? ((Anon{2})entity).{1}?.Images : entity.{1}?.Images)?.Where(img => img.Active).OrderByDescending(img => img.IsPrimary).ThenByDescending(img => img.OriginalWidth).Take(1).Select(img => img.ThumbnailFileName ?? img.OriginalFileName).FirstOrDefault();", keyProperty.Name, relatedPropertyName, theTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "SerializableAttributes")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "SerializableAttributes");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.SerializableAttributes;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "SeoUrl")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "SeoUrl");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.SeoUrl;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "IsVisible")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "IsVisible");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.IsVisible ?? false;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "UserName")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "UserName");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.UserName;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "ContactPhone")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "ContactPhone");
            mapResults.DoSafeAnonCast = true;
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity is Anon{2} ? ((Anon{2})entity).{1}Contact?.Phone1 : entity.{1}?.Contact?.Phone1;", keyProperty.Name, relatedPropertyName, theTypeName));
            mapResults.AsExprMapsList.Add(string.Format("{0}Contact = x.{0} == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.{0}.Contact!),", relatedPropertyName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (relatedPropertyName == "Contact" && publicProperties.Any(x => x.Name == "ContactPhone")) {
            var keyProperty = publicProperties.First(x => x.Name == "ContactPhone");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.Phone1;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "ContactFax")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "ContactFax");
            mapResults.DoSafeAnonCast = true;
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity is Anon{2} ? ((Anon{2})entity).{1}Contact?.Fax1 : entity.{1}?.Contact?.Fax1;", keyProperty.Name, relatedPropertyName, theTypeName));
            mapResults.AsExprMapsList.Add(string.Format("{0}Contact = x.{0} == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.{0}.Contact!),", relatedPropertyName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (relatedPropertyName == "Contact" && publicProperties.Any(x => x.Name == "ContactFax")) {
            var keyProperty = publicProperties.First(x => x.Name == "ContactFax");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.Fax1;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "ContactEmail")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "ContactEmail");
            mapResults.DoSafeAnonCast = true;
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity is Anon{2} ? ((Anon{2})entity).{1}Contact?.Email1 : entity.{1}?.Contact?.Email1;", keyProperty.Name, relatedPropertyName, theTypeName));
            mapResults.AsExprMapsList.Add(string.Format("{0}Contact = x.{0} == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.{0}.Contact!),", relatedPropertyName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (relatedPropertyName == "Contact" && publicProperties.Any(x => x.Name == "ContactEmail")) {
            var keyProperty = publicProperties.First(x => x.Name == "ContactEmail");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.Email1;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "ContactFirstName")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "ContactFirstName");
            mapResults.DoSafeAnonCast = true;
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity is Anon{2} ? ((Anon{2})entity).{1}Contact?.FirstName : entity.{1}?.Contact?.FirstName;", keyProperty.Name, relatedPropertyName, theTypeName));
            mapResults.AsExprMapsList.Add(string.Format("{0}Contact = x.{0} == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.{0}.Contact!),", relatedPropertyName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (relatedPropertyName == "Contact" && publicProperties.Any(x => x.Name == "ContactFirstName")) {
            var keyProperty = publicProperties.First(x => x.Name == "ContactFirstName");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.FirstName;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "ContactLastName")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "ContactLastName");
            mapResults.DoSafeAnonCast = true;
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity is Anon{2} ? ((Anon{2})entity).{1}Contact?.LastName : entity.{1}?.Contact?.LastName;", keyProperty.Name, relatedPropertyName, theTypeName));
            mapResults.AsExprMapsList.Add(string.Format("{0}Contact = x.{0} == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.{0}.Contact!),", relatedPropertyName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (relatedPropertyName == "Contact" && publicProperties.Any(x => x.Name == "ContactLastName")) {
            var keyProperty = publicProperties.First(x => x.Name == "ContactLastName");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.LastName;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "InventoryLocationID")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "InventoryLocationID");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.InventoryLocationID;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "InventoryLocationKey")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "InventoryLocationKey");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.InventoryLocation?.CustomKey;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
        if (publicProperties.Any(x => x.Name == relatedPropertyName + "InventoryLocationName")) {
            var keyProperty = publicProperties.First(x => x.Name == relatedPropertyName + "InventoryLocationName");
            mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{1}?.InventoryLocation?.Name;", keyProperty.Name, relatedPropertyName));
            mapResults.AsExprMapsList.Add(string.Format("{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),", relatedPropertyName, relatedPropertyTypeName));
            mapResults.ProcessedProperties.Add(keyProperty);
        }
    }
    catch (ReflectionTypeLoadException ex)
    {
        foreach(var le in ex.LoaderExceptions)
        {
            #>// <#= le.ToString() #>
<#+
        }
    }
}
bool RelatedTypeTypeNeedsSpecialHandling(TypeDeterminer td)
{
    if (td.RelatedTypeType == null) { return false; }
    return td.RelatedTypeType.Name == "CategoryType"
        || td.RelatedTypeType.Name == "UserType"
        || td.RelatedTypeType.Name == "ReportType"
        || td.RelatedTypeType.Name == "NoteType";
}
List<PropertyInfo> DetermineProcessedPropertiesBasedOnInterfaces(TypeDeterminer td, Type theType)
{
    var processedProperties = new List<PropertyInfo>();
    if (theType.Name == "User")
    {
        // ASP.NET Identity Properties
        var properties = new[]
        {
            "Id",
            "Roles",
            "Claims",
            "Logins",
            "PasswordHash",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (theType.Name == "Account")
    {
        var properties = new[]
        {
            "AccountUserRoles",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIBase)
    {
        var properties = new[]
        {
            "ID",
            "CustomKey",
            "Active",
            "CreatedDate",
            "UpdatedDate",
            "Hash",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsINameableBase)
    {
        var properties = new[]
        {
            "Name",
            "Description",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIDisplayableBase)
    {
        var properties = new[]
        {
            "DisplayName",
            "SortOrder",
            "TranslationKey",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIAppliedDiscountBase)
    {
        var properties = new[]
        {
            "DiscountTotal",
            "ApplicationsUsed",
            "TargetApplicationsUsed",
            "MasterID",
            "Master",
            "SlaveID",
            "SlaveKey",
            "SlaveName",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveAParentBase)
    {
        var properties = new[]
        {
            "ParentID",
            "Parent",
            "Children",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveAStatusBase)
    {
        var properties = new[]
        {
            "StatusID",
            "Status",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveAStateBase)
    {
        var properties = new[]
        {
            "StateID",
            "State",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveATypeBase && !RelatedTypeTypeNeedsSpecialHandling(td))
    {
        var properties = new[]
        {
            "TypeID",
            "Type",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveAContactBase)
    {
        var properties = new[]
        {
            "ContactID",
            // "Contact",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveANullableContactBase)
    {
        var properties = new[]
        {
            "ContactID",
            // "Contact",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveJsonAttributesBase)
    {
        var properties = new[]
        {
            "JsonAttributes",
            "SerializableAttributes",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveRequiresRolesBase)
    {
        var properties = new[]
        {
            "RequiresRoles",
            "RequiresRolesAlt",
            "RequiresRolesList",
            "RequiresRolesListAlt",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIHaveNotesBase)
    {
        var properties = new[]
        {
            "Notes",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIAmARelationshipTable)
    {
        var properties = new[]
        {
            "Master",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIAmAStoredFileRelationshipTable)
    {
        var properties = new[]
        {
            "Master",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIAmAContactRelationshipTable)
    {
        var properties = new[]
        {
            "Master",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIAmADiscountFilterRelationshipTable)
    {
        var properties = new[]
        {
            "DiscountID",
            "Discount",
            "MasterID",
            "Master",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsIObjectNoteBase)
    {
        var properties = new[]
        {
            "MasterID",
            "Master",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsISalesCollectionBaseT)
    {
        var properties = new[]
        {
            "Status",
            "State",
            "Type",
            "SalesItems",
            "StoredFiles",
            "Contacts",
            "Discounts",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsISalesCollectionBase)
    {
        var properties = new[]
        {
            "DueDate",
            "SubtotalItems",
            "SubtotalShipping",
            "SubtotalTaxes",
            "SubtotalFees",
            "SubtotalHandling",
            "SubtotalDiscounts",
            "Total",
            "ShippingSameAsBilling",
            "AccountKey",
            "StatusID",
            "StatusKey",
            "TypeID",
            "TypeKey",
            "StateID",
            "BillingContactID",
            "BillingContact",
            "ShippingContactID",
            "ShippingContact",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsISalesItemBase)
    {
        var properties = new[]
        {
            "Quantity",
            "QuantityBackOrdered",
            "QuantityPreSold",
            "TotalQuantity", // Read Only
            "UnitCorePrice",
            "UnitSoldPrice",
            "UnitCorePriceInSellingCurrency",
            "UnitSoldPriceInSellingCurrency",
            "Sku",
            "UnitOfMeasure",
            "ForceUniqueLineItemKey",
            "MasterID",
            "Master",
            "ProductID",
            "Product",
            "UserID",
            "User",
            "OriginalCurrencyID",
            "OriginalCurrency",
            "SellingCurrencyID",
            "SellingCurrency",
            "StatusID",
            "Status",
            "Notes",
            "Discounts",
            "Targets",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (td.IsISalesEventBase)
    {
        var properties = new[]
        {
            "MasterID", "Master",
            "OldHash", "OldStateID", "OldStatusID", "OldTypeID", "OldRecordSerialized",
            "NewHash", "NewStateID", "NewStatusID", "NewTypeID", "NewRecordSerialized",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (theType.Name == typeof(Store).Name)
    {
        var properties = new[]
        {
            "LogoImageLibraryID",
            "LogoImageLibrary",
            "SellerImageLibraryID",
            "SellerImageLibrary",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    if (theType.Name == typeof(Lot).Name)
    {
        var properties = new[]
        {
            "TotalQuantity",
        };
        processedProperties.AddRange(theType.GetProperties().Where(x => properties.Contains(x.Name)));
    }
    return processedProperties;
}
bool IsSimplePropertyReturnType(Type returnType, string propertyName)
{
    return !propertyName.EndsWith("ID")
        && (returnType == typeof(int)
            || returnType == typeof(int?)
            || returnType == typeof(string)
            || returnType == typeof(decimal)
            || returnType == typeof(decimal?)
            || returnType == typeof(bool)
            || returnType == typeof(bool?)
            || returnType == typeof(long)
            || returnType == typeof(long?)
            || returnType == typeof(byte)
            || returnType == typeof(byte?)
            || returnType == typeof(byte[])
            || returnType == typeof(Guid)
            || returnType == typeof(Guid?)
            || returnType == typeof(DateTime)
            || returnType == typeof(DateTime?));
}
bool SharedIDPropertyRequiresSpecialHandling(PropertyInfo relatedProperty)
{
    return relatedProperty.GetMethod.ReturnType.Name == typeof(Contact).Name;
}
MapResults ProcessSimpleProperty(PropertyInfo property, ForceOrDontMapResults forceOrDont)
{
    var propertyName = property.Name;
    var toEntity = string.Format("entity.{0} = model.{0};", propertyName);
    var template = string.Format("model.{0} = entity.{0};", propertyName);
    // BEGIN Exceptions To the Rule
    if (propertyName == "EncryptedPassword") {
        toEntity = "entity.EncryptedPassword = model.Password != null ? Encryption.CMSApiEncoder.Encrypt(model.Password) : null;";
        template = "model.Password = entity.EncryptedPassword != null ? Encryption.CMSApiEncoder.Decrypt(entity.EncryptedPassword) : null;";
    }
    if (propertyName == "DiscountCompareOperator") {
        toEntity = "entity.DiscountCompareOperator = (int)model.DiscountCompareOperator;";
        template = "model.DiscountCompareOperator = (Enums.CompareOperator)(entity.DiscountCompareOperator ?? 0);";
    }
    // END Exceptions to the Rule
    var mapResults = new MapResults("1: Simples");
    mapResults.Parameters.Add(HelpFunctions.SwapToSimpleType(property.GetMethod.ReturnType) + " " + HelpFunctions.LowerFirstCharacter(propertyName));
    if (!forceOrDont.DontMapInEver) {
        mapResults.ToEntityMaps.Add(toEntity);
    }
    // To Model
    if (!forceOrDont.DontMapOutEver) {
        if (forceOrDont.DontMapOutWithList && forceOrDont.DontMapOutWithLite) {
            mapResults.ToModelMapsFull.Add(template);
        } else if (forceOrDont.DontMapOutWithList && !forceOrDont.DontMapOutWithLite) {
            mapResults.ToModelMapsLite.Add(template);
        } else {
            mapResults.ToModelMapsList.Add(template);
        }
    }
    return mapResults;
}
void AppendRelatedDecision(MapResults mapResults, ForceOrDontMapResults forceOrDont, string template, string theTypeName, string relatedPropertyName, string relatedPropertyTypeName)
{
    if (forceOrDont.DontMapOutEver) { return; }
    if (forceOrDont.ForceMapOutWithList) {
        mapResults.ToModelMapsList.Add(template);
    } else if (!forceOrDont.DontMapOutWithLite && forceOrDont.ForceMapOutWithLite) {
        mapResults.ToModelMapsLite.Add(template);
    } else {
        mapResults.ToModelMapsFull.Add(template);
    }
    AppendFlatteningProperties(mapResults, theTypeName, relatedPropertyName, relatedPropertyTypeName);
}
void AppendAssociatedDecision(MapResults mapResults, ForceOrDontMapResults forceOrDont, string template)
{
    if (forceOrDont.DontMapOutEver) { return; }
    if (forceOrDont.ForceMapOutWithList) {
        mapResults.ToModelMapsList.Add(template);
    } else if (forceOrDont.ForceMapOutWithLite) {
        mapResults.ToModelMapsLite.Add(template);
    } else {
        mapResults.ToModelMapsFull.Add(template);
    }
}
bool GenerateMappingFile(Type theType/*IGrouping<string, Type> theTypes*/, string schema)
{
    string theTypeName = theType.Name;
    TypeDeterminer td = new TypeDeterminer(theType);
    if (td.IsExcludedFromT4) { return false; }
#>// <autogenerated>
// <copyright file="Mapping.<#= schema #>.<#= theType.Name #>.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the <#= schema #> section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperFor<#= theTypeName #>
    {
<#+ var processedProperties = DetermineProcessedPropertiesBasedOnInterfaces(td, theType);
    var remainingProperties = new List<PropertyInfo>();
    var mapResultsList = new List<MapResults>();
    var theProperties = theType.GetProperties().OrderBy(x => x.Name).ToList();
    var modelTypeName = HelpFunctions.SwapToModelType(theTypeName);
    var extraTypes1  = modelTypeName == "SalesItemBase" ? "<IApplied" + theTypeName + "DiscountModel>" : "";
    var fullModelInterface = "I" + modelTypeName + "Model" + extraTypes1;
    foreach (var property in theProperties)
    {
        var forceOrDont = new ForceOrDontMapResults(property);
        var propertyName = property.Name;
        td.ForceOrDontResults[propertyName] = forceOrDont;
        if (processedProperties.Contains(property)) { continue; }
        remainingProperties.Add(property);
        var returnType = property.GetMethod.ReturnType;
        if (IsSimplePropertyReturnType(returnType, propertyName))
        {
            var mapResults = ProcessSimpleProperty(property, forceOrDont);
            mapResultsList.Add(mapResults);
            processedProperties.Add(property);
            continue;
        }
        if (returnType.Namespace == "Clarity.Ecommerce.DataModel" || propertyName.EndsWith("ID"))
        {
            PropertyInfo relatedProperty;
            PropertyInfo idProperty;
            if (returnType.Namespace == "Clarity.Ecommerce.DataModel") {
                relatedProperty = property;
                idProperty = theProperties.FirstOrDefault(x => x.Name == (relatedProperty.Name + "ID"));
            } else {
                idProperty = property;
                relatedProperty = theProperties.FirstOrDefault(x => x.Name == idProperty.Name.Substring(0, idProperty.Name.Length - 2));
            }
            if (relatedProperty == null) {
                // Is just A Property with ID at the end, treat it like the simple properties
                var mapResultsSimple = ProcessSimpleProperty(property, forceOrDont);
                mapResultsList.Add(mapResultsSimple);
                processedProperties.Add(property);
                continue;
            }
            var mapResults = new MapResults("2: 1-(0|1)'s");
            if (td.IsIAmAContactRelationshipTable && new string[] { "Cart",  "PurchaseOrder", "SalesInvoice", "SalesOrder", "SalesQuote", "SalesReturn", "SampleRequest" }.Contains(relatedProperty.Name)) {
                mapResults.ToModelMapsList.Add(string.Format("model.MasterID = entity.{0}ID;", relatedProperty.Name));
                mapResults.ToModelMapsList.Add(string.Format("model.MasterKey = entity.{0}?.CustomKey;", relatedProperty.Name));
                continue;
            }
            var relatedPropertyReturnTypeName = relatedProperty.GetMethod.ReturnType.Name.Replace("Clarity.Ecommerce.DataModel.", "");
            if (idProperty == null) {
                // Is Related Entity with Same ID
                bool requiresSpecialHandling = SharedIDPropertyRequiresSpecialHandling(relatedProperty);
                if (requiresSpecialHandling)
                {
                    // 1-(0|1) with a shared ID, Special Handling
                    if (!forceOrDont.DontMapInEver) {
                        mapResults.RelateFunctionsSharedSpecial_Params.Add(new [] { theTypeName, relatedProperty.Name });
                    }
                    if (relatedProperty.GetMethod.ReturnType.Name == typeof(Contact).Name && modelTypeName == "Contact") {
                        mapResults.ToModelMapsList.Add(string.Format("// TODO: Multiple Additional Properties, create an UpdateModelFromContactEntity method // {0} // Special", relatedProperty.Name));
                    } else {
                        string template = string.Format("model.{0} = ModelMapperFor{1}.Create{1}ModelFromEntityLite(entity.{0}, contextProfileName);", propertyName, relatedPropertyReturnTypeName);
                        AppendRelatedDecision(mapResults, forceOrDont, template, theTypeName, relatedProperty.Name, relatedProperty.PropertyType.Name);
                    }
                } else {
                    // 1-(0|1) with a shared ID
                    string template = string.Format("model.{0} = ModelMapperFor{1}.Create{1}ModelFromEntityLite(entity.{0}, contextProfileName);", propertyName, relatedPropertyReturnTypeName);
                    AppendRelatedDecision(mapResults, forceOrDont, template, theTypeName, relatedProperty.Name, relatedProperty.PropertyType.Name);
                }
            } else {
                // Doesn't Share an ID (there's an XxxxID property
                if (relatedProperty.GetMethod.ReturnType.Name == typeof(GeneralAttribute).Name
                    || relatedProperty.GetMethod.ReturnType.Name == typeof(Discount).Name)
                {
                    // 1-(0|1) with a non-shared ID, Special Handling
                    if (relatedProperty.GetMethod.ReturnType.Name == typeof(GeneralAttribute).Name) {
                        mapResults.ToModelMapsList.Add(string.Format("// TODO: Multiple Additional Properties, create an UpdateModelFromGeneralAttributeEntity method // {0} // Normal", relatedProperty.Name));
                    } else if (relatedProperty.GetMethod.ReturnType.Name == typeof(Discount).Name && modelTypeName == "Discount") {
                        mapResults.ToModelMapsList.Add(string.Format("// TODO: Multiple Additional Properties, create an UpdateModelFromDiscountEntity method // {0} // Normal", relatedProperty.Name));
                    } else {
                        mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{0};", idProperty.Name));
                        string template = string.Format("model.{0} = ModelMapperFor{1}.Create{1}ModelFromEntityLite(entity.{0}, contextProfileName);", relatedProperty.Name, relatedPropertyReturnTypeName);
                        AppendRelatedDecision(mapResults, forceOrDont, template, theTypeName, relatedProperty.Name, relatedProperty.PropertyType.Name);
                    }
                } else {
                    // 1-(0|1) with a non-shared ID
                    if (!forceOrDont.DontMapOutEver)
                    {
                        mapResults.ToModelMapsList.Add(string.Format("model.{0} = entity.{0};", idProperty.Name));
                    }
                    string template = string.Format("model.{0} = ModelMapperFor{1}.Create{1}ModelFromEntityLite(entity.{0}, contextProfileName);", relatedProperty.Name, relatedPropertyReturnTypeName);
                    AppendRelatedDecision(mapResults, forceOrDont, template, theTypeName, relatedProperty.Name, relatedProperty.PropertyType.Name);
                }
            }
            if (idProperty != null) { processedProperties.Add(idProperty); mapResults.ProcessedProperties.Add(idProperty); }
            if (relatedProperty != null) { processedProperties.Add(relatedProperty); mapResults.ProcessedProperties.Add(relatedProperty); }
            mapResultsList.Add(mapResults);
            continue;
        } // if (returnType.Namespace == "Clarity.Ecommerce.DataModel")
        if (returnType.Name == "ICollection`1")
        {
            var mapResults = new MapResults("3: 1-n's");
            var otherName = propertyName;
            string linkName = theTypeName;
            if (propertyName == "Attributes") { propertyName = "GeneralAttributes"; }
            else if (propertyName == "BillingContactsSalesOrders") { otherName = "SalesOrders"; linkName = "Billing" + linkName; }
            else if (propertyName == "ShippingContactsSalesOrders") { otherName = "SalesOrders"; linkName = "Shipping" + linkName; }
            else if (propertyName == "BillingContactsSalesInvoices") { otherName = "SalesInvoices"; linkName = "Billing" + linkName; }
            else if (propertyName == "ShippingContactsSalesInvoices") { otherName = "SalesInvoices"; linkName = "Shipping" + linkName; }
            else if (propertyName == "BillingContactsSalesQuotes") { otherName = "SalesQuotes"; linkName = "Billing" + linkName; }
            else if (propertyName == "ShippingContactsSalesQuotes") { otherName = "SalesQuotes"; linkName = "Shipping" + linkName; }
            else if (propertyName == "BillingContactsPurchaseOrders") { otherName = "PurchaseOrders"; linkName = "Billing" + linkName; }
            else if (propertyName == "ShippingContactsPurchaseOrders") { otherName = "PurchaseOrders"; linkName = "Shipping" + linkName; }
            else if (propertyName == "OriginContactsShipments") { otherName = "Shipments"; linkName = "Origin" + linkName; }
            else if (propertyName == "DestinationContactsShipments") { otherName = "Shipments"; linkName = "Destination" + linkName; }
            else if (propertyName == "ShippingContacts") { otherName = "Contacts"; linkName = "Shipping" + linkName; }
            else if (propertyName == "NotesCreated") { otherName = "Notes"; linkName = "CreatedBy" + linkName; }
            else if (propertyName == "NotesUpdated") { otherName = "Notes"; linkName = "UpdatedBy" + linkName; }
            else if (propertyName == "InterRegionKeys") { otherName = "InterRegions"; linkName = "Key" + linkName; }
            else if (propertyName == "InterRegionRelations") { otherName = "InterRegions"; linkName = "Relation" + linkName; }
            else if (propertyName == "ReviewsApproved") { otherName = "Reviews"; linkName = "ApprovedBy" + linkName; }
            else if (propertyName == "ReviewsSubmitted") { otherName = "Reviews"; linkName = "SubmittedBy" + linkName; }
            else if (propertyName == "UserReviews" && theTypeName != "Review") { otherName = "UserReviews"; linkName = "Reviewed" + linkName; }
            else if (propertyName == "AccountReviews" && theTypeName != "Review") { otherName = "AccountReviews"; linkName = "Reviewed" + linkName; }
            else if (propertyName == "ProductReviews" && theTypeName != "Review") { otherName = "ProductReviews"; linkName = "Reviewed" + linkName; }
            else if (propertyName == "CategoryReviews" && theTypeName != "Review") { otherName = "CategoryReviews"; linkName = "Reviewed" + linkName; }
            else if (propertyName == "CompanySkillRatings" && theTypeName != "Company" && theTypeName != "CompanySkill" && theTypeName != "Review") { otherName = "CompanySkillRatings"; linkName = "Rate" + linkName; }
            else if (propertyName == "Payments") { otherName = "Payments"; linkName = "Billing" + linkName; }
            else if (propertyName == "ClipAudioFiles") { otherName = "Audios"; linkName = "Clip" + linkName; }
            else if (propertyName == "FullAudioFiles") { otherName = "Audios"; linkName = "Full" + linkName; }
            else if (propertyName == "ThumbImageFiles") { otherName = "Images"; linkName = "Thumb" + linkName; }
            else if (propertyName == "FullImageFiles") { otherName = "Images"; linkName = "Full" + linkName; }
            else if (propertyName == "ProductAssociations") { otherName = "ProductAssociations"; linkName = "Primary" + linkName; }
            else if (propertyName == "ProductsAssociatedWith") { otherName = "ProductAssociations"; linkName = "Associated" + linkName; }
            else if (propertyName == "AssociatedSalesOrders" && theTypeName == "SalesQuote") { otherName = "SalesQuoteSalesOrders"; }
            else if (propertyName == "AssociatedSalesOrders" && theTypeName == "SalesInvoice") { otherName = "SalesOrderSalesInvoices"; }
            else if (propertyName == "AssociatedSalesOrders" && theTypeName == "PurchaseOrder") { otherName = "SalesOrderPurchaseOrders"; }
            else if (propertyName == "AssociatedPurchaseOrders" && theTypeName == "SalesOrder") { otherName = "SalesOrderPurchaseOrders"; }
            else if (propertyName == "AssociatedSalesInvoices" && theTypeName == "SalesOrder") { otherName = "SalesOrderSalesInvoices"; }
            else if (propertyName == "AssociatedSalesQuotes" && theTypeName == "SalesOrder") { otherName = "SalesQuoteSalesOrders"; }
            else if (propertyName == "Shipments" && theTypeName.EndsWith("Item")) { otherName = theTypeName + "Shipments"; }
            else if (propertyName == "Targets" && theTypeName.EndsWith("Item")) { otherName = "Targets"; }
            else if (theTypeName == "Discount")
            {
                if (propertyName == "Stores") {
                    continue; // The Discount.Stores property doesn't map directly properly
                } else if (propertyName.StartsWith("Discount")) {
                    otherName = propertyName;
                    //linkName = "Full" + linkName;
                } else {
                    otherName = "Applied" + HelpFunctions.DePluralizeName(propertyName) + "Discounts";
                    //linkName = "Full" + linkName;
                }
            }
            if (td.IsISalesCollectionBaseT)
            {
                if (propertyName == "Discounts") { otherName = "Applied" + theTypeName + "Discounts"; }
                else if (propertyName == "SalesItems") { otherName = theTypeName + "Items"; }
                else if (propertyName == "Files") { otherName = theTypeName + "Files"; }
                else if (propertyName == "StoredFiles") { otherName = theTypeName + "StoredFiles"; }
                else if (propertyName == "Contacts") { otherName = theTypeName + "Contacts"; }
            }
            if (linkName == "GeneralAttribute") { linkName = "Attribute"; }
            var propertyReturnTypeName = property.GetMethod.ReturnType.GetGenericArguments()[0].Name.Replace("Clarity.Ecommerce.DataModel.", "");
            if (property.Name == "Documents") {
                mapResults.ToModelMapsFull.Add("model." + propertyName + " = (entity is Anon" + theTypeName + " ? ((Anon" + theTypeName + ")entity)." + propertyName + " : entity." + propertyName
                    + ")?.Where(x => x.Active).Select(x => x.File).Select(x => ModelMapperForFile.CreateFileModelFromEntityList(x, contextProfileName)).ToList()!;");
            } else if (theTypeName == "File") {
                mapResults.ToModelMapsFull.Add("// Ignoring File's Associated Properties");
            } else if (property.Name == "SalesItemShipmentBases" && theTypeName.EndsWith("Item")) {
                var line = "model.SalesItemShipmentBases = (entity is Anon" + theTypeName + " ? ((Anon" + theTypeName
                    + ")entity).SalesItemShipmentBases : entity.SalesItemShipmentBases)?.Where(x => x.Active).Select(x => BaseModelMapper.CreateSalesItemShipmentBaseFromEntity(x, contextProfileName)).ToList()!;";
                AppendAssociatedDecision(mapResults, forceOrDont, line);
            } else if (property.Name == "Targets" && theTypeName.EndsWith("Item")) {
                var line = "model.Targets = (entity is Anon" + theTypeName + " ? ((Anon" + theTypeName + ")entity).Targets : entity.Targets)?.Where(x => x.Active).Select(x => CreateSalesItemTargetBaseFromEntity(x, contextProfileName)).ToList()!;";
                AppendAssociatedDecision(mapResults, forceOrDont, line);
            } else {
                string template = "model." + propertyName + " = (entity is Anon" + theTypeName + " ? ((Anon" + theTypeName + ")entity)." + propertyName + " : entity." + propertyName
                        + ")?.Where(x => x.Active).Select(x => ModelMapperFor" + propertyReturnTypeName + ".Create" + propertyReturnTypeName + "ModelFromEntityList(x, contextProfileName)).ToList()!;";
                AppendAssociatedDecision(mapResults, forceOrDont, template);
            }
            mapResultsList.Add(mapResults);
            processedProperties.Add(property);
            continue;
        } // if (returnType.Name == "ICollection`1") END
        // The property is actually invalid, but we'll print it so we know that (will cause compile errors)
        var invalidResult = ProcessSimpleProperty(property, forceOrDont);
        invalidResult.GroupBy = "4: OTHER";
        mapResultsList.Add(invalidResult);
        processedProperties.Add(property);
    } // foreach (PropertyInfo property in theType.GetProperties().OrderBy(x => x.Name)) END
#>
        public sealed class Anon<#= theTypeName #> : <#= theTypeName #>
        {
<#+ var toPrint = new List<string>();
    if (td.IsIHaveAParentBase)
    {
        toPrint.Add("public bool HasChildren { get; set; }");
    }
    foreach (var property in theType.GetProperties()
        .Where(x => x.GetCustomAttribute<NotMappedAttribute>() == null
            && x.GetCustomAttribute<DontMapOutEverAttribute>() == null
            && x.PropertyType.Name == typeof(ICollection<>).Name
            && x.Name != "Roles" && x.Name != "Claims" && x.Name != "Logins"))
    {
        toPrint.Add("public new IEnumerable<" + property.PropertyType.GetGenericArguments()[0].Name + ">? " + property.Name + " { get; set; }");
    }
    foreach (var print in toPrint.Distinct().OrderBy(x => x))
    { #>
            <#= print #>
<#+ }
    foreach (var property in theType.GetProperties()
        .Where(x => x.GetCustomAttribute<NotMappedAttribute>() == null
            && x.GetCustomAttribute<DontMapOutEverAttribute>() == null
            && x.PropertyType.Name == "User"))
    { #>
            public Contact? <#= property.Name #>Contact { get; set; }
<#+ }
    foreach (var property in theType.GetProperties()
        .Where(x => x.GetCustomAttribute<NotMappedAttribute>() == null
            && x.Name == "Master"))
    { #>
            // public new <#= property.PropertyType.Name #>? Master { get; set; }
<#+ } #>
        }

        public static readonly Func<<#= theTypeName #>?, string?, <#= fullModelInterface #>?> Map<#= theTypeName #>ModelFromEntityFull = Create<#= theTypeName #>ModelFromEntityFull;

        public static readonly Func<<#= theTypeName #>?, string?, <#= fullModelInterface #>?> Map<#= theTypeName #>ModelFromEntityLite = Create<#= theTypeName #>ModelFromEntityLite;

        public static readonly Func<<#= theTypeName #>?, string?, <#= fullModelInterface #>?> Map<#= theTypeName #>ModelFromEntityList = Create<#= theTypeName #>ModelFromEntityList;

        public static Func<I<#= theTypeName #>, <#= fullModelInterface #>, string?, <#= fullModelInterface #>>? Create<#= theTypeName #>ModelFromEntityHooksFull { get; set; }

        public static Func<I<#= theTypeName #>, <#= fullModelInterface #>, string?, <#= fullModelInterface #>>? Create<#= theTypeName #>ModelFromEntityHooksLite { get; set; }

        public static Func<I<#= theTypeName #>, <#= fullModelInterface #>, string?, <#= fullModelInterface #>>? Create<#= theTypeName #>ModelFromEntityHooksList { get; set; }

        public static Expression<Func<<#= theTypeName #>, Anon<#= theTypeName #>>>? PreBuilt<#= theTypeName #>SQLSelectorFull { get; set; }

        public static Expression<Func<<#= theTypeName #>, Anon<#= theTypeName #>>>? PreBuilt<#= theTypeName #>SQLSelectorLite { get; set; }

        public static Expression<Func<<#= theTypeName #>, Anon<#= theTypeName #>>>? PreBuilt<#= theTypeName #>SQLSelectorList { get; set; }

        /// <summary>An <see cref="I<#= modelTypeName #>Model"/> extension method that creates a(n) <see cref="<#= (theTypeName == "Currency" ? "DataModel." : string.Empty) + theTypeName #>"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="<#= (theTypeName == "Currency" ? "DataModel." : string.Empty) + theTypeName #>"/> entity.</returns>
        public static I<#= theTypeName #> Create<#= theTypeName #>Entity(
            this <#= fullModelInterface #> model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
<#+ if (td.IsIStatusableBase) { #>
                .CreateEntityStatusableBase<I<#= modelTypeName #>Model, <#= theTypeName #>>(timestamp, contextProfileName)
<#+ } else if (td.IsIStateableBase) { #>
                .CreateEntityStateableBase<I<#= modelTypeName #>Model, <#= theTypeName #>>(timestamp, contextProfileName)
<#+ } else if (td.IsITypableBase) { #>
                .CreateEntityTypableBase<I<#= modelTypeName #>Model, <#= theTypeName #>>(timestamp, contextProfileName)
<#+ } else if (td.IsINameableBase) { #>
                .CreateEntityFromModelNameableBase<I<#= modelTypeName #>Model, <#= theTypeName #>>(timestamp, contextProfileName)
<#+ } else { #>
                .CreateEntityFromModelBase<I<#= modelTypeName #>Model, <#= theTypeName #>>(timestamp, contextProfileName)
<#+ } #>
                // Use the Update method to map non-inherited properties
                .Update<#= theTypeName #>FromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="I<#= modelTypeName #>Model"/> extension method that updates a(n) <see cref="<#= (theTypeName == "Currency" ? "DataModel." : string.Empty) + theTypeName #>"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="<#= (theTypeName == "Currency" ? "DataModel." : string.Empty) + theTypeName #>"/> entity.</returns>
        public static I<#= theTypeName #> Update<#= theTypeName #>FromModel(
            this I<#= theTypeName #> entity,
            <#= fullModelInterface #> model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
<#+ if (td.IsISalesCollectionBase) { #>
                .MapSalesCollectionBaseModelPropertiesToEntity<I<#= theTypeName #>Model,
                    I<#= theTypeName #>,
                    <#= theTypeName #>,
                    <#= theTypeName #>Status,
                    <#= theTypeName #>Type,
                    <#= theTypeName #>Item,
                    Applied<#= theTypeName #>Discount,
                    <#= theTypeName #>State,
                    <#= theTypeName #>File,
                    <#= theTypeName #>Contact,
                    <#= theTypeName #>Event,
                    <#= theTypeName #>EventType>(Contract.RequiresNotNull(model));
<#+ } else if (td.IsIStatusableBase) { #>
                .MapStatusableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
<#+ } else if (td.IsIStateableBase) { #>
                .MapStateableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
<#+ } else if (td.IsITypableBase) { #>
                .MapTypableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
<#+ } else if (td.IsINameableBase) { #>
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
<#+ } else if (td.IsIAmARelationshipTable) { #>
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
<#+ } else { #>
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
<#+ } #>
<#+ if (td.IsIHaveRequiresRolesBase) { #>
            // IHaveRequiresRolesBase Properties
            entity.RequiresRoles = model.RequiresRoles;
            entity.RequiresRolesAlt = model.RequiresRolesAlt;
<#+ } #>
<#+ if (td.IsIAppliedDiscountBase) { #>
            // IAppliedDiscountBase Properties
            entity.DiscountTotal = model.DiscountTotal;
            entity.ApplicationsUsed = model.ApplicationsUsed;
            entity.TargetApplicationsUsed = model.TargetApplicationsUsed;
<#+ } #>
<#+ if (td.IsISalesItemBase) { #>
            // ISalesItemBase Properties
            entity.Quantity = model.Quantity;
            entity.QuantityBackOrdered = model.QuantityBackOrdered ?? 0m;
            entity.QuantityPreSold = model.QuantityPreSold ?? 0m;
            entity.UnitCorePrice = model.UnitCorePrice;
            entity.UnitSoldPrice = model.UnitSoldPrice;
            entity.UnitCorePriceInSellingCurrency = model.UnitCorePriceInSellingCurrency;
            entity.UnitSoldPriceInSellingCurrency = model.UnitSoldPriceInSellingCurrency;
            entity.Sku = model.Sku;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            entity.ForceUniqueLineItemKey = model.ForceUniqueLineItemKey;
<#+ } #>
<#+ if (td.IsISalesEventBase) { #>
            // ISalesEventBase Properties
            entity.OldHash = model.OldHash;
            entity.NewHash = model.NewHash;
            entity.OldStateID = model.OldStateID;
            entity.NewStateID = model.NewStateID;
            entity.OldStatusID = model.OldStatusID;
            entity.NewStatusID = model.NewStatusID;
            entity.OldTypeID = model.OldTypeID;
            entity.NewTypeID = model.NewTypeID;
            entity.OldRecordSerialized = model.OldRecordSerialized;
            entity.NewRecordSerialized = model.NewRecordSerialized;
<#+ } #>
<#+ if (mapResultsList.Any(x => x.GroupBy == "1: Simples")) { #>
            // <#= theTypeName #> Properties
<#+     foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "1: Simples"))
        {
            foreach (var map in mapResults.ToEntityMaps.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")))
            { #>
            <#= map #>
<#+         }
        }
    } #>
<#+ if (mapResultsList.Any(x => x.GroupBy == "2: 1-(0|1)'s")) { #>
            // <#= theTypeName #>'s Related Objects
<#+     foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "2: 1-(0|1)'s"))
        {
            foreach (var map in mapResults.ToEntityMaps.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")))
            {
                if (map.Contains("ItemShipment(") || map.Contains("model.Master ="))
                {
                    continue;
                } #>
            <#= map #>
<#+         } #>
<#+     } #>
<#+ } #>
<#+ if (mapResultsList.Any(x => x.GroupBy == "3: 1-n's")) { #>
            // <#= theTypeName #>'s Associated Objects
<#+     foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "3: 1-n's"))
        {
            foreach (var map in mapResults.ToEntityMaps.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")))
            { #>
            //<#= map #>
<#+         } #>
<#+     } #>
<#+ } #>
<#+ if (mapResultsList.Any(x => x.GroupBy == "4: OTHER"))
    {
        foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "4: OTHER"))
        {
            foreach (var map in mapResults.ToEntityMaps.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")))
            { #>
            // INVALID! FIX ME!!! <#= map #>
<#+         }
        }
    } #>
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void Gen<#= theTypeName #>SQLSelectorFull()
        {
            PreBuilt<#= theTypeName #>SQLSelectorFull = x => x == null ? null! : new Anon<#= theTypeName #>
            {
<#+ if (td.IsIHaveAParentBase) { #>
                HasChildren = x.Children!.Any(y => y.Active),
<#+ } #>
<#+ foreach (var property in theType.GetProperties()
        .Where(x => x.GetCustomAttribute<NotMappedAttribute>() == null
            && x.GetCustomAttribute<DontMapOutEverAttribute>() == null
            && x.Name != "Roles" && x.Name != "Claims" && x.Name != "Logins"))
    { #>
<#+     if (property.PropertyType.Name == typeof(ICollection<>).Name) { #>
                <#= property.Name #> = x.<#= property.Name #>!.Where(y => y.Active).Select(ModelMapperFor<#=
                    property.PropertyType.GetGenericArguments()[0].Name #>.PreBuilt<#=
                    property.PropertyType.GetGenericArguments()[0].Name #>SQLSelectorList.Expand().Compile()).ToList(),
<#+     } else if (property.PropertyType.GetInterface(typeof(IBase).Name) != null) { #>
                <#= property.Name #> = ModelMapperFor<#=
                    property.PropertyType.Name #>.PreBuilt<#=
                    property.PropertyType.Name #>SQLSelectorList.Expand().Compile().Invoke(x.<#= property.Name #>!),
<#+     } else { #>
                <#= property.Name #> = x.<#= property.Name #>,
<#+     }
    } #>
            };
        }

        public static void Gen<#= theTypeName #>SQLSelectorLite()
        {
            PreBuilt<#= theTypeName #>SQLSelectorLite = x => x == null ? null! : new Anon<#= theTypeName #>
            {
<#+ if (td.IsIHaveAParentBase) { #>
                HasChildren = x.Children!.Any(y => y.Active),
<#+ }
    foreach (var property in theType.GetProperties()
        .Where(x => x.GetCustomAttribute<NotMappedAttribute>() == null
            && x.GetCustomAttribute<DontMapOutEverAttribute>() == null
            && x.GetCustomAttribute<DontMapOutWithLiteAttribute>() == null
            && x.Name != "Roles" && x.Name != "Claims" && x.Name != "Logins"
            && (x.PropertyType.Name != "ICollection`1"
                || x.GetCustomAttribute<ForceMapOutWithLiteAttribute>() != null
                || x.GetCustomAttribute<ForceMapOutWithListingAttribute>() != null)))
    {
        if (property.PropertyType.Name == typeof(ICollection<>).Name)
        { #>
                <#= property.Name #> = x.<#= property.Name #>!.Where(y => y.Active).Select(ModelMapperFor<#=
                    property.PropertyType.GetGenericArguments()[0].Name #>.PreBuilt<#=
                    property.PropertyType.GetGenericArguments()[0].Name #>SQLSelectorList.Expand().Compile()),
<#+     } else if (property.PropertyType.GetInterface(typeof(IBase).Name) != null) { #>
                <#= property.Name #> = ModelMapperFor<#=
                    property.PropertyType.Name #>.PreBuilt<#=
                    property.PropertyType.Name #>SQLSelectorList.Expand().Compile().Invoke(x.<#= property.Name #>!),
<#+     } else { #>
                <#= property.Name #> = x.<#= property.Name #>,
<#+     }
    } #>
            };
        }

        public static void Gen<#= theTypeName #>SQLSelectorList()
        {
            PreBuilt<#= theTypeName #>SQLSelectorList = x => x == null ? null! : new Anon<#= theTypeName #>
            {
<#+ if (td.IsIHaveAParentBase) { #>
                HasChildren = x.Children!.Any(y => y.Active),
<#+ }
    var preProcessedForListForFlattening = new List<string>();
    foreach (var property in theType.GetProperties()
        .Where(x => x.GetCustomAttribute<NotMappedAttribute>() == null
            && x.GetCustomAttribute<DontMapOutEverAttribute>() == null
            && x.GetCustomAttribute<DontMapOutWithLiteAttribute>() == null
            && x.GetCustomAttribute<DontMapOutWithListingAttribute>() == null
            && x.Name != "Roles" && x.Name != "Claims" && x.Name != "Logins"
            && ((x.PropertyType.Name != "ICollection`1"/*
                && !x.PropertyType.FullName.StartsWith("Clarity.Ecommerce.DataModel.")*/)
                || x.GetCustomAttribute<ForceMapOutWithListingAttribute>() != null)))
    {
        if (property.PropertyType.Name == typeof(ICollection<>).Name)
        { #>
                <#= property.Name #> = x.<#= property.Name #>!.Where(y => y.Active).Select(ModelMapperFor<#=
                    property.PropertyType.GetGenericArguments()[0].Name #>.PreBuilt<#=
                    property.PropertyType.GetGenericArguments()[0].Name #>SQLSelectorList.Expand().Compile()),
<#+     } else if (property.PropertyType.GetInterface(typeof(IBase).Name) != null) {
            preProcessedForListForFlattening.Add(
                string.Format(
                    "{0} = ModelMapperFor{1}.PreBuilt{1}SQLSelectorList.Expand().Compile().Invoke(x.{0}!),",
                    property.Name,
                    property.PropertyType.Name)); #>
                <#= preProcessedForListForFlattening.Last() #> // For Flattening Properties (List)
<#+     } else { #>
                <#= property.Name #> = x.<#= property.Name #>,
<#+     }
    }
    foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "2: 1-(0|1)'s"))
    {
        foreach (string map in mapResults.AsExprMapsList
            .Where(x => !string.IsNullOrWhiteSpace(x) && !preProcessedForListForFlattening.Contains(x))
            .Select(x => x.Replace("\r\n\r\n", "\r\n"))
            .Distinct())
        { #>
                <#= map #> // For Flattening Properties
<#+     }
    } #>
            };
        }

        public static IEnumerable<<#= fullModelInterface #>> SelectFull<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuilt<#= theTypeName #>SQLSelectorFull!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<<#= fullModelInterface #>> SelectLite<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuilt<#= theTypeName #>SQLSelectorLite!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<<#= fullModelInterface #>> SelectList<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuilt<#= theTypeName #>SQLSelectorList!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityList(x, contextProfileName))!;
        }

        public static <#= fullModelInterface #>? SelectFirstFull<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuilt<#= theTypeName #>SQLSelectorFull!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static <#= fullModelInterface #>? SelectFirstList<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuilt<#= theTypeName #>SQLSelectorList!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static <#= fullModelInterface #>? SelectSingleFull<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuilt<#= theTypeName #>SQLSelectorFull!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static <#= fullModelInterface #>? SelectSingleLite<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuilt<#= theTypeName #>SQLSelectorLite!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static <#= fullModelInterface #>? SelectSingleList<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuilt<#= theTypeName #>SQLSelectorList!.Compile())
                .ToList()
                .Select(x => Create<#= theTypeName #>ModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<<#= fullModelInterface #>> results, int totalPages, int totalCount) SelectFull<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuilt<#= theTypeName #>SQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => Create<#= theTypeName #>ModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<<#= fullModelInterface #>> results, int totalPages, int totalCount) SelectLite<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuilt<#= theTypeName #>SQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => Create<#= theTypeName #>ModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<<#= fullModelInterface #>> results, int totalPages, int totalCount) SelectList<#= theTypeName #>AndMapTo<#= modelTypeName #>Model(
            this IQueryable<<#= theTypeName #>> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuilt<#= theTypeName #>SQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuilt<#= theTypeName #>SQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => Create<#= theTypeName #>ModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static <#= fullModelInterface #>? Create<#= theTypeName #>ModelFromEntityFull(this I<#= theTypeName #>? entity, string? contextProfileName)
        {
            return Create<#= theTypeName #>ModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static <#= fullModelInterface #>? Create<#= theTypeName #>ModelFromEntityLite(this I<#= theTypeName #>? entity, string? contextProfileName)
        {
            return Create<#= theTypeName #>ModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static <#= fullModelInterface #>? Create<#= theTypeName #>ModelFromEntityList(this I<#= theTypeName #>? entity, string? contextProfileName)
        {
            return Create<#= theTypeName #>ModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static <#= fullModelInterface #>? Create<#= theTypeName #>ModelFromEntity(
            this I<#= theTypeName #>? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
<#+ if (td.IsISalesCollectionBase) { #>
            var model = BaseModelMapper.MapSalesCollectionBaseEntityPropertiesToModel<I<#= theTypeName #>Model,
                    I<#= theTypeName #>,
                    <#= theTypeName #>,
                    <#= theTypeName #>Status,
                    <#= theTypeName #>Type,
                    I<#= HelpFunctions.SwapToModelType(td.RelatedTypeType.Name) #>Model,
                    <#= theTypeName #>Item,
                    Applied<#= theTypeName #>Discount,
                    IApplied<#= theTypeName #>DiscountModel,
                    IApplied<#= theTypeName #>ItemDiscountModel,
                    <#= theTypeName #>State,
                    <#= theTypeName #>File,
                    I<#= theTypeName #>FileModel,
                    <#= theTypeName #>Contact,
                    I<#= theTypeName #>ContactModel,
                    Applied<#= theTypeName #>ItemDiscount,
                    <#= theTypeName #>ItemTarget,
                    <#= theTypeName #>Event,
                    I<#= theTypeName #>EventModel,
                    <#= theTypeName #>EventType>(
<#+ } else if (td.IsISalesItemBase) { #>
            var model = BaseModelMapper.MapSalesItemBaseEntityPropertiesToModel(
<#+ } else if (td.IsIStatusableBase) { #>
            var model = BaseModelMapper.MapStatusableBaseEntityPropertiesToModel(
<#+ } else if (td.IsIStateableBase) { #>
            var model = BaseModelMapper.MapStateableBaseEntityPropertiesToModel(
<#+ } else if (td.IsITypableBase) { #>
            var model = BaseModelMapper.MapTypableBaseEntityPropertiesToModel(
<#+ } else if (td.IsINameableBase) { #>
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
<#+ } else { #>
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
<#+ } #>
                RegistryLoaderWrapper.GetInstance<<#= fullModelInterface #>>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
<#+ if (td.IsISalesCollectionBase) { #>
                    // ISalesCollectionBase Properties
                    model.SalesItems = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).SalesItems : entity.SalesItems)?.Where(x => x.Active).Select(x => ModelMapperFor<#= theTypeName #>Item.Create<#= theTypeName #>ItemModelFromEntityLite(x, contextProfileName)).ToList()!;
                    model.Discounts = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Discounts : entity.Discounts)?.Where(x => x.Active).Select(x => ModelMapperForApplied<#= theTypeName #>Discount.CreateApplied<#= theTypeName #>DiscountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Contacts = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Contacts : entity.Contacts)?.Where(x => x.Active).Select(x => ModelMapperFor<#= theTypeName #>Contact.Create<#= theTypeName #>ContactModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperFor<#= theTypeName #>File.Create<#= theTypeName #>FileModelFromEntityList(x, contextProfileName)).ToList()!;
<#+ } #>
<#+ if (td.IsIHaveAParentBase) { #>
                    // IHaveAParentBase Properties
                    model.Parent = Create<#= theTypeName #>ModelFromEntityLite(entity.Parent, contextProfileName);
                    model.Children = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Children : entity.Children)?.Where(x => x.Active).Select(x => Create<#= theTypeName #>ModelFromEntityList(x, contextProfileName)).ToList()!;
<#+ } #>
<#+ if (td.IsIHaveRequiresRolesBase) { #>
                    // IHaveRequiresRolesBase Properties
                    model.RequiresRoles = entity.RequiresRoles;
                    model.RequiresRolesAlt = entity.RequiresRolesAlt;
<#+ } #>
<#+ if (td.IsISalesItemBaseTT) { #>
                    // ISalesItemBase<,,,,> Properties
                    model.Discounts = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Discounts : entity.Discounts)?.Where(x => x.Active).Select(x => ModelMapperForApplied<#= theTypeName #>Discount.CreateApplied<#= theTypeName #>DiscountModelFromEntityList(x, contextProfileName)).ToList()!;
<#+     if (theTypeName != "CartItem") { #>
                    model.Targets = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Targets : entity.Targets)?.Where(x => x.Active).Select(x => ModelMapperFor<#= theTypeName #>Target.Create<#= theTypeName #>TargetModelFromEntityList(x, contextProfileName)).ToList()!;
<#+     } #>
<#+ } #>
<#+ if (td.IsISalesEventBase) { #>
                    // ISalesEventBase Properties
                    model.OldRecordSerialized = entity.OldRecordSerialized;
                    model.NewRecordSerialized = entity.NewRecordSerialized;
<#+ } #>
<#+ if (td.IsIHaveATypeBase && !td.ForceOrDontResults["Type"].ForceMapOutWithLite && !td.ForceOrDontResults["Type"].ForceMapOutWithList) { #>
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperFor<#= theTypeName.Replace("GeneralAttribute", "Attribute").Replace("EmailQueue", "Email") #>Type.Create<#= theTypeName.Replace("GeneralAttribute", "Attribute").Replace("EmailQueue", "Email") #>TypeModelFromEntityLite(entity.Type, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveAStatusBase && !td.ForceOrDontResults["Status"].ForceMapOutWithLite && !td.ForceOrDontResults["Status"].ForceMapOutWithList) { #>
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperFor<#= theTypeName.Replace("EmailQueue", "Email") #>Status.Create<#= theTypeName.Replace("EmailQueue", "Email") #>StatusModelFromEntityLite(entity.Status, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveAStateBase && !td.ForceOrDontResults["State"].ForceMapOutWithLite && !td.ForceOrDontResults["State"].ForceMapOutWithList) { #>
                    // IHaveAStateBase Properties
                    model.State = ModelMapperFor<#= theTypeName #>State.Create<#= theTypeName #>StateModelFromEntityLite(entity.State, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveNotesBase && !td.ForceOrDontResults["Notes"].ForceMapOutWithLite && !td.ForceOrDontResults["Notes"].ForceMapOutWithList) { #>
                    // IHaveNotesBase Properties
                    model.Notes = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
<#+ } #>
                    // <#= theTypeName #>'s Properties
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "1: Simples"))
    {
        foreach (string map in mapResults.ToModelMapsFull.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    <#= map #>
<#+     }
    } #>
                    // <#= theTypeName #>'s Related Objects
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "2: 1-(0|1)'s"))
    {
        foreach (var map in mapResults.ToModelMapsFull.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        {
            var mapB = map;
            if (mapB.Contains("model.Master =")) { continue; }
            if (mapB.Contains("model.SalesOrderItem "))
            {
                mapB = mapB.Replace("model.SalesOrderItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.SalesInvoiceItem "))
            {
                mapB = mapB.Replace("model.SalesInvoiceItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.SalesQuoteItem "))
            {
                mapB = mapB.Replace("model.SalesQuoteItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.PurchaseOrderItem "))
            {
                mapB = mapB.Replace("model.PurchaseOrderItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.CartItem "))
            {
                mapB = mapB.Replace("model.CartItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.SampleRequestItem"))
            {
                mapB = mapB.Replace("model.SampleRequestItem", "model.SalesItem");
            }
            else if (mapB.Contains("CreateProductModelFromEntityLite("))
            {
                if (theTypeName.Contains("Assoc")) {
                    mapB = mapB.Replace("CreateProductModelFromEntityLite(", "MapLiteProductOldExt(").Replace(", contextProfileName", string.Empty);
                } else {
                    mapB = mapB.Replace("CreateProductModelFromEntityLite(", "MapLiteProductOldExt(").Replace(", contextProfileName", string.Empty);
                }
            } #>
                    <#= mapB #>
<#+     }
    } #>
                    // <#= theTypeName #>'s Associated Objects
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "3: 1-n's"))
    {
        foreach (string map in mapResults.ToModelMapsFull.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    <#= map #>
<#+     }
    } #>
                    // Additional Mappings
                    if (Create<#= theTypeName #>ModelFromEntityHooksFull != null) { model = Create<#= theTypeName #>ModelFromEntityHooksFull(entity, model, contextProfileName); }
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "4: OTHER"))
    {
        foreach (string map in mapResults.ToModelMapsFull.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    // INVALID!!! <#= map #>
<#+     }
    } #>
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // <#= theTypeName #>'s Properties
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "1: Simples"))
    {
        foreach (string map in mapResults.ToModelMapsLite.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    <#= map #>
<#+     }
    } #>
<#+ if (td.IsIHaveATypeBase && td.ForceOrDontResults["Type"].ForceMapOutWithLite && !td.ForceOrDontResults["Type"].ForceMapOutWithList) { #>
                    // IHaveATypeBase Properties (Forced)
<#+     if (td.IsISalesItemTargetBase) { #>
                    model.Type = ModelMapperForSalesItemTargetType.CreateSalesItemTargetTypeModelFromEntityLite(entity.Type, contextProfileName);
<#+     } else { #>
                    model.Type = ModelMapperFor<#= theTypeName.Replace("GeneralAttribute", "Attribute").Replace("EmailQueue", "Email") #>Type.Create<#= theTypeName.Replace("GeneralAttribute", "Attribute").Replace("EmailQueue", "Email") #>TypeModelFromEntityLite(entity.Type, contextProfileName);
<#+     }
    } #>
<#+ if (td.IsIHaveAStatusBase && td.ForceOrDontResults["Status"].ForceMapOutWithLite && !td.ForceOrDontResults["Status"].ForceMapOutWithList) { #>
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperFor<#= theTypeName #>Status.Create<#= theTypeName #>StatusModelFromEntityLite(entity.Status, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveAStateBase && td.ForceOrDontResults["State"].ForceMapOutWithLite && !td.ForceOrDontResults["State"].ForceMapOutWithList) { #>
                    // IHaveAStateBase Properties (Forced)
                    model.State = ModelMapperFor<#= theTypeName #>State.Create<#= theTypeName #>StateModelFromEntityLite(entity.State, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveNotesBase && td.ForceOrDontResults["Notes"].ForceMapOutWithLite && !td.ForceOrDontResults["Notes"].ForceMapOutWithList) { #>
                    // IHaveNotesBase Properties
                    model.Notes = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
<#+ } #>
                    // <#= theTypeName #>'s Related Objects (Not Mapped unless Forced, or a flattening property)
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "2: 1-(0|1)'s"))
    {
        foreach (string map in mapResults.ToModelMapsLite
            .Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        {
            var mapB = map;
            if (mapB.Contains("model.Master =")) { continue; }
            if (mapB.Contains("model.SalesOrderItem "))
            {
                mapB = mapB.Replace("model.SalesOrderItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.SalesInvoiceItem "))
            {
                mapB = mapB.Replace("model.SalesInvoiceItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.SalesQuoteItem "))
            {
                mapB = mapB.Replace("model.SalesQuoteItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.PurchaseOrderItem "))
            {
                mapB = mapB.Replace("model.PurchaseOrderItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.CartItem "))
            {
                mapB = mapB.Replace("model.CartItem", "model.SalesItem");
            }
            else if (mapB.Contains("model.SampleRequestItem "))
            {
                mapB = mapB.Replace("model.SampleRequestItem", "model.SalesItem");
            }
            else if (mapB.Contains("CreateProductModelFromEntityLite("))
            {
                if (theTypeName.Contains("Assoc")) {
                    mapB = mapB.Replace("CreateProductModelFromEntityLite(", "MapLiteProductOldExt(").Replace(", contextProfileName", string.Empty);
                } else {
                    mapB = mapB.Replace("CreateProductModelFromEntityLite(", "MapLiteProductOldExt(").Replace(", contextProfileName", string.Empty);
                }
            } #>
                    <#= mapB #>
<#+     }
    } #>
                    // <#= theTypeName #>'s Associated Objects (Not Mapped unless Forced)
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "3: 1-n's"))
    {
        foreach (var map in mapResults.ToModelMapsLite.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    <#= map #>
<#+     }
    } #>
                    // Additional Mappings
                    if (Create<#= theTypeName #>ModelFromEntityHooksLite != null) { model = Create<#= theTypeName #>ModelFromEntityHooksLite(entity, model, contextProfileName); }
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "4: OTHER"))
    {
        foreach (var map in mapResults.ToModelMapsLite.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    // INVALID!!! <#= map #>
<#+     }
    } #>
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
<#+ if (td.IsIHaveAParentBase) { #>
                    // IHaveAParentBase Properties
                    model.ParentID = entity.ParentID;
                    model.HasChildren = (entity as Anon<#= theTypeName #>)?.HasChildren ?? (entity.Children?.Any(y => y.Active) ?? false);
<#+ } #>
<#+ if (td.IsIHaveATypeBase && td.ForceOrDontResults["Type"].ForceMapOutWithList) { #>
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperFor<#= theTypeName #>Type.Create<#= theTypeName.Replace("GeneralAttribute", "Attribute").Replace("EmailQueue", "Email") #>TypeModelFromEntityLite(entity.Type, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveATypeBase) { #>
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
<#+ } #>
<#+ if (td.IsIHaveAStatusBase && td.ForceOrDontResults["Status"].ForceMapOutWithList) { #>
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = Create<#= theTypeName #>StatusModelFromEntityLite(entity.Status, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveAStatusBase) { #>
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
<#+ } #>
<#+ if (td.IsIHaveAStateBase && td.ForceOrDontResults["State"].ForceMapOutWithList) { #>
                    // IHaveAStateBase Properties (Forced)
                    model.State = Create<#= theTypeName #>StateModelFromEntityLite(entity.State, contextProfileName);
<#+ } #>
<#+ if (td.IsIHaveAStateBase) { #>
                    // IHaveAStateBase Properties
                    model.StateID = entity.StateID;
                    if (entity.State != null)
                    {
                        model.StateKey = entity.State.CustomKey;
                        model.StateName = entity.State.Name;
                        model.StateDisplayName = entity.State.DisplayName;
                        model.StateTranslationKey = entity.State.TranslationKey;
                        model.StateSortOrder = entity.State.SortOrder;
                    }
<#+ } #>
<#+ if (td.IsIHaveNotesBase && td.ForceOrDontResults["Notes"].ForceMapOutWithList) { #>
                    // IHaveNotesBase Properties
                    model.Notes = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
<#+ } #>
<#+ if (td.IsIHaveJsonAttributesBase) { #>
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
<#+ } #>
<#+ if (td.IsIAppliedDiscountBase) { #>
                    // IAppliedDiscountBase Properties
                    model.DiscountTotal = entity.DiscountTotal;
                    model.ApplicationsUsed = entity.ApplicationsUsed;
                    model.TargetApplicationsUsed = entity.TargetApplicationsUsed;
                    model.MasterID = entity.MasterID;
                    if (entity.Slave != null)
                    {
                        model.DiscountValue = entity.Slave.Value;
                        model.DiscountValueType = entity.Slave.ValueType;
                        model.DiscountPriority = entity.Slave.Priority;
                        model.DiscountTypeID = entity.Slave.DiscountTypeID;
                        model.DiscountCanCombine = entity.Slave.CanCombine;
                        model.Slave = ModelMapperForDiscount.CreateDiscountModelFromEntityList(entity.Slave, contextProfileName);
                    }
<#+ } #>
<#+ if (td.IsIAmADiscountFilterRelationshipTable) { #>
                    // IsIAmADiscountFilterRelationshipTable Properties
                    model.MasterID = entity.MasterID;
<#+ } #>
<#+ if (td.IsIObjectNoteBase) { #>
                    // IObjectNoteBase Properties
                    model.MasterID = entity.MasterID;
<#+ } #>
<#+ if (td.IsISalesItemBaseTT && theTypeName == "CartItem") { #>
                    // ISalesItemBase<,,,,> Properties
                    model.Targets = (entity is Anon<#= theTypeName #> ? ((Anon<#= theTypeName #>)entity).Targets : entity.Targets)?.Where(x => x.Active).Select(x => ModelMapperFor<#= theTypeName #>Target.Create<#= theTypeName #>TargetModelFromEntityList(x, contextProfileName)).ToList()!;
<#+ } #>
<#+ if (td.IsISalesEventBase) { #>
                    // ISalesEventBase Properties
                    model.OldHash = entity.OldHash;
                    model.NewHash = entity.NewHash;
                    model.OldStateID = entity.OldStateID;
                    model.NewStateID = entity.NewStateID;
                    model.OldStatusID = entity.OldStatusID;
                    model.NewStatusID = entity.NewStatusID;
                    model.OldTypeID = entity.OldTypeID;
                    model.NewTypeID = entity.NewTypeID;
<#+ } #>
<#+ if (td.IsIImageBase) { #>
                    // IImageBase Properties
                    model.MasterID = entity.MasterID;
<#+ } #>
                    // <#= theTypeName #>'s Properties
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "1: Simples"))
    {
        foreach (string map in mapResults.ToModelMapsList.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    <#= map #>
<#+     } #>
<#+ } #>
                    // <#= theTypeName #>'s Related Objects (Not Mapped unless Forced, or a flattening property)
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "2: 1-(0|1)'s"))
    {
        foreach (string map in mapResults.ToModelMapsList.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        {
            var mapB = map;
            if (mapB.Contains("model.Master =")) { continue; }
            if (mapB.Contains("model.SalesOrderItemID") && theTypeName != "Note")
            {
                mapB = mapB.Replace("model.SalesOrderItemID", "model.SalesItemID");
            }
            else if (mapB.Contains("model.SalesInvoiceItemID") && theTypeName != "Note")
            {
                mapB = mapB.Replace("model.SalesInvoiceItemID", "model.SalesItemID");
            }
            else if (mapB.Contains("model.SalesQuoteItemID") && theTypeName != "Note")
            {
                mapB = mapB.Replace("model.SalesQuoteItemID", "model.SalesItemID");
            }
            else if (mapB.Contains("model.PurchaseOrderItemID") && theTypeName != "Note")
            {
                mapB = mapB.Replace("model.PurchaseOrderItemID", "model.SalesItemID");
            }
            else if (mapB.Contains("model.CartItemID") && theTypeName != "Note")
            {
                mapB = mapB.Replace("model.CartItemID", "model.SalesItemID");
            }
            else if (mapB.Contains("model.SampleRequestItemID") && theTypeName != "Note")
            {
                mapB = mapB.Replace("model.SampleRequestItemID", "model.SalesItemID");
            }
            else if (mapB.Contains("CreateProductModelFromEntityLite("))
            {
                mapB = mapB.Replace("CreateProductModelFromEntityLite(", "MapLiteProductOldExt(").Replace(", contextProfileName", string.Empty);
            } #>
                    <#= mapB #>
<#+     }
    } #>
                    // <#= theTypeName #>'s Associated Objects (Not Mapped unless Forced)
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "3: 1-n's"))
    {
        foreach (var map in mapResults.ToModelMapsList.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    <#= map #>
<#+     } #>
<#+ } #>
                    // Additional Mappings
                    if (Create<#= theTypeName #>ModelFromEntityHooksList != null) { model = Create<#= theTypeName #>ModelFromEntityHooksList(entity, model, contextProfileName); }
<#+ foreach (var mapResults in mapResultsList.Where(x => x.GroupBy == "4: OTHER"))
    {
        foreach (var map in mapResults.ToModelMapsList.Where(x => !string.IsNullOrWhiteSpace(x)).Select(x => x.Replace("\r\n\r\n", "\r\n")).Distinct())
        { #>
                    // INVALID!!! <#= map #>
<#+     }
    } #>
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
<#+     /*} End Loop foreach(Type theType in theTypes) */ #>
    }
}
<#+     return true;
} /* End Function GenerateMappingFile */ #>