// <autogenerated>
// <copyright file="Mapping.Advertising.Ad.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Advertising section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAd
    {
        public sealed class AnonAd : Ad
        {
            public new IEnumerable<AdAccount>? Accounts { get; set; }
            public new IEnumerable<AdBrand>? Brands { get; set; }
            public new IEnumerable<AdFranchise>? Franchises { get; set; }
            public new IEnumerable<AdImage>? Images { get; set; }
            public new IEnumerable<AdStore>? Stores { get; set; }
            public new IEnumerable<AdZone>? AdZones { get; set; }
            public new IEnumerable<CampaignAd>? CampaignAds { get; set; }
        }

        public static readonly Func<Ad?, string?, IAdModel?> MapAdModelFromEntityFull = CreateAdModelFromEntityFull;

        public static readonly Func<Ad?, string?, IAdModel?> MapAdModelFromEntityLite = CreateAdModelFromEntityLite;

        public static readonly Func<Ad?, string?, IAdModel?> MapAdModelFromEntityList = CreateAdModelFromEntityList;

        public static Func<IAd, IAdModel, string?, IAdModel>? CreateAdModelFromEntityHooksFull { get; set; }

        public static Func<IAd, IAdModel, string?, IAdModel>? CreateAdModelFromEntityHooksLite { get; set; }

        public static Func<IAd, IAdModel, string?, IAdModel>? CreateAdModelFromEntityHooksList { get; set; }

        public static Expression<Func<Ad, AnonAd>>? PreBuiltAdSQLSelectorFull { get; set; }

        public static Expression<Func<Ad, AnonAd>>? PreBuiltAdSQLSelectorLite { get; set; }

        public static Expression<Func<Ad, AnonAd>>? PreBuiltAdSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAdModel"/> extension method that creates a(n) <see cref="Ad"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Ad"/> entity.</returns>
        public static IAd CreateAdEntity(
            this IAdModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IAdModel, Ad>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAdFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAdModel"/> extension method that updates a(n) <see cref="Ad"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Ad"/> entity.</returns>
        public static IAd UpdateAdFromModel(
            this IAd entity,
            IAdModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Ad Properties
            entity.Caption = model.Caption;
            entity.EndDate = model.EndDate;
            entity.ExpirationDate = model.ExpirationDate;
            entity.StartDate = model.StartDate;
            entity.TargetURL = model.TargetURL;
            entity.Weight = model.Weight;
            // Ad's Related Objects
            // Ad's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAdSQLSelectorFull()
        {
            PreBuiltAdSQLSelectorFull = x => x == null ? null! : new AnonAd
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAdType.PreBuiltAdTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAdStatus.PreBuiltAdStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForAdImage.PreBuiltAdImageSQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForAdBrand.PreBuiltAdBrandSQLSelectorList.Expand().Compile()).ToList(),
                Franchises = x.Franchises!.Where(y => y.Active).Select(ModelMapperForAdFranchise.PreBuiltAdFranchiseSQLSelectorList.Expand().Compile()).ToList(),
                Stores = x.Stores!.Where(y => y.Active).Select(ModelMapperForAdStore.PreBuiltAdStoreSQLSelectorList.Expand().Compile()).ToList(),
                Accounts = x.Accounts!.Where(y => y.Active).Select(ModelMapperForAdAccount.PreBuiltAdAccountSQLSelectorList.Expand().Compile()).ToList(),
                TargetURL = x.TargetURL,
                Caption = x.Caption,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                ExpirationDate = x.ExpirationDate,
                Weight = x.Weight,
                ImpressionCounterID = x.ImpressionCounterID,
                ImpressionCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ImpressionCounter!),
                ClickCounterID = x.ClickCounterID,
                ClickCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ClickCounter!),
                AdZones = x.AdZones!.Where(y => y.Active).Select(ModelMapperForAdZone.PreBuiltAdZoneSQLSelectorList.Expand().Compile()).ToList(),
                CampaignAds = x.CampaignAds!.Where(y => y.Active).Select(ModelMapperForCampaignAd.PreBuiltCampaignAdSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAdSQLSelectorLite()
        {
            PreBuiltAdSQLSelectorLite = x => x == null ? null! : new AnonAd
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAdType.PreBuiltAdTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAdStatus.PreBuiltAdStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                TargetURL = x.TargetURL,
                Caption = x.Caption,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                ExpirationDate = x.ExpirationDate,
                Weight = x.Weight,
                ImpressionCounterID = x.ImpressionCounterID,
                ImpressionCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ImpressionCounter!),
                ClickCounterID = x.ClickCounterID,
                ClickCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ClickCounter!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAdSQLSelectorList()
        {
            PreBuiltAdSQLSelectorList = x => x == null ? null! : new AnonAd
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAdType.PreBuiltAdTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForAdStatus.PreBuiltAdStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                TargetURL = x.TargetURL,
                Caption = x.Caption,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                ExpirationDate = x.ExpirationDate,
                Weight = x.Weight,
                ImpressionCounterID = x.ImpressionCounterID,
                ImpressionCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ImpressionCounter!), // For Flattening Properties (List)
                ClickCounterID = x.ClickCounterID,
                ClickCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ClickCounter!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAdModel> SelectFullAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAdSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAdModel> SelectLiteAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAdSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAdModel> SelectListAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAdSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityList(x, contextProfileName))!;
        }

        public static IAdModel? SelectFirstFullAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAdModel? SelectFirstListAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAdModel? SelectSingleFullAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAdModel? SelectSingleLiteAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAdModel? SelectSingleListAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAdModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAdModel> results, int totalPages, int totalCount) SelectFullAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAdSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAdModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAdModel> results, int totalPages, int totalCount) SelectLiteAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAdSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAdModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAdModel> results, int totalPages, int totalCount) SelectListAdAndMapToAdModel(
            this IQueryable<Ad> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAdSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAdModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAdModel? CreateAdModelFromEntityFull(this IAd? entity, string? contextProfileName)
        {
            return CreateAdModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAdModel? CreateAdModelFromEntityLite(this IAd? entity, string? contextProfileName)
        {
            return CreateAdModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAdModel? CreateAdModelFromEntityList(this IAd? entity, string? contextProfileName)
        {
            return CreateAdModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAdModel? CreateAdModelFromEntity(
            this IAd? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAdModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Ad's Properties
                    // Ad's Related Objects
                    model.ClickCounter = ModelMapperForCounter.CreateCounterModelFromEntityLite(entity.ClickCounter, contextProfileName);
                    model.ImpressionCounter = ModelMapperForCounter.CreateCounterModelFromEntityLite(entity.ImpressionCounter, contextProfileName);
                    // Ad's Associated Objects
                    model.Accounts = (entity is AnonAd ? ((AnonAd)entity).Accounts : entity.Accounts)?.Where(x => x.Active).Select(x => ModelMapperForAdAccount.CreateAdAccountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.AdZones = (entity is AnonAd ? ((AnonAd)entity).AdZones : entity.AdZones)?.Where(x => x.Active).Select(x => ModelMapperForAdZone.CreateAdZoneModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Brands = (entity is AnonAd ? ((AnonAd)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForAdBrand.CreateAdBrandModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.CampaignAds = (entity is AnonAd ? ((AnonAd)entity).CampaignAds : entity.CampaignAds)?.Where(x => x.Active).Select(x => ModelMapperForCampaignAd.CreateCampaignAdModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Franchises = (entity is AnonAd ? ((AnonAd)entity).Franchises : entity.Franchises)?.Where(x => x.Active).Select(x => ModelMapperForAdFranchise.CreateAdFranchiseModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonAd ? ((AnonAd)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForAdImage.CreateAdImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Stores = (entity is AnonAd ? ((AnonAd)entity).Stores : entity.Stores)?.Where(x => x.Active).Select(x => ModelMapperForAdStore.CreateAdStoreModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateAdModelFromEntityHooksFull != null) { model = CreateAdModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Ad's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForAdType.CreateAdTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForAdStatus.CreateAdStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Ad's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Ad's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAdModelFromEntityHooksLite != null) { model = CreateAdModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Ad's Properties
                    model.Caption = entity.Caption;
                    model.EndDate = entity.EndDate;
                    model.ExpirationDate = entity.ExpirationDate;
                    model.StartDate = entity.StartDate;
                    model.TargetURL = entity.TargetURL;
                    model.Weight = entity.Weight;
                    // Ad's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ClickCounterID = entity.ClickCounterID;
                    model.ClickCounterKey = entity.ClickCounter?.CustomKey;
                    model.ImpressionCounterID = entity.ImpressionCounterID;
                    model.ImpressionCounterKey = entity.ImpressionCounter?.CustomKey;
                    // Ad's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAdModelFromEntityHooksList != null) { model = CreateAdModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
