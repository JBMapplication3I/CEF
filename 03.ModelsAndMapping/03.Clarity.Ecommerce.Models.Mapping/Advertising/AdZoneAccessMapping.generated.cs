// <autogenerated>
// <copyright file="Mapping.Advertising.AdZoneAccess.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Advertising section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAdZoneAccess
    {
        public sealed class AnonAdZoneAccess : AdZoneAccess
        {
            public new IEnumerable<AdZone>? AdZones { get; set; }
        }

        public static readonly Func<AdZoneAccess?, string?, IAdZoneAccessModel?> MapAdZoneAccessModelFromEntityFull = CreateAdZoneAccessModelFromEntityFull;

        public static readonly Func<AdZoneAccess?, string?, IAdZoneAccessModel?> MapAdZoneAccessModelFromEntityLite = CreateAdZoneAccessModelFromEntityLite;

        public static readonly Func<AdZoneAccess?, string?, IAdZoneAccessModel?> MapAdZoneAccessModelFromEntityList = CreateAdZoneAccessModelFromEntityList;

        public static Func<IAdZoneAccess, IAdZoneAccessModel, string?, IAdZoneAccessModel>? CreateAdZoneAccessModelFromEntityHooksFull { get; set; }

        public static Func<IAdZoneAccess, IAdZoneAccessModel, string?, IAdZoneAccessModel>? CreateAdZoneAccessModelFromEntityHooksLite { get; set; }

        public static Func<IAdZoneAccess, IAdZoneAccessModel, string?, IAdZoneAccessModel>? CreateAdZoneAccessModelFromEntityHooksList { get; set; }

        public static Expression<Func<AdZoneAccess, AnonAdZoneAccess>>? PreBuiltAdZoneAccessSQLSelectorFull { get; set; }

        public static Expression<Func<AdZoneAccess, AnonAdZoneAccess>>? PreBuiltAdZoneAccessSQLSelectorLite { get; set; }

        public static Expression<Func<AdZoneAccess, AnonAdZoneAccess>>? PreBuiltAdZoneAccessSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAdZoneAccessModel"/> extension method that creates a(n) <see cref="AdZoneAccess"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="AdZoneAccess"/> entity.</returns>
        public static IAdZoneAccess CreateAdZoneAccessEntity(
            this IAdZoneAccessModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IAdZoneAccessModel, AdZoneAccess>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAdZoneAccessFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAdZoneAccessModel"/> extension method that updates a(n) <see cref="AdZoneAccess"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="AdZoneAccess"/> entity.</returns>
        public static IAdZoneAccess UpdateAdZoneAccessFromModel(
            this IAdZoneAccess entity,
            IAdZoneAccessModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // AdZoneAccess Properties
            entity.ClickLimit = model.ClickLimit;
            entity.EndDate = model.EndDate;
            entity.ImpressionLimit = model.ImpressionLimit;
            entity.StartDate = model.StartDate;
            entity.UniqueAdLimit = model.UniqueAdLimit;
            // AdZoneAccess's Related Objects
            // AdZoneAccess's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAdZoneAccessSQLSelectorFull()
        {
            PreBuiltAdZoneAccessSQLSelectorFull = x => x == null ? null! : new AnonAdZoneAccess
            {
                ImpressionCounterID = x.ImpressionCounterID,
                ImpressionCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ImpressionCounter!),
                ClickCounterID = x.ClickCounterID,
                ClickCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ClickCounter!),
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                UniqueAdLimit = x.UniqueAdLimit,
                ImpressionLimit = x.ImpressionLimit,
                ClickLimit = x.ClickLimit,
                ZoneID = x.ZoneID,
                Zone = ModelMapperForZone.PreBuiltZoneSQLSelectorList.Expand().Compile().Invoke(x.Zone!),
                SubscriptionID = x.SubscriptionID,
                Subscription = ModelMapperForSubscription.PreBuiltSubscriptionSQLSelectorList.Expand().Compile().Invoke(x.Subscription!),
                AdZones = x.AdZones!.Where(y => y.Active).Select(ModelMapperForAdZone.PreBuiltAdZoneSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAdZoneAccessSQLSelectorLite()
        {
            PreBuiltAdZoneAccessSQLSelectorLite = x => x == null ? null! : new AnonAdZoneAccess
            {
                ImpressionCounterID = x.ImpressionCounterID,
                ImpressionCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ImpressionCounter!),
                ClickCounterID = x.ClickCounterID,
                ClickCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ClickCounter!),
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                UniqueAdLimit = x.UniqueAdLimit,
                ImpressionLimit = x.ImpressionLimit,
                ClickLimit = x.ClickLimit,
                ZoneID = x.ZoneID,
                Zone = ModelMapperForZone.PreBuiltZoneSQLSelectorList.Expand().Compile().Invoke(x.Zone!),
                SubscriptionID = x.SubscriptionID,
                Subscription = ModelMapperForSubscription.PreBuiltSubscriptionSQLSelectorList.Expand().Compile().Invoke(x.Subscription!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAdZoneAccessSQLSelectorList()
        {
            PreBuiltAdZoneAccessSQLSelectorList = x => x == null ? null! : new AnonAdZoneAccess
            {
                ImpressionCounterID = x.ImpressionCounterID,
                ImpressionCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ImpressionCounter!), // For Flattening Properties (List)
                ClickCounterID = x.ClickCounterID,
                ClickCounter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.ClickCounter!), // For Flattening Properties (List)
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                UniqueAdLimit = x.UniqueAdLimit,
                ImpressionLimit = x.ImpressionLimit,
                ClickLimit = x.ClickLimit,
                ZoneID = x.ZoneID,
                Zone = ModelMapperForZone.PreBuiltZoneSQLSelectorList.Expand().Compile().Invoke(x.Zone!), // For Flattening Properties (List)
                SubscriptionID = x.SubscriptionID,
                Subscription = ModelMapperForSubscription.PreBuiltSubscriptionSQLSelectorList.Expand().Compile().Invoke(x.Subscription!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAdZoneAccessModel> SelectFullAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAdZoneAccessSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAdZoneAccessModel> SelectLiteAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAdZoneAccessSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAdZoneAccessModel> SelectListAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAdZoneAccessSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityList(x, contextProfileName))!;
        }

        public static IAdZoneAccessModel? SelectFirstFullAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdZoneAccessSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAdZoneAccessModel? SelectFirstListAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdZoneAccessSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAdZoneAccessModel? SelectSingleFullAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdZoneAccessSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAdZoneAccessModel? SelectSingleLiteAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdZoneAccessSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAdZoneAccessModel? SelectSingleListAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAdZoneAccessSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAdZoneAccessModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAdZoneAccessModel> results, int totalPages, int totalCount) SelectFullAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAdZoneAccessSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAdZoneAccessModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAdZoneAccessModel> results, int totalPages, int totalCount) SelectLiteAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAdZoneAccessSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAdZoneAccessModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAdZoneAccessModel> results, int totalPages, int totalCount) SelectListAdZoneAccessAndMapToAdZoneAccessModel(
            this IQueryable<AdZoneAccess> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAdZoneAccessSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAdZoneAccessSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAdZoneAccessModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAdZoneAccessModel? CreateAdZoneAccessModelFromEntityFull(this IAdZoneAccess? entity, string? contextProfileName)
        {
            return CreateAdZoneAccessModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAdZoneAccessModel? CreateAdZoneAccessModelFromEntityLite(this IAdZoneAccess? entity, string? contextProfileName)
        {
            return CreateAdZoneAccessModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAdZoneAccessModel? CreateAdZoneAccessModelFromEntityList(this IAdZoneAccess? entity, string? contextProfileName)
        {
            return CreateAdZoneAccessModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAdZoneAccessModel? CreateAdZoneAccessModelFromEntity(
            this IAdZoneAccess? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAdZoneAccessModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AdZoneAccess's Properties
                    // AdZoneAccess's Related Objects
                    model.ClickCounter = ModelMapperForCounter.CreateCounterModelFromEntityLite(entity.ClickCounter, contextProfileName);
                    model.ImpressionCounter = ModelMapperForCounter.CreateCounterModelFromEntityLite(entity.ImpressionCounter, contextProfileName);
                    model.Subscription = ModelMapperForSubscription.CreateSubscriptionModelFromEntityLite(entity.Subscription, contextProfileName);
                    model.Zone = ModelMapperForZone.CreateZoneModelFromEntityLite(entity.Zone, contextProfileName);
                    // AdZoneAccess's Associated Objects
                    model.AdZones = (entity is AnonAdZoneAccess ? ((AnonAdZoneAccess)entity).AdZones : entity.AdZones)?.Where(x => x.Active).Select(x => ModelMapperForAdZone.CreateAdZoneModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateAdZoneAccessModelFromEntityHooksFull != null) { model = CreateAdZoneAccessModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AdZoneAccess's Properties
                    // AdZoneAccess's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // AdZoneAccess's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAdZoneAccessModelFromEntityHooksLite != null) { model = CreateAdZoneAccessModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // AdZoneAccess's Properties
                    model.ClickLimit = entity.ClickLimit;
                    model.EndDate = entity.EndDate;
                    model.ImpressionLimit = entity.ImpressionLimit;
                    model.StartDate = entity.StartDate;
                    model.UniqueAdLimit = entity.UniqueAdLimit;
                    // AdZoneAccess's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ClickCounterID = entity.ClickCounterID;
                    model.ClickCounterKey = entity.ClickCounter?.CustomKey;
                    model.ImpressionCounterID = entity.ImpressionCounterID;
                    model.ImpressionCounterKey = entity.ImpressionCounter?.CustomKey;
                    model.SubscriptionID = entity.SubscriptionID;
                    model.SubscriptionKey = entity.Subscription?.CustomKey;
                    model.SubscriptionName = entity.Subscription?.Name;
                    model.ZoneID = entity.ZoneID;
                    model.ZoneKey = entity.Zone?.CustomKey;
                    model.ZoneName = entity.Zone?.Name;
                    // AdZoneAccess's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAdZoneAccessModelFromEntityHooksList != null) { model = CreateAdZoneAccessModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
