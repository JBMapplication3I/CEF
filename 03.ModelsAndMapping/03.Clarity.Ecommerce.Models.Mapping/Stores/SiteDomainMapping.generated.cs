// <autogenerated>
// <copyright file="Mapping.Stores.SiteDomain.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Stores section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForSiteDomain
    {
        public sealed class AnonSiteDomain : SiteDomain
        {
            public new IEnumerable<BrandSiteDomain>? Brands { get; set; }
        }

        public static readonly Func<SiteDomain?, string?, ISiteDomainModel?> MapSiteDomainModelFromEntityFull = CreateSiteDomainModelFromEntityFull;

        public static readonly Func<SiteDomain?, string?, ISiteDomainModel?> MapSiteDomainModelFromEntityLite = CreateSiteDomainModelFromEntityLite;

        public static readonly Func<SiteDomain?, string?, ISiteDomainModel?> MapSiteDomainModelFromEntityList = CreateSiteDomainModelFromEntityList;

        public static Func<ISiteDomain, ISiteDomainModel, string?, ISiteDomainModel>? CreateSiteDomainModelFromEntityHooksFull { get; set; }

        public static Func<ISiteDomain, ISiteDomainModel, string?, ISiteDomainModel>? CreateSiteDomainModelFromEntityHooksLite { get; set; }

        public static Func<ISiteDomain, ISiteDomainModel, string?, ISiteDomainModel>? CreateSiteDomainModelFromEntityHooksList { get; set; }

        public static Expression<Func<SiteDomain, AnonSiteDomain>>? PreBuiltSiteDomainSQLSelectorFull { get; set; }

        public static Expression<Func<SiteDomain, AnonSiteDomain>>? PreBuiltSiteDomainSQLSelectorLite { get; set; }

        public static Expression<Func<SiteDomain, AnonSiteDomain>>? PreBuiltSiteDomainSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISiteDomainModel"/> extension method that creates a(n) <see cref="SiteDomain"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="SiteDomain"/> entity.</returns>
        public static ISiteDomain CreateSiteDomainEntity(
            this ISiteDomainModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ISiteDomainModel, SiteDomain>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateSiteDomainFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISiteDomainModel"/> extension method that updates a(n) <see cref="SiteDomain"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="SiteDomain"/> entity.</returns>
        public static ISiteDomain UpdateSiteDomainFromModel(
            this ISiteDomain entity,
            ISiteDomainModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // SiteDomain Properties
            entity.AlternateUrl1 = model.AlternateUrl1;
            entity.AlternateUrl2 = model.AlternateUrl2;
            entity.AlternateUrl3 = model.AlternateUrl3;
            entity.CatalogContent = model.CatalogContent;
            entity.FooterContent = model.FooterContent;
            entity.HeaderContent = model.HeaderContent;
            entity.SideBarContent = model.SideBarContent;
            entity.Url = model.Url;
            // SiteDomain's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenSiteDomainSQLSelectorFull()
        {
            PreBuiltSiteDomainSQLSelectorFull = x => x == null ? null! : new AnonSiteDomain
            {
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandSiteDomain.PreBuiltBrandSiteDomainSQLSelectorList.Expand().Compile()).ToList(),
                HeaderContent = x.HeaderContent,
                FooterContent = x.FooterContent,
                SideBarContent = x.SideBarContent,
                CatalogContent = x.CatalogContent,
                Url = x.Url,
                AlternateUrl1 = x.AlternateUrl1,
                AlternateUrl2 = x.AlternateUrl2,
                AlternateUrl3 = x.AlternateUrl3,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSiteDomainSQLSelectorLite()
        {
            PreBuiltSiteDomainSQLSelectorLite = x => x == null ? null! : new AnonSiteDomain
            {
                HeaderContent = x.HeaderContent,
                FooterContent = x.FooterContent,
                SideBarContent = x.SideBarContent,
                CatalogContent = x.CatalogContent,
                Url = x.Url,
                AlternateUrl1 = x.AlternateUrl1,
                AlternateUrl2 = x.AlternateUrl2,
                AlternateUrl3 = x.AlternateUrl3,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSiteDomainSQLSelectorList()
        {
            PreBuiltSiteDomainSQLSelectorList = x => x == null ? null! : new AnonSiteDomain
            {
                HeaderContent = x.HeaderContent,
                FooterContent = x.FooterContent,
                SideBarContent = x.SideBarContent,
                CatalogContent = x.CatalogContent,
                Url = x.Url,
                AlternateUrl1 = x.AlternateUrl1,
                AlternateUrl2 = x.AlternateUrl2,
                AlternateUrl3 = x.AlternateUrl3,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ISiteDomainModel> SelectFullSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSiteDomainSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISiteDomainModel> SelectLiteSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSiteDomainSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISiteDomainModel> SelectListSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSiteDomainSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityList(x, contextProfileName))!;
        }

        public static ISiteDomainModel? SelectFirstFullSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSiteDomainSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISiteDomainModel? SelectFirstListSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSiteDomainSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISiteDomainModel? SelectSingleFullSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSiteDomainSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISiteDomainModel? SelectSingleLiteSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSiteDomainSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISiteDomainModel? SelectSingleListSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSiteDomainSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSiteDomainModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISiteDomainModel> results, int totalPages, int totalCount) SelectFullSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSiteDomainSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateSiteDomainModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISiteDomainModel> results, int totalPages, int totalCount) SelectLiteSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSiteDomainSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateSiteDomainModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISiteDomainModel> results, int totalPages, int totalCount) SelectListSiteDomainAndMapToSiteDomainModel(
            this IQueryable<SiteDomain> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSiteDomainSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSiteDomainSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateSiteDomainModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISiteDomainModel? CreateSiteDomainModelFromEntityFull(this ISiteDomain? entity, string? contextProfileName)
        {
            return CreateSiteDomainModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISiteDomainModel? CreateSiteDomainModelFromEntityLite(this ISiteDomain? entity, string? contextProfileName)
        {
            return CreateSiteDomainModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISiteDomainModel? CreateSiteDomainModelFromEntityList(this ISiteDomain? entity, string? contextProfileName)
        {
            return CreateSiteDomainModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISiteDomainModel? CreateSiteDomainModelFromEntity(
            this ISiteDomain? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ISiteDomainModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // SiteDomain's Properties
                    // SiteDomain's Related Objects
                    // SiteDomain's Associated Objects
                    model.Brands = (entity is AnonSiteDomain ? ((AnonSiteDomain)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandSiteDomain.CreateBrandSiteDomainModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateSiteDomainModelFromEntityHooksFull != null) { model = CreateSiteDomainModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // SiteDomain's Properties
                    // SiteDomain's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // SiteDomain's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSiteDomainModelFromEntityHooksLite != null) { model = CreateSiteDomainModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // SiteDomain's Properties
                    model.AlternateUrl1 = entity.AlternateUrl1;
                    model.AlternateUrl2 = entity.AlternateUrl2;
                    model.AlternateUrl3 = entity.AlternateUrl3;
                    model.CatalogContent = entity.CatalogContent;
                    model.FooterContent = entity.FooterContent;
                    model.HeaderContent = entity.HeaderContent;
                    model.SideBarContent = entity.SideBarContent;
                    model.Url = entity.Url;
                    // SiteDomain's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // SiteDomain's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSiteDomainModelFromEntityHooksList != null) { model = CreateSiteDomainModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
