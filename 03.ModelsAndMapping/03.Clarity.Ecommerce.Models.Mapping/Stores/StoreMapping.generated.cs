// <autogenerated>
// <copyright file="Mapping.Stores.Store.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Stores section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForStore
    {
        public sealed class AnonStore : Store
        {
            public new IEnumerable<BrandStore>? Brands { get; set; }
            public new IEnumerable<FranchiseStore>? Franchises { get; set; }
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<Review>? Reviews { get; set; }
            public new IEnumerable<StoreAccount>? Accounts { get; set; }
            public new IEnumerable<StoreBadge>? StoreBadges { get; set; }
            public new IEnumerable<StoreCategory>? Categories { get; set; }
            public new IEnumerable<StoreContact>? StoreContacts { get; set; }
            public new IEnumerable<StoreCountry>? StoreCountries { get; set; }
            public new IEnumerable<StoreDistrict>? StoreDistricts { get; set; }
            public new IEnumerable<StoreImage>? Images { get; set; }
            public new IEnumerable<StoreInventoryLocation>? StoreInventoryLocations { get; set; }
            public new IEnumerable<StoreManufacturer>? Manufacturers { get; set; }
            public new IEnumerable<StoreRegion>? StoreRegions { get; set; }
            public new IEnumerable<StoreSubscription>? StoreSubscriptions { get; set; }
            public new IEnumerable<StoreUser>? Users { get; set; }
            public new IEnumerable<StoreVendor>? Vendors { get; set; }
        }

        public static readonly Func<Store?, string?, IStoreModel?> MapStoreModelFromEntityFull = CreateStoreModelFromEntityFull;

        public static readonly Func<Store?, string?, IStoreModel?> MapStoreModelFromEntityLite = CreateStoreModelFromEntityLite;

        public static readonly Func<Store?, string?, IStoreModel?> MapStoreModelFromEntityList = CreateStoreModelFromEntityList;

        public static Func<IStore, IStoreModel, string?, IStoreModel>? CreateStoreModelFromEntityHooksFull { get; set; }

        public static Func<IStore, IStoreModel, string?, IStoreModel>? CreateStoreModelFromEntityHooksLite { get; set; }

        public static Func<IStore, IStoreModel, string?, IStoreModel>? CreateStoreModelFromEntityHooksList { get; set; }

        public static Expression<Func<Store, AnonStore>>? PreBuiltStoreSQLSelectorFull { get; set; }

        public static Expression<Func<Store, AnonStore>>? PreBuiltStoreSQLSelectorLite { get; set; }

        public static Expression<Func<Store, AnonStore>>? PreBuiltStoreSQLSelectorList { get; set; }

        /// <summary>An <see cref="IStoreModel"/> extension method that creates a(n) <see cref="Store"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Store"/> entity.</returns>
        public static IStore CreateStoreEntity(
            this IStoreModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IStoreModel, Store>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateStoreFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IStoreModel"/> extension method that updates a(n) <see cref="Store"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Store"/> entity.</returns>
        public static IStore UpdateStoreFromModel(
            this IStore entity,
            IStoreModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Store Properties
            entity.About = model.About;
            entity.DisplayInStorefront = model.DisplayInStorefront;
            entity.EndDate = model.EndDate;
            entity.ExternalUrl = model.ExternalUrl;
            entity.MinimumForFreeShippingDollarAmount = model.MinimumForFreeShippingDollarAmount;
            entity.MinimumForFreeShippingDollarAmountAfter = model.MinimumForFreeShippingDollarAmountAfter;
            entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingDollarAmountWarningMessage = model.MinimumForFreeShippingDollarAmountWarningMessage;
            entity.MinimumForFreeShippingQuantityAmount = model.MinimumForFreeShippingQuantityAmount;
            entity.MinimumForFreeShippingQuantityAmountAfter = model.MinimumForFreeShippingQuantityAmountAfter;
            entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingQuantityAmountWarningMessage = model.MinimumForFreeShippingQuantityAmountWarningMessage;
            entity.MinimumOrderDollarAmount = model.MinimumOrderDollarAmount;
            entity.MinimumOrderDollarAmountAfter = model.MinimumOrderDollarAmountAfter;
            entity.MinimumOrderDollarAmountOverrideFee = model.MinimumOrderDollarAmountOverrideFee;
            entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderDollarAmountOverrideFeeIsPercent = model.MinimumOrderDollarAmountOverrideFeeIsPercent;
            entity.MinimumOrderDollarAmountOverrideFeeWarningMessage = model.MinimumOrderDollarAmountOverrideFeeWarningMessage;
            entity.MinimumOrderDollarAmountWarningMessage = model.MinimumOrderDollarAmountWarningMessage;
            entity.MinimumOrderQuantityAmount = model.MinimumOrderQuantityAmount;
            entity.MinimumOrderQuantityAmountAfter = model.MinimumOrderQuantityAmountAfter;
            entity.MinimumOrderQuantityAmountOverrideFee = model.MinimumOrderQuantityAmountOverrideFee;
            entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderQuantityAmountOverrideFeeIsPercent = model.MinimumOrderQuantityAmountOverrideFeeIsPercent;
            entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage = model.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
            entity.MinimumOrderQuantityAmountWarningMessage = model.MinimumOrderQuantityAmountWarningMessage;
            entity.MissionStatement = model.MissionStatement;
            entity.OperatingHoursClosedStatement = model.OperatingHoursClosedStatement;
            entity.OperatingHoursFridayEnd = model.OperatingHoursFridayEnd;
            entity.OperatingHoursFridayStart = model.OperatingHoursFridayStart;
            entity.OperatingHoursMondayEnd = model.OperatingHoursMondayEnd;
            entity.OperatingHoursMondayStart = model.OperatingHoursMondayStart;
            entity.OperatingHoursSaturdayEnd = model.OperatingHoursSaturdayEnd;
            entity.OperatingHoursSaturdayStart = model.OperatingHoursSaturdayStart;
            entity.OperatingHoursSundayEnd = model.OperatingHoursSundayEnd;
            entity.OperatingHoursSundayStart = model.OperatingHoursSundayStart;
            entity.OperatingHoursThursdayEnd = model.OperatingHoursThursdayEnd;
            entity.OperatingHoursThursdayStart = model.OperatingHoursThursdayStart;
            entity.OperatingHoursTimeZoneId = model.OperatingHoursTimeZoneId;
            entity.OperatingHoursTuesdayEnd = model.OperatingHoursTuesdayEnd;
            entity.OperatingHoursTuesdayStart = model.OperatingHoursTuesdayStart;
            entity.OperatingHoursWednesdayEnd = model.OperatingHoursWednesdayEnd;
            entity.OperatingHoursWednesdayStart = model.OperatingHoursWednesdayStart;
            entity.Overview = model.Overview;
            entity.SeoDescription = model.SeoDescription;
            entity.SeoKeywords = model.SeoKeywords;
            entity.SeoMetaData = model.SeoMetaData;
            entity.SeoPageTitle = model.SeoPageTitle;
            entity.SeoUrl = model.SeoUrl;
            entity.Slogan = model.Slogan;
            entity.SortOrder = model.SortOrder;
            entity.StartDate = model.StartDate;
            // Store's Related Objects
            // Store's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenStoreSQLSelectorFull()
        {
            PreBuiltStoreSQLSelectorFull = x => x == null ? null! : new AnonStore
            {
                SeoUrl = x.SeoUrl,
                SeoKeywords = x.SeoKeywords,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                TypeID = x.TypeID,
                Type = ModelMapperForStoreType.PreBuiltStoreTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForStoreImage.PreBuiltStoreImageSQLSelectorList.Expand().Compile()).ToList(),
                Reviews = x.Reviews!.Where(y => y.Active).Select(ModelMapperForReview.PreBuiltReviewSQLSelectorList.Expand().Compile()).ToList(),
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                Accounts = x.Accounts!.Where(y => y.Active).Select(ModelMapperForStoreAccount.PreBuiltStoreAccountSQLSelectorList.Expand().Compile()).ToList(),
                Users = x.Users!.Where(y => y.Active).Select(ModelMapperForStoreUser.PreBuiltStoreUserSQLSelectorList.Expand().Compile()).ToList(),
                Vendors = x.Vendors!.Where(y => y.Active).Select(ModelMapperForStoreVendor.PreBuiltStoreVendorSQLSelectorList.Expand().Compile()).ToList(),
                Categories = x.Categories!.Where(y => y.Active).Select(ModelMapperForStoreCategory.PreBuiltStoreCategorySQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandStore.PreBuiltBrandStoreSQLSelectorList.Expand().Compile()).ToList(),
                Franchises = x.Franchises!.Where(y => y.Active).Select(ModelMapperForFranchiseStore.PreBuiltFranchiseStoreSQLSelectorList.Expand().Compile()).ToList(),
                Manufacturers = x.Manufacturers!.Where(y => y.Active).Select(ModelMapperForStoreManufacturer.PreBuiltStoreManufacturerSQLSelectorList.Expand().Compile()).ToList(),
                Slogan = x.Slogan,
                MissionStatement = x.MissionStatement,
                About = x.About,
                Overview = x.Overview,
                ExternalUrl = x.ExternalUrl,
                OperatingHoursTimeZoneId = x.OperatingHoursTimeZoneId,
                OperatingHoursMondayStart = x.OperatingHoursMondayStart,
                OperatingHoursMondayEnd = x.OperatingHoursMondayEnd,
                OperatingHoursTuesdayStart = x.OperatingHoursTuesdayStart,
                OperatingHoursTuesdayEnd = x.OperatingHoursTuesdayEnd,
                OperatingHoursWednesdayStart = x.OperatingHoursWednesdayStart,
                OperatingHoursWednesdayEnd = x.OperatingHoursWednesdayEnd,
                OperatingHoursThursdayStart = x.OperatingHoursThursdayStart,
                OperatingHoursThursdayEnd = x.OperatingHoursThursdayEnd,
                OperatingHoursFridayStart = x.OperatingHoursFridayStart,
                OperatingHoursFridayEnd = x.OperatingHoursFridayEnd,
                OperatingHoursSaturdayStart = x.OperatingHoursSaturdayStart,
                OperatingHoursSaturdayEnd = x.OperatingHoursSaturdayEnd,
                OperatingHoursSundayStart = x.OperatingHoursSundayStart,
                OperatingHoursSundayEnd = x.OperatingHoursSundayEnd,
                OperatingHoursClosedStatement = x.OperatingHoursClosedStatement,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                SortOrder = x.SortOrder,
                DisplayInStorefront = x.DisplayInStorefront,
                LanguageID = x.LanguageID,
                Language = ModelMapperForLanguage.PreBuiltLanguageSQLSelectorList.Expand().Compile().Invoke(x.Language!),
                StoreBadges = x.StoreBadges!.Where(y => y.Active).Select(ModelMapperForStoreBadge.PreBuiltStoreBadgeSQLSelectorList.Expand().Compile()).ToList(),
                StoreContacts = x.StoreContacts!.Where(y => y.Active).Select(ModelMapperForStoreContact.PreBuiltStoreContactSQLSelectorList.Expand().Compile()).ToList(),
                StoreInventoryLocations = x.StoreInventoryLocations!.Where(y => y.Active).Select(ModelMapperForStoreInventoryLocation.PreBuiltStoreInventoryLocationSQLSelectorList.Expand().Compile()).ToList(),
                StoreSubscriptions = x.StoreSubscriptions!.Where(y => y.Active).Select(ModelMapperForStoreSubscription.PreBuiltStoreSubscriptionSQLSelectorList.Expand().Compile()).ToList(),
                StoreCountries = x.StoreCountries!.Where(y => y.Active).Select(ModelMapperForStoreCountry.PreBuiltStoreCountrySQLSelectorList.Expand().Compile()).ToList(),
                StoreRegions = x.StoreRegions!.Where(y => y.Active).Select(ModelMapperForStoreRegion.PreBuiltStoreRegionSQLSelectorList.Expand().Compile()).ToList(),
                StoreDistricts = x.StoreDistricts!.Where(y => y.Active).Select(ModelMapperForStoreDistrict.PreBuiltStoreDistrictSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenStoreSQLSelectorLite()
        {
            PreBuiltStoreSQLSelectorLite = x => x == null ? null! : new AnonStore
            {
                SeoUrl = x.SeoUrl,
                SeoKeywords = x.SeoKeywords,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                TypeID = x.TypeID,
                Type = ModelMapperForStoreType.PreBuiltStoreTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                Slogan = x.Slogan,
                MissionStatement = x.MissionStatement,
                About = x.About,
                Overview = x.Overview,
                ExternalUrl = x.ExternalUrl,
                OperatingHoursTimeZoneId = x.OperatingHoursTimeZoneId,
                OperatingHoursMondayStart = x.OperatingHoursMondayStart,
                OperatingHoursMondayEnd = x.OperatingHoursMondayEnd,
                OperatingHoursTuesdayStart = x.OperatingHoursTuesdayStart,
                OperatingHoursTuesdayEnd = x.OperatingHoursTuesdayEnd,
                OperatingHoursWednesdayStart = x.OperatingHoursWednesdayStart,
                OperatingHoursWednesdayEnd = x.OperatingHoursWednesdayEnd,
                OperatingHoursThursdayStart = x.OperatingHoursThursdayStart,
                OperatingHoursThursdayEnd = x.OperatingHoursThursdayEnd,
                OperatingHoursFridayStart = x.OperatingHoursFridayStart,
                OperatingHoursFridayEnd = x.OperatingHoursFridayEnd,
                OperatingHoursSaturdayStart = x.OperatingHoursSaturdayStart,
                OperatingHoursSaturdayEnd = x.OperatingHoursSaturdayEnd,
                OperatingHoursSundayStart = x.OperatingHoursSundayStart,
                OperatingHoursSundayEnd = x.OperatingHoursSundayEnd,
                OperatingHoursClosedStatement = x.OperatingHoursClosedStatement,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                SortOrder = x.SortOrder,
                DisplayInStorefront = x.DisplayInStorefront,
                LanguageID = x.LanguageID,
                Language = ModelMapperForLanguage.PreBuiltLanguageSQLSelectorList.Expand().Compile().Invoke(x.Language!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenStoreSQLSelectorList()
        {
            PreBuiltStoreSQLSelectorList = x => x == null ? null! : new AnonStore
            {
                SeoUrl = x.SeoUrl,
                TypeID = x.TypeID,
                Type = ModelMapperForStoreType.PreBuiltStoreTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!), // For Flattening Properties (List)
                Slogan = x.Slogan,
                MissionStatement = x.MissionStatement,
                About = x.About,
                Overview = x.Overview,
                ExternalUrl = x.ExternalUrl,
                OperatingHoursTimeZoneId = x.OperatingHoursTimeZoneId,
                OperatingHoursMondayStart = x.OperatingHoursMondayStart,
                OperatingHoursMondayEnd = x.OperatingHoursMondayEnd,
                OperatingHoursTuesdayStart = x.OperatingHoursTuesdayStart,
                OperatingHoursTuesdayEnd = x.OperatingHoursTuesdayEnd,
                OperatingHoursWednesdayStart = x.OperatingHoursWednesdayStart,
                OperatingHoursWednesdayEnd = x.OperatingHoursWednesdayEnd,
                OperatingHoursThursdayStart = x.OperatingHoursThursdayStart,
                OperatingHoursThursdayEnd = x.OperatingHoursThursdayEnd,
                OperatingHoursFridayStart = x.OperatingHoursFridayStart,
                OperatingHoursFridayEnd = x.OperatingHoursFridayEnd,
                OperatingHoursSaturdayStart = x.OperatingHoursSaturdayStart,
                OperatingHoursSaturdayEnd = x.OperatingHoursSaturdayEnd,
                OperatingHoursSundayStart = x.OperatingHoursSundayStart,
                OperatingHoursSundayEnd = x.OperatingHoursSundayEnd,
                OperatingHoursClosedStatement = x.OperatingHoursClosedStatement,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                SortOrder = x.SortOrder,
                DisplayInStorefront = x.DisplayInStorefront,
                LanguageID = x.LanguageID,
                Language = ModelMapperForLanguage.PreBuiltLanguageSQLSelectorList.Expand().Compile().Invoke(x.Language!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IStoreModel> SelectFullStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltStoreSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IStoreModel> SelectLiteStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltStoreSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IStoreModel> SelectListStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltStoreSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityList(x, contextProfileName))!;
        }

        public static IStoreModel? SelectFirstFullStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoreSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IStoreModel? SelectFirstListStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoreSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IStoreModel? SelectSingleFullStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoreSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IStoreModel? SelectSingleLiteStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoreSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IStoreModel? SelectSingleListStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoreSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateStoreModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IStoreModel> results, int totalPages, int totalCount) SelectFullStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltStoreSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateStoreModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IStoreModel> results, int totalPages, int totalCount) SelectLiteStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltStoreSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateStoreModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IStoreModel> results, int totalPages, int totalCount) SelectListStoreAndMapToStoreModel(
            this IQueryable<Store> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoreSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltStoreSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateStoreModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IStoreModel? CreateStoreModelFromEntityFull(this IStore? entity, string? contextProfileName)
        {
            return CreateStoreModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IStoreModel? CreateStoreModelFromEntityLite(this IStore? entity, string? contextProfileName)
        {
            return CreateStoreModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IStoreModel? CreateStoreModelFromEntityList(this IStore? entity, string? contextProfileName)
        {
            return CreateStoreModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IStoreModel? CreateStoreModelFromEntity(
            this IStore? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IStoreModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonStore ? ((AnonStore)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Store's Properties
                    // Store's Related Objects
                    model.Language = ModelMapperForLanguage.CreateLanguageModelFromEntityLite(entity.Language, contextProfileName);
                    model.MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingDollarAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingDollarAmountBufferProduct);
                    model.MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingQuantityAmountBufferProduct);
                    model.MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderDollarAmountBufferCategory, contextProfileName);
                    model.MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderDollarAmountBufferProduct);
                    model.MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderQuantityAmountBufferProduct);
                    // Store's Associated Objects
                    model.Accounts = (entity is AnonStore ? ((AnonStore)entity).Accounts : entity.Accounts)?.Where(x => x.Active).Select(x => ModelMapperForStoreAccount.CreateStoreAccountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Brands = (entity is AnonStore ? ((AnonStore)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandStore.CreateBrandStoreModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Categories = (entity is AnonStore ? ((AnonStore)entity).Categories : entity.Categories)?.Where(x => x.Active).Select(x => ModelMapperForStoreCategory.CreateStoreCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Franchises = (entity is AnonStore ? ((AnonStore)entity).Franchises : entity.Franchises)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseStore.CreateFranchiseStoreModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonStore ? ((AnonStore)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForStoreImage.CreateStoreImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Manufacturers = (entity is AnonStore ? ((AnonStore)entity).Manufacturers : entity.Manufacturers)?.Where(x => x.Active).Select(x => ModelMapperForStoreManufacturer.CreateStoreManufacturerModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Reviews = (entity is AnonStore ? ((AnonStore)entity).Reviews : entity.Reviews)?.Where(x => x.Active).Select(x => ModelMapperForReview.CreateReviewModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoreBadges = (entity is AnonStore ? ((AnonStore)entity).StoreBadges : entity.StoreBadges)?.Where(x => x.Active).Select(x => ModelMapperForStoreBadge.CreateStoreBadgeModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoreContacts = (entity is AnonStore ? ((AnonStore)entity).StoreContacts : entity.StoreContacts)?.Where(x => x.Active).Select(x => ModelMapperForStoreContact.CreateStoreContactModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoreCountries = (entity is AnonStore ? ((AnonStore)entity).StoreCountries : entity.StoreCountries)?.Where(x => x.Active).Select(x => ModelMapperForStoreCountry.CreateStoreCountryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoreDistricts = (entity is AnonStore ? ((AnonStore)entity).StoreDistricts : entity.StoreDistricts)?.Where(x => x.Active).Select(x => ModelMapperForStoreDistrict.CreateStoreDistrictModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoreInventoryLocations = (entity is AnonStore ? ((AnonStore)entity).StoreInventoryLocations : entity.StoreInventoryLocations)?.Where(x => x.Active).Select(x => ModelMapperForStoreInventoryLocation.CreateStoreInventoryLocationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoreRegions = (entity is AnonStore ? ((AnonStore)entity).StoreRegions : entity.StoreRegions)?.Where(x => x.Active).Select(x => ModelMapperForStoreRegion.CreateStoreRegionModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoreSubscriptions = (entity is AnonStore ? ((AnonStore)entity).StoreSubscriptions : entity.StoreSubscriptions)?.Where(x => x.Active).Select(x => ModelMapperForStoreSubscription.CreateStoreSubscriptionModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Users = (entity is AnonStore ? ((AnonStore)entity).Users : entity.Users)?.Where(x => x.Active).Select(x => ModelMapperForStoreUser.CreateStoreUserModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Vendors = (entity is AnonStore ? ((AnonStore)entity).Vendors : entity.Vendors)?.Where(x => x.Active).Select(x => ModelMapperForStoreVendor.CreateStoreVendorModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateStoreModelFromEntityHooksFull != null) { model = CreateStoreModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Store's Properties
                    model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingDollarAmountWarningMessage = entity.MinimumForFreeShippingDollarAmountWarningMessage;
                    model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingQuantityAmountWarningMessage = entity.MinimumForFreeShippingQuantityAmountWarningMessage;
                    model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderDollarAmountOverrideFeeWarningMessage = entity.MinimumOrderDollarAmountOverrideFeeWarningMessage;
                    model.MinimumOrderDollarAmountWarningMessage = entity.MinimumOrderDollarAmountWarningMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeWarningMessage = entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
                    model.MinimumOrderQuantityAmountWarningMessage = entity.MinimumOrderQuantityAmountWarningMessage;
                    model.SeoDescription = entity.SeoDescription;
                    model.SeoKeywords = entity.SeoKeywords;
                    model.SeoMetaData = entity.SeoMetaData;
                    model.SeoPageTitle = entity.SeoPageTitle;
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForStoreType.CreateStoreTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Store's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Store's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateStoreModelFromEntityHooksLite != null) { model = CreateStoreModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Store's Properties
                    model.About = entity.About;
                    model.DisplayInStorefront = entity.DisplayInStorefront;
                    model.EndDate = entity.EndDate;
                    model.ExternalUrl = entity.ExternalUrl;
                    model.MinimumForFreeShippingDollarAmount = entity.MinimumForFreeShippingDollarAmount;
                    model.MinimumForFreeShippingDollarAmountAfter = entity.MinimumForFreeShippingDollarAmountAfter;
                    model.MinimumForFreeShippingQuantityAmount = entity.MinimumForFreeShippingQuantityAmount;
                    model.MinimumForFreeShippingQuantityAmountAfter = entity.MinimumForFreeShippingQuantityAmountAfter;
                    model.MinimumOrderDollarAmount = entity.MinimumOrderDollarAmount;
                    model.MinimumOrderDollarAmountAfter = entity.MinimumOrderDollarAmountAfter;
                    model.MinimumOrderDollarAmountOverrideFee = entity.MinimumOrderDollarAmountOverrideFee;
                    model.MinimumOrderDollarAmountOverrideFeeIsPercent = entity.MinimumOrderDollarAmountOverrideFeeIsPercent;
                    model.MinimumOrderQuantityAmount = entity.MinimumOrderQuantityAmount;
                    model.MinimumOrderQuantityAmountAfter = entity.MinimumOrderQuantityAmountAfter;
                    model.MinimumOrderQuantityAmountOverrideFee = entity.MinimumOrderQuantityAmountOverrideFee;
                    model.MinimumOrderQuantityAmountOverrideFeeIsPercent = entity.MinimumOrderQuantityAmountOverrideFeeIsPercent;
                    model.MissionStatement = entity.MissionStatement;
                    model.OperatingHoursClosedStatement = entity.OperatingHoursClosedStatement;
                    model.OperatingHoursFridayEnd = entity.OperatingHoursFridayEnd;
                    model.OperatingHoursFridayStart = entity.OperatingHoursFridayStart;
                    model.OperatingHoursMondayEnd = entity.OperatingHoursMondayEnd;
                    model.OperatingHoursMondayStart = entity.OperatingHoursMondayStart;
                    model.OperatingHoursSaturdayEnd = entity.OperatingHoursSaturdayEnd;
                    model.OperatingHoursSaturdayStart = entity.OperatingHoursSaturdayStart;
                    model.OperatingHoursSundayEnd = entity.OperatingHoursSundayEnd;
                    model.OperatingHoursSundayStart = entity.OperatingHoursSundayStart;
                    model.OperatingHoursThursdayEnd = entity.OperatingHoursThursdayEnd;
                    model.OperatingHoursThursdayStart = entity.OperatingHoursThursdayStart;
                    model.OperatingHoursTimeZoneId = entity.OperatingHoursTimeZoneId;
                    model.OperatingHoursTuesdayEnd = entity.OperatingHoursTuesdayEnd;
                    model.OperatingHoursTuesdayStart = entity.OperatingHoursTuesdayStart;
                    model.OperatingHoursWednesdayEnd = entity.OperatingHoursWednesdayEnd;
                    model.OperatingHoursWednesdayStart = entity.OperatingHoursWednesdayStart;
                    model.Overview = entity.Overview;
                    model.SeoUrl = entity.SeoUrl;
                    model.Slogan = entity.Slogan;
                    model.SortOrder = entity.SortOrder;
                    model.StartDate = entity.StartDate;
                    // Store's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ContactID = entity.ContactID;
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    model.LanguageID = entity.LanguageID;
                    model.LanguageKey = entity.Language?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryID = entity.MinimumForFreeShippingDollarAmountBufferCategoryID;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryKey = entity.MinimumForFreeShippingDollarAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryName = entity.MinimumForFreeShippingDollarAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingDollarAmountBufferProductID = entity.MinimumForFreeShippingDollarAmountBufferProductID;
                    model.MinimumForFreeShippingDollarAmountBufferProductKey = entity.MinimumForFreeShippingDollarAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferProductName = entity.MinimumForFreeShippingDollarAmountBufferProduct?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryID = entity.MinimumForFreeShippingQuantityAmountBufferCategoryID;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryKey = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryName = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferProductID = entity.MinimumForFreeShippingQuantityAmountBufferProductID;
                    model.MinimumForFreeShippingQuantityAmountBufferProductKey = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferProductName = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.Name;
                    model.MinimumOrderDollarAmountBufferCategoryID = entity.MinimumOrderDollarAmountBufferCategoryID;
                    model.MinimumOrderDollarAmountBufferCategoryKey = entity.MinimumOrderDollarAmountBufferCategory?.CustomKey;
                    model.MinimumOrderDollarAmountBufferCategoryName = entity.MinimumOrderDollarAmountBufferCategory?.Name;
                    model.MinimumOrderDollarAmountBufferProductID = entity.MinimumOrderDollarAmountBufferProductID;
                    model.MinimumOrderDollarAmountBufferProductKey = entity.MinimumOrderDollarAmountBufferProduct?.CustomKey;
                    model.MinimumOrderDollarAmountBufferProductName = entity.MinimumOrderDollarAmountBufferProduct?.Name;
                    model.MinimumOrderQuantityAmountBufferCategoryID = entity.MinimumOrderQuantityAmountBufferCategoryID;
                    model.MinimumOrderQuantityAmountBufferCategoryKey = entity.MinimumOrderQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferCategoryName = entity.MinimumOrderQuantityAmountBufferCategory?.Name;
                    model.MinimumOrderQuantityAmountBufferProductID = entity.MinimumOrderQuantityAmountBufferProductID;
                    model.MinimumOrderQuantityAmountBufferProductKey = entity.MinimumOrderQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferProductName = entity.MinimumOrderQuantityAmountBufferProduct?.Name;
                    // Store's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateStoreModelFromEntityHooksList != null) { model = CreateStoreModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
