// <autogenerated>
// <copyright file="Mapping.Messaging.ConversationUser.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Messaging section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForConversationUser
    {
        public sealed class AnonConversationUser : ConversationUser
        {
            public Contact? SlaveContact { get; set; }
            // public new Conversation? Master { get; set; }
        }

        public static readonly Func<ConversationUser?, string?, IConversationUserModel?> MapConversationUserModelFromEntityFull = CreateConversationUserModelFromEntityFull;

        public static readonly Func<ConversationUser?, string?, IConversationUserModel?> MapConversationUserModelFromEntityLite = CreateConversationUserModelFromEntityLite;

        public static readonly Func<ConversationUser?, string?, IConversationUserModel?> MapConversationUserModelFromEntityList = CreateConversationUserModelFromEntityList;

        public static Func<IConversationUser, IConversationUserModel, string?, IConversationUserModel>? CreateConversationUserModelFromEntityHooksFull { get; set; }

        public static Func<IConversationUser, IConversationUserModel, string?, IConversationUserModel>? CreateConversationUserModelFromEntityHooksLite { get; set; }

        public static Func<IConversationUser, IConversationUserModel, string?, IConversationUserModel>? CreateConversationUserModelFromEntityHooksList { get; set; }

        public static Expression<Func<ConversationUser, AnonConversationUser>>? PreBuiltConversationUserSQLSelectorFull { get; set; }

        public static Expression<Func<ConversationUser, AnonConversationUser>>? PreBuiltConversationUserSQLSelectorLite { get; set; }

        public static Expression<Func<ConversationUser, AnonConversationUser>>? PreBuiltConversationUserSQLSelectorList { get; set; }

        /// <summary>An <see cref="IConversationUserModel"/> extension method that creates a(n) <see cref="ConversationUser"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ConversationUser"/> entity.</returns>
        public static IConversationUser CreateConversationUserEntity(
            this IConversationUserModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IConversationUserModel, ConversationUser>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateConversationUserFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IConversationUserModel"/> extension method that updates a(n) <see cref="ConversationUser"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ConversationUser"/> entity.</returns>
        public static IConversationUser UpdateConversationUserFromModel(
            this IConversationUser entity,
            IConversationUserModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ConversationUser Properties
            entity.IsTyping = model.IsTyping;
            entity.LastHeartbeat = model.LastHeartbeat;
            // ConversationUser's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenConversationUserSQLSelectorFull()
        {
            PreBuiltConversationUserSQLSelectorFull = x => x == null ? null! : new AnonConversationUser
            {
                MasterID = x.MasterID,
                Master = ModelMapperForConversation.PreBuiltConversationSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                LastHeartbeat = x.LastHeartbeat,
                IsTyping = x.IsTyping,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenConversationUserSQLSelectorLite()
        {
            PreBuiltConversationUserSQLSelectorLite = x => x == null ? null! : new AnonConversationUser
            {
                MasterID = x.MasterID,
                Master = ModelMapperForConversation.PreBuiltConversationSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                LastHeartbeat = x.LastHeartbeat,
                IsTyping = x.IsTyping,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenConversationUserSQLSelectorList()
        {
            PreBuiltConversationUserSQLSelectorList = x => x == null ? null! : new AnonConversationUser
            {
                MasterID = x.MasterID,
                Master = ModelMapperForConversation.PreBuiltConversationSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                LastHeartbeat = x.LastHeartbeat,
                IsTyping = x.IsTyping,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IConversationUserModel> SelectFullConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltConversationUserSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IConversationUserModel> SelectLiteConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltConversationUserSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IConversationUserModel> SelectListConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltConversationUserSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityList(x, contextProfileName))!;
        }

        public static IConversationUserModel? SelectFirstFullConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationUserSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IConversationUserModel? SelectFirstListConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationUserSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IConversationUserModel? SelectSingleFullConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationUserSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IConversationUserModel? SelectSingleLiteConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationUserSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IConversationUserModel? SelectSingleListConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationUserSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateConversationUserModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IConversationUserModel> results, int totalPages, int totalCount) SelectFullConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltConversationUserSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateConversationUserModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IConversationUserModel> results, int totalPages, int totalCount) SelectLiteConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltConversationUserSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateConversationUserModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IConversationUserModel> results, int totalPages, int totalCount) SelectListConversationUserAndMapToConversationUserModel(
            this IQueryable<ConversationUser> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationUserSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltConversationUserSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateConversationUserModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IConversationUserModel? CreateConversationUserModelFromEntityFull(this IConversationUser? entity, string? contextProfileName)
        {
            return CreateConversationUserModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IConversationUserModel? CreateConversationUserModelFromEntityLite(this IConversationUser? entity, string? contextProfileName)
        {
            return CreateConversationUserModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IConversationUserModel? CreateConversationUserModelFromEntityList(this IConversationUser? entity, string? contextProfileName)
        {
            return CreateConversationUserModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IConversationUserModel? CreateConversationUserModelFromEntity(
            this IConversationUser? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IConversationUserModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ConversationUser's Properties
                    // ConversationUser's Related Objects
                    // ConversationUser's Associated Objects
                    // Additional Mappings
                    if (CreateConversationUserModelFromEntityHooksFull != null) { model = CreateConversationUserModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ConversationUser's Properties
                    // ConversationUser's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Slave = ModelMapperForUser.CreateUserModelFromEntityLite(entity.Slave, contextProfileName);
                    // ConversationUser's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateConversationUserModelFromEntityHooksLite != null) { model = CreateConversationUserModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ConversationUser's Properties
                    model.IsTyping = entity.IsTyping;
                    model.LastHeartbeat = entity.LastHeartbeat;
                    // ConversationUser's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveUserName = entity.Slave?.UserName;
                    // ConversationUser's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateConversationUserModelFromEntityHooksList != null) { model = CreateConversationUserModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
