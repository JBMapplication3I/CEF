// <autogenerated>
// <copyright file="Mapping.Messaging.EmailQueue.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Messaging section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForEmailQueue
    {
        public sealed class AnonEmailQueue : EmailQueue
        {
            public new IEnumerable<EmailQueueAttachment>? EmailQueueAttachments { get; set; }
        }

        public static readonly Func<EmailQueue?, string?, IEmailQueueModel?> MapEmailQueueModelFromEntityFull = CreateEmailQueueModelFromEntityFull;

        public static readonly Func<EmailQueue?, string?, IEmailQueueModel?> MapEmailQueueModelFromEntityLite = CreateEmailQueueModelFromEntityLite;

        public static readonly Func<EmailQueue?, string?, IEmailQueueModel?> MapEmailQueueModelFromEntityList = CreateEmailQueueModelFromEntityList;

        public static Func<IEmailQueue, IEmailQueueModel, string?, IEmailQueueModel>? CreateEmailQueueModelFromEntityHooksFull { get; set; }

        public static Func<IEmailQueue, IEmailQueueModel, string?, IEmailQueueModel>? CreateEmailQueueModelFromEntityHooksLite { get; set; }

        public static Func<IEmailQueue, IEmailQueueModel, string?, IEmailQueueModel>? CreateEmailQueueModelFromEntityHooksList { get; set; }

        public static Expression<Func<EmailQueue, AnonEmailQueue>>? PreBuiltEmailQueueSQLSelectorFull { get; set; }

        public static Expression<Func<EmailQueue, AnonEmailQueue>>? PreBuiltEmailQueueSQLSelectorLite { get; set; }

        public static Expression<Func<EmailQueue, AnonEmailQueue>>? PreBuiltEmailQueueSQLSelectorList { get; set; }

        /// <summary>An <see cref="IEmailQueueModel"/> extension method that creates a(n) <see cref="EmailQueue"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="EmailQueue"/> entity.</returns>
        public static IEmailQueue CreateEmailQueueEntity(
            this IEmailQueueModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IEmailQueueModel, EmailQueue>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateEmailQueueFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IEmailQueueModel"/> extension method that updates a(n) <see cref="EmailQueue"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="EmailQueue"/> entity.</returns>
        public static IEmailQueue UpdateEmailQueueFromModel(
            this IEmailQueue entity,
            IEmailQueueModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // EmailQueue Properties
            entity.AddressesBcc = model.AddressesBcc;
            entity.AddressesCc = model.AddressesCc;
            entity.AddressesTo = model.AddressesTo;
            entity.AddressFrom = model.AddressFrom;
            entity.Attempts = model.Attempts;
            entity.Body = model.Body;
            entity.HasError = model.HasError;
            entity.IsHtml = model.IsHtml;
            entity.Subject = model.Subject;
            // EmailQueue's Related Objects
            // EmailQueue's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenEmailQueueSQLSelectorFull()
        {
            PreBuiltEmailQueueSQLSelectorFull = x => x == null ? null! : new AnonEmailQueue
            {
                AddressesTo = x.AddressesTo,
                AddressesCc = x.AddressesCc,
                AddressesBcc = x.AddressesBcc,
                AddressFrom = x.AddressFrom,
                Subject = x.Subject,
                Body = x.Body,
                Attempts = x.Attempts,
                IsHtml = x.IsHtml,
                HasError = x.HasError,
                TypeID = x.TypeID,
                Type = ModelMapperForEmailType.PreBuiltEmailTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForEmailStatus.PreBuiltEmailStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                EmailTemplateID = x.EmailTemplateID,
                EmailTemplate = ModelMapperForEmailTemplate.PreBuiltEmailTemplateSQLSelectorList.Expand().Compile().Invoke(x.EmailTemplate!),
                MessageRecipientID = x.MessageRecipientID,
                MessageRecipient = ModelMapperForMessageRecipient.PreBuiltMessageRecipientSQLSelectorList.Expand().Compile().Invoke(x.MessageRecipient!),
                EmailQueueAttachments = x.EmailQueueAttachments!.Where(y => y.Active).Select(ModelMapperForEmailQueueAttachment.PreBuiltEmailQueueAttachmentSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenEmailQueueSQLSelectorLite()
        {
            PreBuiltEmailQueueSQLSelectorLite = x => x == null ? null! : new AnonEmailQueue
            {
                AddressesTo = x.AddressesTo,
                AddressesCc = x.AddressesCc,
                AddressesBcc = x.AddressesBcc,
                AddressFrom = x.AddressFrom,
                Subject = x.Subject,
                Attempts = x.Attempts,
                IsHtml = x.IsHtml,
                HasError = x.HasError,
                TypeID = x.TypeID,
                Type = ModelMapperForEmailType.PreBuiltEmailTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForEmailStatus.PreBuiltEmailStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                EmailTemplateID = x.EmailTemplateID,
                EmailTemplate = ModelMapperForEmailTemplate.PreBuiltEmailTemplateSQLSelectorList.Expand().Compile().Invoke(x.EmailTemplate!),
                MessageRecipientID = x.MessageRecipientID,
                MessageRecipient = ModelMapperForMessageRecipient.PreBuiltMessageRecipientSQLSelectorList.Expand().Compile().Invoke(x.MessageRecipient!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenEmailQueueSQLSelectorList()
        {
            PreBuiltEmailQueueSQLSelectorList = x => x == null ? null! : new AnonEmailQueue
            {
                AddressesTo = x.AddressesTo,
                AddressesCc = x.AddressesCc,
                AddressesBcc = x.AddressesBcc,
                AddressFrom = x.AddressFrom,
                Subject = x.Subject,
                Attempts = x.Attempts,
                IsHtml = x.IsHtml,
                HasError = x.HasError,
                TypeID = x.TypeID,
                Type = ModelMapperForEmailType.PreBuiltEmailTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForEmailStatus.PreBuiltEmailStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                EmailTemplateID = x.EmailTemplateID,
                EmailTemplate = ModelMapperForEmailTemplate.PreBuiltEmailTemplateSQLSelectorList.Expand().Compile().Invoke(x.EmailTemplate!), // For Flattening Properties (List)
                MessageRecipientID = x.MessageRecipientID,
                MessageRecipient = ModelMapperForMessageRecipient.PreBuiltMessageRecipientSQLSelectorList.Expand().Compile().Invoke(x.MessageRecipient!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IEmailQueueModel> SelectFullEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEmailQueueSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IEmailQueueModel> SelectLiteEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEmailQueueSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IEmailQueueModel> SelectListEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEmailQueueSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityList(x, contextProfileName))!;
        }

        public static IEmailQueueModel? SelectFirstFullEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailQueueSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IEmailQueueModel? SelectFirstListEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailQueueSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IEmailQueueModel? SelectSingleFullEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailQueueSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IEmailQueueModel? SelectSingleLiteEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailQueueSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IEmailQueueModel? SelectSingleListEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailQueueSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEmailQueueModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IEmailQueueModel> results, int totalPages, int totalCount) SelectFullEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEmailQueueSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateEmailQueueModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IEmailQueueModel> results, int totalPages, int totalCount) SelectLiteEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEmailQueueSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateEmailQueueModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IEmailQueueModel> results, int totalPages, int totalCount) SelectListEmailQueueAndMapToEmailQueueModel(
            this IQueryable<EmailQueue> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailQueueSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEmailQueueSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateEmailQueueModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IEmailQueueModel? CreateEmailQueueModelFromEntityFull(this IEmailQueue? entity, string? contextProfileName)
        {
            return CreateEmailQueueModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IEmailQueueModel? CreateEmailQueueModelFromEntityLite(this IEmailQueue? entity, string? contextProfileName)
        {
            return CreateEmailQueueModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IEmailQueueModel? CreateEmailQueueModelFromEntityList(this IEmailQueue? entity, string? contextProfileName)
        {
            return CreateEmailQueueModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IEmailQueueModel? CreateEmailQueueModelFromEntity(
            this IEmailQueue? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IEmailQueueModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForEmailType.CreateEmailTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForEmailStatus.CreateEmailStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // EmailQueue's Properties
                    model.Body = entity.Body;
                    // EmailQueue's Related Objects
                    model.EmailTemplate = ModelMapperForEmailTemplate.CreateEmailTemplateModelFromEntityLite(entity.EmailTemplate, contextProfileName);
                    model.MessageRecipient = ModelMapperForMessageRecipient.CreateMessageRecipientModelFromEntityLite(entity.MessageRecipient, contextProfileName);
                    // EmailQueue's Associated Objects
                    model.EmailQueueAttachments = (entity is AnonEmailQueue ? ((AnonEmailQueue)entity).EmailQueueAttachments : entity.EmailQueueAttachments)?.Where(x => x.Active).Select(x => ModelMapperForEmailQueueAttachment.CreateEmailQueueAttachmentModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateEmailQueueModelFromEntityHooksFull != null) { model = CreateEmailQueueModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // EmailQueue's Properties
                    // EmailQueue's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // EmailQueue's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateEmailQueueModelFromEntityHooksLite != null) { model = CreateEmailQueueModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // EmailQueue's Properties
                    model.AddressesBcc = entity.AddressesBcc;
                    model.AddressesCc = entity.AddressesCc;
                    model.AddressesTo = entity.AddressesTo;
                    model.AddressFrom = entity.AddressFrom;
                    model.Attempts = entity.Attempts;
                    model.HasError = entity.HasError;
                    model.IsHtml = entity.IsHtml;
                    model.Subject = entity.Subject;
                    // EmailQueue's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.EmailTemplateID = entity.EmailTemplateID;
                    model.EmailTemplateKey = entity.EmailTemplate?.CustomKey;
                    model.EmailTemplateName = entity.EmailTemplate?.Name;
                    model.MessageRecipientID = entity.MessageRecipientID;
                    model.MessageRecipientKey = entity.MessageRecipient?.CustomKey;
                    // EmailQueue's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateEmailQueueModelFromEntityHooksList != null) { model = CreateEmailQueueModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
