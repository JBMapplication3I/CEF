// <autogenerated>
// <copyright file="Mapping.Messaging.Conversation.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Messaging section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForConversation
    {
        public sealed class AnonConversation : Conversation
        {
            public new IEnumerable<ConversationUser>? Users { get; set; }
            public new IEnumerable<Message>? Messages { get; set; }
        }

        public static readonly Func<Conversation?, string?, IConversationModel?> MapConversationModelFromEntityFull = CreateConversationModelFromEntityFull;

        public static readonly Func<Conversation?, string?, IConversationModel?> MapConversationModelFromEntityLite = CreateConversationModelFromEntityLite;

        public static readonly Func<Conversation?, string?, IConversationModel?> MapConversationModelFromEntityList = CreateConversationModelFromEntityList;

        public static Func<IConversation, IConversationModel, string?, IConversationModel>? CreateConversationModelFromEntityHooksFull { get; set; }

        public static Func<IConversation, IConversationModel, string?, IConversationModel>? CreateConversationModelFromEntityHooksLite { get; set; }

        public static Func<IConversation, IConversationModel, string?, IConversationModel>? CreateConversationModelFromEntityHooksList { get; set; }

        public static Expression<Func<Conversation, AnonConversation>>? PreBuiltConversationSQLSelectorFull { get; set; }

        public static Expression<Func<Conversation, AnonConversation>>? PreBuiltConversationSQLSelectorLite { get; set; }

        public static Expression<Func<Conversation, AnonConversation>>? PreBuiltConversationSQLSelectorList { get; set; }

        /// <summary>An <see cref="IConversationModel"/> extension method that creates a(n) <see cref="Conversation"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Conversation"/> entity.</returns>
        public static IConversation CreateConversationEntity(
            this IConversationModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IConversationModel, Conversation>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateConversationFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IConversationModel"/> extension method that updates a(n) <see cref="Conversation"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Conversation"/> entity.</returns>
        public static IConversation UpdateConversationFromModel(
            this IConversation entity,
            IConversationModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Conversation Properties
            entity.CopyUserWhenEnded = model.CopyUserWhenEnded;
            entity.HasEnded = model.HasEnded;
            // Conversation's Related Objects
            // Conversation's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenConversationSQLSelectorFull()
        {
            PreBuiltConversationSQLSelectorFull = x => x == null ? null! : new AnonConversation
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Users = x.Users!.Where(y => y.Active).Select(ModelMapperForConversationUser.PreBuiltConversationUserSQLSelectorList.Expand().Compile()).ToList(),
                HasEnded = x.HasEnded,
                CopyUserWhenEnded = x.CopyUserWhenEnded,
                Messages = x.Messages!.Where(y => y.Active).Select(ModelMapperForMessage.PreBuiltMessageSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenConversationSQLSelectorLite()
        {
            PreBuiltConversationSQLSelectorLite = x => x == null ? null! : new AnonConversation
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                HasEnded = x.HasEnded,
                CopyUserWhenEnded = x.CopyUserWhenEnded,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenConversationSQLSelectorList()
        {
            PreBuiltConversationSQLSelectorList = x => x == null ? null! : new AnonConversation
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                HasEnded = x.HasEnded,
                CopyUserWhenEnded = x.CopyUserWhenEnded,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IConversationModel> SelectFullConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltConversationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IConversationModel> SelectLiteConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltConversationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IConversationModel> SelectListConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltConversationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityList(x, contextProfileName))!;
        }

        public static IConversationModel? SelectFirstFullConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IConversationModel? SelectFirstListConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IConversationModel? SelectSingleFullConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IConversationModel? SelectSingleLiteConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IConversationModel? SelectSingleListConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltConversationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateConversationModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IConversationModel> results, int totalPages, int totalCount) SelectFullConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltConversationSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateConversationModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IConversationModel> results, int totalPages, int totalCount) SelectLiteConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltConversationSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateConversationModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IConversationModel> results, int totalPages, int totalCount) SelectListConversationAndMapToConversationModel(
            this IQueryable<Conversation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltConversationSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltConversationSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateConversationModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IConversationModel? CreateConversationModelFromEntityFull(this IConversation? entity, string? contextProfileName)
        {
            return CreateConversationModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IConversationModel? CreateConversationModelFromEntityLite(this IConversation? entity, string? contextProfileName)
        {
            return CreateConversationModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IConversationModel? CreateConversationModelFromEntityList(this IConversation? entity, string? contextProfileName)
        {
            return CreateConversationModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IConversationModel? CreateConversationModelFromEntity(
            this IConversation? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IConversationModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Conversation's Properties
                    // Conversation's Related Objects
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    // Conversation's Associated Objects
                    model.Messages = (entity is AnonConversation ? ((AnonConversation)entity).Messages : entity.Messages)?.Where(x => x.Active).Select(x => ModelMapperForMessage.CreateMessageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Users = (entity is AnonConversation ? ((AnonConversation)entity).Users : entity.Users)?.Where(x => x.Active).Select(x => ModelMapperForConversationUser.CreateConversationUserModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateConversationModelFromEntityHooksFull != null) { model = CreateConversationModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Conversation's Properties
                    // Conversation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Conversation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateConversationModelFromEntityHooksLite != null) { model = CreateConversationModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Conversation's Properties
                    model.CopyUserWhenEnded = entity.CopyUserWhenEnded;
                    model.HasEnded = entity.HasEnded;
                    // Conversation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    // Conversation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateConversationModelFromEntityHooksList != null) { model = CreateConversationModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
