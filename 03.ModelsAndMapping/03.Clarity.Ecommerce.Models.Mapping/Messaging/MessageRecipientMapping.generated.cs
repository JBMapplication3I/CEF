// <autogenerated>
// <copyright file="Mapping.Messaging.MessageRecipient.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Messaging section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForMessageRecipient
    {
        public sealed class AnonMessageRecipient : MessageRecipient
        {
            public Contact? SlaveContact { get; set; }
            // public new Message? Master { get; set; }
        }

        public static readonly Func<MessageRecipient?, string?, IMessageRecipientModel?> MapMessageRecipientModelFromEntityFull = CreateMessageRecipientModelFromEntityFull;

        public static readonly Func<MessageRecipient?, string?, IMessageRecipientModel?> MapMessageRecipientModelFromEntityLite = CreateMessageRecipientModelFromEntityLite;

        public static readonly Func<MessageRecipient?, string?, IMessageRecipientModel?> MapMessageRecipientModelFromEntityList = CreateMessageRecipientModelFromEntityList;

        public static Func<IMessageRecipient, IMessageRecipientModel, string?, IMessageRecipientModel>? CreateMessageRecipientModelFromEntityHooksFull { get; set; }

        public static Func<IMessageRecipient, IMessageRecipientModel, string?, IMessageRecipientModel>? CreateMessageRecipientModelFromEntityHooksLite { get; set; }

        public static Func<IMessageRecipient, IMessageRecipientModel, string?, IMessageRecipientModel>? CreateMessageRecipientModelFromEntityHooksList { get; set; }

        public static Expression<Func<MessageRecipient, AnonMessageRecipient>>? PreBuiltMessageRecipientSQLSelectorFull { get; set; }

        public static Expression<Func<MessageRecipient, AnonMessageRecipient>>? PreBuiltMessageRecipientSQLSelectorLite { get; set; }

        public static Expression<Func<MessageRecipient, AnonMessageRecipient>>? PreBuiltMessageRecipientSQLSelectorList { get; set; }

        /// <summary>An <see cref="IMessageRecipientModel"/> extension method that creates a(n) <see cref="MessageRecipient"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="MessageRecipient"/> entity.</returns>
        public static IMessageRecipient CreateMessageRecipientEntity(
            this IMessageRecipientModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IMessageRecipientModel, MessageRecipient>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateMessageRecipientFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IMessageRecipientModel"/> extension method that updates a(n) <see cref="MessageRecipient"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="MessageRecipient"/> entity.</returns>
        public static IMessageRecipient UpdateMessageRecipientFromModel(
            this IMessageRecipient entity,
            IMessageRecipientModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // MessageRecipient Properties
            entity.ArchivedAt = model.ArchivedAt;
            entity.EmailSentAt = model.EmailSentAt;
            entity.HasSentAnEmail = model.HasSentAnEmail;
            entity.IsArchived = model.IsArchived;
            entity.IsRead = model.IsRead;
            entity.ReadAt = model.ReadAt;
            // MessageRecipient's Related Objects
            // MessageRecipient's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenMessageRecipientSQLSelectorFull()
        {
            PreBuiltMessageRecipientSQLSelectorFull = x => x == null ? null! : new AnonMessageRecipient
            {
                MasterID = x.MasterID,
                SlaveID = x.SlaveID,
                Slave = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                IsRead = x.IsRead,
                ReadAt = x.ReadAt,
                IsArchived = x.IsArchived,
                ArchivedAt = x.ArchivedAt,
                HasSentAnEmail = x.HasSentAnEmail,
                EmailSentAt = x.EmailSentAt,
                GroupID = x.GroupID,
                Group = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Group!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenMessageRecipientSQLSelectorLite()
        {
            PreBuiltMessageRecipientSQLSelectorLite = x => x == null ? null! : new AnonMessageRecipient
            {
                MasterID = x.MasterID,
                SlaveID = x.SlaveID,
                Slave = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                IsRead = x.IsRead,
                ReadAt = x.ReadAt,
                IsArchived = x.IsArchived,
                ArchivedAt = x.ArchivedAt,
                HasSentAnEmail = x.HasSentAnEmail,
                EmailSentAt = x.EmailSentAt,
                GroupID = x.GroupID,
                Group = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Group!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenMessageRecipientSQLSelectorList()
        {
            PreBuiltMessageRecipientSQLSelectorList = x => x == null ? null! : new AnonMessageRecipient
            {
                MasterID = x.MasterID,
                SlaveID = x.SlaveID,
                Slave = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                IsRead = x.IsRead,
                ReadAt = x.ReadAt,
                IsArchived = x.IsArchived,
                ArchivedAt = x.ArchivedAt,
                HasSentAnEmail = x.HasSentAnEmail,
                EmailSentAt = x.EmailSentAt,
                GroupID = x.GroupID,
                Group = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Group!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                Master = ModelMapperForMessage.PreBuiltMessageSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties
            };
        }

        public static IEnumerable<IMessageRecipientModel> SelectFullMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMessageRecipientSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IMessageRecipientModel> SelectLiteMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMessageRecipientSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IMessageRecipientModel> SelectListMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMessageRecipientSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityList(x, contextProfileName))!;
        }

        public static IMessageRecipientModel? SelectFirstFullMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMessageRecipientSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IMessageRecipientModel? SelectFirstListMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMessageRecipientSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IMessageRecipientModel? SelectSingleFullMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMessageRecipientSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IMessageRecipientModel? SelectSingleLiteMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMessageRecipientSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IMessageRecipientModel? SelectSingleListMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMessageRecipientSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMessageRecipientModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IMessageRecipientModel> results, int totalPages, int totalCount) SelectFullMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMessageRecipientSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateMessageRecipientModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IMessageRecipientModel> results, int totalPages, int totalCount) SelectLiteMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMessageRecipientSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateMessageRecipientModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IMessageRecipientModel> results, int totalPages, int totalCount) SelectListMessageRecipientAndMapToMessageRecipientModel(
            this IQueryable<MessageRecipient> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMessageRecipientSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMessageRecipientSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateMessageRecipientModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IMessageRecipientModel? CreateMessageRecipientModelFromEntityFull(this IMessageRecipient? entity, string? contextProfileName)
        {
            return CreateMessageRecipientModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IMessageRecipientModel? CreateMessageRecipientModelFromEntityLite(this IMessageRecipient? entity, string? contextProfileName)
        {
            return CreateMessageRecipientModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IMessageRecipientModel? CreateMessageRecipientModelFromEntityList(this IMessageRecipient? entity, string? contextProfileName)
        {
            return CreateMessageRecipientModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IMessageRecipientModel? CreateMessageRecipientModelFromEntity(
            this IMessageRecipient? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IMessageRecipientModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // MessageRecipient's Properties
                    // MessageRecipient's Related Objects
                    model.Group = ModelMapperForGroup.CreateGroupModelFromEntityLite(entity.Group, contextProfileName);
                    model.Slave = ModelMapperForUser.CreateUserModelFromEntityLite(entity.Slave, contextProfileName);
                    // MessageRecipient's Associated Objects
                    // Additional Mappings
                    if (CreateMessageRecipientModelFromEntityHooksFull != null) { model = CreateMessageRecipientModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // MessageRecipient's Properties
                    // MessageRecipient's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // MessageRecipient's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateMessageRecipientModelFromEntityHooksLite != null) { model = CreateMessageRecipientModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // MessageRecipient's Properties
                    model.ArchivedAt = entity.ArchivedAt;
                    model.EmailSentAt = entity.EmailSentAt;
                    model.HasSentAnEmail = entity.HasSentAnEmail;
                    model.IsArchived = entity.IsArchived;
                    model.IsRead = entity.IsRead;
                    model.ReadAt = entity.ReadAt;
                    // MessageRecipient's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.GroupID = entity.GroupID;
                    model.GroupKey = entity.Group?.CustomKey;
                    model.GroupName = entity.Group?.Name;
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveUserName = entity.Slave?.UserName;
                    // MessageRecipient's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateMessageRecipientModelFromEntityHooksList != null) { model = CreateMessageRecipientModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
