// <autogenerated>
// <copyright file="Mapping.Messaging.EmailType.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Messaging section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForEmailType
    {
        public sealed class AnonEmailType : EmailType
        {
        }

        public static readonly Func<EmailType?, string?, ITypeModel?> MapEmailTypeModelFromEntityFull = CreateEmailTypeModelFromEntityFull;

        public static readonly Func<EmailType?, string?, ITypeModel?> MapEmailTypeModelFromEntityLite = CreateEmailTypeModelFromEntityLite;

        public static readonly Func<EmailType?, string?, ITypeModel?> MapEmailTypeModelFromEntityList = CreateEmailTypeModelFromEntityList;

        public static Func<IEmailType, ITypeModel, string?, ITypeModel>? CreateEmailTypeModelFromEntityHooksFull { get; set; }

        public static Func<IEmailType, ITypeModel, string?, ITypeModel>? CreateEmailTypeModelFromEntityHooksLite { get; set; }

        public static Func<IEmailType, ITypeModel, string?, ITypeModel>? CreateEmailTypeModelFromEntityHooksList { get; set; }

        public static Expression<Func<EmailType, AnonEmailType>>? PreBuiltEmailTypeSQLSelectorFull { get; set; }

        public static Expression<Func<EmailType, AnonEmailType>>? PreBuiltEmailTypeSQLSelectorLite { get; set; }

        public static Expression<Func<EmailType, AnonEmailType>>? PreBuiltEmailTypeSQLSelectorList { get; set; }

        /// <summary>An <see cref="ITypeModel"/> extension method that creates a(n) <see cref="EmailType"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="EmailType"/> entity.</returns>
        public static IEmailType CreateEmailTypeEntity(
            this ITypeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityTypableBase<ITypeModel, EmailType>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateEmailTypeFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ITypeModel"/> extension method that updates a(n) <see cref="EmailType"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="EmailType"/> entity.</returns>
        public static IEmailType UpdateEmailTypeFromModel(
            this IEmailType entity,
            ITypeModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapTypableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenEmailTypeSQLSelectorFull()
        {
            PreBuiltEmailTypeSQLSelectorFull = x => x == null ? null! : new AnonEmailType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenEmailTypeSQLSelectorLite()
        {
            PreBuiltEmailTypeSQLSelectorLite = x => x == null ? null! : new AnonEmailType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenEmailTypeSQLSelectorList()
        {
            PreBuiltEmailTypeSQLSelectorList = x => x == null ? null! : new AnonEmailType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ITypeModel> SelectFullEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEmailTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ITypeModel> SelectLiteEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEmailTypeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ITypeModel> SelectListEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEmailTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityList(x, contextProfileName))!;
        }

        public static ITypeModel? SelectFirstFullEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ITypeModel? SelectFirstListEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ITypeModel? SelectSingleFullEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ITypeModel? SelectSingleLiteEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailTypeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ITypeModel? SelectSingleListEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEmailTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEmailTypeModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ITypeModel> results, int totalPages, int totalCount) SelectFullEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEmailTypeSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateEmailTypeModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ITypeModel> results, int totalPages, int totalCount) SelectLiteEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEmailTypeSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateEmailTypeModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ITypeModel> results, int totalPages, int totalCount) SelectListEmailTypeAndMapToTypeModel(
            this IQueryable<EmailType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEmailTypeSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEmailTypeSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateEmailTypeModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ITypeModel? CreateEmailTypeModelFromEntityFull(this IEmailType? entity, string? contextProfileName)
        {
            return CreateEmailTypeModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ITypeModel? CreateEmailTypeModelFromEntityLite(this IEmailType? entity, string? contextProfileName)
        {
            return CreateEmailTypeModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ITypeModel? CreateEmailTypeModelFromEntityList(this IEmailType? entity, string? contextProfileName)
        {
            return CreateEmailTypeModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ITypeModel? CreateEmailTypeModelFromEntity(
            this IEmailType? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapTypableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ITypeModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // EmailType's Properties
                    // EmailType's Related Objects
                    // EmailType's Associated Objects
                    // Additional Mappings
                    if (CreateEmailTypeModelFromEntityHooksFull != null) { model = CreateEmailTypeModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // EmailType's Properties
                    // EmailType's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // EmailType's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateEmailTypeModelFromEntityHooksLite != null) { model = CreateEmailTypeModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // EmailType's Properties
                    // EmailType's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // EmailType's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateEmailTypeModelFromEntityHooksList != null) { model = CreateEmailTypeModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
