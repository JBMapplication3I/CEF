// <autogenerated>
// <copyright file="Mapping.CalendarEvents.CalendarEventDetail.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the CalendarEvents section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCalendarEventDetail
    {
        public sealed class AnonCalendarEventDetail : CalendarEventDetail
        {
        }

        public static readonly Func<CalendarEventDetail?, string?, ICalendarEventDetailModel?> MapCalendarEventDetailModelFromEntityFull = CreateCalendarEventDetailModelFromEntityFull;

        public static readonly Func<CalendarEventDetail?, string?, ICalendarEventDetailModel?> MapCalendarEventDetailModelFromEntityLite = CreateCalendarEventDetailModelFromEntityLite;

        public static readonly Func<CalendarEventDetail?, string?, ICalendarEventDetailModel?> MapCalendarEventDetailModelFromEntityList = CreateCalendarEventDetailModelFromEntityList;

        public static Func<ICalendarEventDetail, ICalendarEventDetailModel, string?, ICalendarEventDetailModel>? CreateCalendarEventDetailModelFromEntityHooksFull { get; set; }

        public static Func<ICalendarEventDetail, ICalendarEventDetailModel, string?, ICalendarEventDetailModel>? CreateCalendarEventDetailModelFromEntityHooksLite { get; set; }

        public static Func<ICalendarEventDetail, ICalendarEventDetailModel, string?, ICalendarEventDetailModel>? CreateCalendarEventDetailModelFromEntityHooksList { get; set; }

        public static Expression<Func<CalendarEventDetail, AnonCalendarEventDetail>>? PreBuiltCalendarEventDetailSQLSelectorFull { get; set; }

        public static Expression<Func<CalendarEventDetail, AnonCalendarEventDetail>>? PreBuiltCalendarEventDetailSQLSelectorLite { get; set; }

        public static Expression<Func<CalendarEventDetail, AnonCalendarEventDetail>>? PreBuiltCalendarEventDetailSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICalendarEventDetailModel"/> extension method that creates a(n) <see cref="CalendarEventDetail"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="CalendarEventDetail"/> entity.</returns>
        public static ICalendarEventDetail CreateCalendarEventDetailEntity(
            this ICalendarEventDetailModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ICalendarEventDetailModel, CalendarEventDetail>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCalendarEventDetailFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICalendarEventDetailModel"/> extension method that updates a(n) <see cref="CalendarEventDetail"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="CalendarEventDetail"/> entity.</returns>
        public static ICalendarEventDetail UpdateCalendarEventDetailFromModel(
            this ICalendarEventDetail entity,
            ICalendarEventDetailModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // CalendarEventDetail Properties
            entity.Day = model.Day;
            entity.EndTime = model.EndTime;
            entity.Location = model.Location;
            entity.StartTime = model.StartTime;
            // CalendarEventDetail's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCalendarEventDetailSQLSelectorFull()
        {
            PreBuiltCalendarEventDetailSQLSelectorFull = x => x == null ? null! : new AnonCalendarEventDetail
            {
                Day = x.Day,
                StartTime = x.StartTime,
                EndTime = x.EndTime,
                Location = x.Location,
                CalendarEventID = x.CalendarEventID,
                CalendarEvent = ModelMapperForCalendarEvent.PreBuiltCalendarEventSQLSelectorList.Expand().Compile().Invoke(x.CalendarEvent!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCalendarEventDetailSQLSelectorLite()
        {
            PreBuiltCalendarEventDetailSQLSelectorLite = x => x == null ? null! : new AnonCalendarEventDetail
            {
                Day = x.Day,
                StartTime = x.StartTime,
                EndTime = x.EndTime,
                Location = x.Location,
                CalendarEventID = x.CalendarEventID,
                CalendarEvent = ModelMapperForCalendarEvent.PreBuiltCalendarEventSQLSelectorList.Expand().Compile().Invoke(x.CalendarEvent!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCalendarEventDetailSQLSelectorList()
        {
            PreBuiltCalendarEventDetailSQLSelectorList = x => x == null ? null! : new AnonCalendarEventDetail
            {
                Day = x.Day,
                StartTime = x.StartTime,
                EndTime = x.EndTime,
                Location = x.Location,
                CalendarEventID = x.CalendarEventID,
                CalendarEvent = ModelMapperForCalendarEvent.PreBuiltCalendarEventSQLSelectorList.Expand().Compile().Invoke(x.CalendarEvent!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICalendarEventDetailModel> SelectFullCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarEventDetailSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICalendarEventDetailModel> SelectLiteCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarEventDetailSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICalendarEventDetailModel> SelectListCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarEventDetailSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityList(x, contextProfileName))!;
        }

        public static ICalendarEventDetailModel? SelectFirstFullCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventDetailSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICalendarEventDetailModel? SelectFirstListCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventDetailSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICalendarEventDetailModel? SelectSingleFullCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventDetailSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICalendarEventDetailModel? SelectSingleLiteCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventDetailSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICalendarEventDetailModel? SelectSingleListCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventDetailSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventDetailModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICalendarEventDetailModel> results, int totalPages, int totalCount) SelectFullCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarEventDetailSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarEventDetailModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICalendarEventDetailModel> results, int totalPages, int totalCount) SelectLiteCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarEventDetailSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarEventDetailModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICalendarEventDetailModel> results, int totalPages, int totalCount) SelectListCalendarEventDetailAndMapToCalendarEventDetailModel(
            this IQueryable<CalendarEventDetail> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventDetailSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarEventDetailSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarEventDetailModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICalendarEventDetailModel? CreateCalendarEventDetailModelFromEntityFull(this ICalendarEventDetail? entity, string? contextProfileName)
        {
            return CreateCalendarEventDetailModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICalendarEventDetailModel? CreateCalendarEventDetailModelFromEntityLite(this ICalendarEventDetail? entity, string? contextProfileName)
        {
            return CreateCalendarEventDetailModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICalendarEventDetailModel? CreateCalendarEventDetailModelFromEntityList(this ICalendarEventDetail? entity, string? contextProfileName)
        {
            return CreateCalendarEventDetailModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICalendarEventDetailModel? CreateCalendarEventDetailModelFromEntity(
            this ICalendarEventDetail? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICalendarEventDetailModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CalendarEventDetail's Properties
                    // CalendarEventDetail's Related Objects
                    // CalendarEventDetail's Associated Objects
                    // Additional Mappings
                    if (CreateCalendarEventDetailModelFromEntityHooksFull != null) { model = CreateCalendarEventDetailModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CalendarEventDetail's Properties
                    // CalendarEventDetail's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CalendarEvent = ModelMapperForCalendarEvent.CreateCalendarEventModelFromEntityLite(entity.CalendarEvent, contextProfileName);
                    // CalendarEventDetail's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCalendarEventDetailModelFromEntityHooksLite != null) { model = CreateCalendarEventDetailModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // CalendarEventDetail's Properties
                    model.Day = entity.Day;
                    model.EndTime = entity.EndTime;
                    model.Location = entity.Location;
                    model.StartTime = entity.StartTime;
                    // CalendarEventDetail's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CalendarEventID = entity.CalendarEventID;
                    model.CalendarEventKey = entity.CalendarEvent?.CustomKey;
                    model.CalendarEventName = entity.CalendarEvent?.Name;
                    // CalendarEventDetail's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCalendarEventDetailModelFromEntityHooksList != null) { model = CreateCalendarEventDetailModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
