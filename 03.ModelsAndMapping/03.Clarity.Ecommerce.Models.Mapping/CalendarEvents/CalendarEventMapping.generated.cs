// <autogenerated>
// <copyright file="Mapping.CalendarEvents.CalendarEvent.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the CalendarEvents section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCalendarEvent
    {
        public sealed class AnonCalendarEvent : CalendarEvent
        {
            public new IEnumerable<CalendarEventDetail>? CalendarEventDetails { get; set; }
            public new IEnumerable<CalendarEventFile>? StoredFiles { get; set; }
            public new IEnumerable<CalendarEventImage>? Images { get; set; }
            public new IEnumerable<CalendarEventProduct>? Products { get; set; }
            public new IEnumerable<UserEventAttendance>? UserEventAttendances { get; set; }
        }

        public static readonly Func<CalendarEvent?, string?, ICalendarEventModel?> MapCalendarEventModelFromEntityFull = CreateCalendarEventModelFromEntityFull;

        public static readonly Func<CalendarEvent?, string?, ICalendarEventModel?> MapCalendarEventModelFromEntityLite = CreateCalendarEventModelFromEntityLite;

        public static readonly Func<CalendarEvent?, string?, ICalendarEventModel?> MapCalendarEventModelFromEntityList = CreateCalendarEventModelFromEntityList;

        public static Func<ICalendarEvent, ICalendarEventModel, string?, ICalendarEventModel>? CreateCalendarEventModelFromEntityHooksFull { get; set; }

        public static Func<ICalendarEvent, ICalendarEventModel, string?, ICalendarEventModel>? CreateCalendarEventModelFromEntityHooksLite { get; set; }

        public static Func<ICalendarEvent, ICalendarEventModel, string?, ICalendarEventModel>? CreateCalendarEventModelFromEntityHooksList { get; set; }

        public static Expression<Func<CalendarEvent, AnonCalendarEvent>>? PreBuiltCalendarEventSQLSelectorFull { get; set; }

        public static Expression<Func<CalendarEvent, AnonCalendarEvent>>? PreBuiltCalendarEventSQLSelectorLite { get; set; }

        public static Expression<Func<CalendarEvent, AnonCalendarEvent>>? PreBuiltCalendarEventSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICalendarEventModel"/> extension method that creates a(n) <see cref="CalendarEvent"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="CalendarEvent"/> entity.</returns>
        public static ICalendarEvent CreateCalendarEventEntity(
            this ICalendarEventModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ICalendarEventModel, CalendarEvent>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCalendarEventFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICalendarEventModel"/> extension method that updates a(n) <see cref="CalendarEvent"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="CalendarEvent"/> entity.</returns>
        public static ICalendarEvent UpdateCalendarEventFromModel(
            this ICalendarEvent entity,
            ICalendarEventModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // CalendarEvent Properties
            entity.EndDate = model.EndDate;
            entity.EventDuration = model.EventDuration;
            entity.EventDurationUnitOfMeasure = model.EventDurationUnitOfMeasure;
            entity.MaxAttendees = model.MaxAttendees;
            entity.RecurrenceString = model.RecurrenceString;
            entity.ShortDescription = model.ShortDescription;
            entity.StartDate = model.StartDate;
            // CalendarEvent's Related Objects
            // CalendarEvent's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCalendarEventSQLSelectorFull()
        {
            PreBuiltCalendarEventSQLSelectorFull = x => x == null ? null! : new AnonCalendarEvent
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCalendarEventType.PreBuiltCalendarEventTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForCalendarEventStatus.PreBuiltCalendarEventStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForCalendarEventImage.PreBuiltCalendarEventImageSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForCalendarEventFile.PreBuiltCalendarEventFileSQLSelectorList.Expand().Compile()).ToList(),
                Products = x.Products!.Where(y => y.Active).Select(ModelMapperForCalendarEventProduct.PreBuiltCalendarEventProductSQLSelectorList.Expand().Compile()).ToList(),
                ShortDescription = x.ShortDescription,
                EventDurationUnitOfMeasure = x.EventDurationUnitOfMeasure,
                RecurrenceString = x.RecurrenceString,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                EventDuration = x.EventDuration,
                MaxAttendees = x.MaxAttendees,
                GroupID = x.GroupID,
                Group = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Group!),
                CalendarEventDetails = x.CalendarEventDetails!.Where(y => y.Active).Select(ModelMapperForCalendarEventDetail.PreBuiltCalendarEventDetailSQLSelectorList.Expand().Compile()).ToList(),
                UserEventAttendances = x.UserEventAttendances!.Where(y => y.Active).Select(ModelMapperForUserEventAttendance.PreBuiltUserEventAttendanceSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCalendarEventSQLSelectorLite()
        {
            PreBuiltCalendarEventSQLSelectorLite = x => x == null ? null! : new AnonCalendarEvent
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCalendarEventType.PreBuiltCalendarEventTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForCalendarEventStatus.PreBuiltCalendarEventStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                ShortDescription = x.ShortDescription,
                EventDurationUnitOfMeasure = x.EventDurationUnitOfMeasure,
                RecurrenceString = x.RecurrenceString,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                EventDuration = x.EventDuration,
                MaxAttendees = x.MaxAttendees,
                GroupID = x.GroupID,
                Group = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Group!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCalendarEventSQLSelectorList()
        {
            PreBuiltCalendarEventSQLSelectorList = x => x == null ? null! : new AnonCalendarEvent
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCalendarEventType.PreBuiltCalendarEventTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForCalendarEventStatus.PreBuiltCalendarEventStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                ShortDescription = x.ShortDescription,
                EventDurationUnitOfMeasure = x.EventDurationUnitOfMeasure,
                RecurrenceString = x.RecurrenceString,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                EventDuration = x.EventDuration,
                MaxAttendees = x.MaxAttendees,
                GroupID = x.GroupID,
                Group = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Group!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICalendarEventModel> SelectFullCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarEventSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICalendarEventModel> SelectLiteCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarEventSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICalendarEventModel> SelectListCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarEventSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityList(x, contextProfileName))!;
        }

        public static ICalendarEventModel? SelectFirstFullCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICalendarEventModel? SelectFirstListCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICalendarEventModel? SelectSingleFullCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICalendarEventModel? SelectSingleLiteCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICalendarEventModel? SelectSingleListCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarEventSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarEventModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICalendarEventModel> results, int totalPages, int totalCount) SelectFullCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarEventSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarEventModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICalendarEventModel> results, int totalPages, int totalCount) SelectLiteCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarEventSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarEventModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICalendarEventModel> results, int totalPages, int totalCount) SelectListCalendarEventAndMapToCalendarEventModel(
            this IQueryable<CalendarEvent> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarEventSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarEventSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarEventModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICalendarEventModel? CreateCalendarEventModelFromEntityFull(this ICalendarEvent? entity, string? contextProfileName)
        {
            return CreateCalendarEventModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICalendarEventModel? CreateCalendarEventModelFromEntityLite(this ICalendarEvent? entity, string? contextProfileName)
        {
            return CreateCalendarEventModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICalendarEventModel? CreateCalendarEventModelFromEntityList(this ICalendarEvent? entity, string? contextProfileName)
        {
            return CreateCalendarEventModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICalendarEventModel? CreateCalendarEventModelFromEntity(
            this ICalendarEvent? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICalendarEventModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForCalendarEventType.CreateCalendarEventTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForCalendarEventStatus.CreateCalendarEventStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // CalendarEvent's Properties
                    // CalendarEvent's Related Objects
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    // CalendarEvent's Associated Objects
                    model.CalendarEventDetails = (entity is AnonCalendarEvent ? ((AnonCalendarEvent)entity).CalendarEventDetails : entity.CalendarEventDetails)?.Where(x => x.Active).Select(x => ModelMapperForCalendarEventDetail.CreateCalendarEventDetailModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonCalendarEvent ? ((AnonCalendarEvent)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForCalendarEventImage.CreateCalendarEventImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Products = (entity is AnonCalendarEvent ? ((AnonCalendarEvent)entity).Products : entity.Products)?.Where(x => x.Active).Select(x => ModelMapperForCalendarEventProduct.CreateCalendarEventProductModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonCalendarEvent ? ((AnonCalendarEvent)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForCalendarEventFile.CreateCalendarEventFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.UserEventAttendances = (entity is AnonCalendarEvent ? ((AnonCalendarEvent)entity).UserEventAttendances : entity.UserEventAttendances)?.Where(x => x.Active).Select(x => ModelMapperForUserEventAttendance.CreateUserEventAttendanceModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateCalendarEventModelFromEntityHooksFull != null) { model = CreateCalendarEventModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CalendarEvent's Properties
                    // CalendarEvent's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Group = ModelMapperForGroup.CreateGroupModelFromEntityLite(entity.Group, contextProfileName);
                    // CalendarEvent's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCalendarEventModelFromEntityHooksLite != null) { model = CreateCalendarEventModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // CalendarEvent's Properties
                    model.EndDate = entity.EndDate;
                    model.EventDuration = entity.EventDuration;
                    model.EventDurationUnitOfMeasure = entity.EventDurationUnitOfMeasure;
                    model.MaxAttendees = entity.MaxAttendees;
                    model.RecurrenceString = entity.RecurrenceString;
                    model.ShortDescription = entity.ShortDescription;
                    model.StartDate = entity.StartDate;
                    // CalendarEvent's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ContactID = entity.ContactID;
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    model.GroupID = entity.GroupID;
                    model.GroupKey = entity.Group?.CustomKey;
                    model.GroupName = entity.Group?.Name;
                    // CalendarEvent's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCalendarEventModelFromEntityHooksList != null) { model = CreateCalendarEventModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
