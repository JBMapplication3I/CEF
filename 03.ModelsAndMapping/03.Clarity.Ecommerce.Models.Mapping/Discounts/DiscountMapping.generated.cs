// <autogenerated>
// <copyright file="Mapping.Discounts.Discount.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Discounts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForDiscount
    {
        public sealed class AnonDiscount : Discount
        {
            public new IEnumerable<DiscountAccountType>? AccountTypes { get; set; }
            public new IEnumerable<DiscountBrand>? Brands { get; set; }
            public new IEnumerable<DiscountCode>? Codes { get; set; }
            public new IEnumerable<DiscountCountry>? Countries { get; set; }
            public new IEnumerable<DiscountProduct>? Products { get; set; }
            public new IEnumerable<DiscountProductType>? ProductTypes { get; set; }
            public new IEnumerable<DiscountShipCarrierMethod>? ShipCarrierMethods { get; set; }
            public new IEnumerable<DiscountUserRole>? UserRoles { get; set; }
        }

        public static readonly Func<Discount?, string?, IDiscountModel?> MapDiscountModelFromEntityFull = CreateDiscountModelFromEntityFull;

        public static readonly Func<Discount?, string?, IDiscountModel?> MapDiscountModelFromEntityLite = CreateDiscountModelFromEntityLite;

        public static readonly Func<Discount?, string?, IDiscountModel?> MapDiscountModelFromEntityList = CreateDiscountModelFromEntityList;

        public static Func<IDiscount, IDiscountModel, string?, IDiscountModel>? CreateDiscountModelFromEntityHooksFull { get; set; }

        public static Func<IDiscount, IDiscountModel, string?, IDiscountModel>? CreateDiscountModelFromEntityHooksLite { get; set; }

        public static Func<IDiscount, IDiscountModel, string?, IDiscountModel>? CreateDiscountModelFromEntityHooksList { get; set; }

        public static Expression<Func<Discount, AnonDiscount>>? PreBuiltDiscountSQLSelectorFull { get; set; }

        public static Expression<Func<Discount, AnonDiscount>>? PreBuiltDiscountSQLSelectorLite { get; set; }

        public static Expression<Func<Discount, AnonDiscount>>? PreBuiltDiscountSQLSelectorList { get; set; }

        /// <summary>An <see cref="IDiscountModel"/> extension method that creates a(n) <see cref="Discount"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Discount"/> entity.</returns>
        public static IDiscount CreateDiscountEntity(
            this IDiscountModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IDiscountModel, Discount>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateDiscountFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IDiscountModel"/> extension method that updates a(n) <see cref="Discount"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Discount"/> entity.</returns>
        public static IDiscount UpdateDiscountFromModel(
            this IDiscount entity,
            IDiscountModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Discount Properties
            entity.BuyXValue = model.BuyXValue;
            entity.CanCombine = model.CanCombine;
            entity.DiscountCompareOperator = (int)model.DiscountCompareOperator;
            entity.DiscountTypeID = model.DiscountTypeID;
            entity.EndDate = model.EndDate;
            entity.GetYValue = model.GetYValue;
            entity.IsAutoApplied = model.IsAutoApplied;
            entity.Priority = model.Priority;
            entity.RoundingOperation = model.RoundingOperation;
            entity.RoundingType = model.RoundingType;
            entity.StartDate = model.StartDate;
            entity.ThresholdAmount = model.ThresholdAmount;
            entity.UsageLimitGlobally = model.UsageLimitGlobally;
            entity.UsageLimitPerAccount = model.UsageLimitPerAccount;
            entity.UsageLimitPerCart = model.UsageLimitPerCart;
            entity.UsageLimitPerUser = model.UsageLimitPerUser;
            entity.Value = model.Value;
            entity.ValueType = model.ValueType;
            // Discount's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenDiscountSQLSelectorFull()
        {
            PreBuiltDiscountSQLSelectorFull = x => x == null ? null! : new AnonDiscount
            {
                Products = x.Products!.Where(y => y.Active).Select(ModelMapperForDiscountProduct.PreBuiltDiscountProductSQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForDiscountBrand.PreBuiltDiscountBrandSQLSelectorList.Expand().Compile()).ToList(),
                CanCombine = x.CanCombine,
                IsAutoApplied = x.IsAutoApplied,
                Value = x.Value,
                ThresholdAmount = x.ThresholdAmount,
                BuyXValue = x.BuyXValue,
                GetYValue = x.GetYValue,
                RoundingOperation = x.RoundingOperation,
                UsageLimitPerAccount = x.UsageLimitPerAccount,
                UsageLimitPerUser = x.UsageLimitPerUser,
                UsageLimitPerCart = x.UsageLimitPerCart,
                UsageLimitGlobally = x.UsageLimitGlobally,
                DiscountCompareOperator = x.DiscountCompareOperator,
                DiscountTypeID = x.DiscountTypeID,
                ValueType = x.ValueType,
                RoundingType = x.RoundingType,
                Priority = x.Priority,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                Codes = x.Codes!.Where(y => y.Active).Select(ModelMapperForDiscountCode.PreBuiltDiscountCodeSQLSelectorList.Expand().Compile()).ToList(),
                Countries = x.Countries!.Where(y => y.Active).Select(ModelMapperForDiscountCountry.PreBuiltDiscountCountrySQLSelectorList.Expand().Compile()).ToList(),
                UserRoles = x.UserRoles!.Where(y => y.Active).Select(ModelMapperForDiscountUserRole.PreBuiltDiscountUserRoleSQLSelectorList.Expand().Compile()).ToList(),
                AccountTypes = x.AccountTypes!.Where(y => y.Active).Select(ModelMapperForDiscountAccountType.PreBuiltDiscountAccountTypeSQLSelectorList.Expand().Compile()).ToList(),
                ProductTypes = x.ProductTypes!.Where(y => y.Active).Select(ModelMapperForDiscountProductType.PreBuiltDiscountProductTypeSQLSelectorList.Expand().Compile()).ToList(),
                ShipCarrierMethods = x.ShipCarrierMethods!.Where(y => y.Active).Select(ModelMapperForDiscountShipCarrierMethod.PreBuiltDiscountShipCarrierMethodSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenDiscountSQLSelectorLite()
        {
            PreBuiltDiscountSQLSelectorLite = x => x == null ? null! : new AnonDiscount
            {
                CanCombine = x.CanCombine,
                IsAutoApplied = x.IsAutoApplied,
                Value = x.Value,
                ThresholdAmount = x.ThresholdAmount,
                BuyXValue = x.BuyXValue,
                GetYValue = x.GetYValue,
                RoundingOperation = x.RoundingOperation,
                UsageLimitPerAccount = x.UsageLimitPerAccount,
                UsageLimitPerUser = x.UsageLimitPerUser,
                UsageLimitPerCart = x.UsageLimitPerCart,
                UsageLimitGlobally = x.UsageLimitGlobally,
                DiscountCompareOperator = x.DiscountCompareOperator,
                DiscountTypeID = x.DiscountTypeID,
                ValueType = x.ValueType,
                RoundingType = x.RoundingType,
                Priority = x.Priority,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                Codes = x.Codes!.Where(y => y.Active).Select(ModelMapperForDiscountCode.PreBuiltDiscountCodeSQLSelectorList.Expand().Compile()),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenDiscountSQLSelectorList()
        {
            PreBuiltDiscountSQLSelectorList = x => x == null ? null! : new AnonDiscount
            {
                CanCombine = x.CanCombine,
                IsAutoApplied = x.IsAutoApplied,
                Value = x.Value,
                ThresholdAmount = x.ThresholdAmount,
                BuyXValue = x.BuyXValue,
                GetYValue = x.GetYValue,
                RoundingOperation = x.RoundingOperation,
                UsageLimitPerAccount = x.UsageLimitPerAccount,
                UsageLimitPerUser = x.UsageLimitPerUser,
                UsageLimitPerCart = x.UsageLimitPerCart,
                UsageLimitGlobally = x.UsageLimitGlobally,
                DiscountCompareOperator = x.DiscountCompareOperator,
                DiscountTypeID = x.DiscountTypeID,
                ValueType = x.ValueType,
                RoundingType = x.RoundingType,
                Priority = x.Priority,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                Codes = x.Codes!.Where(y => y.Active).Select(ModelMapperForDiscountCode.PreBuiltDiscountCodeSQLSelectorList.Expand().Compile()),
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IDiscountModel> SelectFullDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltDiscountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IDiscountModel> SelectLiteDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltDiscountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IDiscountModel> SelectListDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltDiscountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityList(x, contextProfileName))!;
        }

        public static IDiscountModel? SelectFirstFullDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDiscountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IDiscountModel? SelectFirstListDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDiscountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IDiscountModel? SelectSingleFullDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDiscountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IDiscountModel? SelectSingleLiteDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDiscountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IDiscountModel? SelectSingleListDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDiscountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateDiscountModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IDiscountModel> results, int totalPages, int totalCount) SelectFullDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltDiscountSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateDiscountModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IDiscountModel> results, int totalPages, int totalCount) SelectLiteDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltDiscountSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateDiscountModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IDiscountModel> results, int totalPages, int totalCount) SelectListDiscountAndMapToDiscountModel(
            this IQueryable<Discount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDiscountSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltDiscountSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateDiscountModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IDiscountModel? CreateDiscountModelFromEntityFull(this IDiscount? entity, string? contextProfileName)
        {
            return CreateDiscountModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IDiscountModel? CreateDiscountModelFromEntityLite(this IDiscount? entity, string? contextProfileName)
        {
            return CreateDiscountModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IDiscountModel? CreateDiscountModelFromEntityList(this IDiscount? entity, string? contextProfileName)
        {
            return CreateDiscountModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IDiscountModel? CreateDiscountModelFromEntity(
            this IDiscount? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IDiscountModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Discount's Properties
                    // Discount's Related Objects
                    // Discount's Associated Objects
                    model.AccountTypes = (entity is AnonDiscount ? ((AnonDiscount)entity).AccountTypes : entity.AccountTypes)?.Where(x => x.Active).Select(x => ModelMapperForDiscountAccountType.CreateDiscountAccountTypeModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Brands = (entity is AnonDiscount ? ((AnonDiscount)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForDiscountBrand.CreateDiscountBrandModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Countries = (entity is AnonDiscount ? ((AnonDiscount)entity).Countries : entity.Countries)?.Where(x => x.Active).Select(x => ModelMapperForDiscountCountry.CreateDiscountCountryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Products = (entity is AnonDiscount ? ((AnonDiscount)entity).Products : entity.Products)?.Where(x => x.Active).Select(x => ModelMapperForDiscountProduct.CreateDiscountProductModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ProductTypes = (entity is AnonDiscount ? ((AnonDiscount)entity).ProductTypes : entity.ProductTypes)?.Where(x => x.Active).Select(x => ModelMapperForDiscountProductType.CreateDiscountProductTypeModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ShipCarrierMethods = (entity is AnonDiscount ? ((AnonDiscount)entity).ShipCarrierMethods : entity.ShipCarrierMethods)?.Where(x => x.Active).Select(x => ModelMapperForDiscountShipCarrierMethod.CreateDiscountShipCarrierMethodModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.UserRoles = (entity is AnonDiscount ? ((AnonDiscount)entity).UserRoles : entity.UserRoles)?.Where(x => x.Active).Select(x => ModelMapperForDiscountUserRole.CreateDiscountUserRoleModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateDiscountModelFromEntityHooksFull != null) { model = CreateDiscountModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Discount's Properties
                    // Discount's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Discount's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateDiscountModelFromEntityHooksLite != null) { model = CreateDiscountModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Discount's Properties
                    model.BuyXValue = entity.BuyXValue;
                    model.CanCombine = entity.CanCombine;
                    model.DiscountCompareOperator = (Enums.CompareOperator)(entity.DiscountCompareOperator ?? 0);
                    model.DiscountTypeID = entity.DiscountTypeID;
                    model.EndDate = entity.EndDate;
                    model.GetYValue = entity.GetYValue;
                    model.IsAutoApplied = entity.IsAutoApplied;
                    model.Priority = entity.Priority;
                    model.RoundingOperation = entity.RoundingOperation;
                    model.RoundingType = entity.RoundingType;
                    model.StartDate = entity.StartDate;
                    model.ThresholdAmount = entity.ThresholdAmount;
                    model.UsageLimitGlobally = entity.UsageLimitGlobally;
                    model.UsageLimitPerAccount = entity.UsageLimitPerAccount;
                    model.UsageLimitPerCart = entity.UsageLimitPerCart;
                    model.UsageLimitPerUser = entity.UsageLimitPerUser;
                    model.Value = entity.Value;
                    model.ValueType = entity.ValueType;
                    // Discount's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Discount's Associated Objects (Not Mapped unless Forced)
                    model.Codes = (entity is AnonDiscount ? ((AnonDiscount)entity).Codes : entity.Codes)?.Where(x => x.Active).Select(x => ModelMapperForDiscountCode.CreateDiscountCodeModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateDiscountModelFromEntityHooksList != null) { model = CreateDiscountModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
