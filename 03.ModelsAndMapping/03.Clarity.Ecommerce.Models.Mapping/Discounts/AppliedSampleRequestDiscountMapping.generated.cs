// <autogenerated>
// <copyright file="Mapping.Discounts.AppliedSampleRequestDiscount.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Discounts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAppliedSampleRequestDiscount
    {
        public sealed class AnonAppliedSampleRequestDiscount : AppliedSampleRequestDiscount
        {
            // public new SampleRequest? Master { get; set; }
        }

        public static readonly Func<AppliedSampleRequestDiscount?, string?, IAppliedSampleRequestDiscountModel?> MapAppliedSampleRequestDiscountModelFromEntityFull = CreateAppliedSampleRequestDiscountModelFromEntityFull;

        public static readonly Func<AppliedSampleRequestDiscount?, string?, IAppliedSampleRequestDiscountModel?> MapAppliedSampleRequestDiscountModelFromEntityLite = CreateAppliedSampleRequestDiscountModelFromEntityLite;

        public static readonly Func<AppliedSampleRequestDiscount?, string?, IAppliedSampleRequestDiscountModel?> MapAppliedSampleRequestDiscountModelFromEntityList = CreateAppliedSampleRequestDiscountModelFromEntityList;

        public static Func<IAppliedSampleRequestDiscount, IAppliedSampleRequestDiscountModel, string?, IAppliedSampleRequestDiscountModel>? CreateAppliedSampleRequestDiscountModelFromEntityHooksFull { get; set; }

        public static Func<IAppliedSampleRequestDiscount, IAppliedSampleRequestDiscountModel, string?, IAppliedSampleRequestDiscountModel>? CreateAppliedSampleRequestDiscountModelFromEntityHooksLite { get; set; }

        public static Func<IAppliedSampleRequestDiscount, IAppliedSampleRequestDiscountModel, string?, IAppliedSampleRequestDiscountModel>? CreateAppliedSampleRequestDiscountModelFromEntityHooksList { get; set; }

        public static Expression<Func<AppliedSampleRequestDiscount, AnonAppliedSampleRequestDiscount>>? PreBuiltAppliedSampleRequestDiscountSQLSelectorFull { get; set; }

        public static Expression<Func<AppliedSampleRequestDiscount, AnonAppliedSampleRequestDiscount>>? PreBuiltAppliedSampleRequestDiscountSQLSelectorLite { get; set; }

        public static Expression<Func<AppliedSampleRequestDiscount, AnonAppliedSampleRequestDiscount>>? PreBuiltAppliedSampleRequestDiscountSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAppliedSampleRequestDiscountModel"/> extension method that creates a(n) <see cref="AppliedSampleRequestDiscount"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="AppliedSampleRequestDiscount"/> entity.</returns>
        public static IAppliedSampleRequestDiscount CreateAppliedSampleRequestDiscountEntity(
            this IAppliedSampleRequestDiscountModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IAppliedSampleRequestDiscountModel, AppliedSampleRequestDiscount>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAppliedSampleRequestDiscountFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAppliedSampleRequestDiscountModel"/> extension method that updates a(n) <see cref="AppliedSampleRequestDiscount"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="AppliedSampleRequestDiscount"/> entity.</returns>
        public static IAppliedSampleRequestDiscount UpdateAppliedSampleRequestDiscountFromModel(
            this IAppliedSampleRequestDiscount entity,
            IAppliedSampleRequestDiscountModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // IAppliedDiscountBase Properties
            entity.DiscountTotal = model.DiscountTotal;
            entity.ApplicationsUsed = model.ApplicationsUsed;
            entity.TargetApplicationsUsed = model.TargetApplicationsUsed;
            // AppliedSampleRequestDiscount's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAppliedSampleRequestDiscountSQLSelectorFull()
        {
            PreBuiltAppliedSampleRequestDiscountSQLSelectorFull = x => x == null ? null! : new AnonAppliedSampleRequestDiscount
            {
                MasterID = x.MasterID,
                Master = ModelMapperForSampleRequest.PreBuiltSampleRequestSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                DiscountTotal = x.DiscountTotal,
                ApplicationsUsed = x.ApplicationsUsed,
                TargetApplicationsUsed = x.TargetApplicationsUsed,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAppliedSampleRequestDiscountSQLSelectorLite()
        {
            PreBuiltAppliedSampleRequestDiscountSQLSelectorLite = x => x == null ? null! : new AnonAppliedSampleRequestDiscount
            {
                MasterID = x.MasterID,
                Master = ModelMapperForSampleRequest.PreBuiltSampleRequestSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                DiscountTotal = x.DiscountTotal,
                ApplicationsUsed = x.ApplicationsUsed,
                TargetApplicationsUsed = x.TargetApplicationsUsed,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAppliedSampleRequestDiscountSQLSelectorList()
        {
            PreBuiltAppliedSampleRequestDiscountSQLSelectorList = x => x == null ? null! : new AnonAppliedSampleRequestDiscount
            {
                MasterID = x.MasterID,
                Master = ModelMapperForSampleRequest.PreBuiltSampleRequestSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                DiscountTotal = x.DiscountTotal,
                ApplicationsUsed = x.ApplicationsUsed,
                TargetApplicationsUsed = x.TargetApplicationsUsed,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAppliedSampleRequestDiscountModel> SelectFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAppliedSampleRequestDiscountModel> SelectLiteAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAppliedSampleRequestDiscountModel> SelectListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityList(x, contextProfileName))!;
        }

        public static IAppliedSampleRequestDiscountModel? SelectFirstFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAppliedSampleRequestDiscountModel? SelectFirstListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAppliedSampleRequestDiscountModel? SelectSingleFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAppliedSampleRequestDiscountModel? SelectSingleLiteAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAppliedSampleRequestDiscountModel? SelectSingleListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAppliedSampleRequestDiscountModel> results, int totalPages, int totalCount) SelectFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAppliedSampleRequestDiscountModel> results, int totalPages, int totalCount) SelectLiteAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAppliedSampleRequestDiscountModel> results, int totalPages, int totalCount) SelectListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(
            this IQueryable<AppliedSampleRequestDiscount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppliedSampleRequestDiscountSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAppliedSampleRequestDiscountSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAppliedSampleRequestDiscountModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAppliedSampleRequestDiscountModel? CreateAppliedSampleRequestDiscountModelFromEntityFull(this IAppliedSampleRequestDiscount? entity, string? contextProfileName)
        {
            return CreateAppliedSampleRequestDiscountModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAppliedSampleRequestDiscountModel? CreateAppliedSampleRequestDiscountModelFromEntityLite(this IAppliedSampleRequestDiscount? entity, string? contextProfileName)
        {
            return CreateAppliedSampleRequestDiscountModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAppliedSampleRequestDiscountModel? CreateAppliedSampleRequestDiscountModelFromEntityList(this IAppliedSampleRequestDiscount? entity, string? contextProfileName)
        {
            return CreateAppliedSampleRequestDiscountModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAppliedSampleRequestDiscountModel? CreateAppliedSampleRequestDiscountModelFromEntity(
            this IAppliedSampleRequestDiscount? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAppliedSampleRequestDiscountModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AppliedSampleRequestDiscount's Properties
                    // AppliedSampleRequestDiscount's Related Objects
                    // AppliedSampleRequestDiscount's Associated Objects
                    // Additional Mappings
                    if (CreateAppliedSampleRequestDiscountModelFromEntityHooksFull != null) { model = CreateAppliedSampleRequestDiscountModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AppliedSampleRequestDiscount's Properties
                    // AppliedSampleRequestDiscount's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // AppliedSampleRequestDiscount's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAppliedSampleRequestDiscountModelFromEntityHooksLite != null) { model = CreateAppliedSampleRequestDiscountModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // IAppliedDiscountBase Properties
                    model.DiscountTotal = entity.DiscountTotal;
                    model.ApplicationsUsed = entity.ApplicationsUsed;
                    model.TargetApplicationsUsed = entity.TargetApplicationsUsed;
                    model.MasterID = entity.MasterID;
                    if (entity.Slave != null)
                    {
                        model.DiscountValue = entity.Slave.Value;
                        model.DiscountValueType = entity.Slave.ValueType;
                        model.DiscountPriority = entity.Slave.Priority;
                        model.DiscountTypeID = entity.Slave.DiscountTypeID;
                        model.DiscountCanCombine = entity.Slave.CanCombine;
                        model.Slave = ModelMapperForDiscount.CreateDiscountModelFromEntityList(entity.Slave, contextProfileName);
                    }
                    // AppliedSampleRequestDiscount's Properties
                    // AppliedSampleRequestDiscount's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.SlaveID = entity.SlaveID;
                    // AppliedSampleRequestDiscount's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAppliedSampleRequestDiscountModelFromEntityHooksList != null) { model = CreateAppliedSampleRequestDiscountModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
