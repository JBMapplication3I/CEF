// <autogenerated>
// <copyright file="Mapping.Globalization.Language.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Globalization section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForLanguage
    {
        public sealed class AnonLanguage : Language
        {
            public new IEnumerable<LanguageImage>? Images { get; set; }
        }

        public static readonly Func<Language?, string?, ILanguageModel?> MapLanguageModelFromEntityFull = CreateLanguageModelFromEntityFull;

        public static readonly Func<Language?, string?, ILanguageModel?> MapLanguageModelFromEntityLite = CreateLanguageModelFromEntityLite;

        public static readonly Func<Language?, string?, ILanguageModel?> MapLanguageModelFromEntityList = CreateLanguageModelFromEntityList;

        public static Func<ILanguage, ILanguageModel, string?, ILanguageModel>? CreateLanguageModelFromEntityHooksFull { get; set; }

        public static Func<ILanguage, ILanguageModel, string?, ILanguageModel>? CreateLanguageModelFromEntityHooksLite { get; set; }

        public static Func<ILanguage, ILanguageModel, string?, ILanguageModel>? CreateLanguageModelFromEntityHooksList { get; set; }

        public static Expression<Func<Language, AnonLanguage>>? PreBuiltLanguageSQLSelectorFull { get; set; }

        public static Expression<Func<Language, AnonLanguage>>? PreBuiltLanguageSQLSelectorLite { get; set; }

        public static Expression<Func<Language, AnonLanguage>>? PreBuiltLanguageSQLSelectorList { get; set; }

        /// <summary>An <see cref="ILanguageModel"/> extension method that creates a(n) <see cref="Language"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Language"/> entity.</returns>
        public static ILanguage CreateLanguageEntity(
            this ILanguageModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ILanguageModel, Language>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateLanguageFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ILanguageModel"/> extension method that updates a(n) <see cref="Language"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Language"/> entity.</returns>
        public static ILanguage UpdateLanguageFromModel(
            this ILanguage entity,
            ILanguageModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Language Properties
            entity.ISO639_1_2002 = model.ISO639_1_2002;
            entity.ISO639_2_1998 = model.ISO639_2_1998;
            entity.ISO639_3_2007 = model.ISO639_3_2007;
            entity.ISO639_5_2008 = model.ISO639_5_2008;
            entity.Locale = model.Locale;
            entity.UnicodeName = model.UnicodeName;
            // Language's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenLanguageSQLSelectorFull()
        {
            PreBuiltLanguageSQLSelectorFull = x => x == null ? null! : new AnonLanguage
            {
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForLanguageImage.PreBuiltLanguageImageSQLSelectorList.Expand().Compile()).ToList(),
                Locale = x.Locale,
                UnicodeName = x.UnicodeName,
                ISO639_1_2002 = x.ISO639_1_2002,
                ISO639_2_1998 = x.ISO639_2_1998,
                ISO639_3_2007 = x.ISO639_3_2007,
                ISO639_5_2008 = x.ISO639_5_2008,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenLanguageSQLSelectorLite()
        {
            PreBuiltLanguageSQLSelectorLite = x => x == null ? null! : new AnonLanguage
            {
                Locale = x.Locale,
                UnicodeName = x.UnicodeName,
                ISO639_1_2002 = x.ISO639_1_2002,
                ISO639_2_1998 = x.ISO639_2_1998,
                ISO639_3_2007 = x.ISO639_3_2007,
                ISO639_5_2008 = x.ISO639_5_2008,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenLanguageSQLSelectorList()
        {
            PreBuiltLanguageSQLSelectorList = x => x == null ? null! : new AnonLanguage
            {
                Locale = x.Locale,
                UnicodeName = x.UnicodeName,
                ISO639_1_2002 = x.ISO639_1_2002,
                ISO639_2_1998 = x.ISO639_2_1998,
                ISO639_3_2007 = x.ISO639_3_2007,
                ISO639_5_2008 = x.ISO639_5_2008,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ILanguageModel> SelectFullLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltLanguageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ILanguageModel> SelectLiteLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltLanguageSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ILanguageModel> SelectListLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltLanguageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityList(x, contextProfileName))!;
        }

        public static ILanguageModel? SelectFirstFullLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLanguageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ILanguageModel? SelectFirstListLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLanguageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ILanguageModel? SelectSingleFullLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLanguageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ILanguageModel? SelectSingleLiteLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLanguageSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ILanguageModel? SelectSingleListLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLanguageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateLanguageModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ILanguageModel> results, int totalPages, int totalCount) SelectFullLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltLanguageSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateLanguageModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ILanguageModel> results, int totalPages, int totalCount) SelectLiteLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltLanguageSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateLanguageModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ILanguageModel> results, int totalPages, int totalCount) SelectListLanguageAndMapToLanguageModel(
            this IQueryable<Language> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLanguageSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltLanguageSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateLanguageModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ILanguageModel? CreateLanguageModelFromEntityFull(this ILanguage? entity, string? contextProfileName)
        {
            return CreateLanguageModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ILanguageModel? CreateLanguageModelFromEntityLite(this ILanguage? entity, string? contextProfileName)
        {
            return CreateLanguageModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ILanguageModel? CreateLanguageModelFromEntityList(this ILanguage? entity, string? contextProfileName)
        {
            return CreateLanguageModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ILanguageModel? CreateLanguageModelFromEntity(
            this ILanguage? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ILanguageModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Language's Properties
                    // Language's Related Objects
                    // Language's Associated Objects
                    model.Images = (entity is AnonLanguage ? ((AnonLanguage)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForLanguageImage.CreateLanguageImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateLanguageModelFromEntityHooksFull != null) { model = CreateLanguageModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Language's Properties
                    // Language's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Language's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateLanguageModelFromEntityHooksLite != null) { model = CreateLanguageModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Language's Properties
                    model.ISO639_1_2002 = entity.ISO639_1_2002;
                    model.ISO639_2_1998 = entity.ISO639_2_1998;
                    model.ISO639_3_2007 = entity.ISO639_3_2007;
                    model.ISO639_5_2008 = entity.ISO639_5_2008;
                    model.Locale = entity.Locale;
                    model.UnicodeName = entity.UnicodeName;
                    // Language's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Language's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateLanguageModelFromEntityHooksList != null) { model = CreateLanguageModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
