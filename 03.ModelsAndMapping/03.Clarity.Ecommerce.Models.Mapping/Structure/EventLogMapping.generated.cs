// <autogenerated>
// <copyright file="Mapping.System.EventLog.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the System section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForEventLog
    {
        public sealed class AnonEventLog : EventLog
        {
        }

        public static readonly Func<EventLog?, string?, IEventLogModel?> MapEventLogModelFromEntityFull = CreateEventLogModelFromEntityFull;

        public static readonly Func<EventLog?, string?, IEventLogModel?> MapEventLogModelFromEntityLite = CreateEventLogModelFromEntityLite;

        public static readonly Func<EventLog?, string?, IEventLogModel?> MapEventLogModelFromEntityList = CreateEventLogModelFromEntityList;

        public static Func<IEventLog, IEventLogModel, string?, IEventLogModel>? CreateEventLogModelFromEntityHooksFull { get; set; }

        public static Func<IEventLog, IEventLogModel, string?, IEventLogModel>? CreateEventLogModelFromEntityHooksLite { get; set; }

        public static Func<IEventLog, IEventLogModel, string?, IEventLogModel>? CreateEventLogModelFromEntityHooksList { get; set; }

        public static Expression<Func<EventLog, AnonEventLog>>? PreBuiltEventLogSQLSelectorFull { get; set; }

        public static Expression<Func<EventLog, AnonEventLog>>? PreBuiltEventLogSQLSelectorLite { get; set; }

        public static Expression<Func<EventLog, AnonEventLog>>? PreBuiltEventLogSQLSelectorList { get; set; }

        /// <summary>An <see cref="IEventLogModel"/> extension method that creates a(n) <see cref="EventLog"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="EventLog"/> entity.</returns>
        public static IEventLog CreateEventLogEntity(
            this IEventLogModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IEventLogModel, EventLog>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateEventLogFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IEventLogModel"/> extension method that updates a(n) <see cref="EventLog"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="EventLog"/> entity.</returns>
        public static IEventLog UpdateEventLogFromModel(
            this IEventLog entity,
            IEventLogModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // EventLog Properties
            entity.DataID = model.DataID;
            entity.LogLevel = model.LogLevel;
            // EventLog's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenEventLogSQLSelectorFull()
        {
            PreBuiltEventLogSQLSelectorFull = x => x == null ? null! : new AnonEventLog
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                DataID = x.DataID,
                LogLevel = x.LogLevel,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenEventLogSQLSelectorLite()
        {
            PreBuiltEventLogSQLSelectorLite = x => x == null ? null! : new AnonEventLog
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                DataID = x.DataID,
                LogLevel = x.LogLevel,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenEventLogSQLSelectorList()
        {
            PreBuiltEventLogSQLSelectorList = x => x == null ? null! : new AnonEventLog
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                DataID = x.DataID,
                LogLevel = x.LogLevel,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IEventLogModel> SelectFullEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEventLogSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IEventLogModel> SelectLiteEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEventLogSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IEventLogModel> SelectListEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltEventLogSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityList(x, contextProfileName))!;
        }

        public static IEventLogModel? SelectFirstFullEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEventLogSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IEventLogModel? SelectFirstListEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEventLogSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IEventLogModel? SelectSingleFullEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEventLogSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IEventLogModel? SelectSingleLiteEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEventLogSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IEventLogModel? SelectSingleListEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltEventLogSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateEventLogModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IEventLogModel> results, int totalPages, int totalCount) SelectFullEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEventLogSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateEventLogModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IEventLogModel> results, int totalPages, int totalCount) SelectLiteEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEventLogSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateEventLogModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IEventLogModel> results, int totalPages, int totalCount) SelectListEventLogAndMapToEventLogModel(
            this IQueryable<EventLog> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltEventLogSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltEventLogSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateEventLogModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IEventLogModel? CreateEventLogModelFromEntityFull(this IEventLog? entity, string? contextProfileName)
        {
            return CreateEventLogModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IEventLogModel? CreateEventLogModelFromEntityLite(this IEventLog? entity, string? contextProfileName)
        {
            return CreateEventLogModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IEventLogModel? CreateEventLogModelFromEntityList(this IEventLog? entity, string? contextProfileName)
        {
            return CreateEventLogModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IEventLogModel? CreateEventLogModelFromEntity(
            this IEventLog? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IEventLogModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // EventLog's Properties
                    // EventLog's Related Objects
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    // EventLog's Associated Objects
                    // Additional Mappings
                    if (CreateEventLogModelFromEntityHooksFull != null) { model = CreateEventLogModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // EventLog's Properties
                    // EventLog's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // EventLog's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateEventLogModelFromEntityHooksLite != null) { model = CreateEventLogModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // EventLog's Properties
                    model.DataID = entity.DataID;
                    model.LogLevel = entity.LogLevel;
                    // EventLog's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    // EventLog's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateEventLogModelFromEntityHooksList != null) { model = CreateEventLogModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
