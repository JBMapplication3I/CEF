// <autogenerated>
// <copyright file="Mapping.System.Note.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the System section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForNote
    {
        public sealed class AnonNote : Note
        {
            public Contact? CreatedByUserContact { get; set; }
            public Contact? UpdatedByUserContact { get; set; }
        }

        public static readonly Func<Note?, string?, INoteModel?> MapNoteModelFromEntityFull = CreateNoteModelFromEntityFull;

        public static readonly Func<Note?, string?, INoteModel?> MapNoteModelFromEntityLite = CreateNoteModelFromEntityLite;

        public static readonly Func<Note?, string?, INoteModel?> MapNoteModelFromEntityList = CreateNoteModelFromEntityList;

        public static Func<INote, INoteModel, string?, INoteModel>? CreateNoteModelFromEntityHooksFull { get; set; }

        public static Func<INote, INoteModel, string?, INoteModel>? CreateNoteModelFromEntityHooksLite { get; set; }

        public static Func<INote, INoteModel, string?, INoteModel>? CreateNoteModelFromEntityHooksList { get; set; }

        public static Expression<Func<Note, AnonNote>>? PreBuiltNoteSQLSelectorFull { get; set; }

        public static Expression<Func<Note, AnonNote>>? PreBuiltNoteSQLSelectorLite { get; set; }

        public static Expression<Func<Note, AnonNote>>? PreBuiltNoteSQLSelectorList { get; set; }

        /// <summary>An <see cref="INoteModel"/> extension method that creates a(n) <see cref="Note"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Note"/> entity.</returns>
        public static INote CreateNoteEntity(
            this INoteModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<INoteModel, Note>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateNoteFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="INoteModel"/> extension method that updates a(n) <see cref="Note"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Note"/> entity.</returns>
        public static INote UpdateNoteFromModel(
            this INote entity,
            INoteModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Note Properties
            entity.Note1 = model.Note1;
            // Note's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenNoteSQLSelectorFull()
        {
            PreBuiltNoteSQLSelectorFull = x => x == null ? null! : new AnonNote
            {
                TypeID = x.TypeID,
                Type = ModelMapperForNoteType.PreBuiltNoteTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Note1 = x.Note1,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!),
                UpdatedByUserID = x.UpdatedByUserID,
                UpdatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.UpdatedByUser!),
                AccountID = x.AccountID,
                UserID = x.UserID,
                VendorID = x.VendorID,
                ManufacturerID = x.ManufacturerID,
                BrandID = x.BrandID,
                FranchiseID = x.FranchiseID,
                StoreID = x.StoreID,
                SalesGroupID = x.SalesGroupID,
                PurchaseOrderID = x.PurchaseOrderID,
                SalesOrderID = x.SalesOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                SalesQuoteID = x.SalesQuoteID,
                SampleRequestID = x.SampleRequestID,
                SalesReturnID = x.SalesReturnID,
                CartID = x.CartID,
                PurchaseOrderItemID = x.PurchaseOrderItemID,
                SalesOrderItemID = x.SalesOrderItemID,
                SalesInvoiceItemID = x.SalesInvoiceItemID,
                SalesQuoteItemID = x.SalesQuoteItemID,
                SampleRequestItemID = x.SampleRequestItemID,
                SalesReturnItemID = x.SalesReturnItemID,
                CartItemID = x.CartItemID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenNoteSQLSelectorLite()
        {
            PreBuiltNoteSQLSelectorLite = x => x == null ? null! : new AnonNote
            {
                TypeID = x.TypeID,
                Type = ModelMapperForNoteType.PreBuiltNoteTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Note1 = x.Note1,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!),
                UpdatedByUserID = x.UpdatedByUserID,
                UpdatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.UpdatedByUser!),
                AccountID = x.AccountID,
                UserID = x.UserID,
                VendorID = x.VendorID,
                ManufacturerID = x.ManufacturerID,
                BrandID = x.BrandID,
                FranchiseID = x.FranchiseID,
                StoreID = x.StoreID,
                SalesGroupID = x.SalesGroupID,
                PurchaseOrderID = x.PurchaseOrderID,
                SalesOrderID = x.SalesOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                SalesQuoteID = x.SalesQuoteID,
                SampleRequestID = x.SampleRequestID,
                SalesReturnID = x.SalesReturnID,
                CartID = x.CartID,
                PurchaseOrderItemID = x.PurchaseOrderItemID,
                SalesOrderItemID = x.SalesOrderItemID,
                SalesInvoiceItemID = x.SalesInvoiceItemID,
                SalesQuoteItemID = x.SalesQuoteItemID,
                SampleRequestItemID = x.SampleRequestItemID,
                SalesReturnItemID = x.SalesReturnItemID,
                CartItemID = x.CartItemID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenNoteSQLSelectorList()
        {
            PreBuiltNoteSQLSelectorList = x => x == null ? null! : new AnonNote
            {
                TypeID = x.TypeID,
                Type = ModelMapperForNoteType.PreBuiltNoteTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                Note1 = x.Note1,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!), // For Flattening Properties (List)
                UpdatedByUserID = x.UpdatedByUserID,
                UpdatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.UpdatedByUser!), // For Flattening Properties (List)
                AccountID = x.AccountID,
                UserID = x.UserID,
                VendorID = x.VendorID,
                ManufacturerID = x.ManufacturerID,
                BrandID = x.BrandID,
                FranchiseID = x.FranchiseID,
                StoreID = x.StoreID,
                SalesGroupID = x.SalesGroupID,
                PurchaseOrderID = x.PurchaseOrderID,
                SalesOrderID = x.SalesOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                SalesQuoteID = x.SalesQuoteID,
                SampleRequestID = x.SampleRequestID,
                SalesReturnID = x.SalesReturnID,
                CartID = x.CartID,
                PurchaseOrderItemID = x.PurchaseOrderItemID,
                SalesOrderItemID = x.SalesOrderItemID,
                SalesInvoiceItemID = x.SalesInvoiceItemID,
                SalesQuoteItemID = x.SalesQuoteItemID,
                SampleRequestItemID = x.SampleRequestItemID,
                SalesReturnItemID = x.SalesReturnItemID,
                CartItemID = x.CartItemID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                CreatedByUserContact = x.CreatedByUser == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser.Contact!), // For Flattening Properties
            };
        }

        public static IEnumerable<INoteModel> SelectFullNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltNoteSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<INoteModel> SelectLiteNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltNoteSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<INoteModel> SelectListNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltNoteSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityList(x, contextProfileName))!;
        }

        public static INoteModel? SelectFirstFullNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltNoteSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static INoteModel? SelectFirstListNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltNoteSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static INoteModel? SelectSingleFullNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltNoteSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static INoteModel? SelectSingleLiteNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltNoteSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static INoteModel? SelectSingleListNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltNoteSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateNoteModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<INoteModel> results, int totalPages, int totalCount) SelectFullNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltNoteSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateNoteModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<INoteModel> results, int totalPages, int totalCount) SelectLiteNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltNoteSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateNoteModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<INoteModel> results, int totalPages, int totalCount) SelectListNoteAndMapToNoteModel(
            this IQueryable<Note> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltNoteSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltNoteSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateNoteModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static INoteModel? CreateNoteModelFromEntityFull(this INote? entity, string? contextProfileName)
        {
            return CreateNoteModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static INoteModel? CreateNoteModelFromEntityLite(this INote? entity, string? contextProfileName)
        {
            return CreateNoteModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static INoteModel? CreateNoteModelFromEntityList(this INote? entity, string? contextProfileName)
        {
            return CreateNoteModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static INoteModel? CreateNoteModelFromEntity(
            this INote? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<INoteModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Note's Properties
                    // Note's Related Objects
                    model.CreatedByUser = ModelMapperForUser.CreateUserModelFromEntityLite(entity.CreatedByUser, contextProfileName);
                    model.UpdatedByUser = ModelMapperForUser.CreateUserModelFromEntityLite(entity.UpdatedByUser, contextProfileName);
                    // Note's Associated Objects
                    // Additional Mappings
                    if (CreateNoteModelFromEntityHooksFull != null) { model = CreateNoteModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Note's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForNoteType.CreateNoteTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Note's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Type = ModelMapperForNoteType.CreateNoteTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Note's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateNoteModelFromEntityHooksLite != null) { model = CreateNoteModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Note's Properties
                    model.Note1 = entity.Note1;
                    // Note's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CreatedByUserID = entity.CreatedByUserID;
                    model.CreatedByUserKey = entity.CreatedByUser?.CustomKey;
                    model.CreatedByUserContactFirstName = entity is AnonNote ? ((AnonNote)entity).CreatedByUserContact?.FirstName : entity.CreatedByUser?.Contact?.FirstName;
                    model.CreatedByUserContactLastName = entity is AnonNote ? ((AnonNote)entity).CreatedByUserContact?.LastName : entity.CreatedByUser?.Contact?.LastName;
                    model.TypeID = entity.TypeID;
                    model.TypeKey = entity.Type?.CustomKey;
                    model.TypeName = entity.Type?.Name;
                    model.TypeDisplayName = entity.Type?.DisplayName;
                    model.TypeTranslationKey = entity.Type?.TranslationKey;
                    model.TypeSortOrder = entity.Type?.SortOrder;
                    model.UpdatedByUserID = entity.UpdatedByUserID;
                    model.UpdatedByUserKey = entity.UpdatedByUser?.CustomKey;
                    // Note's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateNoteModelFromEntityHooksList != null) { model = CreateNoteModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
