// <autogenerated>
// <copyright file="Mapping.System.Setting.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the System section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForSetting
    {
        public sealed class AnonSetting : Setting
        {
        }

        public static readonly Func<Setting?, string?, ISettingModel?> MapSettingModelFromEntityFull = CreateSettingModelFromEntityFull;

        public static readonly Func<Setting?, string?, ISettingModel?> MapSettingModelFromEntityLite = CreateSettingModelFromEntityLite;

        public static readonly Func<Setting?, string?, ISettingModel?> MapSettingModelFromEntityList = CreateSettingModelFromEntityList;

        public static Func<ISetting, ISettingModel, string?, ISettingModel>? CreateSettingModelFromEntityHooksFull { get; set; }

        public static Func<ISetting, ISettingModel, string?, ISettingModel>? CreateSettingModelFromEntityHooksLite { get; set; }

        public static Func<ISetting, ISettingModel, string?, ISettingModel>? CreateSettingModelFromEntityHooksList { get; set; }

        public static Expression<Func<Setting, AnonSetting>>? PreBuiltSettingSQLSelectorFull { get; set; }

        public static Expression<Func<Setting, AnonSetting>>? PreBuiltSettingSQLSelectorLite { get; set; }

        public static Expression<Func<Setting, AnonSetting>>? PreBuiltSettingSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISettingModel"/> extension method that creates a(n) <see cref="Setting"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Setting"/> entity.</returns>
        public static ISetting CreateSettingEntity(
            this ISettingModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ISettingModel, Setting>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateSettingFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISettingModel"/> extension method that updates a(n) <see cref="Setting"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Setting"/> entity.</returns>
        public static ISetting UpdateSettingFromModel(
            this ISetting entity,
            ISettingModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Setting Properties
            entity.Value = model.Value;
            // Setting's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenSettingSQLSelectorFull()
        {
            PreBuiltSettingSQLSelectorFull = x => x == null ? null! : new AnonSetting
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSettingType.PreBuiltSettingTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Value = x.Value,
                SettingGroupID = x.SettingGroupID,
                SettingGroup = ModelMapperForSettingGroup.PreBuiltSettingGroupSQLSelectorList.Expand().Compile().Invoke(x.SettingGroup!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSettingSQLSelectorLite()
        {
            PreBuiltSettingSQLSelectorLite = x => x == null ? null! : new AnonSetting
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSettingType.PreBuiltSettingTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Value = x.Value,
                SettingGroupID = x.SettingGroupID,
                SettingGroup = ModelMapperForSettingGroup.PreBuiltSettingGroupSQLSelectorList.Expand().Compile().Invoke(x.SettingGroup!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSettingSQLSelectorList()
        {
            PreBuiltSettingSQLSelectorList = x => x == null ? null! : new AnonSetting
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSettingType.PreBuiltSettingTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                Value = x.Value,
                SettingGroupID = x.SettingGroupID,
                SettingGroup = ModelMapperForSettingGroup.PreBuiltSettingGroupSQLSelectorList.Expand().Compile().Invoke(x.SettingGroup!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ISettingModel> SelectFullSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSettingSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISettingModel> SelectLiteSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSettingSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISettingModel> SelectListSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSettingSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityList(x, contextProfileName))!;
        }

        public static ISettingModel? SelectFirstFullSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSettingSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISettingModel? SelectFirstListSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSettingSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISettingModel? SelectSingleFullSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSettingSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISettingModel? SelectSingleLiteSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSettingSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISettingModel? SelectSingleListSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSettingSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSettingModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISettingModel> results, int totalPages, int totalCount) SelectFullSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSettingSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateSettingModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISettingModel> results, int totalPages, int totalCount) SelectLiteSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSettingSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateSettingModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISettingModel> results, int totalPages, int totalCount) SelectListSettingAndMapToSettingModel(
            this IQueryable<Setting> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSettingSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSettingSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateSettingModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISettingModel? CreateSettingModelFromEntityFull(this ISetting? entity, string? contextProfileName)
        {
            return CreateSettingModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISettingModel? CreateSettingModelFromEntityLite(this ISetting? entity, string? contextProfileName)
        {
            return CreateSettingModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISettingModel? CreateSettingModelFromEntityList(this ISetting? entity, string? contextProfileName)
        {
            return CreateSettingModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISettingModel? CreateSettingModelFromEntity(
            this ISetting? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ISettingModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Setting's Properties
                    // Setting's Related Objects
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    // Setting's Associated Objects
                    // Additional Mappings
                    if (CreateSettingModelFromEntityHooksFull != null) { model = CreateSettingModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Setting's Properties
                    // Setting's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Setting's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSettingModelFromEntityHooksLite != null) { model = CreateSettingModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForSettingType.CreateSettingTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Setting's Properties
                    model.Value = entity.Value;
                    // Setting's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.SettingGroupID = entity.SettingGroupID;
                    model.SettingGroup = ModelMapperForSettingGroup.CreateSettingGroupModelFromEntityLite(entity.SettingGroup, contextProfileName);
                    model.SettingGroupKey = entity.SettingGroup?.CustomKey;
                    model.SettingGroupName = entity.SettingGroup?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    // Setting's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSettingModelFromEntityHooksList != null) { model = CreateSettingModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
