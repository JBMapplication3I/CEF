// <autogenerated>
// <copyright file="Mapping.Hangfire.ScheduledJobConfiguration.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Hangfire section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForScheduledJobConfiguration
    {
        public sealed class AnonScheduledJobConfiguration : ScheduledJobConfiguration
        {
            public new IEnumerable<ScheduledJobConfigurationSetting>? ScheduledJobConfigurationSettings { get; set; }
        }

        public static readonly Func<ScheduledJobConfiguration?, string?, IScheduledJobConfigurationModel?> MapScheduledJobConfigurationModelFromEntityFull = CreateScheduledJobConfigurationModelFromEntityFull;

        public static readonly Func<ScheduledJobConfiguration?, string?, IScheduledJobConfigurationModel?> MapScheduledJobConfigurationModelFromEntityLite = CreateScheduledJobConfigurationModelFromEntityLite;

        public static readonly Func<ScheduledJobConfiguration?, string?, IScheduledJobConfigurationModel?> MapScheduledJobConfigurationModelFromEntityList = CreateScheduledJobConfigurationModelFromEntityList;

        public static Func<IScheduledJobConfiguration, IScheduledJobConfigurationModel, string?, IScheduledJobConfigurationModel>? CreateScheduledJobConfigurationModelFromEntityHooksFull { get; set; }

        public static Func<IScheduledJobConfiguration, IScheduledJobConfigurationModel, string?, IScheduledJobConfigurationModel>? CreateScheduledJobConfigurationModelFromEntityHooksLite { get; set; }

        public static Func<IScheduledJobConfiguration, IScheduledJobConfigurationModel, string?, IScheduledJobConfigurationModel>? CreateScheduledJobConfigurationModelFromEntityHooksList { get; set; }

        public static Expression<Func<ScheduledJobConfiguration, AnonScheduledJobConfiguration>>? PreBuiltScheduledJobConfigurationSQLSelectorFull { get; set; }

        public static Expression<Func<ScheduledJobConfiguration, AnonScheduledJobConfiguration>>? PreBuiltScheduledJobConfigurationSQLSelectorLite { get; set; }

        public static Expression<Func<ScheduledJobConfiguration, AnonScheduledJobConfiguration>>? PreBuiltScheduledJobConfigurationSQLSelectorList { get; set; }

        /// <summary>An <see cref="IScheduledJobConfigurationModel"/> extension method that creates a(n) <see cref="ScheduledJobConfiguration"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ScheduledJobConfiguration"/> entity.</returns>
        public static IScheduledJobConfiguration CreateScheduledJobConfigurationEntity(
            this IScheduledJobConfigurationModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IScheduledJobConfigurationModel, ScheduledJobConfiguration>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateScheduledJobConfigurationFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IScheduledJobConfigurationModel"/> extension method that updates a(n) <see cref="ScheduledJobConfiguration"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ScheduledJobConfiguration"/> entity.</returns>
        public static IScheduledJobConfiguration UpdateScheduledJobConfigurationFromModel(
            this IScheduledJobConfiguration entity,
            IScheduledJobConfigurationModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ScheduledJobConfiguration's Related Objects
            // ScheduledJobConfiguration's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenScheduledJobConfigurationSQLSelectorFull()
        {
            PreBuiltScheduledJobConfigurationSQLSelectorFull = x => x == null ? null! : new AnonScheduledJobConfiguration
            {
                NotificationTemplateID = x.NotificationTemplateID,
                NotificationTemplate = ModelMapperForEmailTemplate.PreBuiltEmailTemplateSQLSelectorList.Expand().Compile().Invoke(x.NotificationTemplate!),
                ScheduledJobConfigurationSettings = x.ScheduledJobConfigurationSettings!.Where(y => y.Active).Select(ModelMapperForScheduledJobConfigurationSetting.PreBuiltScheduledJobConfigurationSettingSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenScheduledJobConfigurationSQLSelectorLite()
        {
            PreBuiltScheduledJobConfigurationSQLSelectorLite = x => x == null ? null! : new AnonScheduledJobConfiguration
            {
                NotificationTemplateID = x.NotificationTemplateID,
                NotificationTemplate = ModelMapperForEmailTemplate.PreBuiltEmailTemplateSQLSelectorList.Expand().Compile().Invoke(x.NotificationTemplate!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenScheduledJobConfigurationSQLSelectorList()
        {
            PreBuiltScheduledJobConfigurationSQLSelectorList = x => x == null ? null! : new AnonScheduledJobConfiguration
            {
                NotificationTemplateID = x.NotificationTemplateID,
                NotificationTemplate = ModelMapperForEmailTemplate.PreBuiltEmailTemplateSQLSelectorList.Expand().Compile().Invoke(x.NotificationTemplate!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IScheduledJobConfigurationModel> SelectFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IScheduledJobConfigurationModel> SelectLiteScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IScheduledJobConfigurationModel> SelectListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityList(x, contextProfileName))!;
        }

        public static IScheduledJobConfigurationModel? SelectFirstFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IScheduledJobConfigurationModel? SelectFirstListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IScheduledJobConfigurationModel? SelectSingleFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IScheduledJobConfigurationModel? SelectSingleLiteScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IScheduledJobConfigurationModel? SelectSingleListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScheduledJobConfigurationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateScheduledJobConfigurationModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IScheduledJobConfigurationModel> results, int totalPages, int totalCount) SelectFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltScheduledJobConfigurationSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateScheduledJobConfigurationModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IScheduledJobConfigurationModel> results, int totalPages, int totalCount) SelectLiteScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltScheduledJobConfigurationSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateScheduledJobConfigurationModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IScheduledJobConfigurationModel> results, int totalPages, int totalCount) SelectListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(
            this IQueryable<ScheduledJobConfiguration> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScheduledJobConfigurationSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltScheduledJobConfigurationSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateScheduledJobConfigurationModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IScheduledJobConfigurationModel? CreateScheduledJobConfigurationModelFromEntityFull(this IScheduledJobConfiguration? entity, string? contextProfileName)
        {
            return CreateScheduledJobConfigurationModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IScheduledJobConfigurationModel? CreateScheduledJobConfigurationModelFromEntityLite(this IScheduledJobConfiguration? entity, string? contextProfileName)
        {
            return CreateScheduledJobConfigurationModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IScheduledJobConfigurationModel? CreateScheduledJobConfigurationModelFromEntityList(this IScheduledJobConfiguration? entity, string? contextProfileName)
        {
            return CreateScheduledJobConfigurationModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IScheduledJobConfigurationModel? CreateScheduledJobConfigurationModelFromEntity(
            this IScheduledJobConfiguration? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IScheduledJobConfigurationModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ScheduledJobConfiguration's Properties
                    // ScheduledJobConfiguration's Related Objects
                    model.NotificationTemplate = ModelMapperForEmailTemplate.CreateEmailTemplateModelFromEntityLite(entity.NotificationTemplate, contextProfileName);
                    // ScheduledJobConfiguration's Associated Objects
                    model.ScheduledJobConfigurationSettings = (entity is AnonScheduledJobConfiguration ? ((AnonScheduledJobConfiguration)entity).ScheduledJobConfigurationSettings : entity.ScheduledJobConfigurationSettings)?.Where(x => x.Active).Select(x => ModelMapperForScheduledJobConfigurationSetting.CreateScheduledJobConfigurationSettingModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateScheduledJobConfigurationModelFromEntityHooksFull != null) { model = CreateScheduledJobConfigurationModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ScheduledJobConfiguration's Properties
                    // ScheduledJobConfiguration's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ScheduledJobConfiguration's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateScheduledJobConfigurationModelFromEntityHooksLite != null) { model = CreateScheduledJobConfigurationModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ScheduledJobConfiguration's Properties
                    // ScheduledJobConfiguration's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.NotificationTemplateID = entity.NotificationTemplateID;
                    model.NotificationTemplateKey = entity.NotificationTemplate?.CustomKey;
                    model.NotificationTemplateName = entity.NotificationTemplate?.Name;
                    // ScheduledJobConfiguration's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateScheduledJobConfigurationModelFromEntityHooksList != null) { model = CreateScheduledJobConfigurationModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
