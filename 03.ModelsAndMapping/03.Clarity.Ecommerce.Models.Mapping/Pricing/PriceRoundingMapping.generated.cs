// <autogenerated>
// <copyright file="Mapping.Pricing.PriceRounding.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Pricing section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPriceRounding
    {
        public sealed class AnonPriceRounding : PriceRounding
        {
        }

        public static readonly Func<PriceRounding?, string?, IPriceRoundingModel?> MapPriceRoundingModelFromEntityFull = CreatePriceRoundingModelFromEntityFull;

        public static readonly Func<PriceRounding?, string?, IPriceRoundingModel?> MapPriceRoundingModelFromEntityLite = CreatePriceRoundingModelFromEntityLite;

        public static readonly Func<PriceRounding?, string?, IPriceRoundingModel?> MapPriceRoundingModelFromEntityList = CreatePriceRoundingModelFromEntityList;

        public static Func<IPriceRounding, IPriceRoundingModel, string?, IPriceRoundingModel>? CreatePriceRoundingModelFromEntityHooksFull { get; set; }

        public static Func<IPriceRounding, IPriceRoundingModel, string?, IPriceRoundingModel>? CreatePriceRoundingModelFromEntityHooksLite { get; set; }

        public static Func<IPriceRounding, IPriceRoundingModel, string?, IPriceRoundingModel>? CreatePriceRoundingModelFromEntityHooksList { get; set; }

        public static Expression<Func<PriceRounding, AnonPriceRounding>>? PreBuiltPriceRoundingSQLSelectorFull { get; set; }

        public static Expression<Func<PriceRounding, AnonPriceRounding>>? PreBuiltPriceRoundingSQLSelectorLite { get; set; }

        public static Expression<Func<PriceRounding, AnonPriceRounding>>? PreBuiltPriceRoundingSQLSelectorList { get; set; }

        /// <summary>An <see cref="IPriceRoundingModel"/> extension method that creates a(n) <see cref="PriceRounding"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="PriceRounding"/> entity.</returns>
        public static IPriceRounding CreatePriceRoundingEntity(
            this IPriceRoundingModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IPriceRoundingModel, PriceRounding>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePriceRoundingFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IPriceRoundingModel"/> extension method that updates a(n) <see cref="PriceRounding"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="PriceRounding"/> entity.</returns>
        public static IPriceRounding UpdatePriceRoundingFromModel(
            this IPriceRounding entity,
            IPriceRoundingModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // PriceRounding Properties
            entity.CurrencyKey = model.CurrencyKey;
            entity.PricePointKey = model.PricePointKey;
            entity.ProductKey = model.ProductKey;
            entity.RoundHow = model.RoundHow;
            entity.RoundingAmount = model.RoundingAmount;
            entity.RoundTo = model.RoundTo;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPriceRoundingSQLSelectorFull()
        {
            PreBuiltPriceRoundingSQLSelectorFull = x => x == null ? null! : new AnonPriceRounding
            {
                PricePointKey = x.PricePointKey,
                ProductKey = x.ProductKey,
                CurrencyKey = x.CurrencyKey,
                UnitOfMeasure = x.UnitOfMeasure,
                RoundHow = x.RoundHow,
                RoundTo = x.RoundTo,
                RoundingAmount = x.RoundingAmount,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPriceRoundingSQLSelectorLite()
        {
            PreBuiltPriceRoundingSQLSelectorLite = x => x == null ? null! : new AnonPriceRounding
            {
                PricePointKey = x.PricePointKey,
                ProductKey = x.ProductKey,
                CurrencyKey = x.CurrencyKey,
                UnitOfMeasure = x.UnitOfMeasure,
                RoundHow = x.RoundHow,
                RoundTo = x.RoundTo,
                RoundingAmount = x.RoundingAmount,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPriceRoundingSQLSelectorList()
        {
            PreBuiltPriceRoundingSQLSelectorList = x => x == null ? null! : new AnonPriceRounding
            {
                PricePointKey = x.PricePointKey,
                ProductKey = x.ProductKey,
                CurrencyKey = x.CurrencyKey,
                UnitOfMeasure = x.UnitOfMeasure,
                RoundHow = x.RoundHow,
                RoundTo = x.RoundTo,
                RoundingAmount = x.RoundingAmount,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IPriceRoundingModel> SelectFullPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRoundingSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IPriceRoundingModel> SelectLitePriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRoundingSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IPriceRoundingModel> SelectListPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRoundingSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityList(x, contextProfileName))!;
        }

        public static IPriceRoundingModel? SelectFirstFullPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRoundingSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPriceRoundingModel? SelectFirstListPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRoundingSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPriceRoundingModel? SelectSingleFullPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRoundingSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPriceRoundingModel? SelectSingleLitePriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRoundingSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPriceRoundingModel? SelectSingleListPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRoundingSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRoundingModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IPriceRoundingModel> results, int totalPages, int totalCount) SelectFullPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRoundingSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRoundingModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPriceRoundingModel> results, int totalPages, int totalCount) SelectLitePriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRoundingSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRoundingModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPriceRoundingModel> results, int totalPages, int totalCount) SelectListPriceRoundingAndMapToPriceRoundingModel(
            this IQueryable<PriceRounding> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRoundingSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRoundingSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRoundingModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IPriceRoundingModel? CreatePriceRoundingModelFromEntityFull(this IPriceRounding? entity, string? contextProfileName)
        {
            return CreatePriceRoundingModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IPriceRoundingModel? CreatePriceRoundingModelFromEntityLite(this IPriceRounding? entity, string? contextProfileName)
        {
            return CreatePriceRoundingModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IPriceRoundingModel? CreatePriceRoundingModelFromEntityList(this IPriceRounding? entity, string? contextProfileName)
        {
            return CreatePriceRoundingModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IPriceRoundingModel? CreatePriceRoundingModelFromEntity(
            this IPriceRounding? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IPriceRoundingModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PriceRounding's Properties
                    // PriceRounding's Related Objects
                    // PriceRounding's Associated Objects
                    // Additional Mappings
                    if (CreatePriceRoundingModelFromEntityHooksFull != null) { model = CreatePriceRoundingModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PriceRounding's Properties
                    // PriceRounding's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PriceRounding's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePriceRoundingModelFromEntityHooksLite != null) { model = CreatePriceRoundingModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // PriceRounding's Properties
                    model.CurrencyKey = entity.CurrencyKey;
                    model.PricePointKey = entity.PricePointKey;
                    model.ProductKey = entity.ProductKey;
                    model.RoundHow = entity.RoundHow;
                    model.RoundingAmount = entity.RoundingAmount;
                    model.RoundTo = entity.RoundTo;
                    model.UnitOfMeasure = entity.UnitOfMeasure;
                    // PriceRounding's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PriceRounding's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePriceRoundingModelFromEntityHooksList != null) { model = CreatePriceRoundingModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
