// <autogenerated>
// <copyright file="Mapping.Pricing.PriceRuleUserRole.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Pricing section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPriceRuleUserRole
    {
        public sealed class AnonPriceRuleUserRole : PriceRuleUserRole
        {
        }

        public static readonly Func<PriceRuleUserRole?, string?, IPriceRuleUserRoleModel?> MapPriceRuleUserRoleModelFromEntityFull = CreatePriceRuleUserRoleModelFromEntityFull;

        public static readonly Func<PriceRuleUserRole?, string?, IPriceRuleUserRoleModel?> MapPriceRuleUserRoleModelFromEntityLite = CreatePriceRuleUserRoleModelFromEntityLite;

        public static readonly Func<PriceRuleUserRole?, string?, IPriceRuleUserRoleModel?> MapPriceRuleUserRoleModelFromEntityList = CreatePriceRuleUserRoleModelFromEntityList;

        public static Func<IPriceRuleUserRole, IPriceRuleUserRoleModel, string?, IPriceRuleUserRoleModel>? CreatePriceRuleUserRoleModelFromEntityHooksFull { get; set; }

        public static Func<IPriceRuleUserRole, IPriceRuleUserRoleModel, string?, IPriceRuleUserRoleModel>? CreatePriceRuleUserRoleModelFromEntityHooksLite { get; set; }

        public static Func<IPriceRuleUserRole, IPriceRuleUserRoleModel, string?, IPriceRuleUserRoleModel>? CreatePriceRuleUserRoleModelFromEntityHooksList { get; set; }

        public static Expression<Func<PriceRuleUserRole, AnonPriceRuleUserRole>>? PreBuiltPriceRuleUserRoleSQLSelectorFull { get; set; }

        public static Expression<Func<PriceRuleUserRole, AnonPriceRuleUserRole>>? PreBuiltPriceRuleUserRoleSQLSelectorLite { get; set; }

        public static Expression<Func<PriceRuleUserRole, AnonPriceRuleUserRole>>? PreBuiltPriceRuleUserRoleSQLSelectorList { get; set; }

        /// <summary>An <see cref="IPriceRuleUserRoleModel"/> extension method that creates a(n) <see cref="PriceRuleUserRole"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="PriceRuleUserRole"/> entity.</returns>
        public static IPriceRuleUserRole CreatePriceRuleUserRoleEntity(
            this IPriceRuleUserRoleModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IPriceRuleUserRoleModel, PriceRuleUserRole>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePriceRuleUserRoleFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IPriceRuleUserRoleModel"/> extension method that updates a(n) <see cref="PriceRuleUserRole"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="PriceRuleUserRole"/> entity.</returns>
        public static IPriceRuleUserRole UpdatePriceRuleUserRoleFromModel(
            this IPriceRuleUserRole entity,
            IPriceRuleUserRoleModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // PriceRuleUserRole Properties
            entity.RoleName = model.RoleName;
            // PriceRuleUserRole's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPriceRuleUserRoleSQLSelectorFull()
        {
            PreBuiltPriceRuleUserRoleSQLSelectorFull = x => x == null ? null! : new AnonPriceRuleUserRole
            {
                RoleName = x.RoleName,
                PriceRuleID = x.PriceRuleID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPriceRuleUserRoleSQLSelectorLite()
        {
            PreBuiltPriceRuleUserRoleSQLSelectorLite = x => x == null ? null! : new AnonPriceRuleUserRole
            {
                RoleName = x.RoleName,
                PriceRuleID = x.PriceRuleID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPriceRuleUserRoleSQLSelectorList()
        {
            PreBuiltPriceRuleUserRoleSQLSelectorList = x => x == null ? null! : new AnonPriceRuleUserRole
            {
                RoleName = x.RoleName,
                PriceRuleID = x.PriceRuleID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IPriceRuleUserRoleModel> SelectFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IPriceRuleUserRoleModel> SelectLitePriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IPriceRuleUserRoleModel> SelectListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityList(x, contextProfileName))!;
        }

        public static IPriceRuleUserRoleModel? SelectFirstFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPriceRuleUserRoleModel? SelectFirstListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPriceRuleUserRoleModel? SelectSingleFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPriceRuleUserRoleModel? SelectSingleLitePriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPriceRuleUserRoleModel? SelectSingleListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleUserRoleSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleUserRoleModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IPriceRuleUserRoleModel> results, int totalPages, int totalCount) SelectFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRuleUserRoleSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRuleUserRoleModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPriceRuleUserRoleModel> results, int totalPages, int totalCount) SelectLitePriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRuleUserRoleSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRuleUserRoleModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPriceRuleUserRoleModel> results, int totalPages, int totalCount) SelectListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(
            this IQueryable<PriceRuleUserRole> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleUserRoleSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRuleUserRoleSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRuleUserRoleModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IPriceRuleUserRoleModel? CreatePriceRuleUserRoleModelFromEntityFull(this IPriceRuleUserRole? entity, string? contextProfileName)
        {
            return CreatePriceRuleUserRoleModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IPriceRuleUserRoleModel? CreatePriceRuleUserRoleModelFromEntityLite(this IPriceRuleUserRole? entity, string? contextProfileName)
        {
            return CreatePriceRuleUserRoleModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IPriceRuleUserRoleModel? CreatePriceRuleUserRoleModelFromEntityList(this IPriceRuleUserRole? entity, string? contextProfileName)
        {
            return CreatePriceRuleUserRoleModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IPriceRuleUserRoleModel? CreatePriceRuleUserRoleModelFromEntity(
            this IPriceRuleUserRole? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IPriceRuleUserRoleModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PriceRuleUserRole's Properties
                    // PriceRuleUserRole's Related Objects
                    // PriceRuleUserRole's Associated Objects
                    // Additional Mappings
                    if (CreatePriceRuleUserRoleModelFromEntityHooksFull != null) { model = CreatePriceRuleUserRoleModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PriceRuleUserRole's Properties
                    // PriceRuleUserRole's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PriceRuleUserRole's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePriceRuleUserRoleModelFromEntityHooksLite != null) { model = CreatePriceRuleUserRoleModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // PriceRuleUserRole's Properties
                    model.RoleName = entity.RoleName;
                    // PriceRuleUserRole's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PriceRuleUserRole's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePriceRuleUserRoleModelFromEntityHooksList != null) { model = CreatePriceRuleUserRoleModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
