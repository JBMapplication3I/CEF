// <autogenerated>
// <copyright file="Mapping.Pricing.PriceRule.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Pricing section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPriceRule
    {
        public sealed class AnonPriceRule : PriceRule
        {
            public new IEnumerable<PriceRuleAccount>? Accounts { get; set; }
            public new IEnumerable<PriceRuleAccountType>? PriceRuleAccountTypes { get; set; }
            public new IEnumerable<PriceRuleBrand>? Brands { get; set; }
            public new IEnumerable<PriceRuleCategory>? PriceRuleCategories { get; set; }
            public new IEnumerable<PriceRuleCountry>? PriceRuleCountries { get; set; }
            public new IEnumerable<PriceRuleFranchise>? Franchises { get; set; }
            public new IEnumerable<PriceRuleManufacturer>? Manufacturers { get; set; }
            public new IEnumerable<PriceRuleProduct>? Products { get; set; }
            public new IEnumerable<PriceRuleProductType>? PriceRuleProductTypes { get; set; }
            public new IEnumerable<PriceRuleStore>? Stores { get; set; }
            public new IEnumerable<PriceRuleUserRole>? PriceRuleUserRoles { get; set; }
            public new IEnumerable<PriceRuleVendor>? Vendors { get; set; }
        }

        public static readonly Func<PriceRule?, string?, IPriceRuleModel?> MapPriceRuleModelFromEntityFull = CreatePriceRuleModelFromEntityFull;

        public static readonly Func<PriceRule?, string?, IPriceRuleModel?> MapPriceRuleModelFromEntityLite = CreatePriceRuleModelFromEntityLite;

        public static readonly Func<PriceRule?, string?, IPriceRuleModel?> MapPriceRuleModelFromEntityList = CreatePriceRuleModelFromEntityList;

        public static Func<IPriceRule, IPriceRuleModel, string?, IPriceRuleModel>? CreatePriceRuleModelFromEntityHooksFull { get; set; }

        public static Func<IPriceRule, IPriceRuleModel, string?, IPriceRuleModel>? CreatePriceRuleModelFromEntityHooksLite { get; set; }

        public static Func<IPriceRule, IPriceRuleModel, string?, IPriceRuleModel>? CreatePriceRuleModelFromEntityHooksList { get; set; }

        public static Expression<Func<PriceRule, AnonPriceRule>>? PreBuiltPriceRuleSQLSelectorFull { get; set; }

        public static Expression<Func<PriceRule, AnonPriceRule>>? PreBuiltPriceRuleSQLSelectorLite { get; set; }

        public static Expression<Func<PriceRule, AnonPriceRule>>? PreBuiltPriceRuleSQLSelectorList { get; set; }

        /// <summary>An <see cref="IPriceRuleModel"/> extension method that creates a(n) <see cref="PriceRule"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="PriceRule"/> entity.</returns>
        public static IPriceRule CreatePriceRuleEntity(
            this IPriceRuleModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IPriceRuleModel, PriceRule>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePriceRuleFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IPriceRuleModel"/> extension method that updates a(n) <see cref="PriceRule"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="PriceRule"/> entity.</returns>
        public static IPriceRule UpdatePriceRuleFromModel(
            this IPriceRule entity,
            IPriceRuleModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // PriceRule Properties
            entity.EndDate = model.EndDate;
            entity.IsExclusive = model.IsExclusive;
            entity.IsMarkup = model.IsMarkup;
            entity.IsOnlyForAnonymousUsers = model.IsOnlyForAnonymousUsers;
            entity.IsPercentage = model.IsPercentage;
            entity.MaxQuantity = model.MaxQuantity;
            entity.MinQuantity = model.MinQuantity;
            entity.PriceAdjustment = model.PriceAdjustment;
            entity.Priority = model.Priority;
            entity.StartDate = model.StartDate;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            entity.UsePriceBase = model.UsePriceBase;
            // PriceRule's Related Objects
            // PriceRule's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPriceRuleSQLSelectorFull()
        {
            PreBuiltPriceRuleSQLSelectorFull = x => x == null ? null! : new AnonPriceRule
            {
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                UnitOfMeasure = x.UnitOfMeasure,
                PriceAdjustment = x.PriceAdjustment,
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                IsPercentage = x.IsPercentage,
                IsMarkup = x.IsMarkup,
                UsePriceBase = x.UsePriceBase,
                IsExclusive = x.IsExclusive,
                IsOnlyForAnonymousUsers = x.IsOnlyForAnonymousUsers,
                Priority = x.Priority,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                Products = x.Products!.Where(y => y.Active).Select(ModelMapperForPriceRuleProduct.PreBuiltPriceRuleProductSQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForPriceRuleBrand.PreBuiltPriceRuleBrandSQLSelectorList.Expand().Compile()).ToList(),
                Franchises = x.Franchises!.Where(y => y.Active).Select(ModelMapperForPriceRuleFranchise.PreBuiltPriceRuleFranchiseSQLSelectorList.Expand().Compile()).ToList(),
                Stores = x.Stores!.Where(y => y.Active).Select(ModelMapperForPriceRuleStore.PreBuiltPriceRuleStoreSQLSelectorList.Expand().Compile()).ToList(),
                Accounts = x.Accounts!.Where(y => y.Active).Select(ModelMapperForPriceRuleAccount.PreBuiltPriceRuleAccountSQLSelectorList.Expand().Compile()).ToList(),
                Vendors = x.Vendors!.Where(y => y.Active).Select(ModelMapperForPriceRuleVendor.PreBuiltPriceRuleVendorSQLSelectorList.Expand().Compile()).ToList(),
                Manufacturers = x.Manufacturers!.Where(y => y.Active).Select(ModelMapperForPriceRuleManufacturer.PreBuiltPriceRuleManufacturerSQLSelectorList.Expand().Compile()).ToList(),
                PriceRuleCountries = x.PriceRuleCountries!.Where(y => y.Active).Select(ModelMapperForPriceRuleCountry.PreBuiltPriceRuleCountrySQLSelectorList.Expand().Compile()).ToList(),
                PriceRuleUserRoles = x.PriceRuleUserRoles!.Where(y => y.Active).Select(ModelMapperForPriceRuleUserRole.PreBuiltPriceRuleUserRoleSQLSelectorList.Expand().Compile()).ToList(),
                PriceRuleCategories = x.PriceRuleCategories!.Where(y => y.Active).Select(ModelMapperForPriceRuleCategory.PreBuiltPriceRuleCategorySQLSelectorList.Expand().Compile()).ToList(),
                PriceRuleAccountTypes = x.PriceRuleAccountTypes!.Where(y => y.Active).Select(ModelMapperForPriceRuleAccountType.PreBuiltPriceRuleAccountTypeSQLSelectorList.Expand().Compile()).ToList(),
                PriceRuleProductTypes = x.PriceRuleProductTypes!.Where(y => y.Active).Select(ModelMapperForPriceRuleProductType.PreBuiltPriceRuleProductTypeSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPriceRuleSQLSelectorLite()
        {
            PreBuiltPriceRuleSQLSelectorLite = x => x == null ? null! : new AnonPriceRule
            {
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                UnitOfMeasure = x.UnitOfMeasure,
                PriceAdjustment = x.PriceAdjustment,
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                IsPercentage = x.IsPercentage,
                IsMarkup = x.IsMarkup,
                UsePriceBase = x.UsePriceBase,
                IsExclusive = x.IsExclusive,
                IsOnlyForAnonymousUsers = x.IsOnlyForAnonymousUsers,
                Priority = x.Priority,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPriceRuleSQLSelectorList()
        {
            PreBuiltPriceRuleSQLSelectorList = x => x == null ? null! : new AnonPriceRule
            {
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                UnitOfMeasure = x.UnitOfMeasure,
                PriceAdjustment = x.PriceAdjustment,
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                IsPercentage = x.IsPercentage,
                IsMarkup = x.IsMarkup,
                UsePriceBase = x.UsePriceBase,
                IsExclusive = x.IsExclusive,
                IsOnlyForAnonymousUsers = x.IsOnlyForAnonymousUsers,
                Priority = x.Priority,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IPriceRuleModel> SelectFullPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRuleSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IPriceRuleModel> SelectLitePriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRuleSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IPriceRuleModel> SelectListPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPriceRuleSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityList(x, contextProfileName))!;
        }

        public static IPriceRuleModel? SelectFirstFullPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPriceRuleModel? SelectFirstListPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPriceRuleModel? SelectSingleFullPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPriceRuleModel? SelectSingleLitePriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPriceRuleModel? SelectSingleListPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPriceRuleSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePriceRuleModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IPriceRuleModel> results, int totalPages, int totalCount) SelectFullPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRuleSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRuleModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPriceRuleModel> results, int totalPages, int totalCount) SelectLitePriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRuleSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRuleModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPriceRuleModel> results, int totalPages, int totalCount) SelectListPriceRuleAndMapToPriceRuleModel(
            this IQueryable<PriceRule> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPriceRuleSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPriceRuleSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePriceRuleModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IPriceRuleModel? CreatePriceRuleModelFromEntityFull(this IPriceRule? entity, string? contextProfileName)
        {
            return CreatePriceRuleModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IPriceRuleModel? CreatePriceRuleModelFromEntityLite(this IPriceRule? entity, string? contextProfileName)
        {
            return CreatePriceRuleModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IPriceRuleModel? CreatePriceRuleModelFromEntityList(this IPriceRule? entity, string? contextProfileName)
        {
            return CreatePriceRuleModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IPriceRuleModel? CreatePriceRuleModelFromEntity(
            this IPriceRule? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IPriceRuleModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PriceRule's Properties
                    // PriceRule's Related Objects
                    model.Currency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.Currency, contextProfileName);
                    // PriceRule's Associated Objects
                    model.Accounts = (entity is AnonPriceRule ? ((AnonPriceRule)entity).Accounts : entity.Accounts)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleAccount.CreatePriceRuleAccountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Brands = (entity is AnonPriceRule ? ((AnonPriceRule)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleBrand.CreatePriceRuleBrandModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Franchises = (entity is AnonPriceRule ? ((AnonPriceRule)entity).Franchises : entity.Franchises)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleFranchise.CreatePriceRuleFranchiseModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Manufacturers = (entity is AnonPriceRule ? ((AnonPriceRule)entity).Manufacturers : entity.Manufacturers)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleManufacturer.CreatePriceRuleManufacturerModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.PriceRuleAccountTypes = (entity is AnonPriceRule ? ((AnonPriceRule)entity).PriceRuleAccountTypes : entity.PriceRuleAccountTypes)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleAccountType.CreatePriceRuleAccountTypeModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.PriceRuleCategories = (entity is AnonPriceRule ? ((AnonPriceRule)entity).PriceRuleCategories : entity.PriceRuleCategories)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleCategory.CreatePriceRuleCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.PriceRuleCountries = (entity is AnonPriceRule ? ((AnonPriceRule)entity).PriceRuleCountries : entity.PriceRuleCountries)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleCountry.CreatePriceRuleCountryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.PriceRuleProductTypes = (entity is AnonPriceRule ? ((AnonPriceRule)entity).PriceRuleProductTypes : entity.PriceRuleProductTypes)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleProductType.CreatePriceRuleProductTypeModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.PriceRuleUserRoles = (entity is AnonPriceRule ? ((AnonPriceRule)entity).PriceRuleUserRoles : entity.PriceRuleUserRoles)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleUserRole.CreatePriceRuleUserRoleModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Products = (entity is AnonPriceRule ? ((AnonPriceRule)entity).Products : entity.Products)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleProduct.CreatePriceRuleProductModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Stores = (entity is AnonPriceRule ? ((AnonPriceRule)entity).Stores : entity.Stores)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleStore.CreatePriceRuleStoreModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Vendors = (entity is AnonPriceRule ? ((AnonPriceRule)entity).Vendors : entity.Vendors)?.Where(x => x.Active).Select(x => ModelMapperForPriceRuleVendor.CreatePriceRuleVendorModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreatePriceRuleModelFromEntityHooksFull != null) { model = CreatePriceRuleModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PriceRule's Properties
                    // PriceRule's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PriceRule's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePriceRuleModelFromEntityHooksLite != null) { model = CreatePriceRuleModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // PriceRule's Properties
                    model.EndDate = entity.EndDate;
                    model.IsExclusive = entity.IsExclusive;
                    model.IsMarkup = entity.IsMarkup;
                    model.IsOnlyForAnonymousUsers = entity.IsOnlyForAnonymousUsers;
                    model.IsPercentage = entity.IsPercentage;
                    model.MaxQuantity = entity.MaxQuantity;
                    model.MinQuantity = entity.MinQuantity;
                    model.PriceAdjustment = entity.PriceAdjustment;
                    model.Priority = entity.Priority;
                    model.StartDate = entity.StartDate;
                    model.UnitOfMeasure = entity.UnitOfMeasure;
                    model.UsePriceBase = entity.UsePriceBase;
                    // PriceRule's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CurrencyID = entity.CurrencyID;
                    model.CurrencyKey = entity.Currency?.CustomKey;
                    model.CurrencyName = entity.Currency?.Name;
                    // PriceRule's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePriceRuleModelFromEntityHooksList != null) { model = CreatePriceRuleModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
