// <autogenerated>
// <copyright file="Mapping.Ordering.SalesOrder.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Ordering section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForSalesOrder
    {
        public sealed class AnonSalesOrder : SalesOrder
        {
            public new IEnumerable<AppliedSalesOrderDiscount>? Discounts { get; set; }
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<RateQuote>? RateQuotes { get; set; }
            public new IEnumerable<SalesOrderContact>? Contacts { get; set; }
            public new IEnumerable<SalesOrderFile>? StoredFiles { get; set; }
            public new IEnumerable<SalesOrderItem>? SalesItems { get; set; }
            public new IEnumerable<SalesOrderPayment>? SalesOrderPayments { get; set; }
            public new IEnumerable<SalesOrderPurchaseOrder>? AssociatedPurchaseOrders { get; set; }
            public new IEnumerable<SalesOrderSalesInvoice>? AssociatedSalesInvoices { get; set; }
            public new IEnumerable<SalesQuoteSalesOrder>? AssociatedSalesQuotes { get; set; }
            public new IEnumerable<SalesReturnSalesOrder>? AssociatedSalesReturns { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<SalesOrder?, string?, ISalesOrderModel?> MapSalesOrderModelFromEntityFull = CreateSalesOrderModelFromEntityFull;

        public static readonly Func<SalesOrder?, string?, ISalesOrderModel?> MapSalesOrderModelFromEntityLite = CreateSalesOrderModelFromEntityLite;

        public static readonly Func<SalesOrder?, string?, ISalesOrderModel?> MapSalesOrderModelFromEntityList = CreateSalesOrderModelFromEntityList;

        public static Func<ISalesOrder, ISalesOrderModel, string?, ISalesOrderModel>? CreateSalesOrderModelFromEntityHooksFull { get; set; }

        public static Func<ISalesOrder, ISalesOrderModel, string?, ISalesOrderModel>? CreateSalesOrderModelFromEntityHooksLite { get; set; }

        public static Func<ISalesOrder, ISalesOrderModel, string?, ISalesOrderModel>? CreateSalesOrderModelFromEntityHooksList { get; set; }

        public static Expression<Func<SalesOrder, AnonSalesOrder>>? PreBuiltSalesOrderSQLSelectorFull { get; set; }

        public static Expression<Func<SalesOrder, AnonSalesOrder>>? PreBuiltSalesOrderSQLSelectorLite { get; set; }

        public static Expression<Func<SalesOrder, AnonSalesOrder>>? PreBuiltSalesOrderSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISalesOrderModel"/> extension method that creates a(n) <see cref="SalesOrder"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="SalesOrder"/> entity.</returns>
        public static ISalesOrder CreateSalesOrderEntity(
            this ISalesOrderModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ISalesOrderModel, SalesOrder>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateSalesOrderFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISalesOrderModel"/> extension method that updates a(n) <see cref="SalesOrder"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="SalesOrder"/> entity.</returns>
        public static ISalesOrder UpdateSalesOrderFromModel(
            this ISalesOrder entity,
            ISalesOrderModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapSalesCollectionBaseModelPropertiesToEntity<ISalesOrderModel,
                    ISalesOrder,
                    SalesOrder,
                    SalesOrderStatus,
                    SalesOrderType,
                    SalesOrderItem,
                    AppliedSalesOrderDiscount,
                    SalesOrderState,
                    SalesOrderFile,
                    SalesOrderContact,
                    SalesOrderEvent,
                    SalesOrderEventType>(Contract.RequiresNotNull(model));
            // SalesOrder Properties
            entity.ActualShipDate = model.ActualShipDate;
            entity.BalanceDue = model.BalanceDue;
            entity.OrderApprovedDate = model.OrderApprovedDate;
            entity.OrderCommitmentDate = model.OrderCommitmentDate;
            entity.PaymentTransactionID = model.PaymentTransactionID;
            entity.PurchaseOrderNumber = model.PurchaseOrderNumber;
            entity.RequestedShipDate = model.RequestedShipDate;
            entity.RequiredShipDate = model.RequiredShipDate;
            entity.TaxTransactionID = model.TaxTransactionID;
            entity.TrackingNumber = model.TrackingNumber;
            // SalesOrder's Related Objects
            // SalesOrder's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenSalesOrderSQLSelectorFull()
        {
            PreBuiltSalesOrderSQLSelectorFull = x => x == null ? null! : new AnonSalesOrder
            {
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                PurchaseOrderNumber = x.PurchaseOrderNumber,
                BalanceDue = x.BalanceDue,
                TrackingNumber = x.TrackingNumber,
                PaymentTransactionID = x.PaymentTransactionID,
                TaxTransactionID = x.TaxTransactionID,
                OrderApprovedDate = x.OrderApprovedDate,
                OrderCommitmentDate = x.OrderCommitmentDate,
                RequiredShipDate = x.RequiredShipDate,
                RequestedShipDate = x.RequestedShipDate,
                ActualShipDate = x.ActualShipDate,
                SalesGroupAsMasterID = x.SalesGroupAsMasterID,
                SalesGroupAsMaster = ModelMapperForSalesGroup.PreBuiltSalesGroupSQLSelectorList.Expand().Compile().Invoke(x.SalesGroupAsMaster!),
                SalesGroupAsSubID = x.SalesGroupAsSubID,
                SalesGroupAsSub = ModelMapperForSalesGroup.PreBuiltSalesGroupSQLSelectorList.Expand().Compile().Invoke(x.SalesGroupAsSub!),
                InventoryLocationID = x.InventoryLocationID,
                InventoryLocation = ModelMapperForInventoryLocation.PreBuiltInventoryLocationSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocation!),
                SalesOrderPayments = x.SalesOrderPayments!.Where(y => y.Active).Select(ModelMapperForSalesOrderPayment.PreBuiltSalesOrderPaymentSQLSelectorList.Expand().Compile()).ToList(),
                AssociatedSalesQuotes = x.AssociatedSalesQuotes!.Where(y => y.Active).Select(ModelMapperForSalesQuoteSalesOrder.PreBuiltSalesQuoteSalesOrderSQLSelectorList.Expand().Compile()).ToList(),
                AssociatedSalesReturns = x.AssociatedSalesReturns!.Where(y => y.Active).Select(ModelMapperForSalesReturnSalesOrder.PreBuiltSalesReturnSalesOrderSQLSelectorList.Expand().Compile()).ToList(),
                AssociatedSalesInvoices = x.AssociatedSalesInvoices!.Where(y => y.Active).Select(ModelMapperForSalesOrderSalesInvoice.PreBuiltSalesOrderSalesInvoiceSQLSelectorList.Expand().Compile()).ToList(),
                AssociatedPurchaseOrders = x.AssociatedPurchaseOrders!.Where(y => y.Active).Select(ModelMapperForSalesOrderPurchaseOrder.PreBuiltSalesOrderPurchaseOrderSQLSelectorList.Expand().Compile()).ToList(),
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StatusID = x.StatusID,
                Status = ModelMapperForSalesOrderStatus.PreBuiltSalesOrderStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StateID = x.StateID,
                State = ModelMapperForSalesOrderState.PreBuiltSalesOrderStateSQLSelectorList.Expand().Compile().Invoke(x.State!),
                TypeID = x.TypeID,
                Type = ModelMapperForSalesOrderType.PreBuiltSalesOrderTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!),
                SalesItems = x.SalesItems!.Where(y => y.Active).Select(ModelMapperForSalesOrderItem.PreBuiltSalesOrderItemSQLSelectorList.Expand().Compile()).ToList(),
                Discounts = x.Discounts!.Where(y => y.Active).Select(ModelMapperForAppliedSalesOrderDiscount.PreBuiltAppliedSalesOrderDiscountSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForSalesOrderFile.PreBuiltSalesOrderFileSQLSelectorList.Expand().Compile()).ToList(),
                Contacts = x.Contacts!.Where(y => y.Active).Select(ModelMapperForSalesOrderContact.PreBuiltSalesOrderContactSQLSelectorList.Expand().Compile()).ToList(),
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSalesOrderSQLSelectorLite()
        {
            PreBuiltSalesOrderSQLSelectorLite = x => x == null ? null! : new AnonSalesOrder
            {
                PurchaseOrderNumber = x.PurchaseOrderNumber,
                BalanceDue = x.BalanceDue,
                TrackingNumber = x.TrackingNumber,
                PaymentTransactionID = x.PaymentTransactionID,
                TaxTransactionID = x.TaxTransactionID,
                OrderApprovedDate = x.OrderApprovedDate,
                OrderCommitmentDate = x.OrderCommitmentDate,
                RequiredShipDate = x.RequiredShipDate,
                RequestedShipDate = x.RequestedShipDate,
                ActualShipDate = x.ActualShipDate,
                SalesGroupAsMasterID = x.SalesGroupAsMasterID,
                SalesGroupAsSubID = x.SalesGroupAsSubID,
                InventoryLocationID = x.InventoryLocationID,
                InventoryLocation = ModelMapperForInventoryLocation.PreBuiltInventoryLocationSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocation!),
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StatusID = x.StatusID,
                Status = ModelMapperForSalesOrderStatus.PreBuiltSalesOrderStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StateID = x.StateID,
                State = ModelMapperForSalesOrderState.PreBuiltSalesOrderStateSQLSelectorList.Expand().Compile().Invoke(x.State!),
                TypeID = x.TypeID,
                Type = ModelMapperForSalesOrderType.PreBuiltSalesOrderTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!),
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSalesOrderSQLSelectorList()
        {
            PreBuiltSalesOrderSQLSelectorList = x => x == null ? null! : new AnonSalesOrder
            {
                PurchaseOrderNumber = x.PurchaseOrderNumber,
                BalanceDue = x.BalanceDue,
                TrackingNumber = x.TrackingNumber,
                PaymentTransactionID = x.PaymentTransactionID,
                TaxTransactionID = x.TaxTransactionID,
                OrderApprovedDate = x.OrderApprovedDate,
                OrderCommitmentDate = x.OrderCommitmentDate,
                RequiredShipDate = x.RequiredShipDate,
                RequestedShipDate = x.RequestedShipDate,
                ActualShipDate = x.ActualShipDate,
                SalesGroupAsMasterID = x.SalesGroupAsMasterID,
                SalesGroupAsSubID = x.SalesGroupAsSubID,
                InventoryLocationID = x.InventoryLocationID,
                InventoryLocation = ModelMapperForInventoryLocation.PreBuiltInventoryLocationSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocation!), // For Flattening Properties (List)
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForSalesOrderStatus.PreBuiltSalesOrderStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                StateID = x.StateID,
                State = ModelMapperForSalesOrderState.PreBuiltSalesOrderStateSQLSelectorList.Expand().Compile().Invoke(x.State!), // For Flattening Properties (List)
                TypeID = x.TypeID,
                Type = ModelMapperForSalesOrderType.PreBuiltSalesOrderTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!), // For Flattening Properties (List)
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!), // For Flattening Properties (List)
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                SalesGroupAsMaster = ModelMapperForSalesGroup.PreBuiltSalesGroupSQLSelectorList.Expand().Compile().Invoke(x.SalesGroupAsMaster!), // For Flattening Properties
                SalesGroupAsSub = ModelMapperForSalesGroup.PreBuiltSalesGroupSQLSelectorList.Expand().Compile().Invoke(x.SalesGroupAsSub!), // For Flattening Properties
                UserContact = x.User == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.User.Contact!), // For Flattening Properties
            };
        }

        public static IEnumerable<ISalesOrderModel> SelectFullSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesOrderSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesOrderModel> SelectLiteSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesOrderSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesOrderModel> SelectListSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesOrderSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityList(x, contextProfileName))!;
        }

        public static ISalesOrderModel? SelectFirstFullSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesOrderSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesOrderModel? SelectFirstListSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesOrderSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesOrderModel? SelectSingleFullSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesOrderSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesOrderModel? SelectSingleLiteSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesOrderSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesOrderModel? SelectSingleListSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesOrderSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesOrderModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISalesOrderModel> results, int totalPages, int totalCount) SelectFullSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesOrderSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateSalesOrderModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesOrderModel> results, int totalPages, int totalCount) SelectLiteSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesOrderSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateSalesOrderModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesOrderModel> results, int totalPages, int totalCount) SelectListSalesOrderAndMapToSalesOrderModel(
            this IQueryable<SalesOrder> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesOrderSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesOrderSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateSalesOrderModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISalesOrderModel? CreateSalesOrderModelFromEntityFull(this ISalesOrder? entity, string? contextProfileName)
        {
            return CreateSalesOrderModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISalesOrderModel? CreateSalesOrderModelFromEntityLite(this ISalesOrder? entity, string? contextProfileName)
        {
            return CreateSalesOrderModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISalesOrderModel? CreateSalesOrderModelFromEntityList(this ISalesOrder? entity, string? contextProfileName)
        {
            return CreateSalesOrderModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISalesOrderModel? CreateSalesOrderModelFromEntity(
            this ISalesOrder? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapSalesCollectionBaseEntityPropertiesToModel<ISalesOrderModel,
                    ISalesOrder,
                    SalesOrder,
                    SalesOrderStatus,
                    SalesOrderType,
                    ITypeModel,
                    SalesOrderItem,
                    AppliedSalesOrderDiscount,
                    IAppliedSalesOrderDiscountModel,
                    IAppliedSalesOrderItemDiscountModel,
                    SalesOrderState,
                    SalesOrderFile,
                    ISalesOrderFileModel,
                    SalesOrderContact,
                    ISalesOrderContactModel,
                    AppliedSalesOrderItemDiscount,
                    SalesOrderItemTarget,
                    SalesOrderEvent,
                    ISalesOrderEventModel,
                    SalesOrderEventType>(
                RegistryLoaderWrapper.GetInstance<ISalesOrderModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ISalesCollectionBase Properties
                    model.SalesItems = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).SalesItems : entity.SalesItems)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrderItem.CreateSalesOrderItemModelFromEntityLite(x, contextProfileName)).ToList()!;
                    model.Discounts = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).Discounts : entity.Discounts)?.Where(x => x.Active).Select(x => ModelMapperForAppliedSalesOrderDiscount.CreateAppliedSalesOrderDiscountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Contacts = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).Contacts : entity.Contacts)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrderContact.CreateSalesOrderContactModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrderFile.CreateSalesOrderFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // SalesOrder's Properties
                    // SalesOrder's Related Objects
                    model.Account = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Account, contextProfileName);
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Franchise = ModelMapperForFranchise.CreateFranchiseModelFromEntityLite(entity.Franchise, contextProfileName);
                    model.InventoryLocation = ModelMapperForInventoryLocation.CreateInventoryLocationModelFromEntityLite(entity.InventoryLocation, contextProfileName);
                    model.SalesGroupAsMaster = ModelMapperForSalesGroup.CreateSalesGroupModelFromEntityLite(entity.SalesGroupAsMaster, contextProfileName);
                    model.SalesGroupAsSub = ModelMapperForSalesGroup.CreateSalesGroupModelFromEntityLite(entity.SalesGroupAsSub, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // SalesOrder's Associated Objects
                    model.AssociatedPurchaseOrders = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).AssociatedPurchaseOrders : entity.AssociatedPurchaseOrders)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrderPurchaseOrder.CreateSalesOrderPurchaseOrderModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.AssociatedSalesInvoices = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).AssociatedSalesInvoices : entity.AssociatedSalesInvoices)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrderSalesInvoice.CreateSalesOrderSalesInvoiceModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.AssociatedSalesQuotes = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).AssociatedSalesQuotes : entity.AssociatedSalesQuotes)?.Where(x => x.Active).Select(x => ModelMapperForSalesQuoteSalesOrder.CreateSalesQuoteSalesOrderModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.AssociatedSalesReturns = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).AssociatedSalesReturns : entity.AssociatedSalesReturns)?.Where(x => x.Active).Select(x => ModelMapperForSalesReturnSalesOrder.CreateSalesReturnSalesOrderModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesOrderPayments = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).SalesOrderPayments : entity.SalesOrderPayments)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrderPayment.CreateSalesOrderPaymentModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateSalesOrderModelFromEntityHooksFull != null) { model = CreateSalesOrderModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // SalesOrder's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForSalesOrderType.CreateSalesOrderTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForSalesOrderStatus.CreateSalesOrderStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // IHaveAStateBase Properties (Forced)
                    model.State = ModelMapperForSalesOrderState.CreateSalesOrderStateModelFromEntityLite(entity.State, contextProfileName);
                    // SalesOrder's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // SalesOrder's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSalesOrderModelFromEntityHooksLite != null) { model = CreateSalesOrderModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveAStateBase Properties
                    model.StateID = entity.StateID;
                    if (entity.State != null)
                    {
                        model.StateKey = entity.State.CustomKey;
                        model.StateName = entity.State.Name;
                        model.StateDisplayName = entity.State.DisplayName;
                        model.StateTranslationKey = entity.State.TranslationKey;
                        model.StateSortOrder = entity.State.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // SalesOrder's Properties
                    model.ActualShipDate = entity.ActualShipDate;
                    model.BalanceDue = entity.BalanceDue;
                    model.OrderApprovedDate = entity.OrderApprovedDate;
                    model.OrderCommitmentDate = entity.OrderCommitmentDate;
                    model.PaymentTransactionID = entity.PaymentTransactionID;
                    model.PurchaseOrderNumber = entity.PurchaseOrderNumber;
                    model.RequestedShipDate = entity.RequestedShipDate;
                    model.RequiredShipDate = entity.RequiredShipDate;
                    model.TaxTransactionID = entity.TaxTransactionID;
                    model.TrackingNumber = entity.TrackingNumber;
                    // SalesOrder's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountID = entity.AccountID;
                    model.AccountKey = entity.Account?.CustomKey;
                    model.AccountName = entity.Account?.Name;
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.FranchiseID = entity.FranchiseID;
                    model.FranchiseKey = entity.Franchise?.CustomKey;
                    model.FranchiseName = entity.Franchise?.Name;
                    model.InventoryLocationID = entity.InventoryLocationID;
                    model.InventoryLocationKey = entity.InventoryLocation?.CustomKey;
                    model.InventoryLocationName = entity.InventoryLocation?.Name;
                    model.SalesGroupAsMasterID = entity.SalesGroupAsMasterID;
                    model.SalesGroupAsMasterKey = entity.SalesGroupAsMaster?.CustomKey;
                    model.SalesGroupAsSubID = entity.SalesGroupAsSubID;
                    model.SalesGroupAsSubKey = entity.SalesGroupAsSub?.CustomKey;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    model.UserUserName = entity.User?.UserName;
                    model.UserContactEmail = entity is AnonSalesOrder ? ((AnonSalesOrder)entity).UserContact?.Email1 : entity.User?.Contact?.Email1;
                    model.UserContactFirstName = entity is AnonSalesOrder ? ((AnonSalesOrder)entity).UserContact?.FirstName : entity.User?.Contact?.FirstName;
                    model.UserContactLastName = entity is AnonSalesOrder ? ((AnonSalesOrder)entity).UserContact?.LastName : entity.User?.Contact?.LastName;
                    // SalesOrder's Associated Objects (Not Mapped unless Forced)
                    model.RateQuotes = (entity is AnonSalesOrder ? ((AnonSalesOrder)entity).RateQuotes : entity.RateQuotes)?.Where(x => x.Active).Select(x => ModelMapperForRateQuote.CreateRateQuoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateSalesOrderModelFromEntityHooksList != null) { model = CreateSalesOrderModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
