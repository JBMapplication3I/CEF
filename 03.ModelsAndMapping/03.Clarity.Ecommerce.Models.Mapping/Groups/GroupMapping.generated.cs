// <autogenerated>
// <copyright file="Mapping.Groups.Group.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Groups section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForGroup
    {
        public sealed class AnonGroup : Group
        {
            public bool HasChildren { get; set; }
            public new IEnumerable<Group>? Children { get; set; }
            public new IEnumerable<GroupUser>? Users { get; set; }
            public Contact? GroupOwnerContact { get; set; }
        }

        public static readonly Func<Group?, string?, IGroupModel?> MapGroupModelFromEntityFull = CreateGroupModelFromEntityFull;

        public static readonly Func<Group?, string?, IGroupModel?> MapGroupModelFromEntityLite = CreateGroupModelFromEntityLite;

        public static readonly Func<Group?, string?, IGroupModel?> MapGroupModelFromEntityList = CreateGroupModelFromEntityList;

        public static Func<IGroup, IGroupModel, string?, IGroupModel>? CreateGroupModelFromEntityHooksFull { get; set; }

        public static Func<IGroup, IGroupModel, string?, IGroupModel>? CreateGroupModelFromEntityHooksLite { get; set; }

        public static Func<IGroup, IGroupModel, string?, IGroupModel>? CreateGroupModelFromEntityHooksList { get; set; }

        public static Expression<Func<Group, AnonGroup>>? PreBuiltGroupSQLSelectorFull { get; set; }

        public static Expression<Func<Group, AnonGroup>>? PreBuiltGroupSQLSelectorLite { get; set; }

        public static Expression<Func<Group, AnonGroup>>? PreBuiltGroupSQLSelectorList { get; set; }

        /// <summary>An <see cref="IGroupModel"/> extension method that creates a(n) <see cref="Group"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Group"/> entity.</returns>
        public static IGroup CreateGroupEntity(
            this IGroupModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IGroupModel, Group>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateGroupFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IGroupModel"/> extension method that updates a(n) <see cref="Group"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Group"/> entity.</returns>
        public static IGroup UpdateGroupFromModel(
            this IGroup entity,
            IGroupModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Group's Related Objects
            // Group's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenGroupSQLSelectorFull()
        {
            PreBuiltGroupSQLSelectorFull = x => x == null ? null! : new AnonGroup
            {
                HasChildren = x.Children!.Any(y => y.Active),
                ParentID = x.ParentID,
                Parent = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Parent!),
                Children = x.Children!.Where(y => y.Active).Select(ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile()).ToList(),
                Users = x.Users!.Where(y => y.Active).Select(ModelMapperForGroupUser.PreBuiltGroupUserSQLSelectorList.Expand().Compile()).ToList(),
                TypeID = x.TypeID,
                Type = ModelMapperForGroupType.PreBuiltGroupTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForGroupStatus.PreBuiltGroupStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                GroupOwnerID = x.GroupOwnerID,
                GroupOwner = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.GroupOwner!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenGroupSQLSelectorLite()
        {
            PreBuiltGroupSQLSelectorLite = x => x == null ? null! : new AnonGroup
            {
                HasChildren = x.Children!.Any(y => y.Active),
                ParentID = x.ParentID,
                Parent = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Parent!),
                TypeID = x.TypeID,
                Type = ModelMapperForGroupType.PreBuiltGroupTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForGroupStatus.PreBuiltGroupStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                GroupOwnerID = x.GroupOwnerID,
                GroupOwner = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.GroupOwner!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenGroupSQLSelectorList()
        {
            PreBuiltGroupSQLSelectorList = x => x == null ? null! : new AnonGroup
            {
                HasChildren = x.Children!.Any(y => y.Active),
                ParentID = x.ParentID,
                Parent = ModelMapperForGroup.PreBuiltGroupSQLSelectorList.Expand().Compile().Invoke(x.Parent!), // For Flattening Properties (List)
                TypeID = x.TypeID,
                Type = ModelMapperForGroupType.PreBuiltGroupTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForGroupStatus.PreBuiltGroupStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                GroupOwnerID = x.GroupOwnerID,
                GroupOwner = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.GroupOwner!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IGroupModel> SelectFullGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltGroupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IGroupModel> SelectLiteGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltGroupSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IGroupModel> SelectListGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltGroupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityList(x, contextProfileName))!;
        }

        public static IGroupModel? SelectFirstFullGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGroupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IGroupModel? SelectFirstListGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGroupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IGroupModel? SelectSingleFullGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGroupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IGroupModel? SelectSingleLiteGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGroupSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IGroupModel? SelectSingleListGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGroupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateGroupModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IGroupModel> results, int totalPages, int totalCount) SelectFullGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltGroupSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateGroupModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IGroupModel> results, int totalPages, int totalCount) SelectLiteGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltGroupSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateGroupModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IGroupModel> results, int totalPages, int totalCount) SelectListGroupAndMapToGroupModel(
            this IQueryable<Group> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGroupSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltGroupSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateGroupModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IGroupModel? CreateGroupModelFromEntityFull(this IGroup? entity, string? contextProfileName)
        {
            return CreateGroupModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IGroupModel? CreateGroupModelFromEntityLite(this IGroup? entity, string? contextProfileName)
        {
            return CreateGroupModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IGroupModel? CreateGroupModelFromEntityList(this IGroup? entity, string? contextProfileName)
        {
            return CreateGroupModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IGroupModel? CreateGroupModelFromEntity(
            this IGroup? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IGroupModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveAParentBase Properties
                    model.Parent = CreateGroupModelFromEntityLite(entity.Parent, contextProfileName);
                    model.Children = (entity is AnonGroup ? ((AnonGroup)entity).Children : entity.Children)?.Where(x => x.Active).Select(x => CreateGroupModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Group's Properties
                    // Group's Related Objects
                    model.GroupOwner = ModelMapperForUser.CreateUserModelFromEntityLite(entity.GroupOwner, contextProfileName);
                    // Group's Associated Objects
                    model.Users = (entity is AnonGroup ? ((AnonGroup)entity).Users : entity.Users)?.Where(x => x.Active).Select(x => ModelMapperForGroupUser.CreateGroupUserModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateGroupModelFromEntityHooksFull != null) { model = CreateGroupModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Group's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForGroupType.CreateGroupTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForGroupStatus.CreateGroupStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Group's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Group's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateGroupModelFromEntityHooksLite != null) { model = CreateGroupModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveAParentBase Properties
                    model.ParentID = entity.ParentID;
                    model.HasChildren = (entity as AnonGroup)?.HasChildren ?? (entity.Children?.Any(y => y.Active) ?? false);
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Group's Properties
                    // Group's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.GroupOwnerID = entity.GroupOwnerID;
                    model.GroupOwnerKey = entity.GroupOwner?.CustomKey;
                    // Group's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateGroupModelFromEntityHooksList != null) { model = CreateGroupModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
