// <autogenerated>
// <copyright file="Mapping.Questionnaire.Answer.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Questionnaire section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAnswer
    {
        public sealed class AnonAnswer : Answer
        {
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Answer?, string?, IAnswerModel?> MapAnswerModelFromEntityFull = CreateAnswerModelFromEntityFull;

        public static readonly Func<Answer?, string?, IAnswerModel?> MapAnswerModelFromEntityLite = CreateAnswerModelFromEntityLite;

        public static readonly Func<Answer?, string?, IAnswerModel?> MapAnswerModelFromEntityList = CreateAnswerModelFromEntityList;

        public static Func<IAnswer, IAnswerModel, string?, IAnswerModel>? CreateAnswerModelFromEntityHooksFull { get; set; }

        public static Func<IAnswer, IAnswerModel, string?, IAnswerModel>? CreateAnswerModelFromEntityHooksLite { get; set; }

        public static Func<IAnswer, IAnswerModel, string?, IAnswerModel>? CreateAnswerModelFromEntityHooksList { get; set; }

        public static Expression<Func<Answer, AnonAnswer>>? PreBuiltAnswerSQLSelectorFull { get; set; }

        public static Expression<Func<Answer, AnonAnswer>>? PreBuiltAnswerSQLSelectorLite { get; set; }

        public static Expression<Func<Answer, AnonAnswer>>? PreBuiltAnswerSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAnswerModel"/> extension method that creates a(n) <see cref="Answer"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Answer"/> entity.</returns>
        public static IAnswer CreateAnswerEntity(
            this IAnswerModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IAnswerModel, Answer>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAnswerFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAnswerModel"/> extension method that updates a(n) <see cref="Answer"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Answer"/> entity.</returns>
        public static IAnswer UpdateAnswerFromModel(
            this IAnswer entity,
            IAnswerModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Answer Properties
            entity.AdditionalInformation = model.AdditionalInformation;
            // Answer's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAnswerSQLSelectorFull()
        {
            PreBuiltAnswerSQLSelectorFull = x => x == null ? null! : new AnonAnswer
            {
                AdditionalInformation = x.AdditionalInformation,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                QuestionID = x.QuestionID,
                Question = ModelMapperForQuestion.PreBuiltQuestionSQLSelectorList.Expand().Compile().Invoke(x.Question!),
                OptionID = x.OptionID,
                Option = ModelMapperForQuestionOption.PreBuiltQuestionOptionSQLSelectorList.Expand().Compile().Invoke(x.Option!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAnswerSQLSelectorLite()
        {
            PreBuiltAnswerSQLSelectorLite = x => x == null ? null! : new AnonAnswer
            {
                AdditionalInformation = x.AdditionalInformation,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                QuestionID = x.QuestionID,
                Question = ModelMapperForQuestion.PreBuiltQuestionSQLSelectorList.Expand().Compile().Invoke(x.Question!),
                OptionID = x.OptionID,
                Option = ModelMapperForQuestionOption.PreBuiltQuestionOptionSQLSelectorList.Expand().Compile().Invoke(x.Option!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAnswerSQLSelectorList()
        {
            PreBuiltAnswerSQLSelectorList = x => x == null ? null! : new AnonAnswer
            {
                AdditionalInformation = x.AdditionalInformation,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                QuestionID = x.QuestionID,
                Question = ModelMapperForQuestion.PreBuiltQuestionSQLSelectorList.Expand().Compile().Invoke(x.Question!), // For Flattening Properties (List)
                OptionID = x.OptionID,
                Option = ModelMapperForQuestionOption.PreBuiltQuestionOptionSQLSelectorList.Expand().Compile().Invoke(x.Option!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAnswerModel> SelectFullAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAnswerSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAnswerModel> SelectLiteAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAnswerSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAnswerModel> SelectListAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAnswerSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityList(x, contextProfileName))!;
        }

        public static IAnswerModel? SelectFirstFullAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAnswerSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAnswerModel? SelectFirstListAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAnswerSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAnswerModel? SelectSingleFullAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAnswerSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAnswerModel? SelectSingleLiteAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAnswerSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAnswerModel? SelectSingleListAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAnswerSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAnswerModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAnswerModel> results, int totalPages, int totalCount) SelectFullAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAnswerSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAnswerModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAnswerModel> results, int totalPages, int totalCount) SelectLiteAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAnswerSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAnswerModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAnswerModel> results, int totalPages, int totalCount) SelectListAnswerAndMapToAnswerModel(
            this IQueryable<Answer> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAnswerSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAnswerSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAnswerModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAnswerModel? CreateAnswerModelFromEntityFull(this IAnswer? entity, string? contextProfileName)
        {
            return CreateAnswerModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAnswerModel? CreateAnswerModelFromEntityLite(this IAnswer? entity, string? contextProfileName)
        {
            return CreateAnswerModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAnswerModel? CreateAnswerModelFromEntityList(this IAnswer? entity, string? contextProfileName)
        {
            return CreateAnswerModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAnswerModel? CreateAnswerModelFromEntity(
            this IAnswer? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAnswerModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Answer's Properties
                    // Answer's Related Objects
                    model.Option = ModelMapperForQuestionOption.CreateQuestionOptionModelFromEntityLite(entity.Option, contextProfileName);
                    model.Question = ModelMapperForQuestion.CreateQuestionModelFromEntityLite(entity.Question, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // Answer's Associated Objects
                    // Additional Mappings
                    if (CreateAnswerModelFromEntityHooksFull != null) { model = CreateAnswerModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Answer's Properties
                    // Answer's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Answer's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAnswerModelFromEntityHooksLite != null) { model = CreateAnswerModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Answer's Properties
                    model.AdditionalInformation = entity.AdditionalInformation;
                    // Answer's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.OptionID = entity.OptionID;
                    model.OptionKey = entity.Option?.CustomKey;
                    model.QuestionID = entity.QuestionID;
                    model.QuestionKey = entity.Question?.CustomKey;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    // Answer's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAnswerModelFromEntityHooksList != null) { model = CreateAnswerModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
