// <autogenerated>
// <copyright file="Mapping.Questionnaire.Question.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Questionnaire section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForQuestion
    {
        public sealed class AnonQuestion : Question
        {
            public new IEnumerable<QuestionOption>? Options { get; set; }
        }

        public static readonly Func<Question?, string?, IQuestionModel?> MapQuestionModelFromEntityFull = CreateQuestionModelFromEntityFull;

        public static readonly Func<Question?, string?, IQuestionModel?> MapQuestionModelFromEntityLite = CreateQuestionModelFromEntityLite;

        public static readonly Func<Question?, string?, IQuestionModel?> MapQuestionModelFromEntityList = CreateQuestionModelFromEntityList;

        public static Func<IQuestion, IQuestionModel, string?, IQuestionModel>? CreateQuestionModelFromEntityHooksFull { get; set; }

        public static Func<IQuestion, IQuestionModel, string?, IQuestionModel>? CreateQuestionModelFromEntityHooksLite { get; set; }

        public static Func<IQuestion, IQuestionModel, string?, IQuestionModel>? CreateQuestionModelFromEntityHooksList { get; set; }

        public static Expression<Func<Question, AnonQuestion>>? PreBuiltQuestionSQLSelectorFull { get; set; }

        public static Expression<Func<Question, AnonQuestion>>? PreBuiltQuestionSQLSelectorLite { get; set; }

        public static Expression<Func<Question, AnonQuestion>>? PreBuiltQuestionSQLSelectorList { get; set; }

        /// <summary>An <see cref="IQuestionModel"/> extension method that creates a(n) <see cref="Question"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Question"/> entity.</returns>
        public static IQuestion CreateQuestionEntity(
            this IQuestionModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IQuestionModel, Question>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateQuestionFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IQuestionModel"/> extension method that updates a(n) <see cref="Question"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Question"/> entity.</returns>
        public static IQuestion UpdateQuestionFromModel(
            this IQuestion entity,
            IQuestionModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Question Properties
            entity.QuestionTranslationKey = model.QuestionTranslationKey;
            // Question's Related Objects
            // Question's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenQuestionSQLSelectorFull()
        {
            PreBuiltQuestionSQLSelectorFull = x => x == null ? null! : new AnonQuestion
            {
                TypeID = x.TypeID,
                Type = ModelMapperForQuestionType.PreBuiltQuestionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                QuestionTranslationKey = x.QuestionTranslationKey,
                NextQuestionID = x.NextQuestionID,
                Options = x.Options!.Where(y => y.Active).Select(ModelMapperForQuestionOption.PreBuiltQuestionOptionSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenQuestionSQLSelectorLite()
        {
            PreBuiltQuestionSQLSelectorLite = x => x == null ? null! : new AnonQuestion
            {
                TypeID = x.TypeID,
                Type = ModelMapperForQuestionType.PreBuiltQuestionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                QuestionTranslationKey = x.QuestionTranslationKey,
                NextQuestionID = x.NextQuestionID,
                Options = x.Options!.Where(y => y.Active).Select(ModelMapperForQuestionOption.PreBuiltQuestionOptionSQLSelectorList.Expand().Compile()),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenQuestionSQLSelectorList()
        {
            PreBuiltQuestionSQLSelectorList = x => x == null ? null! : new AnonQuestion
            {
                TypeID = x.TypeID,
                Type = ModelMapperForQuestionType.PreBuiltQuestionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                QuestionTranslationKey = x.QuestionTranslationKey,
                NextQuestionID = x.NextQuestionID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IQuestionModel> SelectFullQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltQuestionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IQuestionModel> SelectLiteQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltQuestionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IQuestionModel> SelectListQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltQuestionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityList(x, contextProfileName))!;
        }

        public static IQuestionModel? SelectFirstFullQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltQuestionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IQuestionModel? SelectFirstListQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltQuestionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IQuestionModel? SelectSingleFullQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltQuestionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IQuestionModel? SelectSingleLiteQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltQuestionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IQuestionModel? SelectSingleListQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltQuestionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateQuestionModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IQuestionModel> results, int totalPages, int totalCount) SelectFullQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltQuestionSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateQuestionModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IQuestionModel> results, int totalPages, int totalCount) SelectLiteQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltQuestionSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateQuestionModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IQuestionModel> results, int totalPages, int totalCount) SelectListQuestionAndMapToQuestionModel(
            this IQueryable<Question> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltQuestionSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltQuestionSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateQuestionModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IQuestionModel? CreateQuestionModelFromEntityFull(this IQuestion? entity, string? contextProfileName)
        {
            return CreateQuestionModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IQuestionModel? CreateQuestionModelFromEntityLite(this IQuestion? entity, string? contextProfileName)
        {
            return CreateQuestionModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IQuestionModel? CreateQuestionModelFromEntityList(this IQuestion? entity, string? contextProfileName)
        {
            return CreateQuestionModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IQuestionModel? CreateQuestionModelFromEntity(
            this IQuestion? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IQuestionModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForQuestionType.CreateQuestionTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Question's Properties
                    // Question's Related Objects
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    // Question's Associated Objects
                    // Additional Mappings
                    if (CreateQuestionModelFromEntityHooksFull != null) { model = CreateQuestionModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Question's Properties
                    // Question's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Question's Associated Objects (Not Mapped unless Forced)
                    model.Options = (entity is AnonQuestion ? ((AnonQuestion)entity).Options : entity.Options)?.Where(x => x.Active).Select(x => ModelMapperForQuestionOption.CreateQuestionOptionModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateQuestionModelFromEntityHooksLite != null) { model = CreateQuestionModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Question's Properties
                    model.QuestionTranslationKey = entity.QuestionTranslationKey;
                    // Question's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    // Question's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateQuestionModelFromEntityHooksList != null) { model = CreateQuestionModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
