// <autogenerated>
// <copyright file="Mapping.Reporting.ReportType.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Reporting section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForReportType
    {
        public sealed class AnonReportType : ReportType
        {
        }

        public static readonly Func<ReportType?, string?, IReportTypeModel?> MapReportTypeModelFromEntityFull = CreateReportTypeModelFromEntityFull;

        public static readonly Func<ReportType?, string?, IReportTypeModel?> MapReportTypeModelFromEntityLite = CreateReportTypeModelFromEntityLite;

        public static readonly Func<ReportType?, string?, IReportTypeModel?> MapReportTypeModelFromEntityList = CreateReportTypeModelFromEntityList;

        public static Func<IReportType, IReportTypeModel, string?, IReportTypeModel>? CreateReportTypeModelFromEntityHooksFull { get; set; }

        public static Func<IReportType, IReportTypeModel, string?, IReportTypeModel>? CreateReportTypeModelFromEntityHooksLite { get; set; }

        public static Func<IReportType, IReportTypeModel, string?, IReportTypeModel>? CreateReportTypeModelFromEntityHooksList { get; set; }

        public static Expression<Func<ReportType, AnonReportType>>? PreBuiltReportTypeSQLSelectorFull { get; set; }

        public static Expression<Func<ReportType, AnonReportType>>? PreBuiltReportTypeSQLSelectorLite { get; set; }

        public static Expression<Func<ReportType, AnonReportType>>? PreBuiltReportTypeSQLSelectorList { get; set; }

        /// <summary>An <see cref="IReportTypeModel"/> extension method that creates a(n) <see cref="ReportType"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ReportType"/> entity.</returns>
        public static IReportType CreateReportTypeEntity(
            this IReportTypeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityTypableBase<IReportTypeModel, ReportType>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateReportTypeFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IReportTypeModel"/> extension method that updates a(n) <see cref="ReportType"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ReportType"/> entity.</returns>
        public static IReportType UpdateReportTypeFromModel(
            this IReportType entity,
            IReportTypeModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapTypableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ReportType Properties
            entity.Template = model.Template;
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenReportTypeSQLSelectorFull()
        {
            PreBuiltReportTypeSQLSelectorFull = x => x == null ? null! : new AnonReportType
            {
                Template = x.Template,
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenReportTypeSQLSelectorLite()
        {
            PreBuiltReportTypeSQLSelectorLite = x => x == null ? null! : new AnonReportType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenReportTypeSQLSelectorList()
        {
            PreBuiltReportTypeSQLSelectorList = x => x == null ? null! : new AnonReportType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IReportTypeModel> SelectFullReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReportTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IReportTypeModel> SelectLiteReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReportTypeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IReportTypeModel> SelectListReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReportTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityList(x, contextProfileName))!;
        }

        public static IReportTypeModel? SelectFirstFullReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReportTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IReportTypeModel? SelectFirstListReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReportTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IReportTypeModel? SelectSingleFullReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReportTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IReportTypeModel? SelectSingleLiteReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReportTypeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IReportTypeModel? SelectSingleListReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReportTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReportTypeModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IReportTypeModel> results, int totalPages, int totalCount) SelectFullReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReportTypeSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateReportTypeModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IReportTypeModel> results, int totalPages, int totalCount) SelectLiteReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReportTypeSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateReportTypeModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IReportTypeModel> results, int totalPages, int totalCount) SelectListReportTypeAndMapToReportTypeModel(
            this IQueryable<ReportType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReportTypeSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReportTypeSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateReportTypeModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IReportTypeModel? CreateReportTypeModelFromEntityFull(this IReportType? entity, string? contextProfileName)
        {
            return CreateReportTypeModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IReportTypeModel? CreateReportTypeModelFromEntityLite(this IReportType? entity, string? contextProfileName)
        {
            return CreateReportTypeModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IReportTypeModel? CreateReportTypeModelFromEntityList(this IReportType? entity, string? contextProfileName)
        {
            return CreateReportTypeModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IReportTypeModel? CreateReportTypeModelFromEntity(
            this IReportType? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapTypableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IReportTypeModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ReportType's Properties
                    model.Template = entity.Template;
                    // ReportType's Related Objects
                    // ReportType's Associated Objects
                    // Additional Mappings
                    if (CreateReportTypeModelFromEntityHooksFull != null) { model = CreateReportTypeModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ReportType's Properties
                    // ReportType's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ReportType's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateReportTypeModelFromEntityHooksLite != null) { model = CreateReportTypeModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ReportType's Properties
                    // ReportType's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ReportType's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateReportTypeModelFromEntityHooksList != null) { model = CreateReportTypeModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
