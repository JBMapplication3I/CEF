// <autogenerated>
// <copyright file="Mapping.Attributes.GeneralAttribute.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Attributes section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForGeneralAttribute
    {
        public sealed class AnonGeneralAttribute : GeneralAttribute
        {
        }

        public static readonly Func<GeneralAttribute?, string?, IGeneralAttributeModel?> MapGeneralAttributeModelFromEntityFull = CreateGeneralAttributeModelFromEntityFull;

        public static readonly Func<GeneralAttribute?, string?, IGeneralAttributeModel?> MapGeneralAttributeModelFromEntityLite = CreateGeneralAttributeModelFromEntityLite;

        public static readonly Func<GeneralAttribute?, string?, IGeneralAttributeModel?> MapGeneralAttributeModelFromEntityList = CreateGeneralAttributeModelFromEntityList;

        public static Func<IGeneralAttribute, IGeneralAttributeModel, string?, IGeneralAttributeModel>? CreateGeneralAttributeModelFromEntityHooksFull { get; set; }

        public static Func<IGeneralAttribute, IGeneralAttributeModel, string?, IGeneralAttributeModel>? CreateGeneralAttributeModelFromEntityHooksLite { get; set; }

        public static Func<IGeneralAttribute, IGeneralAttributeModel, string?, IGeneralAttributeModel>? CreateGeneralAttributeModelFromEntityHooksList { get; set; }

        public static Expression<Func<GeneralAttribute, AnonGeneralAttribute>>? PreBuiltGeneralAttributeSQLSelectorFull { get; set; }

        public static Expression<Func<GeneralAttribute, AnonGeneralAttribute>>? PreBuiltGeneralAttributeSQLSelectorLite { get; set; }

        public static Expression<Func<GeneralAttribute, AnonGeneralAttribute>>? PreBuiltGeneralAttributeSQLSelectorList { get; set; }

        /// <summary>An <see cref="IGeneralAttributeModel"/> extension method that creates a(n) <see cref="GeneralAttribute"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="GeneralAttribute"/> entity.</returns>
        public static IGeneralAttribute CreateGeneralAttributeEntity(
            this IGeneralAttributeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityTypableBase<IGeneralAttributeModel, GeneralAttribute>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateGeneralAttributeFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IGeneralAttributeModel"/> extension method that updates a(n) <see cref="GeneralAttribute"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="GeneralAttribute"/> entity.</returns>
        public static IGeneralAttribute UpdateGeneralAttributeFromModel(
            this IGeneralAttribute entity,
            IGeneralAttributeModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapTypableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // GeneralAttribute Properties
            entity.HideFromCatalogViews = model.HideFromCatalogViews;
            entity.HideFromProductDetailView = model.HideFromProductDetailView;
            entity.HideFromStorefront = model.HideFromStorefront;
            entity.HideFromSuppliers = model.HideFromSuppliers;
            entity.IsComparable = model.IsComparable;
            entity.IsFilter = model.IsFilter;
            entity.IsMarkup = model.IsMarkup;
            entity.IsPredefined = model.IsPredefined;
            entity.IsTab = model.IsTab;
            // GeneralAttribute's Related Objects
            // GeneralAttribute's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenGeneralAttributeSQLSelectorFull()
        {
            PreBuiltGeneralAttributeSQLSelectorFull = x => x == null ? null! : new AnonGeneralAttribute
            {
                CustomKey = x.CustomKey,
                IsFilter = x.IsFilter,
                IsComparable = x.IsComparable,
                IsPredefined = x.IsPredefined,
                IsMarkup = x.IsMarkup,
                IsTab = x.IsTab,
                HideFromStorefront = x.HideFromStorefront,
                HideFromSuppliers = x.HideFromSuppliers,
                HideFromProductDetailView = x.HideFromProductDetailView,
                HideFromCatalogViews = x.HideFromCatalogViews,
                TypeID = x.TypeID,
                Type = ModelMapperForAttributeType.PreBuiltAttributeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                AttributeTabID = x.AttributeTabID,
                AttributeTab = ModelMapperForAttributeTab.PreBuiltAttributeTabSQLSelectorList.Expand().Compile().Invoke(x.AttributeTab!),
                AttributeGroupID = x.AttributeGroupID,
                AttributeGroup = ModelMapperForAttributeGroup.PreBuiltAttributeGroupSQLSelectorList.Expand().Compile().Invoke(x.AttributeGroup!),
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenGeneralAttributeSQLSelectorLite()
        {
            PreBuiltGeneralAttributeSQLSelectorLite = x => x == null ? null! : new AnonGeneralAttribute
            {
                CustomKey = x.CustomKey,
                IsFilter = x.IsFilter,
                IsComparable = x.IsComparable,
                IsPredefined = x.IsPredefined,
                IsMarkup = x.IsMarkup,
                IsTab = x.IsTab,
                HideFromStorefront = x.HideFromStorefront,
                HideFromSuppliers = x.HideFromSuppliers,
                HideFromProductDetailView = x.HideFromProductDetailView,
                HideFromCatalogViews = x.HideFromCatalogViews,
                TypeID = x.TypeID,
                Type = ModelMapperForAttributeType.PreBuiltAttributeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                AttributeTabID = x.AttributeTabID,
                AttributeTab = ModelMapperForAttributeTab.PreBuiltAttributeTabSQLSelectorList.Expand().Compile().Invoke(x.AttributeTab!),
                AttributeGroupID = x.AttributeGroupID,
                AttributeGroup = ModelMapperForAttributeGroup.PreBuiltAttributeGroupSQLSelectorList.Expand().Compile().Invoke(x.AttributeGroup!),
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenGeneralAttributeSQLSelectorList()
        {
            PreBuiltGeneralAttributeSQLSelectorList = x => x == null ? null! : new AnonGeneralAttribute
            {
                CustomKey = x.CustomKey,
                IsFilter = x.IsFilter,
                IsComparable = x.IsComparable,
                IsPredefined = x.IsPredefined,
                IsMarkup = x.IsMarkup,
                IsTab = x.IsTab,
                HideFromStorefront = x.HideFromStorefront,
                HideFromSuppliers = x.HideFromSuppliers,
                HideFromProductDetailView = x.HideFromProductDetailView,
                HideFromCatalogViews = x.HideFromCatalogViews,
                TypeID = x.TypeID,
                Type = ModelMapperForAttributeType.PreBuiltAttributeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                AttributeTabID = x.AttributeTabID,
                AttributeTab = ModelMapperForAttributeTab.PreBuiltAttributeTabSQLSelectorList.Expand().Compile().Invoke(x.AttributeTab!), // For Flattening Properties (List)
                AttributeGroupID = x.AttributeGroupID,
                AttributeGroup = ModelMapperForAttributeGroup.PreBuiltAttributeGroupSQLSelectorList.Expand().Compile().Invoke(x.AttributeGroup!), // For Flattening Properties (List)
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                ID = x.ID,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IGeneralAttributeModel> SelectFullGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltGeneralAttributeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IGeneralAttributeModel> SelectLiteGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltGeneralAttributeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IGeneralAttributeModel> SelectListGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltGeneralAttributeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityList(x, contextProfileName))!;
        }

        public static IGeneralAttributeModel? SelectFirstFullGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGeneralAttributeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IGeneralAttributeModel? SelectFirstListGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGeneralAttributeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IGeneralAttributeModel? SelectSingleFullGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGeneralAttributeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IGeneralAttributeModel? SelectSingleLiteGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGeneralAttributeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IGeneralAttributeModel? SelectSingleListGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltGeneralAttributeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateGeneralAttributeModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IGeneralAttributeModel> results, int totalPages, int totalCount) SelectFullGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltGeneralAttributeSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateGeneralAttributeModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IGeneralAttributeModel> results, int totalPages, int totalCount) SelectLiteGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltGeneralAttributeSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateGeneralAttributeModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IGeneralAttributeModel> results, int totalPages, int totalCount) SelectListGeneralAttributeAndMapToGeneralAttributeModel(
            this IQueryable<GeneralAttribute> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltGeneralAttributeSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltGeneralAttributeSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateGeneralAttributeModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IGeneralAttributeModel? CreateGeneralAttributeModelFromEntityFull(this IGeneralAttribute? entity, string? contextProfileName)
        {
            return CreateGeneralAttributeModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IGeneralAttributeModel? CreateGeneralAttributeModelFromEntityLite(this IGeneralAttribute? entity, string? contextProfileName)
        {
            return CreateGeneralAttributeModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IGeneralAttributeModel? CreateGeneralAttributeModelFromEntityList(this IGeneralAttribute? entity, string? contextProfileName)
        {
            return CreateGeneralAttributeModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IGeneralAttributeModel? CreateGeneralAttributeModelFromEntity(
            this IGeneralAttribute? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapTypableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IGeneralAttributeModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // GeneralAttribute's Properties
                    // GeneralAttribute's Related Objects
                    // GeneralAttribute's Associated Objects
                    // Additional Mappings
                    if (CreateGeneralAttributeModelFromEntityHooksFull != null) { model = CreateGeneralAttributeModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // GeneralAttribute's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForAttributeType.CreateAttributeTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // GeneralAttribute's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AttributeGroup = ModelMapperForAttributeGroup.CreateAttributeGroupModelFromEntityLite(entity.AttributeGroup, contextProfileName);
                    model.AttributeTab = ModelMapperForAttributeTab.CreateAttributeTabModelFromEntityLite(entity.AttributeTab, contextProfileName);
                    // GeneralAttribute's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateGeneralAttributeModelFromEntityHooksLite != null) { model = CreateGeneralAttributeModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // GeneralAttribute's Properties
                    model.HideFromCatalogViews = entity.HideFromCatalogViews;
                    model.HideFromProductDetailView = entity.HideFromProductDetailView;
                    model.HideFromStorefront = entity.HideFromStorefront;
                    model.HideFromSuppliers = entity.HideFromSuppliers;
                    model.IsComparable = entity.IsComparable;
                    model.IsFilter = entity.IsFilter;
                    model.IsMarkup = entity.IsMarkup;
                    model.IsPredefined = entity.IsPredefined;
                    model.IsTab = entity.IsTab;
                    // GeneralAttribute's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AttributeGroupID = entity.AttributeGroupID;
                    model.AttributeGroupKey = entity.AttributeGroup?.CustomKey;
                    model.AttributeGroupName = entity.AttributeGroup?.Name;
                    model.AttributeGroupDisplayName = entity.AttributeGroup?.DisplayName;
                    model.AttributeTabID = entity.AttributeTabID;
                    model.AttributeTabKey = entity.AttributeTab?.CustomKey;
                    model.AttributeTabName = entity.AttributeTab?.Name;
                    model.AttributeTabDisplayName = entity.AttributeTab?.DisplayName;
                    // GeneralAttribute's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateGeneralAttributeModelFromEntityHooksList != null) { model = CreateGeneralAttributeModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
