// <autogenerated>
// <copyright file="Mapping.Shopping.Cart.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shopping section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCart
    {
        public sealed class AnonCart : Cart
        {
            public new IEnumerable<AppliedCartDiscount>? Discounts { get; set; }
            public new IEnumerable<CartContact>? Contacts { get; set; }
            public new IEnumerable<CartFile>? StoredFiles { get; set; }
            public new IEnumerable<CartItem>? SalesItems { get; set; }
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<RateQuote>? RateQuotes { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Cart?, string?, ICartModel?> MapCartModelFromEntityFull = CreateCartModelFromEntityFull;

        public static readonly Func<Cart?, string?, ICartModel?> MapCartModelFromEntityLite = CreateCartModelFromEntityLite;

        public static readonly Func<Cart?, string?, ICartModel?> MapCartModelFromEntityList = CreateCartModelFromEntityList;

        public static Func<ICart, ICartModel, string?, ICartModel>? CreateCartModelFromEntityHooksFull { get; set; }

        public static Func<ICart, ICartModel, string?, ICartModel>? CreateCartModelFromEntityHooksLite { get; set; }

        public static Func<ICart, ICartModel, string?, ICartModel>? CreateCartModelFromEntityHooksList { get; set; }

        public static Expression<Func<Cart, AnonCart>>? PreBuiltCartSQLSelectorFull { get; set; }

        public static Expression<Func<Cart, AnonCart>>? PreBuiltCartSQLSelectorLite { get; set; }

        public static Expression<Func<Cart, AnonCart>>? PreBuiltCartSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICartModel"/> extension method that creates a(n) <see cref="Cart"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Cart"/> entity.</returns>
        public static ICart CreateCartEntity(
            this ICartModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ICartModel, Cart>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCartFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICartModel"/> extension method that updates a(n) <see cref="Cart"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Cart"/> entity.</returns>
        public static ICart UpdateCartFromModel(
            this ICart entity,
            ICartModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapSalesCollectionBaseModelPropertiesToEntity<ICartModel,
                    ICart,
                    Cart,
                    CartStatus,
                    CartType,
                    CartItem,
                    AppliedCartDiscount,
                    CartState,
                    CartFile,
                    CartContact,
                    CartEvent,
                    CartEventType>(Contract.RequiresNotNull(model));
            // Cart Properties
            entity.RequestedShipDate = model.RequestedShipDate;
            entity.SessionID = model.SessionID;
            entity.SubtotalDiscountsModifier = model.SubtotalDiscountsModifier;
            entity.SubtotalDiscountsModifierMode = model.SubtotalDiscountsModifierMode;
            entity.SubtotalFeesModifier = model.SubtotalFeesModifier;
            entity.SubtotalFeesModifierMode = model.SubtotalFeesModifierMode;
            entity.SubtotalHandlingModifier = model.SubtotalHandlingModifier;
            entity.SubtotalHandlingModifierMode = model.SubtotalHandlingModifierMode;
            entity.SubtotalShippingModifier = model.SubtotalShippingModifier;
            entity.SubtotalShippingModifierMode = model.SubtotalShippingModifierMode;
            entity.SubtotalTaxesModifier = model.SubtotalTaxesModifier;
            entity.SubtotalTaxesModifierMode = model.SubtotalTaxesModifierMode;
            // Cart's Related Objects
            // Cart's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCartSQLSelectorFull()
        {
            PreBuiltCartSQLSelectorFull = x => x == null ? null! : new AnonCart
            {
                Active = x.Active,
                SessionID = x.SessionID,
                TypeID = x.TypeID,
                UserID = x.UserID,
                AccountID = x.AccountID,
                BrandID = x.BrandID,
                FranchiseID = x.FranchiseID,
                StoreID = x.StoreID,
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                SubtotalShippingModifier = x.SubtotalShippingModifier,
                SubtotalShippingModifierMode = x.SubtotalShippingModifierMode,
                SubtotalTaxesModifier = x.SubtotalTaxesModifier,
                SubtotalTaxesModifierMode = x.SubtotalTaxesModifierMode,
                SubtotalFeesModifier = x.SubtotalFeesModifier,
                SubtotalFeesModifierMode = x.SubtotalFeesModifierMode,
                SubtotalHandlingModifier = x.SubtotalHandlingModifier,
                SubtotalHandlingModifierMode = x.SubtotalHandlingModifierMode,
                SubtotalDiscountsModifier = x.SubtotalDiscountsModifier,
                SubtotalDiscountsModifierMode = x.SubtotalDiscountsModifierMode,
                RequestedShipDate = x.RequestedShipDate,
                ShipmentID = x.ShipmentID,
                Shipment = ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile().Invoke(x.Shipment!),
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StatusID = x.StatusID,
                Status = ModelMapperForCartStatus.PreBuiltCartStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StateID = x.StateID,
                State = ModelMapperForCartState.PreBuiltCartStateSQLSelectorList.Expand().Compile().Invoke(x.State!),
                Type = ModelMapperForCartType.PreBuiltCartTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!),
                SalesItems = x.SalesItems!.Where(y => y.Active).Select(ModelMapperForCartItem.PreBuiltCartItemSQLSelectorList.Expand().Compile()).ToList(),
                Discounts = x.Discounts!.Where(y => y.Active).Select(ModelMapperForAppliedCartDiscount.PreBuiltAppliedCartDiscountSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForCartFile.PreBuiltCartFileSQLSelectorList.Expand().Compile()).ToList(),
                Contacts = x.Contacts!.Where(y => y.Active).Select(ModelMapperForCartContact.PreBuiltCartContactSQLSelectorList.Expand().Compile()).ToList(),
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCartSQLSelectorLite()
        {
            PreBuiltCartSQLSelectorLite = x => x == null ? null! : new AnonCart
            {
                Active = x.Active,
                SessionID = x.SessionID,
                TypeID = x.TypeID,
                UserID = x.UserID,
                AccountID = x.AccountID,
                BrandID = x.BrandID,
                FranchiseID = x.FranchiseID,
                StoreID = x.StoreID,
                SubtotalShippingModifier = x.SubtotalShippingModifier,
                SubtotalShippingModifierMode = x.SubtotalShippingModifierMode,
                SubtotalTaxesModifier = x.SubtotalTaxesModifier,
                SubtotalTaxesModifierMode = x.SubtotalTaxesModifierMode,
                SubtotalFeesModifier = x.SubtotalFeesModifier,
                SubtotalFeesModifierMode = x.SubtotalFeesModifierMode,
                SubtotalHandlingModifier = x.SubtotalHandlingModifier,
                SubtotalHandlingModifierMode = x.SubtotalHandlingModifierMode,
                SubtotalDiscountsModifier = x.SubtotalDiscountsModifier,
                SubtotalDiscountsModifierMode = x.SubtotalDiscountsModifierMode,
                RequestedShipDate = x.RequestedShipDate,
                ShipmentID = x.ShipmentID,
                Shipment = ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile().Invoke(x.Shipment!),
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StatusID = x.StatusID,
                Status = ModelMapperForCartStatus.PreBuiltCartStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StateID = x.StateID,
                State = ModelMapperForCartState.PreBuiltCartStateSQLSelectorList.Expand().Compile().Invoke(x.State!),
                Type = ModelMapperForCartType.PreBuiltCartTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!),
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCartSQLSelectorList()
        {
            PreBuiltCartSQLSelectorList = x => x == null ? null! : new AnonCart
            {
                Active = x.Active,
                SessionID = x.SessionID,
                TypeID = x.TypeID,
                UserID = x.UserID,
                AccountID = x.AccountID,
                BrandID = x.BrandID,
                FranchiseID = x.FranchiseID,
                StoreID = x.StoreID,
                SubtotalShippingModifier = x.SubtotalShippingModifier,
                SubtotalShippingModifierMode = x.SubtotalShippingModifierMode,
                SubtotalTaxesModifier = x.SubtotalTaxesModifier,
                SubtotalTaxesModifierMode = x.SubtotalTaxesModifierMode,
                SubtotalFeesModifier = x.SubtotalFeesModifier,
                SubtotalFeesModifierMode = x.SubtotalFeesModifierMode,
                SubtotalHandlingModifier = x.SubtotalHandlingModifier,
                SubtotalHandlingModifierMode = x.SubtotalHandlingModifierMode,
                SubtotalDiscountsModifier = x.SubtotalDiscountsModifier,
                SubtotalDiscountsModifierMode = x.SubtotalDiscountsModifierMode,
                RequestedShipDate = x.RequestedShipDate,
                ShipmentID = x.ShipmentID,
                Shipment = ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile().Invoke(x.Shipment!), // For Flattening Properties (List)
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!), // For Flattening Properties (List)
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!), // For Flattening Properties (List)
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForCartStatus.PreBuiltCartStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                StateID = x.StateID,
                State = ModelMapperForCartState.PreBuiltCartStateSQLSelectorList.Expand().Compile().Invoke(x.State!), // For Flattening Properties (List)
                Type = ModelMapperForCartType.PreBuiltCartTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!), // For Flattening Properties (List)
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!), // For Flattening Properties (List)
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                UserContact = x.User == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.User.Contact!), // For Flattening Properties
            };
        }

        public static IEnumerable<ICartModel> SelectFullCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCartSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICartModel> SelectLiteCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCartSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICartModel> SelectListCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCartSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityList(x, contextProfileName))!;
        }

        public static ICartModel? SelectFirstFullCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICartModel? SelectFirstListCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICartModel? SelectSingleFullCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICartModel? SelectSingleLiteCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICartModel? SelectSingleListCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCartModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICartModel> results, int totalPages, int totalCount) SelectFullCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCartSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCartModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICartModel> results, int totalPages, int totalCount) SelectLiteCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCartSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCartModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICartModel> results, int totalPages, int totalCount) SelectListCartAndMapToCartModel(
            this IQueryable<Cart> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCartSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCartModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICartModel? CreateCartModelFromEntityFull(this ICart? entity, string? contextProfileName)
        {
            return CreateCartModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICartModel? CreateCartModelFromEntityLite(this ICart? entity, string? contextProfileName)
        {
            return CreateCartModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICartModel? CreateCartModelFromEntityList(this ICart? entity, string? contextProfileName)
        {
            return CreateCartModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICartModel? CreateCartModelFromEntity(
            this ICart? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapSalesCollectionBaseEntityPropertiesToModel<ICartModel,
                    ICart,
                    Cart,
                    CartStatus,
                    CartType,
                    ICartTypeModel,
                    CartItem,
                    AppliedCartDiscount,
                    IAppliedCartDiscountModel,
                    IAppliedCartItemDiscountModel,
                    CartState,
                    CartFile,
                    ICartFileModel,
                    CartContact,
                    ICartContactModel,
                    AppliedCartItemDiscount,
                    CartItemTarget,
                    CartEvent,
                    ICartEventModel,
                    CartEventType>(
                RegistryLoaderWrapper.GetInstance<ICartModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ISalesCollectionBase Properties
                    model.SalesItems = (entity is AnonCart ? ((AnonCart)entity).SalesItems : entity.SalesItems)?.Where(x => x.Active).Select(x => ModelMapperForCartItem.CreateCartItemModelFromEntityLite(x, contextProfileName)).ToList()!;
                    model.Discounts = (entity is AnonCart ? ((AnonCart)entity).Discounts : entity.Discounts)?.Where(x => x.Active).Select(x => ModelMapperForAppliedCartDiscount.CreateAppliedCartDiscountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Contacts = (entity is AnonCart ? ((AnonCart)entity).Contacts : entity.Contacts)?.Where(x => x.Active).Select(x => ModelMapperForCartContact.CreateCartContactModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonCart ? ((AnonCart)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForCartFile.CreateCartFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonCart ? ((AnonCart)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Cart's Properties
                    // Cart's Related Objects
                    model.Account = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Account, contextProfileName);
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Franchise = ModelMapperForFranchise.CreateFranchiseModelFromEntityLite(entity.Franchise, contextProfileName);
                    model.Shipment = ModelMapperForShipment.CreateShipmentModelFromEntityLite(entity.Shipment, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // Cart's Associated Objects
                    // Additional Mappings
                    if (CreateCartModelFromEntityHooksFull != null) { model = CreateCartModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Cart's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForCartType.CreateCartTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForCartStatus.CreateCartStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // IHaveAStateBase Properties (Forced)
                    model.State = ModelMapperForCartState.CreateCartStateModelFromEntityLite(entity.State, contextProfileName);
                    // Cart's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Cart's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCartModelFromEntityHooksLite != null) { model = CreateCartModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveAStateBase Properties
                    model.StateID = entity.StateID;
                    if (entity.State != null)
                    {
                        model.StateKey = entity.State.CustomKey;
                        model.StateName = entity.State.Name;
                        model.StateDisplayName = entity.State.DisplayName;
                        model.StateTranslationKey = entity.State.TranslationKey;
                        model.StateSortOrder = entity.State.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Cart's Properties
                    model.RequestedShipDate = entity.RequestedShipDate;
                    model.SessionID = entity.SessionID;
                    model.SubtotalDiscountsModifier = entity.SubtotalDiscountsModifier;
                    model.SubtotalDiscountsModifierMode = entity.SubtotalDiscountsModifierMode;
                    model.SubtotalFeesModifier = entity.SubtotalFeesModifier;
                    model.SubtotalFeesModifierMode = entity.SubtotalFeesModifierMode;
                    model.SubtotalHandlingModifier = entity.SubtotalHandlingModifier;
                    model.SubtotalHandlingModifierMode = entity.SubtotalHandlingModifierMode;
                    model.SubtotalShippingModifier = entity.SubtotalShippingModifier;
                    model.SubtotalShippingModifierMode = entity.SubtotalShippingModifierMode;
                    model.SubtotalTaxesModifier = entity.SubtotalTaxesModifier;
                    model.SubtotalTaxesModifierMode = entity.SubtotalTaxesModifierMode;
                    // Cart's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountID = entity.AccountID;
                    model.AccountKey = entity.Account?.CustomKey;
                    model.AccountName = entity.Account?.Name;
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.FranchiseID = entity.FranchiseID;
                    model.FranchiseKey = entity.Franchise?.CustomKey;
                    model.FranchiseName = entity.Franchise?.Name;
                    model.ShipmentID = entity.ShipmentID;
                    model.ShipmentKey = entity.Shipment?.CustomKey;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    model.UserUserName = entity.User?.UserName;
                    model.UserContactEmail = entity is AnonCart ? ((AnonCart)entity).UserContact?.Email1 : entity.User?.Contact?.Email1;
                    model.UserContactFirstName = entity is AnonCart ? ((AnonCart)entity).UserContact?.FirstName : entity.User?.Contact?.FirstName;
                    model.UserContactLastName = entity is AnonCart ? ((AnonCart)entity).UserContact?.LastName : entity.User?.Contact?.LastName;
                    // Cart's Associated Objects (Not Mapped unless Forced)
                    model.RateQuotes = (entity is AnonCart ? ((AnonCart)entity).RateQuotes : entity.RateQuotes)?.Where(x => x.Active).Select(x => ModelMapperForRateQuote.CreateRateQuoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateCartModelFromEntityHooksList != null) { model = CreateCartModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
