// <autogenerated>
// <copyright file="Mapping.Shopping.CartItemTarget.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shopping section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCartItemTarget
    {
        public sealed class AnonCartItemTarget : CartItemTarget
        {
            // public new CartItem? Master { get; set; }
        }

        public static readonly Func<CartItemTarget?, string?, ISalesItemTargetBaseModel?> MapCartItemTargetModelFromEntityFull = CreateCartItemTargetModelFromEntityFull;

        public static readonly Func<CartItemTarget?, string?, ISalesItemTargetBaseModel?> MapCartItemTargetModelFromEntityLite = CreateCartItemTargetModelFromEntityLite;

        public static readonly Func<CartItemTarget?, string?, ISalesItemTargetBaseModel?> MapCartItemTargetModelFromEntityList = CreateCartItemTargetModelFromEntityList;

        public static Func<ICartItemTarget, ISalesItemTargetBaseModel, string?, ISalesItemTargetBaseModel>? CreateCartItemTargetModelFromEntityHooksFull { get; set; }

        public static Func<ICartItemTarget, ISalesItemTargetBaseModel, string?, ISalesItemTargetBaseModel>? CreateCartItemTargetModelFromEntityHooksLite { get; set; }

        public static Func<ICartItemTarget, ISalesItemTargetBaseModel, string?, ISalesItemTargetBaseModel>? CreateCartItemTargetModelFromEntityHooksList { get; set; }

        public static Expression<Func<CartItemTarget, AnonCartItemTarget>>? PreBuiltCartItemTargetSQLSelectorFull { get; set; }

        public static Expression<Func<CartItemTarget, AnonCartItemTarget>>? PreBuiltCartItemTargetSQLSelectorLite { get; set; }

        public static Expression<Func<CartItemTarget, AnonCartItemTarget>>? PreBuiltCartItemTargetSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISalesItemTargetBaseModel"/> extension method that creates a(n) <see cref="CartItemTarget"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="CartItemTarget"/> entity.</returns>
        public static ICartItemTarget CreateCartItemTargetEntity(
            this ISalesItemTargetBaseModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ISalesItemTargetBaseModel, CartItemTarget>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCartItemTargetFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISalesItemTargetBaseModel"/> extension method that updates a(n) <see cref="CartItemTarget"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="CartItemTarget"/> entity.</returns>
        public static ICartItemTarget UpdateCartItemTargetFromModel(
            this ICartItemTarget entity,
            ISalesItemTargetBaseModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // CartItemTarget Properties
            entity.NothingToShip = model.NothingToShip;
            entity.Quantity = model.Quantity;
            // CartItemTarget's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCartItemTargetSQLSelectorFull()
        {
            PreBuiltCartItemTargetSQLSelectorFull = x => x == null ? null! : new AnonCartItemTarget
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSalesItemTargetType.PreBuiltSalesItemTargetTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Quantity = x.Quantity,
                NothingToShip = x.NothingToShip,
                MasterID = x.MasterID,
                DestinationContactID = x.DestinationContactID,
                DestinationContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.DestinationContact!),
                OriginProductInventoryLocationSectionID = x.OriginProductInventoryLocationSectionID,
                OriginStoreProductID = x.OriginStoreProductID,
                BrandProductID = x.BrandProductID,
                BrandProduct = ModelMapperForBrandProduct.PreBuiltBrandProductSQLSelectorList.Expand().Compile().Invoke(x.BrandProduct!),
                OriginVendorProductID = x.OriginVendorProductID,
                SelectedRateQuoteID = x.SelectedRateQuoteID,
                SelectedRateQuote = ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile().Invoke(x.SelectedRateQuote!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCartItemTargetSQLSelectorLite()
        {
            PreBuiltCartItemTargetSQLSelectorLite = x => x == null ? null! : new AnonCartItemTarget
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSalesItemTargetType.PreBuiltSalesItemTargetTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Quantity = x.Quantity,
                NothingToShip = x.NothingToShip,
                MasterID = x.MasterID,
                DestinationContactID = x.DestinationContactID,
                DestinationContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.DestinationContact!),
                OriginProductInventoryLocationSectionID = x.OriginProductInventoryLocationSectionID,
                OriginStoreProductID = x.OriginStoreProductID,
                BrandProductID = x.BrandProductID,
                BrandProduct = ModelMapperForBrandProduct.PreBuiltBrandProductSQLSelectorList.Expand().Compile().Invoke(x.BrandProduct!),
                OriginVendorProductID = x.OriginVendorProductID,
                SelectedRateQuoteID = x.SelectedRateQuoteID,
                SelectedRateQuote = ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile().Invoke(x.SelectedRateQuote!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCartItemTargetSQLSelectorList()
        {
            PreBuiltCartItemTargetSQLSelectorList = x => x == null ? null! : new AnonCartItemTarget
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSalesItemTargetType.PreBuiltSalesItemTargetTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                Quantity = x.Quantity,
                NothingToShip = x.NothingToShip,
                MasterID = x.MasterID,
                DestinationContactID = x.DestinationContactID,
                DestinationContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.DestinationContact!), // For Flattening Properties (List)
                OriginProductInventoryLocationSectionID = x.OriginProductInventoryLocationSectionID,
                OriginStoreProductID = x.OriginStoreProductID,
                BrandProductID = x.BrandProductID,
                BrandProduct = ModelMapperForBrandProduct.PreBuiltBrandProductSQLSelectorList.Expand().Compile().Invoke(x.BrandProduct!), // For Flattening Properties (List)
                OriginVendorProductID = x.OriginVendorProductID,
                SelectedRateQuoteID = x.SelectedRateQuoteID,
                SelectedRateQuote = ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile().Invoke(x.SelectedRateQuote!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ISalesItemTargetBaseModel> SelectFullCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCartItemTargetSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesItemTargetBaseModel> SelectLiteCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCartItemTargetSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesItemTargetBaseModel> SelectListCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCartItemTargetSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityList(x, contextProfileName))!;
        }

        public static ISalesItemTargetBaseModel? SelectFirstFullCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartItemTargetSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesItemTargetBaseModel? SelectFirstListCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartItemTargetSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesItemTargetBaseModel? SelectSingleFullCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartItemTargetSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesItemTargetBaseModel? SelectSingleLiteCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartItemTargetSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesItemTargetBaseModel? SelectSingleListCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCartItemTargetSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCartItemTargetModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISalesItemTargetBaseModel> results, int totalPages, int totalCount) SelectFullCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCartItemTargetSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCartItemTargetModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesItemTargetBaseModel> results, int totalPages, int totalCount) SelectLiteCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCartItemTargetSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCartItemTargetModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesItemTargetBaseModel> results, int totalPages, int totalCount) SelectListCartItemTargetAndMapToSalesItemTargetBaseModel(
            this IQueryable<CartItemTarget> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCartItemTargetSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCartItemTargetSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCartItemTargetModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISalesItemTargetBaseModel? CreateCartItemTargetModelFromEntityFull(this ICartItemTarget? entity, string? contextProfileName)
        {
            return CreateCartItemTargetModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISalesItemTargetBaseModel? CreateCartItemTargetModelFromEntityLite(this ICartItemTarget? entity, string? contextProfileName)
        {
            return CreateCartItemTargetModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISalesItemTargetBaseModel? CreateCartItemTargetModelFromEntityList(this ICartItemTarget? entity, string? contextProfileName)
        {
            return CreateCartItemTargetModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISalesItemTargetBaseModel? CreateCartItemTargetModelFromEntity(
            this ICartItemTarget? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ISalesItemTargetBaseModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CartItemTarget's Properties
                    // CartItemTarget's Related Objects
                    model.BrandProduct = ModelMapperForBrandProduct.CreateBrandProductModelFromEntityLite(entity.BrandProduct, contextProfileName);
                    model.DestinationContact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.DestinationContact, contextProfileName);
                    model.SelectedRateQuote = ModelMapperForRateQuote.CreateRateQuoteModelFromEntityLite(entity.SelectedRateQuote, contextProfileName);
                    // CartItemTarget's Associated Objects
                    // Additional Mappings
                    if (CreateCartItemTargetModelFromEntityHooksFull != null) { model = CreateCartItemTargetModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CartItemTarget's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForSalesItemTargetType.CreateSalesItemTargetTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // CartItemTarget's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // CartItemTarget's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCartItemTargetModelFromEntityHooksLite != null) { model = CreateCartItemTargetModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // CartItemTarget's Properties
                    model.NothingToShip = entity.NothingToShip;
                    model.Quantity = entity.Quantity;
                    // CartItemTarget's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandProductID = entity.BrandProductID;
                    model.BrandProductKey = entity.BrandProduct?.CustomKey;
                    model.DestinationContactID = entity.DestinationContactID;
                    model.DestinationContactKey = entity.DestinationContact?.CustomKey;
                    model.SelectedRateQuoteID = entity.SelectedRateQuoteID;
                    model.SelectedRateQuoteKey = entity.SelectedRateQuote?.CustomKey;
                    model.SelectedRateQuoteName = entity.SelectedRateQuote?.Name;
                    // CartItemTarget's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCartItemTargetModelFromEntityHooksList != null) { model = CreateCartItemTargetModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
