// <autogenerated>
// <copyright file="Mapping.Manufacturers.ManufacturerImage.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Manufacturers section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForManufacturerImage
    {
        public sealed class AnonManufacturerImage : ManufacturerImage
        {
            // public new Manufacturer? Master { get; set; }
        }

        public static readonly Func<ManufacturerImage?, string?, IManufacturerImageModel?> MapManufacturerImageModelFromEntityFull = CreateManufacturerImageModelFromEntityFull;

        public static readonly Func<ManufacturerImage?, string?, IManufacturerImageModel?> MapManufacturerImageModelFromEntityLite = CreateManufacturerImageModelFromEntityLite;

        public static readonly Func<ManufacturerImage?, string?, IManufacturerImageModel?> MapManufacturerImageModelFromEntityList = CreateManufacturerImageModelFromEntityList;

        public static Func<IManufacturerImage, IManufacturerImageModel, string?, IManufacturerImageModel>? CreateManufacturerImageModelFromEntityHooksFull { get; set; }

        public static Func<IManufacturerImage, IManufacturerImageModel, string?, IManufacturerImageModel>? CreateManufacturerImageModelFromEntityHooksLite { get; set; }

        public static Func<IManufacturerImage, IManufacturerImageModel, string?, IManufacturerImageModel>? CreateManufacturerImageModelFromEntityHooksList { get; set; }

        public static Expression<Func<ManufacturerImage, AnonManufacturerImage>>? PreBuiltManufacturerImageSQLSelectorFull { get; set; }

        public static Expression<Func<ManufacturerImage, AnonManufacturerImage>>? PreBuiltManufacturerImageSQLSelectorLite { get; set; }

        public static Expression<Func<ManufacturerImage, AnonManufacturerImage>>? PreBuiltManufacturerImageSQLSelectorList { get; set; }

        /// <summary>An <see cref="IManufacturerImageModel"/> extension method that creates a(n) <see cref="ManufacturerImage"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ManufacturerImage"/> entity.</returns>
        public static IManufacturerImage CreateManufacturerImageEntity(
            this IManufacturerImageModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IManufacturerImageModel, ManufacturerImage>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateManufacturerImageFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IManufacturerImageModel"/> extension method that updates a(n) <see cref="ManufacturerImage"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ManufacturerImage"/> entity.</returns>
        public static IManufacturerImage UpdateManufacturerImageFromModel(
            this IManufacturerImage entity,
            IManufacturerImageModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ManufacturerImage Properties
            entity.Author = model.Author;
            entity.Copyright = model.Copyright;
            entity.DisplayName = model.DisplayName;
            entity.IsPrimary = model.IsPrimary;
            entity.Latitude = model.Latitude;
            entity.Location = model.Location;
            entity.Longitude = model.Longitude;
            entity.MediaDate = model.MediaDate;
            entity.OriginalBytes = model.OriginalBytes;
            entity.OriginalFileFormat = model.OriginalFileFormat;
            entity.OriginalFileName = model.OriginalFileName;
            entity.OriginalHeight = model.OriginalHeight;
            entity.OriginalIsStoredInDB = model.OriginalIsStoredInDB;
            entity.OriginalWidth = model.OriginalWidth;
            entity.SeoTitle = model.SeoTitle;
            entity.SortOrder = model.SortOrder;
            entity.ThumbnailBytes = model.ThumbnailBytes;
            entity.ThumbnailFileFormat = model.ThumbnailFileFormat;
            entity.ThumbnailFileName = model.ThumbnailFileName;
            entity.ThumbnailHeight = model.ThumbnailHeight;
            entity.ThumbnailIsStoredInDB = model.ThumbnailIsStoredInDB;
            entity.ThumbnailWidth = model.ThumbnailWidth;
            // ManufacturerImage's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenManufacturerImageSQLSelectorFull()
        {
            PreBuiltManufacturerImageSQLSelectorFull = x => x == null ? null! : new AnonManufacturerImage
            {
                MasterID = x.MasterID,
                TypeID = x.TypeID,
                Type = ModelMapperForManufacturerImageType.PreBuiltManufacturerImageTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                SortOrder = x.SortOrder,
                DisplayName = x.DisplayName,
                SeoTitle = x.SeoTitle,
                Author = x.Author,
                MediaDate = x.MediaDate,
                Copyright = x.Copyright,
                Location = x.Location,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                IsPrimary = x.IsPrimary,
                OriginalWidth = x.OriginalWidth,
                OriginalHeight = x.OriginalHeight,
                OriginalFileFormat = x.OriginalFileFormat,
                OriginalFileName = x.OriginalFileName,
                OriginalIsStoredInDB = x.OriginalIsStoredInDB,
                OriginalBytes = x.OriginalBytes,
                ThumbnailWidth = x.ThumbnailWidth,
                ThumbnailHeight = x.ThumbnailHeight,
                ThumbnailFileFormat = x.ThumbnailFileFormat,
                ThumbnailFileName = x.ThumbnailFileName,
                ThumbnailIsStoredInDB = x.ThumbnailIsStoredInDB,
                ThumbnailBytes = x.ThumbnailBytes,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenManufacturerImageSQLSelectorLite()
        {
            PreBuiltManufacturerImageSQLSelectorLite = x => x == null ? null! : new AnonManufacturerImage
            {
                MasterID = x.MasterID,
                TypeID = x.TypeID,
                Type = ModelMapperForManufacturerImageType.PreBuiltManufacturerImageTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                SortOrder = x.SortOrder,
                DisplayName = x.DisplayName,
                SeoTitle = x.SeoTitle,
                Author = x.Author,
                MediaDate = x.MediaDate,
                Copyright = x.Copyright,
                Location = x.Location,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                IsPrimary = x.IsPrimary,
                OriginalWidth = x.OriginalWidth,
                OriginalHeight = x.OriginalHeight,
                OriginalFileFormat = x.OriginalFileFormat,
                OriginalFileName = x.OriginalFileName,
                OriginalIsStoredInDB = x.OriginalIsStoredInDB,
                OriginalBytes = x.OriginalBytes,
                ThumbnailWidth = x.ThumbnailWidth,
                ThumbnailHeight = x.ThumbnailHeight,
                ThumbnailFileFormat = x.ThumbnailFileFormat,
                ThumbnailFileName = x.ThumbnailFileName,
                ThumbnailIsStoredInDB = x.ThumbnailIsStoredInDB,
                ThumbnailBytes = x.ThumbnailBytes,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenManufacturerImageSQLSelectorList()
        {
            PreBuiltManufacturerImageSQLSelectorList = x => x == null ? null! : new AnonManufacturerImage
            {
                MasterID = x.MasterID,
                TypeID = x.TypeID,
                Type = ModelMapperForManufacturerImageType.PreBuiltManufacturerImageTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                SortOrder = x.SortOrder,
                DisplayName = x.DisplayName,
                SeoTitle = x.SeoTitle,
                Author = x.Author,
                MediaDate = x.MediaDate,
                Copyright = x.Copyright,
                Location = x.Location,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                IsPrimary = x.IsPrimary,
                OriginalWidth = x.OriginalWidth,
                OriginalHeight = x.OriginalHeight,
                OriginalFileFormat = x.OriginalFileFormat,
                OriginalFileName = x.OriginalFileName,
                OriginalIsStoredInDB = x.OriginalIsStoredInDB,
                OriginalBytes = x.OriginalBytes,
                ThumbnailWidth = x.ThumbnailWidth,
                ThumbnailHeight = x.ThumbnailHeight,
                ThumbnailFileFormat = x.ThumbnailFileFormat,
                ThumbnailFileName = x.ThumbnailFileName,
                ThumbnailIsStoredInDB = x.ThumbnailIsStoredInDB,
                ThumbnailBytes = x.ThumbnailBytes,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IManufacturerImageModel> SelectFullManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltManufacturerImageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IManufacturerImageModel> SelectLiteManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltManufacturerImageSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IManufacturerImageModel> SelectListManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltManufacturerImageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityList(x, contextProfileName))!;
        }

        public static IManufacturerImageModel? SelectFirstFullManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltManufacturerImageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IManufacturerImageModel? SelectFirstListManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltManufacturerImageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IManufacturerImageModel? SelectSingleFullManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltManufacturerImageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IManufacturerImageModel? SelectSingleLiteManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltManufacturerImageSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IManufacturerImageModel? SelectSingleListManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltManufacturerImageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateManufacturerImageModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IManufacturerImageModel> results, int totalPages, int totalCount) SelectFullManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltManufacturerImageSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateManufacturerImageModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IManufacturerImageModel> results, int totalPages, int totalCount) SelectLiteManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltManufacturerImageSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateManufacturerImageModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IManufacturerImageModel> results, int totalPages, int totalCount) SelectListManufacturerImageAndMapToManufacturerImageModel(
            this IQueryable<ManufacturerImage> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltManufacturerImageSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltManufacturerImageSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateManufacturerImageModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IManufacturerImageModel? CreateManufacturerImageModelFromEntityFull(this IManufacturerImage? entity, string? contextProfileName)
        {
            return CreateManufacturerImageModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IManufacturerImageModel? CreateManufacturerImageModelFromEntityLite(this IManufacturerImage? entity, string? contextProfileName)
        {
            return CreateManufacturerImageModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IManufacturerImageModel? CreateManufacturerImageModelFromEntityList(this IManufacturerImage? entity, string? contextProfileName)
        {
            return CreateManufacturerImageModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IManufacturerImageModel? CreateManufacturerImageModelFromEntity(
            this IManufacturerImage? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IManufacturerImageModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ManufacturerImage's Properties
                    // ManufacturerImage's Related Objects
                    // ManufacturerImage's Associated Objects
                    // Additional Mappings
                    if (CreateManufacturerImageModelFromEntityHooksFull != null) { model = CreateManufacturerImageModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ManufacturerImage's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForManufacturerImageType.CreateManufacturerImageTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // ManufacturerImage's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ManufacturerImage's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateManufacturerImageModelFromEntityHooksLite != null) { model = CreateManufacturerImageModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // IImageBase Properties
                    model.MasterID = entity.MasterID;
                    // ManufacturerImage's Properties
                    model.Author = entity.Author;
                    model.Copyright = entity.Copyright;
                    model.DisplayName = entity.DisplayName;
                    model.IsPrimary = entity.IsPrimary;
                    model.Latitude = entity.Latitude;
                    model.Location = entity.Location;
                    model.Longitude = entity.Longitude;
                    model.MediaDate = entity.MediaDate;
                    model.OriginalBytes = entity.OriginalBytes;
                    model.OriginalFileFormat = entity.OriginalFileFormat;
                    model.OriginalFileName = entity.OriginalFileName;
                    model.OriginalHeight = entity.OriginalHeight;
                    model.OriginalIsStoredInDB = entity.OriginalIsStoredInDB;
                    model.OriginalWidth = entity.OriginalWidth;
                    model.SeoTitle = entity.SeoTitle;
                    model.SortOrder = entity.SortOrder;
                    model.ThumbnailBytes = entity.ThumbnailBytes;
                    model.ThumbnailFileFormat = entity.ThumbnailFileFormat;
                    model.ThumbnailFileName = entity.ThumbnailFileName;
                    model.ThumbnailHeight = entity.ThumbnailHeight;
                    model.ThumbnailIsStoredInDB = entity.ThumbnailIsStoredInDB;
                    model.ThumbnailWidth = entity.ThumbnailWidth;
                    // ManufacturerImage's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ManufacturerImage's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateManufacturerImageModelFromEntityHooksList != null) { model = CreateManufacturerImageModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
