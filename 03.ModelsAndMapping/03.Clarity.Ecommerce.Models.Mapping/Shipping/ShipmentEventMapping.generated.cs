// <autogenerated>
// <copyright file="Mapping.Shipping.ShipmentEvent.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shipping section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForShipmentEvent
    {
        public sealed class AnonShipmentEvent : ShipmentEvent
        {
        }

        public static readonly Func<ShipmentEvent?, string?, IShipmentEventModel?> MapShipmentEventModelFromEntityFull = CreateShipmentEventModelFromEntityFull;

        public static readonly Func<ShipmentEvent?, string?, IShipmentEventModel?> MapShipmentEventModelFromEntityLite = CreateShipmentEventModelFromEntityLite;

        public static readonly Func<ShipmentEvent?, string?, IShipmentEventModel?> MapShipmentEventModelFromEntityList = CreateShipmentEventModelFromEntityList;

        public static Func<IShipmentEvent, IShipmentEventModel, string?, IShipmentEventModel>? CreateShipmentEventModelFromEntityHooksFull { get; set; }

        public static Func<IShipmentEvent, IShipmentEventModel, string?, IShipmentEventModel>? CreateShipmentEventModelFromEntityHooksLite { get; set; }

        public static Func<IShipmentEvent, IShipmentEventModel, string?, IShipmentEventModel>? CreateShipmentEventModelFromEntityHooksList { get; set; }

        public static Expression<Func<ShipmentEvent, AnonShipmentEvent>>? PreBuiltShipmentEventSQLSelectorFull { get; set; }

        public static Expression<Func<ShipmentEvent, AnonShipmentEvent>>? PreBuiltShipmentEventSQLSelectorLite { get; set; }

        public static Expression<Func<ShipmentEvent, AnonShipmentEvent>>? PreBuiltShipmentEventSQLSelectorList { get; set; }

        /// <summary>An <see cref="IShipmentEventModel"/> extension method that creates a(n) <see cref="ShipmentEvent"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ShipmentEvent"/> entity.</returns>
        public static IShipmentEvent CreateShipmentEventEntity(
            this IShipmentEventModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IShipmentEventModel, ShipmentEvent>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateShipmentEventFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IShipmentEventModel"/> extension method that updates a(n) <see cref="ShipmentEvent"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ShipmentEvent"/> entity.</returns>
        public static IShipmentEvent UpdateShipmentEventFromModel(
            this IShipmentEvent entity,
            IShipmentEventModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ShipmentEvent Properties
            entity.EventDate = model.EventDate;
            entity.Note = model.Note;
            // ShipmentEvent's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenShipmentEventSQLSelectorFull()
        {
            PreBuiltShipmentEventSQLSelectorFull = x => x == null ? null! : new AnonShipmentEvent
            {
                Note = x.Note,
                EventDate = x.EventDate,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                ShipmentID = x.ShipmentID,
                Shipment = ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile().Invoke(x.Shipment!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipmentEventSQLSelectorLite()
        {
            PreBuiltShipmentEventSQLSelectorLite = x => x == null ? null! : new AnonShipmentEvent
            {
                Note = x.Note,
                EventDate = x.EventDate,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                ShipmentID = x.ShipmentID,
                Shipment = ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile().Invoke(x.Shipment!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipmentEventSQLSelectorList()
        {
            PreBuiltShipmentEventSQLSelectorList = x => x == null ? null! : new AnonShipmentEvent
            {
                Note = x.Note,
                EventDate = x.EventDate,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!), // For Flattening Properties (List)
                ShipmentID = x.ShipmentID,
                Shipment = ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile().Invoke(x.Shipment!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IShipmentEventModel> SelectFullShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentEventSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IShipmentEventModel> SelectLiteShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentEventSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IShipmentEventModel> SelectListShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentEventSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityList(x, contextProfileName))!;
        }

        public static IShipmentEventModel? SelectFirstFullShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentEventSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipmentEventModel? SelectFirstListShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentEventSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipmentEventModel? SelectSingleFullShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentEventSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipmentEventModel? SelectSingleLiteShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentEventSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipmentEventModel? SelectSingleListShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentEventSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentEventModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IShipmentEventModel> results, int totalPages, int totalCount) SelectFullShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentEventSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentEventModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipmentEventModel> results, int totalPages, int totalCount) SelectLiteShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentEventSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentEventModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipmentEventModel> results, int totalPages, int totalCount) SelectListShipmentEventAndMapToShipmentEventModel(
            this IQueryable<ShipmentEvent> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentEventSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentEventSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentEventModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IShipmentEventModel? CreateShipmentEventModelFromEntityFull(this IShipmentEvent? entity, string? contextProfileName)
        {
            return CreateShipmentEventModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IShipmentEventModel? CreateShipmentEventModelFromEntityLite(this IShipmentEvent? entity, string? contextProfileName)
        {
            return CreateShipmentEventModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IShipmentEventModel? CreateShipmentEventModelFromEntityList(this IShipmentEvent? entity, string? contextProfileName)
        {
            return CreateShipmentEventModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IShipmentEventModel? CreateShipmentEventModelFromEntity(
            this IShipmentEvent? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IShipmentEventModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ShipmentEvent's Properties
                    // ShipmentEvent's Related Objects
                    model.Shipment = ModelMapperForShipment.CreateShipmentModelFromEntityLite(entity.Shipment, contextProfileName);
                    // ShipmentEvent's Associated Objects
                    // Additional Mappings
                    if (CreateShipmentEventModelFromEntityHooksFull != null) { model = CreateShipmentEventModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ShipmentEvent's Properties
                    // ShipmentEvent's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Address = ModelMapperForAddress.CreateAddressModelFromEntityLite(entity.Address, contextProfileName);
                    // ShipmentEvent's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipmentEventModelFromEntityHooksLite != null) { model = CreateShipmentEventModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ShipmentEvent's Properties
                    model.EventDate = entity.EventDate;
                    model.Note = entity.Note;
                    // ShipmentEvent's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AddressID = entity.AddressID;
                    model.AddressKey = entity.Address?.CustomKey;
                    model.ShipmentID = entity.ShipmentID;
                    model.ShipmentKey = entity.Shipment?.CustomKey;
                    // ShipmentEvent's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipmentEventModelFromEntityHooksList != null) { model = CreateShipmentEventModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
