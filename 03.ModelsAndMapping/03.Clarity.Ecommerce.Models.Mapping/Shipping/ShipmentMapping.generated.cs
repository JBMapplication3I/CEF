// <autogenerated>
// <copyright file="Mapping.Shipping.Shipment.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shipping section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForShipment
    {
        public sealed class AnonShipment : Shipment
        {
            public new IEnumerable<ShipmentEvent>? ShipmentEvents { get; set; }
            public new IEnumerable<ShipmentLine>? ShipmentLines { get; set; }
        }

        public static readonly Func<Shipment?, string?, IShipmentModel?> MapShipmentModelFromEntityFull = CreateShipmentModelFromEntityFull;

        public static readonly Func<Shipment?, string?, IShipmentModel?> MapShipmentModelFromEntityLite = CreateShipmentModelFromEntityLite;

        public static readonly Func<Shipment?, string?, IShipmentModel?> MapShipmentModelFromEntityList = CreateShipmentModelFromEntityList;

        public static Func<IShipment, IShipmentModel, string?, IShipmentModel>? CreateShipmentModelFromEntityHooksFull { get; set; }

        public static Func<IShipment, IShipmentModel, string?, IShipmentModel>? CreateShipmentModelFromEntityHooksLite { get; set; }

        public static Func<IShipment, IShipmentModel, string?, IShipmentModel>? CreateShipmentModelFromEntityHooksList { get; set; }

        public static Expression<Func<Shipment, AnonShipment>>? PreBuiltShipmentSQLSelectorFull { get; set; }

        public static Expression<Func<Shipment, AnonShipment>>? PreBuiltShipmentSQLSelectorLite { get; set; }

        public static Expression<Func<Shipment, AnonShipment>>? PreBuiltShipmentSQLSelectorList { get; set; }

        /// <summary>An <see cref="IShipmentModel"/> extension method that creates a(n) <see cref="Shipment"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Shipment"/> entity.</returns>
        public static IShipment CreateShipmentEntity(
            this IShipmentModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IShipmentModel, Shipment>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateShipmentFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IShipmentModel"/> extension method that updates a(n) <see cref="Shipment"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Shipment"/> entity.</returns>
        public static IShipment UpdateShipmentFromModel(
            this IShipment entity,
            IShipmentModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Shipment Properties
            entity.DateDelivered = model.DateDelivered;
            entity.Destination = model.Destination;
            entity.EstimatedDeliveryDate = model.EstimatedDeliveryDate;
            entity.NegotiatedRate = model.NegotiatedRate;
            entity.PublishedRate = model.PublishedRate;
            entity.Reference1 = model.Reference1;
            entity.Reference2 = model.Reference2;
            entity.Reference3 = model.Reference3;
            entity.ShipDate = model.ShipDate;
            entity.TargetShippingDate = model.TargetShippingDate;
            entity.TrackingNumber = model.TrackingNumber;
            // Shipment's Related Objects
            // Shipment's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenShipmentSQLSelectorFull()
        {
            PreBuiltShipmentSQLSelectorFull = x => x == null ? null! : new AnonShipment
            {
                TypeID = x.TypeID,
                Type = ModelMapperForShipmentType.PreBuiltShipmentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForShipmentStatus.PreBuiltShipmentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                Reference1 = x.Reference1,
                Reference2 = x.Reference2,
                Reference3 = x.Reference3,
                TrackingNumber = x.TrackingNumber,
                Destination = x.Destination,
                TargetShippingDate = x.TargetShippingDate,
                EstimatedDeliveryDate = x.EstimatedDeliveryDate,
                ShipDate = x.ShipDate,
                DateDelivered = x.DateDelivered,
                NegotiatedRate = x.NegotiatedRate,
                PublishedRate = x.PublishedRate,
                OriginContactID = x.OriginContactID,
                OriginContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.OriginContact!),
                DestinationContactID = x.DestinationContactID,
                DestinationContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.DestinationContact!),
                InventoryLocationSectionID = x.InventoryLocationSectionID,
                InventoryLocationSection = ModelMapperForInventoryLocationSection.PreBuiltInventoryLocationSectionSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocationSection!),
                ShipCarrierID = x.ShipCarrierID,
                ShipCarrier = ModelMapperForShipCarrier.PreBuiltShipCarrierSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrier!),
                ShipCarrierMethodID = x.ShipCarrierMethodID,
                ShipCarrierMethod = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrierMethod!),
                VendorID = x.VendorID,
                SalesGroupID = x.SalesGroupID,
                SalesOrderID = x.SalesOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                ShipmentEvents = x.ShipmentEvents!.Where(y => y.Active).Select(ModelMapperForShipmentEvent.PreBuiltShipmentEventSQLSelectorList.Expand().Compile()).ToList(),
                ShipmentLines = x.ShipmentLines!.Where(y => y.Active).Select(ModelMapperForShipmentLine.PreBuiltShipmentLineSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipmentSQLSelectorLite()
        {
            PreBuiltShipmentSQLSelectorLite = x => x == null ? null! : new AnonShipment
            {
                TypeID = x.TypeID,
                Type = ModelMapperForShipmentType.PreBuiltShipmentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForShipmentStatus.PreBuiltShipmentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                Reference1 = x.Reference1,
                Reference2 = x.Reference2,
                Reference3 = x.Reference3,
                TrackingNumber = x.TrackingNumber,
                Destination = x.Destination,
                TargetShippingDate = x.TargetShippingDate,
                EstimatedDeliveryDate = x.EstimatedDeliveryDate,
                ShipDate = x.ShipDate,
                DateDelivered = x.DateDelivered,
                NegotiatedRate = x.NegotiatedRate,
                PublishedRate = x.PublishedRate,
                OriginContactID = x.OriginContactID,
                OriginContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.OriginContact!),
                DestinationContactID = x.DestinationContactID,
                DestinationContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.DestinationContact!),
                InventoryLocationSectionID = x.InventoryLocationSectionID,
                InventoryLocationSection = ModelMapperForInventoryLocationSection.PreBuiltInventoryLocationSectionSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocationSection!),
                ShipCarrierID = x.ShipCarrierID,
                ShipCarrier = ModelMapperForShipCarrier.PreBuiltShipCarrierSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrier!),
                ShipCarrierMethodID = x.ShipCarrierMethodID,
                ShipCarrierMethod = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrierMethod!),
                VendorID = x.VendorID,
                SalesGroupID = x.SalesGroupID,
                SalesOrderID = x.SalesOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipmentSQLSelectorList()
        {
            PreBuiltShipmentSQLSelectorList = x => x == null ? null! : new AnonShipment
            {
                TypeID = x.TypeID,
                Type = ModelMapperForShipmentType.PreBuiltShipmentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForShipmentStatus.PreBuiltShipmentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                Reference1 = x.Reference1,
                Reference2 = x.Reference2,
                Reference3 = x.Reference3,
                TrackingNumber = x.TrackingNumber,
                Destination = x.Destination,
                TargetShippingDate = x.TargetShippingDate,
                EstimatedDeliveryDate = x.EstimatedDeliveryDate,
                ShipDate = x.ShipDate,
                DateDelivered = x.DateDelivered,
                NegotiatedRate = x.NegotiatedRate,
                PublishedRate = x.PublishedRate,
                OriginContactID = x.OriginContactID,
                OriginContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.OriginContact!), // For Flattening Properties (List)
                DestinationContactID = x.DestinationContactID,
                DestinationContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.DestinationContact!), // For Flattening Properties (List)
                InventoryLocationSectionID = x.InventoryLocationSectionID,
                InventoryLocationSection = ModelMapperForInventoryLocationSection.PreBuiltInventoryLocationSectionSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocationSection!), // For Flattening Properties (List)
                ShipCarrierID = x.ShipCarrierID,
                ShipCarrier = ModelMapperForShipCarrier.PreBuiltShipCarrierSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrier!), // For Flattening Properties (List)
                ShipCarrierMethodID = x.ShipCarrierMethodID,
                ShipCarrierMethod = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrierMethod!), // For Flattening Properties (List)
                VendorID = x.VendorID,
                SalesGroupID = x.SalesGroupID,
                SalesOrderID = x.SalesOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IShipmentModel> SelectFullShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IShipmentModel> SelectLiteShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IShipmentModel> SelectListShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityList(x, contextProfileName))!;
        }

        public static IShipmentModel? SelectFirstFullShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipmentModel? SelectFirstListShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipmentModel? SelectSingleFullShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipmentModel? SelectSingleLiteShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipmentModel? SelectSingleListShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IShipmentModel> results, int totalPages, int totalCount) SelectFullShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipmentModel> results, int totalPages, int totalCount) SelectLiteShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipmentModel> results, int totalPages, int totalCount) SelectListShipmentAndMapToShipmentModel(
            this IQueryable<Shipment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IShipmentModel? CreateShipmentModelFromEntityFull(this IShipment? entity, string? contextProfileName)
        {
            return CreateShipmentModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IShipmentModel? CreateShipmentModelFromEntityLite(this IShipment? entity, string? contextProfileName)
        {
            return CreateShipmentModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IShipmentModel? CreateShipmentModelFromEntityList(this IShipment? entity, string? contextProfileName)
        {
            return CreateShipmentModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IShipmentModel? CreateShipmentModelFromEntity(
            this IShipment? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IShipmentModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Shipment's Properties
                    // Shipment's Related Objects
                    model.InventoryLocationSection = ModelMapperForInventoryLocationSection.CreateInventoryLocationSectionModelFromEntityLite(entity.InventoryLocationSection, contextProfileName);
                    model.ShipCarrier = ModelMapperForShipCarrier.CreateShipCarrierModelFromEntityLite(entity.ShipCarrier, contextProfileName);
                    model.ShipCarrierMethod = ModelMapperForShipCarrierMethod.CreateShipCarrierMethodModelFromEntityLite(entity.ShipCarrierMethod, contextProfileName);
                    // Shipment's Associated Objects
                    model.ShipmentEvents = (entity is AnonShipment ? ((AnonShipment)entity).ShipmentEvents : entity.ShipmentEvents)?.Where(x => x.Active).Select(x => ModelMapperForShipmentEvent.CreateShipmentEventModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ShipmentLines = (entity is AnonShipment ? ((AnonShipment)entity).ShipmentLines : entity.ShipmentLines)?.Where(x => x.Active).Select(x => ModelMapperForShipmentLine.CreateShipmentLineModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateShipmentModelFromEntityHooksFull != null) { model = CreateShipmentModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Shipment's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForShipmentType.CreateShipmentTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForShipmentStatus.CreateShipmentStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Shipment's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.DestinationContact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.DestinationContact, contextProfileName);
                    model.OriginContact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.OriginContact, contextProfileName);
                    // Shipment's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipmentModelFromEntityHooksLite != null) { model = CreateShipmentModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Shipment's Properties
                    model.DateDelivered = entity.DateDelivered;
                    model.Destination = entity.Destination;
                    model.EstimatedDeliveryDate = entity.EstimatedDeliveryDate;
                    model.NegotiatedRate = entity.NegotiatedRate;
                    model.PublishedRate = entity.PublishedRate;
                    model.Reference1 = entity.Reference1;
                    model.Reference2 = entity.Reference2;
                    model.Reference3 = entity.Reference3;
                    model.ShipDate = entity.ShipDate;
                    model.TargetShippingDate = entity.TargetShippingDate;
                    model.TrackingNumber = entity.TrackingNumber;
                    // Shipment's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.DestinationContactID = entity.DestinationContactID;
                    model.DestinationContactKey = entity.DestinationContact?.CustomKey;
                    model.InventoryLocationSectionID = entity.InventoryLocationSectionID;
                    model.InventoryLocationSectionKey = entity.InventoryLocationSection?.CustomKey;
                    model.InventoryLocationSectionName = entity.InventoryLocationSection?.Name;
                    model.OriginContactID = entity.OriginContactID;
                    model.OriginContactKey = entity.OriginContact?.CustomKey;
                    model.ShipCarrierID = entity.ShipCarrierID;
                    model.ShipCarrierKey = entity.ShipCarrier?.CustomKey;
                    model.ShipCarrierName = entity.ShipCarrier?.Name;
                    model.ShipCarrierMethodID = entity.ShipCarrierMethodID;
                    model.ShipCarrierMethodKey = entity.ShipCarrierMethod?.CustomKey;
                    model.ShipCarrierMethodName = entity.ShipCarrierMethod?.Name;
                    // Shipment's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipmentModelFromEntityHooksList != null) { model = CreateShipmentModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
