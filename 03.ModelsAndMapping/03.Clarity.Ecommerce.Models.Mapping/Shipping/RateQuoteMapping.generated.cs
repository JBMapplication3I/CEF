// <autogenerated>
// <copyright file="Mapping.Shipping.RateQuote.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shipping section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForRateQuote
    {
        public sealed class AnonRateQuote : RateQuote
        {
        }

        public static readonly Func<RateQuote?, string?, IRateQuoteModel?> MapRateQuoteModelFromEntityFull = CreateRateQuoteModelFromEntityFull;

        public static readonly Func<RateQuote?, string?, IRateQuoteModel?> MapRateQuoteModelFromEntityLite = CreateRateQuoteModelFromEntityLite;

        public static readonly Func<RateQuote?, string?, IRateQuoteModel?> MapRateQuoteModelFromEntityList = CreateRateQuoteModelFromEntityList;

        public static Func<IRateQuote, IRateQuoteModel, string?, IRateQuoteModel>? CreateRateQuoteModelFromEntityHooksFull { get; set; }

        public static Func<IRateQuote, IRateQuoteModel, string?, IRateQuoteModel>? CreateRateQuoteModelFromEntityHooksLite { get; set; }

        public static Func<IRateQuote, IRateQuoteModel, string?, IRateQuoteModel>? CreateRateQuoteModelFromEntityHooksList { get; set; }

        public static Expression<Func<RateQuote, AnonRateQuote>>? PreBuiltRateQuoteSQLSelectorFull { get; set; }

        public static Expression<Func<RateQuote, AnonRateQuote>>? PreBuiltRateQuoteSQLSelectorLite { get; set; }

        public static Expression<Func<RateQuote, AnonRateQuote>>? PreBuiltRateQuoteSQLSelectorList { get; set; }

        /// <summary>An <see cref="IRateQuoteModel"/> extension method that creates a(n) <see cref="RateQuote"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="RateQuote"/> entity.</returns>
        public static IRateQuote CreateRateQuoteEntity(
            this IRateQuoteModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IRateQuoteModel, RateQuote>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateRateQuoteFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IRateQuoteModel"/> extension method that updates a(n) <see cref="RateQuote"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="RateQuote"/> entity.</returns>
        public static IRateQuote UpdateRateQuoteFromModel(
            this IRateQuote entity,
            IRateQuoteModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // RateQuote Properties
            entity.CartHash = model.CartHash;
            entity.EstimatedDeliveryDate = model.EstimatedDeliveryDate;
            entity.Rate = model.Rate;
            entity.RateTimestamp = model.RateTimestamp;
            entity.Selected = model.Selected;
            entity.TargetShippingDate = model.TargetShippingDate;
            // RateQuote's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenRateQuoteSQLSelectorFull()
        {
            PreBuiltRateQuoteSQLSelectorFull = x => x == null ? null! : new AnonRateQuote
            {
                EstimatedDeliveryDate = x.EstimatedDeliveryDate,
                TargetShippingDate = x.TargetShippingDate,
                Rate = x.Rate,
                CartHash = x.CartHash,
                RateTimestamp = x.RateTimestamp,
                Selected = x.Selected,
                ShipCarrierMethodID = x.ShipCarrierMethodID,
                ShipCarrierMethod = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrierMethod!),
                CartID = x.CartID,
                SampleRequestID = x.SampleRequestID,
                SalesQuoteID = x.SalesQuoteID,
                SalesOrderID = x.SalesOrderID,
                PurchaseOrderID = x.PurchaseOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                SalesReturnID = x.SalesReturnID,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenRateQuoteSQLSelectorLite()
        {
            PreBuiltRateQuoteSQLSelectorLite = x => x == null ? null! : new AnonRateQuote
            {
                EstimatedDeliveryDate = x.EstimatedDeliveryDate,
                TargetShippingDate = x.TargetShippingDate,
                Rate = x.Rate,
                CartHash = x.CartHash,
                RateTimestamp = x.RateTimestamp,
                Selected = x.Selected,
                ShipCarrierMethodID = x.ShipCarrierMethodID,
                ShipCarrierMethod = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrierMethod!),
                CartID = x.CartID,
                SampleRequestID = x.SampleRequestID,
                SalesQuoteID = x.SalesQuoteID,
                SalesOrderID = x.SalesOrderID,
                PurchaseOrderID = x.PurchaseOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                SalesReturnID = x.SalesReturnID,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenRateQuoteSQLSelectorList()
        {
            PreBuiltRateQuoteSQLSelectorList = x => x == null ? null! : new AnonRateQuote
            {
                EstimatedDeliveryDate = x.EstimatedDeliveryDate,
                TargetShippingDate = x.TargetShippingDate,
                Rate = x.Rate,
                CartHash = x.CartHash,
                RateTimestamp = x.RateTimestamp,
                Selected = x.Selected,
                ShipCarrierMethodID = x.ShipCarrierMethodID,
                ShipCarrierMethod = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrierMethod!), // For Flattening Properties (List)
                CartID = x.CartID,
                SampleRequestID = x.SampleRequestID,
                SalesQuoteID = x.SalesQuoteID,
                SalesOrderID = x.SalesOrderID,
                PurchaseOrderID = x.PurchaseOrderID,
                SalesInvoiceID = x.SalesInvoiceID,
                SalesReturnID = x.SalesReturnID,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IRateQuoteModel> SelectFullRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltRateQuoteSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IRateQuoteModel> SelectLiteRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltRateQuoteSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IRateQuoteModel> SelectListRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltRateQuoteSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityList(x, contextProfileName))!;
        }

        public static IRateQuoteModel? SelectFirstFullRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRateQuoteSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IRateQuoteModel? SelectFirstListRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRateQuoteSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IRateQuoteModel? SelectSingleFullRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRateQuoteSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IRateQuoteModel? SelectSingleLiteRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRateQuoteSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IRateQuoteModel? SelectSingleListRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRateQuoteSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateRateQuoteModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IRateQuoteModel> results, int totalPages, int totalCount) SelectFullRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltRateQuoteSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateRateQuoteModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IRateQuoteModel> results, int totalPages, int totalCount) SelectLiteRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltRateQuoteSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateRateQuoteModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IRateQuoteModel> results, int totalPages, int totalCount) SelectListRateQuoteAndMapToRateQuoteModel(
            this IQueryable<RateQuote> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRateQuoteSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltRateQuoteSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateRateQuoteModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IRateQuoteModel? CreateRateQuoteModelFromEntityFull(this IRateQuote? entity, string? contextProfileName)
        {
            return CreateRateQuoteModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IRateQuoteModel? CreateRateQuoteModelFromEntityLite(this IRateQuote? entity, string? contextProfileName)
        {
            return CreateRateQuoteModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IRateQuoteModel? CreateRateQuoteModelFromEntityList(this IRateQuote? entity, string? contextProfileName)
        {
            return CreateRateQuoteModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IRateQuoteModel? CreateRateQuoteModelFromEntity(
            this IRateQuote? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IRateQuoteModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // RateQuote's Properties
                    // RateQuote's Related Objects
                    // RateQuote's Associated Objects
                    // Additional Mappings
                    if (CreateRateQuoteModelFromEntityHooksFull != null) { model = CreateRateQuoteModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // RateQuote's Properties
                    // RateQuote's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // RateQuote's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateRateQuoteModelFromEntityHooksLite != null) { model = CreateRateQuoteModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // RateQuote's Properties
                    model.CartHash = entity.CartHash;
                    model.EstimatedDeliveryDate = entity.EstimatedDeliveryDate;
                    model.Rate = entity.Rate;
                    model.RateTimestamp = entity.RateTimestamp;
                    model.Selected = entity.Selected;
                    model.TargetShippingDate = entity.TargetShippingDate;
                    // RateQuote's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ShipCarrierMethodID = entity.ShipCarrierMethodID;
                    model.ShipCarrierMethod = ModelMapperForShipCarrierMethod.CreateShipCarrierMethodModelFromEntityLite(entity.ShipCarrierMethod, contextProfileName);
                    model.ShipCarrierMethodKey = entity.ShipCarrierMethod?.CustomKey;
                    model.ShipCarrierMethodName = entity.ShipCarrierMethod?.Name;
                    // RateQuote's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateRateQuoteModelFromEntityHooksList != null) { model = CreateRateQuoteModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
