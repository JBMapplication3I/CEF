// <autogenerated>
// <copyright file="Mapping.Shipping.Package.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shipping section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPackage
    {
        public sealed class AnonPackage : Package
        {
        }

        public static readonly Func<Package?, string?, IPackageModel?> MapPackageModelFromEntityFull = CreatePackageModelFromEntityFull;

        public static readonly Func<Package?, string?, IPackageModel?> MapPackageModelFromEntityLite = CreatePackageModelFromEntityLite;

        public static readonly Func<Package?, string?, IPackageModel?> MapPackageModelFromEntityList = CreatePackageModelFromEntityList;

        public static Func<IPackage, IPackageModel, string?, IPackageModel>? CreatePackageModelFromEntityHooksFull { get; set; }

        public static Func<IPackage, IPackageModel, string?, IPackageModel>? CreatePackageModelFromEntityHooksLite { get; set; }

        public static Func<IPackage, IPackageModel, string?, IPackageModel>? CreatePackageModelFromEntityHooksList { get; set; }

        public static Expression<Func<Package, AnonPackage>>? PreBuiltPackageSQLSelectorFull { get; set; }

        public static Expression<Func<Package, AnonPackage>>? PreBuiltPackageSQLSelectorLite { get; set; }

        public static Expression<Func<Package, AnonPackage>>? PreBuiltPackageSQLSelectorList { get; set; }

        /// <summary>An <see cref="IPackageModel"/> extension method that creates a(n) <see cref="Package"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Package"/> entity.</returns>
        public static IPackage CreatePackageEntity(
            this IPackageModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IPackageModel, Package>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePackageFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IPackageModel"/> extension method that updates a(n) <see cref="Package"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Package"/> entity.</returns>
        public static IPackage UpdatePackageFromModel(
            this IPackage entity,
            IPackageModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Package Properties
            entity.Depth = model.Depth;
            entity.DepthUnitOfMeasure = model.DepthUnitOfMeasure;
            entity.DimensionalWeight = model.DimensionalWeight;
            entity.DimensionalWeightUnitOfMeasure = model.DimensionalWeightUnitOfMeasure;
            entity.Height = model.Height;
            entity.HeightUnitOfMeasure = model.HeightUnitOfMeasure;
            entity.IsCustom = model.IsCustom;
            entity.Weight = model.Weight;
            entity.WeightUnitOfMeasure = model.WeightUnitOfMeasure;
            entity.Width = model.Width;
            entity.WidthUnitOfMeasure = model.WidthUnitOfMeasure;
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPackageSQLSelectorFull()
        {
            PreBuiltPackageSQLSelectorFull = x => x == null ? null! : new AnonPackage
            {
                TypeID = x.TypeID,
                Type = ModelMapperForPackageType.PreBuiltPackageTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Width = x.Width,
                WidthUnitOfMeasure = x.WidthUnitOfMeasure,
                Depth = x.Depth,
                DepthUnitOfMeasure = x.DepthUnitOfMeasure,
                Height = x.Height,
                HeightUnitOfMeasure = x.HeightUnitOfMeasure,
                Weight = x.Weight,
                WeightUnitOfMeasure = x.WeightUnitOfMeasure,
                DimensionalWeight = x.DimensionalWeight,
                DimensionalWeightUnitOfMeasure = x.DimensionalWeightUnitOfMeasure,
                IsCustom = x.IsCustom,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPackageSQLSelectorLite()
        {
            PreBuiltPackageSQLSelectorLite = x => x == null ? null! : new AnonPackage
            {
                TypeID = x.TypeID,
                Type = ModelMapperForPackageType.PreBuiltPackageTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Width = x.Width,
                WidthUnitOfMeasure = x.WidthUnitOfMeasure,
                Depth = x.Depth,
                DepthUnitOfMeasure = x.DepthUnitOfMeasure,
                Height = x.Height,
                HeightUnitOfMeasure = x.HeightUnitOfMeasure,
                Weight = x.Weight,
                WeightUnitOfMeasure = x.WeightUnitOfMeasure,
                DimensionalWeight = x.DimensionalWeight,
                DimensionalWeightUnitOfMeasure = x.DimensionalWeightUnitOfMeasure,
                IsCustom = x.IsCustom,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPackageSQLSelectorList()
        {
            PreBuiltPackageSQLSelectorList = x => x == null ? null! : new AnonPackage
            {
                TypeID = x.TypeID,
                Type = ModelMapperForPackageType.PreBuiltPackageTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                Width = x.Width,
                WidthUnitOfMeasure = x.WidthUnitOfMeasure,
                Depth = x.Depth,
                DepthUnitOfMeasure = x.DepthUnitOfMeasure,
                Height = x.Height,
                HeightUnitOfMeasure = x.HeightUnitOfMeasure,
                Weight = x.Weight,
                WeightUnitOfMeasure = x.WeightUnitOfMeasure,
                DimensionalWeight = x.DimensionalWeight,
                DimensionalWeightUnitOfMeasure = x.DimensionalWeightUnitOfMeasure,
                IsCustom = x.IsCustom,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IPackageModel> SelectFullPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPackageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IPackageModel> SelectLitePackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPackageSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IPackageModel> SelectListPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPackageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityList(x, contextProfileName))!;
        }

        public static IPackageModel? SelectFirstFullPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPackageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPackageModel? SelectFirstListPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPackageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPackageModel? SelectSingleFullPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPackageSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPackageModel? SelectSingleLitePackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPackageSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPackageModel? SelectSingleListPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPackageSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePackageModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IPackageModel> results, int totalPages, int totalCount) SelectFullPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPackageSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePackageModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPackageModel> results, int totalPages, int totalCount) SelectLitePackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPackageSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePackageModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPackageModel> results, int totalPages, int totalCount) SelectListPackageAndMapToPackageModel(
            this IQueryable<Package> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPackageSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPackageSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePackageModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IPackageModel? CreatePackageModelFromEntityFull(this IPackage? entity, string? contextProfileName)
        {
            return CreatePackageModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IPackageModel? CreatePackageModelFromEntityLite(this IPackage? entity, string? contextProfileName)
        {
            return CreatePackageModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IPackageModel? CreatePackageModelFromEntityList(this IPackage? entity, string? contextProfileName)
        {
            return CreatePackageModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IPackageModel? CreatePackageModelFromEntity(
            this IPackage? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IPackageModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Package's Properties
                    // Package's Related Objects
                    // Package's Associated Objects
                    // Additional Mappings
                    if (CreatePackageModelFromEntityHooksFull != null) { model = CreatePackageModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Package's Properties
                    // Package's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Package's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePackageModelFromEntityHooksLite != null) { model = CreatePackageModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForPackageType.CreatePackageTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Package's Properties
                    model.Depth = entity.Depth;
                    model.DepthUnitOfMeasure = entity.DepthUnitOfMeasure;
                    model.DimensionalWeight = entity.DimensionalWeight;
                    model.DimensionalWeightUnitOfMeasure = entity.DimensionalWeightUnitOfMeasure;
                    model.Height = entity.Height;
                    model.HeightUnitOfMeasure = entity.HeightUnitOfMeasure;
                    model.IsCustom = entity.IsCustom;
                    model.Weight = entity.Weight;
                    model.WeightUnitOfMeasure = entity.WeightUnitOfMeasure;
                    model.Width = entity.Width;
                    model.WidthUnitOfMeasure = entity.WidthUnitOfMeasure;
                    // Package's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Package's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePackageModelFromEntityHooksList != null) { model = CreatePackageModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
