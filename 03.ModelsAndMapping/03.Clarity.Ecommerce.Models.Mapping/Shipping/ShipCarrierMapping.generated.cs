// <autogenerated>
// <copyright file="Mapping.Shipping.ShipCarrier.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shipping section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForShipCarrier
    {
        public sealed class AnonShipCarrier : ShipCarrier
        {
            public new IEnumerable<ShipCarrierMethod>? ShipCarrierMethods { get; set; }
            public new IEnumerable<Shipment>? Shipments { get; set; }
        }

        public static readonly Func<ShipCarrier?, string?, IShipCarrierModel?> MapShipCarrierModelFromEntityFull = CreateShipCarrierModelFromEntityFull;

        public static readonly Func<ShipCarrier?, string?, IShipCarrierModel?> MapShipCarrierModelFromEntityLite = CreateShipCarrierModelFromEntityLite;

        public static readonly Func<ShipCarrier?, string?, IShipCarrierModel?> MapShipCarrierModelFromEntityList = CreateShipCarrierModelFromEntityList;

        public static Func<IShipCarrier, IShipCarrierModel, string?, IShipCarrierModel>? CreateShipCarrierModelFromEntityHooksFull { get; set; }

        public static Func<IShipCarrier, IShipCarrierModel, string?, IShipCarrierModel>? CreateShipCarrierModelFromEntityHooksLite { get; set; }

        public static Func<IShipCarrier, IShipCarrierModel, string?, IShipCarrierModel>? CreateShipCarrierModelFromEntityHooksList { get; set; }

        public static Expression<Func<ShipCarrier, AnonShipCarrier>>? PreBuiltShipCarrierSQLSelectorFull { get; set; }

        public static Expression<Func<ShipCarrier, AnonShipCarrier>>? PreBuiltShipCarrierSQLSelectorLite { get; set; }

        public static Expression<Func<ShipCarrier, AnonShipCarrier>>? PreBuiltShipCarrierSQLSelectorList { get; set; }

        /// <summary>An <see cref="IShipCarrierModel"/> extension method that creates a(n) <see cref="ShipCarrier"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ShipCarrier"/> entity.</returns>
        public static IShipCarrier CreateShipCarrierEntity(
            this IShipCarrierModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IShipCarrierModel, ShipCarrier>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateShipCarrierFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IShipCarrierModel"/> extension method that updates a(n) <see cref="ShipCarrier"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ShipCarrier"/> entity.</returns>
        public static IShipCarrier UpdateShipCarrierFromModel(
            this IShipCarrier entity,
            IShipCarrierModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ShipCarrier Properties
            entity.AccountNumber = model.AccountNumber;
            entity.Authentication = model.Authentication;
            entity.EncryptedPassword = model.Password != null ? Encryption.CMSApiEncoder.Encrypt(model.Password) : null;
            entity.IsInbound = model.IsInbound;
            entity.IsOutbound = model.IsOutbound;
            entity.PickupTime = model.PickupTime;
            entity.PointOfContact = model.PointOfContact;
            entity.SalesRep = model.SalesRep;
            entity.Username = model.Username;
            // ShipCarrier's Related Objects
            // ShipCarrier's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenShipCarrierSQLSelectorFull()
        {
            PreBuiltShipCarrierSQLSelectorFull = x => x == null ? null! : new AnonShipCarrier
            {
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                PointOfContact = x.PointOfContact,
                IsInbound = x.IsInbound,
                IsOutbound = x.IsOutbound,
                Username = x.Username,
                EncryptedPassword = x.EncryptedPassword,
                Authentication = x.Authentication,
                AccountNumber = x.AccountNumber,
                SalesRep = x.SalesRep,
                PickupTime = x.PickupTime,
                ShipCarrierMethods = x.ShipCarrierMethods!.Where(y => y.Active).Select(ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile()).ToList(),
                Shipments = x.Shipments!.Where(y => y.Active).Select(ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipCarrierSQLSelectorLite()
        {
            PreBuiltShipCarrierSQLSelectorLite = x => x == null ? null! : new AnonShipCarrier
            {
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                PointOfContact = x.PointOfContact,
                IsInbound = x.IsInbound,
                IsOutbound = x.IsOutbound,
                Username = x.Username,
                Authentication = x.Authentication,
                AccountNumber = x.AccountNumber,
                SalesRep = x.SalesRep,
                PickupTime = x.PickupTime,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipCarrierSQLSelectorList()
        {
            PreBuiltShipCarrierSQLSelectorList = x => x == null ? null! : new AnonShipCarrier
            {
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                PointOfContact = x.PointOfContact,
                IsInbound = x.IsInbound,
                IsOutbound = x.IsOutbound,
                Username = x.Username,
                Authentication = x.Authentication,
                AccountNumber = x.AccountNumber,
                SalesRep = x.SalesRep,
                PickupTime = x.PickupTime,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IShipCarrierModel> SelectFullShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipCarrierSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IShipCarrierModel> SelectLiteShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipCarrierSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IShipCarrierModel> SelectListShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipCarrierSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityList(x, contextProfileName))!;
        }

        public static IShipCarrierModel? SelectFirstFullShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipCarrierSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipCarrierModel? SelectFirstListShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipCarrierSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipCarrierModel? SelectSingleFullShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipCarrierSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipCarrierModel? SelectSingleLiteShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipCarrierSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipCarrierModel? SelectSingleListShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipCarrierSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipCarrierModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IShipCarrierModel> results, int totalPages, int totalCount) SelectFullShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipCarrierSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateShipCarrierModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipCarrierModel> results, int totalPages, int totalCount) SelectLiteShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipCarrierSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateShipCarrierModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipCarrierModel> results, int totalPages, int totalCount) SelectListShipCarrierAndMapToShipCarrierModel(
            this IQueryable<ShipCarrier> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipCarrierSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipCarrierSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateShipCarrierModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IShipCarrierModel? CreateShipCarrierModelFromEntityFull(this IShipCarrier? entity, string? contextProfileName)
        {
            return CreateShipCarrierModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IShipCarrierModel? CreateShipCarrierModelFromEntityLite(this IShipCarrier? entity, string? contextProfileName)
        {
            return CreateShipCarrierModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IShipCarrierModel? CreateShipCarrierModelFromEntityList(this IShipCarrier? entity, string? contextProfileName)
        {
            return CreateShipCarrierModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IShipCarrierModel? CreateShipCarrierModelFromEntity(
            this IShipCarrier? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IShipCarrierModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ShipCarrier's Properties
                    model.Password = entity.EncryptedPassword != null ? Encryption.CMSApiEncoder.Decrypt(entity.EncryptedPassword) : null;
                    // ShipCarrier's Related Objects
                    // ShipCarrier's Associated Objects
                    model.ShipCarrierMethods = (entity is AnonShipCarrier ? ((AnonShipCarrier)entity).ShipCarrierMethods : entity.ShipCarrierMethods)?.Where(x => x.Active).Select(x => ModelMapperForShipCarrierMethod.CreateShipCarrierMethodModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Shipments = (entity is AnonShipCarrier ? ((AnonShipCarrier)entity).Shipments : entity.Shipments)?.Where(x => x.Active).Select(x => ModelMapperForShipment.CreateShipmentModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateShipCarrierModelFromEntityHooksFull != null) { model = CreateShipCarrierModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ShipCarrier's Properties
                    // ShipCarrier's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    // ShipCarrier's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipCarrierModelFromEntityHooksLite != null) { model = CreateShipCarrierModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ShipCarrier's Properties
                    model.AccountNumber = entity.AccountNumber;
                    model.Authentication = entity.Authentication;
                    model.IsInbound = entity.IsInbound;
                    model.IsOutbound = entity.IsOutbound;
                    model.PickupTime = entity.PickupTime;
                    model.PointOfContact = entity.PointOfContact;
                    model.SalesRep = entity.SalesRep;
                    model.Username = entity.Username;
                    // ShipCarrier's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ContactID = entity.ContactID;
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    // ShipCarrier's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipCarrierModelFromEntityHooksList != null) { model = CreateShipCarrierModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
