// <autogenerated>
// <copyright file="Mapping.Inventory.InventoryLocation.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Inventory section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForInventoryLocation
    {
        public sealed class AnonInventoryLocation : InventoryLocation
        {
            public new IEnumerable<BrandInventoryLocation>? Brands { get; set; }
            public new IEnumerable<InventoryLocationSection>? Sections { get; set; }
        }

        public static readonly Func<InventoryLocation?, string?, IInventoryLocationModel?> MapInventoryLocationModelFromEntityFull = CreateInventoryLocationModelFromEntityFull;

        public static readonly Func<InventoryLocation?, string?, IInventoryLocationModel?> MapInventoryLocationModelFromEntityLite = CreateInventoryLocationModelFromEntityLite;

        public static readonly Func<InventoryLocation?, string?, IInventoryLocationModel?> MapInventoryLocationModelFromEntityList = CreateInventoryLocationModelFromEntityList;

        public static Func<IInventoryLocation, IInventoryLocationModel, string?, IInventoryLocationModel>? CreateInventoryLocationModelFromEntityHooksFull { get; set; }

        public static Func<IInventoryLocation, IInventoryLocationModel, string?, IInventoryLocationModel>? CreateInventoryLocationModelFromEntityHooksLite { get; set; }

        public static Func<IInventoryLocation, IInventoryLocationModel, string?, IInventoryLocationModel>? CreateInventoryLocationModelFromEntityHooksList { get; set; }

        public static Expression<Func<InventoryLocation, AnonInventoryLocation>>? PreBuiltInventoryLocationSQLSelectorFull { get; set; }

        public static Expression<Func<InventoryLocation, AnonInventoryLocation>>? PreBuiltInventoryLocationSQLSelectorLite { get; set; }

        public static Expression<Func<InventoryLocation, AnonInventoryLocation>>? PreBuiltInventoryLocationSQLSelectorList { get; set; }

        /// <summary>An <see cref="IInventoryLocationModel"/> extension method that creates a(n) <see cref="InventoryLocation"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="InventoryLocation"/> entity.</returns>
        public static IInventoryLocation CreateInventoryLocationEntity(
            this IInventoryLocationModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IInventoryLocationModel, InventoryLocation>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateInventoryLocationFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IInventoryLocationModel"/> extension method that updates a(n) <see cref="InventoryLocation"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="InventoryLocation"/> entity.</returns>
        public static IInventoryLocation UpdateInventoryLocationFromModel(
            this IInventoryLocation entity,
            IInventoryLocationModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // InventoryLocation's Related Objects
            // InventoryLocation's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenInventoryLocationSQLSelectorFull()
        {
            PreBuiltInventoryLocationSQLSelectorFull = x => x == null ? null! : new AnonInventoryLocation
            {
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandInventoryLocation.PreBuiltBrandInventoryLocationSQLSelectorList.Expand().Compile()).ToList(),
                Sections = x.Sections!.Where(y => y.Active).Select(ModelMapperForInventoryLocationSection.PreBuiltInventoryLocationSectionSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenInventoryLocationSQLSelectorLite()
        {
            PreBuiltInventoryLocationSQLSelectorLite = x => x == null ? null! : new AnonInventoryLocation
            {
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenInventoryLocationSQLSelectorList()
        {
            PreBuiltInventoryLocationSQLSelectorList = x => x == null ? null! : new AnonInventoryLocation
            {
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IInventoryLocationModel> SelectFullInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltInventoryLocationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IInventoryLocationModel> SelectLiteInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltInventoryLocationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IInventoryLocationModel> SelectListInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltInventoryLocationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityList(x, contextProfileName))!;
        }

        public static IInventoryLocationModel? SelectFirstFullInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltInventoryLocationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IInventoryLocationModel? SelectFirstListInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltInventoryLocationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IInventoryLocationModel? SelectSingleFullInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltInventoryLocationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IInventoryLocationModel? SelectSingleLiteInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltInventoryLocationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IInventoryLocationModel? SelectSingleListInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltInventoryLocationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateInventoryLocationModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IInventoryLocationModel> results, int totalPages, int totalCount) SelectFullInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltInventoryLocationSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateInventoryLocationModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IInventoryLocationModel> results, int totalPages, int totalCount) SelectLiteInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltInventoryLocationSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateInventoryLocationModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IInventoryLocationModel> results, int totalPages, int totalCount) SelectListInventoryLocationAndMapToInventoryLocationModel(
            this IQueryable<InventoryLocation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltInventoryLocationSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltInventoryLocationSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateInventoryLocationModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IInventoryLocationModel? CreateInventoryLocationModelFromEntityFull(this IInventoryLocation? entity, string? contextProfileName)
        {
            return CreateInventoryLocationModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IInventoryLocationModel? CreateInventoryLocationModelFromEntityLite(this IInventoryLocation? entity, string? contextProfileName)
        {
            return CreateInventoryLocationModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IInventoryLocationModel? CreateInventoryLocationModelFromEntityList(this IInventoryLocation? entity, string? contextProfileName)
        {
            return CreateInventoryLocationModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IInventoryLocationModel? CreateInventoryLocationModelFromEntity(
            this IInventoryLocation? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IInventoryLocationModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // InventoryLocation's Properties
                    // InventoryLocation's Related Objects
                    // InventoryLocation's Associated Objects
                    model.Brands = (entity is AnonInventoryLocation ? ((AnonInventoryLocation)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandInventoryLocation.CreateBrandInventoryLocationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Sections = (entity is AnonInventoryLocation ? ((AnonInventoryLocation)entity).Sections : entity.Sections)?.Where(x => x.Active).Select(x => ModelMapperForInventoryLocationSection.CreateInventoryLocationSectionModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateInventoryLocationModelFromEntityHooksFull != null) { model = CreateInventoryLocationModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // InventoryLocation's Properties
                    // InventoryLocation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    // InventoryLocation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateInventoryLocationModelFromEntityHooksLite != null) { model = CreateInventoryLocationModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // InventoryLocation's Properties
                    // InventoryLocation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ContactID = entity.ContactID;
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    // InventoryLocation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateInventoryLocationModelFromEntityHooksList != null) { model = CreateInventoryLocationModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
