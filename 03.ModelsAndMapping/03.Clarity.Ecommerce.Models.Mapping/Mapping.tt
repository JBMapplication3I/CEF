﻿<#@ template debug="true" hostspecific="True" language="C#"
#><#@ output extension=".cs"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)02.Interfaces\02.Clarity.Ecommerce.Interfaces.Models\bin\Debug\net472\Clarity.Ecommerce.Interfaces.Models.dll"
#><#@ assembly name="$(SolutionDir)03.ModelsAndMapping\03.Clarity.Ecommerce.Models\bin\Debug\net472\Clarity.Ecommerce.Models.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ import namespace="CodeGenerator"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#@ include file="Mapping.ttinclude"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
string[] skipList = new string[]
{
    "AccountUserRole", "UserRole", "RoleUser", "Permission", "RolePermission", "UserClaim", "UserLogin", "Hangfire",
    "HangfireAggregatedCounter", "HangfireCounter", "HangfireHash", "HangfireJob", "HangfireJobParameter",
    "HangfireJobQueue", "HangfireList", "HangfireSchema", "HangfireServer", "HangfireSet", "HangfireState", "Report", "UserSupportRequest",
};
foreach (IGrouping<string, Type> group in tableClasses)
{
    foreach (Type type in group)
    {
        if (skipList.Contains(type.Name)) { continue; }
        if (GenerateMappingFile(type, group.Key))
        {
            SaveOutput(group.Key.Replace("System", "Structure") + "\\" + type.Name + "Mapping", "generated.cs", true);
        }
    }
} #>// <autogenerated>
// <copyright file="Mapping.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Generator portion of the BaseModelMapper class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this file
// will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Ignore Obsolete warnings
namespace Clarity.Ecommerce.Mapper
{
    public static partial class BaseModelMapper
    {
        public static bool IsInitialized;

        public static void Initialize(bool nullCheck = false)
        {
            if (IsInitialized && !nullCheck) { return; }
            IsInitialized = true;
<#  foreach (IGrouping<string, Type> group in tableClasses)
    { #>
            #region <#= group.Key #>
<#      foreach(Type type in group)
        {
            if (skipList.Contains(type.Name)) { continue; } #>
            ModelMapperFor<#= type.Name #>.Gen<#= type.Name #>SQLSelectorList();
            ModelMapperFor<#= type.Name #>.Gen<#= type.Name #>SQLSelectorLite();
            ModelMapperFor<#= type.Name #>.Gen<#= type.Name #>SQLSelectorFull();
<#      } #>
            #endregion
<#  } #>
        }
    }
}
<# DeleteOldOutputs(); #>
