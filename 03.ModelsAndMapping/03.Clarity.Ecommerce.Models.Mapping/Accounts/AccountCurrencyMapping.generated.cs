// <autogenerated>
// <copyright file="Mapping.Accounts.AccountCurrency.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Accounts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAccountCurrency
    {
        public sealed class AnonAccountCurrency : AccountCurrency
        {
            // public new Account? Master { get; set; }
        }

        public static readonly Func<AccountCurrency?, string?, IAccountCurrencyModel?> MapAccountCurrencyModelFromEntityFull = CreateAccountCurrencyModelFromEntityFull;

        public static readonly Func<AccountCurrency?, string?, IAccountCurrencyModel?> MapAccountCurrencyModelFromEntityLite = CreateAccountCurrencyModelFromEntityLite;

        public static readonly Func<AccountCurrency?, string?, IAccountCurrencyModel?> MapAccountCurrencyModelFromEntityList = CreateAccountCurrencyModelFromEntityList;

        public static Func<IAccountCurrency, IAccountCurrencyModel, string?, IAccountCurrencyModel>? CreateAccountCurrencyModelFromEntityHooksFull { get; set; }

        public static Func<IAccountCurrency, IAccountCurrencyModel, string?, IAccountCurrencyModel>? CreateAccountCurrencyModelFromEntityHooksLite { get; set; }

        public static Func<IAccountCurrency, IAccountCurrencyModel, string?, IAccountCurrencyModel>? CreateAccountCurrencyModelFromEntityHooksList { get; set; }

        public static Expression<Func<AccountCurrency, AnonAccountCurrency>>? PreBuiltAccountCurrencySQLSelectorFull { get; set; }

        public static Expression<Func<AccountCurrency, AnonAccountCurrency>>? PreBuiltAccountCurrencySQLSelectorLite { get; set; }

        public static Expression<Func<AccountCurrency, AnonAccountCurrency>>? PreBuiltAccountCurrencySQLSelectorList { get; set; }

        /// <summary>An <see cref="IAccountCurrencyModel"/> extension method that creates a(n) <see cref="AccountCurrency"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="AccountCurrency"/> entity.</returns>
        public static IAccountCurrency CreateAccountCurrencyEntity(
            this IAccountCurrencyModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IAccountCurrencyModel, AccountCurrency>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAccountCurrencyFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAccountCurrencyModel"/> extension method that updates a(n) <see cref="AccountCurrency"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="AccountCurrency"/> entity.</returns>
        public static IAccountCurrency UpdateAccountCurrencyFromModel(
            this IAccountCurrency entity,
            IAccountCurrencyModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // AccountCurrency Properties
            entity.CustomName = model.CustomName;
            entity.CustomTranslationKey = model.CustomTranslationKey;
            entity.IsPrimary = model.IsPrimary;
            entity.OverrideDecimalPlaceAccuracy = model.OverrideDecimalPlaceAccuracy;
            entity.OverrideHtmlCharacterCode = model.OverrideHtmlCharacterCode;
            entity.OverrideHtmlDecimalCharacterCode = model.OverrideHtmlDecimalCharacterCode;
            entity.OverrideHtmlSeparatorCharacterCode = model.OverrideHtmlSeparatorCharacterCode;
            entity.OverrideRawCharacter = model.OverrideRawCharacter;
            entity.OverrideRawDecimalCharacter = model.OverrideRawDecimalCharacter;
            entity.OverrideRawSeparatorCharacter = model.OverrideRawSeparatorCharacter;
            entity.OverrideUnicodeSymbolValue = model.OverrideUnicodeSymbolValue;
            entity.OverrideUseSeparator = model.OverrideUseSeparator;
            // AccountCurrency's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAccountCurrencySQLSelectorFull()
        {
            PreBuiltAccountCurrencySQLSelectorFull = x => x == null ? null! : new AnonAccountCurrency
            {
                MasterID = x.MasterID,
                Master = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                IsPrimary = x.IsPrimary,
                CustomName = x.CustomName,
                CustomTranslationKey = x.CustomTranslationKey,
                OverrideUnicodeSymbolValue = x.OverrideUnicodeSymbolValue,
                OverrideHtmlCharacterCode = x.OverrideHtmlCharacterCode,
                OverrideRawCharacter = x.OverrideRawCharacter,
                OverrideDecimalPlaceAccuracy = x.OverrideDecimalPlaceAccuracy,
                OverrideUseSeparator = x.OverrideUseSeparator,
                OverrideRawDecimalCharacter = x.OverrideRawDecimalCharacter,
                OverrideHtmlDecimalCharacterCode = x.OverrideHtmlDecimalCharacterCode,
                OverrideRawSeparatorCharacter = x.OverrideRawSeparatorCharacter,
                OverrideHtmlSeparatorCharacterCode = x.OverrideHtmlSeparatorCharacterCode,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAccountCurrencySQLSelectorLite()
        {
            PreBuiltAccountCurrencySQLSelectorLite = x => x == null ? null! : new AnonAccountCurrency
            {
                MasterID = x.MasterID,
                Master = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                IsPrimary = x.IsPrimary,
                CustomName = x.CustomName,
                CustomTranslationKey = x.CustomTranslationKey,
                OverrideUnicodeSymbolValue = x.OverrideUnicodeSymbolValue,
                OverrideHtmlCharacterCode = x.OverrideHtmlCharacterCode,
                OverrideRawCharacter = x.OverrideRawCharacter,
                OverrideDecimalPlaceAccuracy = x.OverrideDecimalPlaceAccuracy,
                OverrideUseSeparator = x.OverrideUseSeparator,
                OverrideRawDecimalCharacter = x.OverrideRawDecimalCharacter,
                OverrideHtmlDecimalCharacterCode = x.OverrideHtmlDecimalCharacterCode,
                OverrideRawSeparatorCharacter = x.OverrideRawSeparatorCharacter,
                OverrideHtmlSeparatorCharacterCode = x.OverrideHtmlSeparatorCharacterCode,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAccountCurrencySQLSelectorList()
        {
            PreBuiltAccountCurrencySQLSelectorList = x => x == null ? null! : new AnonAccountCurrency
            {
                MasterID = x.MasterID,
                Master = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                IsPrimary = x.IsPrimary,
                CustomName = x.CustomName,
                CustomTranslationKey = x.CustomTranslationKey,
                OverrideUnicodeSymbolValue = x.OverrideUnicodeSymbolValue,
                OverrideHtmlCharacterCode = x.OverrideHtmlCharacterCode,
                OverrideRawCharacter = x.OverrideRawCharacter,
                OverrideDecimalPlaceAccuracy = x.OverrideDecimalPlaceAccuracy,
                OverrideUseSeparator = x.OverrideUseSeparator,
                OverrideRawDecimalCharacter = x.OverrideRawDecimalCharacter,
                OverrideHtmlDecimalCharacterCode = x.OverrideHtmlDecimalCharacterCode,
                OverrideRawSeparatorCharacter = x.OverrideRawSeparatorCharacter,
                OverrideHtmlSeparatorCharacterCode = x.OverrideHtmlSeparatorCharacterCode,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAccountCurrencyModel> SelectFullAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountCurrencySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAccountCurrencyModel> SelectLiteAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountCurrencySQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAccountCurrencyModel> SelectListAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountCurrencySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityList(x, contextProfileName))!;
        }

        public static IAccountCurrencyModel? SelectFirstFullAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountCurrencySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAccountCurrencyModel? SelectFirstListAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountCurrencySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAccountCurrencyModel? SelectSingleFullAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountCurrencySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAccountCurrencyModel? SelectSingleLiteAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountCurrencySQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAccountCurrencyModel? SelectSingleListAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountCurrencySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountCurrencyModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAccountCurrencyModel> results, int totalPages, int totalCount) SelectFullAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountCurrencySQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAccountCurrencyModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAccountCurrencyModel> results, int totalPages, int totalCount) SelectLiteAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountCurrencySQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAccountCurrencyModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAccountCurrencyModel> results, int totalPages, int totalCount) SelectListAccountCurrencyAndMapToAccountCurrencyModel(
            this IQueryable<AccountCurrency> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountCurrencySQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountCurrencySQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAccountCurrencyModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAccountCurrencyModel? CreateAccountCurrencyModelFromEntityFull(this IAccountCurrency? entity, string? contextProfileName)
        {
            return CreateAccountCurrencyModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAccountCurrencyModel? CreateAccountCurrencyModelFromEntityLite(this IAccountCurrency? entity, string? contextProfileName)
        {
            return CreateAccountCurrencyModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAccountCurrencyModel? CreateAccountCurrencyModelFromEntityList(this IAccountCurrency? entity, string? contextProfileName)
        {
            return CreateAccountCurrencyModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAccountCurrencyModel? CreateAccountCurrencyModelFromEntity(
            this IAccountCurrency? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAccountCurrencyModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AccountCurrency's Properties
                    // AccountCurrency's Related Objects
                    // AccountCurrency's Associated Objects
                    // Additional Mappings
                    if (CreateAccountCurrencyModelFromEntityHooksFull != null) { model = CreateAccountCurrencyModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AccountCurrency's Properties
                    // AccountCurrency's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Slave = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.Slave, contextProfileName);
                    // AccountCurrency's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAccountCurrencyModelFromEntityHooksLite != null) { model = CreateAccountCurrencyModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // AccountCurrency's Properties
                    model.CustomName = entity.CustomName;
                    model.CustomTranslationKey = entity.CustomTranslationKey;
                    model.IsPrimary = entity.IsPrimary;
                    model.OverrideDecimalPlaceAccuracy = entity.OverrideDecimalPlaceAccuracy;
                    model.OverrideHtmlCharacterCode = entity.OverrideHtmlCharacterCode;
                    model.OverrideHtmlDecimalCharacterCode = entity.OverrideHtmlDecimalCharacterCode;
                    model.OverrideHtmlSeparatorCharacterCode = entity.OverrideHtmlSeparatorCharacterCode;
                    model.OverrideRawCharacter = entity.OverrideRawCharacter;
                    model.OverrideRawDecimalCharacter = entity.OverrideRawDecimalCharacter;
                    model.OverrideRawSeparatorCharacter = entity.OverrideRawSeparatorCharacter;
                    model.OverrideUnicodeSymbolValue = entity.OverrideUnicodeSymbolValue;
                    model.OverrideUseSeparator = entity.OverrideUseSeparator;
                    // AccountCurrency's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    // AccountCurrency's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAccountCurrencyModelFromEntityHooksList != null) { model = CreateAccountCurrencyModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
