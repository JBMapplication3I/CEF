// <autogenerated>
// <copyright file="Mapping.Accounts.AccountImageType.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Accounts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAccountImageType
    {
        public sealed class AnonAccountImageType : AccountImageType
        {
        }

        public static readonly Func<AccountImageType?, string?, ITypeModel?> MapAccountImageTypeModelFromEntityFull = CreateAccountImageTypeModelFromEntityFull;

        public static readonly Func<AccountImageType?, string?, ITypeModel?> MapAccountImageTypeModelFromEntityLite = CreateAccountImageTypeModelFromEntityLite;

        public static readonly Func<AccountImageType?, string?, ITypeModel?> MapAccountImageTypeModelFromEntityList = CreateAccountImageTypeModelFromEntityList;

        public static Func<IAccountImageType, ITypeModel, string?, ITypeModel>? CreateAccountImageTypeModelFromEntityHooksFull { get; set; }

        public static Func<IAccountImageType, ITypeModel, string?, ITypeModel>? CreateAccountImageTypeModelFromEntityHooksLite { get; set; }

        public static Func<IAccountImageType, ITypeModel, string?, ITypeModel>? CreateAccountImageTypeModelFromEntityHooksList { get; set; }

        public static Expression<Func<AccountImageType, AnonAccountImageType>>? PreBuiltAccountImageTypeSQLSelectorFull { get; set; }

        public static Expression<Func<AccountImageType, AnonAccountImageType>>? PreBuiltAccountImageTypeSQLSelectorLite { get; set; }

        public static Expression<Func<AccountImageType, AnonAccountImageType>>? PreBuiltAccountImageTypeSQLSelectorList { get; set; }

        /// <summary>An <see cref="ITypeModel"/> extension method that creates a(n) <see cref="AccountImageType"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="AccountImageType"/> entity.</returns>
        public static IAccountImageType CreateAccountImageTypeEntity(
            this ITypeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityTypableBase<ITypeModel, AccountImageType>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAccountImageTypeFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ITypeModel"/> extension method that updates a(n) <see cref="AccountImageType"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="AccountImageType"/> entity.</returns>
        public static IAccountImageType UpdateAccountImageTypeFromModel(
            this IAccountImageType entity,
            ITypeModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapTypableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAccountImageTypeSQLSelectorFull()
        {
            PreBuiltAccountImageTypeSQLSelectorFull = x => x == null ? null! : new AnonAccountImageType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAccountImageTypeSQLSelectorLite()
        {
            PreBuiltAccountImageTypeSQLSelectorLite = x => x == null ? null! : new AnonAccountImageType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAccountImageTypeSQLSelectorList()
        {
            PreBuiltAccountImageTypeSQLSelectorList = x => x == null ? null! : new AnonAccountImageType
            {
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ITypeModel> SelectFullAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountImageTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ITypeModel> SelectLiteAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountImageTypeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ITypeModel> SelectListAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountImageTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityList(x, contextProfileName))!;
        }

        public static ITypeModel? SelectFirstFullAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountImageTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ITypeModel? SelectFirstListAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountImageTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ITypeModel? SelectSingleFullAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountImageTypeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ITypeModel? SelectSingleLiteAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountImageTypeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ITypeModel? SelectSingleListAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountImageTypeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountImageTypeModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ITypeModel> results, int totalPages, int totalCount) SelectFullAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountImageTypeSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAccountImageTypeModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ITypeModel> results, int totalPages, int totalCount) SelectLiteAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountImageTypeSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAccountImageTypeModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ITypeModel> results, int totalPages, int totalCount) SelectListAccountImageTypeAndMapToTypeModel(
            this IQueryable<AccountImageType> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountImageTypeSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountImageTypeSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAccountImageTypeModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ITypeModel? CreateAccountImageTypeModelFromEntityFull(this IAccountImageType? entity, string? contextProfileName)
        {
            return CreateAccountImageTypeModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ITypeModel? CreateAccountImageTypeModelFromEntityLite(this IAccountImageType? entity, string? contextProfileName)
        {
            return CreateAccountImageTypeModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ITypeModel? CreateAccountImageTypeModelFromEntityList(this IAccountImageType? entity, string? contextProfileName)
        {
            return CreateAccountImageTypeModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ITypeModel? CreateAccountImageTypeModelFromEntity(
            this IAccountImageType? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapTypableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ITypeModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AccountImageType's Properties
                    // AccountImageType's Related Objects
                    // AccountImageType's Associated Objects
                    // Additional Mappings
                    if (CreateAccountImageTypeModelFromEntityHooksFull != null) { model = CreateAccountImageTypeModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // AccountImageType's Properties
                    // AccountImageType's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // AccountImageType's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAccountImageTypeModelFromEntityHooksLite != null) { model = CreateAccountImageTypeModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // AccountImageType's Properties
                    // AccountImageType's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // AccountImageType's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAccountImageTypeModelFromEntityHooksList != null) { model = CreateAccountImageTypeModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
