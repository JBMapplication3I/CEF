// <autogenerated>
// <copyright file="Mapping.Accounts.Account.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Accounts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAccount
    {
        public sealed class AnonAccount : Account
        {
            public new IEnumerable<AccountAssociation>? AccountAssociations { get; set; }
            public new IEnumerable<AccountAssociation>? AccountsAssociatedWith { get; set; }
            public new IEnumerable<AccountCurrency>? AccountCurrencies { get; set; }
            public new IEnumerable<AccountFile>? StoredFiles { get; set; }
            public new IEnumerable<AccountImage>? Images { get; set; }
            public new IEnumerable<AccountPricePoint>? AccountPricePoints { get; set; }
            public new IEnumerable<BrandAccount>? Brands { get; set; }
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<User>? Users { get; set; }
            public new IEnumerable<VendorAccount>? Vendors { get; set; }
        }

        public static readonly Func<Account?, string?, IAccountModel?> MapAccountModelFromEntityFull = CreateAccountModelFromEntityFull;

        public static readonly Func<Account?, string?, IAccountModel?> MapAccountModelFromEntityLite = CreateAccountModelFromEntityLite;

        public static readonly Func<Account?, string?, IAccountModel?> MapAccountModelFromEntityList = CreateAccountModelFromEntityList;

        public static Func<IAccount, IAccountModel, string?, IAccountModel>? CreateAccountModelFromEntityHooksFull { get; set; }

        public static Func<IAccount, IAccountModel, string?, IAccountModel>? CreateAccountModelFromEntityHooksLite { get; set; }

        public static Func<IAccount, IAccountModel, string?, IAccountModel>? CreateAccountModelFromEntityHooksList { get; set; }

        public static Expression<Func<Account, AnonAccount>>? PreBuiltAccountSQLSelectorFull { get; set; }

        public static Expression<Func<Account, AnonAccount>>? PreBuiltAccountSQLSelectorLite { get; set; }

        public static Expression<Func<Account, AnonAccount>>? PreBuiltAccountSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAccountModel"/> extension method that creates a(n) <see cref="Account"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Account"/> entity.</returns>
        public static IAccount CreateAccountEntity(
            this IAccountModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IAccountModel, Account>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAccountFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAccountModel"/> extension method that updates a(n) <see cref="Account"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Account"/> entity.</returns>
        public static IAccount UpdateAccountFromModel(
            this IAccount entity,
            IAccountModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Account Properties
            entity.BusinessType = model.BusinessType;
            entity.Credit = model.Credit;
            entity.DEANumber = model.DEANumber;
            entity.DunsNumber = model.DunsNumber;
            entity.EIN = model.EIN;
            entity.IsOnHold = model.IsOnHold;
            entity.IsTaxable = model.IsTaxable;
            entity.MedicalLicenseHolderName = model.MedicalLicenseHolderName;
            entity.MedicalLicenseNumber = model.MedicalLicenseNumber;
            entity.MedicalLicenseState = model.MedicalLicenseState;
            entity.PreferredInvoiceMethod = model.PreferredInvoiceMethod;
            entity.SageID = model.SageID;
            entity.SalesmanCode = model.SalesmanCode;
            entity.TaxEntityUseCode = model.TaxEntityUseCode;
            entity.TaxExemptionNo = model.TaxExemptionNo;
            entity.Token = model.Token;
            // Account's Related Objects
            // Account's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAccountSQLSelectorFull()
        {
            PreBuiltAccountSQLSelectorFull = x => x == null ? null! : new AnonAccount
            {
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForAccountImage.PreBuiltAccountImageSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForAccountFile.PreBuiltAccountFileSQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandAccount.PreBuiltBrandAccountSQLSelectorList.Expand().Compile()).ToList(),
                Vendors = x.Vendors!.Where(y => y.Active).Select(ModelMapperForVendorAccount.PreBuiltVendorAccountSQLSelectorList.Expand().Compile()).ToList(),
                Users = x.Users!.Where(y => y.Active).Select(ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile()).ToList(),
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                TypeID = x.TypeID,
                Type = ModelMapperForAccountType.PreBuiltAccountTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAccountStatus.PreBuiltAccountStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                BusinessType = x.BusinessType,
                Credit = x.Credit,
                DEANumber = x.DEANumber,
                DunsNumber = x.DunsNumber,
                EIN = x.EIN,
                IsOnHold = x.IsOnHold,
                IsTaxable = x.IsTaxable,
                MedicalLicenseHolderName = x.MedicalLicenseHolderName,
                MedicalLicenseNumber = x.MedicalLicenseNumber,
                MedicalLicenseState = x.MedicalLicenseState,
                PreferredInvoiceMethod = x.PreferredInvoiceMethod,
                SageID = x.SageID,
                SalesmanCode = x.SalesmanCode,
                TaxEntityUseCode = x.TaxEntityUseCode,
                TaxExemptionNo = x.TaxExemptionNo,
                Token = x.Token,
                CreditCurrencyID = x.CreditCurrencyID,
                CreditCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.CreditCurrency!),
                AccountCurrencies = x.AccountCurrencies!.Where(y => y.Active).Select(ModelMapperForAccountCurrency.PreBuiltAccountCurrencySQLSelectorList.Expand().Compile()).ToList(),
                AccountPricePoints = x.AccountPricePoints!.Where(y => y.Active).Select(ModelMapperForAccountPricePoint.PreBuiltAccountPricePointSQLSelectorList.Expand().Compile()).ToList(),
                AccountAssociations = x.AccountAssociations!.Where(y => y.Active).Select(ModelMapperForAccountAssociation.PreBuiltAccountAssociationSQLSelectorList.Expand().Compile()).ToList(),
                AccountsAssociatedWith = x.AccountsAssociatedWith!.Where(y => y.Active).Select(ModelMapperForAccountAssociation.PreBuiltAccountAssociationSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAccountSQLSelectorLite()
        {
            PreBuiltAccountSQLSelectorLite = x => x == null ? null! : new AnonAccount
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAccountType.PreBuiltAccountTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAccountStatus.PreBuiltAccountStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                BusinessType = x.BusinessType,
                Credit = x.Credit,
                DEANumber = x.DEANumber,
                DunsNumber = x.DunsNumber,
                EIN = x.EIN,
                IsOnHold = x.IsOnHold,
                IsTaxable = x.IsTaxable,
                MedicalLicenseHolderName = x.MedicalLicenseHolderName,
                MedicalLicenseNumber = x.MedicalLicenseNumber,
                MedicalLicenseState = x.MedicalLicenseState,
                PreferredInvoiceMethod = x.PreferredInvoiceMethod,
                SageID = x.SageID,
                SalesmanCode = x.SalesmanCode,
                TaxEntityUseCode = x.TaxEntityUseCode,
                TaxExemptionNo = x.TaxExemptionNo,
                Token = x.Token,
                CreditCurrencyID = x.CreditCurrencyID,
                CreditCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.CreditCurrency!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAccountSQLSelectorList()
        {
            PreBuiltAccountSQLSelectorList = x => x == null ? null! : new AnonAccount
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAccountType.PreBuiltAccountTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForAccountStatus.PreBuiltAccountStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                BusinessType = x.BusinessType,
                Credit = x.Credit,
                DEANumber = x.DEANumber,
                DunsNumber = x.DunsNumber,
                EIN = x.EIN,
                IsOnHold = x.IsOnHold,
                IsTaxable = x.IsTaxable,
                MedicalLicenseHolderName = x.MedicalLicenseHolderName,
                MedicalLicenseNumber = x.MedicalLicenseNumber,
                MedicalLicenseState = x.MedicalLicenseState,
                PreferredInvoiceMethod = x.PreferredInvoiceMethod,
                SageID = x.SageID,
                SalesmanCode = x.SalesmanCode,
                TaxEntityUseCode = x.TaxEntityUseCode,
                TaxExemptionNo = x.TaxExemptionNo,
                Token = x.Token,
                CreditCurrencyID = x.CreditCurrencyID,
                CreditCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.CreditCurrency!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAccountModel> SelectFullAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAccountModel> SelectLiteAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAccountModel> SelectListAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAccountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityList(x, contextProfileName))!;
        }

        public static IAccountModel? SelectFirstFullAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAccountModel? SelectFirstListAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAccountModel? SelectSingleFullAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAccountModel? SelectSingleLiteAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAccountModel? SelectSingleListAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAccountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAccountModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAccountModel> results, int totalPages, int totalCount) SelectFullAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAccountModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAccountModel> results, int totalPages, int totalCount) SelectLiteAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAccountModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAccountModel> results, int totalPages, int totalCount) SelectListAccountAndMapToAccountModel(
            this IQueryable<Account> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAccountSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAccountSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAccountModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAccountModel? CreateAccountModelFromEntityFull(this IAccount? entity, string? contextProfileName)
        {
            return CreateAccountModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAccountModel? CreateAccountModelFromEntityLite(this IAccount? entity, string? contextProfileName)
        {
            return CreateAccountModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAccountModel? CreateAccountModelFromEntityList(this IAccount? entity, string? contextProfileName)
        {
            return CreateAccountModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAccountModel? CreateAccountModelFromEntity(
            this IAccount? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAccountModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonAccount ? ((AnonAccount)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Account's Properties
                    // Account's Related Objects
                    // Account's Associated Objects
                    model.AccountAssociations = (entity is AnonAccount ? ((AnonAccount)entity).AccountAssociations : entity.AccountAssociations)?.Where(x => x.Active).Select(x => ModelMapperForAccountAssociation.CreateAccountAssociationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.AccountCurrencies = (entity is AnonAccount ? ((AnonAccount)entity).AccountCurrencies : entity.AccountCurrencies)?.Where(x => x.Active).Select(x => ModelMapperForAccountCurrency.CreateAccountCurrencyModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.AccountPricePoints = (entity is AnonAccount ? ((AnonAccount)entity).AccountPricePoints : entity.AccountPricePoints)?.Where(x => x.Active).Select(x => ModelMapperForAccountPricePoint.CreateAccountPricePointModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.AccountsAssociatedWith = (entity is AnonAccount ? ((AnonAccount)entity).AccountsAssociatedWith : entity.AccountsAssociatedWith)?.Where(x => x.Active).Select(x => ModelMapperForAccountAssociation.CreateAccountAssociationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Brands = (entity is AnonAccount ? ((AnonAccount)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandAccount.CreateBrandAccountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonAccount ? ((AnonAccount)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForAccountImage.CreateAccountImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonAccount ? ((AnonAccount)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForAccountFile.CreateAccountFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Users = (entity is AnonAccount ? ((AnonAccount)entity).Users : entity.Users)?.Where(x => x.Active).Select(x => ModelMapperForUser.CreateUserModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Vendors = (entity is AnonAccount ? ((AnonAccount)entity).Vendors : entity.Vendors)?.Where(x => x.Active).Select(x => ModelMapperForVendorAccount.CreateVendorAccountModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateAccountModelFromEntityHooksFull != null) { model = CreateAccountModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Account's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForAccountType.CreateAccountTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForAccountStatus.CreateAccountStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Account's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CreditCurrency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.CreditCurrency, contextProfileName);
                    // Account's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAccountModelFromEntityHooksLite != null) { model = CreateAccountModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Account's Properties
                    model.BusinessType = entity.BusinessType;
                    model.Credit = entity.Credit;
                    model.DEANumber = entity.DEANumber;
                    model.DunsNumber = entity.DunsNumber;
                    model.EIN = entity.EIN;
                    model.IsOnHold = entity.IsOnHold;
                    model.IsTaxable = entity.IsTaxable;
                    model.MedicalLicenseHolderName = entity.MedicalLicenseHolderName;
                    model.MedicalLicenseNumber = entity.MedicalLicenseNumber;
                    model.MedicalLicenseState = entity.MedicalLicenseState;
                    model.PreferredInvoiceMethod = entity.PreferredInvoiceMethod;
                    model.SageID = entity.SageID;
                    model.SalesmanCode = entity.SalesmanCode;
                    model.TaxEntityUseCode = entity.TaxEntityUseCode;
                    model.TaxExemptionNo = entity.TaxExemptionNo;
                    model.Token = entity.Token;
                    // Account's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CreditCurrencyID = entity.CreditCurrencyID;
                    model.CreditCurrencyKey = entity.CreditCurrency?.CustomKey;
                    model.CreditCurrencyName = entity.CreditCurrency?.Name;
                    // Account's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAccountModelFromEntityHooksList != null) { model = CreateAccountModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
