// <autogenerated>
// <copyright file="Mapping.Accounts.Contractor.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Accounts section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForContractor
    {
        public sealed class AnonContractor : Contractor
        {
            public new IEnumerable<ServiceArea>? ServiceAreas { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Contractor?, string?, IContractorModel?> MapContractorModelFromEntityFull = CreateContractorModelFromEntityFull;

        public static readonly Func<Contractor?, string?, IContractorModel?> MapContractorModelFromEntityLite = CreateContractorModelFromEntityLite;

        public static readonly Func<Contractor?, string?, IContractorModel?> MapContractorModelFromEntityList = CreateContractorModelFromEntityList;

        public static Func<IContractor, IContractorModel, string?, IContractorModel>? CreateContractorModelFromEntityHooksFull { get; set; }

        public static Func<IContractor, IContractorModel, string?, IContractorModel>? CreateContractorModelFromEntityHooksLite { get; set; }

        public static Func<IContractor, IContractorModel, string?, IContractorModel>? CreateContractorModelFromEntityHooksList { get; set; }

        public static Expression<Func<Contractor, AnonContractor>>? PreBuiltContractorSQLSelectorFull { get; set; }

        public static Expression<Func<Contractor, AnonContractor>>? PreBuiltContractorSQLSelectorLite { get; set; }

        public static Expression<Func<Contractor, AnonContractor>>? PreBuiltContractorSQLSelectorList { get; set; }

        /// <summary>An <see cref="IContractorModel"/> extension method that creates a(n) <see cref="Contractor"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Contractor"/> entity.</returns>
        public static IContractor CreateContractorEntity(
            this IContractorModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IContractorModel, Contractor>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateContractorFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IContractorModel"/> extension method that updates a(n) <see cref="Contractor"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Contractor"/> entity.</returns>
        public static IContractor UpdateContractorFromModel(
            this IContractor entity,
            IContractorModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Contractor's Related Objects
            // Contractor's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenContractorSQLSelectorFull()
        {
            PreBuiltContractorSQLSelectorFull = x => x == null ? null! : new AnonContractor
            {
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                ServiceAreas = x.ServiceAreas!.Where(y => y.Active).Select(ModelMapperForServiceArea.PreBuiltServiceAreaSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenContractorSQLSelectorLite()
        {
            PreBuiltContractorSQLSelectorLite = x => x == null ? null! : new AnonContractor
            {
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenContractorSQLSelectorList()
        {
            PreBuiltContractorSQLSelectorList = x => x == null ? null! : new AnonContractor
            {
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IContractorModel> SelectFullContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltContractorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IContractorModel> SelectLiteContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltContractorSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IContractorModel> SelectListContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltContractorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityList(x, contextProfileName))!;
        }

        public static IContractorModel? SelectFirstFullContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContractorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IContractorModel? SelectFirstListContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContractorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IContractorModel? SelectSingleFullContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContractorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IContractorModel? SelectSingleLiteContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContractorSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IContractorModel? SelectSingleListContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltContractorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateContractorModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IContractorModel> results, int totalPages, int totalCount) SelectFullContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltContractorSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateContractorModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IContractorModel> results, int totalPages, int totalCount) SelectLiteContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltContractorSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateContractorModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IContractorModel> results, int totalPages, int totalCount) SelectListContractorAndMapToContractorModel(
            this IQueryable<Contractor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltContractorSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltContractorSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateContractorModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IContractorModel? CreateContractorModelFromEntityFull(this IContractor? entity, string? contextProfileName)
        {
            return CreateContractorModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IContractorModel? CreateContractorModelFromEntityLite(this IContractor? entity, string? contextProfileName)
        {
            return CreateContractorModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IContractorModel? CreateContractorModelFromEntityList(this IContractor? entity, string? contextProfileName)
        {
            return CreateContractorModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IContractorModel? CreateContractorModelFromEntity(
            this IContractor? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IContractorModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Contractor's Properties
                    // Contractor's Related Objects
                    model.Account = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Account, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // Contractor's Associated Objects
                    model.ServiceAreas = (entity is AnonContractor ? ((AnonContractor)entity).ServiceAreas : entity.ServiceAreas)?.Where(x => x.Active).Select(x => ModelMapperForServiceArea.CreateServiceAreaModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateContractorModelFromEntityHooksFull != null) { model = CreateContractorModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Contractor's Properties
                    // Contractor's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Contractor's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateContractorModelFromEntityHooksLite != null) { model = CreateContractorModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Contractor's Properties
                    // Contractor's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountID = entity.AccountID;
                    model.AccountKey = entity.Account?.CustomKey;
                    model.AccountName = entity.Account?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    model.UserName = entity.User?.UserName;
                    // Contractor's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateContractorModelFromEntityHooksList != null) { model = CreateContractorModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
