// <autogenerated>
// <copyright file="Mapping.Shipment.ShipmentLine.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shipment section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForShipmentLine
    {
        public sealed class AnonShipmentLine : ShipmentLine
        {
        }

        public static readonly Func<ShipmentLine?, string?, IShipmentLineModel?> MapShipmentLineModelFromEntityFull = CreateShipmentLineModelFromEntityFull;

        public static readonly Func<ShipmentLine?, string?, IShipmentLineModel?> MapShipmentLineModelFromEntityLite = CreateShipmentLineModelFromEntityLite;

        public static readonly Func<ShipmentLine?, string?, IShipmentLineModel?> MapShipmentLineModelFromEntityList = CreateShipmentLineModelFromEntityList;

        public static Func<IShipmentLine, IShipmentLineModel, string?, IShipmentLineModel>? CreateShipmentLineModelFromEntityHooksFull { get; set; }

        public static Func<IShipmentLine, IShipmentLineModel, string?, IShipmentLineModel>? CreateShipmentLineModelFromEntityHooksLite { get; set; }

        public static Func<IShipmentLine, IShipmentLineModel, string?, IShipmentLineModel>? CreateShipmentLineModelFromEntityHooksList { get; set; }

        public static Expression<Func<ShipmentLine, AnonShipmentLine>>? PreBuiltShipmentLineSQLSelectorFull { get; set; }

        public static Expression<Func<ShipmentLine, AnonShipmentLine>>? PreBuiltShipmentLineSQLSelectorLite { get; set; }

        public static Expression<Func<ShipmentLine, AnonShipmentLine>>? PreBuiltShipmentLineSQLSelectorList { get; set; }

        /// <summary>An <see cref="IShipmentLineModel"/> extension method that creates a(n) <see cref="ShipmentLine"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ShipmentLine"/> entity.</returns>
        public static IShipmentLine CreateShipmentLineEntity(
            this IShipmentLineModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IShipmentLineModel, ShipmentLine>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateShipmentLineFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IShipmentLineModel"/> extension method that updates a(n) <see cref="ShipmentLine"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ShipmentLine"/> entity.</returns>
        public static IShipmentLine UpdateShipmentLineFromModel(
            this IShipmentLine entity,
            IShipmentLineModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ShipmentLine Properties
            entity.Description = model.Description;
            entity.Quantity = model.Quantity;
            entity.Sku = model.Sku;
            // ShipmentLine's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenShipmentLineSQLSelectorFull()
        {
            PreBuiltShipmentLineSQLSelectorFull = x => x == null ? null! : new AnonShipmentLine
            {
                Sku = x.Sku,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                Quantity = x.Quantity,
                Description = x.Description,
                ShipmentID = x.ShipmentID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipmentLineSQLSelectorLite()
        {
            PreBuiltShipmentLineSQLSelectorLite = x => x == null ? null! : new AnonShipmentLine
            {
                Sku = x.Sku,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                Quantity = x.Quantity,
                Description = x.Description,
                ShipmentID = x.ShipmentID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenShipmentLineSQLSelectorList()
        {
            PreBuiltShipmentLineSQLSelectorList = x => x == null ? null! : new AnonShipmentLine
            {
                Sku = x.Sku,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!), // For Flattening Properties (List)
                Quantity = x.Quantity,
                Description = x.Description,
                ShipmentID = x.ShipmentID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IShipmentLineModel> SelectFullShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentLineSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IShipmentLineModel> SelectLiteShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentLineSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IShipmentLineModel> SelectListShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltShipmentLineSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityList(x, contextProfileName))!;
        }

        public static IShipmentLineModel? SelectFirstFullShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentLineSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipmentLineModel? SelectFirstListShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentLineSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IShipmentLineModel? SelectSingleFullShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentLineSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipmentLineModel? SelectSingleLiteShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentLineSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IShipmentLineModel? SelectSingleListShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltShipmentLineSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateShipmentLineModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IShipmentLineModel> results, int totalPages, int totalCount) SelectFullShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentLineSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentLineModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipmentLineModel> results, int totalPages, int totalCount) SelectLiteShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentLineSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentLineModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IShipmentLineModel> results, int totalPages, int totalCount) SelectListShipmentLineAndMapToShipmentLineModel(
            this IQueryable<ShipmentLine> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltShipmentLineSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltShipmentLineSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateShipmentLineModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IShipmentLineModel? CreateShipmentLineModelFromEntityFull(this IShipmentLine? entity, string? contextProfileName)
        {
            return CreateShipmentLineModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IShipmentLineModel? CreateShipmentLineModelFromEntityLite(this IShipmentLine? entity, string? contextProfileName)
        {
            return CreateShipmentLineModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IShipmentLineModel? CreateShipmentLineModelFromEntityList(this IShipmentLine? entity, string? contextProfileName)
        {
            return CreateShipmentLineModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IShipmentLineModel? CreateShipmentLineModelFromEntity(
            this IShipmentLine? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IShipmentLineModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ShipmentLine's Properties
                    // ShipmentLine's Related Objects
                    model.Product = ModelMapperForProduct.MapLiteProductOldExt(entity.Product);
                    // ShipmentLine's Associated Objects
                    // Additional Mappings
                    if (CreateShipmentLineModelFromEntityHooksFull != null) { model = CreateShipmentLineModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ShipmentLine's Properties
                    // ShipmentLine's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ShipmentLine's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipmentLineModelFromEntityHooksLite != null) { model = CreateShipmentLineModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ShipmentLine's Properties
                    model.Description = entity.Description;
                    model.Quantity = entity.Quantity;
                    model.Sku = entity.Sku;
                    // ShipmentLine's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ProductID = entity.ProductID;
                    // ShipmentLine's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateShipmentLineModelFromEntityHooksList != null) { model = CreateShipmentLineModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
