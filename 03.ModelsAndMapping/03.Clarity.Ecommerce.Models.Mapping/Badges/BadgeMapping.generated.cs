// <autogenerated>
// <copyright file="Mapping.Badges.Badge.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Badges section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForBadge
    {
        public sealed class AnonBadge : Badge
        {
            public new IEnumerable<BadgeImage>? Images { get; set; }
        }

        public static readonly Func<Badge?, string?, IBadgeModel?> MapBadgeModelFromEntityFull = CreateBadgeModelFromEntityFull;

        public static readonly Func<Badge?, string?, IBadgeModel?> MapBadgeModelFromEntityLite = CreateBadgeModelFromEntityLite;

        public static readonly Func<Badge?, string?, IBadgeModel?> MapBadgeModelFromEntityList = CreateBadgeModelFromEntityList;

        public static Func<IBadge, IBadgeModel, string?, IBadgeModel>? CreateBadgeModelFromEntityHooksFull { get; set; }

        public static Func<IBadge, IBadgeModel, string?, IBadgeModel>? CreateBadgeModelFromEntityHooksLite { get; set; }

        public static Func<IBadge, IBadgeModel, string?, IBadgeModel>? CreateBadgeModelFromEntityHooksList { get; set; }

        public static Expression<Func<Badge, AnonBadge>>? PreBuiltBadgeSQLSelectorFull { get; set; }

        public static Expression<Func<Badge, AnonBadge>>? PreBuiltBadgeSQLSelectorLite { get; set; }

        public static Expression<Func<Badge, AnonBadge>>? PreBuiltBadgeSQLSelectorList { get; set; }

        /// <summary>An <see cref="IBadgeModel"/> extension method that creates a(n) <see cref="Badge"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Badge"/> entity.</returns>
        public static IBadge CreateBadgeEntity(
            this IBadgeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IBadgeModel, Badge>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateBadgeFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IBadgeModel"/> extension method that updates a(n) <see cref="Badge"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Badge"/> entity.</returns>
        public static IBadge UpdateBadgeFromModel(
            this IBadge entity,
            IBadgeModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Badge's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenBadgeSQLSelectorFull()
        {
            PreBuiltBadgeSQLSelectorFull = x => x == null ? null! : new AnonBadge
            {
                TypeID = x.TypeID,
                Type = ModelMapperForBadgeType.PreBuiltBadgeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForBadgeImage.PreBuiltBadgeImageSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenBadgeSQLSelectorLite()
        {
            PreBuiltBadgeSQLSelectorLite = x => x == null ? null! : new AnonBadge
            {
                TypeID = x.TypeID,
                Type = ModelMapperForBadgeType.PreBuiltBadgeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenBadgeSQLSelectorList()
        {
            PreBuiltBadgeSQLSelectorList = x => x == null ? null! : new AnonBadge
            {
                TypeID = x.TypeID,
                Type = ModelMapperForBadgeType.PreBuiltBadgeTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IBadgeModel> SelectFullBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltBadgeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IBadgeModel> SelectLiteBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltBadgeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IBadgeModel> SelectListBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltBadgeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityList(x, contextProfileName))!;
        }

        public static IBadgeModel? SelectFirstFullBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBadgeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IBadgeModel? SelectFirstListBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBadgeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IBadgeModel? SelectSingleFullBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBadgeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IBadgeModel? SelectSingleLiteBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBadgeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IBadgeModel? SelectSingleListBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBadgeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateBadgeModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IBadgeModel> results, int totalPages, int totalCount) SelectFullBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltBadgeSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateBadgeModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IBadgeModel> results, int totalPages, int totalCount) SelectLiteBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltBadgeSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateBadgeModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IBadgeModel> results, int totalPages, int totalCount) SelectListBadgeAndMapToBadgeModel(
            this IQueryable<Badge> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBadgeSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltBadgeSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateBadgeModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IBadgeModel? CreateBadgeModelFromEntityFull(this IBadge? entity, string? contextProfileName)
        {
            return CreateBadgeModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IBadgeModel? CreateBadgeModelFromEntityLite(this IBadge? entity, string? contextProfileName)
        {
            return CreateBadgeModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IBadgeModel? CreateBadgeModelFromEntityList(this IBadge? entity, string? contextProfileName)
        {
            return CreateBadgeModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IBadgeModel? CreateBadgeModelFromEntity(
            this IBadge? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IBadgeModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Badge's Properties
                    // Badge's Related Objects
                    // Badge's Associated Objects
                    model.Images = (entity is AnonBadge ? ((AnonBadge)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForBadgeImage.CreateBadgeImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateBadgeModelFromEntityHooksFull != null) { model = CreateBadgeModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Badge's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForBadgeType.CreateBadgeTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Badge's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Badge's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateBadgeModelFromEntityHooksLite != null) { model = CreateBadgeModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Badge's Properties
                    // Badge's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Badge's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateBadgeModelFromEntityHooksList != null) { model = CreateBadgeModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
