// <autogenerated>
// <copyright file="Mapping.Auctions.Lot.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Auctions section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForLot
    {
        public sealed class AnonLot : Lot
        {
            public new IEnumerable<LotCategory>? Categories { get; set; }
        }

        public static readonly Func<Lot?, string?, ILotModel?> MapLotModelFromEntityFull = CreateLotModelFromEntityFull;

        public static readonly Func<Lot?, string?, ILotModel?> MapLotModelFromEntityLite = CreateLotModelFromEntityLite;

        public static readonly Func<Lot?, string?, ILotModel?> MapLotModelFromEntityList = CreateLotModelFromEntityList;

        public static Func<ILot, ILotModel, string?, ILotModel>? CreateLotModelFromEntityHooksFull { get; set; }

        public static Func<ILot, ILotModel, string?, ILotModel>? CreateLotModelFromEntityHooksLite { get; set; }

        public static Func<ILot, ILotModel, string?, ILotModel>? CreateLotModelFromEntityHooksList { get; set; }

        public static Expression<Func<Lot, AnonLot>>? PreBuiltLotSQLSelectorFull { get; set; }

        public static Expression<Func<Lot, AnonLot>>? PreBuiltLotSQLSelectorLite { get; set; }

        public static Expression<Func<Lot, AnonLot>>? PreBuiltLotSQLSelectorList { get; set; }

        /// <summary>An <see cref="ILotModel"/> extension method that creates a(n) <see cref="Lot"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Lot"/> entity.</returns>
        public static ILot CreateLotEntity(
            this ILotModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ILotModel, Lot>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateLotFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ILotModel"/> extension method that updates a(n) <see cref="Lot"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Lot"/> entity.</returns>
        public static ILot UpdateLotFromModel(
            this ILot entity,
            ILotModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Lot Properties
            entity.BiddingReserve = model.BiddingReserve;
            entity.BuyNowAvailable = model.BuyNowAvailable;
            entity.NoShow = model.NoShow;
            entity.PickupTime = model.PickupTime;
            entity.PreventBuyMultiple = model.PreventBuyMultiple;
            entity.QuantityAvailable = model.QuantityAvailable;
            entity.QuantitySold = model.QuantitySold;
            // Lot's Related Objects
            // Lot's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenLotSQLSelectorFull()
        {
            PreBuiltLotSQLSelectorFull = x => x == null ? null! : new AnonLot
            {
                StatusID = x.StatusID,
                Status = ModelMapperForLotStatus.PreBuiltLotStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                TypeID = x.TypeID,
                Type = ModelMapperForLotType.PreBuiltLotTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                Categories = x.Categories!.Where(y => y.Active).Select(ModelMapperForLotCategory.PreBuiltLotCategorySQLSelectorList.Expand().Compile()).ToList(),
                BuyNowAvailable = x.BuyNowAvailable,
                PreventBuyMultiple = x.PreventBuyMultiple,
                NoShow = x.NoShow,
                PickupTime = x.PickupTime,
                BiddingReserve = x.BiddingReserve,
                QuantityAvailable = x.QuantityAvailable,
                QuantitySold = x.QuantitySold,
                LotGroupID = x.LotGroupID,
                LotGroup = ModelMapperForLotGroup.PreBuiltLotGroupSQLSelectorList.Expand().Compile().Invoke(x.LotGroup!),
                AuctionID = x.AuctionID,
                Auction = ModelMapperForAuction.PreBuiltAuctionSQLSelectorList.Expand().Compile().Invoke(x.Auction!),
                PickupLocationID = x.PickupLocationID,
                PickupLocation = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.PickupLocation!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenLotSQLSelectorLite()
        {
            PreBuiltLotSQLSelectorLite = x => x == null ? null! : new AnonLot
            {
                StatusID = x.StatusID,
                Status = ModelMapperForLotStatus.PreBuiltLotStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                TypeID = x.TypeID,
                Type = ModelMapperForLotType.PreBuiltLotTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                BuyNowAvailable = x.BuyNowAvailable,
                PreventBuyMultiple = x.PreventBuyMultiple,
                NoShow = x.NoShow,
                PickupTime = x.PickupTime,
                BiddingReserve = x.BiddingReserve,
                QuantityAvailable = x.QuantityAvailable,
                QuantitySold = x.QuantitySold,
                LotGroupID = x.LotGroupID,
                LotGroup = ModelMapperForLotGroup.PreBuiltLotGroupSQLSelectorList.Expand().Compile().Invoke(x.LotGroup!),
                AuctionID = x.AuctionID,
                Auction = ModelMapperForAuction.PreBuiltAuctionSQLSelectorList.Expand().Compile().Invoke(x.Auction!),
                PickupLocationID = x.PickupLocationID,
                PickupLocation = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.PickupLocation!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenLotSQLSelectorList()
        {
            PreBuiltLotSQLSelectorList = x => x == null ? null! : new AnonLot
            {
                StatusID = x.StatusID,
                Status = ModelMapperForLotStatus.PreBuiltLotStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                TypeID = x.TypeID,
                Type = ModelMapperForLotType.PreBuiltLotTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!), // For Flattening Properties (List)
                BuyNowAvailable = x.BuyNowAvailable,
                PreventBuyMultiple = x.PreventBuyMultiple,
                NoShow = x.NoShow,
                PickupTime = x.PickupTime,
                BiddingReserve = x.BiddingReserve,
                QuantityAvailable = x.QuantityAvailable,
                QuantitySold = x.QuantitySold,
                LotGroupID = x.LotGroupID,
                LotGroup = ModelMapperForLotGroup.PreBuiltLotGroupSQLSelectorList.Expand().Compile().Invoke(x.LotGroup!), // For Flattening Properties (List)
                AuctionID = x.AuctionID,
                Auction = ModelMapperForAuction.PreBuiltAuctionSQLSelectorList.Expand().Compile().Invoke(x.Auction!), // For Flattening Properties (List)
                PickupLocationID = x.PickupLocationID,
                PickupLocation = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.PickupLocation!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ILotModel> SelectFullLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltLotSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ILotModel> SelectLiteLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltLotSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ILotModel> SelectListLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltLotSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityList(x, contextProfileName))!;
        }

        public static ILotModel? SelectFirstFullLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLotSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ILotModel? SelectFirstListLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLotSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ILotModel? SelectSingleFullLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLotSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ILotModel? SelectSingleLiteLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLotSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ILotModel? SelectSingleListLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltLotSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateLotModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ILotModel> results, int totalPages, int totalCount) SelectFullLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltLotSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateLotModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ILotModel> results, int totalPages, int totalCount) SelectLiteLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltLotSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateLotModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ILotModel> results, int totalPages, int totalCount) SelectListLotAndMapToLotModel(
            this IQueryable<Lot> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltLotSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltLotSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateLotModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ILotModel? CreateLotModelFromEntityFull(this ILot? entity, string? contextProfileName)
        {
            return CreateLotModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ILotModel? CreateLotModelFromEntityLite(this ILot? entity, string? contextProfileName)
        {
            return CreateLotModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ILotModel? CreateLotModelFromEntityList(this ILot? entity, string? contextProfileName)
        {
            return CreateLotModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ILotModel? CreateLotModelFromEntity(
            this ILot? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ILotModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForLotType.CreateLotTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForLotStatus.CreateLotStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Lot's Properties
                    // Lot's Related Objects
                    model.Auction = ModelMapperForAuction.CreateAuctionModelFromEntityLite(entity.Auction, contextProfileName);
                    model.LotGroup = ModelMapperForLotGroup.CreateLotGroupModelFromEntityLite(entity.LotGroup, contextProfileName);
                    model.PickupLocation = ModelMapperForContact.CreateContactModelFromEntityLite(entity.PickupLocation, contextProfileName);
                    model.Product = ModelMapperForProduct.MapLiteProductOldExt(entity.Product);
                    // Lot's Associated Objects
                    model.Categories = (entity is AnonLot ? ((AnonLot)entity).Categories : entity.Categories)?.Where(x => x.Active).Select(x => ModelMapperForLotCategory.CreateLotCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateLotModelFromEntityHooksFull != null) { model = CreateLotModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Lot's Properties
                    // Lot's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Lot's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateLotModelFromEntityHooksLite != null) { model = CreateLotModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Lot's Properties
                    model.BiddingReserve = entity.BiddingReserve;
                    model.BuyNowAvailable = entity.BuyNowAvailable;
                    model.NoShow = entity.NoShow;
                    model.PickupTime = entity.PickupTime;
                    model.PreventBuyMultiple = entity.PreventBuyMultiple;
                    model.QuantityAvailable = entity.QuantityAvailable;
                    model.QuantitySold = entity.QuantitySold;
                    // Lot's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AuctionID = entity.AuctionID;
                    model.AuctionKey = entity.Auction?.CustomKey;
                    model.AuctionName = entity.Auction?.Name;
                    model.LotGroupID = entity.LotGroupID;
                    model.LotGroupKey = entity.LotGroup?.CustomKey;
                    model.LotGroupName = entity.LotGroup?.Name;
                    model.PickupLocationID = entity.PickupLocationID;
                    model.PickupLocationKey = entity.PickupLocation?.CustomKey;
                    model.ProductID = entity.ProductID;
                    model.ProductKey = entity.Product?.CustomKey;
                    model.ProductName = entity.Product?.Name;
                    model.ProductSeoUrl = entity.Product?.SeoUrl;
                    // Lot's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateLotModelFromEntityHooksList != null) { model = CreateLotModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
