// <autogenerated>
// <copyright file="Mapping.Auctions.Auction.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Auctions section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAuction
    {
        public sealed class AnonAuction : Auction
        {
            public new IEnumerable<AuctionCategory>? Categories { get; set; }
            public new IEnumerable<BrandAuction>? Brands { get; set; }
            public new IEnumerable<FranchiseAuction>? Franchises { get; set; }
            public new IEnumerable<StoreAuction>? Stores { get; set; }
        }

        public static readonly Func<Auction?, string?, IAuctionModel?> MapAuctionModelFromEntityFull = CreateAuctionModelFromEntityFull;

        public static readonly Func<Auction?, string?, IAuctionModel?> MapAuctionModelFromEntityLite = CreateAuctionModelFromEntityLite;

        public static readonly Func<Auction?, string?, IAuctionModel?> MapAuctionModelFromEntityList = CreateAuctionModelFromEntityList;

        public static Func<IAuction, IAuctionModel, string?, IAuctionModel>? CreateAuctionModelFromEntityHooksFull { get; set; }

        public static Func<IAuction, IAuctionModel, string?, IAuctionModel>? CreateAuctionModelFromEntityHooksLite { get; set; }

        public static Func<IAuction, IAuctionModel, string?, IAuctionModel>? CreateAuctionModelFromEntityHooksList { get; set; }

        public static Expression<Func<Auction, AnonAuction>>? PreBuiltAuctionSQLSelectorFull { get; set; }

        public static Expression<Func<Auction, AnonAuction>>? PreBuiltAuctionSQLSelectorLite { get; set; }

        public static Expression<Func<Auction, AnonAuction>>? PreBuiltAuctionSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAuctionModel"/> extension method that creates a(n) <see cref="Auction"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Auction"/> entity.</returns>
        public static IAuction CreateAuctionEntity(
            this IAuctionModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IAuctionModel, Auction>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAuctionFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAuctionModel"/> extension method that updates a(n) <see cref="Auction"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Auction"/> entity.</returns>
        public static IAuction UpdateAuctionFromModel(
            this IAuction entity,
            IAuctionModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Auction Properties
            entity.ClosesAt = model.ClosesAt;
            entity.OpensAt = model.OpensAt;
            // Auction's Related Objects
            // Auction's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAuctionSQLSelectorFull()
        {
            PreBuiltAuctionSQLSelectorFull = x => x == null ? null! : new AnonAuction
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAuctionType.PreBuiltAuctionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAuctionStatus.PreBuiltAuctionStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandAuction.PreBuiltBrandAuctionSQLSelectorList.Expand().Compile()).ToList(),
                Categories = x.Categories!.Where(y => y.Active).Select(ModelMapperForAuctionCategory.PreBuiltAuctionCategorySQLSelectorList.Expand().Compile()).ToList(),
                Franchises = x.Franchises!.Where(y => y.Active).Select(ModelMapperForFranchiseAuction.PreBuiltFranchiseAuctionSQLSelectorList.Expand().Compile()).ToList(),
                Stores = x.Stores!.Where(y => y.Active).Select(ModelMapperForStoreAuction.PreBuiltStoreAuctionSQLSelectorList.Expand().Compile()).ToList(),
                OpensAt = x.OpensAt,
                ClosesAt = x.ClosesAt,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAuctionSQLSelectorLite()
        {
            PreBuiltAuctionSQLSelectorLite = x => x == null ? null! : new AnonAuction
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAuctionType.PreBuiltAuctionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAuctionStatus.PreBuiltAuctionStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                OpensAt = x.OpensAt,
                ClosesAt = x.ClosesAt,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAuctionSQLSelectorList()
        {
            PreBuiltAuctionSQLSelectorList = x => x == null ? null! : new AnonAuction
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAuctionType.PreBuiltAuctionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForAuctionStatus.PreBuiltAuctionStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                OpensAt = x.OpensAt,
                ClosesAt = x.ClosesAt,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAuctionModel> SelectFullAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAuctionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAuctionModel> SelectLiteAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAuctionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAuctionModel> SelectListAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAuctionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityList(x, contextProfileName))!;
        }

        public static IAuctionModel? SelectFirstFullAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAuctionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAuctionModel? SelectFirstListAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAuctionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAuctionModel? SelectSingleFullAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAuctionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAuctionModel? SelectSingleLiteAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAuctionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAuctionModel? SelectSingleListAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAuctionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAuctionModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAuctionModel> results, int totalPages, int totalCount) SelectFullAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAuctionSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAuctionModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAuctionModel> results, int totalPages, int totalCount) SelectLiteAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAuctionSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAuctionModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAuctionModel> results, int totalPages, int totalCount) SelectListAuctionAndMapToAuctionModel(
            this IQueryable<Auction> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAuctionSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAuctionSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAuctionModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAuctionModel? CreateAuctionModelFromEntityFull(this IAuction? entity, string? contextProfileName)
        {
            return CreateAuctionModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAuctionModel? CreateAuctionModelFromEntityLite(this IAuction? entity, string? contextProfileName)
        {
            return CreateAuctionModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAuctionModel? CreateAuctionModelFromEntityList(this IAuction? entity, string? contextProfileName)
        {
            return CreateAuctionModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAuctionModel? CreateAuctionModelFromEntity(
            this IAuction? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAuctionModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForAuctionType.CreateAuctionTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForAuctionStatus.CreateAuctionStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Auction's Properties
                    // Auction's Related Objects
                    // Auction's Associated Objects
                    model.Brands = (entity is AnonAuction ? ((AnonAuction)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandAuction.CreateBrandAuctionModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Categories = (entity is AnonAuction ? ((AnonAuction)entity).Categories : entity.Categories)?.Where(x => x.Active).Select(x => ModelMapperForAuctionCategory.CreateAuctionCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Franchises = (entity is AnonAuction ? ((AnonAuction)entity).Franchises : entity.Franchises)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseAuction.CreateFranchiseAuctionModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Stores = (entity is AnonAuction ? ((AnonAuction)entity).Stores : entity.Stores)?.Where(x => x.Active).Select(x => ModelMapperForStoreAuction.CreateStoreAuctionModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateAuctionModelFromEntityHooksFull != null) { model = CreateAuctionModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Auction's Properties
                    // Auction's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    // Auction's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAuctionModelFromEntityHooksLite != null) { model = CreateAuctionModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Auction's Properties
                    model.ClosesAt = entity.ClosesAt;
                    model.OpensAt = entity.OpensAt;
                    // Auction's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ContactID = entity.ContactID;
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    // Auction's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAuctionModelFromEntityHooksList != null) { model = CreateAuctionModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
