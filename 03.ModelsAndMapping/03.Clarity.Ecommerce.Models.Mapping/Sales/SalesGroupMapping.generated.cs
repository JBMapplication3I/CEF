// <autogenerated>
// <copyright file="Mapping.Sales.SalesGroup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Sales section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForSalesGroup
    {
        public sealed class AnonSalesGroup : SalesGroup
        {
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<PurchaseOrder>? PurchaseOrders { get; set; }
            public new IEnumerable<SalesInvoice>? SalesInvoices { get; set; }
            public new IEnumerable<SalesOrder>? SalesOrderMasters { get; set; }
            public new IEnumerable<SalesOrder>? SubSalesOrders { get; set; }
            public new IEnumerable<SalesQuote>? SalesQuoteRequestMasters { get; set; }
            public new IEnumerable<SalesQuote>? SalesQuoteRequestSubs { get; set; }
            public new IEnumerable<SalesQuote>? SalesQuoteResponseMasters { get; set; }
            public new IEnumerable<SalesQuote>? SalesQuoteResponseSubs { get; set; }
            public new IEnumerable<SalesReturn>? SalesReturns { get; set; }
            public new IEnumerable<SampleRequest>? SampleRequests { get; set; }
        }

        public static readonly Func<SalesGroup?, string?, ISalesGroupModel?> MapSalesGroupModelFromEntityFull = CreateSalesGroupModelFromEntityFull;

        public static readonly Func<SalesGroup?, string?, ISalesGroupModel?> MapSalesGroupModelFromEntityLite = CreateSalesGroupModelFromEntityLite;

        public static readonly Func<SalesGroup?, string?, ISalesGroupModel?> MapSalesGroupModelFromEntityList = CreateSalesGroupModelFromEntityList;

        public static Func<ISalesGroup, ISalesGroupModel, string?, ISalesGroupModel>? CreateSalesGroupModelFromEntityHooksFull { get; set; }

        public static Func<ISalesGroup, ISalesGroupModel, string?, ISalesGroupModel>? CreateSalesGroupModelFromEntityHooksLite { get; set; }

        public static Func<ISalesGroup, ISalesGroupModel, string?, ISalesGroupModel>? CreateSalesGroupModelFromEntityHooksList { get; set; }

        public static Expression<Func<SalesGroup, AnonSalesGroup>>? PreBuiltSalesGroupSQLSelectorFull { get; set; }

        public static Expression<Func<SalesGroup, AnonSalesGroup>>? PreBuiltSalesGroupSQLSelectorLite { get; set; }

        public static Expression<Func<SalesGroup, AnonSalesGroup>>? PreBuiltSalesGroupSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISalesGroupModel"/> extension method that creates a(n) <see cref="SalesGroup"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="SalesGroup"/> entity.</returns>
        public static ISalesGroup CreateSalesGroupEntity(
            this ISalesGroupModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ISalesGroupModel, SalesGroup>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateSalesGroupFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISalesGroupModel"/> extension method that updates a(n) <see cref="SalesGroup"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="SalesGroup"/> entity.</returns>
        public static ISalesGroup UpdateSalesGroupFromModel(
            this ISalesGroup entity,
            ISalesGroupModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // SalesGroup's Related Objects
            // SalesGroup's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenSalesGroupSQLSelectorFull()
        {
            PreBuiltSalesGroupSQLSelectorFull = x => x == null ? null! : new AnonSalesGroup
            {
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                SalesQuoteRequestMasters = x.SalesQuoteRequestMasters!.Where(y => y.Active).Select(ModelMapperForSalesQuote.PreBuiltSalesQuoteSQLSelectorList.Expand().Compile()).ToList(),
                SalesQuoteRequestSubs = x.SalesQuoteRequestSubs!.Where(y => y.Active).Select(ModelMapperForSalesQuote.PreBuiltSalesQuoteSQLSelectorList.Expand().Compile()).ToList(),
                SalesQuoteResponseMasters = x.SalesQuoteResponseMasters!.Where(y => y.Active).Select(ModelMapperForSalesQuote.PreBuiltSalesQuoteSQLSelectorList.Expand().Compile()).ToList(),
                SalesQuoteResponseSubs = x.SalesQuoteResponseSubs!.Where(y => y.Active).Select(ModelMapperForSalesQuote.PreBuiltSalesQuoteSQLSelectorList.Expand().Compile()).ToList(),
                SubSalesOrders = x.SubSalesOrders!.Where(y => y.Active).Select(ModelMapperForSalesOrder.PreBuiltSalesOrderSQLSelectorList.Expand().Compile()).ToList(),
                SalesOrderMasters = x.SalesOrderMasters!.Where(y => y.Active).Select(ModelMapperForSalesOrder.PreBuiltSalesOrderSQLSelectorList.Expand().Compile()).ToList(),
                PurchaseOrders = x.PurchaseOrders!.Where(y => y.Active).Select(ModelMapperForPurchaseOrder.PreBuiltPurchaseOrderSQLSelectorList.Expand().Compile()).ToList(),
                SalesInvoices = x.SalesInvoices!.Where(y => y.Active).Select(ModelMapperForSalesInvoice.PreBuiltSalesInvoiceSQLSelectorList.Expand().Compile()).ToList(),
                SalesReturns = x.SalesReturns!.Where(y => y.Active).Select(ModelMapperForSalesReturn.PreBuiltSalesReturnSQLSelectorList.Expand().Compile()).ToList(),
                SampleRequests = x.SampleRequests!.Where(y => y.Active).Select(ModelMapperForSampleRequest.PreBuiltSampleRequestSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSalesGroupSQLSelectorLite()
        {
            PreBuiltSalesGroupSQLSelectorLite = x => x == null ? null! : new AnonSalesGroup
            {
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                BillingContactID = x.BillingContactID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSalesGroupSQLSelectorList()
        {
            PreBuiltSalesGroupSQLSelectorList = x => x == null ? null! : new AnonSalesGroup
            {
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                BillingContactID = x.BillingContactID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!), // For Flattening Properties
            };
        }

        public static IEnumerable<ISalesGroupModel> SelectFullSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesGroupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesGroupModel> SelectLiteSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesGroupSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesGroupModel> SelectListSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSalesGroupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityList(x, contextProfileName))!;
        }

        public static ISalesGroupModel? SelectFirstFullSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesGroupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesGroupModel? SelectFirstListSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesGroupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesGroupModel? SelectSingleFullSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesGroupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesGroupModel? SelectSingleLiteSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesGroupSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesGroupModel? SelectSingleListSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSalesGroupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSalesGroupModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISalesGroupModel> results, int totalPages, int totalCount) SelectFullSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesGroupSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateSalesGroupModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesGroupModel> results, int totalPages, int totalCount) SelectLiteSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesGroupSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateSalesGroupModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesGroupModel> results, int totalPages, int totalCount) SelectListSalesGroupAndMapToSalesGroupModel(
            this IQueryable<SalesGroup> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSalesGroupSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSalesGroupSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateSalesGroupModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISalesGroupModel? CreateSalesGroupModelFromEntityFull(this ISalesGroup? entity, string? contextProfileName)
        {
            return CreateSalesGroupModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISalesGroupModel? CreateSalesGroupModelFromEntityLite(this ISalesGroup? entity, string? contextProfileName)
        {
            return CreateSalesGroupModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISalesGroupModel? CreateSalesGroupModelFromEntityList(this ISalesGroup? entity, string? contextProfileName)
        {
            return CreateSalesGroupModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISalesGroupModel? CreateSalesGroupModelFromEntity(
            this ISalesGroup? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ISalesGroupModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // SalesGroup's Properties
                    // SalesGroup's Related Objects
                    model.Account = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Account, contextProfileName);
                    model.BillingContact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.BillingContact, contextProfileName);
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    // SalesGroup's Associated Objects
                    model.PurchaseOrders = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).PurchaseOrders : entity.PurchaseOrders)?.Where(x => x.Active).Select(x => ModelMapperForPurchaseOrder.CreatePurchaseOrderModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesInvoices = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SalesInvoices : entity.SalesInvoices)?.Where(x => x.Active).Select(x => ModelMapperForSalesInvoice.CreateSalesInvoiceModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesOrderMasters = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SalesOrderMasters : entity.SalesOrderMasters)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrder.CreateSalesOrderModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesQuoteRequestMasters = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SalesQuoteRequestMasters : entity.SalesQuoteRequestMasters)?.Where(x => x.Active).Select(x => ModelMapperForSalesQuote.CreateSalesQuoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesQuoteRequestSubs = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SalesQuoteRequestSubs : entity.SalesQuoteRequestSubs)?.Where(x => x.Active).Select(x => ModelMapperForSalesQuote.CreateSalesQuoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesQuoteResponseMasters = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SalesQuoteResponseMasters : entity.SalesQuoteResponseMasters)?.Where(x => x.Active).Select(x => ModelMapperForSalesQuote.CreateSalesQuoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesQuoteResponseSubs = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SalesQuoteResponseSubs : entity.SalesQuoteResponseSubs)?.Where(x => x.Active).Select(x => ModelMapperForSalesQuote.CreateSalesQuoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SalesReturns = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SalesReturns : entity.SalesReturns)?.Where(x => x.Active).Select(x => ModelMapperForSalesReturn.CreateSalesReturnModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SampleRequests = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SampleRequests : entity.SampleRequests)?.Where(x => x.Active).Select(x => ModelMapperForSampleRequest.CreateSampleRequestModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.SubSalesOrders = (entity is AnonSalesGroup ? ((AnonSalesGroup)entity).SubSalesOrders : entity.SubSalesOrders)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrder.CreateSalesOrderModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateSalesGroupModelFromEntityHooksFull != null) { model = CreateSalesGroupModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // SalesGroup's Properties
                    // SalesGroup's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // SalesGroup's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSalesGroupModelFromEntityHooksLite != null) { model = CreateSalesGroupModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // SalesGroup's Properties
                    // SalesGroup's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountID = entity.AccountID;
                    model.AccountKey = entity.Account?.CustomKey;
                    model.AccountName = entity.Account?.Name;
                    model.BillingContactID = entity.BillingContactID;
                    model.BillingContactKey = entity.BillingContact?.CustomKey;
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    // SalesGroup's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSalesGroupModelFromEntityHooksList != null) { model = CreateSalesGroupModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
