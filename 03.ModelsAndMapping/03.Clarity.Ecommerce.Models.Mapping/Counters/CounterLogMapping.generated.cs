// <autogenerated>
// <copyright file="Mapping.Counters.CounterLog.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Counters section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCounterLog
    {
        public sealed class AnonCounterLog : CounterLog
        {
        }

        public static readonly Func<CounterLog?, string?, ICounterLogModel?> MapCounterLogModelFromEntityFull = CreateCounterLogModelFromEntityFull;

        public static readonly Func<CounterLog?, string?, ICounterLogModel?> MapCounterLogModelFromEntityLite = CreateCounterLogModelFromEntityLite;

        public static readonly Func<CounterLog?, string?, ICounterLogModel?> MapCounterLogModelFromEntityList = CreateCounterLogModelFromEntityList;

        public static Func<ICounterLog, ICounterLogModel, string?, ICounterLogModel>? CreateCounterLogModelFromEntityHooksFull { get; set; }

        public static Func<ICounterLog, ICounterLogModel, string?, ICounterLogModel>? CreateCounterLogModelFromEntityHooksLite { get; set; }

        public static Func<ICounterLog, ICounterLogModel, string?, ICounterLogModel>? CreateCounterLogModelFromEntityHooksList { get; set; }

        public static Expression<Func<CounterLog, AnonCounterLog>>? PreBuiltCounterLogSQLSelectorFull { get; set; }

        public static Expression<Func<CounterLog, AnonCounterLog>>? PreBuiltCounterLogSQLSelectorLite { get; set; }

        public static Expression<Func<CounterLog, AnonCounterLog>>? PreBuiltCounterLogSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICounterLogModel"/> extension method that creates a(n) <see cref="CounterLog"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="CounterLog"/> entity.</returns>
        public static ICounterLog CreateCounterLogEntity(
            this ICounterLogModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ICounterLogModel, CounterLog>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCounterLogFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICounterLogModel"/> extension method that updates a(n) <see cref="CounterLog"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="CounterLog"/> entity.</returns>
        public static ICounterLog UpdateCounterLogFromModel(
            this ICounterLog entity,
            ICounterLogModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // CounterLog Properties
            entity.Value = model.Value;
            // CounterLog's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCounterLogSQLSelectorFull()
        {
            PreBuiltCounterLogSQLSelectorFull = x => x == null ? null! : new AnonCounterLog
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCounterLogType.PreBuiltCounterLogTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Value = x.Value,
                CounterID = x.CounterID,
                Counter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.Counter!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCounterLogSQLSelectorLite()
        {
            PreBuiltCounterLogSQLSelectorLite = x => x == null ? null! : new AnonCounterLog
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCounterLogType.PreBuiltCounterLogTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Value = x.Value,
                CounterID = x.CounterID,
                Counter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.Counter!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCounterLogSQLSelectorList()
        {
            PreBuiltCounterLogSQLSelectorList = x => x == null ? null! : new AnonCounterLog
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCounterLogType.PreBuiltCounterLogTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                Value = x.Value,
                CounterID = x.CounterID,
                Counter = ModelMapperForCounter.PreBuiltCounterSQLSelectorList.Expand().Compile().Invoke(x.Counter!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICounterLogModel> SelectFullCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCounterLogSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICounterLogModel> SelectLiteCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCounterLogSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICounterLogModel> SelectListCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCounterLogSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityList(x, contextProfileName))!;
        }

        public static ICounterLogModel? SelectFirstFullCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterLogSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICounterLogModel? SelectFirstListCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterLogSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICounterLogModel? SelectSingleFullCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterLogSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICounterLogModel? SelectSingleLiteCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterLogSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICounterLogModel? SelectSingleListCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterLogSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCounterLogModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICounterLogModel> results, int totalPages, int totalCount) SelectFullCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCounterLogSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCounterLogModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICounterLogModel> results, int totalPages, int totalCount) SelectLiteCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCounterLogSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCounterLogModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICounterLogModel> results, int totalPages, int totalCount) SelectListCounterLogAndMapToCounterLogModel(
            this IQueryable<CounterLog> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterLogSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCounterLogSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCounterLogModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICounterLogModel? CreateCounterLogModelFromEntityFull(this ICounterLog? entity, string? contextProfileName)
        {
            return CreateCounterLogModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICounterLogModel? CreateCounterLogModelFromEntityLite(this ICounterLog? entity, string? contextProfileName)
        {
            return CreateCounterLogModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICounterLogModel? CreateCounterLogModelFromEntityList(this ICounterLog? entity, string? contextProfileName)
        {
            return CreateCounterLogModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICounterLogModel? CreateCounterLogModelFromEntity(
            this ICounterLog? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICounterLogModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CounterLog's Properties
                    // CounterLog's Related Objects
                    model.Counter = ModelMapperForCounter.CreateCounterModelFromEntityLite(entity.Counter, contextProfileName);
                    // CounterLog's Associated Objects
                    // Additional Mappings
                    if (CreateCounterLogModelFromEntityHooksFull != null) { model = CreateCounterLogModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CounterLog's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForCounterLogType.CreateCounterLogTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // CounterLog's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // CounterLog's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCounterLogModelFromEntityHooksLite != null) { model = CreateCounterLogModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // CounterLog's Properties
                    model.Value = entity.Value;
                    // CounterLog's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CounterID = entity.CounterID;
                    model.CounterKey = entity.Counter?.CustomKey;
                    // CounterLog's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCounterLogModelFromEntityHooksList != null) { model = CreateCounterLogModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
