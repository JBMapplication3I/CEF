// <autogenerated>
// <copyright file="Mapping.Counters.Counter.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Counters section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCounter
    {
        public sealed class AnonCounter : Counter
        {
            public new IEnumerable<CounterLog>? CounterLogs { get; set; }
        }

        public static readonly Func<Counter?, string?, ICounterModel?> MapCounterModelFromEntityFull = CreateCounterModelFromEntityFull;

        public static readonly Func<Counter?, string?, ICounterModel?> MapCounterModelFromEntityLite = CreateCounterModelFromEntityLite;

        public static readonly Func<Counter?, string?, ICounterModel?> MapCounterModelFromEntityList = CreateCounterModelFromEntityList;

        public static Func<ICounter, ICounterModel, string?, ICounterModel>? CreateCounterModelFromEntityHooksFull { get; set; }

        public static Func<ICounter, ICounterModel, string?, ICounterModel>? CreateCounterModelFromEntityHooksLite { get; set; }

        public static Func<ICounter, ICounterModel, string?, ICounterModel>? CreateCounterModelFromEntityHooksList { get; set; }

        public static Expression<Func<Counter, AnonCounter>>? PreBuiltCounterSQLSelectorFull { get; set; }

        public static Expression<Func<Counter, AnonCounter>>? PreBuiltCounterSQLSelectorLite { get; set; }

        public static Expression<Func<Counter, AnonCounter>>? PreBuiltCounterSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICounterModel"/> extension method that creates a(n) <see cref="Counter"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Counter"/> entity.</returns>
        public static ICounter CreateCounterEntity(
            this ICounterModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ICounterModel, Counter>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCounterFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICounterModel"/> extension method that updates a(n) <see cref="Counter"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Counter"/> entity.</returns>
        public static ICounter UpdateCounterFromModel(
            this ICounter entity,
            ICounterModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Counter Properties
            entity.Value = model.Value;
            // Counter's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCounterSQLSelectorFull()
        {
            PreBuiltCounterSQLSelectorFull = x => x == null ? null! : new AnonCounter
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCounterType.PreBuiltCounterTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Value = x.Value,
                CounterLogs = x.CounterLogs!.Where(y => y.Active).Select(ModelMapperForCounterLog.PreBuiltCounterLogSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCounterSQLSelectorLite()
        {
            PreBuiltCounterSQLSelectorLite = x => x == null ? null! : new AnonCounter
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCounterType.PreBuiltCounterTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Value = x.Value,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCounterSQLSelectorList()
        {
            PreBuiltCounterSQLSelectorList = x => x == null ? null! : new AnonCounter
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCounterType.PreBuiltCounterTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                Value = x.Value,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICounterModel> SelectFullCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCounterSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICounterModel> SelectLiteCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCounterSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICounterModel> SelectListCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCounterSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityList(x, contextProfileName))!;
        }

        public static ICounterModel? SelectFirstFullCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICounterModel? SelectFirstListCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICounterModel? SelectSingleFullCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICounterModel? SelectSingleLiteCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICounterModel? SelectSingleListCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCounterSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCounterModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICounterModel> results, int totalPages, int totalCount) SelectFullCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCounterSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCounterModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICounterModel> results, int totalPages, int totalCount) SelectLiteCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCounterSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCounterModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICounterModel> results, int totalPages, int totalCount) SelectListCounterAndMapToCounterModel(
            this IQueryable<Counter> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCounterSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCounterSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCounterModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICounterModel? CreateCounterModelFromEntityFull(this ICounter? entity, string? contextProfileName)
        {
            return CreateCounterModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICounterModel? CreateCounterModelFromEntityLite(this ICounter? entity, string? contextProfileName)
        {
            return CreateCounterModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICounterModel? CreateCounterModelFromEntityList(this ICounter? entity, string? contextProfileName)
        {
            return CreateCounterModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICounterModel? CreateCounterModelFromEntity(
            this ICounter? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICounterModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Counter's Properties
                    // Counter's Related Objects
                    // Counter's Associated Objects
                    model.CounterLogs = (entity is AnonCounter ? ((AnonCounter)entity).CounterLogs : entity.CounterLogs)?.Where(x => x.Active).Select(x => ModelMapperForCounterLog.CreateCounterLogModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateCounterModelFromEntityHooksFull != null) { model = CreateCounterModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Counter's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForCounterType.CreateCounterTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Counter's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Counter's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCounterModelFromEntityHooksLite != null) { model = CreateCounterModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Counter's Properties
                    model.Value = entity.Value;
                    // Counter's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Counter's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCounterModelFromEntityHooksList != null) { model = CreateCounterModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
