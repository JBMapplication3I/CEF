// <autogenerated>
// <copyright file="Mapping.Scheduling.Calendar.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Scheduling section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCalendar
    {
        public sealed class AnonCalendar : Calendar
        {
            public new IEnumerable<CalendarAppointment>? Appointments { get; set; }
        }

        public static readonly Func<Calendar?, string?, ICalendarModel?> MapCalendarModelFromEntityFull = CreateCalendarModelFromEntityFull;

        public static readonly Func<Calendar?, string?, ICalendarModel?> MapCalendarModelFromEntityLite = CreateCalendarModelFromEntityLite;

        public static readonly Func<Calendar?, string?, ICalendarModel?> MapCalendarModelFromEntityList = CreateCalendarModelFromEntityList;

        public static Func<ICalendar, ICalendarModel, string?, ICalendarModel>? CreateCalendarModelFromEntityHooksFull { get; set; }

        public static Func<ICalendar, ICalendarModel, string?, ICalendarModel>? CreateCalendarModelFromEntityHooksLite { get; set; }

        public static Func<ICalendar, ICalendarModel, string?, ICalendarModel>? CreateCalendarModelFromEntityHooksList { get; set; }

        public static Expression<Func<Calendar, AnonCalendar>>? PreBuiltCalendarSQLSelectorFull { get; set; }

        public static Expression<Func<Calendar, AnonCalendar>>? PreBuiltCalendarSQLSelectorLite { get; set; }

        public static Expression<Func<Calendar, AnonCalendar>>? PreBuiltCalendarSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICalendarModel"/> extension method that creates a(n) <see cref="Calendar"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Calendar"/> entity.</returns>
        public static ICalendar CreateCalendarEntity(
            this ICalendarModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ICalendarModel, Calendar>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCalendarFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICalendarModel"/> extension method that updates a(n) <see cref="Calendar"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Calendar"/> entity.</returns>
        public static ICalendar UpdateCalendarFromModel(
            this ICalendar entity,
            ICalendarModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Calendar Properties
            entity.FridayHoursEnd = model.FridayHoursEnd;
            entity.FridayHoursStart = model.FridayHoursStart;
            entity.MondayHoursEnd = model.MondayHoursEnd;
            entity.MondayHoursStart = model.MondayHoursStart;
            entity.SaturdayHoursEnd = model.SaturdayHoursEnd;
            entity.SaturdayHoursStart = model.SaturdayHoursStart;
            entity.SundayHoursEnd = model.SundayHoursEnd;
            entity.SundayHoursStart = model.SundayHoursStart;
            entity.ThursdayHoursEnd = model.ThursdayHoursEnd;
            entity.ThursdayHoursStart = model.ThursdayHoursStart;
            entity.TuesdayHoursEnd = model.TuesdayHoursEnd;
            entity.TuesdayHoursStart = model.TuesdayHoursStart;
            entity.WednesdayHoursEnd = model.WednesdayHoursEnd;
            entity.WednesdayHoursStart = model.WednesdayHoursStart;
            // Calendar's Related Objects
            // Calendar's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCalendarSQLSelectorFull()
        {
            PreBuiltCalendarSQLSelectorFull = x => x == null ? null! : new AnonCalendar
            {
                MondayHoursStart = x.MondayHoursStart,
                MondayHoursEnd = x.MondayHoursEnd,
                TuesdayHoursStart = x.TuesdayHoursStart,
                TuesdayHoursEnd = x.TuesdayHoursEnd,
                WednesdayHoursStart = x.WednesdayHoursStart,
                WednesdayHoursEnd = x.WednesdayHoursEnd,
                ThursdayHoursStart = x.ThursdayHoursStart,
                ThursdayHoursEnd = x.ThursdayHoursEnd,
                FridayHoursStart = x.FridayHoursStart,
                FridayHoursEnd = x.FridayHoursEnd,
                SaturdayHoursStart = x.SaturdayHoursStart,
                SaturdayHoursEnd = x.SaturdayHoursEnd,
                SundayHoursStart = x.SundayHoursStart,
                SundayHoursEnd = x.SundayHoursEnd,
                AccountID = x.AccountID,
                Appointments = x.Appointments!.Where(y => y.Active).Select(ModelMapperForCalendarAppointment.PreBuiltCalendarAppointmentSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCalendarSQLSelectorLite()
        {
            PreBuiltCalendarSQLSelectorLite = x => x == null ? null! : new AnonCalendar
            {
                MondayHoursStart = x.MondayHoursStart,
                MondayHoursEnd = x.MondayHoursEnd,
                TuesdayHoursStart = x.TuesdayHoursStart,
                TuesdayHoursEnd = x.TuesdayHoursEnd,
                WednesdayHoursStart = x.WednesdayHoursStart,
                WednesdayHoursEnd = x.WednesdayHoursEnd,
                ThursdayHoursStart = x.ThursdayHoursStart,
                ThursdayHoursEnd = x.ThursdayHoursEnd,
                FridayHoursStart = x.FridayHoursStart,
                FridayHoursEnd = x.FridayHoursEnd,
                SaturdayHoursStart = x.SaturdayHoursStart,
                SaturdayHoursEnd = x.SaturdayHoursEnd,
                SundayHoursStart = x.SundayHoursStart,
                SundayHoursEnd = x.SundayHoursEnd,
                AccountID = x.AccountID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCalendarSQLSelectorList()
        {
            PreBuiltCalendarSQLSelectorList = x => x == null ? null! : new AnonCalendar
            {
                MondayHoursStart = x.MondayHoursStart,
                MondayHoursEnd = x.MondayHoursEnd,
                TuesdayHoursStart = x.TuesdayHoursStart,
                TuesdayHoursEnd = x.TuesdayHoursEnd,
                WednesdayHoursStart = x.WednesdayHoursStart,
                WednesdayHoursEnd = x.WednesdayHoursEnd,
                ThursdayHoursStart = x.ThursdayHoursStart,
                ThursdayHoursEnd = x.ThursdayHoursEnd,
                FridayHoursStart = x.FridayHoursStart,
                FridayHoursEnd = x.FridayHoursEnd,
                SaturdayHoursStart = x.SaturdayHoursStart,
                SaturdayHoursEnd = x.SaturdayHoursEnd,
                SundayHoursStart = x.SundayHoursStart,
                SundayHoursEnd = x.SundayHoursEnd,
                AccountID = x.AccountID,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICalendarModel> SelectFullCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICalendarModel> SelectLiteCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICalendarModel> SelectListCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCalendarSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityList(x, contextProfileName))!;
        }

        public static ICalendarModel? SelectFirstFullCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICalendarModel? SelectFirstListCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICalendarModel? SelectSingleFullCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICalendarModel? SelectSingleLiteCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICalendarModel? SelectSingleListCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCalendarSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCalendarModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICalendarModel> results, int totalPages, int totalCount) SelectFullCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICalendarModel> results, int totalPages, int totalCount) SelectLiteCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICalendarModel> results, int totalPages, int totalCount) SelectListCalendarAndMapToCalendarModel(
            this IQueryable<Calendar> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCalendarSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCalendarSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCalendarModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICalendarModel? CreateCalendarModelFromEntityFull(this ICalendar? entity, string? contextProfileName)
        {
            return CreateCalendarModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICalendarModel? CreateCalendarModelFromEntityLite(this ICalendar? entity, string? contextProfileName)
        {
            return CreateCalendarModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICalendarModel? CreateCalendarModelFromEntityList(this ICalendar? entity, string? contextProfileName)
        {
            return CreateCalendarModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICalendarModel? CreateCalendarModelFromEntity(
            this ICalendar? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICalendarModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Calendar's Properties
                    // Calendar's Related Objects
                    // Calendar's Associated Objects
                    model.Appointments = (entity is AnonCalendar ? ((AnonCalendar)entity).Appointments : entity.Appointments)?.Where(x => x.Active).Select(x => ModelMapperForCalendarAppointment.CreateCalendarAppointmentModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateCalendarModelFromEntityHooksFull != null) { model = CreateCalendarModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Calendar's Properties
                    // Calendar's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Calendar's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCalendarModelFromEntityHooksLite != null) { model = CreateCalendarModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Calendar's Properties
                    model.FridayHoursEnd = entity.FridayHoursEnd;
                    model.FridayHoursStart = entity.FridayHoursStart;
                    model.MondayHoursEnd = entity.MondayHoursEnd;
                    model.MondayHoursStart = entity.MondayHoursStart;
                    model.SaturdayHoursEnd = entity.SaturdayHoursEnd;
                    model.SaturdayHoursStart = entity.SaturdayHoursStart;
                    model.SundayHoursEnd = entity.SundayHoursEnd;
                    model.SundayHoursStart = entity.SundayHoursStart;
                    model.ThursdayHoursEnd = entity.ThursdayHoursEnd;
                    model.ThursdayHoursStart = entity.ThursdayHoursStart;
                    model.TuesdayHoursEnd = entity.TuesdayHoursEnd;
                    model.TuesdayHoursStart = entity.TuesdayHoursStart;
                    model.WednesdayHoursEnd = entity.WednesdayHoursEnd;
                    model.WednesdayHoursStart = entity.WednesdayHoursStart;
                    // Calendar's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Calendar's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCalendarModelFromEntityHooksList != null) { model = CreateCalendarModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
