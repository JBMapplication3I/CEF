// <autogenerated>
// <copyright file="Mapping.Scheduling.Appointment.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Scheduling section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAppointment
    {
        public sealed class AnonAppointment : Appointment
        {
            public new IEnumerable<CalendarAppointment>? Calendars { get; set; }
        }

        public static readonly Func<Appointment?, string?, IAppointmentModel?> MapAppointmentModelFromEntityFull = CreateAppointmentModelFromEntityFull;

        public static readonly Func<Appointment?, string?, IAppointmentModel?> MapAppointmentModelFromEntityLite = CreateAppointmentModelFromEntityLite;

        public static readonly Func<Appointment?, string?, IAppointmentModel?> MapAppointmentModelFromEntityList = CreateAppointmentModelFromEntityList;

        public static Func<IAppointment, IAppointmentModel, string?, IAppointmentModel>? CreateAppointmentModelFromEntityHooksFull { get; set; }

        public static Func<IAppointment, IAppointmentModel, string?, IAppointmentModel>? CreateAppointmentModelFromEntityHooksLite { get; set; }

        public static Func<IAppointment, IAppointmentModel, string?, IAppointmentModel>? CreateAppointmentModelFromEntityHooksList { get; set; }

        public static Expression<Func<Appointment, AnonAppointment>>? PreBuiltAppointmentSQLSelectorFull { get; set; }

        public static Expression<Func<Appointment, AnonAppointment>>? PreBuiltAppointmentSQLSelectorLite { get; set; }

        public static Expression<Func<Appointment, AnonAppointment>>? PreBuiltAppointmentSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAppointmentModel"/> extension method that creates a(n) <see cref="Appointment"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Appointment"/> entity.</returns>
        public static IAppointment CreateAppointmentEntity(
            this IAppointmentModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IAppointmentModel, Appointment>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAppointmentFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAppointmentModel"/> extension method that updates a(n) <see cref="Appointment"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Appointment"/> entity.</returns>
        public static IAppointment UpdateAppointmentFromModel(
            this IAppointment entity,
            IAppointmentModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Appointment Properties
            entity.AppointmentEnd = model.AppointmentEnd;
            entity.AppointmentStart = model.AppointmentStart;
            // Appointment's Related Objects
            // Appointment's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAppointmentSQLSelectorFull()
        {
            PreBuiltAppointmentSQLSelectorFull = x => x == null ? null! : new AnonAppointment
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAppointmentType.PreBuiltAppointmentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAppointmentStatus.PreBuiltAppointmentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                AppointmentStart = x.AppointmentStart,
                AppointmentEnd = x.AppointmentEnd,
                SalesOrderID = x.SalesOrderID,
                SalesOrder = ModelMapperForSalesOrder.PreBuiltSalesOrderSQLSelectorList.Expand().Compile().Invoke(x.SalesOrder!),
                Calendars = x.Calendars!.Where(y => y.Active).Select(ModelMapperForCalendarAppointment.PreBuiltCalendarAppointmentSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAppointmentSQLSelectorLite()
        {
            PreBuiltAppointmentSQLSelectorLite = x => x == null ? null! : new AnonAppointment
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAppointmentType.PreBuiltAppointmentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForAppointmentStatus.PreBuiltAppointmentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                AppointmentStart = x.AppointmentStart,
                AppointmentEnd = x.AppointmentEnd,
                SalesOrderID = x.SalesOrderID,
                SalesOrder = ModelMapperForSalesOrder.PreBuiltSalesOrderSQLSelectorList.Expand().Compile().Invoke(x.SalesOrder!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAppointmentSQLSelectorList()
        {
            PreBuiltAppointmentSQLSelectorList = x => x == null ? null! : new AnonAppointment
            {
                TypeID = x.TypeID,
                Type = ModelMapperForAppointmentType.PreBuiltAppointmentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForAppointmentStatus.PreBuiltAppointmentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                AppointmentStart = x.AppointmentStart,
                AppointmentEnd = x.AppointmentEnd,
                SalesOrderID = x.SalesOrderID,
                SalesOrder = ModelMapperForSalesOrder.PreBuiltSalesOrderSQLSelectorList.Expand().Compile().Invoke(x.SalesOrder!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAppointmentModel> SelectFullAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAppointmentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAppointmentModel> SelectLiteAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAppointmentSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAppointmentModel> SelectListAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAppointmentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityList(x, contextProfileName))!;
        }

        public static IAppointmentModel? SelectFirstFullAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppointmentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAppointmentModel? SelectFirstListAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppointmentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAppointmentModel? SelectSingleFullAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppointmentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAppointmentModel? SelectSingleLiteAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppointmentSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAppointmentModel? SelectSingleListAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAppointmentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAppointmentModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAppointmentModel> results, int totalPages, int totalCount) SelectFullAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAppointmentSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAppointmentModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAppointmentModel> results, int totalPages, int totalCount) SelectLiteAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAppointmentSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAppointmentModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAppointmentModel> results, int totalPages, int totalCount) SelectListAppointmentAndMapToAppointmentModel(
            this IQueryable<Appointment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAppointmentSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAppointmentSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAppointmentModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAppointmentModel? CreateAppointmentModelFromEntityFull(this IAppointment? entity, string? contextProfileName)
        {
            return CreateAppointmentModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAppointmentModel? CreateAppointmentModelFromEntityLite(this IAppointment? entity, string? contextProfileName)
        {
            return CreateAppointmentModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAppointmentModel? CreateAppointmentModelFromEntityList(this IAppointment? entity, string? contextProfileName)
        {
            return CreateAppointmentModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAppointmentModel? CreateAppointmentModelFromEntity(
            this IAppointment? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAppointmentModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Appointment's Properties
                    // Appointment's Related Objects
                    model.SalesOrder = ModelMapperForSalesOrder.CreateSalesOrderModelFromEntityLite(entity.SalesOrder, contextProfileName);
                    // Appointment's Associated Objects
                    model.Calendars = (entity is AnonAppointment ? ((AnonAppointment)entity).Calendars : entity.Calendars)?.Where(x => x.Active).Select(x => ModelMapperForCalendarAppointment.CreateCalendarAppointmentModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateAppointmentModelFromEntityHooksFull != null) { model = CreateAppointmentModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Appointment's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForAppointmentType.CreateAppointmentTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForAppointmentStatus.CreateAppointmentStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Appointment's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Appointment's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAppointmentModelFromEntityHooksLite != null) { model = CreateAppointmentModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Appointment's Properties
                    model.AppointmentEnd = entity.AppointmentEnd;
                    model.AppointmentStart = entity.AppointmentStart;
                    // Appointment's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.SalesOrderID = entity.SalesOrderID;
                    model.SalesOrderKey = entity.SalesOrder?.CustomKey;
                    // Appointment's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAppointmentModelFromEntityHooksList != null) { model = CreateAppointmentModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
