// <autogenerated>
// <copyright file="Mapping.Currencies.CurrencyConversion.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Currencies section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCurrencyConversion
    {
        public sealed class AnonCurrencyConversion : CurrencyConversion
        {
        }

        public static readonly Func<CurrencyConversion?, string?, ICurrencyConversionModel?> MapCurrencyConversionModelFromEntityFull = CreateCurrencyConversionModelFromEntityFull;

        public static readonly Func<CurrencyConversion?, string?, ICurrencyConversionModel?> MapCurrencyConversionModelFromEntityLite = CreateCurrencyConversionModelFromEntityLite;

        public static readonly Func<CurrencyConversion?, string?, ICurrencyConversionModel?> MapCurrencyConversionModelFromEntityList = CreateCurrencyConversionModelFromEntityList;

        public static Func<ICurrencyConversion, ICurrencyConversionModel, string?, ICurrencyConversionModel>? CreateCurrencyConversionModelFromEntityHooksFull { get; set; }

        public static Func<ICurrencyConversion, ICurrencyConversionModel, string?, ICurrencyConversionModel>? CreateCurrencyConversionModelFromEntityHooksLite { get; set; }

        public static Func<ICurrencyConversion, ICurrencyConversionModel, string?, ICurrencyConversionModel>? CreateCurrencyConversionModelFromEntityHooksList { get; set; }

        public static Expression<Func<CurrencyConversion, AnonCurrencyConversion>>? PreBuiltCurrencyConversionSQLSelectorFull { get; set; }

        public static Expression<Func<CurrencyConversion, AnonCurrencyConversion>>? PreBuiltCurrencyConversionSQLSelectorLite { get; set; }

        public static Expression<Func<CurrencyConversion, AnonCurrencyConversion>>? PreBuiltCurrencyConversionSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICurrencyConversionModel"/> extension method that creates a(n) <see cref="CurrencyConversion"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="CurrencyConversion"/> entity.</returns>
        public static ICurrencyConversion CreateCurrencyConversionEntity(
            this ICurrencyConversionModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<ICurrencyConversionModel, CurrencyConversion>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCurrencyConversionFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICurrencyConversionModel"/> extension method that updates a(n) <see cref="CurrencyConversion"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="CurrencyConversion"/> entity.</returns>
        public static ICurrencyConversion UpdateCurrencyConversionFromModel(
            this ICurrencyConversion entity,
            ICurrencyConversionModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // CurrencyConversion Properties
            entity.EndDate = model.EndDate;
            entity.Rate = model.Rate;
            entity.StartDate = model.StartDate;
            // CurrencyConversion's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCurrencyConversionSQLSelectorFull()
        {
            PreBuiltCurrencyConversionSQLSelectorFull = x => x == null ? null! : new AnonCurrencyConversion
            {
                Rate = x.Rate,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                StartingCurrencyID = x.StartingCurrencyID,
                StartingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.StartingCurrency!),
                EndingCurrencyID = x.EndingCurrencyID,
                EndingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.EndingCurrency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCurrencyConversionSQLSelectorLite()
        {
            PreBuiltCurrencyConversionSQLSelectorLite = x => x == null ? null! : new AnonCurrencyConversion
            {
                Rate = x.Rate,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                StartingCurrencyID = x.StartingCurrencyID,
                StartingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.StartingCurrency!),
                EndingCurrencyID = x.EndingCurrencyID,
                EndingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.EndingCurrency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCurrencyConversionSQLSelectorList()
        {
            PreBuiltCurrencyConversionSQLSelectorList = x => x == null ? null! : new AnonCurrencyConversion
            {
                Rate = x.Rate,
                StartDate = x.StartDate,
                EndDate = x.EndDate,
                StartingCurrencyID = x.StartingCurrencyID,
                StartingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.StartingCurrency!), // For Flattening Properties (List)
                EndingCurrencyID = x.EndingCurrencyID,
                EndingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.EndingCurrency!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICurrencyConversionModel> SelectFullCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCurrencyConversionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICurrencyConversionModel> SelectLiteCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCurrencyConversionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICurrencyConversionModel> SelectListCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCurrencyConversionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityList(x, contextProfileName))!;
        }

        public static ICurrencyConversionModel? SelectFirstFullCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCurrencyConversionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICurrencyConversionModel? SelectFirstListCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCurrencyConversionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICurrencyConversionModel? SelectSingleFullCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCurrencyConversionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICurrencyConversionModel? SelectSingleLiteCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCurrencyConversionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICurrencyConversionModel? SelectSingleListCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCurrencyConversionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCurrencyConversionModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICurrencyConversionModel> results, int totalPages, int totalCount) SelectFullCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCurrencyConversionSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCurrencyConversionModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICurrencyConversionModel> results, int totalPages, int totalCount) SelectLiteCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCurrencyConversionSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCurrencyConversionModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICurrencyConversionModel> results, int totalPages, int totalCount) SelectListCurrencyConversionAndMapToCurrencyConversionModel(
            this IQueryable<CurrencyConversion> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCurrencyConversionSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCurrencyConversionSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCurrencyConversionModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICurrencyConversionModel? CreateCurrencyConversionModelFromEntityFull(this ICurrencyConversion? entity, string? contextProfileName)
        {
            return CreateCurrencyConversionModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICurrencyConversionModel? CreateCurrencyConversionModelFromEntityLite(this ICurrencyConversion? entity, string? contextProfileName)
        {
            return CreateCurrencyConversionModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICurrencyConversionModel? CreateCurrencyConversionModelFromEntityList(this ICurrencyConversion? entity, string? contextProfileName)
        {
            return CreateCurrencyConversionModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICurrencyConversionModel? CreateCurrencyConversionModelFromEntity(
            this ICurrencyConversion? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICurrencyConversionModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CurrencyConversion's Properties
                    // CurrencyConversion's Related Objects
                    model.EndingCurrency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.EndingCurrency, contextProfileName);
                    model.StartingCurrency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.StartingCurrency, contextProfileName);
                    // CurrencyConversion's Associated Objects
                    // Additional Mappings
                    if (CreateCurrencyConversionModelFromEntityHooksFull != null) { model = CreateCurrencyConversionModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // CurrencyConversion's Properties
                    // CurrencyConversion's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // CurrencyConversion's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCurrencyConversionModelFromEntityHooksLite != null) { model = CreateCurrencyConversionModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // CurrencyConversion's Properties
                    model.EndDate = entity.EndDate;
                    model.Rate = entity.Rate;
                    model.StartDate = entity.StartDate;
                    // CurrencyConversion's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.EndingCurrencyID = entity.EndingCurrencyID;
                    model.EndingCurrencyKey = entity.EndingCurrency?.CustomKey;
                    model.EndingCurrencyName = entity.EndingCurrency?.Name;
                    model.StartingCurrencyID = entity.StartingCurrencyID;
                    model.StartingCurrencyKey = entity.StartingCurrency?.CustomKey;
                    model.StartingCurrencyName = entity.StartingCurrency?.Name;
                    // CurrencyConversion's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCurrencyConversionModelFromEntityHooksList != null) { model = CreateCurrencyConversionModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
