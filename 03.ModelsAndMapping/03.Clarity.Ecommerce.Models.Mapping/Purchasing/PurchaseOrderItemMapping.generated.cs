// <autogenerated>
// <copyright file="Mapping.Purchasing.PurchaseOrderItem.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Purchasing section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPurchaseOrderItem
    {
        public sealed class AnonPurchaseOrderItem : PurchaseOrderItem
        {
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<PurchaseOrderItemTarget>? Targets { get; set; }
            public Contact? UserContact { get; set; }
            // public new PurchaseOrder? Master { get; set; }
        }

        public static readonly Func<PurchaseOrderItem?, string?, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>?> MapPurchaseOrderItemModelFromEntityFull = CreatePurchaseOrderItemModelFromEntityFull;

        public static readonly Func<PurchaseOrderItem?, string?, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>?> MapPurchaseOrderItemModelFromEntityLite = CreatePurchaseOrderItemModelFromEntityLite;

        public static readonly Func<PurchaseOrderItem?, string?, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>?> MapPurchaseOrderItemModelFromEntityList = CreatePurchaseOrderItemModelFromEntityList;

        public static Func<IPurchaseOrderItem, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>, string?, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>>? CreatePurchaseOrderItemModelFromEntityHooksFull { get; set; }

        public static Func<IPurchaseOrderItem, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>, string?, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>>? CreatePurchaseOrderItemModelFromEntityHooksLite { get; set; }

        public static Func<IPurchaseOrderItem, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>, string?, ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>>? CreatePurchaseOrderItemModelFromEntityHooksList { get; set; }

        public static Expression<Func<PurchaseOrderItem, AnonPurchaseOrderItem>>? PreBuiltPurchaseOrderItemSQLSelectorFull { get; set; }

        public static Expression<Func<PurchaseOrderItem, AnonPurchaseOrderItem>>? PreBuiltPurchaseOrderItemSQLSelectorLite { get; set; }

        public static Expression<Func<PurchaseOrderItem, AnonPurchaseOrderItem>>? PreBuiltPurchaseOrderItemSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISalesItemBaseModel"/> extension method that creates a(n) <see cref="PurchaseOrderItem"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="PurchaseOrderItem"/> entity.</returns>
        public static IPurchaseOrderItem CreatePurchaseOrderItemEntity(
            this ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel> model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ISalesItemBaseModel, PurchaseOrderItem>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePurchaseOrderItemFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISalesItemBaseModel"/> extension method that updates a(n) <see cref="PurchaseOrderItem"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="PurchaseOrderItem"/> entity.</returns>
        public static IPurchaseOrderItem UpdatePurchaseOrderItemFromModel(
            this IPurchaseOrderItem entity,
            ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel> model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ISalesItemBase Properties
            entity.Quantity = model.Quantity;
            entity.QuantityBackOrdered = model.QuantityBackOrdered ?? 0m;
            entity.QuantityPreSold = model.QuantityPreSold ?? 0m;
            entity.UnitCorePrice = model.UnitCorePrice;
            entity.UnitSoldPrice = model.UnitSoldPrice;
            entity.UnitCorePriceInSellingCurrency = model.UnitCorePriceInSellingCurrency;
            entity.UnitSoldPriceInSellingCurrency = model.UnitSoldPriceInSellingCurrency;
            entity.Sku = model.Sku;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            entity.ForceUniqueLineItemKey = model.ForceUniqueLineItemKey;
            // PurchaseOrderItem Properties
            entity.DateReceived = model.DateReceived;
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPurchaseOrderItemSQLSelectorFull()
        {
            PreBuiltPurchaseOrderItemSQLSelectorFull = x => x == null ? null! : new AnonPurchaseOrderItem
            {
                DateReceived = x.DateReceived,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Sku = x.Sku,
                UnitOfMeasure = x.UnitOfMeasure,
                ForceUniqueLineItemKey = x.ForceUniqueLineItemKey,
                Quantity = x.Quantity,
                QuantityBackOrdered = x.QuantityBackOrdered,
                QuantityPreSold = x.QuantityPreSold,
                UnitCorePrice = x.UnitCorePrice,
                UnitSoldPrice = x.UnitSoldPrice,
                UnitCorePriceInSellingCurrency = x.UnitCorePriceInSellingCurrency,
                UnitSoldPriceInSellingCurrency = x.UnitSoldPriceInSellingCurrency,
                Status = x.Status,
                MasterID = x.MasterID,
                OriginalCurrencyID = x.OriginalCurrencyID,
                OriginalCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.OriginalCurrency!),
                SellingCurrencyID = x.SellingCurrencyID,
                SellingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.SellingCurrency!),
                Targets = x.Targets!.Where(y => y.Active).Select(ModelMapperForPurchaseOrderItemTarget.PreBuiltPurchaseOrderItemTargetSQLSelectorList.Expand().Compile()).ToList(),
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPurchaseOrderItemSQLSelectorLite()
        {
            PreBuiltPurchaseOrderItemSQLSelectorLite = x => x == null ? null! : new AnonPurchaseOrderItem
            {
                DateReceived = x.DateReceived,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Sku = x.Sku,
                UnitOfMeasure = x.UnitOfMeasure,
                ForceUniqueLineItemKey = x.ForceUniqueLineItemKey,
                Quantity = x.Quantity,
                QuantityBackOrdered = x.QuantityBackOrdered,
                QuantityPreSold = x.QuantityPreSold,
                UnitCorePrice = x.UnitCorePrice,
                UnitSoldPrice = x.UnitSoldPrice,
                UnitCorePriceInSellingCurrency = x.UnitCorePriceInSellingCurrency,
                UnitSoldPriceInSellingCurrency = x.UnitSoldPriceInSellingCurrency,
                Status = x.Status,
                MasterID = x.MasterID,
                OriginalCurrencyID = x.OriginalCurrencyID,
                OriginalCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.OriginalCurrency!),
                SellingCurrencyID = x.SellingCurrencyID,
                SellingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.SellingCurrency!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPurchaseOrderItemSQLSelectorList()
        {
            PreBuiltPurchaseOrderItemSQLSelectorList = x => x == null ? null! : new AnonPurchaseOrderItem
            {
                DateReceived = x.DateReceived,
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                Sku = x.Sku,
                UnitOfMeasure = x.UnitOfMeasure,
                ForceUniqueLineItemKey = x.ForceUniqueLineItemKey,
                Quantity = x.Quantity,
                QuantityBackOrdered = x.QuantityBackOrdered,
                QuantityPreSold = x.QuantityPreSold,
                UnitCorePrice = x.UnitCorePrice,
                UnitSoldPrice = x.UnitSoldPrice,
                UnitCorePriceInSellingCurrency = x.UnitCorePriceInSellingCurrency,
                UnitSoldPriceInSellingCurrency = x.UnitSoldPriceInSellingCurrency,
                Status = x.Status,
                MasterID = x.MasterID,
                OriginalCurrencyID = x.OriginalCurrencyID,
                OriginalCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.OriginalCurrency!), // For Flattening Properties (List)
                SellingCurrencyID = x.SellingCurrencyID,
                SellingCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.SellingCurrency!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>> SelectFullPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPurchaseOrderItemSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>> SelectLitePurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPurchaseOrderItemSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>> SelectListPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPurchaseOrderItemSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityList(x, contextProfileName))!;
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? SelectFirstFullPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderItemSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? SelectFirstListPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderItemSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? SelectSingleFullPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderItemSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? SelectSingleLitePurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderItemSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? SelectSingleListPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderItemSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderItemModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>> results, int totalPages, int totalCount) SelectFullPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPurchaseOrderItemSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePurchaseOrderItemModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>> results, int totalPages, int totalCount) SelectLitePurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPurchaseOrderItemSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePurchaseOrderItemModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>> results, int totalPages, int totalCount) SelectListPurchaseOrderItemAndMapToSalesItemBaseModel(
            this IQueryable<PurchaseOrderItem> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderItemSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPurchaseOrderItemSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePurchaseOrderItemModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? CreatePurchaseOrderItemModelFromEntityFull(this IPurchaseOrderItem? entity, string? contextProfileName)
        {
            return CreatePurchaseOrderItemModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? CreatePurchaseOrderItemModelFromEntityLite(this IPurchaseOrderItem? entity, string? contextProfileName)
        {
            return CreatePurchaseOrderItemModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? CreatePurchaseOrderItemModelFromEntityList(this IPurchaseOrderItem? entity, string? contextProfileName)
        {
            return CreatePurchaseOrderItemModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>? CreatePurchaseOrderItemModelFromEntity(
            this IPurchaseOrderItem? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapSalesItemBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ISalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel>>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ISalesItemBase<,,,,> Properties
                    model.Discounts = (entity is AnonPurchaseOrderItem ? ((AnonPurchaseOrderItem)entity).Discounts : entity.Discounts)?.Where(x => x.Active).Select(x => ModelMapperForAppliedPurchaseOrderItemDiscount.CreateAppliedPurchaseOrderItemDiscountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Targets = (entity is AnonPurchaseOrderItem ? ((AnonPurchaseOrderItem)entity).Targets : entity.Targets)?.Where(x => x.Active).Select(x => ModelMapperForPurchaseOrderItemTarget.CreatePurchaseOrderItemTargetModelFromEntityList(x, contextProfileName)).ToList()!;
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonPurchaseOrderItem ? ((AnonPurchaseOrderItem)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // PurchaseOrderItem's Properties
                    // PurchaseOrderItem's Related Objects
                    // PurchaseOrderItem's Associated Objects
                    // Additional Mappings
                    if (CreatePurchaseOrderItemModelFromEntityHooksFull != null) { model = CreatePurchaseOrderItemModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PurchaseOrderItem's Properties
                    // PurchaseOrderItem's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PurchaseOrderItem's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePurchaseOrderItemModelFromEntityHooksLite != null) { model = CreatePurchaseOrderItemModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // PurchaseOrderItem's Properties
                    model.DateReceived = entity.DateReceived;
                    // PurchaseOrderItem's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PurchaseOrderItem's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePurchaseOrderItemModelFromEntityHooksList != null) { model = CreatePurchaseOrderItemModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
