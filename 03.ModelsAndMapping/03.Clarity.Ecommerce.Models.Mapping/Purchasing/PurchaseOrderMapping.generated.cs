// <autogenerated>
// <copyright file="Mapping.Purchasing.PurchaseOrder.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Purchasing section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPurchaseOrder
    {
        public sealed class AnonPurchaseOrder : PurchaseOrder
        {
            public new IEnumerable<AppliedPurchaseOrderDiscount>? Discounts { get; set; }
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<PurchaseOrderContact>? Contacts { get; set; }
            public new IEnumerable<PurchaseOrderFile>? StoredFiles { get; set; }
            public new IEnumerable<PurchaseOrderItem>? SalesItems { get; set; }
            public new IEnumerable<RateQuote>? RateQuotes { get; set; }
            public new IEnumerable<SalesOrderPurchaseOrder>? AssociatedSalesOrders { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<PurchaseOrder?, string?, IPurchaseOrderModel?> MapPurchaseOrderModelFromEntityFull = CreatePurchaseOrderModelFromEntityFull;

        public static readonly Func<PurchaseOrder?, string?, IPurchaseOrderModel?> MapPurchaseOrderModelFromEntityLite = CreatePurchaseOrderModelFromEntityLite;

        public static readonly Func<PurchaseOrder?, string?, IPurchaseOrderModel?> MapPurchaseOrderModelFromEntityList = CreatePurchaseOrderModelFromEntityList;

        public static Func<IPurchaseOrder, IPurchaseOrderModel, string?, IPurchaseOrderModel>? CreatePurchaseOrderModelFromEntityHooksFull { get; set; }

        public static Func<IPurchaseOrder, IPurchaseOrderModel, string?, IPurchaseOrderModel>? CreatePurchaseOrderModelFromEntityHooksLite { get; set; }

        public static Func<IPurchaseOrder, IPurchaseOrderModel, string?, IPurchaseOrderModel>? CreatePurchaseOrderModelFromEntityHooksList { get; set; }

        public static Expression<Func<PurchaseOrder, AnonPurchaseOrder>>? PreBuiltPurchaseOrderSQLSelectorFull { get; set; }

        public static Expression<Func<PurchaseOrder, AnonPurchaseOrder>>? PreBuiltPurchaseOrderSQLSelectorLite { get; set; }

        public static Expression<Func<PurchaseOrder, AnonPurchaseOrder>>? PreBuiltPurchaseOrderSQLSelectorList { get; set; }

        /// <summary>An <see cref="IPurchaseOrderModel"/> extension method that creates a(n) <see cref="PurchaseOrder"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="PurchaseOrder"/> entity.</returns>
        public static IPurchaseOrder CreatePurchaseOrderEntity(
            this IPurchaseOrderModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IPurchaseOrderModel, PurchaseOrder>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePurchaseOrderFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IPurchaseOrderModel"/> extension method that updates a(n) <see cref="PurchaseOrder"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="PurchaseOrder"/> entity.</returns>
        public static IPurchaseOrder UpdatePurchaseOrderFromModel(
            this IPurchaseOrder entity,
            IPurchaseOrderModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapSalesCollectionBaseModelPropertiesToEntity<IPurchaseOrderModel,
                    IPurchaseOrder,
                    PurchaseOrder,
                    PurchaseOrderStatus,
                    PurchaseOrderType,
                    PurchaseOrderItem,
                    AppliedPurchaseOrderDiscount,
                    PurchaseOrderState,
                    PurchaseOrderFile,
                    PurchaseOrderContact,
                    PurchaseOrderEvent,
                    PurchaseOrderEventType>(Contract.RequiresNotNull(model));
            // PurchaseOrder Properties
            entity.ActualReceiptDate = model.ActualReceiptDate;
            entity.EstimatedReceiptDate = model.EstimatedReceiptDate;
            entity.ReleaseDate = model.ReleaseDate;
            entity.TrackingNumber = model.TrackingNumber;
            // PurchaseOrder's Related Objects
            // PurchaseOrder's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPurchaseOrderSQLSelectorFull()
        {
            PreBuiltPurchaseOrderSQLSelectorFull = x => x == null ? null! : new AnonPurchaseOrder
            {
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                TrackingNumber = x.TrackingNumber,
                ReleaseDate = x.ReleaseDate,
                EstimatedReceiptDate = x.EstimatedReceiptDate,
                ActualReceiptDate = x.ActualReceiptDate,
                InventoryLocationID = x.InventoryLocationID,
                InventoryLocation = ModelMapperForInventoryLocation.PreBuiltInventoryLocationSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocation!),
                ShipCarrierID = x.ShipCarrierID,
                ShipCarrier = ModelMapperForShipCarrier.PreBuiltShipCarrierSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrier!),
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!),
                SalesGroupID = x.SalesGroupID,
                SalesGroup = ModelMapperForSalesGroup.PreBuiltSalesGroupSQLSelectorList.Expand().Compile().Invoke(x.SalesGroup!),
                AssociatedSalesOrders = x.AssociatedSalesOrders!.Where(y => y.Active).Select(ModelMapperForSalesOrderPurchaseOrder.PreBuiltSalesOrderPurchaseOrderSQLSelectorList.Expand().Compile()).ToList(),
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StatusID = x.StatusID,
                Status = ModelMapperForPurchaseOrderStatus.PreBuiltPurchaseOrderStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StateID = x.StateID,
                State = ModelMapperForPurchaseOrderState.PreBuiltPurchaseOrderStateSQLSelectorList.Expand().Compile().Invoke(x.State!),
                TypeID = x.TypeID,
                Type = ModelMapperForPurchaseOrderType.PreBuiltPurchaseOrderTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!),
                SalesItems = x.SalesItems!.Where(y => y.Active).Select(ModelMapperForPurchaseOrderItem.PreBuiltPurchaseOrderItemSQLSelectorList.Expand().Compile()).ToList(),
                Discounts = x.Discounts!.Where(y => y.Active).Select(ModelMapperForAppliedPurchaseOrderDiscount.PreBuiltAppliedPurchaseOrderDiscountSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForPurchaseOrderFile.PreBuiltPurchaseOrderFileSQLSelectorList.Expand().Compile()).ToList(),
                Contacts = x.Contacts!.Where(y => y.Active).Select(ModelMapperForPurchaseOrderContact.PreBuiltPurchaseOrderContactSQLSelectorList.Expand().Compile()).ToList(),
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPurchaseOrderSQLSelectorLite()
        {
            PreBuiltPurchaseOrderSQLSelectorLite = x => x == null ? null! : new AnonPurchaseOrder
            {
                TrackingNumber = x.TrackingNumber,
                ReleaseDate = x.ReleaseDate,
                EstimatedReceiptDate = x.EstimatedReceiptDate,
                ActualReceiptDate = x.ActualReceiptDate,
                InventoryLocationID = x.InventoryLocationID,
                InventoryLocation = ModelMapperForInventoryLocation.PreBuiltInventoryLocationSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocation!),
                ShipCarrierID = x.ShipCarrierID,
                ShipCarrier = ModelMapperForShipCarrier.PreBuiltShipCarrierSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrier!),
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!),
                SalesGroupID = x.SalesGroupID,
                SalesGroup = ModelMapperForSalesGroup.PreBuiltSalesGroupSQLSelectorList.Expand().Compile().Invoke(x.SalesGroup!),
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                StatusID = x.StatusID,
                Status = ModelMapperForPurchaseOrderStatus.PreBuiltPurchaseOrderStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StateID = x.StateID,
                State = ModelMapperForPurchaseOrderState.PreBuiltPurchaseOrderStateSQLSelectorList.Expand().Compile().Invoke(x.State!),
                TypeID = x.TypeID,
                Type = ModelMapperForPurchaseOrderType.PreBuiltPurchaseOrderTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!),
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPurchaseOrderSQLSelectorList()
        {
            PreBuiltPurchaseOrderSQLSelectorList = x => x == null ? null! : new AnonPurchaseOrder
            {
                TrackingNumber = x.TrackingNumber,
                ReleaseDate = x.ReleaseDate,
                EstimatedReceiptDate = x.EstimatedReceiptDate,
                ActualReceiptDate = x.ActualReceiptDate,
                InventoryLocationID = x.InventoryLocationID,
                InventoryLocation = ModelMapperForInventoryLocation.PreBuiltInventoryLocationSQLSelectorList.Expand().Compile().Invoke(x.InventoryLocation!), // For Flattening Properties (List)
                ShipCarrierID = x.ShipCarrierID,
                ShipCarrier = ModelMapperForShipCarrier.PreBuiltShipCarrierSQLSelectorList.Expand().Compile().Invoke(x.ShipCarrier!), // For Flattening Properties (List)
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!), // For Flattening Properties (List)
                SalesGroupID = x.SalesGroupID,
                SalesGroup = ModelMapperForSalesGroup.PreBuiltSalesGroupSQLSelectorList.Expand().Compile().Invoke(x.SalesGroup!), // For Flattening Properties (List)
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForPurchaseOrderStatus.PreBuiltPurchaseOrderStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                StateID = x.StateID,
                State = ModelMapperForPurchaseOrderState.PreBuiltPurchaseOrderStateSQLSelectorList.Expand().Compile().Invoke(x.State!), // For Flattening Properties (List)
                TypeID = x.TypeID,
                Type = ModelMapperForPurchaseOrderType.PreBuiltPurchaseOrderTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                DueDate = x.DueDate,
                SubtotalItems = x.SubtotalItems,
                SubtotalShipping = x.SubtotalShipping,
                SubtotalTaxes = x.SubtotalTaxes,
                SubtotalFees = x.SubtotalFees,
                SubtotalHandling = x.SubtotalHandling,
                SubtotalDiscounts = x.SubtotalDiscounts,
                Total = x.Total,
                ShippingSameAsBilling = x.ShippingSameAsBilling,
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!), // For Flattening Properties (List)
                ShippingContactID = x.ShippingContactID,
                ShippingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.ShippingContact!), // For Flattening Properties (List)
                RateQuotes = x.RateQuotes!.Where(y => y.Active).Select(ModelMapperForRateQuote.PreBuiltRateQuoteSQLSelectorList.Expand().Compile()),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
                UserContact = x.User == null ? null : ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.User.Contact!), // For Flattening Properties
            };
        }

        public static IEnumerable<IPurchaseOrderModel> SelectFullPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPurchaseOrderSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IPurchaseOrderModel> SelectLitePurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPurchaseOrderSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IPurchaseOrderModel> SelectListPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPurchaseOrderSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityList(x, contextProfileName))!;
        }

        public static IPurchaseOrderModel? SelectFirstFullPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPurchaseOrderModel? SelectFirstListPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPurchaseOrderModel? SelectSingleFullPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPurchaseOrderModel? SelectSingleLitePurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPurchaseOrderModel? SelectSingleListPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPurchaseOrderSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePurchaseOrderModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IPurchaseOrderModel> results, int totalPages, int totalCount) SelectFullPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPurchaseOrderSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePurchaseOrderModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPurchaseOrderModel> results, int totalPages, int totalCount) SelectLitePurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPurchaseOrderSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePurchaseOrderModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPurchaseOrderModel> results, int totalPages, int totalCount) SelectListPurchaseOrderAndMapToPurchaseOrderModel(
            this IQueryable<PurchaseOrder> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPurchaseOrderSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPurchaseOrderSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePurchaseOrderModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IPurchaseOrderModel? CreatePurchaseOrderModelFromEntityFull(this IPurchaseOrder? entity, string? contextProfileName)
        {
            return CreatePurchaseOrderModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IPurchaseOrderModel? CreatePurchaseOrderModelFromEntityLite(this IPurchaseOrder? entity, string? contextProfileName)
        {
            return CreatePurchaseOrderModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IPurchaseOrderModel? CreatePurchaseOrderModelFromEntityList(this IPurchaseOrder? entity, string? contextProfileName)
        {
            return CreatePurchaseOrderModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IPurchaseOrderModel? CreatePurchaseOrderModelFromEntity(
            this IPurchaseOrder? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapSalesCollectionBaseEntityPropertiesToModel<IPurchaseOrderModel,
                    IPurchaseOrder,
                    PurchaseOrder,
                    PurchaseOrderStatus,
                    PurchaseOrderType,
                    ITypeModel,
                    PurchaseOrderItem,
                    AppliedPurchaseOrderDiscount,
                    IAppliedPurchaseOrderDiscountModel,
                    IAppliedPurchaseOrderItemDiscountModel,
                    PurchaseOrderState,
                    PurchaseOrderFile,
                    IPurchaseOrderFileModel,
                    PurchaseOrderContact,
                    IPurchaseOrderContactModel,
                    AppliedPurchaseOrderItemDiscount,
                    PurchaseOrderItemTarget,
                    PurchaseOrderEvent,
                    IPurchaseOrderEventModel,
                    PurchaseOrderEventType>(
                RegistryLoaderWrapper.GetInstance<IPurchaseOrderModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ISalesCollectionBase Properties
                    model.SalesItems = (entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).SalesItems : entity.SalesItems)?.Where(x => x.Active).Select(x => ModelMapperForPurchaseOrderItem.CreatePurchaseOrderItemModelFromEntityLite(x, contextProfileName)).ToList()!;
                    model.Discounts = (entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).Discounts : entity.Discounts)?.Where(x => x.Active).Select(x => ModelMapperForAppliedPurchaseOrderDiscount.CreateAppliedPurchaseOrderDiscountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Contacts = (entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).Contacts : entity.Contacts)?.Where(x => x.Active).Select(x => ModelMapperForPurchaseOrderContact.CreatePurchaseOrderContactModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForPurchaseOrderFile.CreatePurchaseOrderFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // PurchaseOrder's Properties
                    // PurchaseOrder's Related Objects
                    model.Account = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Account, contextProfileName);
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Franchise = ModelMapperForFranchise.CreateFranchiseModelFromEntityLite(entity.Franchise, contextProfileName);
                    model.InventoryLocation = ModelMapperForInventoryLocation.CreateInventoryLocationModelFromEntityLite(entity.InventoryLocation, contextProfileName);
                    model.SalesGroup = ModelMapperForSalesGroup.CreateSalesGroupModelFromEntityLite(entity.SalesGroup, contextProfileName);
                    model.ShipCarrier = ModelMapperForShipCarrier.CreateShipCarrierModelFromEntityLite(entity.ShipCarrier, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    model.Vendor = ModelMapperForVendor.CreateVendorModelFromEntityLite(entity.Vendor, contextProfileName);
                    // PurchaseOrder's Associated Objects
                    model.AssociatedSalesOrders = (entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).AssociatedSalesOrders : entity.AssociatedSalesOrders)?.Where(x => x.Active).Select(x => ModelMapperForSalesOrderPurchaseOrder.CreateSalesOrderPurchaseOrderModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreatePurchaseOrderModelFromEntityHooksFull != null) { model = CreatePurchaseOrderModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PurchaseOrder's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForPurchaseOrderType.CreatePurchaseOrderTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForPurchaseOrderStatus.CreatePurchaseOrderStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // IHaveAStateBase Properties (Forced)
                    model.State = ModelMapperForPurchaseOrderState.CreatePurchaseOrderStateModelFromEntityLite(entity.State, contextProfileName);
                    // PurchaseOrder's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PurchaseOrder's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePurchaseOrderModelFromEntityHooksLite != null) { model = CreatePurchaseOrderModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveAStateBase Properties
                    model.StateID = entity.StateID;
                    if (entity.State != null)
                    {
                        model.StateKey = entity.State.CustomKey;
                        model.StateName = entity.State.Name;
                        model.StateDisplayName = entity.State.DisplayName;
                        model.StateTranslationKey = entity.State.TranslationKey;
                        model.StateSortOrder = entity.State.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // PurchaseOrder's Properties
                    model.ActualReceiptDate = entity.ActualReceiptDate;
                    model.EstimatedReceiptDate = entity.EstimatedReceiptDate;
                    model.ReleaseDate = entity.ReleaseDate;
                    model.TrackingNumber = entity.TrackingNumber;
                    // PurchaseOrder's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountID = entity.AccountID;
                    model.AccountKey = entity.Account?.CustomKey;
                    model.AccountName = entity.Account?.Name;
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.FranchiseID = entity.FranchiseID;
                    model.FranchiseKey = entity.Franchise?.CustomKey;
                    model.FranchiseName = entity.Franchise?.Name;
                    model.InventoryLocationID = entity.InventoryLocationID;
                    model.InventoryLocationKey = entity.InventoryLocation?.CustomKey;
                    model.InventoryLocationName = entity.InventoryLocation?.Name;
                    model.SalesGroupID = entity.SalesGroupID;
                    model.SalesGroupKey = entity.SalesGroup?.CustomKey;
                    model.ShipCarrierID = entity.ShipCarrierID;
                    model.ShipCarrierKey = entity.ShipCarrier?.CustomKey;
                    model.ShipCarrierName = entity.ShipCarrier?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    model.UserUserName = entity.User?.UserName;
                    model.UserContactEmail = entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).UserContact?.Email1 : entity.User?.Contact?.Email1;
                    model.UserContactFirstName = entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).UserContact?.FirstName : entity.User?.Contact?.FirstName;
                    model.UserContactLastName = entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).UserContact?.LastName : entity.User?.Contact?.LastName;
                    model.VendorID = entity.VendorID;
                    model.VendorKey = entity.Vendor?.CustomKey;
                    model.VendorName = entity.Vendor?.Name;
                    // PurchaseOrder's Associated Objects (Not Mapped unless Forced)
                    model.RateQuotes = (entity is AnonPurchaseOrder ? ((AnonPurchaseOrder)entity).RateQuotes : entity.RateQuotes)?.Where(x => x.Active).Select(x => ModelMapperForRateQuote.CreateRateQuoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreatePurchaseOrderModelFromEntityHooksList != null) { model = CreatePurchaseOrderModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
