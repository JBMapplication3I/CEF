// <autogenerated>
// <copyright file="Mapping.Products.ProductPricePoint.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForProductPricePoint
    {
        public sealed class AnonProductPricePoint : ProductPricePoint
        {
            // public new Product? Master { get; set; }
        }

        public static readonly Func<ProductPricePoint?, string?, IProductPricePointModel?> MapProductPricePointModelFromEntityFull = CreateProductPricePointModelFromEntityFull;

        public static readonly Func<ProductPricePoint?, string?, IProductPricePointModel?> MapProductPricePointModelFromEntityLite = CreateProductPricePointModelFromEntityLite;

        public static readonly Func<ProductPricePoint?, string?, IProductPricePointModel?> MapProductPricePointModelFromEntityList = CreateProductPricePointModelFromEntityList;

        public static Func<IProductPricePoint, IProductPricePointModel, string?, IProductPricePointModel>? CreateProductPricePointModelFromEntityHooksFull { get; set; }

        public static Func<IProductPricePoint, IProductPricePointModel, string?, IProductPricePointModel>? CreateProductPricePointModelFromEntityHooksLite { get; set; }

        public static Func<IProductPricePoint, IProductPricePointModel, string?, IProductPricePointModel>? CreateProductPricePointModelFromEntityHooksList { get; set; }

        public static Expression<Func<ProductPricePoint, AnonProductPricePoint>>? PreBuiltProductPricePointSQLSelectorFull { get; set; }

        public static Expression<Func<ProductPricePoint, AnonProductPricePoint>>? PreBuiltProductPricePointSQLSelectorLite { get; set; }

        public static Expression<Func<ProductPricePoint, AnonProductPricePoint>>? PreBuiltProductPricePointSQLSelectorList { get; set; }

        /// <summary>An <see cref="IProductPricePointModel"/> extension method that creates a(n) <see cref="ProductPricePoint"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ProductPricePoint"/> entity.</returns>
        public static IProductPricePoint CreateProductPricePointEntity(
            this IProductPricePointModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IProductPricePointModel, ProductPricePoint>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateProductPricePointFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IProductPricePointModel"/> extension method that updates a(n) <see cref="ProductPricePoint"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ProductPricePoint"/> entity.</returns>
        public static IProductPricePoint UpdateProductPricePointFromModel(
            this IProductPricePoint entity,
            IProductPricePointModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ProductPricePoint Properties
            entity.From = model.From;
            entity.MaxQuantity = model.MaxQuantity;
            entity.MinQuantity = model.MinQuantity;
            entity.PercentDiscount = model.PercentDiscount;
            entity.Price = model.Price;
            entity.To = model.To;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            // ProductPricePoint's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenProductPricePointSQLSelectorFull()
        {
            PreBuiltProductPricePointSQLSelectorFull = x => x == null ? null! : new AnonProductPricePoint
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForPricePoint.PreBuiltPricePointSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Price = x.Price,
                PercentDiscount = x.PercentDiscount,
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                UnitOfMeasure = x.UnitOfMeasure,
                From = x.From,
                To = x.To,
                PriceRoundingID = x.PriceRoundingID,
                PriceRounding = ModelMapperForPriceRounding.PreBuiltPriceRoundingSQLSelectorList.Expand().Compile().Invoke(x.PriceRounding!),
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductPricePointSQLSelectorLite()
        {
            PreBuiltProductPricePointSQLSelectorLite = x => x == null ? null! : new AnonProductPricePoint
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForPricePoint.PreBuiltPricePointSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Price = x.Price,
                PercentDiscount = x.PercentDiscount,
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                UnitOfMeasure = x.UnitOfMeasure,
                From = x.From,
                To = x.To,
                PriceRoundingID = x.PriceRoundingID,
                PriceRounding = ModelMapperForPriceRounding.PreBuiltPriceRoundingSQLSelectorList.Expand().Compile().Invoke(x.PriceRounding!),
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductPricePointSQLSelectorList()
        {
            PreBuiltProductPricePointSQLSelectorList = x => x == null ? null! : new AnonProductPricePoint
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForPricePoint.PreBuiltPricePointSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                FranchiseID = x.FranchiseID,
                Franchise = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Franchise!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                Price = x.Price,
                PercentDiscount = x.PercentDiscount,
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                UnitOfMeasure = x.UnitOfMeasure,
                From = x.From,
                To = x.To,
                PriceRoundingID = x.PriceRoundingID,
                PriceRounding = ModelMapperForPriceRounding.PreBuiltPriceRoundingSQLSelectorList.Expand().Compile().Invoke(x.PriceRounding!), // For Flattening Properties (List)
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IProductPricePointModel> SelectFullProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductPricePointSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IProductPricePointModel> SelectLiteProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductPricePointSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IProductPricePointModel> SelectListProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductPricePointSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityList(x, contextProfileName))!;
        }

        public static IProductPricePointModel? SelectFirstFullProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductPricePointSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductPricePointModel? SelectFirstListProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductPricePointSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductPricePointModel? SelectSingleFullProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductPricePointSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductPricePointModel? SelectSingleLiteProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductPricePointSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductPricePointModel? SelectSingleListProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductPricePointSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductPricePointModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IProductPricePointModel> results, int totalPages, int totalCount) SelectFullProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductPricePointSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateProductPricePointModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductPricePointModel> results, int totalPages, int totalCount) SelectLiteProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductPricePointSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateProductPricePointModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductPricePointModel> results, int totalPages, int totalCount) SelectListProductPricePointAndMapToProductPricePointModel(
            this IQueryable<ProductPricePoint> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductPricePointSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductPricePointSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateProductPricePointModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IProductPricePointModel? CreateProductPricePointModelFromEntityFull(this IProductPricePoint? entity, string? contextProfileName)
        {
            return CreateProductPricePointModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IProductPricePointModel? CreateProductPricePointModelFromEntityLite(this IProductPricePoint? entity, string? contextProfileName)
        {
            return CreateProductPricePointModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IProductPricePointModel? CreateProductPricePointModelFromEntityList(this IProductPricePoint? entity, string? contextProfileName)
        {
            return CreateProductPricePointModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IProductPricePointModel? CreateProductPricePointModelFromEntity(
            this IProductPricePoint? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IProductPricePointModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductPricePoint's Properties
                    // ProductPricePoint's Related Objects
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Franchise = ModelMapperForFranchise.CreateFranchiseModelFromEntityLite(entity.Franchise, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    // ProductPricePoint's Associated Objects
                    // Additional Mappings
                    if (CreateProductPricePointModelFromEntityHooksFull != null) { model = CreateProductPricePointModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductPricePoint's Properties
                    // ProductPricePoint's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Currency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.Currency, contextProfileName);
                    model.PriceRounding = ModelMapperForPriceRounding.CreatePriceRoundingModelFromEntityLite(entity.PriceRounding, contextProfileName);
                    model.Slave = ModelMapperForPricePoint.CreatePricePointModelFromEntityLite(entity.Slave, contextProfileName);
                    // ProductPricePoint's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductPricePointModelFromEntityHooksLite != null) { model = CreateProductPricePointModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ProductPricePoint's Properties
                    model.From = entity.From;
                    model.MaxQuantity = entity.MaxQuantity;
                    model.MinQuantity = entity.MinQuantity;
                    model.PercentDiscount = entity.PercentDiscount;
                    model.Price = entity.Price;
                    model.To = entity.To;
                    model.UnitOfMeasure = entity.UnitOfMeasure;
                    // ProductPricePoint's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.CurrencyID = entity.CurrencyID;
                    model.CurrencyKey = entity.Currency?.CustomKey;
                    model.CurrencyName = entity.Currency?.Name;
                    model.FranchiseID = entity.FranchiseID;
                    model.FranchiseKey = entity.Franchise?.CustomKey;
                    model.FranchiseName = entity.Franchise?.Name;
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.PriceRoundingID = entity.PriceRoundingID;
                    model.PriceRoundingKey = entity.PriceRounding?.CustomKey;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    // ProductPricePoint's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductPricePointModelFromEntityHooksList != null) { model = CreateProductPricePointModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
