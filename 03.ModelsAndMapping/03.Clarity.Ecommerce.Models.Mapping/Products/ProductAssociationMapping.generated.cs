// <autogenerated>
// <copyright file="Mapping.Products.ProductAssociation.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForProductAssociation
    {
        public sealed class AnonProductAssociation : ProductAssociation
        {
            // public new Product? Master { get; set; }
        }

        public static readonly Func<ProductAssociation?, string?, IProductAssociationModel?> MapProductAssociationModelFromEntityFull = CreateProductAssociationModelFromEntityFull;

        public static readonly Func<ProductAssociation?, string?, IProductAssociationModel?> MapProductAssociationModelFromEntityLite = CreateProductAssociationModelFromEntityLite;

        public static readonly Func<ProductAssociation?, string?, IProductAssociationModel?> MapProductAssociationModelFromEntityList = CreateProductAssociationModelFromEntityList;

        public static Func<IProductAssociation, IProductAssociationModel, string?, IProductAssociationModel>? CreateProductAssociationModelFromEntityHooksFull { get; set; }

        public static Func<IProductAssociation, IProductAssociationModel, string?, IProductAssociationModel>? CreateProductAssociationModelFromEntityHooksLite { get; set; }

        public static Func<IProductAssociation, IProductAssociationModel, string?, IProductAssociationModel>? CreateProductAssociationModelFromEntityHooksList { get; set; }

        public static Expression<Func<ProductAssociation, AnonProductAssociation>>? PreBuiltProductAssociationSQLSelectorFull { get; set; }

        public static Expression<Func<ProductAssociation, AnonProductAssociation>>? PreBuiltProductAssociationSQLSelectorLite { get; set; }

        public static Expression<Func<ProductAssociation, AnonProductAssociation>>? PreBuiltProductAssociationSQLSelectorList { get; set; }

        /// <summary>An <see cref="IProductAssociationModel"/> extension method that creates a(n) <see cref="ProductAssociation"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ProductAssociation"/> entity.</returns>
        public static IProductAssociation CreateProductAssociationEntity(
            this IProductAssociationModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IProductAssociationModel, ProductAssociation>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateProductAssociationFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IProductAssociationModel"/> extension method that updates a(n) <see cref="ProductAssociation"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ProductAssociation"/> entity.</returns>
        public static IProductAssociation UpdateProductAssociationFromModel(
            this IProductAssociation entity,
            IProductAssociationModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ProductAssociation Properties
            entity.Quantity = model.Quantity;
            entity.SortOrder = model.SortOrder;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            // ProductAssociation's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenProductAssociationSQLSelectorFull()
        {
            PreBuiltProductAssociationSQLSelectorFull = x => x == null ? null! : new AnonProductAssociation
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                Quantity = x.Quantity,
                UnitOfMeasure = x.UnitOfMeasure,
                SortOrder = x.SortOrder,
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                TypeID = x.TypeID,
                Type = ModelMapperForProductAssociationType.PreBuiltProductAssociationTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductAssociationSQLSelectorLite()
        {
            PreBuiltProductAssociationSQLSelectorLite = x => x == null ? null! : new AnonProductAssociation
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                Quantity = x.Quantity,
                UnitOfMeasure = x.UnitOfMeasure,
                SortOrder = x.SortOrder,
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                TypeID = x.TypeID,
                Type = ModelMapperForProductAssociationType.PreBuiltProductAssociationTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductAssociationSQLSelectorList()
        {
            PreBuiltProductAssociationSQLSelectorList = x => x == null ? null! : new AnonProductAssociation
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                Quantity = x.Quantity,
                UnitOfMeasure = x.UnitOfMeasure,
                SortOrder = x.SortOrder,
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                TypeID = x.TypeID,
                Type = ModelMapperForProductAssociationType.PreBuiltProductAssociationTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IProductAssociationModel> SelectFullProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductAssociationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IProductAssociationModel> SelectLiteProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductAssociationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IProductAssociationModel> SelectListProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductAssociationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityList(x, contextProfileName))!;
        }

        public static IProductAssociationModel? SelectFirstFullProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductAssociationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductAssociationModel? SelectFirstListProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductAssociationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductAssociationModel? SelectSingleFullProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductAssociationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductAssociationModel? SelectSingleLiteProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductAssociationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductAssociationModel? SelectSingleListProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductAssociationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductAssociationModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IProductAssociationModel> results, int totalPages, int totalCount) SelectFullProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductAssociationSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateProductAssociationModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductAssociationModel> results, int totalPages, int totalCount) SelectLiteProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductAssociationSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateProductAssociationModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductAssociationModel> results, int totalPages, int totalCount) SelectListProductAssociationAndMapToProductAssociationModel(
            this IQueryable<ProductAssociation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductAssociationSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductAssociationSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateProductAssociationModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IProductAssociationModel? CreateProductAssociationModelFromEntityFull(this IProductAssociation? entity, string? contextProfileName)
        {
            return CreateProductAssociationModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IProductAssociationModel? CreateProductAssociationModelFromEntityLite(this IProductAssociation? entity, string? contextProfileName)
        {
            return CreateProductAssociationModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IProductAssociationModel? CreateProductAssociationModelFromEntityList(this IProductAssociation? entity, string? contextProfileName)
        {
            return CreateProductAssociationModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IProductAssociationModel? CreateProductAssociationModelFromEntity(
            this IProductAssociation? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IProductAssociationModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForProductAssociationType.CreateProductAssociationTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // ProductAssociation's Properties
                    // ProductAssociation's Related Objects
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    // ProductAssociation's Associated Objects
                    // Additional Mappings
                    if (CreateProductAssociationModelFromEntityHooksFull != null) { model = CreateProductAssociationModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductAssociation's Properties
                    // ProductAssociation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Slave = ModelMapperForProduct.MapLiteProductOldExt(entity.Slave);
                    // ProductAssociation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductAssociationModelFromEntityHooksLite != null) { model = CreateProductAssociationModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ProductAssociation's Properties
                    model.Quantity = entity.Quantity;
                    model.SortOrder = entity.SortOrder;
                    model.UnitOfMeasure = entity.UnitOfMeasure;
                    // ProductAssociation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.MasterPrimaryImageFileName = (entity is AnonProductAssociation ? ((AnonProductAssociation)entity).Master?.Images : entity.Master?.Images)?.Where(img => img.Active).OrderByDescending(img => img.IsPrimary).ThenByDescending(img => img.OriginalWidth).Take(1).Select(img => img.ThumbnailFileName ?? img.OriginalFileName).FirstOrDefault();
                    model.MasterSerializableAttributes = entity.Master?.SerializableAttributes;
                    model.MasterSeoUrl = entity.Master?.SeoUrl;
                    model.MasterIsVisible = entity.Master?.IsVisible ?? false;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    model.SlavePrimaryImageFileName = (entity is AnonProductAssociation ? ((AnonProductAssociation)entity).Slave?.Images : entity.Slave?.Images)?.Where(img => img.Active).OrderByDescending(img => img.IsPrimary).ThenByDescending(img => img.OriginalWidth).Take(1).Select(img => img.ThumbnailFileName ?? img.OriginalFileName).FirstOrDefault();
                    model.SlaveSerializableAttributes = entity.Slave?.SerializableAttributes;
                    model.SlaveSeoUrl = entity.Slave?.SeoUrl;
                    model.SlaveIsVisible = entity.Slave?.IsVisible ?? false;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    // ProductAssociation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductAssociationModelFromEntityHooksList != null) { model = CreateProductAssociationModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
