// <autogenerated>
// <copyright file="Mapping.Products.ProductRestriction.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForProductRestriction
    {
        public sealed class AnonProductRestriction : ProductRestriction
        {
        }

        public static readonly Func<ProductRestriction?, string?, IProductRestrictionModel?> MapProductRestrictionModelFromEntityFull = CreateProductRestrictionModelFromEntityFull;

        public static readonly Func<ProductRestriction?, string?, IProductRestrictionModel?> MapProductRestrictionModelFromEntityLite = CreateProductRestrictionModelFromEntityLite;

        public static readonly Func<ProductRestriction?, string?, IProductRestrictionModel?> MapProductRestrictionModelFromEntityList = CreateProductRestrictionModelFromEntityList;

        public static Func<IProductRestriction, IProductRestrictionModel, string?, IProductRestrictionModel>? CreateProductRestrictionModelFromEntityHooksFull { get; set; }

        public static Func<IProductRestriction, IProductRestrictionModel, string?, IProductRestrictionModel>? CreateProductRestrictionModelFromEntityHooksLite { get; set; }

        public static Func<IProductRestriction, IProductRestrictionModel, string?, IProductRestrictionModel>? CreateProductRestrictionModelFromEntityHooksList { get; set; }

        public static Expression<Func<ProductRestriction, AnonProductRestriction>>? PreBuiltProductRestrictionSQLSelectorFull { get; set; }

        public static Expression<Func<ProductRestriction, AnonProductRestriction>>? PreBuiltProductRestrictionSQLSelectorLite { get; set; }

        public static Expression<Func<ProductRestriction, AnonProductRestriction>>? PreBuiltProductRestrictionSQLSelectorList { get; set; }

        /// <summary>An <see cref="IProductRestrictionModel"/> extension method that creates a(n) <see cref="ProductRestriction"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ProductRestriction"/> entity.</returns>
        public static IProductRestriction CreateProductRestrictionEntity(
            this IProductRestrictionModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IProductRestrictionModel, ProductRestriction>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateProductRestrictionFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IProductRestrictionModel"/> extension method that updates a(n) <see cref="ProductRestriction"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ProductRestriction"/> entity.</returns>
        public static IProductRestriction UpdateProductRestrictionFromModel(
            this IProductRestriction entity,
            IProductRestrictionModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ProductRestriction Properties
            entity.CanPurchaseDomestically = model.CanPurchaseDomestically;
            entity.CanPurchaseInternationally = model.CanPurchaseInternationally;
            entity.CanPurchaseIntraRegion = model.CanPurchaseIntraRegion;
            entity.CanShipDomestically = model.CanShipDomestically;
            entity.CanShipInternationally = model.CanShipInternationally;
            entity.CanShipIntraRegion = model.CanShipIntraRegion;
            entity.OverrideWithRoles = model.OverrideWithRoles;
            entity.RestrictionsApplyToCity = model.RestrictionsApplyToCity;
            entity.RestrictionsApplyToPostalCode = model.RestrictionsApplyToPostalCode;
            // ProductRestriction's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenProductRestrictionSQLSelectorFull()
        {
            PreBuiltProductRestrictionSQLSelectorFull = x => x == null ? null! : new AnonProductRestriction
            {
                ProductID = x.ProductID,
                CanPurchaseInternationally = x.CanPurchaseInternationally,
                CanPurchaseDomestically = x.CanPurchaseDomestically,
                CanPurchaseIntraRegion = x.CanPurchaseIntraRegion,
                CanShipInternationally = x.CanShipInternationally,
                CanShipDomestically = x.CanShipDomestically,
                CanShipIntraRegion = x.CanShipIntraRegion,
                RestrictionsApplyToCity = x.RestrictionsApplyToCity,
                RestrictionsApplyToPostalCode = x.RestrictionsApplyToPostalCode,
                OverrideWithRoles = x.OverrideWithRoles,
                OverrideWithAccountTypeID = x.OverrideWithAccountTypeID,
                OverrideWithAccountType = ModelMapperForAccountType.PreBuiltAccountTypeSQLSelectorList.Expand().Compile().Invoke(x.OverrideWithAccountType!),
                RestrictionsApplyToCountryID = x.RestrictionsApplyToCountryID,
                RestrictionsApplyToCountry = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.RestrictionsApplyToCountry!),
                RestrictionsApplyToRegionID = x.RestrictionsApplyToRegionID,
                RestrictionsApplyToRegion = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.RestrictionsApplyToRegion!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductRestrictionSQLSelectorLite()
        {
            PreBuiltProductRestrictionSQLSelectorLite = x => x == null ? null! : new AnonProductRestriction
            {
                ProductID = x.ProductID,
                CanPurchaseInternationally = x.CanPurchaseInternationally,
                CanPurchaseDomestically = x.CanPurchaseDomestically,
                CanPurchaseIntraRegion = x.CanPurchaseIntraRegion,
                CanShipInternationally = x.CanShipInternationally,
                CanShipDomestically = x.CanShipDomestically,
                CanShipIntraRegion = x.CanShipIntraRegion,
                RestrictionsApplyToCity = x.RestrictionsApplyToCity,
                RestrictionsApplyToPostalCode = x.RestrictionsApplyToPostalCode,
                OverrideWithRoles = x.OverrideWithRoles,
                OverrideWithAccountTypeID = x.OverrideWithAccountTypeID,
                OverrideWithAccountType = ModelMapperForAccountType.PreBuiltAccountTypeSQLSelectorList.Expand().Compile().Invoke(x.OverrideWithAccountType!),
                RestrictionsApplyToCountryID = x.RestrictionsApplyToCountryID,
                RestrictionsApplyToCountry = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.RestrictionsApplyToCountry!),
                RestrictionsApplyToRegionID = x.RestrictionsApplyToRegionID,
                RestrictionsApplyToRegion = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.RestrictionsApplyToRegion!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductRestrictionSQLSelectorList()
        {
            PreBuiltProductRestrictionSQLSelectorList = x => x == null ? null! : new AnonProductRestriction
            {
                ProductID = x.ProductID,
                CanPurchaseInternationally = x.CanPurchaseInternationally,
                CanPurchaseDomestically = x.CanPurchaseDomestically,
                CanPurchaseIntraRegion = x.CanPurchaseIntraRegion,
                CanShipInternationally = x.CanShipInternationally,
                CanShipDomestically = x.CanShipDomestically,
                CanShipIntraRegion = x.CanShipIntraRegion,
                RestrictionsApplyToCity = x.RestrictionsApplyToCity,
                RestrictionsApplyToPostalCode = x.RestrictionsApplyToPostalCode,
                OverrideWithRoles = x.OverrideWithRoles,
                OverrideWithAccountTypeID = x.OverrideWithAccountTypeID,
                OverrideWithAccountType = ModelMapperForAccountType.PreBuiltAccountTypeSQLSelectorList.Expand().Compile().Invoke(x.OverrideWithAccountType!), // For Flattening Properties (List)
                RestrictionsApplyToCountryID = x.RestrictionsApplyToCountryID,
                RestrictionsApplyToCountry = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.RestrictionsApplyToCountry!), // For Flattening Properties (List)
                RestrictionsApplyToRegionID = x.RestrictionsApplyToRegionID,
                RestrictionsApplyToRegion = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.RestrictionsApplyToRegion!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IProductRestrictionModel> SelectFullProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductRestrictionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IProductRestrictionModel> SelectLiteProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductRestrictionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IProductRestrictionModel> SelectListProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductRestrictionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityList(x, contextProfileName))!;
        }

        public static IProductRestrictionModel? SelectFirstFullProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductRestrictionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductRestrictionModel? SelectFirstListProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductRestrictionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductRestrictionModel? SelectSingleFullProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductRestrictionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductRestrictionModel? SelectSingleLiteProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductRestrictionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductRestrictionModel? SelectSingleListProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductRestrictionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductRestrictionModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IProductRestrictionModel> results, int totalPages, int totalCount) SelectFullProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductRestrictionSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateProductRestrictionModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductRestrictionModel> results, int totalPages, int totalCount) SelectLiteProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductRestrictionSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateProductRestrictionModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductRestrictionModel> results, int totalPages, int totalCount) SelectListProductRestrictionAndMapToProductRestrictionModel(
            this IQueryable<ProductRestriction> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductRestrictionSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductRestrictionSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateProductRestrictionModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IProductRestrictionModel? CreateProductRestrictionModelFromEntityFull(this IProductRestriction? entity, string? contextProfileName)
        {
            return CreateProductRestrictionModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IProductRestrictionModel? CreateProductRestrictionModelFromEntityLite(this IProductRestriction? entity, string? contextProfileName)
        {
            return CreateProductRestrictionModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IProductRestrictionModel? CreateProductRestrictionModelFromEntityList(this IProductRestriction? entity, string? contextProfileName)
        {
            return CreateProductRestrictionModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IProductRestrictionModel? CreateProductRestrictionModelFromEntity(
            this IProductRestriction? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IProductRestrictionModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductRestriction's Properties
                    // ProductRestriction's Related Objects
                    // ProductRestriction's Associated Objects
                    // Additional Mappings
                    if (CreateProductRestrictionModelFromEntityHooksFull != null) { model = CreateProductRestrictionModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductRestriction's Properties
                    // ProductRestriction's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.OverrideWithAccountType = ModelMapperForAccountType.CreateAccountTypeModelFromEntityLite(entity.OverrideWithAccountType, contextProfileName);
                    model.RestrictionsApplyToCountry = ModelMapperForCountry.CreateCountryModelFromEntityLite(entity.RestrictionsApplyToCountry, contextProfileName);
                    model.RestrictionsApplyToRegion = ModelMapperForRegion.CreateRegionModelFromEntityLite(entity.RestrictionsApplyToRegion, contextProfileName);
                    // ProductRestriction's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductRestrictionModelFromEntityHooksLite != null) { model = CreateProductRestrictionModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ProductRestriction's Properties
                    model.CanPurchaseDomestically = entity.CanPurchaseDomestically;
                    model.CanPurchaseInternationally = entity.CanPurchaseInternationally;
                    model.CanPurchaseIntraRegion = entity.CanPurchaseIntraRegion;
                    model.CanShipDomestically = entity.CanShipDomestically;
                    model.CanShipInternationally = entity.CanShipInternationally;
                    model.CanShipIntraRegion = entity.CanShipIntraRegion;
                    model.OverrideWithRoles = entity.OverrideWithRoles;
                    model.RestrictionsApplyToCity = entity.RestrictionsApplyToCity;
                    model.RestrictionsApplyToPostalCode = entity.RestrictionsApplyToPostalCode;
                    // ProductRestriction's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.OverrideWithAccountTypeID = entity.OverrideWithAccountTypeID;
                    model.OverrideWithAccountTypeKey = entity.OverrideWithAccountType?.CustomKey;
                    model.OverrideWithAccountTypeName = entity.OverrideWithAccountType?.Name;
                    model.RestrictionsApplyToCountryID = entity.RestrictionsApplyToCountryID;
                    model.RestrictionsApplyToCountryKey = entity.RestrictionsApplyToCountry?.CustomKey;
                    model.RestrictionsApplyToCountryName = entity.RestrictionsApplyToCountry?.Name;
                    model.RestrictionsApplyToRegionID = entity.RestrictionsApplyToRegionID;
                    model.RestrictionsApplyToRegionKey = entity.RestrictionsApplyToRegion?.CustomKey;
                    model.RestrictionsApplyToRegionName = entity.RestrictionsApplyToRegion?.Name;
                    // ProductRestriction's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductRestrictionModelFromEntityHooksList != null) { model = CreateProductRestrictionModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
