// <autogenerated>
// <copyright file="Mapping.Products.Product.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForProduct
    {
        public sealed class AnonProduct : Product
        {
            public new IEnumerable<BrandProduct>? Brands { get; set; }
            public new IEnumerable<ProductAssociation>? ProductAssociations { get; set; }
            public new IEnumerable<ProductAssociation>? ProductsAssociatedWith { get; set; }
            public new IEnumerable<ProductCategory>? Categories { get; set; }
            public new IEnumerable<ProductFile>? StoredFiles { get; set; }
            public new IEnumerable<ProductImage>? Images { get; set; }
            public new IEnumerable<ProductNotification>? ProductNotifications { get; set; }
            public new IEnumerable<ProductRestriction>? ProductRestrictions { get; set; }
            public new IEnumerable<ProductShipCarrierMethod>? ProductShipCarrierMethods { get; set; }
        }

        public static readonly Func<Product?, string?, IProductModel?> MapProductModelFromEntityFull = CreateProductModelFromEntityFull;

        public static readonly Func<Product?, string?, IProductModel?> MapProductModelFromEntityLite = CreateProductModelFromEntityLite;

        public static readonly Func<Product?, string?, IProductModel?> MapProductModelFromEntityList = CreateProductModelFromEntityList;

        public static Func<IProduct, IProductModel, string?, IProductModel>? CreateProductModelFromEntityHooksFull { get; set; }

        public static Func<IProduct, IProductModel, string?, IProductModel>? CreateProductModelFromEntityHooksLite { get; set; }

        public static Func<IProduct, IProductModel, string?, IProductModel>? CreateProductModelFromEntityHooksList { get; set; }

        public static Expression<Func<Product, AnonProduct>>? PreBuiltProductSQLSelectorFull { get; set; }

        public static Expression<Func<Product, AnonProduct>>? PreBuiltProductSQLSelectorLite { get; set; }

        public static Expression<Func<Product, AnonProduct>>? PreBuiltProductSQLSelectorList { get; set; }

        /// <summary>An <see cref="IProductModel"/> extension method that creates a(n) <see cref="Product"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Product"/> entity.</returns>
        public static IProduct CreateProductEntity(
            this IProductModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IProductModel, Product>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateProductFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IProductModel"/> extension method that updates a(n) <see cref="Product"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Product"/> entity.</returns>
        public static IProduct UpdateProductFromModel(
            this IProduct entity,
            IProductModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // IHaveRequiresRolesBase Properties
            entity.RequiresRoles = model.RequiresRoles;
            entity.RequiresRolesAlt = model.RequiresRolesAlt;
            // Product Properties
            entity.AllowBackOrder = model.AllowBackOrder;
            entity.AllowPreSale = model.AllowPreSale;
            entity.AvailableEndDate = model.AvailableEndDate;
            entity.AvailableStartDate = model.AvailableStartDate;
            entity.BrandName = model.BrandName;
            entity.Depth = model.Depth;
            entity.DepthUnitOfMeasure = model.DepthUnitOfMeasure;
            entity.DocumentRequiredForPurchase = model.DocumentRequiredForPurchase;
            entity.DocumentRequiredForPurchaseExpiredWarningMessage = model.DocumentRequiredForPurchaseExpiredWarningMessage;
            entity.DocumentRequiredForPurchaseMissingWarningMessage = model.DocumentRequiredForPurchaseMissingWarningMessage;
            entity.DocumentRequiredForPurchaseOverrideFee = model.DocumentRequiredForPurchaseOverrideFee;
            entity.DocumentRequiredForPurchaseOverrideFeeAcceptedMessage = model.DocumentRequiredForPurchaseOverrideFeeAcceptedMessage;
            entity.DocumentRequiredForPurchaseOverrideFeeIsPercent = model.DocumentRequiredForPurchaseOverrideFeeIsPercent;
            entity.DocumentRequiredForPurchaseOverrideFeeWarningMessage = model.DocumentRequiredForPurchaseOverrideFeeWarningMessage;
            entity.DropShipOnly = model.DropShipOnly;
            entity.FlatShippingCharge = model.FlatShippingCharge;
            entity.HandlingCharge = model.HandlingCharge;
            entity.HCPCCode = model.HCPCCode;
            entity.Height = model.Height;
            entity.HeightUnitOfMeasure = model.HeightUnitOfMeasure;
            entity.IndexSynonyms = model.IndexSynonyms;
            entity.IsDiscontinued = model.IsDiscontinued;
            entity.IsEligibleForReturn = model.IsEligibleForReturn;
            entity.IsFreeShipping = model.IsFreeShipping;
            entity.IsTaxable = model.IsTaxable;
            entity.IsUnlimitedStock = model.IsUnlimitedStock;
            entity.IsVisible = model.IsVisible;
            entity.KitBaseQuantityPriceMultiplier = model.KitBaseQuantityPriceMultiplier;
            entity.ManufacturerPartNumber = model.ManufacturerPartNumber;
            entity.MaximumBackOrderPurchaseQuantity = model.MaximumBackOrderPurchaseQuantity;
            entity.MaximumBackOrderPurchaseQuantityGlobal = model.MaximumBackOrderPurchaseQuantityGlobal;
            entity.MaximumBackOrderPurchaseQuantityIfPastPurchased = model.MaximumBackOrderPurchaseQuantityIfPastPurchased;
            entity.MaximumPrePurchaseQuantity = model.MaximumPrePurchaseQuantity;
            entity.MaximumPrePurchaseQuantityGlobal = model.MaximumPrePurchaseQuantityGlobal;
            entity.MaximumPrePurchaseQuantityIfPastPurchased = model.MaximumPrePurchaseQuantityIfPastPurchased;
            entity.MaximumPurchaseQuantity = model.MaximumPurchaseQuantity;
            entity.MaximumPurchaseQuantityIfPastPurchased = model.MaximumPurchaseQuantityIfPastPurchased;
            entity.MinimumPurchaseQuantity = model.MinimumPurchaseQuantity;
            entity.MinimumPurchaseQuantityIfPastPurchased = model.MinimumPurchaseQuantityIfPastPurchased;
            entity.MustPurchaseInMultiplesOfAmount = model.MustPurchaseInMultiplesOfAmount;
            entity.MustPurchaseInMultiplesOfAmountOverrideFee = model.MustPurchaseInMultiplesOfAmountOverrideFee;
            entity.MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage = model.MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage;
            entity.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent = model.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent;
            entity.MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage = model.MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage;
            entity.MustPurchaseInMultiplesOfAmountWarningMessage = model.MustPurchaseInMultiplesOfAmountWarningMessage;
            entity.NothingToShip = model.NothingToShip;
            entity.PreSellEndDate = model.PreSellEndDate;
            entity.QuantityLayersPerPallet = model.QuantityLayersPerPallet;
            entity.QuantityMasterPackLayersPerPallet = model.QuantityMasterPackLayersPerPallet;
            entity.QuantityMasterPackPerLayer = model.QuantityMasterPackPerLayer;
            entity.QuantityMasterPackPerPallet = model.QuantityMasterPackPerPallet;
            entity.QuantityPerLayer = model.QuantityPerLayer;
            entity.QuantityPerMasterPack = model.QuantityPerMasterPack;
            entity.QuantityPerPallet = model.QuantityPerPallet;
            entity.RestockingFeeAmount = model.RestockingFeeAmount;
            entity.RestockingFeePercent = model.RestockingFeePercent;
            entity.SeoDescription = model.SeoDescription;
            entity.SeoKeywords = model.SeoKeywords;
            entity.SeoMetaData = model.SeoMetaData;
            entity.SeoPageTitle = model.SeoPageTitle;
            entity.SeoUrl = model.SeoUrl;
            entity.ShippingLeadTimeDays = model.ShippingLeadTimeDays;
            entity.ShippingLeadTimeIsCalendarDays = model.ShippingLeadTimeIsCalendarDays;
            entity.ShortDescription = model.ShortDescription;
            entity.SortOrder = model.SortOrder;
            entity.TaxCode = model.TaxCode;
            entity.TotalPurchasedAmount = model.TotalPurchasedAmount;
            entity.TotalPurchasedQuantity = model.TotalPurchasedQuantity;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            entity.Weight = model.Weight;
            entity.WeightUnitOfMeasure = model.WeightUnitOfMeasure;
            entity.Width = model.Width;
            entity.WidthUnitOfMeasure = model.WidthUnitOfMeasure;
            // Product's Related Objects
            // Product's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenProductSQLSelectorFull()
        {
            PreBuiltProductSQLSelectorFull = x => x == null ? null! : new AnonProduct
            {
                StatusID = x.StatusID,
                Status = ModelMapperForProductStatus.PreBuiltProductStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                TypeID = x.TypeID,
                Type = ModelMapperForProductType.PreBuiltProductTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                SeoUrl = x.SeoUrl,
                SeoKeywords = x.SeoKeywords,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                RequiresRoles = x.RequiresRoles,
                RequiresRolesAlt = x.RequiresRolesAlt,
                Weight = x.Weight,
                WeightUnitOfMeasure = x.WeightUnitOfMeasure,
                Width = x.Width,
                WidthUnitOfMeasure = x.WidthUnitOfMeasure,
                Depth = x.Depth,
                DepthUnitOfMeasure = x.DepthUnitOfMeasure,
                Height = x.Height,
                HeightUnitOfMeasure = x.HeightUnitOfMeasure,
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForProductImage.PreBuiltProductImageSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForProductFile.PreBuiltProductFileSQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandProduct.PreBuiltBrandProductSQLSelectorList.Expand().Compile()).ToList(),
                Categories = x.Categories!.Where(y => y.Active).Select(ModelMapperForProductCategory.PreBuiltProductCategorySQLSelectorList.Expand().Compile()).ToList(),
                IsVisible = x.IsVisible,
                IsDiscontinued = x.IsDiscontinued,
                IsEligibleForReturn = x.IsEligibleForReturn,
                IsTaxable = x.IsTaxable,
                AllowBackOrder = x.AllowBackOrder,
                AllowPreSale = x.AllowPreSale,
                IsUnlimitedStock = x.IsUnlimitedStock,
                IsFreeShipping = x.IsFreeShipping,
                NothingToShip = x.NothingToShip,
                DropShipOnly = x.DropShipOnly,
                ShippingLeadTimeIsCalendarDays = x.ShippingLeadTimeIsCalendarDays,
                HCPCCode = x.HCPCCode,
                ShortDescription = x.ShortDescription,
                ManufacturerPartNumber = x.ManufacturerPartNumber,
                BrandName = x.BrandName,
                TaxCode = x.TaxCode,
                UnitOfMeasure = x.UnitOfMeasure,
                IndexSynonyms = x.IndexSynonyms,
                SortOrder = x.SortOrder,
                HandlingCharge = x.HandlingCharge,
                FlatShippingCharge = x.FlatShippingCharge,
                RestockingFeePercent = x.RestockingFeePercent,
                RestockingFeeAmount = x.RestockingFeeAmount,
                AvailableStartDate = x.AvailableStartDate,
                AvailableEndDate = x.AvailableEndDate,
                PreSellEndDate = x.PreSellEndDate,
                QuantityPerMasterPack = x.QuantityPerMasterPack,
                QuantityMasterPackPerLayer = x.QuantityMasterPackPerLayer,
                QuantityMasterPackLayersPerPallet = x.QuantityMasterPackLayersPerPallet,
                QuantityMasterPackPerPallet = x.QuantityMasterPackPerPallet,
                QuantityPerLayer = x.QuantityPerLayer,
                QuantityLayersPerPallet = x.QuantityLayersPerPallet,
                QuantityPerPallet = x.QuantityPerPallet,
                KitBaseQuantityPriceMultiplier = x.KitBaseQuantityPriceMultiplier,
                ShippingLeadTimeDays = x.ShippingLeadTimeDays,
                MinimumPurchaseQuantity = x.MinimumPurchaseQuantity,
                MinimumPurchaseQuantityIfPastPurchased = x.MinimumPurchaseQuantityIfPastPurchased,
                MaximumPurchaseQuantity = x.MaximumPurchaseQuantity,
                MaximumPurchaseQuantityIfPastPurchased = x.MaximumPurchaseQuantityIfPastPurchased,
                MaximumBackOrderPurchaseQuantity = x.MaximumBackOrderPurchaseQuantity,
                MaximumBackOrderPurchaseQuantityIfPastPurchased = x.MaximumBackOrderPurchaseQuantityIfPastPurchased,
                MaximumBackOrderPurchaseQuantityGlobal = x.MaximumBackOrderPurchaseQuantityGlobal,
                MaximumPrePurchaseQuantity = x.MaximumPrePurchaseQuantity,
                MaximumPrePurchaseQuantityIfPastPurchased = x.MaximumPrePurchaseQuantityIfPastPurchased,
                MaximumPrePurchaseQuantityGlobal = x.MaximumPrePurchaseQuantityGlobal,
                DocumentRequiredForPurchase = x.DocumentRequiredForPurchase,
                DocumentRequiredForPurchaseMissingWarningMessage = x.DocumentRequiredForPurchaseMissingWarningMessage,
                DocumentRequiredForPurchaseExpiredWarningMessage = x.DocumentRequiredForPurchaseExpiredWarningMessage,
                DocumentRequiredForPurchaseOverrideFee = x.DocumentRequiredForPurchaseOverrideFee,
                DocumentRequiredForPurchaseOverrideFeeIsPercent = x.DocumentRequiredForPurchaseOverrideFeeIsPercent,
                DocumentRequiredForPurchaseOverrideFeeWarningMessage = x.DocumentRequiredForPurchaseOverrideFeeWarningMessage,
                DocumentRequiredForPurchaseOverrideFeeAcceptedMessage = x.DocumentRequiredForPurchaseOverrideFeeAcceptedMessage,
                MustPurchaseInMultiplesOfAmount = x.MustPurchaseInMultiplesOfAmount,
                MustPurchaseInMultiplesOfAmountWarningMessage = x.MustPurchaseInMultiplesOfAmountWarningMessage,
                MustPurchaseInMultiplesOfAmountOverrideFee = x.MustPurchaseInMultiplesOfAmountOverrideFee,
                MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent = x.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent,
                MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage = x.MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage,
                MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage = x.MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage,
                TotalPurchasedAmount = x.TotalPurchasedAmount,
                TotalPurchasedAmountCurrencyID = x.TotalPurchasedAmountCurrencyID,
                TotalPurchasedAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.TotalPurchasedAmountCurrency!),
                TotalPurchasedQuantity = x.TotalPurchasedQuantity,
                PackageID = x.PackageID,
                Package = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.Package!),
                MasterPackID = x.MasterPackID,
                MasterPack = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.MasterPack!),
                PalletID = x.PalletID,
                Pallet = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.Pallet!),
                RestockingFeeAmountCurrencyID = x.RestockingFeeAmountCurrencyID,
                RestockingFeeAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.RestockingFeeAmountCurrency!),
                ProductAssociations = x.ProductAssociations!.Where(y => y.Active).Select(ModelMapperForProductAssociation.PreBuiltProductAssociationSQLSelectorList.Expand().Compile()).ToList(),
                ProductsAssociatedWith = x.ProductsAssociatedWith!.Where(y => y.Active).Select(ModelMapperForProductAssociation.PreBuiltProductAssociationSQLSelectorList.Expand().Compile()).ToList(),
                ProductShipCarrierMethods = x.ProductShipCarrierMethods!.Where(y => y.Active).Select(ModelMapperForProductShipCarrierMethod.PreBuiltProductShipCarrierMethodSQLSelectorList.Expand().Compile()).ToList(),
                ProductRestrictions = x.ProductRestrictions!.Where(y => y.Active).Select(ModelMapperForProductRestriction.PreBuiltProductRestrictionSQLSelectorList.Expand().Compile()).ToList(),
                ProductNotifications = x.ProductNotifications!.Where(y => y.Active).Select(ModelMapperForProductNotification.PreBuiltProductNotificationSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductSQLSelectorLite()
        {
            PreBuiltProductSQLSelectorLite = x => x == null ? null! : new AnonProduct
            {
                StatusID = x.StatusID,
                Status = ModelMapperForProductStatus.PreBuiltProductStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                TypeID = x.TypeID,
                Type = ModelMapperForProductType.PreBuiltProductTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                SeoUrl = x.SeoUrl,
                SeoKeywords = x.SeoKeywords,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                RequiresRoles = x.RequiresRoles,
                RequiresRolesAlt = x.RequiresRolesAlt,
                Weight = x.Weight,
                WeightUnitOfMeasure = x.WeightUnitOfMeasure,
                Width = x.Width,
                WidthUnitOfMeasure = x.WidthUnitOfMeasure,
                Depth = x.Depth,
                DepthUnitOfMeasure = x.DepthUnitOfMeasure,
                Height = x.Height,
                HeightUnitOfMeasure = x.HeightUnitOfMeasure,
                IsVisible = x.IsVisible,
                IsDiscontinued = x.IsDiscontinued,
                IsEligibleForReturn = x.IsEligibleForReturn,
                IsTaxable = x.IsTaxable,
                AllowBackOrder = x.AllowBackOrder,
                AllowPreSale = x.AllowPreSale,
                IsUnlimitedStock = x.IsUnlimitedStock,
                IsFreeShipping = x.IsFreeShipping,
                NothingToShip = x.NothingToShip,
                DropShipOnly = x.DropShipOnly,
                ShippingLeadTimeIsCalendarDays = x.ShippingLeadTimeIsCalendarDays,
                HCPCCode = x.HCPCCode,
                ShortDescription = x.ShortDescription,
                ManufacturerPartNumber = x.ManufacturerPartNumber,
                BrandName = x.BrandName,
                TaxCode = x.TaxCode,
                UnitOfMeasure = x.UnitOfMeasure,
                IndexSynonyms = x.IndexSynonyms,
                SortOrder = x.SortOrder,
                HandlingCharge = x.HandlingCharge,
                FlatShippingCharge = x.FlatShippingCharge,
                RestockingFeePercent = x.RestockingFeePercent,
                RestockingFeeAmount = x.RestockingFeeAmount,
                AvailableStartDate = x.AvailableStartDate,
                AvailableEndDate = x.AvailableEndDate,
                PreSellEndDate = x.PreSellEndDate,
                QuantityPerMasterPack = x.QuantityPerMasterPack,
                QuantityMasterPackPerLayer = x.QuantityMasterPackPerLayer,
                QuantityMasterPackLayersPerPallet = x.QuantityMasterPackLayersPerPallet,
                QuantityMasterPackPerPallet = x.QuantityMasterPackPerPallet,
                QuantityPerLayer = x.QuantityPerLayer,
                QuantityLayersPerPallet = x.QuantityLayersPerPallet,
                QuantityPerPallet = x.QuantityPerPallet,
                KitBaseQuantityPriceMultiplier = x.KitBaseQuantityPriceMultiplier,
                ShippingLeadTimeDays = x.ShippingLeadTimeDays,
                MinimumPurchaseQuantity = x.MinimumPurchaseQuantity,
                MinimumPurchaseQuantityIfPastPurchased = x.MinimumPurchaseQuantityIfPastPurchased,
                MaximumPurchaseQuantity = x.MaximumPurchaseQuantity,
                MaximumPurchaseQuantityIfPastPurchased = x.MaximumPurchaseQuantityIfPastPurchased,
                MaximumBackOrderPurchaseQuantity = x.MaximumBackOrderPurchaseQuantity,
                MaximumBackOrderPurchaseQuantityIfPastPurchased = x.MaximumBackOrderPurchaseQuantityIfPastPurchased,
                MaximumBackOrderPurchaseQuantityGlobal = x.MaximumBackOrderPurchaseQuantityGlobal,
                MaximumPrePurchaseQuantity = x.MaximumPrePurchaseQuantity,
                MaximumPrePurchaseQuantityIfPastPurchased = x.MaximumPrePurchaseQuantityIfPastPurchased,
                MaximumPrePurchaseQuantityGlobal = x.MaximumPrePurchaseQuantityGlobal,
                DocumentRequiredForPurchase = x.DocumentRequiredForPurchase,
                DocumentRequiredForPurchaseMissingWarningMessage = x.DocumentRequiredForPurchaseMissingWarningMessage,
                DocumentRequiredForPurchaseExpiredWarningMessage = x.DocumentRequiredForPurchaseExpiredWarningMessage,
                DocumentRequiredForPurchaseOverrideFee = x.DocumentRequiredForPurchaseOverrideFee,
                DocumentRequiredForPurchaseOverrideFeeIsPercent = x.DocumentRequiredForPurchaseOverrideFeeIsPercent,
                DocumentRequiredForPurchaseOverrideFeeWarningMessage = x.DocumentRequiredForPurchaseOverrideFeeWarningMessage,
                DocumentRequiredForPurchaseOverrideFeeAcceptedMessage = x.DocumentRequiredForPurchaseOverrideFeeAcceptedMessage,
                MustPurchaseInMultiplesOfAmount = x.MustPurchaseInMultiplesOfAmount,
                MustPurchaseInMultiplesOfAmountWarningMessage = x.MustPurchaseInMultiplesOfAmountWarningMessage,
                MustPurchaseInMultiplesOfAmountOverrideFee = x.MustPurchaseInMultiplesOfAmountOverrideFee,
                MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent = x.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent,
                MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage = x.MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage,
                MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage = x.MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage,
                TotalPurchasedAmount = x.TotalPurchasedAmount,
                TotalPurchasedAmountCurrencyID = x.TotalPurchasedAmountCurrencyID,
                TotalPurchasedAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.TotalPurchasedAmountCurrency!),
                TotalPurchasedQuantity = x.TotalPurchasedQuantity,
                PackageID = x.PackageID,
                Package = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.Package!),
                MasterPackID = x.MasterPackID,
                MasterPack = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.MasterPack!),
                PalletID = x.PalletID,
                Pallet = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.Pallet!),
                RestockingFeeAmountCurrencyID = x.RestockingFeeAmountCurrencyID,
                RestockingFeeAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.RestockingFeeAmountCurrency!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductSQLSelectorList()
        {
            PreBuiltProductSQLSelectorList = x => x == null ? null! : new AnonProduct
            {
                StatusID = x.StatusID,
                Status = ModelMapperForProductStatus.PreBuiltProductStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                TypeID = x.TypeID,
                Type = ModelMapperForProductType.PreBuiltProductTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                SeoUrl = x.SeoUrl,
                RequiresRoles = x.RequiresRoles,
                RequiresRolesAlt = x.RequiresRolesAlt,
                Weight = x.Weight,
                WeightUnitOfMeasure = x.WeightUnitOfMeasure,
                Width = x.Width,
                WidthUnitOfMeasure = x.WidthUnitOfMeasure,
                Depth = x.Depth,
                DepthUnitOfMeasure = x.DepthUnitOfMeasure,
                Height = x.Height,
                HeightUnitOfMeasure = x.HeightUnitOfMeasure,
                IsVisible = x.IsVisible,
                IsDiscontinued = x.IsDiscontinued,
                IsEligibleForReturn = x.IsEligibleForReturn,
                IsTaxable = x.IsTaxable,
                AllowBackOrder = x.AllowBackOrder,
                AllowPreSale = x.AllowPreSale,
                IsUnlimitedStock = x.IsUnlimitedStock,
                IsFreeShipping = x.IsFreeShipping,
                NothingToShip = x.NothingToShip,
                DropShipOnly = x.DropShipOnly,
                ShippingLeadTimeIsCalendarDays = x.ShippingLeadTimeIsCalendarDays,
                HCPCCode = x.HCPCCode,
                ShortDescription = x.ShortDescription,
                ManufacturerPartNumber = x.ManufacturerPartNumber,
                BrandName = x.BrandName,
                TaxCode = x.TaxCode,
                UnitOfMeasure = x.UnitOfMeasure,
                IndexSynonyms = x.IndexSynonyms,
                SortOrder = x.SortOrder,
                HandlingCharge = x.HandlingCharge,
                FlatShippingCharge = x.FlatShippingCharge,
                RestockingFeePercent = x.RestockingFeePercent,
                RestockingFeeAmount = x.RestockingFeeAmount,
                AvailableStartDate = x.AvailableStartDate,
                AvailableEndDate = x.AvailableEndDate,
                PreSellEndDate = x.PreSellEndDate,
                QuantityPerMasterPack = x.QuantityPerMasterPack,
                QuantityMasterPackPerLayer = x.QuantityMasterPackPerLayer,
                QuantityMasterPackLayersPerPallet = x.QuantityMasterPackLayersPerPallet,
                QuantityMasterPackPerPallet = x.QuantityMasterPackPerPallet,
                QuantityPerLayer = x.QuantityPerLayer,
                QuantityLayersPerPallet = x.QuantityLayersPerPallet,
                QuantityPerPallet = x.QuantityPerPallet,
                KitBaseQuantityPriceMultiplier = x.KitBaseQuantityPriceMultiplier,
                ShippingLeadTimeDays = x.ShippingLeadTimeDays,
                MinimumPurchaseQuantity = x.MinimumPurchaseQuantity,
                MinimumPurchaseQuantityIfPastPurchased = x.MinimumPurchaseQuantityIfPastPurchased,
                MaximumPurchaseQuantity = x.MaximumPurchaseQuantity,
                MaximumPurchaseQuantityIfPastPurchased = x.MaximumPurchaseQuantityIfPastPurchased,
                MaximumBackOrderPurchaseQuantity = x.MaximumBackOrderPurchaseQuantity,
                MaximumBackOrderPurchaseQuantityIfPastPurchased = x.MaximumBackOrderPurchaseQuantityIfPastPurchased,
                MaximumBackOrderPurchaseQuantityGlobal = x.MaximumBackOrderPurchaseQuantityGlobal,
                MaximumPrePurchaseQuantity = x.MaximumPrePurchaseQuantity,
                MaximumPrePurchaseQuantityIfPastPurchased = x.MaximumPrePurchaseQuantityIfPastPurchased,
                MaximumPrePurchaseQuantityGlobal = x.MaximumPrePurchaseQuantityGlobal,
                DocumentRequiredForPurchase = x.DocumentRequiredForPurchase,
                DocumentRequiredForPurchaseOverrideFee = x.DocumentRequiredForPurchaseOverrideFee,
                DocumentRequiredForPurchaseOverrideFeeIsPercent = x.DocumentRequiredForPurchaseOverrideFeeIsPercent,
                MustPurchaseInMultiplesOfAmount = x.MustPurchaseInMultiplesOfAmount,
                MustPurchaseInMultiplesOfAmountOverrideFee = x.MustPurchaseInMultiplesOfAmountOverrideFee,
                MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent = x.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent,
                TotalPurchasedAmount = x.TotalPurchasedAmount,
                TotalPurchasedAmountCurrencyID = x.TotalPurchasedAmountCurrencyID,
                TotalPurchasedAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.TotalPurchasedAmountCurrency!), // For Flattening Properties (List)
                TotalPurchasedQuantity = x.TotalPurchasedQuantity,
                PackageID = x.PackageID,
                Package = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.Package!), // For Flattening Properties (List)
                MasterPackID = x.MasterPackID,
                MasterPack = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.MasterPack!), // For Flattening Properties (List)
                PalletID = x.PalletID,
                Pallet = ModelMapperForPackage.PreBuiltPackageSQLSelectorList.Expand().Compile().Invoke(x.Pallet!), // For Flattening Properties (List)
                RestockingFeeAmountCurrencyID = x.RestockingFeeAmountCurrencyID,
                RestockingFeeAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.RestockingFeeAmountCurrency!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IProductModel> SelectFullProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IProductModel> SelectLiteProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IProductModel> SelectListProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityList(x, contextProfileName))!;
        }

        public static IProductModel? SelectFirstFullProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductModel? SelectFirstListProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductModel? SelectSingleFullProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductModel? SelectSingleLiteProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductModel? SelectSingleListProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IProductModel> results, int totalPages, int totalCount) SelectFullProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateProductModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductModel> results, int totalPages, int totalCount) SelectLiteProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateProductModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductModel> results, int totalPages, int totalCount) SelectListProductAndMapToProductModel(
            this IQueryable<Product> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateProductModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IProductModel? CreateProductModelFromEntityFull(this IProduct? entity, string? contextProfileName)
        {
            return CreateProductModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IProductModel? CreateProductModelFromEntityLite(this IProduct? entity, string? contextProfileName)
        {
            return CreateProductModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IProductModel? CreateProductModelFromEntityList(this IProduct? entity, string? contextProfileName)
        {
            return CreateProductModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IProductModel? CreateProductModelFromEntity(
            this IProduct? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IProductModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveRequiresRolesBase Properties
                    model.RequiresRoles = entity.RequiresRoles;
                    model.RequiresRolesAlt = entity.RequiresRolesAlt;
                    // Product's Properties
                    // Product's Related Objects
                    model.RestockingFeeAmountCurrency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.RestockingFeeAmountCurrency, contextProfileName);
                    // Product's Associated Objects
                    model.Brands = (entity is AnonProduct ? ((AnonProduct)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandProduct.CreateBrandProductModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Categories = (entity is AnonProduct ? ((AnonProduct)entity).Categories : entity.Categories)?.Where(x => x.Active).Select(x => ModelMapperForProductCategory.CreateProductCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonProduct ? ((AnonProduct)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForProductImage.CreateProductImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ProductAssociations = (entity is AnonProduct ? ((AnonProduct)entity).ProductAssociations : entity.ProductAssociations)?.Where(x => x.Active).Select(x => ModelMapperForProductAssociation.CreateProductAssociationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ProductNotifications = (entity is AnonProduct ? ((AnonProduct)entity).ProductNotifications : entity.ProductNotifications)?.Where(x => x.Active).Select(x => ModelMapperForProductNotification.CreateProductNotificationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ProductRestrictions = (entity is AnonProduct ? ((AnonProduct)entity).ProductRestrictions : entity.ProductRestrictions)?.Where(x => x.Active).Select(x => ModelMapperForProductRestriction.CreateProductRestrictionModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ProductsAssociatedWith = (entity is AnonProduct ? ((AnonProduct)entity).ProductsAssociatedWith : entity.ProductsAssociatedWith)?.Where(x => x.Active).Select(x => ModelMapperForProductAssociation.CreateProductAssociationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.ProductShipCarrierMethods = (entity is AnonProduct ? ((AnonProduct)entity).ProductShipCarrierMethods : entity.ProductShipCarrierMethods)?.Where(x => x.Active).Select(x => ModelMapperForProductShipCarrierMethod.CreateProductShipCarrierMethodModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonProduct ? ((AnonProduct)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForProductFile.CreateProductFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateProductModelFromEntityHooksFull != null) { model = CreateProductModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Product's Properties
                    model.DocumentRequiredForPurchaseExpiredWarningMessage = entity.DocumentRequiredForPurchaseExpiredWarningMessage;
                    model.DocumentRequiredForPurchaseMissingWarningMessage = entity.DocumentRequiredForPurchaseMissingWarningMessage;
                    model.DocumentRequiredForPurchaseOverrideFeeAcceptedMessage = entity.DocumentRequiredForPurchaseOverrideFeeAcceptedMessage;
                    model.DocumentRequiredForPurchaseOverrideFeeWarningMessage = entity.DocumentRequiredForPurchaseOverrideFeeWarningMessage;
                    model.MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage = entity.MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage;
                    model.MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage = entity.MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage;
                    model.MustPurchaseInMultiplesOfAmountWarningMessage = entity.MustPurchaseInMultiplesOfAmountWarningMessage;
                    model.SeoDescription = entity.SeoDescription;
                    model.SeoKeywords = entity.SeoKeywords;
                    model.SeoMetaData = entity.SeoMetaData;
                    model.SeoPageTitle = entity.SeoPageTitle;
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForProductType.CreateProductTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForProductStatus.CreateProductStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Product's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterPack = ModelMapperForPackage.CreatePackageModelFromEntityLite(entity.MasterPack, contextProfileName);
                    model.Package = ModelMapperForPackage.CreatePackageModelFromEntityLite(entity.Package, contextProfileName);
                    model.Pallet = ModelMapperForPackage.CreatePackageModelFromEntityLite(entity.Pallet, contextProfileName);
                    model.TotalPurchasedAmountCurrency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.TotalPurchasedAmountCurrency, contextProfileName);
                    // Product's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductModelFromEntityHooksLite != null) { model = CreateProductModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Product's Properties
                    model.AllowBackOrder = entity.AllowBackOrder;
                    model.AllowPreSale = entity.AllowPreSale;
                    model.AvailableEndDate = entity.AvailableEndDate;
                    model.AvailableStartDate = entity.AvailableStartDate;
                    model.BrandName = entity.BrandName;
                    model.Depth = entity.Depth;
                    model.DepthUnitOfMeasure = entity.DepthUnitOfMeasure;
                    model.DocumentRequiredForPurchase = entity.DocumentRequiredForPurchase;
                    model.DocumentRequiredForPurchaseOverrideFee = entity.DocumentRequiredForPurchaseOverrideFee;
                    model.DocumentRequiredForPurchaseOverrideFeeIsPercent = entity.DocumentRequiredForPurchaseOverrideFeeIsPercent;
                    model.DropShipOnly = entity.DropShipOnly;
                    model.FlatShippingCharge = entity.FlatShippingCharge;
                    model.HandlingCharge = entity.HandlingCharge;
                    model.HCPCCode = entity.HCPCCode;
                    model.Height = entity.Height;
                    model.HeightUnitOfMeasure = entity.HeightUnitOfMeasure;
                    model.IndexSynonyms = entity.IndexSynonyms;
                    model.IsDiscontinued = entity.IsDiscontinued;
                    model.IsEligibleForReturn = entity.IsEligibleForReturn;
                    model.IsFreeShipping = entity.IsFreeShipping;
                    model.IsTaxable = entity.IsTaxable;
                    model.IsUnlimitedStock = entity.IsUnlimitedStock;
                    model.IsVisible = entity.IsVisible;
                    model.KitBaseQuantityPriceMultiplier = entity.KitBaseQuantityPriceMultiplier;
                    model.ManufacturerPartNumber = entity.ManufacturerPartNumber;
                    model.MaximumBackOrderPurchaseQuantity = entity.MaximumBackOrderPurchaseQuantity;
                    model.MaximumBackOrderPurchaseQuantityGlobal = entity.MaximumBackOrderPurchaseQuantityGlobal;
                    model.MaximumBackOrderPurchaseQuantityIfPastPurchased = entity.MaximumBackOrderPurchaseQuantityIfPastPurchased;
                    model.MaximumPrePurchaseQuantity = entity.MaximumPrePurchaseQuantity;
                    model.MaximumPrePurchaseQuantityGlobal = entity.MaximumPrePurchaseQuantityGlobal;
                    model.MaximumPrePurchaseQuantityIfPastPurchased = entity.MaximumPrePurchaseQuantityIfPastPurchased;
                    model.MaximumPurchaseQuantity = entity.MaximumPurchaseQuantity;
                    model.MaximumPurchaseQuantityIfPastPurchased = entity.MaximumPurchaseQuantityIfPastPurchased;
                    model.MinimumPurchaseQuantity = entity.MinimumPurchaseQuantity;
                    model.MinimumPurchaseQuantityIfPastPurchased = entity.MinimumPurchaseQuantityIfPastPurchased;
                    model.MustPurchaseInMultiplesOfAmount = entity.MustPurchaseInMultiplesOfAmount;
                    model.MustPurchaseInMultiplesOfAmountOverrideFee = entity.MustPurchaseInMultiplesOfAmountOverrideFee;
                    model.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent = entity.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent;
                    model.NothingToShip = entity.NothingToShip;
                    model.PreSellEndDate = entity.PreSellEndDate;
                    model.QuantityLayersPerPallet = entity.QuantityLayersPerPallet;
                    model.QuantityMasterPackLayersPerPallet = entity.QuantityMasterPackLayersPerPallet;
                    model.QuantityMasterPackPerLayer = entity.QuantityMasterPackPerLayer;
                    model.QuantityMasterPackPerPallet = entity.QuantityMasterPackPerPallet;
                    model.QuantityPerLayer = entity.QuantityPerLayer;
                    model.QuantityPerMasterPack = entity.QuantityPerMasterPack;
                    model.QuantityPerPallet = entity.QuantityPerPallet;
                    model.RestockingFeeAmount = entity.RestockingFeeAmount;
                    model.RestockingFeePercent = entity.RestockingFeePercent;
                    model.SeoUrl = entity.SeoUrl;
                    model.ShippingLeadTimeDays = entity.ShippingLeadTimeDays;
                    model.ShippingLeadTimeIsCalendarDays = entity.ShippingLeadTimeIsCalendarDays;
                    model.ShortDescription = entity.ShortDescription;
                    model.SortOrder = entity.SortOrder;
                    model.TaxCode = entity.TaxCode;
                    model.TotalPurchasedAmount = entity.TotalPurchasedAmount;
                    model.TotalPurchasedQuantity = entity.TotalPurchasedQuantity;
                    model.UnitOfMeasure = entity.UnitOfMeasure;
                    model.Weight = entity.Weight;
                    model.WeightUnitOfMeasure = entity.WeightUnitOfMeasure;
                    model.Width = entity.Width;
                    model.WidthUnitOfMeasure = entity.WidthUnitOfMeasure;
                    // Product's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterPackID = entity.MasterPackID;
                    model.MasterPackKey = entity.MasterPack?.CustomKey;
                    model.MasterPackName = entity.MasterPack?.Name;
                    model.PackageID = entity.PackageID;
                    model.PackageKey = entity.Package?.CustomKey;
                    model.PackageName = entity.Package?.Name;
                    model.PalletID = entity.PalletID;
                    model.PalletKey = entity.Pallet?.CustomKey;
                    model.PalletName = entity.Pallet?.Name;
                    model.RestockingFeeAmountCurrencyID = entity.RestockingFeeAmountCurrencyID;
                    model.RestockingFeeAmountCurrencyKey = entity.RestockingFeeAmountCurrency?.CustomKey;
                    model.RestockingFeeAmountCurrencyName = entity.RestockingFeeAmountCurrency?.Name;
                    model.TotalPurchasedAmountCurrencyID = entity.TotalPurchasedAmountCurrencyID;
                    model.TotalPurchasedAmountCurrencyKey = entity.TotalPurchasedAmountCurrency?.CustomKey;
                    model.TotalPurchasedAmountCurrencyName = entity.TotalPurchasedAmountCurrency?.Name;
                    // Product's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductModelFromEntityHooksList != null) { model = CreateProductModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
