// <autogenerated>
// <copyright file="Mapping.Products.ProductShipCarrierMethod.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForProductShipCarrierMethod
    {
        public sealed class AnonProductShipCarrierMethod : ProductShipCarrierMethod
        {
            // public new Product? Master { get; set; }
        }

        public static readonly Func<ProductShipCarrierMethod?, string?, IProductShipCarrierMethodModel?> MapProductShipCarrierMethodModelFromEntityFull = CreateProductShipCarrierMethodModelFromEntityFull;

        public static readonly Func<ProductShipCarrierMethod?, string?, IProductShipCarrierMethodModel?> MapProductShipCarrierMethodModelFromEntityLite = CreateProductShipCarrierMethodModelFromEntityLite;

        public static readonly Func<ProductShipCarrierMethod?, string?, IProductShipCarrierMethodModel?> MapProductShipCarrierMethodModelFromEntityList = CreateProductShipCarrierMethodModelFromEntityList;

        public static Func<IProductShipCarrierMethod, IProductShipCarrierMethodModel, string?, IProductShipCarrierMethodModel>? CreateProductShipCarrierMethodModelFromEntityHooksFull { get; set; }

        public static Func<IProductShipCarrierMethod, IProductShipCarrierMethodModel, string?, IProductShipCarrierMethodModel>? CreateProductShipCarrierMethodModelFromEntityHooksLite { get; set; }

        public static Func<IProductShipCarrierMethod, IProductShipCarrierMethodModel, string?, IProductShipCarrierMethodModel>? CreateProductShipCarrierMethodModelFromEntityHooksList { get; set; }

        public static Expression<Func<ProductShipCarrierMethod, AnonProductShipCarrierMethod>>? PreBuiltProductShipCarrierMethodSQLSelectorFull { get; set; }

        public static Expression<Func<ProductShipCarrierMethod, AnonProductShipCarrierMethod>>? PreBuiltProductShipCarrierMethodSQLSelectorLite { get; set; }

        public static Expression<Func<ProductShipCarrierMethod, AnonProductShipCarrierMethod>>? PreBuiltProductShipCarrierMethodSQLSelectorList { get; set; }

        /// <summary>An <see cref="IProductShipCarrierMethodModel"/> extension method that creates a(n) <see cref="ProductShipCarrierMethod"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ProductShipCarrierMethod"/> entity.</returns>
        public static IProductShipCarrierMethod CreateProductShipCarrierMethodEntity(
            this IProductShipCarrierMethodModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IProductShipCarrierMethodModel, ProductShipCarrierMethod>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateProductShipCarrierMethodFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IProductShipCarrierMethodModel"/> extension method that updates a(n) <see cref="ProductShipCarrierMethod"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ProductShipCarrierMethod"/> entity.</returns>
        public static IProductShipCarrierMethod UpdateProductShipCarrierMethodFromModel(
            this IProductShipCarrierMethod entity,
            IProductShipCarrierMethodModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ProductShipCarrierMethod Properties
            entity.From = model.From;
            entity.MaxQuantity = model.MaxQuantity;
            entity.MinQuantity = model.MinQuantity;
            entity.Price = model.Price;
            entity.To = model.To;
            entity.UnitOfMeasure = model.UnitOfMeasure;
            // ProductShipCarrierMethod's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenProductShipCarrierMethodSQLSelectorFull()
        {
            PreBuiltProductShipCarrierMethodSQLSelectorFull = x => x == null ? null! : new AnonProductShipCarrierMethod
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                From = x.From,
                To = x.To,
                UnitOfMeasure = x.UnitOfMeasure,
                Price = x.Price,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductShipCarrierMethodSQLSelectorLite()
        {
            PreBuiltProductShipCarrierMethodSQLSelectorLite = x => x == null ? null! : new AnonProductShipCarrierMethod
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                From = x.From,
                To = x.To,
                UnitOfMeasure = x.UnitOfMeasure,
                Price = x.Price,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductShipCarrierMethodSQLSelectorList()
        {
            PreBuiltProductShipCarrierMethodSQLSelectorList = x => x == null ? null! : new AnonProductShipCarrierMethod
            {
                MasterID = x.MasterID,
                Master = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForShipCarrierMethod.PreBuiltShipCarrierMethodSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                MinQuantity = x.MinQuantity,
                MaxQuantity = x.MaxQuantity,
                From = x.From,
                To = x.To,
                UnitOfMeasure = x.UnitOfMeasure,
                Price = x.Price,
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IProductShipCarrierMethodModel> SelectFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IProductShipCarrierMethodModel> SelectLiteProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IProductShipCarrierMethodModel> SelectListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityList(x, contextProfileName))!;
        }

        public static IProductShipCarrierMethodModel? SelectFirstFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductShipCarrierMethodModel? SelectFirstListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductShipCarrierMethodModel? SelectSingleFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductShipCarrierMethodModel? SelectSingleLiteProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductShipCarrierMethodModel? SelectSingleListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductShipCarrierMethodSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductShipCarrierMethodModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IProductShipCarrierMethodModel> results, int totalPages, int totalCount) SelectFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductShipCarrierMethodSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateProductShipCarrierMethodModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductShipCarrierMethodModel> results, int totalPages, int totalCount) SelectLiteProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductShipCarrierMethodSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateProductShipCarrierMethodModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductShipCarrierMethodModel> results, int totalPages, int totalCount) SelectListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(
            this IQueryable<ProductShipCarrierMethod> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductShipCarrierMethodSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductShipCarrierMethodSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateProductShipCarrierMethodModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IProductShipCarrierMethodModel? CreateProductShipCarrierMethodModelFromEntityFull(this IProductShipCarrierMethod? entity, string? contextProfileName)
        {
            return CreateProductShipCarrierMethodModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IProductShipCarrierMethodModel? CreateProductShipCarrierMethodModelFromEntityLite(this IProductShipCarrierMethod? entity, string? contextProfileName)
        {
            return CreateProductShipCarrierMethodModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IProductShipCarrierMethodModel? CreateProductShipCarrierMethodModelFromEntityList(this IProductShipCarrierMethod? entity, string? contextProfileName)
        {
            return CreateProductShipCarrierMethodModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IProductShipCarrierMethodModel? CreateProductShipCarrierMethodModelFromEntity(
            this IProductShipCarrierMethod? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IProductShipCarrierMethodModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductShipCarrierMethod's Properties
                    // ProductShipCarrierMethod's Related Objects
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    // ProductShipCarrierMethod's Associated Objects
                    // Additional Mappings
                    if (CreateProductShipCarrierMethodModelFromEntityHooksFull != null) { model = CreateProductShipCarrierMethodModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductShipCarrierMethod's Properties
                    // ProductShipCarrierMethod's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Currency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.Currency, contextProfileName);
                    model.Slave = ModelMapperForShipCarrierMethod.CreateShipCarrierMethodModelFromEntityLite(entity.Slave, contextProfileName);
                    // ProductShipCarrierMethod's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductShipCarrierMethodModelFromEntityHooksLite != null) { model = CreateProductShipCarrierMethodModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ProductShipCarrierMethod's Properties
                    model.From = entity.From;
                    model.MaxQuantity = entity.MaxQuantity;
                    model.MinQuantity = entity.MinQuantity;
                    model.Price = entity.Price;
                    model.To = entity.To;
                    model.UnitOfMeasure = entity.UnitOfMeasure;
                    // ProductShipCarrierMethod's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.CurrencyID = entity.CurrencyID;
                    model.CurrencyKey = entity.Currency?.CustomKey;
                    model.CurrencyName = entity.Currency?.Name;
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    // ProductShipCarrierMethod's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductShipCarrierMethodModelFromEntityHooksList != null) { model = CreateProductShipCarrierMethodModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
