// <autogenerated>
// <copyright file="Mapping.Products.FutureImport.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForFutureImport
    {
        public sealed class AnonFutureImport : FutureImport
        {
        }

        public static readonly Func<FutureImport?, string?, IFutureImportModel?> MapFutureImportModelFromEntityFull = CreateFutureImportModelFromEntityFull;

        public static readonly Func<FutureImport?, string?, IFutureImportModel?> MapFutureImportModelFromEntityLite = CreateFutureImportModelFromEntityLite;

        public static readonly Func<FutureImport?, string?, IFutureImportModel?> MapFutureImportModelFromEntityList = CreateFutureImportModelFromEntityList;

        public static Func<IFutureImport, IFutureImportModel, string?, IFutureImportModel>? CreateFutureImportModelFromEntityHooksFull { get; set; }

        public static Func<IFutureImport, IFutureImportModel, string?, IFutureImportModel>? CreateFutureImportModelFromEntityHooksLite { get; set; }

        public static Func<IFutureImport, IFutureImportModel, string?, IFutureImportModel>? CreateFutureImportModelFromEntityHooksList { get; set; }

        public static Expression<Func<FutureImport, AnonFutureImport>>? PreBuiltFutureImportSQLSelectorFull { get; set; }

        public static Expression<Func<FutureImport, AnonFutureImport>>? PreBuiltFutureImportSQLSelectorLite { get; set; }

        public static Expression<Func<FutureImport, AnonFutureImport>>? PreBuiltFutureImportSQLSelectorList { get; set; }

        /// <summary>An <see cref="IFutureImportModel"/> extension method that creates a(n) <see cref="FutureImport"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="FutureImport"/> entity.</returns>
        public static IFutureImport CreateFutureImportEntity(
            this IFutureImportModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IFutureImportModel, FutureImport>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateFutureImportFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IFutureImportModel"/> extension method that updates a(n) <see cref="FutureImport"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="FutureImport"/> entity.</returns>
        public static IFutureImport UpdateFutureImportFromModel(
            this IFutureImport entity,
            IFutureImportModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // FutureImport Properties
            entity.Attempts = model.Attempts;
            entity.FileName = model.FileName;
            entity.HasError = model.HasError;
            entity.RunImportAt = model.RunImportAt;
            // FutureImport's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenFutureImportSQLSelectorFull()
        {
            PreBuiltFutureImportSQLSelectorFull = x => x == null ? null! : new AnonFutureImport
            {
                StatusID = x.StatusID,
                Status = ModelMapperForFutureImportStatus.PreBuiltFutureImportStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!),
                FileName = x.FileName,
                RunImportAt = x.RunImportAt,
                Attempts = x.Attempts,
                HasError = x.HasError,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenFutureImportSQLSelectorLite()
        {
            PreBuiltFutureImportSQLSelectorLite = x => x == null ? null! : new AnonFutureImport
            {
                StatusID = x.StatusID,
                Status = ModelMapperForFutureImportStatus.PreBuiltFutureImportStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!),
                FileName = x.FileName,
                RunImportAt = x.RunImportAt,
                Attempts = x.Attempts,
                HasError = x.HasError,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenFutureImportSQLSelectorList()
        {
            PreBuiltFutureImportSQLSelectorList = x => x == null ? null! : new AnonFutureImport
            {
                StatusID = x.StatusID,
                Status = ModelMapperForFutureImportStatus.PreBuiltFutureImportStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!), // For Flattening Properties (List)
                FileName = x.FileName,
                RunImportAt = x.RunImportAt,
                Attempts = x.Attempts,
                HasError = x.HasError,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IFutureImportModel> SelectFullFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFutureImportSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IFutureImportModel> SelectLiteFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFutureImportSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IFutureImportModel> SelectListFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFutureImportSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityList(x, contextProfileName))!;
        }

        public static IFutureImportModel? SelectFirstFullFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFutureImportSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IFutureImportModel? SelectFirstListFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFutureImportSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IFutureImportModel? SelectSingleFullFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFutureImportSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IFutureImportModel? SelectSingleLiteFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFutureImportSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IFutureImportModel? SelectSingleListFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFutureImportSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFutureImportModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IFutureImportModel> results, int totalPages, int totalCount) SelectFullFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFutureImportSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateFutureImportModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IFutureImportModel> results, int totalPages, int totalCount) SelectLiteFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFutureImportSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateFutureImportModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IFutureImportModel> results, int totalPages, int totalCount) SelectListFutureImportAndMapToFutureImportModel(
            this IQueryable<FutureImport> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFutureImportSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFutureImportSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateFutureImportModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IFutureImportModel? CreateFutureImportModelFromEntityFull(this IFutureImport? entity, string? contextProfileName)
        {
            return CreateFutureImportModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IFutureImportModel? CreateFutureImportModelFromEntityLite(this IFutureImport? entity, string? contextProfileName)
        {
            return CreateFutureImportModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IFutureImportModel? CreateFutureImportModelFromEntityList(this IFutureImport? entity, string? contextProfileName)
        {
            return CreateFutureImportModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IFutureImportModel? CreateFutureImportModelFromEntity(
            this IFutureImport? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IFutureImportModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // FutureImport's Properties
                    // FutureImport's Related Objects
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    model.Vendor = ModelMapperForVendor.CreateVendorModelFromEntityLite(entity.Vendor, contextProfileName);
                    // FutureImport's Associated Objects
                    // Additional Mappings
                    if (CreateFutureImportModelFromEntityHooksFull != null) { model = CreateFutureImportModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // FutureImport's Properties
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForFutureImportStatus.CreateFutureImportStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // FutureImport's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // FutureImport's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateFutureImportModelFromEntityHooksLite != null) { model = CreateFutureImportModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // FutureImport's Properties
                    model.Attempts = entity.Attempts;
                    model.FileName = entity.FileName;
                    model.HasError = entity.HasError;
                    model.RunImportAt = entity.RunImportAt;
                    // FutureImport's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    model.VendorID = entity.VendorID;
                    model.VendorKey = entity.Vendor?.CustomKey;
                    model.VendorName = entity.Vendor?.Name;
                    // FutureImport's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateFutureImportModelFromEntityHooksList != null) { model = CreateFutureImportModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
