// <autogenerated>
// <copyright file="Mapping.Products.ProductDownload.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForProductDownload
    {
        public sealed class AnonProductDownload : ProductDownload
        {
        }

        public static readonly Func<ProductDownload?, string?, IProductDownloadModel?> MapProductDownloadModelFromEntityFull = CreateProductDownloadModelFromEntityFull;

        public static readonly Func<ProductDownload?, string?, IProductDownloadModel?> MapProductDownloadModelFromEntityLite = CreateProductDownloadModelFromEntityLite;

        public static readonly Func<ProductDownload?, string?, IProductDownloadModel?> MapProductDownloadModelFromEntityList = CreateProductDownloadModelFromEntityList;

        public static Func<IProductDownload, IProductDownloadModel, string?, IProductDownloadModel>? CreateProductDownloadModelFromEntityHooksFull { get; set; }

        public static Func<IProductDownload, IProductDownloadModel, string?, IProductDownloadModel>? CreateProductDownloadModelFromEntityHooksLite { get; set; }

        public static Func<IProductDownload, IProductDownloadModel, string?, IProductDownloadModel>? CreateProductDownloadModelFromEntityHooksList { get; set; }

        public static Expression<Func<ProductDownload, AnonProductDownload>>? PreBuiltProductDownloadSQLSelectorFull { get; set; }

        public static Expression<Func<ProductDownload, AnonProductDownload>>? PreBuiltProductDownloadSQLSelectorLite { get; set; }

        public static Expression<Func<ProductDownload, AnonProductDownload>>? PreBuiltProductDownloadSQLSelectorList { get; set; }

        /// <summary>An <see cref="IProductDownloadModel"/> extension method that creates a(n) <see cref="ProductDownload"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ProductDownload"/> entity.</returns>
        public static IProductDownload CreateProductDownloadEntity(
            this IProductDownloadModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IProductDownloadModel, ProductDownload>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateProductDownloadFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IProductDownloadModel"/> extension method that updates a(n) <see cref="ProductDownload"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ProductDownload"/> entity.</returns>
        public static IProductDownload UpdateProductDownloadFromModel(
            this IProductDownload entity,
            IProductDownloadModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ProductDownload Properties
            entity.AbsoluteUrl = model.AbsoluteUrl;
            entity.IsAbsoluteUrl = model.IsAbsoluteUrl;
            entity.RelativeUrl = model.RelativeUrl;
            // ProductDownload's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenProductDownloadSQLSelectorFull()
        {
            PreBuiltProductDownloadSQLSelectorFull = x => x == null ? null! : new AnonProductDownload
            {
                TypeID = x.TypeID,
                Type = ModelMapperForProductDownloadType.PreBuiltProductDownloadTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                IsAbsoluteUrl = x.IsAbsoluteUrl,
                AbsoluteUrl = x.AbsoluteUrl,
                RelativeUrl = x.RelativeUrl,
                ProductID = x.ProductID,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductDownloadSQLSelectorLite()
        {
            PreBuiltProductDownloadSQLSelectorLite = x => x == null ? null! : new AnonProductDownload
            {
                TypeID = x.TypeID,
                Type = ModelMapperForProductDownloadType.PreBuiltProductDownloadTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                IsAbsoluteUrl = x.IsAbsoluteUrl,
                AbsoluteUrl = x.AbsoluteUrl,
                RelativeUrl = x.RelativeUrl,
                ProductID = x.ProductID,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenProductDownloadSQLSelectorList()
        {
            PreBuiltProductDownloadSQLSelectorList = x => x == null ? null! : new AnonProductDownload
            {
                TypeID = x.TypeID,
                Type = ModelMapperForProductDownloadType.PreBuiltProductDownloadTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                IsAbsoluteUrl = x.IsAbsoluteUrl,
                AbsoluteUrl = x.AbsoluteUrl,
                RelativeUrl = x.RelativeUrl,
                ProductID = x.ProductID,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IProductDownloadModel> SelectFullProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductDownloadSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IProductDownloadModel> SelectLiteProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductDownloadSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IProductDownloadModel> SelectListProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltProductDownloadSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityList(x, contextProfileName))!;
        }

        public static IProductDownloadModel? SelectFirstFullProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductDownloadSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductDownloadModel? SelectFirstListProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductDownloadSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IProductDownloadModel? SelectSingleFullProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductDownloadSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductDownloadModel? SelectSingleLiteProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductDownloadSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IProductDownloadModel? SelectSingleListProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltProductDownloadSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateProductDownloadModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IProductDownloadModel> results, int totalPages, int totalCount) SelectFullProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductDownloadSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateProductDownloadModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductDownloadModel> results, int totalPages, int totalCount) SelectLiteProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductDownloadSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateProductDownloadModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IProductDownloadModel> results, int totalPages, int totalCount) SelectListProductDownloadAndMapToProductDownloadModel(
            this IQueryable<ProductDownload> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltProductDownloadSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltProductDownloadSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateProductDownloadModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IProductDownloadModel? CreateProductDownloadModelFromEntityFull(this IProductDownload? entity, string? contextProfileName)
        {
            return CreateProductDownloadModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IProductDownloadModel? CreateProductDownloadModelFromEntityLite(this IProductDownload? entity, string? contextProfileName)
        {
            return CreateProductDownloadModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IProductDownloadModel? CreateProductDownloadModelFromEntityList(this IProductDownload? entity, string? contextProfileName)
        {
            return CreateProductDownloadModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IProductDownloadModel? CreateProductDownloadModelFromEntity(
            this IProductDownload? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IProductDownloadModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductDownload's Properties
                    // ProductDownload's Related Objects
                    // ProductDownload's Associated Objects
                    // Additional Mappings
                    if (CreateProductDownloadModelFromEntityHooksFull != null) { model = CreateProductDownloadModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ProductDownload's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForProductDownloadType.CreateProductDownloadTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // ProductDownload's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ProductDownload's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductDownloadModelFromEntityHooksLite != null) { model = CreateProductDownloadModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ProductDownload's Properties
                    model.AbsoluteUrl = entity.AbsoluteUrl;
                    model.IsAbsoluteUrl = entity.IsAbsoluteUrl;
                    model.RelativeUrl = entity.RelativeUrl;
                    // ProductDownload's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ProductDownload's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateProductDownloadModelFromEntityHooksList != null) { model = CreateProductDownloadModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
