// <autogenerated>
// <copyright file="Mapping.Categories.Category.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Categories section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCategory
    {
        public sealed class AnonCategory : Category
        {
            public bool HasChildren { get; set; }
            public new IEnumerable<BrandCategory>? Brands { get; set; }
            public new IEnumerable<Category>? Children { get; set; }
            public new IEnumerable<CategoryFile>? StoredFiles { get; set; }
            public new IEnumerable<CategoryImage>? Images { get; set; }
            public new IEnumerable<ProductCategory>? Products { get; set; }
            public new IEnumerable<Review>? Reviews { get; set; }
        }

        public static readonly Func<Category?, string?, ICategoryModel?> MapCategoryModelFromEntityFull = CreateCategoryModelFromEntityFull;

        public static readonly Func<Category?, string?, ICategoryModel?> MapCategoryModelFromEntityLite = CreateCategoryModelFromEntityLite;

        public static readonly Func<Category?, string?, ICategoryModel?> MapCategoryModelFromEntityList = CreateCategoryModelFromEntityList;

        public static Func<ICategory, ICategoryModel, string?, ICategoryModel>? CreateCategoryModelFromEntityHooksFull { get; set; }

        public static Func<ICategory, ICategoryModel, string?, ICategoryModel>? CreateCategoryModelFromEntityHooksLite { get; set; }

        public static Func<ICategory, ICategoryModel, string?, ICategoryModel>? CreateCategoryModelFromEntityHooksList { get; set; }

        public static Expression<Func<Category, AnonCategory>>? PreBuiltCategorySQLSelectorFull { get; set; }

        public static Expression<Func<Category, AnonCategory>>? PreBuiltCategorySQLSelectorLite { get; set; }

        public static Expression<Func<Category, AnonCategory>>? PreBuiltCategorySQLSelectorList { get; set; }

        /// <summary>An <see cref="ICategoryModel"/> extension method that creates a(n) <see cref="Category"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Category"/> entity.</returns>
        public static ICategory CreateCategoryEntity(
            this ICategoryModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ICategoryModel, Category>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCategoryFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICategoryModel"/> extension method that updates a(n) <see cref="Category"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Category"/> entity.</returns>
        public static ICategory UpdateCategoryFromModel(
            this ICategory entity,
            ICategoryModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // IHaveRequiresRolesBase Properties
            entity.RequiresRoles = model.RequiresRoles;
            entity.RequiresRolesAlt = model.RequiresRolesAlt;
            // Category Properties
            entity.DisplayName = model.DisplayName;
            entity.FooterContent = model.FooterContent;
            entity.HandlingCharge = model.HandlingCharge;
            entity.HeaderContent = model.HeaderContent;
            entity.IncludeInMenu = model.IncludeInMenu;
            entity.IsVisible = model.IsVisible;
            entity.MinimumForFreeShippingDollarAmount = model.MinimumForFreeShippingDollarAmount;
            entity.MinimumForFreeShippingDollarAmountAfter = model.MinimumForFreeShippingDollarAmountAfter;
            entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingDollarAmountWarningMessage = model.MinimumForFreeShippingDollarAmountWarningMessage;
            entity.MinimumForFreeShippingQuantityAmount = model.MinimumForFreeShippingQuantityAmount;
            entity.MinimumForFreeShippingQuantityAmountAfter = model.MinimumForFreeShippingQuantityAmountAfter;
            entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingQuantityAmountWarningMessage = model.MinimumForFreeShippingQuantityAmountWarningMessage;
            entity.MinimumOrderDollarAmount = model.MinimumOrderDollarAmount;
            entity.MinimumOrderDollarAmountAfter = model.MinimumOrderDollarAmountAfter;
            entity.MinimumOrderDollarAmountOverrideFee = model.MinimumOrderDollarAmountOverrideFee;
            entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderDollarAmountOverrideFeeIsPercent = model.MinimumOrderDollarAmountOverrideFeeIsPercent;
            entity.MinimumOrderDollarAmountOverrideFeeWarningMessage = model.MinimumOrderDollarAmountOverrideFeeWarningMessage;
            entity.MinimumOrderDollarAmountWarningMessage = model.MinimumOrderDollarAmountWarningMessage;
            entity.MinimumOrderQuantityAmount = model.MinimumOrderQuantityAmount;
            entity.MinimumOrderQuantityAmountAfter = model.MinimumOrderQuantityAmountAfter;
            entity.MinimumOrderQuantityAmountOverrideFee = model.MinimumOrderQuantityAmountOverrideFee;
            entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderQuantityAmountOverrideFeeIsPercent = model.MinimumOrderQuantityAmountOverrideFeeIsPercent;
            entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage = model.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
            entity.MinimumOrderQuantityAmountWarningMessage = model.MinimumOrderQuantityAmountWarningMessage;
            entity.RestockingFeeAmount = model.RestockingFeeAmount;
            entity.RestockingFeePercent = model.RestockingFeePercent;
            entity.SeoDescription = model.SeoDescription;
            entity.SeoKeywords = model.SeoKeywords;
            entity.SeoMetaData = model.SeoMetaData;
            entity.SeoPageTitle = model.SeoPageTitle;
            entity.SeoUrl = model.SeoUrl;
            entity.SidebarContent = model.SidebarContent;
            entity.SortOrder = model.SortOrder;
            // Category's Related Objects
            // Category's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCategorySQLSelectorFull()
        {
            PreBuiltCategorySQLSelectorFull = x => x == null ? null! : new AnonCategory
            {
                HasChildren = x.Children!.Any(y => y.Active),
                ParentID = x.ParentID,
                Parent = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.Parent!),
                Children = x.Children!.Where(y => y.Active).Select(ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile()).ToList(),
                SeoKeywords = x.SeoKeywords,
                SeoUrl = x.SeoUrl,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                TypeID = x.TypeID,
                Type = ModelMapperForCategoryType.PreBuiltCategoryTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandCategory.PreBuiltBrandCategorySQLSelectorList.Expand().Compile()).ToList(),
                Products = x.Products!.Where(y => y.Active).Select(ModelMapperForProductCategory.PreBuiltProductCategorySQLSelectorList.Expand().Compile()).ToList(),
                RequiresRoles = x.RequiresRoles,
                RequiresRolesAlt = x.RequiresRolesAlt,
                Reviews = x.Reviews!.Where(y => y.Active).Select(ModelMapperForReview.PreBuiltReviewSQLSelectorList.Expand().Compile()).ToList(),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForCategoryImage.PreBuiltCategoryImageSQLSelectorList.Expand().Compile()).ToList(),
                StoredFiles = x.StoredFiles!.Where(y => y.Active).Select(ModelMapperForCategoryFile.PreBuiltCategoryFileSQLSelectorList.Expand().Compile()).ToList(),
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                IsVisible = x.IsVisible,
                IncludeInMenu = x.IncludeInMenu,
                HeaderContent = x.HeaderContent,
                SidebarContent = x.SidebarContent,
                FooterContent = x.FooterContent,
                HandlingCharge = x.HandlingCharge,
                RestockingFeePercent = x.RestockingFeePercent,
                RestockingFeeAmount = x.RestockingFeeAmount,
                RestockingFeeAmountCurrencyID = x.RestockingFeeAmountCurrencyID,
                RestockingFeeAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.RestockingFeeAmountCurrency!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCategorySQLSelectorLite()
        {
            PreBuiltCategorySQLSelectorLite = x => x == null ? null! : new AnonCategory
            {
                HasChildren = x.Children!.Any(y => y.Active),
                ParentID = x.ParentID,
                Parent = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.Parent!),
                SeoKeywords = x.SeoKeywords,
                SeoUrl = x.SeoUrl,
                SeoPageTitle = x.SeoPageTitle,
                SeoDescription = x.SeoDescription,
                SeoMetaData = x.SeoMetaData,
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                TypeID = x.TypeID,
                Type = ModelMapperForCategoryType.PreBuiltCategoryTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                RequiresRoles = x.RequiresRoles,
                RequiresRolesAlt = x.RequiresRolesAlt,
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                IsVisible = x.IsVisible,
                IncludeInMenu = x.IncludeInMenu,
                HeaderContent = x.HeaderContent,
                SidebarContent = x.SidebarContent,
                FooterContent = x.FooterContent,
                HandlingCharge = x.HandlingCharge,
                RestockingFeePercent = x.RestockingFeePercent,
                RestockingFeeAmount = x.RestockingFeeAmount,
                RestockingFeeAmountCurrencyID = x.RestockingFeeAmountCurrencyID,
                RestockingFeeAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.RestockingFeeAmountCurrency!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCategorySQLSelectorList()
        {
            PreBuiltCategorySQLSelectorList = x => x == null ? null! : new AnonCategory
            {
                HasChildren = x.Children!.Any(y => y.Active),
                ParentID = x.ParentID,
                Parent = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.Parent!), // For Flattening Properties (List)
                SeoUrl = x.SeoUrl,
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!), // For Flattening Properties (List)
                TypeID = x.TypeID,
                Type = ModelMapperForCategoryType.PreBuiltCategoryTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                RequiresRoles = x.RequiresRoles,
                RequiresRolesAlt = x.RequiresRolesAlt,
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                IsVisible = x.IsVisible,
                IncludeInMenu = x.IncludeInMenu,
                HeaderContent = x.HeaderContent,
                SidebarContent = x.SidebarContent,
                FooterContent = x.FooterContent,
                HandlingCharge = x.HandlingCharge,
                RestockingFeePercent = x.RestockingFeePercent,
                RestockingFeeAmount = x.RestockingFeeAmount,
                RestockingFeeAmountCurrencyID = x.RestockingFeeAmountCurrencyID,
                RestockingFeeAmountCurrency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.RestockingFeeAmountCurrency!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICategoryModel> SelectFullCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCategorySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICategoryModel> SelectLiteCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCategorySQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICategoryModel> SelectListCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCategorySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityList(x, contextProfileName))!;
        }

        public static ICategoryModel? SelectFirstFullCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCategorySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICategoryModel? SelectFirstListCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCategorySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICategoryModel? SelectSingleFullCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCategorySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICategoryModel? SelectSingleLiteCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCategorySQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICategoryModel? SelectSingleListCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCategorySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCategoryModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICategoryModel> results, int totalPages, int totalCount) SelectFullCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCategorySQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCategoryModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICategoryModel> results, int totalPages, int totalCount) SelectLiteCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCategorySQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCategoryModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICategoryModel> results, int totalPages, int totalCount) SelectListCategoryAndMapToCategoryModel(
            this IQueryable<Category> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCategorySQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCategorySQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCategoryModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICategoryModel? CreateCategoryModelFromEntityFull(this ICategory? entity, string? contextProfileName)
        {
            return CreateCategoryModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICategoryModel? CreateCategoryModelFromEntityLite(this ICategory? entity, string? contextProfileName)
        {
            return CreateCategoryModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICategoryModel? CreateCategoryModelFromEntityList(this ICategory? entity, string? contextProfileName)
        {
            return CreateCategoryModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICategoryModel? CreateCategoryModelFromEntity(
            this ICategory? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICategoryModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveAParentBase Properties
                    model.Parent = CreateCategoryModelFromEntityLite(entity.Parent, contextProfileName);
                    model.Children = (entity is AnonCategory ? ((AnonCategory)entity).Children : entity.Children)?.Where(x => x.Active).Select(x => CreateCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    // IHaveRequiresRolesBase Properties
                    model.RequiresRoles = entity.RequiresRoles;
                    model.RequiresRolesAlt = entity.RequiresRolesAlt;
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForCategoryType.CreateCategoryTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Category's Properties
                    // Category's Related Objects
                    model.MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingDollarAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingDollarAmountBufferProduct);
                    model.MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingQuantityAmountBufferProduct);
                    model.MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderDollarAmountBufferCategory, contextProfileName);
                    model.MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderDollarAmountBufferProduct);
                    model.MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderQuantityAmountBufferProduct);
                    model.Type = ModelMapperForCategoryType.CreateCategoryTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Category's Associated Objects
                    model.Brands = (entity is AnonCategory ? ((AnonCategory)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandCategory.CreateBrandCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonCategory ? ((AnonCategory)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForCategoryImage.CreateCategoryImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Products = (entity is AnonCategory ? ((AnonCategory)entity).Products : entity.Products)?.Where(x => x.Active).Select(x => ModelMapperForProductCategory.CreateProductCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Reviews = (entity is AnonCategory ? ((AnonCategory)entity).Reviews : entity.Reviews)?.Where(x => x.Active).Select(x => ModelMapperForReview.CreateReviewModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.StoredFiles = (entity is AnonCategory ? ((AnonCategory)entity).StoredFiles : entity.StoredFiles)?.Where(x => x.Active).Select(x => ModelMapperForCategoryFile.CreateCategoryFileModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateCategoryModelFromEntityHooksFull != null) { model = CreateCategoryModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Category's Properties
                    model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingDollarAmountWarningMessage = entity.MinimumForFreeShippingDollarAmountWarningMessage;
                    model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingQuantityAmountWarningMessage = entity.MinimumForFreeShippingQuantityAmountWarningMessage;
                    model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderDollarAmountOverrideFeeWarningMessage = entity.MinimumOrderDollarAmountOverrideFeeWarningMessage;
                    model.MinimumOrderDollarAmountWarningMessage = entity.MinimumOrderDollarAmountWarningMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeWarningMessage = entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
                    model.MinimumOrderQuantityAmountWarningMessage = entity.MinimumOrderQuantityAmountWarningMessage;
                    model.SeoDescription = entity.SeoDescription;
                    model.SeoKeywords = entity.SeoKeywords;
                    model.SeoMetaData = entity.SeoMetaData;
                    model.SeoPageTitle = entity.SeoPageTitle;
                    // Category's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.RestockingFeeAmountCurrency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.RestockingFeeAmountCurrency, contextProfileName);
                    // Category's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCategoryModelFromEntityHooksLite != null) { model = CreateCategoryModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveAParentBase Properties
                    model.ParentID = entity.ParentID;
                    model.HasChildren = (entity as AnonCategory)?.HasChildren ?? (entity.Children?.Any(y => y.Active) ?? false);
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Category's Properties
                    model.DisplayName = entity.DisplayName;
                    model.FooterContent = entity.FooterContent;
                    model.HandlingCharge = entity.HandlingCharge;
                    model.HeaderContent = entity.HeaderContent;
                    model.IncludeInMenu = entity.IncludeInMenu;
                    model.IsVisible = entity.IsVisible;
                    model.MinimumForFreeShippingDollarAmount = entity.MinimumForFreeShippingDollarAmount;
                    model.MinimumForFreeShippingDollarAmountAfter = entity.MinimumForFreeShippingDollarAmountAfter;
                    model.MinimumForFreeShippingQuantityAmount = entity.MinimumForFreeShippingQuantityAmount;
                    model.MinimumForFreeShippingQuantityAmountAfter = entity.MinimumForFreeShippingQuantityAmountAfter;
                    model.MinimumOrderDollarAmount = entity.MinimumOrderDollarAmount;
                    model.MinimumOrderDollarAmountAfter = entity.MinimumOrderDollarAmountAfter;
                    model.MinimumOrderDollarAmountOverrideFee = entity.MinimumOrderDollarAmountOverrideFee;
                    model.MinimumOrderDollarAmountOverrideFeeIsPercent = entity.MinimumOrderDollarAmountOverrideFeeIsPercent;
                    model.MinimumOrderQuantityAmount = entity.MinimumOrderQuantityAmount;
                    model.MinimumOrderQuantityAmountAfter = entity.MinimumOrderQuantityAmountAfter;
                    model.MinimumOrderQuantityAmountOverrideFee = entity.MinimumOrderQuantityAmountOverrideFee;
                    model.MinimumOrderQuantityAmountOverrideFeeIsPercent = entity.MinimumOrderQuantityAmountOverrideFeeIsPercent;
                    model.RestockingFeeAmount = entity.RestockingFeeAmount;
                    model.RestockingFeePercent = entity.RestockingFeePercent;
                    model.SeoUrl = entity.SeoUrl;
                    model.SidebarContent = entity.SidebarContent;
                    model.SortOrder = entity.SortOrder;
                    // Category's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MinimumForFreeShippingDollarAmountBufferCategoryID = entity.MinimumForFreeShippingDollarAmountBufferCategoryID;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryKey = entity.MinimumForFreeShippingDollarAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryName = entity.MinimumForFreeShippingDollarAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingDollarAmountBufferProductID = entity.MinimumForFreeShippingDollarAmountBufferProductID;
                    model.MinimumForFreeShippingDollarAmountBufferProductKey = entity.MinimumForFreeShippingDollarAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferProductName = entity.MinimumForFreeShippingDollarAmountBufferProduct?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryID = entity.MinimumForFreeShippingQuantityAmountBufferCategoryID;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryKey = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryName = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferProductID = entity.MinimumForFreeShippingQuantityAmountBufferProductID;
                    model.MinimumForFreeShippingQuantityAmountBufferProductKey = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferProductName = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.Name;
                    model.MinimumOrderDollarAmountBufferCategoryID = entity.MinimumOrderDollarAmountBufferCategoryID;
                    model.MinimumOrderDollarAmountBufferCategoryKey = entity.MinimumOrderDollarAmountBufferCategory?.CustomKey;
                    model.MinimumOrderDollarAmountBufferCategoryName = entity.MinimumOrderDollarAmountBufferCategory?.Name;
                    model.MinimumOrderDollarAmountBufferProductID = entity.MinimumOrderDollarAmountBufferProductID;
                    model.MinimumOrderDollarAmountBufferProductKey = entity.MinimumOrderDollarAmountBufferProduct?.CustomKey;
                    model.MinimumOrderDollarAmountBufferProductName = entity.MinimumOrderDollarAmountBufferProduct?.Name;
                    model.MinimumOrderQuantityAmountBufferCategoryID = entity.MinimumOrderQuantityAmountBufferCategoryID;
                    model.MinimumOrderQuantityAmountBufferCategoryKey = entity.MinimumOrderQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferCategoryName = entity.MinimumOrderQuantityAmountBufferCategory?.Name;
                    model.MinimumOrderQuantityAmountBufferProductID = entity.MinimumOrderQuantityAmountBufferProductID;
                    model.MinimumOrderQuantityAmountBufferProductKey = entity.MinimumOrderQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferProductName = entity.MinimumOrderQuantityAmountBufferProduct?.Name;
                    model.RestockingFeeAmountCurrencyID = entity.RestockingFeeAmountCurrencyID;
                    model.RestockingFeeAmountCurrencyKey = entity.RestockingFeeAmountCurrency?.CustomKey;
                    model.RestockingFeeAmountCurrencyName = entity.RestockingFeeAmountCurrency?.Name;
                    model.TypeID = entity.TypeID;
                    model.TypeKey = entity.Type?.CustomKey;
                    model.TypeName = entity.Type?.Name;
                    model.TypeDisplayName = entity.Type?.DisplayName;
                    model.TypeTranslationKey = entity.Type?.TranslationKey;
                    model.TypeSortOrder = entity.Type?.SortOrder;
                    // Category's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCategoryModelFromEntityHooksList != null) { model = CreateCategoryModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
