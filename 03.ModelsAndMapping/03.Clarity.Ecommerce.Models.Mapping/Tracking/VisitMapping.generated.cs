// <autogenerated>
// <copyright file="Mapping.Tracking.Visit.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Tracking section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForVisit
    {
        public sealed class AnonVisit : Visit
        {
            public new IEnumerable<Event>? Events { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Visit?, string?, IVisitModel?> MapVisitModelFromEntityFull = CreateVisitModelFromEntityFull;

        public static readonly Func<Visit?, string?, IVisitModel?> MapVisitModelFromEntityLite = CreateVisitModelFromEntityLite;

        public static readonly Func<Visit?, string?, IVisitModel?> MapVisitModelFromEntityList = CreateVisitModelFromEntityList;

        public static Func<IVisit, IVisitModel, string?, IVisitModel>? CreateVisitModelFromEntityHooksFull { get; set; }

        public static Func<IVisit, IVisitModel, string?, IVisitModel>? CreateVisitModelFromEntityHooksLite { get; set; }

        public static Func<IVisit, IVisitModel, string?, IVisitModel>? CreateVisitModelFromEntityHooksList { get; set; }

        public static Expression<Func<Visit, AnonVisit>>? PreBuiltVisitSQLSelectorFull { get; set; }

        public static Expression<Func<Visit, AnonVisit>>? PreBuiltVisitSQLSelectorLite { get; set; }

        public static Expression<Func<Visit, AnonVisit>>? PreBuiltVisitSQLSelectorList { get; set; }

        /// <summary>An <see cref="IVisitModel"/> extension method that creates a(n) <see cref="Visit"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Visit"/> entity.</returns>
        public static IVisit CreateVisitEntity(
            this IVisitModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IVisitModel, Visit>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateVisitFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IVisitModel"/> extension method that updates a(n) <see cref="Visit"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Visit"/> entity.</returns>
        public static IVisit UpdateVisitFromModel(
            this IVisit entity,
            IVisitModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Visit Properties
            entity.Browser = model.Browser;
            entity.ContainsSocialProfile = model.ContainsSocialProfile;
            entity.Delta = model.Delta;
            entity.DidBounce = model.DidBounce;
            entity.Duration = model.Duration;
            entity.EndedOn = model.EndedOn;
            entity.EntryPage = model.EntryPage;
            entity.ExitPage = model.ExitPage;
            entity.Flash = model.Flash;
            entity.IPAddress = model.IPAddress;
            entity.IsFirstTrigger = model.IsFirstTrigger;
            entity.Keywords = model.Keywords;
            entity.Language = model.Language;
            entity.OperatingSystem = model.OperatingSystem;
            entity.PartitionKey = model.PartitionKey;
            entity.Referrer = model.Referrer;
            entity.ReferringHost = model.ReferringHost;
            entity.RowKey = model.RowKey;
            entity.Score = model.Score;
            entity.Source = model.Source;
            entity.StartedOn = model.StartedOn;
            entity.Time = model.Time;
            entity.TotalTriggers = model.TotalTriggers;
            // Visit's Related Objects
            // Visit's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenVisitSQLSelectorFull()
        {
            PreBuiltVisitSQLSelectorFull = x => x == null ? null! : new AnonVisit
            {
                StatusID = x.StatusID,
                Status = ModelMapperForVisitStatus.PreBuiltVisitStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                IPAddress = x.IPAddress,
                Score = x.Score,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                IPOrganizationID = x.IPOrganizationID,
                IPOrganization = ModelMapperForIPOrganization.PreBuiltIPOrganizationSQLSelectorList.Expand().Compile().Invoke(x.IPOrganization!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                DidBounce = x.DidBounce,
                OperatingSystem = x.OperatingSystem,
                Browser = x.Browser,
                Language = x.Language,
                ContainsSocialProfile = x.ContainsSocialProfile,
                Delta = x.Delta,
                Duration = x.Duration,
                StartedOn = x.StartedOn,
                EndedOn = x.EndedOn,
                Time = x.Time,
                EntryPage = x.EntryPage,
                ExitPage = x.ExitPage,
                IsFirstTrigger = x.IsFirstTrigger,
                Flash = x.Flash,
                Keywords = x.Keywords,
                PartitionKey = x.PartitionKey,
                Referrer = x.Referrer,
                ReferringHost = x.ReferringHost,
                RowKey = x.RowKey,
                Source = x.Source,
                TotalTriggers = x.TotalTriggers,
                CampaignID = x.CampaignID,
                Campaign = ModelMapperForCampaign.PreBuiltCampaignSQLSelectorList.Expand().Compile().Invoke(x.Campaign!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                SiteDomainID = x.SiteDomainID,
                SiteDomain = ModelMapperForSiteDomain.PreBuiltSiteDomainSQLSelectorList.Expand().Compile().Invoke(x.SiteDomain!),
                VisitorID = x.VisitorID,
                Visitor = ModelMapperForVisitor.PreBuiltVisitorSQLSelectorList.Expand().Compile().Invoke(x.Visitor!),
                Events = x.Events!.Where(y => y.Active).Select(ModelMapperForEvent.PreBuiltEventSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVisitSQLSelectorLite()
        {
            PreBuiltVisitSQLSelectorLite = x => x == null ? null! : new AnonVisit
            {
                StatusID = x.StatusID,
                Status = ModelMapperForVisitStatus.PreBuiltVisitStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                IPAddress = x.IPAddress,
                Score = x.Score,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                IPOrganizationID = x.IPOrganizationID,
                IPOrganization = ModelMapperForIPOrganization.PreBuiltIPOrganizationSQLSelectorList.Expand().Compile().Invoke(x.IPOrganization!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                DidBounce = x.DidBounce,
                OperatingSystem = x.OperatingSystem,
                Browser = x.Browser,
                Language = x.Language,
                ContainsSocialProfile = x.ContainsSocialProfile,
                Delta = x.Delta,
                Duration = x.Duration,
                StartedOn = x.StartedOn,
                EndedOn = x.EndedOn,
                Time = x.Time,
                EntryPage = x.EntryPage,
                ExitPage = x.ExitPage,
                IsFirstTrigger = x.IsFirstTrigger,
                Flash = x.Flash,
                Keywords = x.Keywords,
                PartitionKey = x.PartitionKey,
                Referrer = x.Referrer,
                ReferringHost = x.ReferringHost,
                RowKey = x.RowKey,
                Source = x.Source,
                TotalTriggers = x.TotalTriggers,
                CampaignID = x.CampaignID,
                Campaign = ModelMapperForCampaign.PreBuiltCampaignSQLSelectorList.Expand().Compile().Invoke(x.Campaign!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                SiteDomainID = x.SiteDomainID,
                SiteDomain = ModelMapperForSiteDomain.PreBuiltSiteDomainSQLSelectorList.Expand().Compile().Invoke(x.SiteDomain!),
                VisitorID = x.VisitorID,
                Visitor = ModelMapperForVisitor.PreBuiltVisitorSQLSelectorList.Expand().Compile().Invoke(x.Visitor!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVisitSQLSelectorList()
        {
            PreBuiltVisitSQLSelectorList = x => x == null ? null! : new AnonVisit
            {
                StatusID = x.StatusID,
                Status = ModelMapperForVisitStatus.PreBuiltVisitStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                IPAddress = x.IPAddress,
                Score = x.Score,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!), // For Flattening Properties (List)
                IPOrganizationID = x.IPOrganizationID,
                IPOrganization = ModelMapperForIPOrganization.PreBuiltIPOrganizationSQLSelectorList.Expand().Compile().Invoke(x.IPOrganization!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                DidBounce = x.DidBounce,
                OperatingSystem = x.OperatingSystem,
                Browser = x.Browser,
                Language = x.Language,
                ContainsSocialProfile = x.ContainsSocialProfile,
                Delta = x.Delta,
                Duration = x.Duration,
                StartedOn = x.StartedOn,
                EndedOn = x.EndedOn,
                Time = x.Time,
                EntryPage = x.EntryPage,
                ExitPage = x.ExitPage,
                IsFirstTrigger = x.IsFirstTrigger,
                Flash = x.Flash,
                Keywords = x.Keywords,
                PartitionKey = x.PartitionKey,
                Referrer = x.Referrer,
                ReferringHost = x.ReferringHost,
                RowKey = x.RowKey,
                Source = x.Source,
                TotalTriggers = x.TotalTriggers,
                CampaignID = x.CampaignID,
                Campaign = ModelMapperForCampaign.PreBuiltCampaignSQLSelectorList.Expand().Compile().Invoke(x.Campaign!), // For Flattening Properties (List)
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                SiteDomainID = x.SiteDomainID,
                SiteDomain = ModelMapperForSiteDomain.PreBuiltSiteDomainSQLSelectorList.Expand().Compile().Invoke(x.SiteDomain!), // For Flattening Properties (List)
                VisitorID = x.VisitorID,
                Visitor = ModelMapperForVisitor.PreBuiltVisitorSQLSelectorList.Expand().Compile().Invoke(x.Visitor!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IVisitModel> SelectFullVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVisitSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IVisitModel> SelectLiteVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVisitSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IVisitModel> SelectListVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVisitSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityList(x, contextProfileName))!;
        }

        public static IVisitModel? SelectFirstFullVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVisitModel? SelectFirstListVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVisitModel? SelectSingleFullVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVisitModel? SelectSingleLiteVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVisitModel? SelectSingleListVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVisitModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IVisitModel> results, int totalPages, int totalCount) SelectFullVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVisitSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateVisitModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVisitModel> results, int totalPages, int totalCount) SelectLiteVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVisitSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateVisitModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVisitModel> results, int totalPages, int totalCount) SelectListVisitAndMapToVisitModel(
            this IQueryable<Visit> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVisitSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateVisitModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IVisitModel? CreateVisitModelFromEntityFull(this IVisit? entity, string? contextProfileName)
        {
            return CreateVisitModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IVisitModel? CreateVisitModelFromEntityLite(this IVisit? entity, string? contextProfileName)
        {
            return CreateVisitModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IVisitModel? CreateVisitModelFromEntityList(this IVisit? entity, string? contextProfileName)
        {
            return CreateVisitModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IVisitModel? CreateVisitModelFromEntity(
            this IVisit? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IVisitModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Visit's Properties
                    // Visit's Related Objects
                    model.Address = ModelMapperForAddress.CreateAddressModelFromEntityLite(entity.Address, contextProfileName);
                    model.Campaign = ModelMapperForCampaign.CreateCampaignModelFromEntityLite(entity.Campaign, contextProfileName);
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    model.IPOrganization = ModelMapperForIPOrganization.CreateIPOrganizationModelFromEntityLite(entity.IPOrganization, contextProfileName);
                    model.SiteDomain = ModelMapperForSiteDomain.CreateSiteDomainModelFromEntityLite(entity.SiteDomain, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    model.Visitor = ModelMapperForVisitor.CreateVisitorModelFromEntityLite(entity.Visitor, contextProfileName);
                    // Visit's Associated Objects
                    model.Events = (entity is AnonVisit ? ((AnonVisit)entity).Events : entity.Events)?.Where(x => x.Active).Select(x => ModelMapperForEvent.CreateEventModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateVisitModelFromEntityHooksFull != null) { model = CreateVisitModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Visit's Properties
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForVisitStatus.CreateVisitStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Visit's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Visit's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVisitModelFromEntityHooksLite != null) { model = CreateVisitModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Visit's Properties
                    model.Browser = entity.Browser;
                    model.ContainsSocialProfile = entity.ContainsSocialProfile;
                    model.Delta = entity.Delta;
                    model.DidBounce = entity.DidBounce;
                    model.Duration = entity.Duration;
                    model.EndedOn = entity.EndedOn;
                    model.EntryPage = entity.EntryPage;
                    model.ExitPage = entity.ExitPage;
                    model.Flash = entity.Flash;
                    model.IPAddress = entity.IPAddress;
                    model.IsFirstTrigger = entity.IsFirstTrigger;
                    model.Keywords = entity.Keywords;
                    model.Language = entity.Language;
                    model.OperatingSystem = entity.OperatingSystem;
                    model.PartitionKey = entity.PartitionKey;
                    model.Referrer = entity.Referrer;
                    model.ReferringHost = entity.ReferringHost;
                    model.RowKey = entity.RowKey;
                    model.Score = entity.Score;
                    model.Source = entity.Source;
                    model.StartedOn = entity.StartedOn;
                    model.Time = entity.Time;
                    model.TotalTriggers = entity.TotalTriggers;
                    // Visit's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AddressID = entity.AddressID;
                    model.AddressKey = entity.Address?.CustomKey;
                    model.CampaignID = entity.CampaignID;
                    model.CampaignKey = entity.Campaign?.CustomKey;
                    model.CampaignName = entity.Campaign?.Name;
                    model.ContactID = entity.ContactID;
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    model.IPOrganizationID = entity.IPOrganizationID;
                    model.IPOrganizationKey = entity.IPOrganization?.CustomKey;
                    model.IPOrganizationName = entity.IPOrganization?.Name;
                    model.SiteDomainID = entity.SiteDomainID;
                    model.SiteDomainKey = entity.SiteDomain?.CustomKey;
                    model.SiteDomainName = entity.SiteDomain?.Name;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    model.VisitorID = entity.VisitorID;
                    model.VisitorKey = entity.Visitor?.CustomKey;
                    model.VisitorName = entity.Visitor?.Name;
                    // Visit's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVisitModelFromEntityHooksList != null) { model = CreateVisitModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
