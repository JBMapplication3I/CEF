// <autogenerated>
// <copyright file="Mapping.Tracking.Campaign.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Tracking section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCampaign
    {
        public sealed class AnonCampaign : Campaign
        {
            public new IEnumerable<CampaignAd>? CampaignAds { get; set; }
            public Contact? CreatedByUserContact { get; set; }
        }

        public static readonly Func<Campaign?, string?, ICampaignModel?> MapCampaignModelFromEntityFull = CreateCampaignModelFromEntityFull;

        public static readonly Func<Campaign?, string?, ICampaignModel?> MapCampaignModelFromEntityLite = CreateCampaignModelFromEntityLite;

        public static readonly Func<Campaign?, string?, ICampaignModel?> MapCampaignModelFromEntityList = CreateCampaignModelFromEntityList;

        public static Func<ICampaign, ICampaignModel, string?, ICampaignModel>? CreateCampaignModelFromEntityHooksFull { get; set; }

        public static Func<ICampaign, ICampaignModel, string?, ICampaignModel>? CreateCampaignModelFromEntityHooksLite { get; set; }

        public static Func<ICampaign, ICampaignModel, string?, ICampaignModel>? CreateCampaignModelFromEntityHooksList { get; set; }

        public static Expression<Func<Campaign, AnonCampaign>>? PreBuiltCampaignSQLSelectorFull { get; set; }

        public static Expression<Func<Campaign, AnonCampaign>>? PreBuiltCampaignSQLSelectorLite { get; set; }

        public static Expression<Func<Campaign, AnonCampaign>>? PreBuiltCampaignSQLSelectorList { get; set; }

        /// <summary>An <see cref="ICampaignModel"/> extension method that creates a(n) <see cref="Campaign"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Campaign"/> entity.</returns>
        public static ICampaign CreateCampaignEntity(
            this ICampaignModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ICampaignModel, Campaign>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCampaignFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICampaignModel"/> extension method that updates a(n) <see cref="Campaign"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Campaign"/> entity.</returns>
        public static ICampaign UpdateCampaignFromModel(
            this ICampaign entity,
            ICampaignModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Campaign Properties
            entity.ActualEnd = model.ActualEnd;
            entity.ActualStart = model.ActualStart;
            entity.BudgetedCost = model.BudgetedCost;
            entity.CodeName = model.CodeName;
            entity.ExchangeRate = model.ExchangeRate;
            entity.ExpectedResponse = model.ExpectedResponse;
            entity.ExpectedRevenue = model.ExpectedRevenue;
            entity.IsTemplate = model.IsTemplate;
            entity.Message = model.Message;
            entity.Objective = model.Objective;
            entity.OtherCost = model.OtherCost;
            entity.PromotionCodeName = model.PromotionCodeName;
            entity.ProposedEnd = model.ProposedEnd;
            entity.ProposedStart = model.ProposedStart;
            entity.TotalActualCost = model.TotalActualCost;
            entity.TotalCampaignActivityActualCost = model.TotalCampaignActivityActualCost;
            entity.UTCConversionTimeZoneCode = model.UTCConversionTimeZoneCode;
            // Campaign's Related Objects
            // Campaign's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCampaignSQLSelectorFull()
        {
            PreBuiltCampaignSQLSelectorFull = x => x == null ? null! : new AnonCampaign
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCampaignType.PreBuiltCampaignTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForCampaignStatus.PreBuiltCampaignStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ProposedStart = x.ProposedStart,
                ProposedEnd = x.ProposedEnd,
                ActualStart = x.ActualStart,
                ActualEnd = x.ActualEnd,
                BudgetedCost = x.BudgetedCost,
                OtherCost = x.OtherCost,
                ExpectedRevenue = x.ExpectedRevenue,
                TotalActualCost = x.TotalActualCost,
                TotalCampaignActivityActualCost = x.TotalCampaignActivityActualCost,
                ExchangeRate = x.ExchangeRate,
                CodeName = x.CodeName,
                PromotionCodeName = x.PromotionCodeName,
                Message = x.Message,
                Objective = x.Objective,
                ExpectedResponse = x.ExpectedResponse,
                UTCConversionTimeZoneCode = x.UTCConversionTimeZoneCode,
                IsTemplate = x.IsTemplate,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!),
                CampaignAds = x.CampaignAds!.Where(y => y.Active).Select(ModelMapperForCampaignAd.PreBuiltCampaignAdSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCampaignSQLSelectorLite()
        {
            PreBuiltCampaignSQLSelectorLite = x => x == null ? null! : new AnonCampaign
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCampaignType.PreBuiltCampaignTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForCampaignStatus.PreBuiltCampaignStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                ProposedStart = x.ProposedStart,
                ProposedEnd = x.ProposedEnd,
                ActualStart = x.ActualStart,
                ActualEnd = x.ActualEnd,
                BudgetedCost = x.BudgetedCost,
                OtherCost = x.OtherCost,
                ExpectedRevenue = x.ExpectedRevenue,
                TotalActualCost = x.TotalActualCost,
                TotalCampaignActivityActualCost = x.TotalCampaignActivityActualCost,
                ExchangeRate = x.ExchangeRate,
                CodeName = x.CodeName,
                PromotionCodeName = x.PromotionCodeName,
                Message = x.Message,
                Objective = x.Objective,
                ExpectedResponse = x.ExpectedResponse,
                UTCConversionTimeZoneCode = x.UTCConversionTimeZoneCode,
                IsTemplate = x.IsTemplate,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCampaignSQLSelectorList()
        {
            PreBuiltCampaignSQLSelectorList = x => x == null ? null! : new AnonCampaign
            {
                TypeID = x.TypeID,
                Type = ModelMapperForCampaignType.PreBuiltCampaignTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForCampaignStatus.PreBuiltCampaignStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                ProposedStart = x.ProposedStart,
                ProposedEnd = x.ProposedEnd,
                ActualStart = x.ActualStart,
                ActualEnd = x.ActualEnd,
                BudgetedCost = x.BudgetedCost,
                OtherCost = x.OtherCost,
                ExpectedRevenue = x.ExpectedRevenue,
                TotalActualCost = x.TotalActualCost,
                TotalCampaignActivityActualCost = x.TotalCampaignActivityActualCost,
                ExchangeRate = x.ExchangeRate,
                CodeName = x.CodeName,
                PromotionCodeName = x.PromotionCodeName,
                Message = x.Message,
                Objective = x.Objective,
                ExpectedResponse = x.ExpectedResponse,
                UTCConversionTimeZoneCode = x.UTCConversionTimeZoneCode,
                IsTemplate = x.IsTemplate,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICampaignModel> SelectFullCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCampaignSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICampaignModel> SelectLiteCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCampaignSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICampaignModel> SelectListCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCampaignSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityList(x, contextProfileName))!;
        }

        public static ICampaignModel? SelectFirstFullCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCampaignSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICampaignModel? SelectFirstListCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCampaignSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICampaignModel? SelectSingleFullCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCampaignSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICampaignModel? SelectSingleLiteCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCampaignSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICampaignModel? SelectSingleListCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCampaignSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCampaignModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICampaignModel> results, int totalPages, int totalCount) SelectFullCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCampaignSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCampaignModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICampaignModel> results, int totalPages, int totalCount) SelectLiteCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCampaignSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCampaignModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICampaignModel> results, int totalPages, int totalCount) SelectListCampaignAndMapToCampaignModel(
            this IQueryable<Campaign> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCampaignSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCampaignSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCampaignModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICampaignModel? CreateCampaignModelFromEntityFull(this ICampaign? entity, string? contextProfileName)
        {
            return CreateCampaignModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICampaignModel? CreateCampaignModelFromEntityLite(this ICampaign? entity, string? contextProfileName)
        {
            return CreateCampaignModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICampaignModel? CreateCampaignModelFromEntityList(this ICampaign? entity, string? contextProfileName)
        {
            return CreateCampaignModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICampaignModel? CreateCampaignModelFromEntity(
            this ICampaign? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICampaignModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Campaign's Properties
                    // Campaign's Related Objects
                    model.CreatedByUser = ModelMapperForUser.CreateUserModelFromEntityLite(entity.CreatedByUser, contextProfileName);
                    // Campaign's Associated Objects
                    model.CampaignAds = (entity is AnonCampaign ? ((AnonCampaign)entity).CampaignAds : entity.CampaignAds)?.Where(x => x.Active).Select(x => ModelMapperForCampaignAd.CreateCampaignAdModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateCampaignModelFromEntityHooksFull != null) { model = CreateCampaignModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Campaign's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForCampaignType.CreateCampaignTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties (Forced)
                    model.Status = ModelMapperForCampaignStatus.CreateCampaignStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Campaign's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Campaign's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCampaignModelFromEntityHooksLite != null) { model = CreateCampaignModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Campaign's Properties
                    model.ActualEnd = entity.ActualEnd;
                    model.ActualStart = entity.ActualStart;
                    model.BudgetedCost = entity.BudgetedCost;
                    model.CodeName = entity.CodeName;
                    model.ExchangeRate = entity.ExchangeRate;
                    model.ExpectedResponse = entity.ExpectedResponse;
                    model.ExpectedRevenue = entity.ExpectedRevenue;
                    model.IsTemplate = entity.IsTemplate;
                    model.Message = entity.Message;
                    model.Objective = entity.Objective;
                    model.OtherCost = entity.OtherCost;
                    model.PromotionCodeName = entity.PromotionCodeName;
                    model.ProposedEnd = entity.ProposedEnd;
                    model.ProposedStart = entity.ProposedStart;
                    model.TotalActualCost = entity.TotalActualCost;
                    model.TotalCampaignActivityActualCost = entity.TotalCampaignActivityActualCost;
                    model.UTCConversionTimeZoneCode = entity.UTCConversionTimeZoneCode;
                    // Campaign's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CreatedByUserID = entity.CreatedByUserID;
                    model.CreatedByUserKey = entity.CreatedByUser?.CustomKey;
                    // Campaign's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCampaignModelFromEntityHooksList != null) { model = CreateCampaignModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
