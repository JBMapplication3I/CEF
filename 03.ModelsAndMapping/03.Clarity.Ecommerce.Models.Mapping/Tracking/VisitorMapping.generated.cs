// <autogenerated>
// <copyright file="Mapping.Tracking.Visitor.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Tracking section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForVisitor
    {
        public sealed class AnonVisitor : Visitor
        {
            public new IEnumerable<Visit>? Visits { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Visitor?, string?, IVisitorModel?> MapVisitorModelFromEntityFull = CreateVisitorModelFromEntityFull;

        public static readonly Func<Visitor?, string?, IVisitorModel?> MapVisitorModelFromEntityLite = CreateVisitorModelFromEntityLite;

        public static readonly Func<Visitor?, string?, IVisitorModel?> MapVisitorModelFromEntityList = CreateVisitorModelFromEntityList;

        public static Func<IVisitor, IVisitorModel, string?, IVisitorModel>? CreateVisitorModelFromEntityHooksFull { get; set; }

        public static Func<IVisitor, IVisitorModel, string?, IVisitorModel>? CreateVisitorModelFromEntityHooksLite { get; set; }

        public static Func<IVisitor, IVisitorModel, string?, IVisitorModel>? CreateVisitorModelFromEntityHooksList { get; set; }

        public static Expression<Func<Visitor, AnonVisitor>>? PreBuiltVisitorSQLSelectorFull { get; set; }

        public static Expression<Func<Visitor, AnonVisitor>>? PreBuiltVisitorSQLSelectorLite { get; set; }

        public static Expression<Func<Visitor, AnonVisitor>>? PreBuiltVisitorSQLSelectorList { get; set; }

        /// <summary>An <see cref="IVisitorModel"/> extension method that creates a(n) <see cref="Visitor"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Visitor"/> entity.</returns>
        public static IVisitor CreateVisitorEntity(
            this IVisitorModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IVisitorModel, Visitor>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateVisitorFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IVisitorModel"/> extension method that updates a(n) <see cref="Visitor"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Visitor"/> entity.</returns>
        public static IVisitor UpdateVisitorFromModel(
            this IVisitor entity,
            IVisitorModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Visitor Properties
            entity.IPAddress = model.IPAddress;
            entity.Score = model.Score;
            // Visitor's Related Objects
            // Visitor's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenVisitorSQLSelectorFull()
        {
            PreBuiltVisitorSQLSelectorFull = x => x == null ? null! : new AnonVisitor
            {
                IPAddress = x.IPAddress,
                Score = x.Score,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                IPOrganizationID = x.IPOrganizationID,
                IPOrganization = ModelMapperForIPOrganization.PreBuiltIPOrganizationSQLSelectorList.Expand().Compile().Invoke(x.IPOrganization!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Visits = x.Visits!.Where(y => y.Active).Select(ModelMapperForVisit.PreBuiltVisitSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVisitorSQLSelectorLite()
        {
            PreBuiltVisitorSQLSelectorLite = x => x == null ? null! : new AnonVisitor
            {
                IPAddress = x.IPAddress,
                Score = x.Score,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!),
                IPOrganizationID = x.IPOrganizationID,
                IPOrganization = ModelMapperForIPOrganization.PreBuiltIPOrganizationSQLSelectorList.Expand().Compile().Invoke(x.IPOrganization!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVisitorSQLSelectorList()
        {
            PreBuiltVisitorSQLSelectorList = x => x == null ? null! : new AnonVisitor
            {
                IPAddress = x.IPAddress,
                Score = x.Score,
                AddressID = x.AddressID,
                Address = ModelMapperForAddress.PreBuiltAddressSQLSelectorList.Expand().Compile().Invoke(x.Address!), // For Flattening Properties (List)
                IPOrganizationID = x.IPOrganizationID,
                IPOrganization = ModelMapperForIPOrganization.PreBuiltIPOrganizationSQLSelectorList.Expand().Compile().Invoke(x.IPOrganization!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IVisitorModel> SelectFullVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVisitorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IVisitorModel> SelectLiteVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVisitorSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IVisitorModel> SelectListVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVisitorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityList(x, contextProfileName))!;
        }

        public static IVisitorModel? SelectFirstFullVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVisitorModel? SelectFirstListVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVisitorModel? SelectSingleFullVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVisitorModel? SelectSingleLiteVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitorSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVisitorModel? SelectSingleListVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVisitorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVisitorModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IVisitorModel> results, int totalPages, int totalCount) SelectFullVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVisitorSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateVisitorModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVisitorModel> results, int totalPages, int totalCount) SelectLiteVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVisitorSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateVisitorModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVisitorModel> results, int totalPages, int totalCount) SelectListVisitorAndMapToVisitorModel(
            this IQueryable<Visitor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVisitorSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVisitorSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateVisitorModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IVisitorModel? CreateVisitorModelFromEntityFull(this IVisitor? entity, string? contextProfileName)
        {
            return CreateVisitorModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IVisitorModel? CreateVisitorModelFromEntityLite(this IVisitor? entity, string? contextProfileName)
        {
            return CreateVisitorModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IVisitorModel? CreateVisitorModelFromEntityList(this IVisitor? entity, string? contextProfileName)
        {
            return CreateVisitorModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IVisitorModel? CreateVisitorModelFromEntity(
            this IVisitor? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IVisitorModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Visitor's Properties
                    // Visitor's Related Objects
                    model.Address = ModelMapperForAddress.CreateAddressModelFromEntityLite(entity.Address, contextProfileName);
                    model.IPOrganization = ModelMapperForIPOrganization.CreateIPOrganizationModelFromEntityLite(entity.IPOrganization, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // Visitor's Associated Objects
                    model.Visits = (entity is AnonVisitor ? ((AnonVisitor)entity).Visits : entity.Visits)?.Where(x => x.Active).Select(x => ModelMapperForVisit.CreateVisitModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateVisitorModelFromEntityHooksFull != null) { model = CreateVisitorModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Visitor's Properties
                    // Visitor's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Visitor's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVisitorModelFromEntityHooksLite != null) { model = CreateVisitorModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Visitor's Properties
                    model.IPAddress = entity.IPAddress;
                    model.Score = entity.Score;
                    // Visitor's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AddressID = entity.AddressID;
                    model.AddressKey = entity.Address?.CustomKey;
                    model.IPOrganizationID = entity.IPOrganizationID;
                    model.IPOrganizationKey = entity.IPOrganization?.CustomKey;
                    model.IPOrganizationName = entity.IPOrganization?.Name;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    // Visitor's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVisitorModelFromEntityHooksList != null) { model = CreateVisitorModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
