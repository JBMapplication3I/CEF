// <autogenerated>
// <copyright file="Mapping.Brands.BrandProduct.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Brands section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForBrandProduct
    {
        public sealed class AnonBrandProduct : BrandProduct
        {
            // public new Brand? Master { get; set; }
        }

        public static readonly Func<BrandProduct?, string?, IBrandProductModel?> MapBrandProductModelFromEntityFull = CreateBrandProductModelFromEntityFull;

        public static readonly Func<BrandProduct?, string?, IBrandProductModel?> MapBrandProductModelFromEntityLite = CreateBrandProductModelFromEntityLite;

        public static readonly Func<BrandProduct?, string?, IBrandProductModel?> MapBrandProductModelFromEntityList = CreateBrandProductModelFromEntityList;

        public static Func<IBrandProduct, IBrandProductModel, string?, IBrandProductModel>? CreateBrandProductModelFromEntityHooksFull { get; set; }

        public static Func<IBrandProduct, IBrandProductModel, string?, IBrandProductModel>? CreateBrandProductModelFromEntityHooksLite { get; set; }

        public static Func<IBrandProduct, IBrandProductModel, string?, IBrandProductModel>? CreateBrandProductModelFromEntityHooksList { get; set; }

        public static Expression<Func<BrandProduct, AnonBrandProduct>>? PreBuiltBrandProductSQLSelectorFull { get; set; }

        public static Expression<Func<BrandProduct, AnonBrandProduct>>? PreBuiltBrandProductSQLSelectorLite { get; set; }

        public static Expression<Func<BrandProduct, AnonBrandProduct>>? PreBuiltBrandProductSQLSelectorList { get; set; }

        /// <summary>An <see cref="IBrandProductModel"/> extension method that creates a(n) <see cref="BrandProduct"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="BrandProduct"/> entity.</returns>
        public static IBrandProduct CreateBrandProductEntity(
            this IBrandProductModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IBrandProductModel, BrandProduct>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateBrandProductFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IBrandProductModel"/> extension method that updates a(n) <see cref="BrandProduct"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="BrandProduct"/> entity.</returns>
        public static IBrandProduct UpdateBrandProductFromModel(
            this IBrandProduct entity,
            IBrandProductModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // BrandProduct Properties
            entity.IsVisibleIn = model.IsVisibleIn;
            entity.PriceBase = model.PriceBase;
            entity.PriceMsrp = model.PriceMsrp;
            entity.PriceReduction = model.PriceReduction;
            entity.PriceSale = model.PriceSale;
            // BrandProduct's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenBrandProductSQLSelectorFull()
        {
            PreBuiltBrandProductSQLSelectorFull = x => x == null ? null! : new AnonBrandProduct
            {
                MasterID = x.MasterID,
                Master = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                IsVisibleIn = x.IsVisibleIn,
                PriceBase = x.PriceBase,
                PriceMsrp = x.PriceMsrp,
                PriceReduction = x.PriceReduction,
                PriceSale = x.PriceSale,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenBrandProductSQLSelectorLite()
        {
            PreBuiltBrandProductSQLSelectorLite = x => x == null ? null! : new AnonBrandProduct
            {
                MasterID = x.MasterID,
                Master = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                IsVisibleIn = x.IsVisibleIn,
                PriceBase = x.PriceBase,
                PriceMsrp = x.PriceMsrp,
                PriceReduction = x.PriceReduction,
                PriceSale = x.PriceSale,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenBrandProductSQLSelectorList()
        {
            PreBuiltBrandProductSQLSelectorList = x => x == null ? null! : new AnonBrandProduct
            {
                MasterID = x.MasterID,
                Master = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                IsVisibleIn = x.IsVisibleIn,
                PriceBase = x.PriceBase,
                PriceMsrp = x.PriceMsrp,
                PriceReduction = x.PriceReduction,
                PriceSale = x.PriceSale,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IBrandProductModel> SelectFullBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltBrandProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IBrandProductModel> SelectLiteBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltBrandProductSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IBrandProductModel> SelectListBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltBrandProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityList(x, contextProfileName))!;
        }

        public static IBrandProductModel? SelectFirstFullBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBrandProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IBrandProductModel? SelectFirstListBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBrandProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IBrandProductModel? SelectSingleFullBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBrandProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IBrandProductModel? SelectSingleLiteBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBrandProductSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IBrandProductModel? SelectSingleListBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltBrandProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateBrandProductModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IBrandProductModel> results, int totalPages, int totalCount) SelectFullBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltBrandProductSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateBrandProductModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IBrandProductModel> results, int totalPages, int totalCount) SelectLiteBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltBrandProductSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateBrandProductModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IBrandProductModel> results, int totalPages, int totalCount) SelectListBrandProductAndMapToBrandProductModel(
            this IQueryable<BrandProduct> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltBrandProductSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltBrandProductSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateBrandProductModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IBrandProductModel? CreateBrandProductModelFromEntityFull(this IBrandProduct? entity, string? contextProfileName)
        {
            return CreateBrandProductModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IBrandProductModel? CreateBrandProductModelFromEntityLite(this IBrandProduct? entity, string? contextProfileName)
        {
            return CreateBrandProductModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IBrandProductModel? CreateBrandProductModelFromEntityList(this IBrandProduct? entity, string? contextProfileName)
        {
            return CreateBrandProductModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IBrandProductModel? CreateBrandProductModelFromEntity(
            this IBrandProduct? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IBrandProductModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // BrandProduct's Properties
                    // BrandProduct's Related Objects
                    // BrandProduct's Associated Objects
                    // Additional Mappings
                    if (CreateBrandProductModelFromEntityHooksFull != null) { model = CreateBrandProductModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // BrandProduct's Properties
                    // BrandProduct's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Slave = ModelMapperForProduct.MapLiteProductOldExt(entity.Slave);
                    // BrandProduct's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateBrandProductModelFromEntityHooksLite != null) { model = CreateBrandProductModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // BrandProduct's Properties
                    model.IsVisibleIn = entity.IsVisibleIn;
                    model.PriceBase = entity.PriceBase;
                    model.PriceMsrp = entity.PriceMsrp;
                    model.PriceReduction = entity.PriceReduction;
                    model.PriceSale = entity.PriceSale;
                    // BrandProduct's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    // BrandProduct's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateBrandProductModelFromEntityHooksList != null) { model = CreateBrandProductModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
