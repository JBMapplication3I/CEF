// <autogenerated>
// <copyright file="Mapping.Vendors.VendorProduct.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Vendors section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForVendorProduct
    {
        public sealed class AnonVendorProduct : VendorProduct
        {
            // public new Vendor? Master { get; set; }
        }

        public static readonly Func<VendorProduct?, string?, IVendorProductModel?> MapVendorProductModelFromEntityFull = CreateVendorProductModelFromEntityFull;

        public static readonly Func<VendorProduct?, string?, IVendorProductModel?> MapVendorProductModelFromEntityLite = CreateVendorProductModelFromEntityLite;

        public static readonly Func<VendorProduct?, string?, IVendorProductModel?> MapVendorProductModelFromEntityList = CreateVendorProductModelFromEntityList;

        public static Func<IVendorProduct, IVendorProductModel, string?, IVendorProductModel>? CreateVendorProductModelFromEntityHooksFull { get; set; }

        public static Func<IVendorProduct, IVendorProductModel, string?, IVendorProductModel>? CreateVendorProductModelFromEntityHooksLite { get; set; }

        public static Func<IVendorProduct, IVendorProductModel, string?, IVendorProductModel>? CreateVendorProductModelFromEntityHooksList { get; set; }

        public static Expression<Func<VendorProduct, AnonVendorProduct>>? PreBuiltVendorProductSQLSelectorFull { get; set; }

        public static Expression<Func<VendorProduct, AnonVendorProduct>>? PreBuiltVendorProductSQLSelectorLite { get; set; }

        public static Expression<Func<VendorProduct, AnonVendorProduct>>? PreBuiltVendorProductSQLSelectorList { get; set; }

        /// <summary>An <see cref="IVendorProductModel"/> extension method that creates a(n) <see cref="VendorProduct"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="VendorProduct"/> entity.</returns>
        public static IVendorProduct CreateVendorProductEntity(
            this IVendorProductModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IVendorProductModel, VendorProduct>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateVendorProductFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IVendorProductModel"/> extension method that updates a(n) <see cref="VendorProduct"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="VendorProduct"/> entity.</returns>
        public static IVendorProduct UpdateVendorProductFromModel(
            this IVendorProduct entity,
            IVendorProductModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // VendorProduct Properties
            entity.ActualCost = model.ActualCost;
            entity.Bin = model.Bin;
            entity.CostMultiplier = model.CostMultiplier;
            entity.InventoryCount = model.InventoryCount;
            entity.ListedPrice = model.ListedPrice;
            entity.MaximumInventory = model.MaximumInventory;
            entity.MinimumInventory = model.MinimumInventory;
            // VendorProduct's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenVendorProductSQLSelectorFull()
        {
            PreBuiltVendorProductSQLSelectorFull = x => x == null ? null! : new AnonVendorProduct
            {
                MasterID = x.MasterID,
                Master = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                Bin = x.Bin,
                MinimumInventory = x.MinimumInventory,
                MaximumInventory = x.MaximumInventory,
                InventoryCount = x.InventoryCount,
                CostMultiplier = x.CostMultiplier,
                ListedPrice = x.ListedPrice,
                ActualCost = x.ActualCost,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVendorProductSQLSelectorLite()
        {
            PreBuiltVendorProductSQLSelectorLite = x => x == null ? null! : new AnonVendorProduct
            {
                MasterID = x.MasterID,
                Master = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                Bin = x.Bin,
                MinimumInventory = x.MinimumInventory,
                MaximumInventory = x.MaximumInventory,
                InventoryCount = x.InventoryCount,
                CostMultiplier = x.CostMultiplier,
                ListedPrice = x.ListedPrice,
                ActualCost = x.ActualCost,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVendorProductSQLSelectorList()
        {
            PreBuiltVendorProductSQLSelectorList = x => x == null ? null! : new AnonVendorProduct
            {
                MasterID = x.MasterID,
                Master = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                Bin = x.Bin,
                MinimumInventory = x.MinimumInventory,
                MaximumInventory = x.MaximumInventory,
                InventoryCount = x.InventoryCount,
                CostMultiplier = x.CostMultiplier,
                ListedPrice = x.ListedPrice,
                ActualCost = x.ActualCost,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IVendorProductModel> SelectFullVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IVendorProductModel> SelectLiteVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorProductSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IVendorProductModel> SelectListVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityList(x, contextProfileName))!;
        }

        public static IVendorProductModel? SelectFirstFullVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVendorProductModel? SelectFirstListVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVendorProductModel? SelectSingleFullVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorProductSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVendorProductModel? SelectSingleLiteVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorProductSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVendorProductModel? SelectSingleListVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorProductSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorProductModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IVendorProductModel> results, int totalPages, int totalCount) SelectFullVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorProductSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateVendorProductModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVendorProductModel> results, int totalPages, int totalCount) SelectLiteVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorProductSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateVendorProductModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVendorProductModel> results, int totalPages, int totalCount) SelectListVendorProductAndMapToVendorProductModel(
            this IQueryable<VendorProduct> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorProductSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorProductSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateVendorProductModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IVendorProductModel? CreateVendorProductModelFromEntityFull(this IVendorProduct? entity, string? contextProfileName)
        {
            return CreateVendorProductModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IVendorProductModel? CreateVendorProductModelFromEntityLite(this IVendorProduct? entity, string? contextProfileName)
        {
            return CreateVendorProductModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IVendorProductModel? CreateVendorProductModelFromEntityList(this IVendorProduct? entity, string? contextProfileName)
        {
            return CreateVendorProductModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IVendorProductModel? CreateVendorProductModelFromEntity(
            this IVendorProduct? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IVendorProductModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // VendorProduct's Properties
                    // VendorProduct's Related Objects
                    // VendorProduct's Associated Objects
                    // Additional Mappings
                    if (CreateVendorProductModelFromEntityHooksFull != null) { model = CreateVendorProductModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // VendorProduct's Properties
                    // VendorProduct's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Slave = ModelMapperForProduct.MapLiteProductOldExt(entity.Slave);
                    // VendorProduct's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVendorProductModelFromEntityHooksLite != null) { model = CreateVendorProductModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // VendorProduct's Properties
                    model.ActualCost = entity.ActualCost;
                    model.Bin = entity.Bin;
                    model.CostMultiplier = entity.CostMultiplier;
                    model.InventoryCount = entity.InventoryCount;
                    model.ListedPrice = entity.ListedPrice;
                    model.MaximumInventory = entity.MaximumInventory;
                    model.MinimumInventory = entity.MinimumInventory;
                    // VendorProduct's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    // VendorProduct's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVendorProductModelFromEntityHooksList != null) { model = CreateVendorProductModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
