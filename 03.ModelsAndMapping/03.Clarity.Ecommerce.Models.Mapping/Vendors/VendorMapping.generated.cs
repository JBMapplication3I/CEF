// <autogenerated>
// <copyright file="Mapping.Vendors.Vendor.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Vendors section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForVendor
    {
        public sealed class AnonVendor : Vendor
        {
            public new IEnumerable<BrandVendor>? Brands { get; set; }
            public new IEnumerable<FranchiseVendor>? Franchises { get; set; }
            public new IEnumerable<Note>? Notes { get; set; }
            public new IEnumerable<Shipment>? Shipments { get; set; }
            public new IEnumerable<VendorAccount>? Accounts { get; set; }
            public new IEnumerable<VendorImage>? Images { get; set; }
            public new IEnumerable<VendorManufacturer>? Manufacturers { get; set; }
            public new IEnumerable<VendorProduct>? Products { get; set; }
        }

        public static readonly Func<Vendor?, string?, IVendorModel?> MapVendorModelFromEntityFull = CreateVendorModelFromEntityFull;

        public static readonly Func<Vendor?, string?, IVendorModel?> MapVendorModelFromEntityLite = CreateVendorModelFromEntityLite;

        public static readonly Func<Vendor?, string?, IVendorModel?> MapVendorModelFromEntityList = CreateVendorModelFromEntityList;

        public static Func<IVendor, IVendorModel, string?, IVendorModel>? CreateVendorModelFromEntityHooksFull { get; set; }

        public static Func<IVendor, IVendorModel, string?, IVendorModel>? CreateVendorModelFromEntityHooksLite { get; set; }

        public static Func<IVendor, IVendorModel, string?, IVendorModel>? CreateVendorModelFromEntityHooksList { get; set; }

        public static Expression<Func<Vendor, AnonVendor>>? PreBuiltVendorSQLSelectorFull { get; set; }

        public static Expression<Func<Vendor, AnonVendor>>? PreBuiltVendorSQLSelectorLite { get; set; }

        public static Expression<Func<Vendor, AnonVendor>>? PreBuiltVendorSQLSelectorList { get; set; }

        /// <summary>An <see cref="IVendorModel"/> extension method that creates a(n) <see cref="Vendor"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Vendor"/> entity.</returns>
        public static IVendor CreateVendorEntity(
            this IVendorModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IVendorModel, Vendor>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateVendorFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IVendorModel"/> extension method that updates a(n) <see cref="Vendor"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Vendor"/> entity.</returns>
        public static IVendor UpdateVendorFromModel(
            this IVendor entity,
            IVendorModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Vendor Properties
            entity.AccountNumber = model.AccountNumber;
            entity.AllowDropShip = model.AllowDropShip;
            entity.DefaultDiscount = model.DefaultDiscount;
            entity.EmailSubject = model.EmailSubject;
            entity.MinimumForFreeShippingDollarAmount = model.MinimumForFreeShippingDollarAmount;
            entity.MinimumForFreeShippingDollarAmountAfter = model.MinimumForFreeShippingDollarAmountAfter;
            entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingDollarAmountWarningMessage = model.MinimumForFreeShippingDollarAmountWarningMessage;
            entity.MinimumForFreeShippingQuantityAmount = model.MinimumForFreeShippingQuantityAmount;
            entity.MinimumForFreeShippingQuantityAmountAfter = model.MinimumForFreeShippingQuantityAmountAfter;
            entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingQuantityAmountWarningMessage = model.MinimumForFreeShippingQuantityAmountWarningMessage;
            entity.MinimumOrderDollarAmount = model.MinimumOrderDollarAmount;
            entity.MinimumOrderDollarAmountAfter = model.MinimumOrderDollarAmountAfter;
            entity.MinimumOrderDollarAmountOverrideFee = model.MinimumOrderDollarAmountOverrideFee;
            entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderDollarAmountOverrideFeeIsPercent = model.MinimumOrderDollarAmountOverrideFeeIsPercent;
            entity.MinimumOrderDollarAmountOverrideFeeWarningMessage = model.MinimumOrderDollarAmountOverrideFeeWarningMessage;
            entity.MinimumOrderDollarAmountWarningMessage = model.MinimumOrderDollarAmountWarningMessage;
            entity.MinimumOrderQuantityAmount = model.MinimumOrderQuantityAmount;
            entity.MinimumOrderQuantityAmountAfter = model.MinimumOrderQuantityAmountAfter;
            entity.MinimumOrderQuantityAmountOverrideFee = model.MinimumOrderQuantityAmountOverrideFee;
            entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderQuantityAmountOverrideFeeIsPercent = model.MinimumOrderQuantityAmountOverrideFeeIsPercent;
            entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage = model.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
            entity.MinimumOrderQuantityAmountWarningMessage = model.MinimumOrderQuantityAmountWarningMessage;
            entity.MustResetPassword = model.MustResetPassword;
            entity.Notes1 = model.Notes1;
            entity.PasswordHash = model.PasswordHash;
            entity.RecommendedPurchaseOrderDollarAmount = model.RecommendedPurchaseOrderDollarAmount;
            entity.SecurityToken = model.SecurityToken;
            entity.SendMethod = model.SendMethod;
            entity.ShipTo = model.ShipTo;
            entity.ShipViaNotes = model.ShipViaNotes;
            entity.SignBy = model.SignBy;
            entity.TermNotes = model.TermNotes;
            entity.Terms = model.Terms;
            entity.UserName = model.UserName;
            // Vendor's Related Objects
            // Vendor's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenVendorSQLSelectorFull()
        {
            PreBuiltVendorSQLSelectorFull = x => x == null ? null! : new AnonVendor
            {
                TypeID = x.TypeID,
                Type = ModelMapperForVendorType.PreBuiltVendorTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForVendorImage.PreBuiltVendorImageSQLSelectorList.Expand().Compile()).ToList(),
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                Accounts = x.Accounts!.Where(y => y.Active).Select(ModelMapperForVendorAccount.PreBuiltVendorAccountSQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandVendor.PreBuiltBrandVendorSQLSelectorList.Expand().Compile()).ToList(),
                Franchises = x.Franchises!.Where(y => y.Active).Select(ModelMapperForFranchiseVendor.PreBuiltFranchiseVendorSQLSelectorList.Expand().Compile()).ToList(),
                Manufacturers = x.Manufacturers!.Where(y => y.Active).Select(ModelMapperForVendorManufacturer.PreBuiltVendorManufacturerSQLSelectorList.Expand().Compile()).ToList(),
                Products = x.Products!.Where(y => y.Active).Select(ModelMapperForVendorProduct.PreBuiltVendorProductSQLSelectorList.Expand().Compile()).ToList(),
                Notes1 = x.Notes1,
                AccountNumber = x.AccountNumber,
                Terms = x.Terms,
                TermNotes = x.TermNotes,
                SendMethod = x.SendMethod,
                EmailSubject = x.EmailSubject,
                ShipTo = x.ShipTo,
                ShipViaNotes = x.ShipViaNotes,
                SignBy = x.SignBy,
                AllowDropShip = x.AllowDropShip,
                DefaultDiscount = x.DefaultDiscount,
                RecommendedPurchaseOrderDollarAmount = x.RecommendedPurchaseOrderDollarAmount,
                UserName = x.UserName,
                PasswordHash = x.PasswordHash,
                SecurityToken = x.SecurityToken,
                MustResetPassword = x.MustResetPassword,
                Shipments = x.Shipments!.Where(y => y.Active).Select(ModelMapperForShipment.PreBuiltShipmentSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVendorSQLSelectorLite()
        {
            PreBuiltVendorSQLSelectorLite = x => x == null ? null! : new AnonVendor
            {
                TypeID = x.TypeID,
                Type = ModelMapperForVendorType.PreBuiltVendorTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!),
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                Notes1 = x.Notes1,
                AccountNumber = x.AccountNumber,
                Terms = x.Terms,
                TermNotes = x.TermNotes,
                SendMethod = x.SendMethod,
                EmailSubject = x.EmailSubject,
                ShipTo = x.ShipTo,
                ShipViaNotes = x.ShipViaNotes,
                SignBy = x.SignBy,
                AllowDropShip = x.AllowDropShip,
                DefaultDiscount = x.DefaultDiscount,
                RecommendedPurchaseOrderDollarAmount = x.RecommendedPurchaseOrderDollarAmount,
                UserName = x.UserName,
                PasswordHash = x.PasswordHash,
                SecurityToken = x.SecurityToken,
                MustResetPassword = x.MustResetPassword,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVendorSQLSelectorList()
        {
            PreBuiltVendorSQLSelectorList = x => x == null ? null! : new AnonVendor
            {
                TypeID = x.TypeID,
                Type = ModelMapperForVendorType.PreBuiltVendorTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                ContactID = x.ContactID,
                Contact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.Contact!), // For Flattening Properties (List)
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!), // For Flattening Properties (List)
                Notes1 = x.Notes1,
                AccountNumber = x.AccountNumber,
                Terms = x.Terms,
                TermNotes = x.TermNotes,
                SendMethod = x.SendMethod,
                EmailSubject = x.EmailSubject,
                ShipTo = x.ShipTo,
                ShipViaNotes = x.ShipViaNotes,
                SignBy = x.SignBy,
                AllowDropShip = x.AllowDropShip,
                DefaultDiscount = x.DefaultDiscount,
                RecommendedPurchaseOrderDollarAmount = x.RecommendedPurchaseOrderDollarAmount,
                UserName = x.UserName,
                PasswordHash = x.PasswordHash,
                SecurityToken = x.SecurityToken,
                MustResetPassword = x.MustResetPassword,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IVendorModel> SelectFullVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IVendorModel> SelectLiteVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IVendorModel> SelectListVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityList(x, contextProfileName))!;
        }

        public static IVendorModel? SelectFirstFullVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVendorModel? SelectFirstListVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVendorModel? SelectSingleFullVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVendorModel? SelectSingleLiteVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVendorModel? SelectSingleListVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IVendorModel> results, int totalPages, int totalCount) SelectFullVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateVendorModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVendorModel> results, int totalPages, int totalCount) SelectLiteVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateVendorModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVendorModel> results, int totalPages, int totalCount) SelectListVendorAndMapToVendorModel(
            this IQueryable<Vendor> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateVendorModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IVendorModel? CreateVendorModelFromEntityFull(this IVendor? entity, string? contextProfileName)
        {
            return CreateVendorModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IVendorModel? CreateVendorModelFromEntityLite(this IVendor? entity, string? contextProfileName)
        {
            return CreateVendorModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IVendorModel? CreateVendorModelFromEntityList(this IVendor? entity, string? contextProfileName)
        {
            return CreateVendorModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IVendorModel? CreateVendorModelFromEntity(
            this IVendor? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IVendorModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonVendor ? ((AnonVendor)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Vendor's Properties
                    // Vendor's Related Objects
                    model.Contact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.Contact, contextProfileName);
                    model.MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingDollarAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingDollarAmountBufferProduct);
                    model.MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingQuantityAmountBufferProduct);
                    model.MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderDollarAmountBufferCategory, contextProfileName);
                    model.MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderDollarAmountBufferProduct);
                    model.MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderQuantityAmountBufferProduct);
                    // Vendor's Associated Objects
                    model.Accounts = (entity is AnonVendor ? ((AnonVendor)entity).Accounts : entity.Accounts)?.Where(x => x.Active).Select(x => ModelMapperForVendorAccount.CreateVendorAccountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Brands = (entity is AnonVendor ? ((AnonVendor)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandVendor.CreateBrandVendorModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Franchises = (entity is AnonVendor ? ((AnonVendor)entity).Franchises : entity.Franchises)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseVendor.CreateFranchiseVendorModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonVendor ? ((AnonVendor)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForVendorImage.CreateVendorImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Manufacturers = (entity is AnonVendor ? ((AnonVendor)entity).Manufacturers : entity.Manufacturers)?.Where(x => x.Active).Select(x => ModelMapperForVendorManufacturer.CreateVendorManufacturerModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Products = (entity is AnonVendor ? ((AnonVendor)entity).Products : entity.Products)?.Where(x => x.Active).Select(x => ModelMapperForVendorProduct.CreateVendorProductModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Shipments = (entity is AnonVendor ? ((AnonVendor)entity).Shipments : entity.Shipments)?.Where(x => x.Active).Select(x => ModelMapperForShipment.CreateShipmentModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateVendorModelFromEntityHooksFull != null) { model = CreateVendorModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Vendor's Properties
                    model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingDollarAmountWarningMessage = entity.MinimumForFreeShippingDollarAmountWarningMessage;
                    model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingQuantityAmountWarningMessage = entity.MinimumForFreeShippingQuantityAmountWarningMessage;
                    model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderDollarAmountOverrideFeeWarningMessage = entity.MinimumOrderDollarAmountOverrideFeeWarningMessage;
                    model.MinimumOrderDollarAmountWarningMessage = entity.MinimumOrderDollarAmountWarningMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeWarningMessage = entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
                    model.MinimumOrderQuantityAmountWarningMessage = entity.MinimumOrderQuantityAmountWarningMessage;
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForVendorType.CreateVendorTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Vendor's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Vendor's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVendorModelFromEntityHooksLite != null) { model = CreateVendorModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Vendor's Properties
                    model.AccountNumber = entity.AccountNumber;
                    model.AllowDropShip = entity.AllowDropShip;
                    model.DefaultDiscount = entity.DefaultDiscount;
                    model.EmailSubject = entity.EmailSubject;
                    model.MinimumForFreeShippingDollarAmount = entity.MinimumForFreeShippingDollarAmount;
                    model.MinimumForFreeShippingDollarAmountAfter = entity.MinimumForFreeShippingDollarAmountAfter;
                    model.MinimumForFreeShippingQuantityAmount = entity.MinimumForFreeShippingQuantityAmount;
                    model.MinimumForFreeShippingQuantityAmountAfter = entity.MinimumForFreeShippingQuantityAmountAfter;
                    model.MinimumOrderDollarAmount = entity.MinimumOrderDollarAmount;
                    model.MinimumOrderDollarAmountAfter = entity.MinimumOrderDollarAmountAfter;
                    model.MinimumOrderDollarAmountOverrideFee = entity.MinimumOrderDollarAmountOverrideFee;
                    model.MinimumOrderDollarAmountOverrideFeeIsPercent = entity.MinimumOrderDollarAmountOverrideFeeIsPercent;
                    model.MinimumOrderQuantityAmount = entity.MinimumOrderQuantityAmount;
                    model.MinimumOrderQuantityAmountAfter = entity.MinimumOrderQuantityAmountAfter;
                    model.MinimumOrderQuantityAmountOverrideFee = entity.MinimumOrderQuantityAmountOverrideFee;
                    model.MinimumOrderQuantityAmountOverrideFeeIsPercent = entity.MinimumOrderQuantityAmountOverrideFeeIsPercent;
                    model.MustResetPassword = entity.MustResetPassword;
                    model.Notes1 = entity.Notes1;
                    model.PasswordHash = entity.PasswordHash;
                    model.RecommendedPurchaseOrderDollarAmount = entity.RecommendedPurchaseOrderDollarAmount;
                    model.SecurityToken = entity.SecurityToken;
                    model.SendMethod = entity.SendMethod;
                    model.ShipTo = entity.ShipTo;
                    model.ShipViaNotes = entity.ShipViaNotes;
                    model.SignBy = entity.SignBy;
                    model.TermNotes = entity.TermNotes;
                    model.Terms = entity.Terms;
                    model.UserName = entity.UserName;
                    // Vendor's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ContactID = entity.ContactID;
                    model.ContactKey = entity.Contact?.CustomKey;
                    model.ContactPhone = entity.Contact?.Phone1;
                    model.ContactFax = entity.Contact?.Fax1;
                    model.ContactEmail = entity.Contact?.Email1;
                    model.ContactFirstName = entity.Contact?.FirstName;
                    model.ContactLastName = entity.Contact?.LastName;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryID = entity.MinimumForFreeShippingDollarAmountBufferCategoryID;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryKey = entity.MinimumForFreeShippingDollarAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryName = entity.MinimumForFreeShippingDollarAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingDollarAmountBufferProductID = entity.MinimumForFreeShippingDollarAmountBufferProductID;
                    model.MinimumForFreeShippingDollarAmountBufferProductKey = entity.MinimumForFreeShippingDollarAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferProductName = entity.MinimumForFreeShippingDollarAmountBufferProduct?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryID = entity.MinimumForFreeShippingQuantityAmountBufferCategoryID;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryKey = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryName = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferProductID = entity.MinimumForFreeShippingQuantityAmountBufferProductID;
                    model.MinimumForFreeShippingQuantityAmountBufferProductKey = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferProductName = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.Name;
                    model.MinimumOrderDollarAmountBufferCategoryID = entity.MinimumOrderDollarAmountBufferCategoryID;
                    model.MinimumOrderDollarAmountBufferCategoryKey = entity.MinimumOrderDollarAmountBufferCategory?.CustomKey;
                    model.MinimumOrderDollarAmountBufferCategoryName = entity.MinimumOrderDollarAmountBufferCategory?.Name;
                    model.MinimumOrderDollarAmountBufferProductID = entity.MinimumOrderDollarAmountBufferProductID;
                    model.MinimumOrderDollarAmountBufferProductKey = entity.MinimumOrderDollarAmountBufferProduct?.CustomKey;
                    model.MinimumOrderDollarAmountBufferProductName = entity.MinimumOrderDollarAmountBufferProduct?.Name;
                    model.MinimumOrderQuantityAmountBufferCategoryID = entity.MinimumOrderQuantityAmountBufferCategoryID;
                    model.MinimumOrderQuantityAmountBufferCategoryKey = entity.MinimumOrderQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferCategoryName = entity.MinimumOrderQuantityAmountBufferCategory?.Name;
                    model.MinimumOrderQuantityAmountBufferProductID = entity.MinimumOrderQuantityAmountBufferProductID;
                    model.MinimumOrderQuantityAmountBufferProductKey = entity.MinimumOrderQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferProductName = entity.MinimumOrderQuantityAmountBufferProduct?.Name;
                    // Vendor's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVendorModelFromEntityHooksList != null) { model = CreateVendorModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
