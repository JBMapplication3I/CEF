// <autogenerated>
// <copyright file="Mapping.Vendors.VendorAccount.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Vendors section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForVendorAccount
    {
        public sealed class AnonVendorAccount : VendorAccount
        {
            // public new Vendor? Master { get; set; }
        }

        public static readonly Func<VendorAccount?, string?, IVendorAccountModel?> MapVendorAccountModelFromEntityFull = CreateVendorAccountModelFromEntityFull;

        public static readonly Func<VendorAccount?, string?, IVendorAccountModel?> MapVendorAccountModelFromEntityLite = CreateVendorAccountModelFromEntityLite;

        public static readonly Func<VendorAccount?, string?, IVendorAccountModel?> MapVendorAccountModelFromEntityList = CreateVendorAccountModelFromEntityList;

        public static Func<IVendorAccount, IVendorAccountModel, string?, IVendorAccountModel>? CreateVendorAccountModelFromEntityHooksFull { get; set; }

        public static Func<IVendorAccount, IVendorAccountModel, string?, IVendorAccountModel>? CreateVendorAccountModelFromEntityHooksLite { get; set; }

        public static Func<IVendorAccount, IVendorAccountModel, string?, IVendorAccountModel>? CreateVendorAccountModelFromEntityHooksList { get; set; }

        public static Expression<Func<VendorAccount, AnonVendorAccount>>? PreBuiltVendorAccountSQLSelectorFull { get; set; }

        public static Expression<Func<VendorAccount, AnonVendorAccount>>? PreBuiltVendorAccountSQLSelectorLite { get; set; }

        public static Expression<Func<VendorAccount, AnonVendorAccount>>? PreBuiltVendorAccountSQLSelectorList { get; set; }

        /// <summary>An <see cref="IVendorAccountModel"/> extension method that creates a(n) <see cref="VendorAccount"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="VendorAccount"/> entity.</returns>
        public static IVendorAccount CreateVendorAccountEntity(
            this IVendorAccountModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IVendorAccountModel, VendorAccount>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateVendorAccountFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IVendorAccountModel"/> extension method that updates a(n) <see cref="VendorAccount"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="VendorAccount"/> entity.</returns>
        public static IVendorAccount UpdateVendorAccountFromModel(
            this IVendorAccount entity,
            IVendorAccountModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // VendorAccount's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenVendorAccountSQLSelectorFull()
        {
            PreBuiltVendorAccountSQLSelectorFull = x => x == null ? null! : new AnonVendorAccount
            {
                MasterID = x.MasterID,
                Master = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVendorAccountSQLSelectorLite()
        {
            PreBuiltVendorAccountSQLSelectorLite = x => x == null ? null! : new AnonVendorAccount
            {
                MasterID = x.MasterID,
                Master = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenVendorAccountSQLSelectorList()
        {
            PreBuiltVendorAccountSQLSelectorList = x => x == null ? null! : new AnonVendorAccount
            {
                MasterID = x.MasterID,
                Master = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IVendorAccountModel> SelectFullVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorAccountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IVendorAccountModel> SelectLiteVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorAccountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IVendorAccountModel> SelectListVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltVendorAccountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityList(x, contextProfileName))!;
        }

        public static IVendorAccountModel? SelectFirstFullVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorAccountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVendorAccountModel? SelectFirstListVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorAccountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IVendorAccountModel? SelectSingleFullVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorAccountSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVendorAccountModel? SelectSingleLiteVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorAccountSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IVendorAccountModel? SelectSingleListVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltVendorAccountSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateVendorAccountModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IVendorAccountModel> results, int totalPages, int totalCount) SelectFullVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorAccountSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateVendorAccountModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVendorAccountModel> results, int totalPages, int totalCount) SelectLiteVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorAccountSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateVendorAccountModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IVendorAccountModel> results, int totalPages, int totalCount) SelectListVendorAccountAndMapToVendorAccountModel(
            this IQueryable<VendorAccount> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltVendorAccountSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltVendorAccountSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateVendorAccountModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IVendorAccountModel? CreateVendorAccountModelFromEntityFull(this IVendorAccount? entity, string? contextProfileName)
        {
            return CreateVendorAccountModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IVendorAccountModel? CreateVendorAccountModelFromEntityLite(this IVendorAccount? entity, string? contextProfileName)
        {
            return CreateVendorAccountModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IVendorAccountModel? CreateVendorAccountModelFromEntityList(this IVendorAccount? entity, string? contextProfileName)
        {
            return CreateVendorAccountModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IVendorAccountModel? CreateVendorAccountModelFromEntity(
            this IVendorAccount? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IVendorAccountModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // VendorAccount's Properties
                    // VendorAccount's Related Objects
                    // VendorAccount's Associated Objects
                    // Additional Mappings
                    if (CreateVendorAccountModelFromEntityHooksFull != null) { model = CreateVendorAccountModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // VendorAccount's Properties
                    // VendorAccount's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Slave = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Slave, contextProfileName);
                    // VendorAccount's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVendorAccountModelFromEntityHooksLite != null) { model = CreateVendorAccountModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // VendorAccount's Properties
                    // VendorAccount's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    // VendorAccount's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateVendorAccountModelFromEntityHooksList != null) { model = CreateVendorAccountModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
