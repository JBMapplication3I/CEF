// <autogenerated>
// <copyright file="Mapping.Payments.MembershipLevel.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Payments section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForMembershipLevel
    {
        public sealed class AnonMembershipLevel : MembershipLevel
        {
            public new IEnumerable<MembershipAdZoneAccessByLevel>? MembershipAdZoneAccessByLevels { get; set; }
        }

        public static readonly Func<MembershipLevel?, string?, IMembershipLevelModel?> MapMembershipLevelModelFromEntityFull = CreateMembershipLevelModelFromEntityFull;

        public static readonly Func<MembershipLevel?, string?, IMembershipLevelModel?> MapMembershipLevelModelFromEntityLite = CreateMembershipLevelModelFromEntityLite;

        public static readonly Func<MembershipLevel?, string?, IMembershipLevelModel?> MapMembershipLevelModelFromEntityList = CreateMembershipLevelModelFromEntityList;

        public static Func<IMembershipLevel, IMembershipLevelModel, string?, IMembershipLevelModel>? CreateMembershipLevelModelFromEntityHooksFull { get; set; }

        public static Func<IMembershipLevel, IMembershipLevelModel, string?, IMembershipLevelModel>? CreateMembershipLevelModelFromEntityHooksLite { get; set; }

        public static Func<IMembershipLevel, IMembershipLevelModel, string?, IMembershipLevelModel>? CreateMembershipLevelModelFromEntityHooksList { get; set; }

        public static Expression<Func<MembershipLevel, AnonMembershipLevel>>? PreBuiltMembershipLevelSQLSelectorFull { get; set; }

        public static Expression<Func<MembershipLevel, AnonMembershipLevel>>? PreBuiltMembershipLevelSQLSelectorLite { get; set; }

        public static Expression<Func<MembershipLevel, AnonMembershipLevel>>? PreBuiltMembershipLevelSQLSelectorList { get; set; }

        /// <summary>An <see cref="IMembershipLevelModel"/> extension method that creates a(n) <see cref="MembershipLevel"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="MembershipLevel"/> entity.</returns>
        public static IMembershipLevel CreateMembershipLevelEntity(
            this IMembershipLevelModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityTypableBase<IMembershipLevelModel, MembershipLevel>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateMembershipLevelFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IMembershipLevelModel"/> extension method that updates a(n) <see cref="MembershipLevel"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="MembershipLevel"/> entity.</returns>
        public static IMembershipLevel UpdateMembershipLevelFromModel(
            this IMembershipLevel entity,
            IMembershipLevelModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapTypableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // MembershipLevel Properties
            entity.RolesApplied = model.RolesApplied;
            // MembershipLevel's Related Objects
            // MembershipLevel's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenMembershipLevelSQLSelectorFull()
        {
            PreBuiltMembershipLevelSQLSelectorFull = x => x == null ? null! : new AnonMembershipLevel
            {
                RolesApplied = x.RolesApplied,
                MembershipID = x.MembershipID,
                Membership = ModelMapperForMembership.PreBuiltMembershipSQLSelectorList.Expand().Compile().Invoke(x.Membership!),
                MembershipAdZoneAccessByLevels = x.MembershipAdZoneAccessByLevels!.Where(y => y.Active).Select(ModelMapperForMembershipAdZoneAccessByLevel.PreBuiltMembershipAdZoneAccessByLevelSQLSelectorList.Expand().Compile()).ToList(),
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenMembershipLevelSQLSelectorLite()
        {
            PreBuiltMembershipLevelSQLSelectorLite = x => x == null ? null! : new AnonMembershipLevel
            {
                RolesApplied = x.RolesApplied,
                MembershipID = x.MembershipID,
                Membership = ModelMapperForMembership.PreBuiltMembershipSQLSelectorList.Expand().Compile().Invoke(x.Membership!),
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenMembershipLevelSQLSelectorList()
        {
            PreBuiltMembershipLevelSQLSelectorList = x => x == null ? null! : new AnonMembershipLevel
            {
                RolesApplied = x.RolesApplied,
                MembershipID = x.MembershipID,
                Membership = ModelMapperForMembership.PreBuiltMembershipSQLSelectorList.Expand().Compile().Invoke(x.Membership!), // For Flattening Properties (List)
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IMembershipLevelModel> SelectFullMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMembershipLevelSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IMembershipLevelModel> SelectLiteMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMembershipLevelSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IMembershipLevelModel> SelectListMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMembershipLevelSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityList(x, contextProfileName))!;
        }

        public static IMembershipLevelModel? SelectFirstFullMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipLevelSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IMembershipLevelModel? SelectFirstListMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipLevelSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IMembershipLevelModel? SelectSingleFullMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipLevelSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IMembershipLevelModel? SelectSingleLiteMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipLevelSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IMembershipLevelModel? SelectSingleListMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipLevelSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMembershipLevelModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IMembershipLevelModel> results, int totalPages, int totalCount) SelectFullMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMembershipLevelSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateMembershipLevelModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IMembershipLevelModel> results, int totalPages, int totalCount) SelectLiteMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMembershipLevelSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateMembershipLevelModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IMembershipLevelModel> results, int totalPages, int totalCount) SelectListMembershipLevelAndMapToMembershipLevelModel(
            this IQueryable<MembershipLevel> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipLevelSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMembershipLevelSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateMembershipLevelModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IMembershipLevelModel? CreateMembershipLevelModelFromEntityFull(this IMembershipLevel? entity, string? contextProfileName)
        {
            return CreateMembershipLevelModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IMembershipLevelModel? CreateMembershipLevelModelFromEntityLite(this IMembershipLevel? entity, string? contextProfileName)
        {
            return CreateMembershipLevelModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IMembershipLevelModel? CreateMembershipLevelModelFromEntityList(this IMembershipLevel? entity, string? contextProfileName)
        {
            return CreateMembershipLevelModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IMembershipLevelModel? CreateMembershipLevelModelFromEntity(
            this IMembershipLevel? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapTypableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IMembershipLevelModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // MembershipLevel's Properties
                    // MembershipLevel's Related Objects
                    model.Membership = ModelMapperForMembership.CreateMembershipModelFromEntityLite(entity.Membership, contextProfileName);
                    // MembershipLevel's Associated Objects
                    model.MembershipAdZoneAccessByLevels = (entity is AnonMembershipLevel ? ((AnonMembershipLevel)entity).MembershipAdZoneAccessByLevels : entity.MembershipAdZoneAccessByLevels)?.Where(x => x.Active).Select(x => ModelMapperForMembershipAdZoneAccessByLevel.CreateMembershipAdZoneAccessByLevelModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateMembershipLevelModelFromEntityHooksFull != null) { model = CreateMembershipLevelModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // MembershipLevel's Properties
                    // MembershipLevel's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // MembershipLevel's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateMembershipLevelModelFromEntityHooksLite != null) { model = CreateMembershipLevelModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // MembershipLevel's Properties
                    model.RolesApplied = entity.RolesApplied;
                    // MembershipLevel's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MembershipID = entity.MembershipID;
                    model.MembershipKey = entity.Membership?.CustomKey;
                    model.MembershipName = entity.Membership?.Name;
                    // MembershipLevel's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateMembershipLevelModelFromEntityHooksList != null) { model = CreateMembershipLevelModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
