// <autogenerated>
// <copyright file="Mapping.Payments.Wallet.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Payments section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForWallet
    {
        public sealed class AnonWallet : Wallet
        {
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Wallet?, string?, IWalletModel?> MapWalletModelFromEntityFull = CreateWalletModelFromEntityFull;

        public static readonly Func<Wallet?, string?, IWalletModel?> MapWalletModelFromEntityLite = CreateWalletModelFromEntityLite;

        public static readonly Func<Wallet?, string?, IWalletModel?> MapWalletModelFromEntityList = CreateWalletModelFromEntityList;

        public static Func<IWallet, IWalletModel, string?, IWalletModel>? CreateWalletModelFromEntityHooksFull { get; set; }

        public static Func<IWallet, IWalletModel, string?, IWalletModel>? CreateWalletModelFromEntityHooksLite { get; set; }

        public static Func<IWallet, IWalletModel, string?, IWalletModel>? CreateWalletModelFromEntityHooksList { get; set; }

        public static Expression<Func<Wallet, AnonWallet>>? PreBuiltWalletSQLSelectorFull { get; set; }

        public static Expression<Func<Wallet, AnonWallet>>? PreBuiltWalletSQLSelectorLite { get; set; }

        public static Expression<Func<Wallet, AnonWallet>>? PreBuiltWalletSQLSelectorList { get; set; }

        /// <summary>An <see cref="IWalletModel"/> extension method that creates a(n) <see cref="Wallet"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Wallet"/> entity.</returns>
        public static IWallet CreateWalletEntity(
            this IWalletModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IWalletModel, Wallet>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateWalletFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IWalletModel"/> extension method that updates a(n) <see cref="Wallet"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Wallet"/> entity.</returns>
        public static IWallet UpdateWalletFromModel(
            this IWallet entity,
            IWalletModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Wallet Properties
            entity.AccountNumber = model.AccountNumber;
            entity.BankName = model.BankName;
            entity.CardHolderName = model.CardHolderName;
            entity.CardType = model.CardType;
            entity.CreditCardNumber = model.CreditCardNumber;
            entity.ExpirationMonth = model.ExpirationMonth;
            entity.ExpirationYear = model.ExpirationYear;
            entity.IsDefault = model.IsDefault;
            entity.RoutingNumber = model.RoutingNumber;
            entity.Token = model.Token;
            // Wallet's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenWalletSQLSelectorFull()
        {
            PreBuiltWalletSQLSelectorFull = x => x == null ? null! : new AnonWallet
            {
                CreditCardNumber = x.CreditCardNumber,
                AccountNumber = x.AccountNumber,
                RoutingNumber = x.RoutingNumber,
                BankName = x.BankName,
                ExpirationMonth = x.ExpirationMonth,
                ExpirationYear = x.ExpirationYear,
                Token = x.Token,
                CardType = x.CardType,
                CardHolderName = x.CardHolderName,
                IsDefault = x.IsDefault,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                AccountContactID = x.AccountContactID,
                AccountContact = ModelMapperForAccountContact.PreBuiltAccountContactSQLSelectorList.Expand().Compile().Invoke(x.AccountContact!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenWalletSQLSelectorLite()
        {
            PreBuiltWalletSQLSelectorLite = x => x == null ? null! : new AnonWallet
            {
                CreditCardNumber = x.CreditCardNumber,
                AccountNumber = x.AccountNumber,
                RoutingNumber = x.RoutingNumber,
                BankName = x.BankName,
                ExpirationMonth = x.ExpirationMonth,
                ExpirationYear = x.ExpirationYear,
                Token = x.Token,
                CardType = x.CardType,
                CardHolderName = x.CardHolderName,
                IsDefault = x.IsDefault,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                AccountContactID = x.AccountContactID,
                AccountContact = ModelMapperForAccountContact.PreBuiltAccountContactSQLSelectorList.Expand().Compile().Invoke(x.AccountContact!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenWalletSQLSelectorList()
        {
            PreBuiltWalletSQLSelectorList = x => x == null ? null! : new AnonWallet
            {
                CreditCardNumber = x.CreditCardNumber,
                AccountNumber = x.AccountNumber,
                RoutingNumber = x.RoutingNumber,
                BankName = x.BankName,
                ExpirationMonth = x.ExpirationMonth,
                ExpirationYear = x.ExpirationYear,
                Token = x.Token,
                CardType = x.CardType,
                CardHolderName = x.CardHolderName,
                IsDefault = x.IsDefault,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!), // For Flattening Properties (List)
                AccountContactID = x.AccountContactID,
                AccountContact = ModelMapperForAccountContact.PreBuiltAccountContactSQLSelectorList.Expand().Compile().Invoke(x.AccountContact!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IWalletModel> SelectFullWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltWalletSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IWalletModel> SelectLiteWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltWalletSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IWalletModel> SelectListWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltWalletSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityList(x, contextProfileName))!;
        }

        public static IWalletModel? SelectFirstFullWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltWalletSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IWalletModel? SelectFirstListWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltWalletSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IWalletModel? SelectSingleFullWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltWalletSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IWalletModel? SelectSingleLiteWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltWalletSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IWalletModel? SelectSingleListWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltWalletSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateWalletModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IWalletModel> results, int totalPages, int totalCount) SelectFullWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltWalletSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateWalletModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IWalletModel> results, int totalPages, int totalCount) SelectLiteWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltWalletSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateWalletModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IWalletModel> results, int totalPages, int totalCount) SelectListWalletAndMapToWalletModel(
            this IQueryable<Wallet> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltWalletSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltWalletSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateWalletModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IWalletModel? CreateWalletModelFromEntityFull(this IWallet? entity, string? contextProfileName)
        {
            return CreateWalletModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IWalletModel? CreateWalletModelFromEntityLite(this IWallet? entity, string? contextProfileName)
        {
            return CreateWalletModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IWalletModel? CreateWalletModelFromEntityList(this IWallet? entity, string? contextProfileName)
        {
            return CreateWalletModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IWalletModel? CreateWalletModelFromEntity(
            this IWallet? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IWalletModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Wallet's Properties
                    // Wallet's Related Objects
                    model.AccountContact = ModelMapperForAccountContact.CreateAccountContactModelFromEntityLite(entity.AccountContact, contextProfileName);
                    model.Currency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.Currency, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // Wallet's Associated Objects
                    // Additional Mappings
                    if (CreateWalletModelFromEntityHooksFull != null) { model = CreateWalletModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Wallet's Properties
                    // Wallet's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Wallet's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateWalletModelFromEntityHooksLite != null) { model = CreateWalletModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Wallet's Properties
                    model.AccountNumber = entity.AccountNumber;
                    model.BankName = entity.BankName;
                    model.CardHolderName = entity.CardHolderName;
                    model.CardType = entity.CardType;
                    model.CreditCardNumber = entity.CreditCardNumber;
                    model.ExpirationMonth = entity.ExpirationMonth;
                    model.ExpirationYear = entity.ExpirationYear;
                    model.IsDefault = entity.IsDefault;
                    model.RoutingNumber = entity.RoutingNumber;
                    model.Token = entity.Token;
                    // Wallet's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountContactID = entity.AccountContactID;
                    model.AccountContactKey = entity.AccountContact?.CustomKey;
                    model.AccountContactName = entity.AccountContact?.Name;
                    model.CurrencyID = entity.CurrencyID;
                    model.CurrencyKey = entity.Currency?.CustomKey;
                    model.CurrencyName = entity.Currency?.Name;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    // Wallet's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateWalletModelFromEntityHooksList != null) { model = CreateWalletModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
