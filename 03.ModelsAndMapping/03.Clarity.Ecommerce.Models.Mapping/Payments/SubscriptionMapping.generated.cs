// <autogenerated>
// <copyright file="Mapping.Payments.Subscription.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Payments section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForSubscription
    {
        public sealed class AnonSubscription : Subscription
        {
            public new IEnumerable<SubscriptionHistory>? SubscriptionHistories { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Subscription?, string?, ISubscriptionModel?> MapSubscriptionModelFromEntityFull = CreateSubscriptionModelFromEntityFull;

        public static readonly Func<Subscription?, string?, ISubscriptionModel?> MapSubscriptionModelFromEntityLite = CreateSubscriptionModelFromEntityLite;

        public static readonly Func<Subscription?, string?, ISubscriptionModel?> MapSubscriptionModelFromEntityList = CreateSubscriptionModelFromEntityList;

        public static Func<ISubscription, ISubscriptionModel, string?, ISubscriptionModel>? CreateSubscriptionModelFromEntityHooksFull { get; set; }

        public static Func<ISubscription, ISubscriptionModel, string?, ISubscriptionModel>? CreateSubscriptionModelFromEntityHooksLite { get; set; }

        public static Func<ISubscription, ISubscriptionModel, string?, ISubscriptionModel>? CreateSubscriptionModelFromEntityHooksList { get; set; }

        public static Expression<Func<Subscription, AnonSubscription>>? PreBuiltSubscriptionSQLSelectorFull { get; set; }

        public static Expression<Func<Subscription, AnonSubscription>>? PreBuiltSubscriptionSQLSelectorLite { get; set; }

        public static Expression<Func<Subscription, AnonSubscription>>? PreBuiltSubscriptionSQLSelectorList { get; set; }

        /// <summary>An <see cref="ISubscriptionModel"/> extension method that creates a(n) <see cref="Subscription"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Subscription"/> entity.</returns>
        public static ISubscription CreateSubscriptionEntity(
            this ISubscriptionModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ISubscriptionModel, Subscription>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateSubscriptionFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ISubscriptionModel"/> extension method that updates a(n) <see cref="Subscription"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Subscription"/> entity.</returns>
        public static ISubscription UpdateSubscriptionFromModel(
            this ISubscription entity,
            ISubscriptionModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Subscription Properties
            entity.AutoRenew = model.AutoRenew;
            entity.BillingPeriodsPaid = model.BillingPeriodsPaid;
            entity.BillingPeriodsTotal = model.BillingPeriodsTotal;
            entity.CanUpgrade = model.CanUpgrade;
            entity.CreditUponUpgrade = model.CreditUponUpgrade;
            entity.EndsOn = model.EndsOn;
            entity.Fee = model.Fee;
            entity.IsAutoRefill = model.IsAutoRefill;
            entity.LastPaidDate = model.LastPaidDate;
            entity.MemberSince = model.MemberSince;
            entity.Memo = model.Memo;
            entity.StartsOn = model.StartsOn;
            // Subscription's Related Objects
            // Subscription's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenSubscriptionSQLSelectorFull()
        {
            PreBuiltSubscriptionSQLSelectorFull = x => x == null ? null! : new AnonSubscription
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSubscriptionType.PreBuiltSubscriptionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForSubscriptionStatus.PreBuiltSubscriptionStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                MemberSince = x.MemberSince,
                StartsOn = x.StartsOn,
                EndsOn = x.EndsOn,
                LastPaidDate = x.LastPaidDate,
                BillingPeriodsTotal = x.BillingPeriodsTotal,
                BillingPeriodsPaid = x.BillingPeriodsPaid,
                Fee = x.Fee,
                CreditUponUpgrade = x.CreditUponUpgrade,
                AutoRenew = x.AutoRenew,
                CanUpgrade = x.CanUpgrade,
                IsAutoRefill = x.IsAutoRefill,
                Memo = x.Memo,
                ProductMembershipLevelID = x.ProductMembershipLevelID,
                ProductMembershipLevel = ModelMapperForProductMembershipLevel.PreBuiltProductMembershipLevelSQLSelectorList.Expand().Compile().Invoke(x.ProductMembershipLevel!),
                RepeatTypeID = x.RepeatTypeID,
                RepeatType = ModelMapperForRepeatType.PreBuiltRepeatTypeSQLSelectorList.Expand().Compile().Invoke(x.RepeatType!),
                SalesInvoiceID = x.SalesInvoiceID,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                SalesGroupID = x.SalesGroupID,
                SalesOrderID = x.SalesOrderID,
                ProductSubscriptionTypeID = x.ProductSubscriptionTypeID,
                ProductSubscriptionType = ModelMapperForProductSubscriptionType.PreBuiltProductSubscriptionTypeSQLSelectorList.Expand().Compile().Invoke(x.ProductSubscriptionType!),
                SubscriptionHistories = x.SubscriptionHistories!.Where(y => y.Active).Select(ModelMapperForSubscriptionHistory.PreBuiltSubscriptionHistorySQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSubscriptionSQLSelectorLite()
        {
            PreBuiltSubscriptionSQLSelectorLite = x => x == null ? null! : new AnonSubscription
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSubscriptionType.PreBuiltSubscriptionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForSubscriptionStatus.PreBuiltSubscriptionStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                MemberSince = x.MemberSince,
                StartsOn = x.StartsOn,
                EndsOn = x.EndsOn,
                LastPaidDate = x.LastPaidDate,
                BillingPeriodsTotal = x.BillingPeriodsTotal,
                BillingPeriodsPaid = x.BillingPeriodsPaid,
                Fee = x.Fee,
                CreditUponUpgrade = x.CreditUponUpgrade,
                AutoRenew = x.AutoRenew,
                CanUpgrade = x.CanUpgrade,
                IsAutoRefill = x.IsAutoRefill,
                Memo = x.Memo,
                ProductMembershipLevelID = x.ProductMembershipLevelID,
                ProductMembershipLevel = ModelMapperForProductMembershipLevel.PreBuiltProductMembershipLevelSQLSelectorList.Expand().Compile().Invoke(x.ProductMembershipLevel!),
                RepeatTypeID = x.RepeatTypeID,
                RepeatType = ModelMapperForRepeatType.PreBuiltRepeatTypeSQLSelectorList.Expand().Compile().Invoke(x.RepeatType!),
                SalesInvoiceID = x.SalesInvoiceID,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!),
                SalesGroupID = x.SalesGroupID,
                SalesOrderID = x.SalesOrderID,
                ProductSubscriptionTypeID = x.ProductSubscriptionTypeID,
                ProductSubscriptionType = ModelMapperForProductSubscriptionType.PreBuiltProductSubscriptionTypeSQLSelectorList.Expand().Compile().Invoke(x.ProductSubscriptionType!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenSubscriptionSQLSelectorList()
        {
            PreBuiltSubscriptionSQLSelectorList = x => x == null ? null! : new AnonSubscription
            {
                TypeID = x.TypeID,
                Type = ModelMapperForSubscriptionType.PreBuiltSubscriptionTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForSubscriptionStatus.PreBuiltSubscriptionStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                MemberSince = x.MemberSince,
                StartsOn = x.StartsOn,
                EndsOn = x.EndsOn,
                LastPaidDate = x.LastPaidDate,
                BillingPeriodsTotal = x.BillingPeriodsTotal,
                BillingPeriodsPaid = x.BillingPeriodsPaid,
                Fee = x.Fee,
                CreditUponUpgrade = x.CreditUponUpgrade,
                AutoRenew = x.AutoRenew,
                CanUpgrade = x.CanUpgrade,
                IsAutoRefill = x.IsAutoRefill,
                Memo = x.Memo,
                ProductMembershipLevelID = x.ProductMembershipLevelID,
                ProductMembershipLevel = ModelMapperForProductMembershipLevel.PreBuiltProductMembershipLevelSQLSelectorList.Expand().Compile().Invoke(x.ProductMembershipLevel!), // For Flattening Properties (List)
                RepeatTypeID = x.RepeatTypeID,
                RepeatType = ModelMapperForRepeatType.PreBuiltRepeatTypeSQLSelectorList.Expand().Compile().Invoke(x.RepeatType!), // For Flattening Properties (List)
                SalesInvoiceID = x.SalesInvoiceID,
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                AccountID = x.AccountID,
                Account = ModelMapperForAccount.PreBuiltAccountSQLSelectorList.Expand().Compile().Invoke(x.Account!), // For Flattening Properties (List)
                SalesGroupID = x.SalesGroupID,
                SalesOrderID = x.SalesOrderID,
                ProductSubscriptionTypeID = x.ProductSubscriptionTypeID,
                ProductSubscriptionType = ModelMapperForProductSubscriptionType.PreBuiltProductSubscriptionTypeSQLSelectorList.Expand().Compile().Invoke(x.ProductSubscriptionType!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ISubscriptionModel> SelectFullSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSubscriptionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ISubscriptionModel> SelectLiteSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSubscriptionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ISubscriptionModel> SelectListSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltSubscriptionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityList(x, contextProfileName))!;
        }

        public static ISubscriptionModel? SelectFirstFullSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSubscriptionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISubscriptionModel? SelectFirstListSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSubscriptionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ISubscriptionModel? SelectSingleFullSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSubscriptionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISubscriptionModel? SelectSingleLiteSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSubscriptionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ISubscriptionModel? SelectSingleListSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltSubscriptionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateSubscriptionModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ISubscriptionModel> results, int totalPages, int totalCount) SelectFullSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSubscriptionSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateSubscriptionModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISubscriptionModel> results, int totalPages, int totalCount) SelectLiteSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSubscriptionSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateSubscriptionModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ISubscriptionModel> results, int totalPages, int totalCount) SelectListSubscriptionAndMapToSubscriptionModel(
            this IQueryable<Subscription> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltSubscriptionSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltSubscriptionSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateSubscriptionModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ISubscriptionModel? CreateSubscriptionModelFromEntityFull(this ISubscription? entity, string? contextProfileName)
        {
            return CreateSubscriptionModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ISubscriptionModel? CreateSubscriptionModelFromEntityLite(this ISubscription? entity, string? contextProfileName)
        {
            return CreateSubscriptionModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ISubscriptionModel? CreateSubscriptionModelFromEntityList(this ISubscription? entity, string? contextProfileName)
        {
            return CreateSubscriptionModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ISubscriptionModel? CreateSubscriptionModelFromEntity(
            this ISubscription? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ISubscriptionModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForSubscriptionType.CreateSubscriptionTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForSubscriptionStatus.CreateSubscriptionStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Subscription's Properties
                    // Subscription's Related Objects
                    model.Account = ModelMapperForAccount.CreateAccountModelFromEntityLite(entity.Account, contextProfileName);
                    model.ProductMembershipLevel = ModelMapperForProductMembershipLevel.CreateProductMembershipLevelModelFromEntityLite(entity.ProductMembershipLevel, contextProfileName);
                    model.ProductSubscriptionType = ModelMapperForProductSubscriptionType.CreateProductSubscriptionTypeModelFromEntityLite(entity.ProductSubscriptionType, contextProfileName);
                    model.RepeatType = ModelMapperForRepeatType.CreateRepeatTypeModelFromEntityLite(entity.RepeatType, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    // Subscription's Associated Objects
                    model.SubscriptionHistories = (entity is AnonSubscription ? ((AnonSubscription)entity).SubscriptionHistories : entity.SubscriptionHistories)?.Where(x => x.Active).Select(x => ModelMapperForSubscriptionHistory.CreateSubscriptionHistoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateSubscriptionModelFromEntityHooksFull != null) { model = CreateSubscriptionModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Subscription's Properties
                    // Subscription's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Subscription's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSubscriptionModelFromEntityHooksLite != null) { model = CreateSubscriptionModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Subscription's Properties
                    model.AutoRenew = entity.AutoRenew;
                    model.BillingPeriodsPaid = entity.BillingPeriodsPaid;
                    model.BillingPeriodsTotal = entity.BillingPeriodsTotal;
                    model.CanUpgrade = entity.CanUpgrade;
                    model.CreditUponUpgrade = entity.CreditUponUpgrade;
                    model.EndsOn = entity.EndsOn;
                    model.Fee = entity.Fee;
                    model.IsAutoRefill = entity.IsAutoRefill;
                    model.LastPaidDate = entity.LastPaidDate;
                    model.MemberSince = entity.MemberSince;
                    model.Memo = entity.Memo;
                    model.StartsOn = entity.StartsOn;
                    // Subscription's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.AccountID = entity.AccountID;
                    model.AccountKey = entity.Account?.CustomKey;
                    model.AccountName = entity.Account?.Name;
                    model.ProductMembershipLevelID = entity.ProductMembershipLevelID;
                    model.ProductMembershipLevelKey = entity.ProductMembershipLevel?.CustomKey;
                    model.ProductSubscriptionTypeID = entity.ProductSubscriptionTypeID;
                    model.ProductSubscriptionTypeKey = entity.ProductSubscriptionType?.CustomKey;
                    model.RepeatTypeID = entity.RepeatTypeID;
                    model.RepeatTypeKey = entity.RepeatType?.CustomKey;
                    model.RepeatTypeName = entity.RepeatType?.Name;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    // Subscription's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateSubscriptionModelFromEntityHooksList != null) { model = CreateSubscriptionModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
