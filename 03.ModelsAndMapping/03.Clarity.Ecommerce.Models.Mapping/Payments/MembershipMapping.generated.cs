// <autogenerated>
// <copyright file="Mapping.Payments.Membership.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Payments section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForMembership
    {
        public sealed class AnonMembership : Membership
        {
            public new IEnumerable<MembershipLevel>? MembershipLevels { get; set; }
            public new IEnumerable<MembershipRepeatType>? MembershipRepeatTypes { get; set; }
        }

        public static readonly Func<Membership?, string?, IMembershipModel?> MapMembershipModelFromEntityFull = CreateMembershipModelFromEntityFull;

        public static readonly Func<Membership?, string?, IMembershipModel?> MapMembershipModelFromEntityLite = CreateMembershipModelFromEntityLite;

        public static readonly Func<Membership?, string?, IMembershipModel?> MapMembershipModelFromEntityList = CreateMembershipModelFromEntityList;

        public static Func<IMembership, IMembershipModel, string?, IMembershipModel>? CreateMembershipModelFromEntityHooksFull { get; set; }

        public static Func<IMembership, IMembershipModel, string?, IMembershipModel>? CreateMembershipModelFromEntityHooksLite { get; set; }

        public static Func<IMembership, IMembershipModel, string?, IMembershipModel>? CreateMembershipModelFromEntityHooksList { get; set; }

        public static Expression<Func<Membership, AnonMembership>>? PreBuiltMembershipSQLSelectorFull { get; set; }

        public static Expression<Func<Membership, AnonMembership>>? PreBuiltMembershipSQLSelectorLite { get; set; }

        public static Expression<Func<Membership, AnonMembership>>? PreBuiltMembershipSQLSelectorList { get; set; }

        /// <summary>An <see cref="IMembershipModel"/> extension method that creates a(n) <see cref="Membership"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Membership"/> entity.</returns>
        public static IMembership CreateMembershipEntity(
            this IMembershipModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityTypableBase<IMembershipModel, Membership>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateMembershipFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IMembershipModel"/> extension method that updates a(n) <see cref="Membership"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Membership"/> entity.</returns>
        public static IMembership UpdateMembershipFromModel(
            this IMembership entity,
            IMembershipModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapTypableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Membership Properties
            entity.IsContractual = model.IsContractual;
            // Membership's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenMembershipSQLSelectorFull()
        {
            PreBuiltMembershipSQLSelectorFull = x => x == null ? null! : new AnonMembership
            {
                IsContractual = x.IsContractual,
                MembershipLevels = x.MembershipLevels!.Where(y => y.Active).Select(ModelMapperForMembershipLevel.PreBuiltMembershipLevelSQLSelectorList.Expand().Compile()).ToList(),
                MembershipRepeatTypes = x.MembershipRepeatTypes!.Where(y => y.Active).Select(ModelMapperForMembershipRepeatType.PreBuiltMembershipRepeatTypeSQLSelectorList.Expand().Compile()).ToList(),
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenMembershipSQLSelectorLite()
        {
            PreBuiltMembershipSQLSelectorLite = x => x == null ? null! : new AnonMembership
            {
                IsContractual = x.IsContractual,
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenMembershipSQLSelectorList()
        {
            PreBuiltMembershipSQLSelectorList = x => x == null ? null! : new AnonMembership
            {
                IsContractual = x.IsContractual,
                DisplayName = x.DisplayName,
                SortOrder = x.SortOrder,
                TranslationKey = x.TranslationKey,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IMembershipModel> SelectFullMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMembershipSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IMembershipModel> SelectLiteMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMembershipSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IMembershipModel> SelectListMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltMembershipSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityList(x, contextProfileName))!;
        }

        public static IMembershipModel? SelectFirstFullMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IMembershipModel? SelectFirstListMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IMembershipModel? SelectSingleFullMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IMembershipModel? SelectSingleLiteMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IMembershipModel? SelectSingleListMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltMembershipSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateMembershipModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IMembershipModel> results, int totalPages, int totalCount) SelectFullMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMembershipSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateMembershipModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IMembershipModel> results, int totalPages, int totalCount) SelectLiteMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMembershipSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateMembershipModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IMembershipModel> results, int totalPages, int totalCount) SelectListMembershipAndMapToMembershipModel(
            this IQueryable<Membership> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltMembershipSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltMembershipSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateMembershipModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IMembershipModel? CreateMembershipModelFromEntityFull(this IMembership? entity, string? contextProfileName)
        {
            return CreateMembershipModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IMembershipModel? CreateMembershipModelFromEntityLite(this IMembership? entity, string? contextProfileName)
        {
            return CreateMembershipModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IMembershipModel? CreateMembershipModelFromEntityList(this IMembership? entity, string? contextProfileName)
        {
            return CreateMembershipModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IMembershipModel? CreateMembershipModelFromEntity(
            this IMembership? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapTypableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IMembershipModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Membership's Properties
                    // Membership's Related Objects
                    // Membership's Associated Objects
                    model.MembershipLevels = (entity is AnonMembership ? ((AnonMembership)entity).MembershipLevels : entity.MembershipLevels)?.Where(x => x.Active).Select(x => ModelMapperForMembershipLevel.CreateMembershipLevelModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.MembershipRepeatTypes = (entity is AnonMembership ? ((AnonMembership)entity).MembershipRepeatTypes : entity.MembershipRepeatTypes)?.Where(x => x.Active).Select(x => ModelMapperForMembershipRepeatType.CreateMembershipRepeatTypeModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateMembershipModelFromEntityHooksFull != null) { model = CreateMembershipModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Membership's Properties
                    // Membership's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Membership's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateMembershipModelFromEntityHooksLite != null) { model = CreateMembershipModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Membership's Properties
                    model.IsContractual = entity.IsContractual;
                    // Membership's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Membership's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateMembershipModelFromEntityHooksList != null) { model = CreateMembershipModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
