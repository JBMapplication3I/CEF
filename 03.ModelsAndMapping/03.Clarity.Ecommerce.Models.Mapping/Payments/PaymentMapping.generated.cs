// <autogenerated>
// <copyright file="Mapping.Payments.Payment.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Payments section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPayment
    {
        public sealed class AnonPayment : Payment
        {
        }

        public static readonly Func<Payment?, string?, IPaymentModel?> MapPaymentModelFromEntityFull = CreatePaymentModelFromEntityFull;

        public static readonly Func<Payment?, string?, IPaymentModel?> MapPaymentModelFromEntityLite = CreatePaymentModelFromEntityLite;

        public static readonly Func<Payment?, string?, IPaymentModel?> MapPaymentModelFromEntityList = CreatePaymentModelFromEntityList;

        public static Func<IPayment, IPaymentModel, string?, IPaymentModel>? CreatePaymentModelFromEntityHooksFull { get; set; }

        public static Func<IPayment, IPaymentModel, string?, IPaymentModel>? CreatePaymentModelFromEntityHooksLite { get; set; }

        public static Func<IPayment, IPaymentModel, string?, IPaymentModel>? CreatePaymentModelFromEntityHooksList { get; set; }

        public static Expression<Func<Payment, AnonPayment>>? PreBuiltPaymentSQLSelectorFull { get; set; }

        public static Expression<Func<Payment, AnonPayment>>? PreBuiltPaymentSQLSelectorLite { get; set; }

        public static Expression<Func<Payment, AnonPayment>>? PreBuiltPaymentSQLSelectorList { get; set; }

        /// <summary>An <see cref="IPaymentModel"/> extension method that creates a(n) <see cref="Payment"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Payment"/> entity.</returns>
        public static IPayment CreatePaymentEntity(
            this IPaymentModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IPaymentModel, Payment>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePaymentFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IPaymentModel"/> extension method that updates a(n) <see cref="Payment"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Payment"/> entity.</returns>
        public static IPayment UpdatePaymentFromModel(
            this IPayment entity,
            IPaymentModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Payment Properties
            entity.AccountNumberLast4 = model.AccountNumberLast4;
            entity.Amount = model.Amount;
            entity.AuthCode = model.AuthCode;
            entity.AuthDate = model.AuthDate;
            entity.Authorized = model.Authorized;
            entity.BankName = model.BankName;
            entity.CardMask = model.CardMask;
            entity.CardTypeID = model.CardTypeID;
            entity.CheckNumber = model.CheckNumber;
            entity.CVV = model.CVV;
            entity.ExpirationMonth = model.ExpirationMonth;
            entity.ExpirationYear = model.ExpirationYear;
            entity.ExternalCustomerID = model.ExternalCustomerID;
            entity.ExternalPaymentID = model.ExternalPaymentID;
            entity.Last4CardDigits = model.Last4CardDigits;
            entity.PaymentData = model.PaymentData;
            entity.Received = model.Received;
            entity.ReceivedDate = model.ReceivedDate;
            entity.ReferenceNo = model.ReferenceNo;
            entity.Response = model.Response;
            entity.RoutingNumberLast4 = model.RoutingNumberLast4;
            entity.StatusDate = model.StatusDate;
            entity.TransactionNumber = model.TransactionNumber;
            // Payment's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPaymentSQLSelectorFull()
        {
            PreBuiltPaymentSQLSelectorFull = x => x == null ? null! : new AnonPayment
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Amount = x.Amount,
                AuthCode = x.AuthCode,
                ReferenceNo = x.ReferenceNo,
                TransactionNumber = x.TransactionNumber,
                StatusDate = x.StatusDate,
                Authorized = x.Authorized,
                AuthDate = x.AuthDate,
                Received = x.Received,
                ReceivedDate = x.ReceivedDate,
                Response = x.Response,
                ExternalCustomerID = x.ExternalCustomerID,
                ExternalPaymentID = x.ExternalPaymentID,
                PaymentData = x.PaymentData,
                CardTypeID = x.CardTypeID,
                CardMask = x.CardMask,
                CVV = x.CVV,
                Last4CardDigits = x.Last4CardDigits,
                ExpirationMonth = x.ExpirationMonth,
                ExpirationYear = x.ExpirationYear,
                CheckNumber = x.CheckNumber,
                RoutingNumberLast4 = x.RoutingNumberLast4,
                AccountNumberLast4 = x.AccountNumberLast4,
                BankName = x.BankName,
                TypeID = x.TypeID,
                Type = ModelMapperForPaymentType.PreBuiltPaymentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForPaymentStatus.PreBuiltPaymentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                PaymentMethodID = x.PaymentMethodID,
                PaymentMethod = ModelMapperForPaymentMethod.PreBuiltPaymentMethodSQLSelectorList.Expand().Compile().Invoke(x.PaymentMethod!),
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPaymentSQLSelectorLite()
        {
            PreBuiltPaymentSQLSelectorLite = x => x == null ? null! : new AnonPayment
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!),
                Amount = x.Amount,
                AuthCode = x.AuthCode,
                ReferenceNo = x.ReferenceNo,
                TransactionNumber = x.TransactionNumber,
                StatusDate = x.StatusDate,
                Authorized = x.Authorized,
                AuthDate = x.AuthDate,
                Received = x.Received,
                ReceivedDate = x.ReceivedDate,
                Response = x.Response,
                ExternalCustomerID = x.ExternalCustomerID,
                ExternalPaymentID = x.ExternalPaymentID,
                PaymentData = x.PaymentData,
                CardTypeID = x.CardTypeID,
                CardMask = x.CardMask,
                CVV = x.CVV,
                Last4CardDigits = x.Last4CardDigits,
                ExpirationMonth = x.ExpirationMonth,
                ExpirationYear = x.ExpirationYear,
                CheckNumber = x.CheckNumber,
                RoutingNumberLast4 = x.RoutingNumberLast4,
                AccountNumberLast4 = x.AccountNumberLast4,
                BankName = x.BankName,
                TypeID = x.TypeID,
                Type = ModelMapperForPaymentType.PreBuiltPaymentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                StatusID = x.StatusID,
                Status = ModelMapperForPaymentStatus.PreBuiltPaymentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!),
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!),
                PaymentMethodID = x.PaymentMethodID,
                PaymentMethod = ModelMapperForPaymentMethod.PreBuiltPaymentMethodSQLSelectorList.Expand().Compile().Invoke(x.PaymentMethod!),
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPaymentSQLSelectorList()
        {
            PreBuiltPaymentSQLSelectorList = x => x == null ? null! : new AnonPayment
            {
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                BrandID = x.BrandID,
                Brand = ModelMapperForBrand.PreBuiltBrandSQLSelectorList.Expand().Compile().Invoke(x.Brand!), // For Flattening Properties (List)
                Amount = x.Amount,
                AuthCode = x.AuthCode,
                ReferenceNo = x.ReferenceNo,
                TransactionNumber = x.TransactionNumber,
                StatusDate = x.StatusDate,
                Authorized = x.Authorized,
                AuthDate = x.AuthDate,
                Received = x.Received,
                ReceivedDate = x.ReceivedDate,
                Response = x.Response,
                ExternalCustomerID = x.ExternalCustomerID,
                ExternalPaymentID = x.ExternalPaymentID,
                PaymentData = x.PaymentData,
                CardTypeID = x.CardTypeID,
                CardMask = x.CardMask,
                CVV = x.CVV,
                Last4CardDigits = x.Last4CardDigits,
                ExpirationMonth = x.ExpirationMonth,
                ExpirationYear = x.ExpirationYear,
                CheckNumber = x.CheckNumber,
                RoutingNumberLast4 = x.RoutingNumberLast4,
                AccountNumberLast4 = x.AccountNumberLast4,
                BankName = x.BankName,
                TypeID = x.TypeID,
                Type = ModelMapperForPaymentType.PreBuiltPaymentTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                StatusID = x.StatusID,
                Status = ModelMapperForPaymentStatus.PreBuiltPaymentStatusSQLSelectorList.Expand().Compile().Invoke(x.Status!), // For Flattening Properties (List)
                BillingContactID = x.BillingContactID,
                BillingContact = ModelMapperForContact.PreBuiltContactSQLSelectorList.Expand().Compile().Invoke(x.BillingContact!), // For Flattening Properties (List)
                PaymentMethodID = x.PaymentMethodID,
                PaymentMethod = ModelMapperForPaymentMethod.PreBuiltPaymentMethodSQLSelectorList.Expand().Compile().Invoke(x.PaymentMethod!), // For Flattening Properties (List)
                CurrencyID = x.CurrencyID,
                Currency = ModelMapperForCurrency.PreBuiltCurrencySQLSelectorList.Expand().Compile().Invoke(x.Currency!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IPaymentModel> SelectFullPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPaymentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IPaymentModel> SelectLitePaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPaymentSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IPaymentModel> SelectListPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPaymentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityList(x, contextProfileName))!;
        }

        public static IPaymentModel? SelectFirstFullPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPaymentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPaymentModel? SelectFirstListPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPaymentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPaymentModel? SelectSingleFullPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPaymentSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPaymentModel? SelectSingleLitePaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPaymentSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPaymentModel? SelectSingleListPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPaymentSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePaymentModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IPaymentModel> results, int totalPages, int totalCount) SelectFullPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPaymentSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePaymentModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPaymentModel> results, int totalPages, int totalCount) SelectLitePaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPaymentSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePaymentModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPaymentModel> results, int totalPages, int totalCount) SelectListPaymentAndMapToPaymentModel(
            this IQueryable<Payment> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPaymentSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPaymentSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePaymentModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IPaymentModel? CreatePaymentModelFromEntityFull(this IPayment? entity, string? contextProfileName)
        {
            return CreatePaymentModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IPaymentModel? CreatePaymentModelFromEntityLite(this IPayment? entity, string? contextProfileName)
        {
            return CreatePaymentModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IPaymentModel? CreatePaymentModelFromEntityList(this IPayment? entity, string? contextProfileName)
        {
            return CreatePaymentModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IPaymentModel? CreatePaymentModelFromEntity(
            this IPayment? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IPaymentModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveATypeBase Properties
                    model.Type = ModelMapperForPaymentType.CreatePaymentTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // IHaveAStatusBase Properties
                    model.Status = ModelMapperForPaymentStatus.CreatePaymentStatusModelFromEntityLite(entity.Status, contextProfileName);
                    // Payment's Properties
                    // Payment's Related Objects
                    model.BillingContact = ModelMapperForContact.CreateContactModelFromEntityLite(entity.BillingContact, contextProfileName);
                    model.Brand = ModelMapperForBrand.CreateBrandModelFromEntityLite(entity.Brand, contextProfileName);
                    model.Currency = ModelMapperForCurrency.CreateCurrencyModelFromEntityLite(entity.Currency, contextProfileName);
                    model.PaymentMethod = ModelMapperForPaymentMethod.CreatePaymentMethodModelFromEntityLite(entity.PaymentMethod, contextProfileName);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    // Payment's Associated Objects
                    // Additional Mappings
                    if (CreatePaymentModelFromEntityHooksFull != null) { model = CreatePaymentModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Payment's Properties
                    // Payment's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Payment's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePaymentModelFromEntityHooksLite != null) { model = CreatePaymentModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveAStatusBase Properties
                    model.StatusID = entity.StatusID;
                    if (entity.Status != null)
                    {
                        model.StatusKey = entity.Status.CustomKey;
                        model.StatusName = entity.Status.Name;
                        model.StatusDisplayName = entity.Status.DisplayName;
                        model.StatusTranslationKey = entity.Status.TranslationKey;
                        model.StatusSortOrder = entity.Status.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Payment's Properties
                    model.AccountNumberLast4 = entity.AccountNumberLast4;
                    model.Amount = entity.Amount;
                    model.AuthCode = entity.AuthCode;
                    model.AuthDate = entity.AuthDate;
                    model.Authorized = entity.Authorized;
                    model.BankName = entity.BankName;
                    model.CardMask = entity.CardMask;
                    model.CardTypeID = entity.CardTypeID;
                    model.CheckNumber = entity.CheckNumber;
                    model.CVV = entity.CVV;
                    model.ExpirationMonth = entity.ExpirationMonth;
                    model.ExpirationYear = entity.ExpirationYear;
                    model.ExternalCustomerID = entity.ExternalCustomerID;
                    model.ExternalPaymentID = entity.ExternalPaymentID;
                    model.Last4CardDigits = entity.Last4CardDigits;
                    model.PaymentData = entity.PaymentData;
                    model.Received = entity.Received;
                    model.ReceivedDate = entity.ReceivedDate;
                    model.ReferenceNo = entity.ReferenceNo;
                    model.Response = entity.Response;
                    model.RoutingNumberLast4 = entity.RoutingNumberLast4;
                    model.StatusDate = entity.StatusDate;
                    model.TransactionNumber = entity.TransactionNumber;
                    // Payment's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.BillingContactID = entity.BillingContactID;
                    model.BillingContactKey = entity.BillingContact?.CustomKey;
                    model.BrandID = entity.BrandID;
                    model.BrandKey = entity.Brand?.CustomKey;
                    model.BrandName = entity.Brand?.Name;
                    model.CurrencyID = entity.CurrencyID;
                    model.CurrencyKey = entity.Currency?.CustomKey;
                    model.CurrencyName = entity.Currency?.Name;
                    model.PaymentMethodID = entity.PaymentMethodID;
                    model.PaymentMethodKey = entity.PaymentMethod?.CustomKey;
                    model.PaymentMethodName = entity.PaymentMethod?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.StoreSeoUrl = entity.Store?.SeoUrl;
                    // Payment's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePaymentModelFromEntityHooksList != null) { model = CreatePaymentModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
