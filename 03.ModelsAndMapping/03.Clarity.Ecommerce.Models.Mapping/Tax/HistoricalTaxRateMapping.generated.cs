// <autogenerated>
// <copyright file="Mapping.Tax.HistoricalTaxRate.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Tax section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForHistoricalTaxRate
    {
        public sealed class AnonHistoricalTaxRate : HistoricalTaxRate
        {
        }

        public static readonly Func<HistoricalTaxRate?, string?, IHistoricalTaxRateModel?> MapHistoricalTaxRateModelFromEntityFull = CreateHistoricalTaxRateModelFromEntityFull;

        public static readonly Func<HistoricalTaxRate?, string?, IHistoricalTaxRateModel?> MapHistoricalTaxRateModelFromEntityLite = CreateHistoricalTaxRateModelFromEntityLite;

        public static readonly Func<HistoricalTaxRate?, string?, IHistoricalTaxRateModel?> MapHistoricalTaxRateModelFromEntityList = CreateHistoricalTaxRateModelFromEntityList;

        public static Func<IHistoricalTaxRate, IHistoricalTaxRateModel, string?, IHistoricalTaxRateModel>? CreateHistoricalTaxRateModelFromEntityHooksFull { get; set; }

        public static Func<IHistoricalTaxRate, IHistoricalTaxRateModel, string?, IHistoricalTaxRateModel>? CreateHistoricalTaxRateModelFromEntityHooksLite { get; set; }

        public static Func<IHistoricalTaxRate, IHistoricalTaxRateModel, string?, IHistoricalTaxRateModel>? CreateHistoricalTaxRateModelFromEntityHooksList { get; set; }

        public static Expression<Func<HistoricalTaxRate, AnonHistoricalTaxRate>>? PreBuiltHistoricalTaxRateSQLSelectorFull { get; set; }

        public static Expression<Func<HistoricalTaxRate, AnonHistoricalTaxRate>>? PreBuiltHistoricalTaxRateSQLSelectorLite { get; set; }

        public static Expression<Func<HistoricalTaxRate, AnonHistoricalTaxRate>>? PreBuiltHistoricalTaxRateSQLSelectorList { get; set; }

        /// <summary>An <see cref="IHistoricalTaxRateModel"/> extension method that creates a(n) <see cref="HistoricalTaxRate"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="HistoricalTaxRate"/> entity.</returns>
        public static IHistoricalTaxRate CreateHistoricalTaxRateEntity(
            this IHistoricalTaxRateModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IHistoricalTaxRateModel, HistoricalTaxRate>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateHistoricalTaxRateFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IHistoricalTaxRateModel"/> extension method that updates a(n) <see cref="HistoricalTaxRate"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="HistoricalTaxRate"/> entity.</returns>
        public static IHistoricalTaxRate UpdateHistoricalTaxRateFromModel(
            this IHistoricalTaxRate entity,
            IHistoricalTaxRateModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // HistoricalTaxRate Properties
            entity.CartHash = model.CartHash;
            entity.CountryLevelRate = model.CountryLevelRate;
            entity.DistrictLevelRate = model.DistrictLevelRate;
            entity.OnDate = model.OnDate;
            entity.Provider = model.Provider;
            entity.Rate = model.Rate;
            entity.RegionLevelRate = model.RegionLevelRate;
            entity.SerializedRequest = model.SerializedRequest;
            entity.SerializedResponse = model.SerializedResponse;
            entity.TotalAmount = model.TotalAmount;
            entity.TotalTax = model.TotalTax;
            entity.TotalTaxable = model.TotalTaxable;
            entity.TotalTaxCalculated = model.TotalTaxCalculated;
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenHistoricalTaxRateSQLSelectorFull()
        {
            PreBuiltHistoricalTaxRateSQLSelectorFull = x => x == null ? null! : new AnonHistoricalTaxRate
            {
                Provider = x.Provider,
                CartHash = x.CartHash,
                OnDate = x.OnDate,
                CountryLevelRate = x.CountryLevelRate,
                RegionLevelRate = x.RegionLevelRate,
                DistrictLevelRate = x.DistrictLevelRate,
                TotalAmount = x.TotalAmount,
                TotalTaxable = x.TotalTaxable,
                TotalTax = x.TotalTax,
                TotalTaxCalculated = x.TotalTaxCalculated,
                Rate = x.Rate,
                SerializedRequest = x.SerializedRequest,
                SerializedResponse = x.SerializedResponse,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenHistoricalTaxRateSQLSelectorLite()
        {
            PreBuiltHistoricalTaxRateSQLSelectorLite = x => x == null ? null! : new AnonHistoricalTaxRate
            {
                Provider = x.Provider,
                CartHash = x.CartHash,
                OnDate = x.OnDate,
                CountryLevelRate = x.CountryLevelRate,
                RegionLevelRate = x.RegionLevelRate,
                DistrictLevelRate = x.DistrictLevelRate,
                TotalAmount = x.TotalAmount,
                TotalTaxable = x.TotalTaxable,
                TotalTax = x.TotalTax,
                TotalTaxCalculated = x.TotalTaxCalculated,
                Rate = x.Rate,
                SerializedRequest = x.SerializedRequest,
                SerializedResponse = x.SerializedResponse,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenHistoricalTaxRateSQLSelectorList()
        {
            PreBuiltHistoricalTaxRateSQLSelectorList = x => x == null ? null! : new AnonHistoricalTaxRate
            {
                Provider = x.Provider,
                CartHash = x.CartHash,
                OnDate = x.OnDate,
                CountryLevelRate = x.CountryLevelRate,
                RegionLevelRate = x.RegionLevelRate,
                DistrictLevelRate = x.DistrictLevelRate,
                TotalAmount = x.TotalAmount,
                TotalTaxable = x.TotalTaxable,
                TotalTax = x.TotalTax,
                TotalTaxCalculated = x.TotalTaxCalculated,
                Rate = x.Rate,
                SerializedRequest = x.SerializedRequest,
                SerializedResponse = x.SerializedResponse,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IHistoricalTaxRateModel> SelectFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltHistoricalTaxRateSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IHistoricalTaxRateModel> SelectLiteHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltHistoricalTaxRateSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IHistoricalTaxRateModel> SelectListHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltHistoricalTaxRateSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityList(x, contextProfileName))!;
        }

        public static IHistoricalTaxRateModel? SelectFirstFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalTaxRateSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IHistoricalTaxRateModel? SelectFirstListHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalTaxRateSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IHistoricalTaxRateModel? SelectSingleFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalTaxRateSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IHistoricalTaxRateModel? SelectSingleLiteHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalTaxRateSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IHistoricalTaxRateModel? SelectSingleListHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalTaxRateSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateHistoricalTaxRateModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IHistoricalTaxRateModel> results, int totalPages, int totalCount) SelectFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltHistoricalTaxRateSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateHistoricalTaxRateModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IHistoricalTaxRateModel> results, int totalPages, int totalCount) SelectLiteHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltHistoricalTaxRateSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateHistoricalTaxRateModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IHistoricalTaxRateModel> results, int totalPages, int totalCount) SelectListHistoricalTaxRateAndMapToHistoricalTaxRateModel(
            this IQueryable<HistoricalTaxRate> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalTaxRateSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltHistoricalTaxRateSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateHistoricalTaxRateModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IHistoricalTaxRateModel? CreateHistoricalTaxRateModelFromEntityFull(this IHistoricalTaxRate? entity, string? contextProfileName)
        {
            return CreateHistoricalTaxRateModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IHistoricalTaxRateModel? CreateHistoricalTaxRateModelFromEntityLite(this IHistoricalTaxRate? entity, string? contextProfileName)
        {
            return CreateHistoricalTaxRateModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IHistoricalTaxRateModel? CreateHistoricalTaxRateModelFromEntityList(this IHistoricalTaxRate? entity, string? contextProfileName)
        {
            return CreateHistoricalTaxRateModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IHistoricalTaxRateModel? CreateHistoricalTaxRateModelFromEntity(
            this IHistoricalTaxRate? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IHistoricalTaxRateModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // HistoricalTaxRate's Properties
                    // HistoricalTaxRate's Related Objects
                    // HistoricalTaxRate's Associated Objects
                    // Additional Mappings
                    if (CreateHistoricalTaxRateModelFromEntityHooksFull != null) { model = CreateHistoricalTaxRateModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // HistoricalTaxRate's Properties
                    // HistoricalTaxRate's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // HistoricalTaxRate's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateHistoricalTaxRateModelFromEntityHooksLite != null) { model = CreateHistoricalTaxRateModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // HistoricalTaxRate's Properties
                    model.CartHash = entity.CartHash;
                    model.CountryLevelRate = entity.CountryLevelRate;
                    model.DistrictLevelRate = entity.DistrictLevelRate;
                    model.OnDate = entity.OnDate;
                    model.Provider = entity.Provider;
                    model.Rate = entity.Rate;
                    model.RegionLevelRate = entity.RegionLevelRate;
                    model.SerializedRequest = entity.SerializedRequest;
                    model.SerializedResponse = entity.SerializedResponse;
                    model.TotalAmount = entity.TotalAmount;
                    model.TotalTax = entity.TotalTax;
                    model.TotalTaxable = entity.TotalTaxable;
                    model.TotalTaxCalculated = entity.TotalTaxCalculated;
                    // HistoricalTaxRate's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // HistoricalTaxRate's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateHistoricalTaxRateModelFromEntityHooksList != null) { model = CreateHistoricalTaxRateModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
