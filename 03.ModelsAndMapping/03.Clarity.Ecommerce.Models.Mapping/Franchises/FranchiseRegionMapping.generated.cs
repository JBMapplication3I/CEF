// <autogenerated>
// <copyright file="Mapping.Franchises.FranchiseRegion.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Franchises section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForFranchiseRegion
    {
        public sealed class AnonFranchiseRegion : FranchiseRegion
        {
            // public new Franchise? Master { get; set; }
        }

        public static readonly Func<FranchiseRegion?, string?, IFranchiseRegionModel?> MapFranchiseRegionModelFromEntityFull = CreateFranchiseRegionModelFromEntityFull;

        public static readonly Func<FranchiseRegion?, string?, IFranchiseRegionModel?> MapFranchiseRegionModelFromEntityLite = CreateFranchiseRegionModelFromEntityLite;

        public static readonly Func<FranchiseRegion?, string?, IFranchiseRegionModel?> MapFranchiseRegionModelFromEntityList = CreateFranchiseRegionModelFromEntityList;

        public static Func<IFranchiseRegion, IFranchiseRegionModel, string?, IFranchiseRegionModel>? CreateFranchiseRegionModelFromEntityHooksFull { get; set; }

        public static Func<IFranchiseRegion, IFranchiseRegionModel, string?, IFranchiseRegionModel>? CreateFranchiseRegionModelFromEntityHooksLite { get; set; }

        public static Func<IFranchiseRegion, IFranchiseRegionModel, string?, IFranchiseRegionModel>? CreateFranchiseRegionModelFromEntityHooksList { get; set; }

        public static Expression<Func<FranchiseRegion, AnonFranchiseRegion>>? PreBuiltFranchiseRegionSQLSelectorFull { get; set; }

        public static Expression<Func<FranchiseRegion, AnonFranchiseRegion>>? PreBuiltFranchiseRegionSQLSelectorLite { get; set; }

        public static Expression<Func<FranchiseRegion, AnonFranchiseRegion>>? PreBuiltFranchiseRegionSQLSelectorList { get; set; }

        /// <summary>An <see cref="IFranchiseRegionModel"/> extension method that creates a(n) <see cref="FranchiseRegion"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="FranchiseRegion"/> entity.</returns>
        public static IFranchiseRegion CreateFranchiseRegionEntity(
            this IFranchiseRegionModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IFranchiseRegionModel, FranchiseRegion>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateFranchiseRegionFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IFranchiseRegionModel"/> extension method that updates a(n) <see cref="FranchiseRegion"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="FranchiseRegion"/> entity.</returns>
        public static IFranchiseRegion UpdateFranchiseRegionFromModel(
            this IFranchiseRegion entity,
            IFranchiseRegionModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapIAmARelationshipTableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // FranchiseRegion's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenFranchiseRegionSQLSelectorFull()
        {
            PreBuiltFranchiseRegionSQLSelectorFull = x => x == null ? null! : new AnonFranchiseRegion
            {
                MasterID = x.MasterID,
                Master = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenFranchiseRegionSQLSelectorLite()
        {
            PreBuiltFranchiseRegionSQLSelectorLite = x => x == null ? null! : new AnonFranchiseRegion
            {
                MasterID = x.MasterID,
                Master = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Master!),
                SlaveID = x.SlaveID,
                Slave = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Slave!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenFranchiseRegionSQLSelectorList()
        {
            PreBuiltFranchiseRegionSQLSelectorList = x => x == null ? null! : new AnonFranchiseRegion
            {
                MasterID = x.MasterID,
                Master = ModelMapperForFranchise.PreBuiltFranchiseSQLSelectorList.Expand().Compile().Invoke(x.Master!), // For Flattening Properties (List)
                SlaveID = x.SlaveID,
                Slave = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Slave!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IFranchiseRegionModel> SelectFullFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFranchiseRegionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IFranchiseRegionModel> SelectLiteFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFranchiseRegionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IFranchiseRegionModel> SelectListFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFranchiseRegionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityList(x, contextProfileName))!;
        }

        public static IFranchiseRegionModel? SelectFirstFullFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseRegionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IFranchiseRegionModel? SelectFirstListFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseRegionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IFranchiseRegionModel? SelectSingleFullFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseRegionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IFranchiseRegionModel? SelectSingleLiteFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseRegionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IFranchiseRegionModel? SelectSingleListFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseRegionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFranchiseRegionModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IFranchiseRegionModel> results, int totalPages, int totalCount) SelectFullFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFranchiseRegionSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateFranchiseRegionModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IFranchiseRegionModel> results, int totalPages, int totalCount) SelectLiteFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFranchiseRegionSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateFranchiseRegionModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IFranchiseRegionModel> results, int totalPages, int totalCount) SelectListFranchiseRegionAndMapToFranchiseRegionModel(
            this IQueryable<FranchiseRegion> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseRegionSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFranchiseRegionSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateFranchiseRegionModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IFranchiseRegionModel? CreateFranchiseRegionModelFromEntityFull(this IFranchiseRegion? entity, string? contextProfileName)
        {
            return CreateFranchiseRegionModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IFranchiseRegionModel? CreateFranchiseRegionModelFromEntityLite(this IFranchiseRegion? entity, string? contextProfileName)
        {
            return CreateFranchiseRegionModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IFranchiseRegionModel? CreateFranchiseRegionModelFromEntityList(this IFranchiseRegion? entity, string? contextProfileName)
        {
            return CreateFranchiseRegionModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IFranchiseRegionModel? CreateFranchiseRegionModelFromEntity(
            this IFranchiseRegion? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IFranchiseRegionModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // FranchiseRegion's Properties
                    // FranchiseRegion's Related Objects
                    // FranchiseRegion's Associated Objects
                    // Additional Mappings
                    if (CreateFranchiseRegionModelFromEntityHooksFull != null) { model = CreateFranchiseRegionModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // FranchiseRegion's Properties
                    // FranchiseRegion's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Slave = ModelMapperForRegion.CreateRegionModelFromEntityLite(entity.Slave, contextProfileName);
                    // FranchiseRegion's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateFranchiseRegionModelFromEntityHooksLite != null) { model = CreateFranchiseRegionModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // FranchiseRegion's Properties
                    // FranchiseRegion's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MasterID = entity.MasterID;
                    model.MasterKey = entity.Master?.CustomKey;
                    model.MasterName = entity.Master?.Name;
                    model.SlaveID = entity.SlaveID;
                    model.SlaveKey = entity.Slave?.CustomKey;
                    model.SlaveName = entity.Slave?.Name;
                    // FranchiseRegion's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateFranchiseRegionModelFromEntityHooksList != null) { model = CreateFranchiseRegionModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
