// <autogenerated>
// <copyright file="Mapping.Franchises.Franchise.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Franchises section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForFranchise
    {
        public sealed class AnonFranchise : Franchise
        {
            public new IEnumerable<BrandFranchise>? Brands { get; set; }
            public new IEnumerable<FranchiseAccount>? Accounts { get; set; }
            public new IEnumerable<FranchiseCountry>? FranchiseCountries { get; set; }
            public new IEnumerable<FranchiseCurrency>? FranchiseCurrencies { get; set; }
            public new IEnumerable<FranchiseDistrict>? FranchiseDistricts { get; set; }
            public new IEnumerable<FranchiseImage>? Images { get; set; }
            public new IEnumerable<FranchiseInventoryLocation>? FranchiseInventoryLocations { get; set; }
            public new IEnumerable<FranchiseLanguage>? FranchiseLanguages { get; set; }
            public new IEnumerable<FranchiseRegion>? FranchiseRegions { get; set; }
            public new IEnumerable<FranchiseSiteDomain>? FranchiseSiteDomains { get; set; }
            public new IEnumerable<FranchiseStore>? Stores { get; set; }
            public new IEnumerable<FranchiseUser>? Users { get; set; }
            public new IEnumerable<FranchiseVendor>? Vendors { get; set; }
            public new IEnumerable<Note>? Notes { get; set; }
        }

        public static readonly Func<Franchise?, string?, IFranchiseModel?> MapFranchiseModelFromEntityFull = CreateFranchiseModelFromEntityFull;

        public static readonly Func<Franchise?, string?, IFranchiseModel?> MapFranchiseModelFromEntityLite = CreateFranchiseModelFromEntityLite;

        public static readonly Func<Franchise?, string?, IFranchiseModel?> MapFranchiseModelFromEntityList = CreateFranchiseModelFromEntityList;

        public static Func<IFranchise, IFranchiseModel, string?, IFranchiseModel>? CreateFranchiseModelFromEntityHooksFull { get; set; }

        public static Func<IFranchise, IFranchiseModel, string?, IFranchiseModel>? CreateFranchiseModelFromEntityHooksLite { get; set; }

        public static Func<IFranchise, IFranchiseModel, string?, IFranchiseModel>? CreateFranchiseModelFromEntityHooksList { get; set; }

        public static Expression<Func<Franchise, AnonFranchise>>? PreBuiltFranchiseSQLSelectorFull { get; set; }

        public static Expression<Func<Franchise, AnonFranchise>>? PreBuiltFranchiseSQLSelectorLite { get; set; }

        public static Expression<Func<Franchise, AnonFranchise>>? PreBuiltFranchiseSQLSelectorList { get; set; }

        /// <summary>An <see cref="IFranchiseModel"/> extension method that creates a(n) <see cref="Franchise"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Franchise"/> entity.</returns>
        public static IFranchise CreateFranchiseEntity(
            this IFranchiseModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IFranchiseModel, Franchise>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateFranchiseFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IFranchiseModel"/> extension method that updates a(n) <see cref="Franchise"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Franchise"/> entity.</returns>
        public static IFranchise UpdateFranchiseFromModel(
            this IFranchise entity,
            IFranchiseModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Franchise Properties
            entity.MinimumForFreeShippingDollarAmount = model.MinimumForFreeShippingDollarAmount;
            entity.MinimumForFreeShippingDollarAmountAfter = model.MinimumForFreeShippingDollarAmountAfter;
            entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingDollarAmountWarningMessage = model.MinimumForFreeShippingDollarAmountWarningMessage;
            entity.MinimumForFreeShippingQuantityAmount = model.MinimumForFreeShippingQuantityAmount;
            entity.MinimumForFreeShippingQuantityAmountAfter = model.MinimumForFreeShippingQuantityAmountAfter;
            entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
            entity.MinimumForFreeShippingQuantityAmountWarningMessage = model.MinimumForFreeShippingQuantityAmountWarningMessage;
            entity.MinimumOrderDollarAmount = model.MinimumOrderDollarAmount;
            entity.MinimumOrderDollarAmountAfter = model.MinimumOrderDollarAmountAfter;
            entity.MinimumOrderDollarAmountOverrideFee = model.MinimumOrderDollarAmountOverrideFee;
            entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderDollarAmountOverrideFeeIsPercent = model.MinimumOrderDollarAmountOverrideFeeIsPercent;
            entity.MinimumOrderDollarAmountOverrideFeeWarningMessage = model.MinimumOrderDollarAmountOverrideFeeWarningMessage;
            entity.MinimumOrderDollarAmountWarningMessage = model.MinimumOrderDollarAmountWarningMessage;
            entity.MinimumOrderQuantityAmount = model.MinimumOrderQuantityAmount;
            entity.MinimumOrderQuantityAmountAfter = model.MinimumOrderQuantityAmountAfter;
            entity.MinimumOrderQuantityAmountOverrideFee = model.MinimumOrderQuantityAmountOverrideFee;
            entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
            entity.MinimumOrderQuantityAmountOverrideFeeIsPercent = model.MinimumOrderQuantityAmountOverrideFeeIsPercent;
            entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage = model.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
            entity.MinimumOrderQuantityAmountWarningMessage = model.MinimumOrderQuantityAmountWarningMessage;
            // Franchise's Related Objects
            // Franchise's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenFranchiseSQLSelectorFull()
        {
            PreBuiltFranchiseSQLSelectorFull = x => x == null ? null! : new AnonFranchise
            {
                TypeID = x.TypeID,
                Type = ModelMapperForFranchiseType.PreBuiltFranchiseTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                Notes = x.Notes!.Where(y => y.Active).Select(ModelMapperForNote.PreBuiltNoteSQLSelectorList.Expand().Compile()).ToList(),
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForFranchiseImage.PreBuiltFranchiseImageSQLSelectorList.Expand().Compile()).ToList(),
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                Accounts = x.Accounts!.Where(y => y.Active).Select(ModelMapperForFranchiseAccount.PreBuiltFranchiseAccountSQLSelectorList.Expand().Compile()).ToList(),
                Brands = x.Brands!.Where(y => y.Active).Select(ModelMapperForBrandFranchise.PreBuiltBrandFranchiseSQLSelectorList.Expand().Compile()).ToList(),
                Stores = x.Stores!.Where(y => y.Active).Select(ModelMapperForFranchiseStore.PreBuiltFranchiseStoreSQLSelectorList.Expand().Compile()).ToList(),
                Users = x.Users!.Where(y => y.Active).Select(ModelMapperForFranchiseUser.PreBuiltFranchiseUserSQLSelectorList.Expand().Compile()).ToList(),
                Vendors = x.Vendors!.Where(y => y.Active).Select(ModelMapperForFranchiseVendor.PreBuiltFranchiseVendorSQLSelectorList.Expand().Compile()).ToList(),
                FranchiseCurrencies = x.FranchiseCurrencies!.Where(y => y.Active).Select(ModelMapperForFranchiseCurrency.PreBuiltFranchiseCurrencySQLSelectorList.Expand().Compile()).ToList(),
                FranchiseInventoryLocations = x.FranchiseInventoryLocations!.Where(y => y.Active).Select(ModelMapperForFranchiseInventoryLocation.PreBuiltFranchiseInventoryLocationSQLSelectorList.Expand().Compile()).ToList(),
                FranchiseLanguages = x.FranchiseLanguages!.Where(y => y.Active).Select(ModelMapperForFranchiseLanguage.PreBuiltFranchiseLanguageSQLSelectorList.Expand().Compile()).ToList(),
                FranchiseSiteDomains = x.FranchiseSiteDomains!.Where(y => y.Active).Select(ModelMapperForFranchiseSiteDomain.PreBuiltFranchiseSiteDomainSQLSelectorList.Expand().Compile()).ToList(),
                FranchiseCountries = x.FranchiseCountries!.Where(y => y.Active).Select(ModelMapperForFranchiseCountry.PreBuiltFranchiseCountrySQLSelectorList.Expand().Compile()).ToList(),
                FranchiseRegions = x.FranchiseRegions!.Where(y => y.Active).Select(ModelMapperForFranchiseRegion.PreBuiltFranchiseRegionSQLSelectorList.Expand().Compile()).ToList(),
                FranchiseDistricts = x.FranchiseDistricts!.Where(y => y.Active).Select(ModelMapperForFranchiseDistrict.PreBuiltFranchiseDistrictSQLSelectorList.Expand().Compile()).ToList(),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenFranchiseSQLSelectorLite()
        {
            PreBuiltFranchiseSQLSelectorLite = x => x == null ? null! : new AnonFranchise
            {
                TypeID = x.TypeID,
                Type = ModelMapperForFranchiseType.PreBuiltFranchiseTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountWarningMessage = x.MinimumOrderDollarAmountWarningMessage,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountOverrideFeeWarningMessage = x.MinimumOrderDollarAmountOverrideFeeWarningMessage,
                MinimumOrderDollarAmountOverrideFeeAcceptedMessage = x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountWarningMessage = x.MinimumOrderQuantityAmountWarningMessage,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmountOverrideFeeWarningMessage = x.MinimumOrderQuantityAmountOverrideFeeWarningMessage,
                MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!),
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!),
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!),
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!),
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingDollarAmountWarningMessage = x.MinimumForFreeShippingDollarAmountWarningMessage,
                MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingQuantityAmountWarningMessage = x.MinimumForFreeShippingQuantityAmountWarningMessage,
                MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!),
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!),
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!),
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenFranchiseSQLSelectorList()
        {
            PreBuiltFranchiseSQLSelectorList = x => x == null ? null! : new AnonFranchise
            {
                TypeID = x.TypeID,
                Type = ModelMapperForFranchiseType.PreBuiltFranchiseTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                MinimumOrderDollarAmount = x.MinimumOrderDollarAmount,
                MinimumOrderDollarAmountAfter = x.MinimumOrderDollarAmountAfter,
                MinimumOrderDollarAmountOverrideFee = x.MinimumOrderDollarAmountOverrideFee,
                MinimumOrderDollarAmountOverrideFeeIsPercent = x.MinimumOrderDollarAmountOverrideFeeIsPercent,
                MinimumOrderQuantityAmount = x.MinimumOrderQuantityAmount,
                MinimumOrderQuantityAmountAfter = x.MinimumOrderQuantityAmountAfter,
                MinimumOrderQuantityAmountOverrideFee = x.MinimumOrderQuantityAmountOverrideFee,
                MinimumOrderQuantityAmountOverrideFeeIsPercent = x.MinimumOrderQuantityAmountOverrideFeeIsPercent,
                MinimumOrderDollarAmountBufferProductID = x.MinimumOrderDollarAmountBufferProductID,
                MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferProductID = x.MinimumOrderQuantityAmountBufferProductID,
                MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumOrderDollarAmountBufferCategoryID = x.MinimumOrderDollarAmountBufferCategoryID,
                MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumOrderQuantityAmountBufferCategoryID = x.MinimumOrderQuantityAmountBufferCategoryID,
                MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumOrderQuantityAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmount = x.MinimumForFreeShippingDollarAmount,
                MinimumForFreeShippingDollarAmountAfter = x.MinimumForFreeShippingDollarAmountAfter,
                MinimumForFreeShippingQuantityAmount = x.MinimumForFreeShippingQuantityAmount,
                MinimumForFreeShippingQuantityAmountAfter = x.MinimumForFreeShippingQuantityAmountAfter,
                MinimumForFreeShippingDollarAmountBufferProductID = x.MinimumForFreeShippingDollarAmountBufferProductID,
                MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferProductID = x.MinimumForFreeShippingQuantityAmountBufferProductID,
                MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferProduct!), // For Flattening Properties (List)
                MinimumForFreeShippingDollarAmountBufferCategoryID = x.MinimumForFreeShippingDollarAmountBufferCategoryID,
                MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingDollarAmountBufferCategory!), // For Flattening Properties (List)
                MinimumForFreeShippingQuantityAmountBufferCategoryID = x.MinimumForFreeShippingQuantityAmountBufferCategoryID,
                MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.MinimumForFreeShippingQuantityAmountBufferCategory!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IFranchiseModel> SelectFullFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFranchiseSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IFranchiseModel> SelectLiteFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFranchiseSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IFranchiseModel> SelectListFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltFranchiseSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityList(x, contextProfileName))!;
        }

        public static IFranchiseModel? SelectFirstFullFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IFranchiseModel? SelectFirstListFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IFranchiseModel? SelectSingleFullFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IFranchiseModel? SelectSingleLiteFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IFranchiseModel? SelectSingleListFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltFranchiseSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateFranchiseModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IFranchiseModel> results, int totalPages, int totalCount) SelectFullFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFranchiseSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateFranchiseModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IFranchiseModel> results, int totalPages, int totalCount) SelectLiteFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFranchiseSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateFranchiseModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IFranchiseModel> results, int totalPages, int totalCount) SelectListFranchiseAndMapToFranchiseModel(
            this IQueryable<Franchise> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltFranchiseSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltFranchiseSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateFranchiseModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IFranchiseModel? CreateFranchiseModelFromEntityFull(this IFranchise? entity, string? contextProfileName)
        {
            return CreateFranchiseModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IFranchiseModel? CreateFranchiseModelFromEntityLite(this IFranchise? entity, string? contextProfileName)
        {
            return CreateFranchiseModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IFranchiseModel? CreateFranchiseModelFromEntityList(this IFranchise? entity, string? contextProfileName)
        {
            return CreateFranchiseModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IFranchiseModel? CreateFranchiseModelFromEntity(
            this IFranchise? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IFranchiseModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // IHaveNotesBase Properties
                    model.Notes = (entity is AnonFranchise ? ((AnonFranchise)entity).Notes : entity.Notes)?.Where(x => x.Active).Select(x => ModelMapperForNote.CreateNoteModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Franchise's Properties
                    // Franchise's Related Objects
                    model.MinimumForFreeShippingDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingDollarAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingDollarAmountBufferProduct);
                    model.MinimumForFreeShippingQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumForFreeShippingQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumForFreeShippingQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumForFreeShippingQuantityAmountBufferProduct);
                    model.MinimumOrderDollarAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderDollarAmountBufferCategory, contextProfileName);
                    model.MinimumOrderDollarAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderDollarAmountBufferProduct);
                    model.MinimumOrderQuantityAmountBufferCategory = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.MinimumOrderQuantityAmountBufferCategory, contextProfileName);
                    model.MinimumOrderQuantityAmountBufferProduct = ModelMapperForProduct.MapLiteProductOldExt(entity.MinimumOrderQuantityAmountBufferProduct);
                    // Franchise's Associated Objects
                    model.Accounts = (entity is AnonFranchise ? ((AnonFranchise)entity).Accounts : entity.Accounts)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseAccount.CreateFranchiseAccountModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Brands = (entity is AnonFranchise ? ((AnonFranchise)entity).Brands : entity.Brands)?.Where(x => x.Active).Select(x => ModelMapperForBrandFranchise.CreateBrandFranchiseModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.FranchiseCountries = (entity is AnonFranchise ? ((AnonFranchise)entity).FranchiseCountries : entity.FranchiseCountries)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseCountry.CreateFranchiseCountryModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.FranchiseCurrencies = (entity is AnonFranchise ? ((AnonFranchise)entity).FranchiseCurrencies : entity.FranchiseCurrencies)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseCurrency.CreateFranchiseCurrencyModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.FranchiseDistricts = (entity is AnonFranchise ? ((AnonFranchise)entity).FranchiseDistricts : entity.FranchiseDistricts)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseDistrict.CreateFranchiseDistrictModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.FranchiseInventoryLocations = (entity is AnonFranchise ? ((AnonFranchise)entity).FranchiseInventoryLocations : entity.FranchiseInventoryLocations)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseInventoryLocation.CreateFranchiseInventoryLocationModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.FranchiseLanguages = (entity is AnonFranchise ? ((AnonFranchise)entity).FranchiseLanguages : entity.FranchiseLanguages)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseLanguage.CreateFranchiseLanguageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.FranchiseRegions = (entity is AnonFranchise ? ((AnonFranchise)entity).FranchiseRegions : entity.FranchiseRegions)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseRegion.CreateFranchiseRegionModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.FranchiseSiteDomains = (entity is AnonFranchise ? ((AnonFranchise)entity).FranchiseSiteDomains : entity.FranchiseSiteDomains)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseSiteDomain.CreateFranchiseSiteDomainModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonFranchise ? ((AnonFranchise)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseImage.CreateFranchiseImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Stores = (entity is AnonFranchise ? ((AnonFranchise)entity).Stores : entity.Stores)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseStore.CreateFranchiseStoreModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Users = (entity is AnonFranchise ? ((AnonFranchise)entity).Users : entity.Users)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseUser.CreateFranchiseUserModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Vendors = (entity is AnonFranchise ? ((AnonFranchise)entity).Vendors : entity.Vendors)?.Where(x => x.Active).Select(x => ModelMapperForFranchiseVendor.CreateFranchiseVendorModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateFranchiseModelFromEntityHooksFull != null) { model = CreateFranchiseModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Franchise's Properties
                    model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingDollarAmountWarningMessage = entity.MinimumForFreeShippingDollarAmountWarningMessage;
                    model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = entity.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                    model.MinimumForFreeShippingQuantityAmountWarningMessage = entity.MinimumForFreeShippingQuantityAmountWarningMessage;
                    model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = entity.MinimumOrderDollarAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderDollarAmountOverrideFeeWarningMessage = entity.MinimumOrderDollarAmountOverrideFeeWarningMessage;
                    model.MinimumOrderDollarAmountWarningMessage = entity.MinimumOrderDollarAmountWarningMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = entity.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                    model.MinimumOrderQuantityAmountOverrideFeeWarningMessage = entity.MinimumOrderQuantityAmountOverrideFeeWarningMessage;
                    model.MinimumOrderQuantityAmountWarningMessage = entity.MinimumOrderQuantityAmountWarningMessage;
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForFranchiseType.CreateFranchiseTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Franchise's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Franchise's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateFranchiseModelFromEntityHooksLite != null) { model = CreateFranchiseModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Franchise's Properties
                    model.MinimumForFreeShippingDollarAmount = entity.MinimumForFreeShippingDollarAmount;
                    model.MinimumForFreeShippingDollarAmountAfter = entity.MinimumForFreeShippingDollarAmountAfter;
                    model.MinimumForFreeShippingQuantityAmount = entity.MinimumForFreeShippingQuantityAmount;
                    model.MinimumForFreeShippingQuantityAmountAfter = entity.MinimumForFreeShippingQuantityAmountAfter;
                    model.MinimumOrderDollarAmount = entity.MinimumOrderDollarAmount;
                    model.MinimumOrderDollarAmountAfter = entity.MinimumOrderDollarAmountAfter;
                    model.MinimumOrderDollarAmountOverrideFee = entity.MinimumOrderDollarAmountOverrideFee;
                    model.MinimumOrderDollarAmountOverrideFeeIsPercent = entity.MinimumOrderDollarAmountOverrideFeeIsPercent;
                    model.MinimumOrderQuantityAmount = entity.MinimumOrderQuantityAmount;
                    model.MinimumOrderQuantityAmountAfter = entity.MinimumOrderQuantityAmountAfter;
                    model.MinimumOrderQuantityAmountOverrideFee = entity.MinimumOrderQuantityAmountOverrideFee;
                    model.MinimumOrderQuantityAmountOverrideFeeIsPercent = entity.MinimumOrderQuantityAmountOverrideFeeIsPercent;
                    // Franchise's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.MinimumForFreeShippingDollarAmountBufferCategoryID = entity.MinimumForFreeShippingDollarAmountBufferCategoryID;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryKey = entity.MinimumForFreeShippingDollarAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferCategoryName = entity.MinimumForFreeShippingDollarAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingDollarAmountBufferProductID = entity.MinimumForFreeShippingDollarAmountBufferProductID;
                    model.MinimumForFreeShippingDollarAmountBufferProductKey = entity.MinimumForFreeShippingDollarAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingDollarAmountBufferProductName = entity.MinimumForFreeShippingDollarAmountBufferProduct?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryID = entity.MinimumForFreeShippingQuantityAmountBufferCategoryID;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryKey = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferCategoryName = entity.MinimumForFreeShippingQuantityAmountBufferCategory?.Name;
                    model.MinimumForFreeShippingQuantityAmountBufferProductID = entity.MinimumForFreeShippingQuantityAmountBufferProductID;
                    model.MinimumForFreeShippingQuantityAmountBufferProductKey = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumForFreeShippingQuantityAmountBufferProductName = entity.MinimumForFreeShippingQuantityAmountBufferProduct?.Name;
                    model.MinimumOrderDollarAmountBufferCategoryID = entity.MinimumOrderDollarAmountBufferCategoryID;
                    model.MinimumOrderDollarAmountBufferCategoryKey = entity.MinimumOrderDollarAmountBufferCategory?.CustomKey;
                    model.MinimumOrderDollarAmountBufferCategoryName = entity.MinimumOrderDollarAmountBufferCategory?.Name;
                    model.MinimumOrderDollarAmountBufferProductID = entity.MinimumOrderDollarAmountBufferProductID;
                    model.MinimumOrderDollarAmountBufferProductKey = entity.MinimumOrderDollarAmountBufferProduct?.CustomKey;
                    model.MinimumOrderDollarAmountBufferProductName = entity.MinimumOrderDollarAmountBufferProduct?.Name;
                    model.MinimumOrderQuantityAmountBufferCategoryID = entity.MinimumOrderQuantityAmountBufferCategoryID;
                    model.MinimumOrderQuantityAmountBufferCategoryKey = entity.MinimumOrderQuantityAmountBufferCategory?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferCategoryName = entity.MinimumOrderQuantityAmountBufferCategory?.Name;
                    model.MinimumOrderQuantityAmountBufferProductID = entity.MinimumOrderQuantityAmountBufferProductID;
                    model.MinimumOrderQuantityAmountBufferProductKey = entity.MinimumOrderQuantityAmountBufferProduct?.CustomKey;
                    model.MinimumOrderQuantityAmountBufferProductName = entity.MinimumOrderQuantityAmountBufferProduct?.Name;
                    // Franchise's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateFranchiseModelFromEntityHooksList != null) { model = CreateFranchiseModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
