// <autogenerated>
// <copyright file="Mapping.Geography.District.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForDistrict
    {
        public sealed class AnonDistrict : District
        {
            public new IEnumerable<DistrictCurrency>? Currencies { get; set; }
            public new IEnumerable<DistrictImage>? Images { get; set; }
            public new IEnumerable<DistrictLanguage>? Languages { get; set; }
        }

        public static readonly Func<District?, string?, IDistrictModel?> MapDistrictModelFromEntityFull = CreateDistrictModelFromEntityFull;

        public static readonly Func<District?, string?, IDistrictModel?> MapDistrictModelFromEntityLite = CreateDistrictModelFromEntityLite;

        public static readonly Func<District?, string?, IDistrictModel?> MapDistrictModelFromEntityList = CreateDistrictModelFromEntityList;

        public static Func<IDistrict, IDistrictModel, string?, IDistrictModel>? CreateDistrictModelFromEntityHooksFull { get; set; }

        public static Func<IDistrict, IDistrictModel, string?, IDistrictModel>? CreateDistrictModelFromEntityHooksLite { get; set; }

        public static Func<IDistrict, IDistrictModel, string?, IDistrictModel>? CreateDistrictModelFromEntityHooksList { get; set; }

        public static Expression<Func<District, AnonDistrict>>? PreBuiltDistrictSQLSelectorFull { get; set; }

        public static Expression<Func<District, AnonDistrict>>? PreBuiltDistrictSQLSelectorLite { get; set; }

        public static Expression<Func<District, AnonDistrict>>? PreBuiltDistrictSQLSelectorList { get; set; }

        /// <summary>An <see cref="IDistrictModel"/> extension method that creates a(n) <see cref="District"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="District"/> entity.</returns>
        public static IDistrict CreateDistrictEntity(
            this IDistrictModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IDistrictModel, District>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateDistrictFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IDistrictModel"/> extension method that updates a(n) <see cref="District"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="District"/> entity.</returns>
        public static IDistrict UpdateDistrictFromModel(
            this IDistrict entity,
            IDistrictModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // District Properties
            entity.Code = model.Code;
            // District's Related Objects
            // District's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenDistrictSQLSelectorFull()
        {
            PreBuiltDistrictSQLSelectorFull = x => x == null ? null! : new AnonDistrict
            {
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForDistrictImage.PreBuiltDistrictImageSQLSelectorList.Expand().Compile()).ToList(),
                Languages = x.Languages!.Where(y => y.Active).Select(ModelMapperForDistrictLanguage.PreBuiltDistrictLanguageSQLSelectorList.Expand().Compile()).ToList(),
                Currencies = x.Currencies!.Where(y => y.Active).Select(ModelMapperForDistrictCurrency.PreBuiltDistrictCurrencySQLSelectorList.Expand().Compile()).ToList(),
                Code = x.Code,
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!),
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenDistrictSQLSelectorLite()
        {
            PreBuiltDistrictSQLSelectorLite = x => x == null ? null! : new AnonDistrict
            {
                Code = x.Code,
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!),
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenDistrictSQLSelectorList()
        {
            PreBuiltDistrictSQLSelectorList = x => x == null ? null! : new AnonDistrict
            {
                Code = x.Code,
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!), // For Flattening Properties (List)
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IDistrictModel> SelectFullDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltDistrictSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IDistrictModel> SelectLiteDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltDistrictSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IDistrictModel> SelectListDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltDistrictSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityList(x, contextProfileName))!;
        }

        public static IDistrictModel? SelectFirstFullDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDistrictSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IDistrictModel? SelectFirstListDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDistrictSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IDistrictModel? SelectSingleFullDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDistrictSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IDistrictModel? SelectSingleLiteDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDistrictSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IDistrictModel? SelectSingleListDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltDistrictSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateDistrictModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IDistrictModel> results, int totalPages, int totalCount) SelectFullDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltDistrictSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateDistrictModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IDistrictModel> results, int totalPages, int totalCount) SelectLiteDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltDistrictSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateDistrictModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IDistrictModel> results, int totalPages, int totalCount) SelectListDistrictAndMapToDistrictModel(
            this IQueryable<District> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltDistrictSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltDistrictSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateDistrictModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IDistrictModel? CreateDistrictModelFromEntityFull(this IDistrict? entity, string? contextProfileName)
        {
            return CreateDistrictModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IDistrictModel? CreateDistrictModelFromEntityLite(this IDistrict? entity, string? contextProfileName)
        {
            return CreateDistrictModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IDistrictModel? CreateDistrictModelFromEntityList(this IDistrict? entity, string? contextProfileName)
        {
            return CreateDistrictModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IDistrictModel? CreateDistrictModelFromEntity(
            this IDistrict? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IDistrictModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // District's Properties
                    // District's Related Objects
                    // District's Associated Objects
                    model.Currencies = (entity is AnonDistrict ? ((AnonDistrict)entity).Currencies : entity.Currencies)?.Where(x => x.Active).Select(x => ModelMapperForDistrictCurrency.CreateDistrictCurrencyModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonDistrict ? ((AnonDistrict)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForDistrictImage.CreateDistrictImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Languages = (entity is AnonDistrict ? ((AnonDistrict)entity).Languages : entity.Languages)?.Where(x => x.Active).Select(x => ModelMapperForDistrictLanguage.CreateDistrictLanguageModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateDistrictModelFromEntityHooksFull != null) { model = CreateDistrictModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // District's Properties
                    // District's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Country = ModelMapperForCountry.CreateCountryModelFromEntityLite(entity.Country, contextProfileName);
                    model.Region = ModelMapperForRegion.CreateRegionModelFromEntityLite(entity.Region, contextProfileName);
                    // District's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateDistrictModelFromEntityHooksLite != null) { model = CreateDistrictModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // District's Properties
                    model.Code = entity.Code;
                    // District's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CountryID = entity.CountryID;
                    model.CountryKey = entity.Country?.CustomKey;
                    model.CountryName = entity.Country?.Name;
                    model.RegionID = entity.RegionID;
                    model.RegionKey = entity.Region?.CustomKey;
                    model.RegionName = entity.Region?.Name;
                    // District's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateDistrictModelFromEntityHooksList != null) { model = CreateDistrictModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
