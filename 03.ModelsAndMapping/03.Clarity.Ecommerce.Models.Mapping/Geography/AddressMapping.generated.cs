// <autogenerated>
// <copyright file="Mapping.Geography.Address.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForAddress
    {
        public sealed class AnonAddress : Address
        {
        }

        public static readonly Func<Address?, string?, IAddressModel?> MapAddressModelFromEntityFull = CreateAddressModelFromEntityFull;

        public static readonly Func<Address?, string?, IAddressModel?> MapAddressModelFromEntityLite = CreateAddressModelFromEntityLite;

        public static readonly Func<Address?, string?, IAddressModel?> MapAddressModelFromEntityList = CreateAddressModelFromEntityList;

        public static Func<IAddress, IAddressModel, string?, IAddressModel>? CreateAddressModelFromEntityHooksFull { get; set; }

        public static Func<IAddress, IAddressModel, string?, IAddressModel>? CreateAddressModelFromEntityHooksLite { get; set; }

        public static Func<IAddress, IAddressModel, string?, IAddressModel>? CreateAddressModelFromEntityHooksList { get; set; }

        public static Expression<Func<Address, AnonAddress>>? PreBuiltAddressSQLSelectorFull { get; set; }

        public static Expression<Func<Address, AnonAddress>>? PreBuiltAddressSQLSelectorLite { get; set; }

        public static Expression<Func<Address, AnonAddress>>? PreBuiltAddressSQLSelectorList { get; set; }

        /// <summary>An <see cref="IAddressModel"/> extension method that creates a(n) <see cref="Address"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Address"/> entity.</returns>
        public static IAddress CreateAddressEntity(
            this IAddressModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IAddressModel, Address>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateAddressFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IAddressModel"/> extension method that updates a(n) <see cref="Address"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Address"/> entity.</returns>
        public static IAddress UpdateAddressFromModel(
            this IAddress entity,
            IAddressModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Address Properties
            entity.City = model.City;
            entity.Company = model.Company;
            entity.CountryCustom = model.CountryCustom;
            entity.Latitude = model.Latitude;
            entity.Longitude = model.Longitude;
            entity.PostalCode = model.PostalCode;
            entity.RegionCustom = model.RegionCustom;
            entity.Street1 = model.Street1;
            entity.Street2 = model.Street2;
            entity.Street3 = model.Street3;
            // Address's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenAddressSQLSelectorFull()
        {
            PreBuiltAddressSQLSelectorFull = x => x == null ? null! : new AnonAddress
            {
                Company = x.Company,
                Street1 = x.Street1,
                Street2 = x.Street2,
                Street3 = x.Street3,
                City = x.City,
                RegionCustom = x.RegionCustom,
                CountryCustom = x.CountryCustom,
                PostalCode = x.PostalCode,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAddressSQLSelectorLite()
        {
            PreBuiltAddressSQLSelectorLite = x => x == null ? null! : new AnonAddress
            {
                Company = x.Company,
                Street1 = x.Street1,
                Street2 = x.Street2,
                Street3 = x.Street3,
                City = x.City,
                RegionCustom = x.RegionCustom,
                CountryCustom = x.CountryCustom,
                PostalCode = x.PostalCode,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenAddressSQLSelectorList()
        {
            PreBuiltAddressSQLSelectorList = x => x == null ? null! : new AnonAddress
            {
                Company = x.Company,
                Street1 = x.Street1,
                Street2 = x.Street2,
                Street3 = x.Street3,
                City = x.City,
                RegionCustom = x.RegionCustom,
                CountryCustom = x.CountryCustom,
                PostalCode = x.PostalCode,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!), // For Flattening Properties (List)
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IAddressModel> SelectFullAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAddressSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IAddressModel> SelectLiteAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAddressSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IAddressModel> SelectListAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltAddressSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityList(x, contextProfileName))!;
        }

        public static IAddressModel? SelectFirstFullAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAddressSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAddressModel? SelectFirstListAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAddressSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IAddressModel? SelectSingleFullAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAddressSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAddressModel? SelectSingleLiteAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAddressSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IAddressModel? SelectSingleListAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltAddressSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateAddressModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IAddressModel> results, int totalPages, int totalCount) SelectFullAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAddressSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateAddressModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAddressModel> results, int totalPages, int totalCount) SelectLiteAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAddressSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateAddressModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IAddressModel> results, int totalPages, int totalCount) SelectListAddressAndMapToAddressModel(
            this IQueryable<Address> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltAddressSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltAddressSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateAddressModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IAddressModel? CreateAddressModelFromEntityFull(this IAddress? entity, string? contextProfileName)
        {
            return CreateAddressModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IAddressModel? CreateAddressModelFromEntityLite(this IAddress? entity, string? contextProfileName)
        {
            return CreateAddressModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IAddressModel? CreateAddressModelFromEntityList(this IAddress? entity, string? contextProfileName)
        {
            return CreateAddressModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IAddressModel? CreateAddressModelFromEntity(
            this IAddress? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IAddressModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Address's Properties
                    // Address's Related Objects
                    // Address's Associated Objects
                    // Additional Mappings
                    if (CreateAddressModelFromEntityHooksFull != null) { model = CreateAddressModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Address's Properties
                    // Address's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Country = ModelMapperForCountry.CreateCountryModelFromEntityLite(entity.Country, contextProfileName);
                    model.Region = ModelMapperForRegion.CreateRegionModelFromEntityLite(entity.Region, contextProfileName);
                    // Address's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAddressModelFromEntityHooksLite != null) { model = CreateAddressModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Address's Properties
                    model.City = entity.City;
                    model.Company = entity.Company;
                    model.CountryCustom = entity.CountryCustom;
                    model.Latitude = entity.Latitude;
                    model.Longitude = entity.Longitude;
                    model.PostalCode = entity.PostalCode;
                    model.RegionCustom = entity.RegionCustom;
                    model.Street1 = entity.Street1;
                    model.Street2 = entity.Street2;
                    model.Street3 = entity.Street3;
                    // Address's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CountryID = entity.CountryID;
                    model.CountryKey = entity.Country?.CustomKey;
                    model.CountryName = entity.Country?.Name;
                    model.CountryCode = entity.Country?.Code;
                    model.RegionID = entity.RegionID;
                    model.RegionKey = entity.Region?.CustomKey;
                    model.RegionName = entity.Region?.Name;
                    model.RegionCode = entity.Region?.Code;
                    // Address's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateAddressModelFromEntityHooksList != null) { model = CreateAddressModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
