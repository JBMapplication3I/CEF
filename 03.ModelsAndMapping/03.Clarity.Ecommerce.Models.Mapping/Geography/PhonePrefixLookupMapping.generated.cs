// <autogenerated>
// <copyright file="Mapping.Geography.PhonePrefixLookup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForPhonePrefixLookup
    {
        public sealed class AnonPhonePrefixLookup : PhonePrefixLookup
        {
        }

        public static readonly Func<PhonePrefixLookup?, string?, IPhonePrefixLookupModel?> MapPhonePrefixLookupModelFromEntityFull = CreatePhonePrefixLookupModelFromEntityFull;

        public static readonly Func<PhonePrefixLookup?, string?, IPhonePrefixLookupModel?> MapPhonePrefixLookupModelFromEntityLite = CreatePhonePrefixLookupModelFromEntityLite;

        public static readonly Func<PhonePrefixLookup?, string?, IPhonePrefixLookupModel?> MapPhonePrefixLookupModelFromEntityList = CreatePhonePrefixLookupModelFromEntityList;

        public static Func<IPhonePrefixLookup, IPhonePrefixLookupModel, string?, IPhonePrefixLookupModel>? CreatePhonePrefixLookupModelFromEntityHooksFull { get; set; }

        public static Func<IPhonePrefixLookup, IPhonePrefixLookupModel, string?, IPhonePrefixLookupModel>? CreatePhonePrefixLookupModelFromEntityHooksLite { get; set; }

        public static Func<IPhonePrefixLookup, IPhonePrefixLookupModel, string?, IPhonePrefixLookupModel>? CreatePhonePrefixLookupModelFromEntityHooksList { get; set; }

        public static Expression<Func<PhonePrefixLookup, AnonPhonePrefixLookup>>? PreBuiltPhonePrefixLookupSQLSelectorFull { get; set; }

        public static Expression<Func<PhonePrefixLookup, AnonPhonePrefixLookup>>? PreBuiltPhonePrefixLookupSQLSelectorLite { get; set; }

        public static Expression<Func<PhonePrefixLookup, AnonPhonePrefixLookup>>? PreBuiltPhonePrefixLookupSQLSelectorList { get; set; }

        /// <summary>An <see cref="IPhonePrefixLookupModel"/> extension method that creates a(n) <see cref="PhonePrefixLookup"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="PhonePrefixLookup"/> entity.</returns>
        public static IPhonePrefixLookup CreatePhonePrefixLookupEntity(
            this IPhonePrefixLookupModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IPhonePrefixLookupModel, PhonePrefixLookup>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdatePhonePrefixLookupFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IPhonePrefixLookupModel"/> extension method that updates a(n) <see cref="PhonePrefixLookup"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="PhonePrefixLookup"/> entity.</returns>
        public static IPhonePrefixLookup UpdatePhonePrefixLookupFromModel(
            this IPhonePrefixLookup entity,
            IPhonePrefixLookupModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // PhonePrefixLookup Properties
            entity.CityName = model.CityName;
            entity.Prefix = model.Prefix;
            entity.TimeZone = model.TimeZone;
            // PhonePrefixLookup's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenPhonePrefixLookupSQLSelectorFull()
        {
            PreBuiltPhonePrefixLookupSQLSelectorFull = x => x == null ? null! : new AnonPhonePrefixLookup
            {
                Prefix = x.Prefix,
                TimeZone = x.TimeZone,
                CityName = x.CityName,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPhonePrefixLookupSQLSelectorLite()
        {
            PreBuiltPhonePrefixLookupSQLSelectorLite = x => x == null ? null! : new AnonPhonePrefixLookup
            {
                Prefix = x.Prefix,
                TimeZone = x.TimeZone,
                CityName = x.CityName,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenPhonePrefixLookupSQLSelectorList()
        {
            PreBuiltPhonePrefixLookupSQLSelectorList = x => x == null ? null! : new AnonPhonePrefixLookup
            {
                Prefix = x.Prefix,
                TimeZone = x.TimeZone,
                CityName = x.CityName,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!), // For Flattening Properties (List)
                RegionID = x.RegionID,
                Region = ModelMapperForRegion.PreBuiltRegionSQLSelectorList.Expand().Compile().Invoke(x.Region!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IPhonePrefixLookupModel> SelectFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPhonePrefixLookupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IPhonePrefixLookupModel> SelectLitePhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPhonePrefixLookupSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IPhonePrefixLookupModel> SelectListPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltPhonePrefixLookupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityList(x, contextProfileName))!;
        }

        public static IPhonePrefixLookupModel? SelectFirstFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPhonePrefixLookupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPhonePrefixLookupModel? SelectFirstListPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPhonePrefixLookupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IPhonePrefixLookupModel? SelectSingleFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPhonePrefixLookupSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPhonePrefixLookupModel? SelectSingleLitePhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPhonePrefixLookupSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IPhonePrefixLookupModel? SelectSingleListPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltPhonePrefixLookupSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreatePhonePrefixLookupModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IPhonePrefixLookupModel> results, int totalPages, int totalCount) SelectFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPhonePrefixLookupSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreatePhonePrefixLookupModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPhonePrefixLookupModel> results, int totalPages, int totalCount) SelectLitePhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPhonePrefixLookupSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreatePhonePrefixLookupModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IPhonePrefixLookupModel> results, int totalPages, int totalCount) SelectListPhonePrefixLookupAndMapToPhonePrefixLookupModel(
            this IQueryable<PhonePrefixLookup> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltPhonePrefixLookupSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltPhonePrefixLookupSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreatePhonePrefixLookupModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IPhonePrefixLookupModel? CreatePhonePrefixLookupModelFromEntityFull(this IPhonePrefixLookup? entity, string? contextProfileName)
        {
            return CreatePhonePrefixLookupModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IPhonePrefixLookupModel? CreatePhonePrefixLookupModelFromEntityLite(this IPhonePrefixLookup? entity, string? contextProfileName)
        {
            return CreatePhonePrefixLookupModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IPhonePrefixLookupModel? CreatePhonePrefixLookupModelFromEntityList(this IPhonePrefixLookup? entity, string? contextProfileName)
        {
            return CreatePhonePrefixLookupModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IPhonePrefixLookupModel? CreatePhonePrefixLookupModelFromEntity(
            this IPhonePrefixLookup? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IPhonePrefixLookupModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PhonePrefixLookup's Properties
                    // PhonePrefixLookup's Related Objects
                    model.Country = ModelMapperForCountry.CreateCountryModelFromEntityLite(entity.Country, contextProfileName);
                    model.Region = ModelMapperForRegion.CreateRegionModelFromEntityLite(entity.Region, contextProfileName);
                    // PhonePrefixLookup's Associated Objects
                    // Additional Mappings
                    if (CreatePhonePrefixLookupModelFromEntityHooksFull != null) { model = CreatePhonePrefixLookupModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // PhonePrefixLookup's Properties
                    // PhonePrefixLookup's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // PhonePrefixLookup's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePhonePrefixLookupModelFromEntityHooksLite != null) { model = CreatePhonePrefixLookupModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // PhonePrefixLookup's Properties
                    model.CityName = entity.CityName;
                    model.Prefix = entity.Prefix;
                    model.TimeZone = entity.TimeZone;
                    // PhonePrefixLookup's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CountryID = entity.CountryID;
                    model.CountryKey = entity.Country?.CustomKey;
                    model.CountryName = entity.Country?.Name;
                    model.CountryCode = entity.Country?.Code;
                    model.RegionID = entity.RegionID;
                    model.RegionKey = entity.Region?.CustomKey;
                    model.RegionName = entity.Region?.Name;
                    model.RegionCode = entity.Region?.Code;
                    // PhonePrefixLookup's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreatePhonePrefixLookupModelFromEntityHooksList != null) { model = CreatePhonePrefixLookupModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
