// <autogenerated>
// <copyright file="Mapping.Geography.Region.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForRegion
    {
        public sealed class AnonRegion : Region
        {
            public new IEnumerable<RegionCurrency>? Currencies { get; set; }
            public new IEnumerable<RegionImage>? Images { get; set; }
            public new IEnumerable<RegionLanguage>? Languages { get; set; }
        }

        public static readonly Func<Region?, string?, IRegionModel?> MapRegionModelFromEntityFull = CreateRegionModelFromEntityFull;

        public static readonly Func<Region?, string?, IRegionModel?> MapRegionModelFromEntityLite = CreateRegionModelFromEntityLite;

        public static readonly Func<Region?, string?, IRegionModel?> MapRegionModelFromEntityList = CreateRegionModelFromEntityList;

        public static Func<IRegion, IRegionModel, string?, IRegionModel>? CreateRegionModelFromEntityHooksFull { get; set; }

        public static Func<IRegion, IRegionModel, string?, IRegionModel>? CreateRegionModelFromEntityHooksLite { get; set; }

        public static Func<IRegion, IRegionModel, string?, IRegionModel>? CreateRegionModelFromEntityHooksList { get; set; }

        public static Expression<Func<Region, AnonRegion>>? PreBuiltRegionSQLSelectorFull { get; set; }

        public static Expression<Func<Region, AnonRegion>>? PreBuiltRegionSQLSelectorLite { get; set; }

        public static Expression<Func<Region, AnonRegion>>? PreBuiltRegionSQLSelectorList { get; set; }

        /// <summary>An <see cref="IRegionModel"/> extension method that creates a(n) <see cref="Region"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Region"/> entity.</returns>
        public static IRegion CreateRegionEntity(
            this IRegionModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IRegionModel, Region>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateRegionFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IRegionModel"/> extension method that updates a(n) <see cref="Region"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Region"/> entity.</returns>
        public static IRegion UpdateRegionFromModel(
            this IRegion entity,
            IRegionModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Region Properties
            entity.Code = model.Code;
            entity.ISO31661 = model.ISO31661;
            entity.ISO31662 = model.ISO31662;
            entity.ISO3166Alpha2 = model.ISO3166Alpha2;
            // Region's Related Objects
            // Region's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenRegionSQLSelectorFull()
        {
            PreBuiltRegionSQLSelectorFull = x => x == null ? null! : new AnonRegion
            {
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForRegionImage.PreBuiltRegionImageSQLSelectorList.Expand().Compile()).ToList(),
                Languages = x.Languages!.Where(y => y.Active).Select(ModelMapperForRegionLanguage.PreBuiltRegionLanguageSQLSelectorList.Expand().Compile()).ToList(),
                Currencies = x.Currencies!.Where(y => y.Active).Select(ModelMapperForRegionCurrency.PreBuiltRegionCurrencySQLSelectorList.Expand().Compile()).ToList(),
                Code = x.Code,
                ISO31661 = x.ISO31661,
                ISO31662 = x.ISO31662,
                ISO3166Alpha2 = x.ISO3166Alpha2,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenRegionSQLSelectorLite()
        {
            PreBuiltRegionSQLSelectorLite = x => x == null ? null! : new AnonRegion
            {
                Code = x.Code,
                ISO31661 = x.ISO31661,
                ISO31662 = x.ISO31662,
                ISO3166Alpha2 = x.ISO3166Alpha2,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenRegionSQLSelectorList()
        {
            PreBuiltRegionSQLSelectorList = x => x == null ? null! : new AnonRegion
            {
                Code = x.Code,
                ISO31661 = x.ISO31661,
                ISO31662 = x.ISO31662,
                ISO3166Alpha2 = x.ISO3166Alpha2,
                CountryID = x.CountryID,
                Country = ModelMapperForCountry.PreBuiltCountrySQLSelectorList.Expand().Compile().Invoke(x.Country!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IRegionModel> SelectFullRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltRegionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IRegionModel> SelectLiteRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltRegionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IRegionModel> SelectListRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltRegionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityList(x, contextProfileName))!;
        }

        public static IRegionModel? SelectFirstFullRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRegionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IRegionModel? SelectFirstListRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRegionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IRegionModel? SelectSingleFullRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRegionSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IRegionModel? SelectSingleLiteRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRegionSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IRegionModel? SelectSingleListRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltRegionSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateRegionModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IRegionModel> results, int totalPages, int totalCount) SelectFullRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltRegionSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateRegionModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IRegionModel> results, int totalPages, int totalCount) SelectLiteRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltRegionSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateRegionModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IRegionModel> results, int totalPages, int totalCount) SelectListRegionAndMapToRegionModel(
            this IQueryable<Region> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltRegionSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltRegionSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateRegionModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IRegionModel? CreateRegionModelFromEntityFull(this IRegion? entity, string? contextProfileName)
        {
            return CreateRegionModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IRegionModel? CreateRegionModelFromEntityLite(this IRegion? entity, string? contextProfileName)
        {
            return CreateRegionModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IRegionModel? CreateRegionModelFromEntityList(this IRegion? entity, string? contextProfileName)
        {
            return CreateRegionModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IRegionModel? CreateRegionModelFromEntity(
            this IRegion? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IRegionModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Region's Properties
                    // Region's Related Objects
                    // Region's Associated Objects
                    model.Currencies = (entity is AnonRegion ? ((AnonRegion)entity).Currencies : entity.Currencies)?.Where(x => x.Active).Select(x => ModelMapperForRegionCurrency.CreateRegionCurrencyModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonRegion ? ((AnonRegion)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForRegionImage.CreateRegionImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Languages = (entity is AnonRegion ? ((AnonRegion)entity).Languages : entity.Languages)?.Where(x => x.Active).Select(x => ModelMapperForRegionLanguage.CreateRegionLanguageModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateRegionModelFromEntityHooksFull != null) { model = CreateRegionModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Region's Properties
                    // Region's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.Country = ModelMapperForCountry.CreateCountryModelFromEntityLite(entity.Country, contextProfileName);
                    // Region's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateRegionModelFromEntityHooksLite != null) { model = CreateRegionModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Region's Properties
                    model.Code = entity.Code;
                    model.ISO31661 = entity.ISO31661;
                    model.ISO31662 = entity.ISO31662;
                    model.ISO3166Alpha2 = entity.ISO3166Alpha2;
                    // Region's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CountryID = entity.CountryID;
                    model.CountryKey = entity.Country?.CustomKey;
                    model.CountryName = entity.Country?.Name;
                    // Region's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateRegionModelFromEntityHooksList != null) { model = CreateRegionModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
