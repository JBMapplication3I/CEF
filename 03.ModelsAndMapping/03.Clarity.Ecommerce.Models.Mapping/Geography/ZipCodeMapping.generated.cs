// <autogenerated>
// <copyright file="Mapping.Geography.ZipCode.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForZipCode
    {
        public sealed class AnonZipCode : ZipCode
        {
        }

        public static readonly Func<ZipCode?, string?, IZipCodeModel?> MapZipCodeModelFromEntityFull = CreateZipCodeModelFromEntityFull;

        public static readonly Func<ZipCode?, string?, IZipCodeModel?> MapZipCodeModelFromEntityLite = CreateZipCodeModelFromEntityLite;

        public static readonly Func<ZipCode?, string?, IZipCodeModel?> MapZipCodeModelFromEntityList = CreateZipCodeModelFromEntityList;

        public static Func<IZipCode, IZipCodeModel, string?, IZipCodeModel>? CreateZipCodeModelFromEntityHooksFull { get; set; }

        public static Func<IZipCode, IZipCodeModel, string?, IZipCodeModel>? CreateZipCodeModelFromEntityHooksLite { get; set; }

        public static Func<IZipCode, IZipCodeModel, string?, IZipCodeModel>? CreateZipCodeModelFromEntityHooksList { get; set; }

        public static Expression<Func<ZipCode, AnonZipCode>>? PreBuiltZipCodeSQLSelectorFull { get; set; }

        public static Expression<Func<ZipCode, AnonZipCode>>? PreBuiltZipCodeSQLSelectorLite { get; set; }

        public static Expression<Func<ZipCode, AnonZipCode>>? PreBuiltZipCodeSQLSelectorList { get; set; }

        /// <summary>An <see cref="IZipCodeModel"/> extension method that creates a(n) <see cref="ZipCode"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="ZipCode"/> entity.</returns>
        public static IZipCode CreateZipCodeEntity(
            this IZipCodeModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IZipCodeModel, ZipCode>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateZipCodeFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IZipCodeModel"/> extension method that updates a(n) <see cref="ZipCode"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="ZipCode"/> entity.</returns>
        public static IZipCode UpdateZipCodeFromModel(
            this IZipCode entity,
            IZipCodeModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // ZipCode Properties
            entity.AreaCode = model.AreaCode;
            entity.CityName = model.CityName;
            entity.CityType = model.CityType;
            entity.CountyFIPS = model.CountyFIPS;
            entity.CountyName = model.CountyName;
            entity.DST = model.DST;
            entity.Latitude = model.Latitude;
            entity.Longitude = model.Longitude;
            entity.MSACode = model.MSACode;
            entity.StateAbbreviation = model.StateAbbreviation;
            entity.StateFIPS = model.StateFIPS;
            entity.StateName = model.StateName;
            entity.TimeZone = model.TimeZone;
            entity.UTC = model.UTC;
            entity.ZipCodeValue = model.ZipCodeValue;
            entity.ZipType = model.ZipType;
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenZipCodeSQLSelectorFull()
        {
            PreBuiltZipCodeSQLSelectorFull = x => x == null ? null! : new AnonZipCode
            {
                ZipCodeValue = x.ZipCodeValue,
                ZipType = x.ZipType,
                CityName = x.CityName,
                CityType = x.CityType,
                CountyName = x.CountyName,
                CountyFIPS = x.CountyFIPS,
                StateName = x.StateName,
                StateAbbreviation = x.StateAbbreviation,
                StateFIPS = x.StateFIPS,
                MSACode = x.MSACode,
                AreaCode = x.AreaCode,
                TimeZone = x.TimeZone,
                UTC = x.UTC,
                DST = x.DST,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenZipCodeSQLSelectorLite()
        {
            PreBuiltZipCodeSQLSelectorLite = x => x == null ? null! : new AnonZipCode
            {
                ZipCodeValue = x.ZipCodeValue,
                ZipType = x.ZipType,
                CityName = x.CityName,
                CityType = x.CityType,
                CountyName = x.CountyName,
                CountyFIPS = x.CountyFIPS,
                StateName = x.StateName,
                StateAbbreviation = x.StateAbbreviation,
                StateFIPS = x.StateFIPS,
                MSACode = x.MSACode,
                AreaCode = x.AreaCode,
                TimeZone = x.TimeZone,
                UTC = x.UTC,
                DST = x.DST,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenZipCodeSQLSelectorList()
        {
            PreBuiltZipCodeSQLSelectorList = x => x == null ? null! : new AnonZipCode
            {
                ZipCodeValue = x.ZipCodeValue,
                ZipType = x.ZipType,
                CityName = x.CityName,
                CityType = x.CityType,
                CountyName = x.CountyName,
                CountyFIPS = x.CountyFIPS,
                StateName = x.StateName,
                StateAbbreviation = x.StateAbbreviation,
                StateFIPS = x.StateFIPS,
                MSACode = x.MSACode,
                AreaCode = x.AreaCode,
                TimeZone = x.TimeZone,
                UTC = x.UTC,
                DST = x.DST,
                Latitude = x.Latitude,
                Longitude = x.Longitude,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IZipCodeModel> SelectFullZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltZipCodeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IZipCodeModel> SelectLiteZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltZipCodeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IZipCodeModel> SelectListZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltZipCodeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityList(x, contextProfileName))!;
        }

        public static IZipCodeModel? SelectFirstFullZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltZipCodeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IZipCodeModel? SelectFirstListZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltZipCodeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IZipCodeModel? SelectSingleFullZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltZipCodeSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IZipCodeModel? SelectSingleLiteZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltZipCodeSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IZipCodeModel? SelectSingleListZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltZipCodeSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateZipCodeModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IZipCodeModel> results, int totalPages, int totalCount) SelectFullZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltZipCodeSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateZipCodeModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IZipCodeModel> results, int totalPages, int totalCount) SelectLiteZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltZipCodeSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateZipCodeModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IZipCodeModel> results, int totalPages, int totalCount) SelectListZipCodeAndMapToZipCodeModel(
            this IQueryable<ZipCode> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltZipCodeSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltZipCodeSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateZipCodeModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IZipCodeModel? CreateZipCodeModelFromEntityFull(this IZipCode? entity, string? contextProfileName)
        {
            return CreateZipCodeModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IZipCodeModel? CreateZipCodeModelFromEntityLite(this IZipCode? entity, string? contextProfileName)
        {
            return CreateZipCodeModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IZipCodeModel? CreateZipCodeModelFromEntityList(this IZipCode? entity, string? contextProfileName)
        {
            return CreateZipCodeModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IZipCodeModel? CreateZipCodeModelFromEntity(
            this IZipCode? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IZipCodeModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ZipCode's Properties
                    // ZipCode's Related Objects
                    // ZipCode's Associated Objects
                    // Additional Mappings
                    if (CreateZipCodeModelFromEntityHooksFull != null) { model = CreateZipCodeModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // ZipCode's Properties
                    // ZipCode's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ZipCode's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateZipCodeModelFromEntityHooksLite != null) { model = CreateZipCodeModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // ZipCode's Properties
                    model.AreaCode = entity.AreaCode;
                    model.CityName = entity.CityName;
                    model.CityType = entity.CityType;
                    model.CountyFIPS = entity.CountyFIPS;
                    model.CountyName = entity.CountyName;
                    model.DST = entity.DST;
                    model.Latitude = entity.Latitude;
                    model.Longitude = entity.Longitude;
                    model.MSACode = entity.MSACode;
                    model.StateAbbreviation = entity.StateAbbreviation;
                    model.StateFIPS = entity.StateFIPS;
                    model.StateName = entity.StateName;
                    model.TimeZone = entity.TimeZone;
                    model.UTC = entity.UTC;
                    model.ZipCodeValue = entity.ZipCodeValue;
                    model.ZipType = entity.ZipType;
                    // ZipCode's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // ZipCode's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateZipCodeModelFromEntityHooksList != null) { model = CreateZipCodeModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
