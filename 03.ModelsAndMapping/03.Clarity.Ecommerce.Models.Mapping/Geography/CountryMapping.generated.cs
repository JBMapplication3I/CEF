// <autogenerated>
// <copyright file="Mapping.Geography.Country.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForCountry
    {
        public sealed class AnonCountry : Country
        {
            public new IEnumerable<CountryCurrency>? Currencies { get; set; }
            public new IEnumerable<CountryImage>? Images { get; set; }
            public new IEnumerable<CountryLanguage>? Languages { get; set; }
        }

        public static readonly Func<Country?, string?, ICountryModel?> MapCountryModelFromEntityFull = CreateCountryModelFromEntityFull;

        public static readonly Func<Country?, string?, ICountryModel?> MapCountryModelFromEntityLite = CreateCountryModelFromEntityLite;

        public static readonly Func<Country?, string?, ICountryModel?> MapCountryModelFromEntityList = CreateCountryModelFromEntityList;

        public static Func<ICountry, ICountryModel, string?, ICountryModel>? CreateCountryModelFromEntityHooksFull { get; set; }

        public static Func<ICountry, ICountryModel, string?, ICountryModel>? CreateCountryModelFromEntityHooksLite { get; set; }

        public static Func<ICountry, ICountryModel, string?, ICountryModel>? CreateCountryModelFromEntityHooksList { get; set; }

        public static Expression<Func<Country, AnonCountry>>? PreBuiltCountrySQLSelectorFull { get; set; }

        public static Expression<Func<Country, AnonCountry>>? PreBuiltCountrySQLSelectorLite { get; set; }

        public static Expression<Func<Country, AnonCountry>>? PreBuiltCountrySQLSelectorList { get; set; }

        /// <summary>An <see cref="ICountryModel"/> extension method that creates a(n) <see cref="Country"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Country"/> entity.</returns>
        public static ICountry CreateCountryEntity(
            this ICountryModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<ICountryModel, Country>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateCountryFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="ICountryModel"/> extension method that updates a(n) <see cref="Country"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Country"/> entity.</returns>
        public static ICountry UpdateCountryFromModel(
            this ICountry entity,
            ICountryModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Country Properties
            entity.Code = model.Code;
            entity.ISO3166Alpha2 = model.ISO3166Alpha2;
            entity.ISO3166Alpha3 = model.ISO3166Alpha3;
            entity.ISO3166Numeric = model.ISO3166Numeric;
            entity.PhonePrefix = model.PhonePrefix;
            entity.PhoneRegEx = model.PhoneRegEx;
            // Country's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenCountrySQLSelectorFull()
        {
            PreBuiltCountrySQLSelectorFull = x => x == null ? null! : new AnonCountry
            {
                Images = x.Images!.Where(y => y.Active).Select(ModelMapperForCountryImage.PreBuiltCountryImageSQLSelectorList.Expand().Compile()).ToList(),
                Languages = x.Languages!.Where(y => y.Active).Select(ModelMapperForCountryLanguage.PreBuiltCountryLanguageSQLSelectorList.Expand().Compile()).ToList(),
                Currencies = x.Currencies!.Where(y => y.Active).Select(ModelMapperForCountryCurrency.PreBuiltCountryCurrencySQLSelectorList.Expand().Compile()).ToList(),
                Code = x.Code,
                ISO3166Alpha2 = x.ISO3166Alpha2,
                ISO3166Alpha3 = x.ISO3166Alpha3,
                ISO3166Numeric = x.ISO3166Numeric,
                PhoneRegEx = x.PhoneRegEx,
                PhonePrefix = x.PhonePrefix,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCountrySQLSelectorLite()
        {
            PreBuiltCountrySQLSelectorLite = x => x == null ? null! : new AnonCountry
            {
                Code = x.Code,
                ISO3166Alpha2 = x.ISO3166Alpha2,
                ISO3166Alpha3 = x.ISO3166Alpha3,
                ISO3166Numeric = x.ISO3166Numeric,
                PhoneRegEx = x.PhoneRegEx,
                PhonePrefix = x.PhonePrefix,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenCountrySQLSelectorList()
        {
            PreBuiltCountrySQLSelectorList = x => x == null ? null! : new AnonCountry
            {
                Code = x.Code,
                ISO3166Alpha2 = x.ISO3166Alpha2,
                ISO3166Alpha3 = x.ISO3166Alpha3,
                ISO3166Numeric = x.ISO3166Numeric,
                PhoneRegEx = x.PhoneRegEx,
                PhonePrefix = x.PhonePrefix,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<ICountryModel> SelectFullCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCountrySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<ICountryModel> SelectLiteCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCountrySQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<ICountryModel> SelectListCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltCountrySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityList(x, contextProfileName))!;
        }

        public static ICountryModel? SelectFirstFullCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCountrySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICountryModel? SelectFirstListCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCountrySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static ICountryModel? SelectSingleFullCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCountrySQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICountryModel? SelectSingleLiteCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCountrySQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static ICountryModel? SelectSingleListCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltCountrySQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateCountryModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<ICountryModel> results, int totalPages, int totalCount) SelectFullCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCountrySQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateCountryModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICountryModel> results, int totalPages, int totalCount) SelectLiteCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCountrySQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateCountryModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<ICountryModel> results, int totalPages, int totalCount) SelectListCountryAndMapToCountryModel(
            this IQueryable<Country> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltCountrySQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltCountrySQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateCountryModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static ICountryModel? CreateCountryModelFromEntityFull(this ICountry? entity, string? contextProfileName)
        {
            return CreateCountryModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static ICountryModel? CreateCountryModelFromEntityLite(this ICountry? entity, string? contextProfileName)
        {
            return CreateCountryModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static ICountryModel? CreateCountryModelFromEntityList(this ICountry? entity, string? contextProfileName)
        {
            return CreateCountryModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static ICountryModel? CreateCountryModelFromEntity(
            this ICountry? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<ICountryModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Country's Properties
                    // Country's Related Objects
                    // Country's Associated Objects
                    model.Currencies = (entity is AnonCountry ? ((AnonCountry)entity).Currencies : entity.Currencies)?.Where(x => x.Active).Select(x => ModelMapperForCountryCurrency.CreateCountryCurrencyModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Images = (entity is AnonCountry ? ((AnonCountry)entity).Images : entity.Images)?.Where(x => x.Active).Select(x => ModelMapperForCountryImage.CreateCountryImageModelFromEntityList(x, contextProfileName)).ToList()!;
                    model.Languages = (entity is AnonCountry ? ((AnonCountry)entity).Languages : entity.Languages)?.Where(x => x.Active).Select(x => ModelMapperForCountryLanguage.CreateCountryLanguageModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateCountryModelFromEntityHooksFull != null) { model = CreateCountryModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Country's Properties
                    // Country's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Country's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCountryModelFromEntityHooksLite != null) { model = CreateCountryModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Country's Properties
                    model.Code = entity.Code;
                    model.ISO3166Alpha2 = entity.ISO3166Alpha2;
                    model.ISO3166Alpha3 = entity.ISO3166Alpha3;
                    model.ISO3166Numeric = entity.ISO3166Numeric;
                    model.PhonePrefix = entity.PhonePrefix;
                    model.PhoneRegEx = entity.PhoneRegEx;
                    // Country's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Country's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateCountryModelFromEntityHooksList != null) { model = CreateCountryModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
