// <autogenerated>
// <copyright file="Mapping.Geography.HistoricalAddressValidation.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForHistoricalAddressValidation
    {
        public sealed class AnonHistoricalAddressValidation : HistoricalAddressValidation
        {
        }

        public static readonly Func<HistoricalAddressValidation?, string?, IHistoricalAddressValidationModel?> MapHistoricalAddressValidationModelFromEntityFull = CreateHistoricalAddressValidationModelFromEntityFull;

        public static readonly Func<HistoricalAddressValidation?, string?, IHistoricalAddressValidationModel?> MapHistoricalAddressValidationModelFromEntityLite = CreateHistoricalAddressValidationModelFromEntityLite;

        public static readonly Func<HistoricalAddressValidation?, string?, IHistoricalAddressValidationModel?> MapHistoricalAddressValidationModelFromEntityList = CreateHistoricalAddressValidationModelFromEntityList;

        public static Func<IHistoricalAddressValidation, IHistoricalAddressValidationModel, string?, IHistoricalAddressValidationModel>? CreateHistoricalAddressValidationModelFromEntityHooksFull { get; set; }

        public static Func<IHistoricalAddressValidation, IHistoricalAddressValidationModel, string?, IHistoricalAddressValidationModel>? CreateHistoricalAddressValidationModelFromEntityHooksLite { get; set; }

        public static Func<IHistoricalAddressValidation, IHistoricalAddressValidationModel, string?, IHistoricalAddressValidationModel>? CreateHistoricalAddressValidationModelFromEntityHooksList { get; set; }

        public static Expression<Func<HistoricalAddressValidation, AnonHistoricalAddressValidation>>? PreBuiltHistoricalAddressValidationSQLSelectorFull { get; set; }

        public static Expression<Func<HistoricalAddressValidation, AnonHistoricalAddressValidation>>? PreBuiltHistoricalAddressValidationSQLSelectorLite { get; set; }

        public static Expression<Func<HistoricalAddressValidation, AnonHistoricalAddressValidation>>? PreBuiltHistoricalAddressValidationSQLSelectorList { get; set; }

        /// <summary>An <see cref="IHistoricalAddressValidationModel"/> extension method that creates a(n) <see cref="HistoricalAddressValidation"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="HistoricalAddressValidation"/> entity.</returns>
        public static IHistoricalAddressValidation CreateHistoricalAddressValidationEntity(
            this IHistoricalAddressValidationModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IHistoricalAddressValidationModel, HistoricalAddressValidation>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateHistoricalAddressValidationFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IHistoricalAddressValidationModel"/> extension method that updates a(n) <see cref="HistoricalAddressValidation"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="HistoricalAddressValidation"/> entity.</returns>
        public static IHistoricalAddressValidation UpdateHistoricalAddressValidationFromModel(
            this IHistoricalAddressValidation entity,
            IHistoricalAddressValidationModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // HistoricalAddressValidation Properties
            entity.AddressHash = model.AddressHash;
            entity.IsValid = model.IsValid;
            entity.OnDate = model.OnDate;
            entity.Provider = model.Provider;
            entity.SerializedRequest = model.SerializedRequest;
            entity.SerializedResponse = model.SerializedResponse;
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenHistoricalAddressValidationSQLSelectorFull()
        {
            PreBuiltHistoricalAddressValidationSQLSelectorFull = x => x == null ? null! : new AnonHistoricalAddressValidation
            {
                AddressHash = x.AddressHash,
                OnDate = x.OnDate,
                IsValid = x.IsValid,
                Provider = x.Provider,
                SerializedRequest = x.SerializedRequest,
                SerializedResponse = x.SerializedResponse,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenHistoricalAddressValidationSQLSelectorLite()
        {
            PreBuiltHistoricalAddressValidationSQLSelectorLite = x => x == null ? null! : new AnonHistoricalAddressValidation
            {
                AddressHash = x.AddressHash,
                OnDate = x.OnDate,
                IsValid = x.IsValid,
                Provider = x.Provider,
                SerializedRequest = x.SerializedRequest,
                SerializedResponse = x.SerializedResponse,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenHistoricalAddressValidationSQLSelectorList()
        {
            PreBuiltHistoricalAddressValidationSQLSelectorList = x => x == null ? null! : new AnonHistoricalAddressValidation
            {
                AddressHash = x.AddressHash,
                OnDate = x.OnDate,
                IsValid = x.IsValid,
                Provider = x.Provider,
                SerializedRequest = x.SerializedRequest,
                SerializedResponse = x.SerializedResponse,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IHistoricalAddressValidationModel> SelectFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IHistoricalAddressValidationModel> SelectLiteHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IHistoricalAddressValidationModel> SelectListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityList(x, contextProfileName))!;
        }

        public static IHistoricalAddressValidationModel? SelectFirstFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IHistoricalAddressValidationModel? SelectFirstListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IHistoricalAddressValidationModel? SelectSingleFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IHistoricalAddressValidationModel? SelectSingleLiteHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IHistoricalAddressValidationModel? SelectSingleListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltHistoricalAddressValidationSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateHistoricalAddressValidationModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IHistoricalAddressValidationModel> results, int totalPages, int totalCount) SelectFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltHistoricalAddressValidationSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateHistoricalAddressValidationModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IHistoricalAddressValidationModel> results, int totalPages, int totalCount) SelectLiteHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltHistoricalAddressValidationSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateHistoricalAddressValidationModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IHistoricalAddressValidationModel> results, int totalPages, int totalCount) SelectListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(
            this IQueryable<HistoricalAddressValidation> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltHistoricalAddressValidationSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltHistoricalAddressValidationSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateHistoricalAddressValidationModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IHistoricalAddressValidationModel? CreateHistoricalAddressValidationModelFromEntityFull(this IHistoricalAddressValidation? entity, string? contextProfileName)
        {
            return CreateHistoricalAddressValidationModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IHistoricalAddressValidationModel? CreateHistoricalAddressValidationModelFromEntityLite(this IHistoricalAddressValidation? entity, string? contextProfileName)
        {
            return CreateHistoricalAddressValidationModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IHistoricalAddressValidationModel? CreateHistoricalAddressValidationModelFromEntityList(this IHistoricalAddressValidation? entity, string? contextProfileName)
        {
            return CreateHistoricalAddressValidationModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IHistoricalAddressValidationModel? CreateHistoricalAddressValidationModelFromEntity(
            this IHistoricalAddressValidation? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IHistoricalAddressValidationModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // HistoricalAddressValidation's Properties
                    // HistoricalAddressValidation's Related Objects
                    // HistoricalAddressValidation's Associated Objects
                    // Additional Mappings
                    if (CreateHistoricalAddressValidationModelFromEntityHooksFull != null) { model = CreateHistoricalAddressValidationModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // HistoricalAddressValidation's Properties
                    // HistoricalAddressValidation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // HistoricalAddressValidation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateHistoricalAddressValidationModelFromEntityHooksLite != null) { model = CreateHistoricalAddressValidationModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // HistoricalAddressValidation's Properties
                    model.AddressHash = entity.AddressHash;
                    model.IsValid = entity.IsValid;
                    model.OnDate = entity.OnDate;
                    model.Provider = entity.Provider;
                    model.SerializedRequest = entity.SerializedRequest;
                    model.SerializedResponse = entity.SerializedResponse;
                    // HistoricalAddressValidation's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // HistoricalAddressValidation's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateHistoricalAddressValidationModelFromEntityHooksList != null) { model = CreateHistoricalAddressValidationModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
