// <autogenerated>
// <copyright file="Mapping.Reviews.Review.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Reviews section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForReview
    {
        public sealed class AnonReview : Review
        {
            public Contact? SubmittedByUserContact { get; set; }
            public Contact? ApprovedByUserContact { get; set; }
            public Contact? UserContact { get; set; }
        }

        public static readonly Func<Review?, string?, IReviewModel?> MapReviewModelFromEntityFull = CreateReviewModelFromEntityFull;

        public static readonly Func<Review?, string?, IReviewModel?> MapReviewModelFromEntityLite = CreateReviewModelFromEntityLite;

        public static readonly Func<Review?, string?, IReviewModel?> MapReviewModelFromEntityList = CreateReviewModelFromEntityList;

        public static Func<IReview, IReviewModel, string?, IReviewModel>? CreateReviewModelFromEntityHooksFull { get; set; }

        public static Func<IReview, IReviewModel, string?, IReviewModel>? CreateReviewModelFromEntityHooksLite { get; set; }

        public static Func<IReview, IReviewModel, string?, IReviewModel>? CreateReviewModelFromEntityHooksList { get; set; }

        public static Expression<Func<Review, AnonReview>>? PreBuiltReviewSQLSelectorFull { get; set; }

        public static Expression<Func<Review, AnonReview>>? PreBuiltReviewSQLSelectorLite { get; set; }

        public static Expression<Func<Review, AnonReview>>? PreBuiltReviewSQLSelectorList { get; set; }

        /// <summary>An <see cref="IReviewModel"/> extension method that creates a(n) <see cref="Review"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Review"/> entity.</returns>
        public static IReview CreateReviewEntity(
            this IReviewModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IReviewModel, Review>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateReviewFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IReviewModel"/> extension method that updates a(n) <see cref="Review"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Review"/> entity.</returns>
        public static IReview UpdateReviewFromModel(
            this IReview entity,
            IReviewModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Review Properties
            entity.Approved = model.Approved;
            entity.ApprovedDate = model.ApprovedDate;
            entity.Comment = model.Comment;
            entity.Location = model.Location;
            entity.SortOrder = model.SortOrder;
            entity.Title = model.Title;
            entity.Value = model.Value;
            // Review's Related Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenReviewSQLSelectorFull()
        {
            PreBuiltReviewSQLSelectorFull = x => x == null ? null! : new AnonReview
            {
                TypeID = x.TypeID,
                Type = ModelMapperForReviewType.PreBuiltReviewTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                SortOrder = x.SortOrder,
                Value = x.Value,
                Comment = x.Comment,
                Approved = x.Approved,
                ApprovedDate = x.ApprovedDate,
                Title = x.Title,
                Location = x.Location,
                SubmittedByUserID = x.SubmittedByUserID,
                SubmittedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.SubmittedByUser!),
                ApprovedByUserID = x.ApprovedByUserID,
                ApprovedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.ApprovedByUser!),
                CategoryID = x.CategoryID,
                Category = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.Category!),
                ManufacturerID = x.ManufacturerID,
                Manufacturer = ModelMapperForManufacturer.PreBuiltManufacturerSQLSelectorList.Expand().Compile().Invoke(x.Manufacturer!),
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenReviewSQLSelectorLite()
        {
            PreBuiltReviewSQLSelectorLite = x => x == null ? null! : new AnonReview
            {
                TypeID = x.TypeID,
                Type = ModelMapperForReviewType.PreBuiltReviewTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!),
                SortOrder = x.SortOrder,
                Value = x.Value,
                Comment = x.Comment,
                Approved = x.Approved,
                ApprovedDate = x.ApprovedDate,
                Title = x.Title,
                Location = x.Location,
                SubmittedByUserID = x.SubmittedByUserID,
                SubmittedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.SubmittedByUser!),
                ApprovedByUserID = x.ApprovedByUserID,
                ApprovedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.ApprovedByUser!),
                CategoryID = x.CategoryID,
                Category = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.Category!),
                ManufacturerID = x.ManufacturerID,
                Manufacturer = ModelMapperForManufacturer.PreBuiltManufacturerSQLSelectorList.Expand().Compile().Invoke(x.Manufacturer!),
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!),
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!),
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!),
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!),
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenReviewSQLSelectorList()
        {
            PreBuiltReviewSQLSelectorList = x => x == null ? null! : new AnonReview
            {
                TypeID = x.TypeID,
                Type = ModelMapperForReviewType.PreBuiltReviewTypeSQLSelectorList.Expand().Compile().Invoke(x.Type!), // For Flattening Properties (List)
                SortOrder = x.SortOrder,
                Value = x.Value,
                Comment = x.Comment,
                Approved = x.Approved,
                ApprovedDate = x.ApprovedDate,
                Title = x.Title,
                Location = x.Location,
                SubmittedByUserID = x.SubmittedByUserID,
                SubmittedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.SubmittedByUser!), // For Flattening Properties (List)
                ApprovedByUserID = x.ApprovedByUserID,
                ApprovedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.ApprovedByUser!), // For Flattening Properties (List)
                CategoryID = x.CategoryID,
                Category = ModelMapperForCategory.PreBuiltCategorySQLSelectorList.Expand().Compile().Invoke(x.Category!), // For Flattening Properties (List)
                ManufacturerID = x.ManufacturerID,
                Manufacturer = ModelMapperForManufacturer.PreBuiltManufacturerSQLSelectorList.Expand().Compile().Invoke(x.Manufacturer!), // For Flattening Properties (List)
                ProductID = x.ProductID,
                Product = ModelMapperForProduct.PreBuiltProductSQLSelectorList.Expand().Compile().Invoke(x.Product!), // For Flattening Properties (List)
                StoreID = x.StoreID,
                Store = ModelMapperForStore.PreBuiltStoreSQLSelectorList.Expand().Compile().Invoke(x.Store!), // For Flattening Properties (List)
                UserID = x.UserID,
                User = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.User!), // For Flattening Properties (List)
                VendorID = x.VendorID,
                Vendor = ModelMapperForVendor.PreBuiltVendorSQLSelectorList.Expand().Compile().Invoke(x.Vendor!), // For Flattening Properties (List)
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IReviewModel> SelectFullReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReviewSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IReviewModel> SelectLiteReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReviewSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IReviewModel> SelectListReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltReviewSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityList(x, contextProfileName))!;
        }

        public static IReviewModel? SelectFirstFullReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReviewSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IReviewModel? SelectFirstListReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReviewSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IReviewModel? SelectSingleFullReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReviewSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IReviewModel? SelectSingleLiteReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReviewSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IReviewModel? SelectSingleListReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltReviewSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateReviewModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IReviewModel> results, int totalPages, int totalCount) SelectFullReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReviewSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateReviewModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IReviewModel> results, int totalPages, int totalCount) SelectLiteReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReviewSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateReviewModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IReviewModel> results, int totalPages, int totalCount) SelectListReviewAndMapToReviewModel(
            this IQueryable<Review> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltReviewSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltReviewSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateReviewModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IReviewModel? CreateReviewModelFromEntityFull(this IReview? entity, string? contextProfileName)
        {
            return CreateReviewModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IReviewModel? CreateReviewModelFromEntityLite(this IReview? entity, string? contextProfileName)
        {
            return CreateReviewModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IReviewModel? CreateReviewModelFromEntityList(this IReview? entity, string? contextProfileName)
        {
            return CreateReviewModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IReviewModel? CreateReviewModelFromEntity(
            this IReview? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IReviewModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Review's Properties
                    // Review's Related Objects
                    model.ApprovedByUser = ModelMapperForUser.CreateUserModelFromEntityLite(entity.ApprovedByUser, contextProfileName);
                    model.Category = ModelMapperForCategory.CreateCategoryModelFromEntityLite(entity.Category, contextProfileName);
                    model.Manufacturer = ModelMapperForManufacturer.CreateManufacturerModelFromEntityLite(entity.Manufacturer, contextProfileName);
                    model.Product = ModelMapperForProduct.MapLiteProductOldExt(entity.Product);
                    model.Store = ModelMapperForStore.CreateStoreModelFromEntityLite(entity.Store, contextProfileName);
                    model.SubmittedByUser = ModelMapperForUser.CreateUserModelFromEntityLite(entity.SubmittedByUser, contextProfileName);
                    model.User = ModelMapperForUser.CreateUserModelFromEntityLite(entity.User, contextProfileName);
                    model.Vendor = ModelMapperForVendor.CreateVendorModelFromEntityLite(entity.Vendor, contextProfileName);
                    // Review's Associated Objects
                    // Additional Mappings
                    if (CreateReviewModelFromEntityHooksFull != null) { model = CreateReviewModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Review's Properties
                    // IHaveATypeBase Properties (Forced)
                    model.Type = ModelMapperForReviewType.CreateReviewTypeModelFromEntityLite(entity.Type, contextProfileName);
                    // Review's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Review's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateReviewModelFromEntityHooksLite != null) { model = CreateReviewModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveATypeBase Properties
                    model.TypeID = entity.TypeID;
                    if (entity.Type != null)
                    {
                        model.TypeKey = entity.Type.CustomKey;
                        model.TypeName = entity.Type.Name;
                        model.TypeDisplayName = entity.Type.DisplayName;
                        model.TypeTranslationKey = entity.Type.TranslationKey;
                        model.TypeSortOrder = entity.Type.SortOrder;
                    }
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Review's Properties
                    model.Approved = entity.Approved;
                    model.ApprovedDate = entity.ApprovedDate;
                    model.Comment = entity.Comment;
                    model.Location = entity.Location;
                    model.SortOrder = entity.SortOrder;
                    model.Title = entity.Title;
                    model.Value = entity.Value;
                    // Review's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.ApprovedByUserID = entity.ApprovedByUserID;
                    model.ApprovedByUserKey = entity.ApprovedByUser?.CustomKey;
                    model.ApprovedByUserUserName = entity.ApprovedByUser?.UserName;
                    model.CategoryID = entity.CategoryID;
                    model.CategoryKey = entity.Category?.CustomKey;
                    model.CategoryName = entity.Category?.Name;
                    model.ManufacturerID = entity.ManufacturerID;
                    model.ManufacturerKey = entity.Manufacturer?.CustomKey;
                    model.ManufacturerName = entity.Manufacturer?.Name;
                    model.ProductID = entity.ProductID;
                    model.ProductKey = entity.Product?.CustomKey;
                    model.ProductName = entity.Product?.Name;
                    model.StoreID = entity.StoreID;
                    model.StoreKey = entity.Store?.CustomKey;
                    model.StoreName = entity.Store?.Name;
                    model.SubmittedByUserID = entity.SubmittedByUserID;
                    model.SubmittedByUserKey = entity.SubmittedByUser?.CustomKey;
                    model.SubmittedByUserUserName = entity.SubmittedByUser?.UserName;
                    model.UserID = entity.UserID;
                    model.UserKey = entity.User?.CustomKey;
                    model.UserUserName = entity.User?.UserName;
                    model.VendorID = entity.VendorID;
                    model.VendorKey = entity.Vendor?.CustomKey;
                    model.VendorName = entity.Vendor?.Name;
                    // Review's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateReviewModelFromEntityHooksList != null) { model = CreateReviewModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
