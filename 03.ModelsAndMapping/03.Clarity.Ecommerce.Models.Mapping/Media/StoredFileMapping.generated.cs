// <autogenerated>
// <copyright file="Mapping.Media.StoredFile.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Media section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForStoredFile
    {
        public sealed class AnonStoredFile : StoredFile
        {
        }

        public static readonly Func<StoredFile?, string?, IStoredFileModel?> MapStoredFileModelFromEntityFull = CreateStoredFileModelFromEntityFull;

        public static readonly Func<StoredFile?, string?, IStoredFileModel?> MapStoredFileModelFromEntityLite = CreateStoredFileModelFromEntityLite;

        public static readonly Func<StoredFile?, string?, IStoredFileModel?> MapStoredFileModelFromEntityList = CreateStoredFileModelFromEntityList;

        public static Func<IStoredFile, IStoredFileModel, string?, IStoredFileModel>? CreateStoredFileModelFromEntityHooksFull { get; set; }

        public static Func<IStoredFile, IStoredFileModel, string?, IStoredFileModel>? CreateStoredFileModelFromEntityHooksLite { get; set; }

        public static Func<IStoredFile, IStoredFileModel, string?, IStoredFileModel>? CreateStoredFileModelFromEntityHooksList { get; set; }

        public static Expression<Func<StoredFile, AnonStoredFile>>? PreBuiltStoredFileSQLSelectorFull { get; set; }

        public static Expression<Func<StoredFile, AnonStoredFile>>? PreBuiltStoredFileSQLSelectorLite { get; set; }

        public static Expression<Func<StoredFile, AnonStoredFile>>? PreBuiltStoredFileSQLSelectorList { get; set; }

        /// <summary>An <see cref="IStoredFileModel"/> extension method that creates a(n) <see cref="StoredFile"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="StoredFile"/> entity.</returns>
        public static IStoredFile CreateStoredFileEntity(
            this IStoredFileModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelNameableBase<IStoredFileModel, StoredFile>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateStoredFileFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IStoredFileModel"/> extension method that updates a(n) <see cref="StoredFile"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="StoredFile"/> entity.</returns>
        public static IStoredFile UpdateStoredFileFromModel(
            this IStoredFile entity,
            IStoredFileModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapNameableBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // StoredFile Properties
            entity.Author = model.Author;
            entity.Bytes = model.Bytes;
            entity.Copyright = model.Copyright;
            entity.DisplayName = model.DisplayName;
            entity.FileFormat = model.FileFormat;
            entity.FileName = model.FileName;
            entity.IsStoredInDB = model.IsStoredInDB;
            entity.SeoTitle = model.SeoTitle;
            entity.SortOrder = model.SortOrder;
            // StoredFile's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenStoredFileSQLSelectorFull()
        {
            PreBuiltStoredFileSQLSelectorFull = x => x == null ? null! : new AnonStoredFile
            {
                SortOrder = x.SortOrder,
                DisplayName = x.DisplayName,
                SeoTitle = x.SeoTitle,
                Author = x.Author,
                Copyright = x.Copyright,
                FileFormat = x.FileFormat,
                FileName = x.FileName,
                IsStoredInDB = x.IsStoredInDB,
                Bytes = x.Bytes,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenStoredFileSQLSelectorLite()
        {
            PreBuiltStoredFileSQLSelectorLite = x => x == null ? null! : new AnonStoredFile
            {
                SortOrder = x.SortOrder,
                DisplayName = x.DisplayName,
                SeoTitle = x.SeoTitle,
                Author = x.Author,
                Copyright = x.Copyright,
                FileFormat = x.FileFormat,
                FileName = x.FileName,
                IsStoredInDB = x.IsStoredInDB,
                Name = x.Name,
                Description = x.Description,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenStoredFileSQLSelectorList()
        {
            PreBuiltStoredFileSQLSelectorList = x => x == null ? null! : new AnonStoredFile
            {
                SortOrder = x.SortOrder,
                DisplayName = x.DisplayName,
                SeoTitle = x.SeoTitle,
                Author = x.Author,
                Copyright = x.Copyright,
                FileFormat = x.FileFormat,
                FileName = x.FileName,
                IsStoredInDB = x.IsStoredInDB,
                Name = x.Name,
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IStoredFileModel> SelectFullStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltStoredFileSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IStoredFileModel> SelectLiteStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltStoredFileSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IStoredFileModel> SelectListStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltStoredFileSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityList(x, contextProfileName))!;
        }

        public static IStoredFileModel? SelectFirstFullStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoredFileSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IStoredFileModel? SelectFirstListStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoredFileSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IStoredFileModel? SelectSingleFullStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoredFileSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IStoredFileModel? SelectSingleLiteStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoredFileSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IStoredFileModel? SelectSingleListStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltStoredFileSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateStoredFileModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IStoredFileModel> results, int totalPages, int totalCount) SelectFullStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltStoredFileSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateStoredFileModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IStoredFileModel> results, int totalPages, int totalCount) SelectLiteStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltStoredFileSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateStoredFileModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IStoredFileModel> results, int totalPages, int totalCount) SelectListStoredFileAndMapToStoredFileModel(
            this IQueryable<StoredFile> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltStoredFileSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltStoredFileSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateStoredFileModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IStoredFileModel? CreateStoredFileModelFromEntityFull(this IStoredFile? entity, string? contextProfileName)
        {
            return CreateStoredFileModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IStoredFileModel? CreateStoredFileModelFromEntityLite(this IStoredFile? entity, string? contextProfileName)
        {
            return CreateStoredFileModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IStoredFileModel? CreateStoredFileModelFromEntityList(this IStoredFile? entity, string? contextProfileName)
        {
            return CreateStoredFileModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IStoredFileModel? CreateStoredFileModelFromEntity(
            this IStoredFile? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapNameableBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IStoredFileModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // StoredFile's Properties
                    model.Bytes = entity.Bytes;
                    // StoredFile's Related Objects
                    // StoredFile's Associated Objects
                    // Additional Mappings
                    if (CreateStoredFileModelFromEntityHooksFull != null) { model = CreateStoredFileModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // StoredFile's Properties
                    // StoredFile's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // StoredFile's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateStoredFileModelFromEntityHooksLite != null) { model = CreateStoredFileModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // StoredFile's Properties
                    model.Author = entity.Author;
                    model.Copyright = entity.Copyright;
                    model.DisplayName = entity.DisplayName;
                    model.FileFormat = entity.FileFormat;
                    model.FileName = entity.FileName;
                    model.IsStoredInDB = entity.IsStoredInDB;
                    model.SeoTitle = entity.SeoTitle;
                    model.SortOrder = entity.SortOrder;
                    // StoredFile's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // StoredFile's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateStoredFileModelFromEntityHooksList != null) { model = CreateStoredFileModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
