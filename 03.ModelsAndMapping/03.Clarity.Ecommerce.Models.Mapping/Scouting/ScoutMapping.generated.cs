// <autogenerated>
// <copyright file="Mapping.Scouting.Scout.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Scouting section of the Mapping class</summary>
// <remarks>This file was auto-generated by Mapping.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow, InvokeAsExtensionMethod, MergeCastWithTypeCheck
// ReSharper disable MissingLinebreak, RedundantDelegateInvoke, RedundantUsingDirective
#pragma warning disable CS0618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Mapper
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Linq.Expressions;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using LinqKit;
    using MoreLinq;
    using Utilities;

    public static partial class ModelMapperForScout
    {
        public sealed class AnonScout : Scout
        {
            public new IEnumerable<ScoutCategory>? Categories { get; set; }
            public Contact? CreatedByUserContact { get; set; }
        }

        public static readonly Func<Scout?, string?, IScoutModel?> MapScoutModelFromEntityFull = CreateScoutModelFromEntityFull;

        public static readonly Func<Scout?, string?, IScoutModel?> MapScoutModelFromEntityLite = CreateScoutModelFromEntityLite;

        public static readonly Func<Scout?, string?, IScoutModel?> MapScoutModelFromEntityList = CreateScoutModelFromEntityList;

        public static Func<IScout, IScoutModel, string?, IScoutModel>? CreateScoutModelFromEntityHooksFull { get; set; }

        public static Func<IScout, IScoutModel, string?, IScoutModel>? CreateScoutModelFromEntityHooksLite { get; set; }

        public static Func<IScout, IScoutModel, string?, IScoutModel>? CreateScoutModelFromEntityHooksList { get; set; }

        public static Expression<Func<Scout, AnonScout>>? PreBuiltScoutSQLSelectorFull { get; set; }

        public static Expression<Func<Scout, AnonScout>>? PreBuiltScoutSQLSelectorLite { get; set; }

        public static Expression<Func<Scout, AnonScout>>? PreBuiltScoutSQLSelectorList { get; set; }

        /// <summary>An <see cref="IScoutModel"/> extension method that creates a(n) <see cref="Scout"/> entity.</summary>
        /// <param name="model">            The model to act on.</param>
        /// <param name="timestamp">        The timestamp Date/Time.</param>
        /// <param name="contextProfileName">Name of the context profile.</param>
        /// <returns>The new <see cref="Scout"/> entity.</returns>
        public static IScout CreateScoutEntity(
            this IScoutModel model,
            DateTime timestamp,
            string? contextProfileName)
        {
            // Create the object and Map the Inherited Properties
            return Contract.RequiresNotNull(model)
                .CreateEntityFromModelBase<IScoutModel, Scout>(timestamp, contextProfileName)
                // Use the Update method to map non-inherited properties
                .UpdateScoutFromModel(model, timestamp, null);
        }

        /// <summary>An <see cref="IScoutModel"/> extension method that updates a(n) <see cref="Scout"/> entity.</summary>
        /// <param name="entity">         The entity to act on.</param>
        /// <param name="model">          The model to read from.</param>
        /// <param name="timestamp">      The timestamp Date/Time.</param>
        /// <param name="updateTimestamp">The update timestamp Date/Time.</param>
        /// <returns>The updated <see cref="Scout"/> entity.</returns>
        public static IScout UpdateScoutFromModel(
            this IScout entity,
            IScoutModel model,
            DateTime timestamp,
            DateTime? updateTimestamp)
        {
            // Map the Inherited Properties
            entity = Contract.RequiresNotNull(entity)
                .MapBaseModelPropertiesToEntity(Contract.RequiresNotNull(model));
            // Scout Properties
            entity.DistanceUnitOfMeasure = model.DistanceUnitOfMeasure;
            entity.DistanceUsedMax = model.DistanceUsedMax;
            entity.DistanceUsedMin = model.DistanceUsedMin;
            entity.HoursUsedMax = model.HoursUsedMax;
            entity.HoursUsedMin = model.HoursUsedMin;
            entity.PriceMax = model.PriceMax;
            entity.PriceMin = model.PriceMin;
            entity.YearMax = model.YearMax;
            entity.YearMin = model.YearMin;
            // Scout's Related Objects
            // Scout's Associated Objects
            // Finally, update the timestamp
            entity.UpdatedDate = updateTimestamp == null || updateTimestamp == DateTime.MinValue ? null : updateTimestamp;
            // Return
            return entity;
        }

        public static void GenScoutSQLSelectorFull()
        {
            PreBuiltScoutSQLSelectorFull = x => x == null ? null! : new AnonScout
            {
                YearMin = x.YearMin,
                YearMax = x.YearMax,
                PriceMin = x.PriceMin,
                PriceMax = x.PriceMax,
                HoursUsedMin = x.HoursUsedMin,
                HoursUsedMax = x.HoursUsedMax,
                DistanceUsedMin = x.DistanceUsedMin,
                DistanceUsedMax = x.DistanceUsedMax,
                DistanceUnitOfMeasure = x.DistanceUnitOfMeasure,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!),
                Categories = x.Categories!.Where(y => y.Active).Select(ModelMapperForScoutCategory.PreBuiltScoutCategorySQLSelectorList.Expand().Compile()).ToList(),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenScoutSQLSelectorLite()
        {
            PreBuiltScoutSQLSelectorLite = x => x == null ? null! : new AnonScout
            {
                YearMin = x.YearMin,
                YearMax = x.YearMax,
                PriceMin = x.PriceMin,
                PriceMax = x.PriceMax,
                HoursUsedMin = x.HoursUsedMin,
                HoursUsedMax = x.HoursUsedMax,
                DistanceUsedMin = x.DistanceUsedMin,
                DistanceUsedMax = x.DistanceUsedMax,
                DistanceUnitOfMeasure = x.DistanceUnitOfMeasure,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!),
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                UpdatedDate = x.UpdatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static void GenScoutSQLSelectorList()
        {
            PreBuiltScoutSQLSelectorList = x => x == null ? null! : new AnonScout
            {
                YearMin = x.YearMin,
                YearMax = x.YearMax,
                PriceMin = x.PriceMin,
                PriceMax = x.PriceMax,
                HoursUsedMin = x.HoursUsedMin,
                HoursUsedMax = x.HoursUsedMax,
                DistanceUsedMin = x.DistanceUsedMin,
                DistanceUsedMax = x.DistanceUsedMax,
                DistanceUnitOfMeasure = x.DistanceUnitOfMeasure,
                CreatedByUserID = x.CreatedByUserID,
                CreatedByUser = ModelMapperForUser.PreBuiltUserSQLSelectorList.Expand().Compile().Invoke(x.CreatedByUser!), // For Flattening Properties (List)
                ID = x.ID,
                CustomKey = x.CustomKey,
                CreatedDate = x.CreatedDate,
                Active = x.Active,
                Hash = x.Hash,
                JsonAttributes = x.JsonAttributes,
            };
        }

        public static IEnumerable<IScoutModel> SelectFullScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltScoutSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityFull(x, contextProfileName))!;
        }

        public static IEnumerable<IScoutModel> SelectLiteScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltScoutSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityLite(x, contextProfileName))!;
        }

        public static IEnumerable<IScoutModel> SelectListScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .Select(PreBuiltScoutSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityList(x, contextProfileName))!;
        }

        public static IScoutModel? SelectFirstFullScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScoutSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityFull(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IScoutModel? SelectFirstListScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScoutSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityList(x, contextProfileName))
                .FirstOrDefault();
        }

        public static IScoutModel? SelectSingleFullScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorFull == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScoutSQLSelectorFull!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityFull(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IScoutModel? SelectSingleLiteScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorLite == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScoutSQLSelectorLite!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityLite(x, contextProfileName))
                .SingleOrDefault();
        }

        public static IScoutModel? SelectSingleListScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorList == null);
            return dbSetWithFilters
                .AsExpandable()
                .OrderBy(x => x.ID)
                .Take(1)
                .Select(PreBuiltScoutSQLSelectorList!.Compile())
                .ToList()
                .Select(x => CreateScoutModelFromEntityList(x, contextProfileName))
                .SingleOrDefault();
        }

        public static (IEnumerable<IScoutModel> results, int totalPages, int totalCount) SelectFullScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorFull == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltScoutSQLSelectorFull!.Compile())
                    .ToList()
                    .Select(x => CreateScoutModelFromEntityFull(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IScoutModel> results, int totalPages, int totalCount) SelectLiteScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorLite == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltScoutSQLSelectorLite!.Compile())
                    .ToList()
                    .Select(x => CreateScoutModelFromEntityLite(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static (IEnumerable<IScoutModel> results, int totalPages, int totalCount) SelectListScoutAndMapToScoutModel(
            this IQueryable<Scout> dbSetWithFilters,
            Paging? paging,
            Sort[]? sorts,
            Grouping[]? groupings,
            string? contextProfileName)
        {
            BaseModelMapper.Initialize(PreBuiltScoutSQLSelectorList == null);
            return (dbSetWithFilters
                    .AsExpandable()
                    .ApplySorting(sorts, groupings, contextProfileName)
                    .FilterByPaging(paging, out var totalPages, out var totalCount)
                    .Select(PreBuiltScoutSQLSelectorList!.Compile())
                    .ToList()
                    .Select(x => CreateScoutModelFromEntityList(x, contextProfileName)),
                totalPages,
                totalCount)!;
        }

        public static IScoutModel? CreateScoutModelFromEntityFull(this IScout? entity, string? contextProfileName)
        {
            return CreateScoutModelFromEntity(entity, MappingMode.Full, contextProfileName);
        }

        public static IScoutModel? CreateScoutModelFromEntityLite(this IScout? entity, string? contextProfileName)
        {
            return CreateScoutModelFromEntity(entity, MappingMode.Lite, contextProfileName);
        }

        public static IScoutModel? CreateScoutModelFromEntityList(this IScout? entity, string? contextProfileName)
        {
            return CreateScoutModelFromEntity(entity, MappingMode.List, contextProfileName);
        }

        public static IScoutModel? CreateScoutModelFromEntity(
            this IScout? entity,
            MappingMode mode,
            string? contextProfileName)
        {
            if (entity == null) { return null; }
            // Map the Inherited Properties
            // ReSharper disable once InvokeAsExtensionMethod
            var model = BaseModelMapper.MapBaseEntityPropertiesToModel(
                RegistryLoaderWrapper.GetInstance<IScoutModel>(contextProfileName),
                Contract.RequiresNotNull(entity),
                mode,
                contextProfileName);
            // Map this level's Properties
            switch (mode)
            {
                case MappingMode.Full: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Scout's Properties
                    // Scout's Related Objects
                    model.CreatedByUser = ModelMapperForUser.CreateUserModelFromEntityLite(entity.CreatedByUser, contextProfileName);
                    // Scout's Associated Objects
                    model.Categories = (entity is AnonScout ? ((AnonScout)entity).Categories : entity.Categories)?.Where(x => x.Active).Select(x => ModelMapperForScoutCategory.CreateScoutCategoryModelFromEntityList(x, contextProfileName)).ToList()!;
                    // Additional Mappings
                    if (CreateScoutModelFromEntityHooksFull != null) { model = CreateScoutModelFromEntityHooksFull(entity, model, contextProfileName); }
                    goto case MappingMode.Lite;
                }
                case MappingMode.Lite: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                {
                    // Scout's Properties
                    // Scout's Related Objects (Not Mapped unless Forced, or a flattening property)
                    // Scout's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateScoutModelFromEntityHooksLite != null) { model = CreateScoutModelFromEntityHooksLite(entity, model, contextProfileName); }
                    goto case MappingMode.List;
                }
                case MappingMode.List: //////////////////////////////////////////////////////////////////////////////////////////////////////////////
                default:
                {
                    // IHaveJsonAttributesBase Properties (Forced)
                    model.SerializableAttributes = entity.JsonAttributes.DeserializeAttributesDictionary();
                    // Scout's Properties
                    model.DistanceUnitOfMeasure = entity.DistanceUnitOfMeasure;
                    model.DistanceUsedMax = entity.DistanceUsedMax;
                    model.DistanceUsedMin = entity.DistanceUsedMin;
                    model.HoursUsedMax = entity.HoursUsedMax;
                    model.HoursUsedMin = entity.HoursUsedMin;
                    model.PriceMax = entity.PriceMax;
                    model.PriceMin = entity.PriceMin;
                    model.YearMax = entity.YearMax;
                    model.YearMin = entity.YearMin;
                    // Scout's Related Objects (Not Mapped unless Forced, or a flattening property)
                    model.CreatedByUserID = entity.CreatedByUserID;
                    model.CreatedByUserKey = entity.CreatedByUser?.CustomKey;
                    // Scout's Associated Objects (Not Mapped unless Forced)
                    // Additional Mappings
                    if (CreateScoutModelFromEntityHooksList != null) { model = CreateScoutModelFromEntityHooksList(entity, model, contextProfileName); }
                    break;
                }
            } ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Finished!
            return model;
        }
    }
}
