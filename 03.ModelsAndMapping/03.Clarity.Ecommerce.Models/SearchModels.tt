<#@ template hostSpecific="true" language="C#"
#><#@ output extension=".cstxt"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#
IEnumerable<IGrouping<string, Type>> tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
List<string> processedNames = new List<string>() { "Report", "Contact", "Type", "Status", "State", "SalesItemBase" };
List<string> skipProperties = new List<string> {
    "ID", "CustomKey", "Active", "CreatedDate", "UpdatedDate", "Hash", "SerializableAttributes", "JsonAttributes",
    "OriginalBytes", "ThumbnailBytes", "Role", "Bytes", "Template"
};
foreach (IGrouping<string, Type> @group in tableClasses)
{
    foreach (Type theType in @group)
    {
        string name = HelpFunctions.SwapToModelType(theType.Name);
        if (processedNames.Contains(name))
        { #>
// <#= theType.Name #>-><#= name #> skipped (Already Processed)
<#          SaveOutput(@group.Key.Replace("System", "Structure") + "\\" + theType.Name + "SearchModel", "generated.cstxt", true);
            continue;
        }
        processedNames.Add(name);
        TypeDeterminer td = new TypeDeterminer(theType);
        if (td.IsExcludedFromT4)
        { #>
// <#= theType.Name #>-><#= name #> skipped (IsExcludedFromT4)
<#          SaveOutput(@group.Key.Replace("System", "Structure") + "\\" + theType.Name + "SearchModel", "generated.cstxt", true);
            continue;
        }
        List<string> thisSkipProperties = new List<string>(skipProperties);
#>// <autogenerated>
// <copyright file="<#= theType.Name #>SearchModel.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the SearchModel Classes generated to provide base setups.</summary>
// <remarks>This file was auto-generated by SearchModels.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable MissingXmlDoc, PartialTypeWithSinglePart, RedundantExtendsListEntry, RedundantUsingDirective, UnusedMember.Global
#nullable enable
namespace Clarity.Ecommerce.Models
{
    using System;
    using System.Collections.Generic;
    using Interfaces.Models;
    using ServiceStack;

    /// <summary>A data model for the <#= HelpFunctions.SplitCamelCase(theType.Name) #> search.</summary>
<#      if (td.IsDeprecated) { #>
    [Obsolete("<#= td.DeprecatedMessage #>", false)]
<#      } #>
    public partial class <#= name #>SearchModel
<#      if (td.IsISalesCollectionBase) { thisSkipProperties.AddRange(new[] { "AccountID", "UserID", "BrandID", "FranchiseID", "StoreID", }); #>
        : SalesCollectionBaseSearchModel
<#      } else if (td.IsISalesItemBase) { #>
        : SalesItemBaseSearchModel
<#      } else if (td.IsISalesEventBase) { #>
        : SalesEventBaseSearchModel
<#      } else { #>
        : <#= td.IsIStatusableBase ? "Statusable" : string.Empty
            #><#= td.IsIStateableBase ? "Stateable" : string.Empty
            #><#= td.IsITypableBase ? "Typable" : string.Empty
            #><#= td.IsIAmARelationshipTable ? "AmARelationshipTable" : string.Empty
            #><#= !td.IsIStatusableBase && !td.IsITypableBase && td.IsINameableBase ? "Nameable" : string.Empty #>BaseSearchModel
<#      } #>
        , I<#= name #>SearchModel
    {
<#      if (td.IsIAmARelationshipTable) { #>
        #region IAmARelationshipTableBaseSearchModel
<#      if (td.RelationshipPrimaryTypeTD.IsINameableBase) { #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(MasterName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Name of the Master Record [Optional]")]
        public string? MasterName { get; set; }
<#      } #>
<#      if (td.RelationshipSecondaryTypeTD.IsINameableBase) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SlaveName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Name of the Slave Record [Optional]")]
        public string? SlaveName { get; set; }
<#      } #>
        #endregion
<#      } #>
<#      if (td.IsIHaveATypeBase && !td.IsISalesCollectionBase && !td.IsISalesEventBase) { #>
        #region IHaveATypeBaseSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The Type ID for objects")]
        public int? TypeID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeIDs), DataType = "int?[]", ParameterType = "query", IsRequired = false,
            Description = "The Type IDs for objects to specifically include")]
        public int?[]? TypeIDs { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The Type ID for objects to specifically exclude")]
        public int? ExcludedTypeID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeIDs), DataType = "int?[]", ParameterType = "query", IsRequired = false,
            Description = "The Type IDs for objects to specifically exclude")]
        public int?[]? ExcludedTypeIDs { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Type Key for objects")]
        public string? TypeKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeKeys), DataType = "string[]", ParameterType = "query", IsRequired = false,
            Description = "The Type Keys for objects to specifically include")]
        public string?[]? TypeKeys { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Type Key for objects to specifically exclude")]
        public string? ExcludedTypeKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeKeys), DataType = "string[]", ParameterType = "query", IsRequired = false,
            Description = "The Type Keys for objects to specifically exclude")]
        public string?[]? ExcludedTypeKeys { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Type Name for objects")]
        public string? TypeName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeNames), DataType = "string[]", ParameterType = "query", IsRequired = false,
            Description = "The Type Names for objects to specifically include")]
        public string?[]? TypeNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Type Name for objects to specifically exclude")]
        public string? ExcludedTypeName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeNames), DataType = "string[]", ParameterType = "query", IsRequired = false,
            Description = "The Type Names for objects to specifically exclude")]
        public string?[]? ExcludedTypeNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeDisplayName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Type Display Name for objects")]
        public string? TypeDisplayName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeDisplayNames), DataType = "string[]", ParameterType = "query", IsRequired = false,
            Description = "The Type Display Names for objects to specifically include")]
        public string?[]? TypeDisplayNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeDisplayName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Type Display Name for objects to specifically exclude")]
        public string? ExcludedTypeDisplayName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedTypeDisplayNames), DataType = "string[]", ParameterType = "query", IsRequired = false,
            Description = "The Type Display Names for objects to specifically exclude")]
        public string?[]? ExcludedTypeDisplayNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(TypeTranslationKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Type Translation Key for objects")]
        public string? TypeTranslationKey { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIHaveAStatusBase && !td.IsISalesCollectionBase) { #>
        #region IHaveAStatusBaseSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The Status ID for objects")]
        public int? StatusID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusIDs), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The Status IDs for objects to specifically include")]
        public int?[]? StatusIDs { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The Status ID for objects to specifically exclude")]
        public int? ExcludedStatusID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusIDs), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The Status IDs for objects to specifically exclude")]
        public int?[]? ExcludedStatusIDs { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Key for objects")]
        public string? StatusKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusKeys), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Keys for objects to specifically include")]
        public string?[]? StatusKeys { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Key for objects to specifically exclude")]
        public string? ExcludedStatusKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusKeys), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Keys for objects to specifically exclude")]
        public string?[]? ExcludedStatusKeys { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Name for objects")]
        public string? StatusName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Names for objects to specifically include")]
        public string?[]? StatusNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Name for objects to specifically exclude")]
        public string? ExcludedStatusName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Names for objects to specifically exclude")]
        public string?[]? ExcludedStatusNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusDisplayName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Display Name for objects")]
        public string? StatusDisplayName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusDisplayNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Display Names for objects to specifically include")]
        public string?[]? StatusDisplayNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusDisplayName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Display Name for objects to specifically exclude")]
        public string? ExcludedStatusDisplayName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStatusDisplayNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Display Names for objects to specifically exclude")]
        public string?[]? ExcludedStatusDisplayNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StatusTranslationKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Status Translation Key for objects")]
        public string? StatusTranslationKey { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIHaveAStateBase && !td.IsISalesCollectionBase) { #>
        #region IHaveAStateBaseSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The State ID for objects")]
        public int? StateID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateIDs), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The State IDs for objects to specifically include")]
        public int?[]? StateIDs { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The State ID for objects to specifically exclude")]
        public int? ExcludedStateID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateIDs), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The State IDs for objects to specifically exclude")]
        public int?[]? ExcludedStateIDs { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Key for objects")]
        public string? StateKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateKeys), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Keys for objects to specifically include")]
        public string?[]? StateKeys { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Key for objects to specifically exclude")]
        public string? ExcludedStateKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateKeys), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Keys for objects to specifically exclude")]
        public string?[]? ExcludedStateKeys { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Name for objects")]
        public string? StateName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Names for objects to specifically include")]
        public string?[]? StateNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Name for objects to specifically exclude")]
        public string? ExcludedStateName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Names for objects to specifically exclude")]
        public string?[]? ExcludedStateNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateDisplayName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Display Name for objects")]
        public string? StateDisplayName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateDisplayNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Display Names for objects to specifically include")]
        public string?[]? StateDisplayNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateDisplayName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Display Name for objects to specifically exclude")]
        public string? ExcludedStateDisplayName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ExcludedStateDisplayNames), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Display Names for objects to specifically exclude")]
        public string?[]? ExcludedStateDisplayNames { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StateTranslationKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The State Translation Key for objects")]
        public string? StateTranslationKey { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByAccountT || td.IsIAmFilterableByAccount || td.IsIAmFilterableByNullableAccount)
            && !td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type") { #>
        #region IAmFilterableByAccountSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(AccountID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Account ID For Search, Note: This will be overridden on data calls automatically")]
        public int? AccountID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(AccountIDIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false,
            Description = "When true, allow matches to null for AccountID field")]
        public bool? AccountIDIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(AccountKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Account Key for objects")]
        public string? AccountKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(AccountName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Account Name for objects")]
        public string? AccountName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(AccountNameStrict), DataType = "bool?", ParameterType = "query", IsRequired = false,
            Description = "When true, the value of the AccountName field must match exactly, otherwise, a case-insentive contains check is run.")]
        public bool? AccountNameStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(AccountNameIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false,
            Description = "When true, allow matches to null for AccountName field")]
        public bool? AccountNameIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(AccountIDOrCustomKeyOrNameOrDescription), DataType = "string", ParameterType = "query", IsRequired = false)]
        public string? AccountIDOrCustomKeyOrNameOrDescription { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByBrandT || td.IsIAmFilterableByBrand || td.IsIAmFilterableByNullableBrand)
            && (!td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type")) {
            thisSkipProperties.AddRange(new[] { "BrandID", "BrandName" });
            var useAdmin = td.IsIAmARelationshipTable && td.RelationshipPrimaryType.Name == "Brand";
            var useSlave = td.IsIAmARelationshipTable && td.RelationshipSecondaryType.Name == "Brand";
            var useOtherStrID1   = useAdmin ? " => MasterID"           : useSlave ? " => SlaveID"           : string.Empty;
            var useOtherStrKey1  = useAdmin ? " => MasterKey"          : useSlave ? " => SlaveKey"          : string.Empty;
            var useOtherStrName1 = useAdmin ? " => MasterName"         : useSlave ? " => SlaveName"         : string.Empty;
            var useOtherStrID2   = useAdmin ? " => MasterID = value"   : useSlave ? " => SlaveID = value"   : string.Empty;
            var useOtherStrKey2  = useAdmin ? " => MasterKey = value"  : useSlave ? " => SlaveKey = value"  : string.Empty;
            var useOtherStrName2 = useAdmin ? " => MasterName = value" : useSlave ? " => SlaveName = value" : string.Empty;
#>
        #region IAmFilterableByBrandSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(BrandID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Brand ID For Search, Note: This will be overridden on data calls automatically")]
        public int? BrandID { get<#= useOtherStrID1 #>; set<#= useOtherStrID2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(BrandIDIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? BrandIDIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(BrandKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Brand Key for objects")]
        public string? BrandKey { get<#= useOtherStrKey1 #>; set<#= useOtherStrKey2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(BrandName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Brand Name for objects")]
        public string? BrandName { get<#= useOtherStrName1 #>; set<#= useOtherStrName2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(BrandNameStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? BrandNameStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(BrandNameIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? BrandNameIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(BrandCategoryID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a brand which uses this category")]
        public int? BrandCategoryID { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByCategoryT || td.IsIAmFilterableByCategory || td.IsIAmFilterableByNullableCategory)
            && (!td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type")) { #>
        #region IAmFilterableByCategorySearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(CategoryID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Category ID For Search, Note: This will be overridden on data calls automatically")]
        public int? CategoryID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(CategoryKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Category Key for objects")]
        public string? CategoryKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(CategoryName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Category Name for objects")]
        public string? CategoryName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(CategorySeoUrl), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Category SEO URL for objects")]
        public string? CategorySeoUrl { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByProductT || td.IsIAmFilterableByProduct || td.IsIAmFilterableByNullableProduct)
            && (!td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type")) {
            thisSkipProperties.AddRange(new[] { "ProductID" });
            var useAdmin = td.IsIAmARelationshipTable && td.RelationshipPrimaryType.Name == "Product";
            var useSlave = td.IsIAmARelationshipTable && td.RelationshipSecondaryType.Name == "Product";
            var useOtherStrID1   = useAdmin ? " => MasterID"           : useSlave ? " => SlaveID"           : string.Empty;
            var useOtherStrKey1  = useAdmin ? " => MasterKey"          : useSlave ? " => SlaveKey"          : string.Empty;
            var useOtherStrName1 = useAdmin ? " => MasterName"         : useSlave ? " => SlaveName"         : string.Empty;
            var useOtherStrID2   = useAdmin ? " => MasterID = value"   : useSlave ? " => SlaveID = value"   : string.Empty;
            var useOtherStrKey2  = useAdmin ? " => MasterKey = value"  : useSlave ? " => SlaveKey = value"  : string.Empty;
            var useOtherStrName2 = useAdmin ? " => MasterName = value" : useSlave ? " => SlaveName = value" : string.Empty;
#>
        #region IAmFilterableByProductSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(ProductID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Product ID For Search, Note: This will be overridden on data calls automatically")]
        public int? ProductID { get<#= useOtherStrID1 #>; set<#= useOtherStrID2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ProductKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Product Key for objects")]
        public string? ProductKey { get<#= useOtherStrKey1 #>; set<#= useOtherStrKey2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ProductName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Product Name for objects")]
        public string? ProductName { get<#= useOtherStrName1 #>; set<#= useOtherStrName2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ProductSeoUrl), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Product SEO URL for objects")]
        public string? ProductSeoUrl { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByFranchiseT || td.IsIAmFilterableByFranchise || td.IsIAmFilterableByNullableFranchise)
            && (!td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type")) {
            thisSkipProperties.AddRange(new[] { "FranchiseID", "FranchiseName" });
            var useAdmin = td.IsIAmARelationshipTable && td.RelationshipPrimaryType.Name == "Franchise";
            var useSlave = td.IsIAmARelationshipTable && td.RelationshipSecondaryType.Name == "Franchise";
            var useOtherStrID1   = useAdmin ? " => MasterID"           : useSlave ? " => SlaveID"           : string.Empty;
            var useOtherStrKey1  = useAdmin ? " => MasterKey"          : useSlave ? " => SlaveKey"          : string.Empty;
            var useOtherStrName1 = useAdmin ? " => MasterName"         : useSlave ? " => SlaveName"         : string.Empty;
            var useOtherStrID2   = useAdmin ? " => MasterID = value"   : useSlave ? " => SlaveID = value"   : string.Empty;
            var useOtherStrKey2  = useAdmin ? " => MasterKey = value"  : useSlave ? " => SlaveKey = value"  : string.Empty;
            var useOtherStrName2 = useAdmin ? " => MasterName = value" : useSlave ? " => SlaveName = value" : string.Empty;
#>
        #region IAmFilterableByFranchiseSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(FranchiseID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Franchise ID For Search, Note: This will be overridden on data calls automatically")]
        public int? FranchiseID { get<#= useOtherStrID1 #>; set<#= useOtherStrID2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(FranchiseIDIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? FranchiseIDIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(FranchiseKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Franchise Key for objects")]
        public string? FranchiseKey { get<#= useOtherStrKey1 #>; set<#= useOtherStrKey2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(FranchiseName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Franchise Name for objects")]
        public string? FranchiseName { get<#= useOtherStrName1 #>; set<#= useOtherStrName2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(FranchiseNameStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? FranchiseNameStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(FranchiseNameIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? FranchiseNameIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(FranchiseCategoryID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a Franchise which uses this category")]
        public int? FranchiseCategoryID { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByManufacturerT || td.IsIAmFilterableByManufacturer || td.IsIAmFilterableByNullableManufacturer)
            && (!td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type")) { #>
        #region IAmFilterableByManufacturerSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(ManufacturerID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Manufacturer ID For Search, Note: This will be overridden on data calls automatically")]
        public int? ManufacturerID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ManufacturerKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Manufacturer Key for objects")]
        public string? ManufacturerKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ManufacturerName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Manufacturer Name for objects")]
        public string? ManufacturerName { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByStoreT || td.IsIAmFilterableByStore || td.IsIAmFilterableByNullableStore)
            && (!td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type")) {
            thisSkipProperties.AddRange(new[] { "StoreID" });
            var useAdmin = td.IsIAmARelationshipTable && td.RelationshipPrimaryType.Name == "Store";
            var useSlave = td.IsIAmARelationshipTable && td.RelationshipSecondaryType.Name == "Store";
            var useOtherStrID1   = useAdmin ? " => MasterID"           : useSlave ? " => SlaveID"           : string.Empty;
            var useOtherStrKey1  = useAdmin ? " => MasterKey"          : useSlave ? " => SlaveKey"          : string.Empty;
            var useOtherStrName1 = useAdmin ? " => MasterName"         : useSlave ? " => SlaveName"         : string.Empty;
            var useOtherStrID2   = useAdmin ? " => MasterID = value"   : useSlave ? " => SlaveID = value"   : string.Empty;
            var useOtherStrKey2  = useAdmin ? " => MasterKey = value"  : useSlave ? " => SlaveKey = value"  : string.Empty;
            var useOtherStrName2 = useAdmin ? " => MasterName = value" : useSlave ? " => SlaveName = value" : string.Empty;
#>
        #region IAmFilterableByStoreSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Store ID For Search, Note: This will be overridden on data calls automatically")]
        public int? StoreID { get<#= useOtherStrID1 #>; set<#= useOtherStrID2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreIDIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? StoreIDIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Store Key for objects")]
        public string? StoreKey { get<#= useOtherStrKey1 #>; set<#= useOtherStrKey2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Store Name for objects")]
        public string? StoreName { get<#= useOtherStrName1 #>; set<#= useOtherStrName2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreSeoUrl), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Store SEO URL for objects")]
        public string? StoreSeoUrl { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreCountryID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a store within this country")]
        public int? StoreCountryID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreRegionID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a store within this region")]
        public int? StoreRegionID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreCity), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Match a store within this city")]
        public string? StoreCity { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyCountryID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any contact within this country")]
        public int? StoreAnyCountryID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyRegionID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any contact within this region")]
        public int? StoreAnyRegionID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyCity), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any contact within this city")]
        public string? StoreAnyCity { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyDistrictID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any district")]
        public int? StoreAnyDistrictID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyZipCode), DataType = "string?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any zip code")]
        public string? StoreAnyZipCode { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyLatitude), DataType = "double?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any latitude")]
        public double? StoreAnyLatitude { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyLongitude), DataType = "double?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any longitude")]
        public double? StoreAnyLongitude { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyRadius), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any radius")]
        public int? StoreAnyRadius { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(StoreAnyUnits), DataType = "string?", ParameterType = "query", IsRequired = false,
            Description = "Match a store with any units")]
        public Enums.LocatorUnits? StoreAnyUnits { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByUserT || td.IsIAmFilterableByUser || td.IsIAmFilterableByNullableUser)
            && !td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type") { #>
        #region IAmFilterableByUserSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(UserID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "User ID For Search, Note: This will be overridden on data calls automatically")]
        public int? UserID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(UserIDIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false,
            Description = "When true, allow matches to null for UserID field")]
        public bool? UserIDIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(UserKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The User Key for objects")]
        public string? UserKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(UserUsername), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The User Name for objects")]
        public string? UserUsername { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(UserIDOrCustomKeyOrUserName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "General search against User assigned to the object (includes UserName even though the name of the property doesn't say it)")]
        public string? UserIDOrCustomKeyOrUserName { get; set; }
        #endregion
<#      } #>
<#      if ((td.IsIAmFilterableByVendorT || td.IsIAmFilterableByVendor || td.IsIAmFilterableByNullableVendor)
            && !td.IsISalesCollectionBase && !td.IsITypableBase && name != "Type") {
            var useAdmin = td.IsIAmARelationshipTable && td.RelationshipPrimaryType.Name == "Vendor";
            var useSlave = td.IsIAmARelationshipTable && td.RelationshipSecondaryType.Name == "Vendor";
            var useOtherStrID1   = useAdmin ? " => MasterID"           : useSlave ? " => SlaveID"           : string.Empty;
            var useOtherStrKey1  = useAdmin ? " => MasterKey"          : useSlave ? " => SlaveKey"          : string.Empty;
            var useOtherStrName1 = useAdmin ? " => MasterName"         : useSlave ? " => SlaveName"         : string.Empty;
            var useOtherStrID2   = useAdmin ? " => MasterID = value"   : useSlave ? " => SlaveID = value"   : string.Empty;
            var useOtherStrKey2  = useAdmin ? " => MasterKey = value"  : useSlave ? " => SlaveKey = value"  : string.Empty;
            var useOtherStrName2 = useAdmin ? " => MasterName = value" : useSlave ? " => SlaveName = value" : string.Empty;
#>
        #region IAmFilterableByVendorSearchModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(VendorID), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Vendor ID For Search, Note: This will be overridden on data calls automatically")]
        public int? VendorID { get<#= useOtherStrID1 #>; set<#= useOtherStrID2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(VendorKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Vendor Key for objects")]
        public string? VendorKey { get<#= useOtherStrKey1 #>; set<#= useOtherStrKey2 #>; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(VendorName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The Vendor Name for objects")]
        public string? VendorName { get<#= useOtherStrName1 #>; set<#= useOtherStrName2 #>; }
        #endregion
<#      } #>
<#      if (td.IsIHaveAContactBase || td.IsIHaveANullableContactBase) { thisSkipProperties.AddRange(new[] { "ContactID" }); #>
        #region IHaveAContactBase
        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "Contact ID for search")]
        public int? ContactID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactIDIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactIDIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Contact Key for search")]
        public string? ContactKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactKeyStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactKeyStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactKeyIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactKeyIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactFirstName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Contact First Name for search")]
        public string? ContactFirstName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactFirstNameStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactFirstNameStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactFirstNameIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactFirstNameIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactLastName), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Contact Last Name for search")]
        public string? ContactLastName { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactLastNameStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactLastNameStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactLastNameIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactLastNameIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactPhone), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Contact Phone for search")]
        public string? ContactPhone { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactPhoneStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactPhoneStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactPhoneIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactPhoneIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactFax), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Contact Fax for search")]
        public string? ContactFax { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactFaxStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactFaxStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactFaxIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactFaxIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactEmail), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "Contact Email for search")]
        public string? ContactEmail { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactEmailStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactEmailStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ContactEmailIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ContactEmailIncludeNull { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIHaveSeoBase) { #>
        #region IHaveSeoBaseModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoKeywords), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "SEO Keywords to use in the Meta tags of the page for this object")]
        public string? SeoKeywords { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoKeywordsStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoKeywordsStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoKeywordsIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoKeywordsIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoUrl), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "SEO URL to use to link to the page for this object")]
        public string? SeoUrl { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoUrlStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoUrlStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoUrlIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoUrlIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoDescription), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "SEO Description to use in the Meta tags of the page for this object")]
        public string? SeoDescription { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoDescriptionStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoDescriptionStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoDescriptionIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoDescriptionIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoMetaData), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "SEO General Meta Data to use in the Meta tags of the page for this object")]
        public string? SeoMetaData { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoMetaDataStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoMetaDataStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoMetaDataIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoMetaDataIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoPageTitle), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "SEO Page Title to use in the Meta tags of the page for this object")]
        public string? SeoPageTitle { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoPageTitleStrict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoPageTitleStrict { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(SeoPageTitleIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? SeoPageTitleIncludeNull { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIHaveAParentBase && !td.IsISalesCollectionBase) { thisSkipProperties.AddRange(new[] { "ParentID" }); #>
        #region IHaveAParentBaseModel
        /// <inheritdoc/>
        [ApiMember(Name = nameof(ParentID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The identifier of the parent record. [Optional]")]
        public int? ParentID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ParentIDIncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? ParentIDIncludeNull { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ParentKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The custom key of the parent record. [Optional]")]
        public string? ParentKey { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(DisregardParents), DataType = "bool?", ParameterType = "query", IsRequired = false,
            Description = "Disregard Parents. [Optional, default=false]")]
        public bool? DisregardParents { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(HasChildren), DataType = "bool?", ParameterType = "query", IsRequired = false,
            Description = "A boolean indicating whether the record has (active) children. [Optional]")]
        public bool? HasChildren { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(IncludeChildrenInResults), DataType = "bool", ParameterType = "query", IsRequired = false,
            Description = "Include Children In Results. [Required, default=false]")]
        public bool IncludeChildrenInResults { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ChildID), DataType = "int?", ParameterType = "query", IsRequired = false,
            Description = "The identifier of a child record. [Optional]")]
        public int? ChildID { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(ChildKey), DataType = "string", ParameterType = "query", IsRequired = false,
            Description = "The custom key of a child record. [Optional]")]
        public string? ChildKey { get; set; }
        #endregion
<#      } #>
<#
        if (td.IsINameableBase)
        {
            thisSkipProperties.AddRange(new[] { "Name", "Description" });
        }
        if (td.IsIDisplayableBase)
        {
            thisSkipProperties.AddRange(new[] { "DisplayName", "SortOrder", "TranslationKey" });
        }
        if (td.IsITypableBase)
        {
            thisSkipProperties.AddRange(new[] { "BrandID", "StoreID" });
        }
        if (td.IsIHaveATypeBase)
        {
            thisSkipProperties.AddRange(new[] { "TypeID", "Type" });
        }
        if (td.IsIHaveAStatusBase)
        {
            thisSkipProperties.AddRange(new[] { "StatusID", "Status" });
        }
        if (td.IsIHaveAStateBase)
        {
            thisSkipProperties.AddRange(new[] { "StateID", "State" });
        }
        if (td.IsIAmARelationshipTable)
        {
            thisSkipProperties.AddRange(new[] { "MasterID", "Master", "SlaveID", "Slave" });
        }
        if (td.IsIHaveSeoBase)
        {
            thisSkipProperties.AddRange(new[] { "SeoDescription", "SeoKeywords", "SeoMetaData", "SeoPageTitle", "SeoUrl" });
        }
        if (td.IsISalesEventBase)
        {
            thisSkipProperties.AddRange(new[]
            {
                "MasterID", "Master",
                "OldStateID", "NewStateID",
                "OldStatusID", "NewStatusID",
                "OldTypeID", "NewTypeID",
                "OldHash", "NewHash",
                "OldRecordSerialized", "NewRecordSerialized",
                "OldBalanceDue", "NewBalanceDue",
            });
        }
        if (td.IsISalesItemBase)
        {
            thisSkipProperties.AddRange(new[]
            {
                "Sku", "ForceUniqueLineItemKey", "UnitOfMeasure",
                "Quantity", "QuantityBackOrdered", "QuantityPreSold",
                "UnitCorePrice", "UnitSoldPrice", "UnitCorePriceInSellingCurrency", "UnitSoldPriceInSellingCurrency",
                "MasterID", "OriginalCurrencyID", "SellingCurrencyID", "ProductID", "UserID",
            });
        }
        if (td.IsIAmFilterableByAccountT || td.IsIAmFilterableByAccount || td.IsIAmFilterableByNullableAccount)
        {
            thisSkipProperties.AddRange(new[] { "AccountID" });
        }
        if (td.IsIAmFilterableByBrandT || td.IsIAmFilterableByBrand || td.IsIAmFilterableByNullableBrand)
        {
            thisSkipProperties.AddRange(new[] { "BrandID" });
        }
        if (td.IsIAmFilterableByCategoryT || td.IsIAmFilterableByCategory || td.IsIAmFilterableByNullableCategory)
        {
            thisSkipProperties.AddRange(new[] { "CategoryID" });
        }
        if (td.IsIAmFilterableByFranchiseT || td.IsIAmFilterableByFranchise || td.IsIAmFilterableByNullableFranchise)
        {
            thisSkipProperties.AddRange(new[] { "FranchiseID" });
        }
        if (td.IsIAmFilterableByManufacturerT || td.IsIAmFilterableByManufacturer || td.IsIAmFilterableByNullableManufacturer)
        {
            thisSkipProperties.AddRange(new[] { "ManufacturerID" });
        }
        if (td.IsIAmFilterableByProductT || td.IsIAmFilterableByProduct || td.IsIAmFilterableByNullableProduct)
        {
            thisSkipProperties.AddRange(new[] { "ProductID" });
        }
        if (td.IsIAmFilterableByStoreT || td.IsIAmFilterableByStore || td.IsIAmFilterableByNullableStore)
        {
            thisSkipProperties.AddRange(new[] { "StoreID" });
        }
        if (td.IsIAmFilterableByUserT || td.IsIAmFilterableByUser || td.IsIAmFilterableByNullableUser)
        {
            thisSkipProperties.AddRange(new[] { "UserID" });
        }
        if (td.IsIAmFilterableByVendorT || td.IsIAmFilterableByVendor|| td.IsIAmFilterableByNullableVendor)
        {
            thisSkipProperties.AddRange(new[] { "VendorID" });
        }
        if (td.IsIAmAStoredFileRelationshipTable)
        {
            thisSkipProperties.AddRange(new[] { "SortOrder" });
        }
        List<PropertyInfo> properties = theType.GetProperties()
            .Where(x => !thisSkipProperties.Contains(x.Name)
                && x.PropertyType.Name != "ICollection`1"
                && x.PropertyType.GetInterface("IBase") == null
                && x.GetCustomAttribute<NotMappedAttribute>() == null)
            .OrderBy(x => x.PropertyType.Name)
            .ThenBy(x => x.Name)
            .ToList();
        bool first = true;
        foreach (PropertyInfo p in properties) { #>
<#          if (p.PropertyType == typeof(DateTime) || p.PropertyType == typeof(DateTime?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(Min<#= p.Name #>), DataType = "DateTime?", ParameterType = "query", IsRequired = false)]
        public DateTime? Min<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Max<#= p.Name #>), DataType = "DateTime?", ParameterType = "query", IsRequired = false)]
        public DateTime? Max<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>), DataType = "DateTime?", ParameterType = "query", IsRequired = false)]
        public DateTime? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(DateTime?)) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(decimal) || p.PropertyType == typeof(decimal?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(Min<#= p.Name #>), DataType = "decimal?", ParameterType = "query", IsRequired = false)]
        public decimal? Min<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Max<#= p.Name #>), DataType = "decimal?", ParameterType = "query", IsRequired = false)]
        public decimal? Max<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>), DataType = "decimal?", ParameterType = "query", IsRequired = false)]
        public decimal? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(decimal?)) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(long) || p.PropertyType == typeof(long?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(Min<#= p.Name #>), DataType = "long?", ParameterType = "query", IsRequired = false)]
        public long? Min<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Max<#= p.Name #>), DataType = "long?", ParameterType = "query", IsRequired = false)]
        public long? Max<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>), DataType = "long?", ParameterType = "query", IsRequired = false)]
        public long? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(long?)) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(bool) || p.PropertyType == typeof(bool?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? <#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(bool?)) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(Guid) || p.PropertyType == typeof(Guid?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>), DataType = "Guid?", ParameterType = "query", IsRequired = false)]
        public Guid? <#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(Guid?)) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if ((p.PropertyType == typeof(int) || p.PropertyType == typeof(int?)) && p.Name.EndsWith("ID")) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>), DataType = "int?", ParameterType = "query", IsRequired = false)]
        public int? <#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(int?)) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(string)/* || p.PropertyType == typeof(string?)*/) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>), DataType = "string", ParameterType = "query", IsRequired = false)]
        public string? <#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>Strict), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? <#= p.Name #>Strict { get; set; }
<#              if (/*p.PropertyType == typeof(string?)*/true) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? <#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else if (p.PropertyType == typeof(int) || p.PropertyType == typeof(int?)) { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(Min<#= p.Name #>), DataType = "int?", ParameterType = "query", IsRequired = false)]
        public int? Min<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Max<#= p.Name #>), DataType = "int?", ParameterType = "query", IsRequired = false)]
        public int? Max<#= p.Name #> { get; set; }

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>), DataType = "int?", ParameterType = "query", IsRequired = false)]
        public int? Match<#= p.Name #> { get; set; }
<#              if (p.PropertyType == typeof(int?)) { #>

        /// <inheritdoc/>
        [ApiMember(Name = nameof(Match<#= p.Name #>IncludeNull), DataType = "bool?", ParameterType = "query", IsRequired = false)]
        public bool? Match<#= p.Name #>IncludeNull { get; set; }
<#              } #>
<#          } else { #>
<#              if (!first) { #>

<#              } #>
        /// <inheritdoc/>
        [ApiMember(Name = nameof(<#= p.Name #>), DataType = "<#= p.PropertyType.Name #>", ParameterType = "query", IsRequired = false)]
        public <#= p.PropertyType.Name #> <#= p.Name #> { get; set; }
<#          } #>
<#          first = false; #>
<#      } #>
    }
}
<#      SaveOutput(@group.Key.Replace("System", "Structure") + "\\" + theType.Name + "SearchModel", "generated.cs", true);
    }
}
DeleteOldOutputs();
#>
