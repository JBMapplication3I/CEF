// <autogenerated>
// <copyright file="UserProductTypeModel.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Model Interfaces generated to provide base setups</summary>
// <remarks>This file was auto-generated by Models.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#pragma warning disable 618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.Runtime.Serialization;
    using Interfaces.Models;
    using Newtonsoft.Json;
    using ServiceStack;

    /// <summary>A data transfer model for User Product Type.</summary>
    public partial class UserProductTypeModel
        : AmARelationshipTableBaseModel
            , IUserProductTypeModel
    {
        #region IAmFilterableByUser Properties
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterUserName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Username of the User.")]
        public string? MasterUserName { get; set; } // U1

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByUserModel.UserID { get => MasterID; set => MasterID = value; } // U1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserKey { get => MasterKey; set => MasterKey = value; } // U1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserUsername { get => MasterUserName; set => MasterUserName = value; } // U1

        /// <inheritdoc cref="IAmFilterableByUserModel.User"/>
        [JsonIgnore]
        IUserModel? IAmFilterableByUserModel.User { get => Master; set => Master = (UserModel?)value; } // U1
        #endregion
        #region IAmARelationshipTable<IUserModel,ITypeModel>

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveName), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The Name of the Slave record.")]
        public string? SlaveName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveDisplayName), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The DisplayName of the Slave record.")]
        public string? SlaveDisplayName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveTranslationKey), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The TranslationKey of the Slave record.")]
        public string? SlaveTranslationKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSortOrder), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The SortOrder of the Slave record.")]
        public int? SlaveSortOrder { get; set; }

        /// <inheritdoc/>
        public UserModel? Master { get; set; }

        /// <inheritdoc cref="IAmARelationshipTableBaseModel{ITypeModel}.Slave"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Slave), DataType = "TypeModel?", ParameterType = "body", IsRequired = false,
                Description = "The Slave record (may only be partially mapped out).")]
        public TypeModel? Slave { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ITypeModel? IAmARelationshipTableBaseModel<ITypeModel>.Slave { get => Slave; set => Slave = (TypeModel?)value; }
        #endregion
    }
}
