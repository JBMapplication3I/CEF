<#@ template hostSpecific="true" language="C#"
#><#@ output extension=".cstxt"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var processedNames = new List<string>() { "Report", "Contact", "Type", "Status", "State", "SalesItemShipmentBase", "SalesItemTargetBase" };
foreach (var group in tableClasses)
{
    foreach (var theType in group)
    {
        var name = HelpFunctions.SwapToModelType(theType.Name);
        if (processedNames.Contains(name))
        { #>
// <#= theType.Name #>-><#= name #> skipped (Already Processed)
<#          SaveOutput(@group.Key.Replace("System", "Structure") + "\\" + theType.Name + "Model", "generated.cstxt", true);
            continue;
        }
        processedNames.Add(name);
        var td = new TypeDeterminer(theType);
        if (td.IsExcludedFromT4)
        { #>
// <#= theType.Name #>-><#= name #> skipped (IsExcludedFromT4)
<#          SaveOutput(group.Key.Replace("System", "Structure") + "\\" + theType.Name + "Model", "generated.cstxt", true);
            continue;
        }
#>// <autogenerated>
// <copyright file="<#= theType.Name #>Model.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Model Interfaces generated to provide base setups</summary>
// <remarks>This file was auto-generated by Models.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#pragma warning disable 618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.Runtime.Serialization;
    using Interfaces.Models;
    using Newtonsoft.Json;
    using ServiceStack;

    /// <summary>A data transfer model for <#= HelpFunctions.SplitCamelCase(theType.Name) #>.</summary>
<#      if (td.IsDeprecated) { #>
    [Obsolete("<#= td.DeprecatedMessage #>", false)]
<#      } #>
    public partial class <#= name #>Model
<#      if (td.IsISalesCollectionBase) { #>
        : SalesCollectionBaseModel<
                I<#= HelpFunctions.SwapToModelType(td.RelatedTypeType.Name) #>Model,
                <#= HelpFunctions.SwapToModelType(td.RelatedTypeType.Name) #>Model,
                I<#= theType.Name #>FileModel, <#= theType.Name #>FileModel,
                I<#= theType.Name #>ContactModel, <#= theType.Name #>ContactModel,
                I<#= theType.Name #>EventModel, <#= theType.Name #>EventModel,
                IApplied<#= theType.Name #>DiscountModel, Applied<#= theType.Name #>DiscountModel,
                IApplied<#= theType.Name #>ItemDiscountModel, Applied<#= theType.Name #>ItemDiscountModel>
<#      } else if (td.IsISalesEventBase) { #>
        : SalesEventBaseModel
<#      } else { #>
        : <#= td.IsIStatusableBase ? "Statusable" : string.Empty
            #><#= td.IsIStateableBase ? "Stateable" : string.Empty
            #><#= td.IsITypableBase ? "Typable" : string.Empty
            #><#= td.IsIAmARelationshipTable ? "AmARelationshipTable" : string.Empty
            #><#= !td.IsIStatusableBase && !td.IsIStateableBase && !td.IsITypableBase && td.IsINameableBase ? "Nameable" : string.Empty #>BaseModel
<#      } #>
            , I<#= name #>Model
    {
<#      if (td.IsIHaveATypeBase && !td.IsISalesCollectionBase && !td.IsISalesEventBase) { #>
        #region IHaveATypeBaseModel<I<#= HelpFunctions.SwapToModelType(name + "Type") #>Model>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TypeID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "Identifier for the Type of this Account, required if no TypeModel present")]
        public int TypeID { get; set; }

        /// <inheritdoc cref="IHaveATypeBaseModel{I<#= HelpFunctions.SwapToModelType(name + "Type") #>Model}.Type"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Type), IsRequired = true, DataType = "<#= HelpFunctions.SwapToModelType(name + "Type") #>Model", ParameterType = "body",
                Description = "Model for Type of this Account, required if no TypeID present")]
        public <#= HelpFunctions.SwapToModelType(name + "Type") #>Model? Type { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        I<#= HelpFunctions.SwapToModelType(name + "Type") #>Model? IHaveATypeBaseModel<I<#= HelpFunctions.SwapToModelType(name + "Type") #>Model>.Type { get => Type; set => Type = (<#= HelpFunctions.SwapToModelType(name + "Type") #>Model?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TypeKey), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Key for the Type of this Account, read-only")]
        public string? TypeKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TypeName), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Name for the Type of this Account, read-only")]
        public string? TypeName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TypeDisplayName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "Display Name for the Type of this object, read-only")]
        public string? TypeDisplayName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TypeTranslationKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "Translation Key for the Type of this object, read-only")]
        public string? TypeTranslationKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TypeSortOrder), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "Sort Order for the Type of this object, read-only")]
        public int? TypeSortOrder { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIHaveAStatusBase && !td.IsISalesCollectionBase) { #>
        #region IHaveAStatusBaseModel<IStatusModel>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StatusID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "Identifier for the Status of this object, required if no StatusModel present")]
        public int StatusID { get; set; }

        /// <inheritdoc cref="IHaveAStatusBaseModel{IStatusModel}.Status"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Status), DataType = "StatusModel", ParameterType = "body", IsRequired = true,
                Description = "Model for Status of this object, required if no StatusID present")]
        public StatusModel? Status { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IStatusModel? IHaveAStatusBaseModel<IStatusModel>.Status { get => Status; set => Status = (StatusModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StatusKey), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Key for the Status of this object, read-only")]
        public string? StatusKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StatusName), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Name for the Status of this object, read-only")]
        public string? StatusName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StatusDisplayName), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Display Name for the Status of this object, read-only")]
        public string? StatusDisplayName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StatusTranslationKey), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Translation Key for the Status of this object, read-only")]
        public string? StatusTranslationKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StatusSortOrder), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "Sort Order for the Status of this object, read-only")]
        public int? StatusSortOrder { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIHaveAStateBase && !td.IsISalesCollectionBase) { #>
        #region IHaveAStateBaseModel<IStateModel>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StateID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "Identifier for the State of this object, required if no StateModel present")]
        public int StateID { get; set; }

        /// <inheritdoc cref="IHaveAStateBaseModel{IStateModel}.State"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(State), DataType = "StateModel", ParameterType = "body", IsRequired = true,
                Description = "Model for State of this object, required if no StateID present")]
        public StateModel? State { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IStateModel? IHaveAStateBaseModel<IStateModel>.State { get => State; set => State = (StateModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StateKey), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Key for the State of this object, read-only")]
        public string? StateKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StateName), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Name for the State of this object, read-only")]
        public string? StateName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StateDisplayName), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Display Name for the State of this object, read-only")]
        public string? StateDisplayName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StateTranslationKey), DataType = "string", ParameterType = "body", IsRequired = true,
                Description = "Translation Key for the State of this object, read-only")]
        public string? StateTranslationKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StateSortOrder), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "Sort Order for the State of this object, read-only")]
        public int? StateSortOrder { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByAccountT) { var altName = new[] { "Ad", "Brand", "Franchise", "Discount", "PriceRule", "Store", "Vendor" }.Contains(name) ? name + "Account" : "Account" + name; #>
        #region IAmFilterableByAccountModel<I<#= altName #>Model> Properties
        /// <inheritdoc cref="IAmFilterableByAccountModel{I<#= altName #>Model}.Accounts"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Accounts), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Accounts this object is associated with")]
        public List<<#= altName #>Model>? Accounts { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByAccountModel<I<#= altName #>Model>.Accounts { get => Accounts?.ToList<I<#= altName #>Model>(); set => Accounts = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByBrandT) { var altName = new[] { "CategoryType", "UserType" }.Contains(name) ? "Type" : new[] { "Account", "Auction", "Brand", "Category", "Franchise", "InventoryLocation", "Manufacturer", "Product", "SiteDomain", "Store", "User", "Vendor" }.Contains(name) ? "Brand" + name : name + "Brand"; #>
        #region IAmFilterableByBrandModel<> Properties
        /// <inheritdoc cref="IAmFilterableByBrandModel{I<#= altName #>Model}.Brands"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Brands), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Brands this object is associated with")]
        public List<<#= altName #>Model>? Brands { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByBrandModel<I<#= altName #>Model>.Brands { get => Brands?.ToList<I<#= altName #>Model>(); set => Brands = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByCategoryT) { var altName = new[] { "Ad", "Auction", "Brand", "Discount", "Franchise", "Lot", "PriceRule", "Product", "Scout", "Store" }.Contains(name) ? name + "Category" : "Category" + name; #>
        #region IAmFilterableByCategoryModel<> Properties
        /// <inheritdoc cref="IAmFilterableByCategoryModel{I<#= altName #>Model}.Categories"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Categories), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Categories this object is associated with")]
        public List<<#= altName #>Model>? Categories { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByCategoryModel<I<#= altName #>Model>.Categories { get => Categories?.ToList<I<#= altName #>Model>(); set => Categories = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByFranchiseT) { var altName = new[] { "CategoryType", "UserType" }.Contains(name) ? "Type" : new[] { "Account", "Auction", "Category", "InventoryLocation", "Manufacturer", "Product", "SiteDomain", "Store", "User", "Vendor" }.Contains(name) ? "Franchise" + name : name + "Franchise"; #>
        #region IAmFilterableByFranchiseModel<> Properties
        /// <inheritdoc cref="IAmFilterableByFranchiseModel{I<#= altName #>Model}.Franchises"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Franchises), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Franchises this object is associated with")]
        public List<<#= altName #>Model>? Franchises { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByFranchiseModel<I<#= altName #>Model>.Franchises { get => Franchises?.ToList<I<#= altName #>Model>(); set => Franchises = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByManufacturerT) { var altName = new[] { "Brand", "Discount", "Franchise", "PriceRule", "Store", "Vendor" }.Contains(name) ? name + "Manufacturer" : "Manufacturer" + name; #>
        #region IAmFilterableByManufacturerModel<> Properties
        /// <inheritdoc cref="IAmFilterableByManufacturerModel{I<#= altName #>Model}.Manufacturers"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Manufacturers), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Manufacturers this object is associated with")]
        public List<<#= altName #>Model>? Manufacturers { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByManufacturerModel<I<#= altName #>Model>.Manufacturers { get => Manufacturers?.ToList<I<#= altName #>Model>(); set => Manufacturers = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByProductT) { var altName = new[] { "Account", "Brand", "CalendarEvent", "Discount", "Franchise", "Manufacturer", "PriceRule", "Store", "Vendor" }.Contains(name) ? name + "Product" : "Product" + name; #>
        #region IAmFilterableByProductModel<> Properties
        /// <inheritdoc cref="IAmFilterableByProductModel{I<#= altName #>Model}.Products"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Products), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Products this object is associated with")]
        public List<<#= altName #>Model>? Products { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByProductModel<I<#= altName #>Model>.Products { get => Products?.ToList<I<#= altName #>Model>(); set => Products = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByStoreT) { var altName = new[] { "Ad", "Brand", "Discount", "Franchise", "PriceRule" }.Contains(name) ? name + "Store" : "Store" + name; #>
        #region IAmFilterableByStoreModel<> Properties
        /// <inheritdoc cref="IAmFilterableByStoreModel{I<#= altName #>Model}.Stores"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Stores), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Stores this object is associated with")]
        public List<<#= altName #>Model>? Stores { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByStoreModel<I<#= altName #>Model>.Stores { get => Stores?.ToList<I<#= altName #>Model>(); set => Stores = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByUserT) { var altName = new [] { "Account" }.Contains(name) ? "User" : new[] { "Brand", "Conversation", "Discount", "Franchise", "Group", "Store" }.Contains(name) ? name + "User" : "User" + name; #>
        #region IAmFilterableByUserModel<> Properties
        /// <inheritdoc cref="IAmFilterableByUserModel{I<#= altName #>Model}.Users"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Users), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Users this object is associated with")]
        public List<<#= altName #>Model>? Users { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByUserModel<I<#= altName #>Model>.Users { get => Users?.ToList<I<#= altName #>Model>(); set => Users = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByVendorT) { var altName = new[] { "Brand", "Discount", "Franchise", "PriceRule", "Store" }.Contains(name) ? name + "Vendor" : "Vendor" + name; #>
        #region IAmFilterableByVendorModel<> Properties
        /// <inheritdoc cref="IAmFilterableByVendorModel{I<#= altName #>Model}.Vendors"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Vendors), DataType = "List<<#= altName #>Model>", ParameterType = "body", IsRequired = false,
                Description = "Vendors this object is associated with")]
        public List<<#= altName #>Model>? Vendors { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= altName #>Model>? IAmFilterableByVendorModel<I<#= altName #>Model>.Vendors { get => Vendors?.ToList<I<#= altName #>Model>(); set => Vendors = value?.Cast<<#= altName #>Model>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByAccount) { #>
        #region IAmFilterableByAccount Properties
<#          if (td.IsIAmAnAccountRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByAccountModel.AccountID { get => MasterID; set => MasterID = value; } // A1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountKey { get => MasterKey; set => MasterKey = value; } // A1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountName { get => MasterName; set => MasterName = value; } // A1

        /// <inheritdoc cref="IAmFilterableByAccountModel.Account"/>
        [JsonIgnore]
        IAccountModel? IAmFilterableByAccountModel.Account { get => Master; set => Master = (AccountModel?)value; } // A1
<#          } else if (td.IsIAmAnAccountRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByAccountModel.AccountID { get => SlaveID; set => SlaveID = value; } // A2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountKey { get => SlaveKey; set => SlaveKey = value; } // A2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountName { get => SlaveName; set => SlaveName = value; } // A2

        /// <inheritdoc cref="IAmFilterableByAccountModel.Account"/>
        [JsonIgnore]
        IAccountModel? IAmFilterableByAccountModel.Account { get => Slave; set => Slave = (AccountModel?)value; } // A2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.AccountID { get => SlaveID; set => SlaveID = value; } // A3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountKey { get => SlaveKey; set => SlaveKey = value; } // A3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountName { get => SlaveName; set => SlaveName = value; } // A3

        /// <inheritdoc cref="IAmFilterableByAccountModel.Account"/>
        [JsonIgnore]
        IAccountModel? IAmFilterableByAccountModel.Account { get => Slave; set => Slave = (AccountModel?)value; } // A3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Account)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByAccountModel.AccountID { get => MasterID; set => MasterID = value; } // A4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountKey { get => MasterKey; set => MasterKey = value; } // A4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountName { get => MasterName; set => MasterName = value; } // A4

        /// <inheritdoc cref="IAmFilterableByAccountModel.Account"/>
        [JsonIgnore]
        IAccountModel? IAmFilterableByAccountModel.Account { get => Master; set => Master = (AccountModel?)value; } // A4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Account)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByAccountModel.AccountID { get => SlaveID; set => SlaveID = value; } // A5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountKey { get => SlaveKey; set => SlaveKey = value; } // A5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByAccountModel.AccountName { get => SlaveName; set => SlaveName = value; } // A5

        /// <inheritdoc cref="IAmFilterableByAccountModel.Account"/>
        [JsonIgnore]
        IAccountModel? IAmFilterableByAccountModel.Account { get => Slave; set => Slave = (AccountModel?)value; } // A5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(AccountID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the account record.")]
        public int AccountID { get; set; } // A6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(AccountKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the account record.")]
        public string? AccountKey { get; set; } // A6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(AccountName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the account record.")]
        public string? AccountName { get; set; } // A6

        /// <inheritdoc cref="IAmFilterableByAccountModel.Account"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Account), DataType = "AccountModel", ParameterType = "body", IsRequired = false,
                Description = "The account record.")]
        public AccountModel? Account { get; set; } // A6

        /// <inheritdoc/>
        [JsonIgnore]
        IAccountModel? IAmFilterableByAccountModel.Account { get => Account; set => Account = (AccountModel?)value; } // A6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByBrand) { #>
        #region IAmFilterableByBrand Properties
<#          if (td.IsIAmABrandRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByBrandModel.BrandID { get => MasterID; set => MasterID = value; } // B1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandKey { get => MasterKey; set => MasterKey = value; } // B1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandName { get => MasterName; set => MasterName = value; } // B1

        /// <inheritdoc cref="IAmFilterableByBrandModel.Brand"/>
        [JsonIgnore]
        IBrandModel? IAmFilterableByBrandModel.Brand { get => Master; set => Master = (BrandModel?)value; } // B1
<#          } else if (td.IsIAmABrandRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByBrandModel.BrandID { get => SlaveID; set => SlaveID = value; } // B2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandKey { get => SlaveKey; set => SlaveKey = value; } // B2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandName { get => SlaveName; set => SlaveName = value; } // B2

        /// <inheritdoc cref="IAmFilterableByBrandModel.Brand"/>
        [JsonIgnore]
        IBrandModel? IAmFilterableByBrandModel.Brand { get => Slave; set => Slave = (BrandModel?)value; } // B2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.BrandID { get => SlaveID; set => SlaveID = value; } // B3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandKey { get => SlaveKey; set => SlaveKey = value; } // B3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandName { get => SlaveName; set => SlaveName = value; } // B3

        /// <inheritdoc cref="IAmFilterableByBrandModel.Brand"/>
        [JsonIgnore]
        IBrandModel? IAmFilterableByBrandModel.Brand { get => Slave; set => Slave = (BrandModel?)value; } // B3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Brand)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByBrandModel.BrandID { get => MasterID; set => MasterID = value; } // B4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandKey { get => MasterKey; set => MasterKey = value; } // B4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandName { get => MasterName; set => MasterName = value; } // B4

        /// <inheritdoc cref="IAmFilterableByBrandModel.Brand"/>
        [JsonIgnore]
        IBrandModel? IAmFilterableByBrandModel.Brand { get => Master; set => Master = (BrandModel?)value; } // B4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Brand)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByBrandModel.BrandID { get => SlaveID; set => SlaveID = value; } // B5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandKey { get => SlaveKey; set => SlaveKey = value; } // B5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByBrandModel.BrandName { get => SlaveName; set => SlaveName = value; } // B5

        /// <inheritdoc cref="IAmFilterableByBrandModel.Brand"/>
        [JsonIgnore]
        IBrandModel? IAmFilterableByBrandModel.Brand { get => Slave; set => Slave = (BrandModel?)value; } // B5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(BrandID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the brand record.")]
        public int BrandID { get; set; } // B6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(BrandKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the brand record.")]
        public string? BrandKey { get; set; } // B6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(BrandName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the brand record.")]
        public string? BrandName { get; set; } // B6

        /// <inheritdoc cref="IAmFilterableByBrandModel.Brand"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Brand), DataType = "BrandModel", ParameterType = "body", IsRequired = false,
                Description = "The brand record.")]
        public BrandModel? Brand { get; set; } // B6

        /// <inheritdoc/>
        [JsonIgnore]
        IBrandModel? IAmFilterableByBrandModel.Brand { get => Brand; set => Brand = (BrandModel?)value; } // B6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByCategory) { #>
        #region IAmFilterableByCategory Properties
<#          if (td.IsIAmACategoryRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the category.")]
        public string? MasterSeoUrl { get; set; } // C1

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByCategoryModel.CategoryID { get => MasterID; set => MasterID = value; } // C1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryKey { get => MasterKey; set => MasterKey = value; } // C1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryName { get => MasterName; set => MasterName = value; } // C1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategorySeoUrl { get => MasterSeoUrl; set => MasterSeoUrl = value; } // C1

        /// <inheritdoc cref="IAmFilterableByCategoryModel.Category"/>
        [JsonIgnore]
        ICategoryModel? IAmFilterableByCategoryModel.Category { get => Master; set => Master = (CategoryModel?)value; } // C1
<#          } else if (td.IsIAmACategoryRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the Category.")]
        public string? SlaveSeoUrl { get; set; } // C2

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByCategoryModel.CategoryID { get => SlaveID; set => SlaveID = value; } // C2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryKey { get => SlaveKey; set => SlaveKey = value; } // C2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryName { get => SlaveName; set => SlaveName = value; } // C2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategorySeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // C2

        /// <inheritdoc cref="IAmFilterableByCategoryModel.Category"/>
        [JsonIgnore]
        ICategoryModel? IAmFilterableByCategoryModel.Category { get => Slave; set => Slave = (CategoryModel?)value; } // C2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the category.")]
        public string? SlaveSeoUrl { get; set; } // C2

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.CategoryID { get => SlaveID; set => SlaveID = value; } // C3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryKey { get => SlaveKey; set => SlaveKey = value; } // C3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryName { get => SlaveName; set => SlaveName = value; } // C3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategorySeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // C3

        /// <inheritdoc cref="IAmFilterableByCategoryModel.Category"/>
        [JsonIgnore]
        ICategoryModel? IAmFilterableByCategoryModel.Category { get => Slave; set => Slave = (CategoryModel?)value; } // C3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Category)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the category.")]
        public string? MasterSeoUrl { get; set; } // C4

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByCategoryModel.CategoryID { get => MasterID; set => MasterID = value; } // C4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryKey { get => MasterKey; set => MasterKey = value; } // C4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryName { get => MasterName; set => MasterName = value; } // C4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategorySeoUrl { get => MasterSeoUrl; set => MasterSeoUrl = value; } // C4

        /// <inheritdoc cref="IAmFilterableByCategoryModel.Category"/>
        [JsonIgnore]
        ICategoryModel? IAmFilterableByCategoryModel.Category { get => Master; set => Master = (CategoryModel?)value; } // C4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Category)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the category.")]
        public string? SlaveSeoUrl { get; set; } // C2

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByCategoryModel.CategoryID { get => SlaveID; set => SlaveID = value; } // C5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryKey { get => SlaveKey; set => SlaveKey = value; } // C5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategoryName { get => SlaveName; set => SlaveName = value; } // C5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByCategoryModel.CategorySeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // C5

        /// <inheritdoc cref="IAmFilterableByCategoryModel.Category"/>
        [JsonIgnore]
        ICategoryModel? IAmFilterableByCategoryModel.Category { get => Slave; set => Slave = (CategoryModel?)value; } // C5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(CategoryID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the category record.")]
        public int CategoryID { get; set; } // C6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(CategoryKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the category record.")]
        public string? CategoryKey { get; set; } // C6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(CategoryName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the category record.")]
        public string? CategoryName { get; set; } // C6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(CategorySeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The category record.")]
        public string? CategorySeoUrl { get; set; }

        /// <inheritdoc cref="IAmFilterableByCategoryModel.Category"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Category), DataType = "CategoryModel", ParameterType = "body", IsRequired = false,
                Description = "The category record.")]
        public CategoryModel? Category { get; set; } // C6

        /// <inheritdoc/>
        [JsonIgnore]
        ICategoryModel? IAmFilterableByCategoryModel.Category { get => Category; set => Category = (CategoryModel?)value; } // C6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByFranchise) { #>
        #region IAmFilterableByFranchise Properties
<#          if (td.IsIAmAFranchiseRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByFranchiseModel.FranchiseID { get => MasterID; set => MasterID = value; } // B1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseKey { get => MasterKey; set => MasterKey = value; } // B1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseName { get => MasterName; set => MasterName = value; } // B1

        /// <inheritdoc cref="IAmFilterableByFranchiseModel.Franchise"/>
        [JsonIgnore]
        IFranchiseModel? IAmFilterableByFranchiseModel.Franchise { get => Master; set => Master = (FranchiseModel?)value; } // B1
<#          } else if (td.IsIAmAFranchiseRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByFranchiseModel.FranchiseID { get => SlaveID; set => SlaveID = value; } // B2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseKey { get => SlaveKey; set => SlaveKey = value; } // B2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseName { get => SlaveName; set => SlaveName = value; } // B2

        /// <inheritdoc cref="IAmFilterableByFranchiseModel.Franchise"/>
        [JsonIgnore]
        IFranchiseModel? IAmFilterableByFranchiseModel.Franchise { get => Slave; set => Slave = (FranchiseModel?)value; } // B2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.FranchiseID { get => SlaveID; set => SlaveID = value; } // B3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseKey { get => SlaveKey; set => SlaveKey = value; } // B3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseName { get => SlaveName; set => SlaveName = value; } // B3

        /// <inheritdoc cref="IAmFilterableByFranchiseModel.Franchise"/>
        [JsonIgnore]
        IFranchiseModel? IAmFilterableByFranchiseModel.Franchise { get => Slave; set => Slave = (FranchiseModel?)value; } // B3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Franchise)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByFranchiseModel.FranchiseID { get => MasterID; set => MasterID = value; } // B4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseKey { get => MasterKey; set => MasterKey = value; } // B4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseName { get => MasterName; set => MasterName = value; } // B4

        /// <inheritdoc cref="IAmFilterableByFranchiseModel.Franchise"/>
        [JsonIgnore]
        IFranchiseModel? IAmFilterableByFranchiseModel.Franchise { get => Master; set => Master = (FranchiseModel?)value; } // B4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Franchise)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByFranchiseModel.FranchiseID { get => SlaveID; set => SlaveID = value; } // B5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseKey { get => SlaveKey; set => SlaveKey = value; } // B5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByFranchiseModel.FranchiseName { get => SlaveName; set => SlaveName = value; } // B5

        /// <inheritdoc cref="IAmFilterableByFranchiseModel.Franchise"/>
        [JsonIgnore]
        IFranchiseModel? IAmFilterableByFranchiseModel.Franchise { get => Slave; set => Slave = (FranchiseModel?)value; } // B5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(FranchiseID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the Franchise record.")]
        public int FranchiseID { get; set; } // B6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(FranchiseKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the Franchise record.")]
        public string? FranchiseKey { get; set; } // B6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(FranchiseName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the Franchise record.")]
        public string? FranchiseName { get; set; } // B6

        /// <inheritdoc cref="IAmFilterableByFranchiseModel.Franchise"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Franchise), DataType = "FranchiseModel", ParameterType = "body", IsRequired = false,
                Description = "The Franchise record.")]
        public FranchiseModel? Franchise { get; set; } // B6

        /// <inheritdoc/>
        [JsonIgnore]
        IFranchiseModel? IAmFilterableByFranchiseModel.Franchise { get => Franchise; set => Franchise = (FranchiseModel?)value; } // B6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByManufacturer) { #>
        #region IAmFilterableByManufacturer Properties
<#          if (td.IsIAmAManufacturerRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByManufacturerModel.ManufacturerID { get => MasterID; set => MasterID = value; } // M1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerKey { get => MasterKey; set => MasterKey = value; } // M1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerName { get => MasterName; set => MasterName = value; } // M1

        /// <inheritdoc cref="IAmFilterableByManufacturerModel.Manufacturer"/>
        [JsonIgnore]
        IManufacturerModel? IAmFilterableByManufacturerModel.Manufacturer { get => Master; set => Master = (ManufacturerModel?)value; } // M1
<#          } else if (td.IsIAmAManufacturerRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByManufacturerModel.ManufacturerID { get => SlaveID; set => SlaveID = value; } // M2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerKey { get => SlaveKey; set => SlaveKey = value; } // M2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerName { get => SlaveName; set => SlaveName = value; } // M2

        /// <inheritdoc cref="IAmFilterableByManufacturerModel.Manufacturer"/>
        [JsonIgnore]
        IManufacturerModel? IAmFilterableByManufacturerModel.Manufacturer { get => Slave; set => Slave = (ManufacturerModel?)value; } // M2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.ManufacturerID { get => SlaveID; set => SlaveID = value; } // M3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerKey { get => SlaveKey; set => SlaveKey = value; } // M3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerName { get => SlaveName; set => SlaveName = value; } // M3

        /// <inheritdoc cref="IAmFilterableByManufacturerModel.Manufacturer"/>
        [JsonIgnore]
        IManufacturerModel? IAmFilterableByManufacturerModel.Manufacturer { get => Slave; set => Slave = (ManufacturerModel?)value; } // M3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Manufacturer)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByManufacturerModel.ManufacturerID { get => MasterID; set => MasterID = value; } // M4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerKey { get => MasterKey; set => MasterKey = value; } // M4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerName { get => MasterName; set => MasterName = value; } // M4

        /// <inheritdoc cref="IAmFilterableByManufacturerModel.Manufacturer"/>
        [JsonIgnore]
        IManufacturerModel? IAmFilterableByManufacturerModel.Manufacturer { get => Master; set => Master = (ManufacturerModel?)value; } // M4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Manufacturer)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByManufacturerModel.ManufacturerID { get => SlaveID; set => SlaveID = value; } // M5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerKey { get => SlaveKey; set => SlaveKey = value; } // M5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByManufacturerModel.ManufacturerName { get => SlaveName; set => SlaveName = value; } // M5

        /// <inheritdoc cref="IAmFilterableByManufacturerModel.Manufacturer"/>
        [JsonIgnore]
        IManufacturerModel? IAmFilterableByManufacturerModel.Manufacturer { get => Slave; set => Slave = (ManufacturerModel?)value; } // M5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ManufacturerID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the manufacturer record.")]
        public int ManufacturerID { get; set; } // M6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ManufacturerKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the manufacturer record.")]
        public string? ManufacturerKey { get; set; } // M6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ManufacturerName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the manufacturer record.")]
        public string? ManufacturerName { get; set; } // M6

        /// <inheritdoc cref="IAmFilterableByManufacturerModel.Manufacturer"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Manufacturer), DataType = "ManufacturerModel", ParameterType = "body", IsRequired = false,
                Description = "The manufacturer record.")]
        public ManufacturerModel? Manufacturer { get; set; } // M6

        /// <inheritdoc/>
        [JsonIgnore]
        IManufacturerModel? IAmFilterableByManufacturerModel.Manufacturer { get => Manufacturer; set => Manufacturer = (ManufacturerModel?)value; } // M6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByProduct) { #>
        #region IAmFilterableByProduct Properties
<#          if (td.IsIAmAProductRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the product.")]
        public string? MasterSeoUrl { get; set; } // P1

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByProductModel.ProductID { get => MasterID; set => MasterID = value; } // P1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductKey { get => MasterKey; set => MasterKey = value; } // P1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductName { get => MasterName; set => MasterName = value; } // P1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductSeoUrl { get => MasterSeoUrl; set => MasterSeoUrl = value; } // P1

        /// <inheritdoc cref="IAmFilterableByProductModel.Product"/>
        [JsonIgnore]
        IProductModel? IAmFilterableByProductModel.Product { get => Master; set => Master = (ProductModel?)value; } // P1
<#          } else if (td.IsIAmAProductRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the product.")]
        public string? SlaveSeoUrl { get; set; } // P2

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByProductModel.ProductID { get => SlaveID; set => SlaveID = value; } // P2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductKey { get => SlaveKey; set => SlaveKey = value; } // P2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductName { get => SlaveName; set => SlaveName = value; } // P2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductSeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // P2

        /// <inheritdoc cref="IAmFilterableByProductModel.Product"/>
        [JsonIgnore]
        IProductModel? IAmFilterableByProductModel.Product { get => Slave; set => Slave = (ProductModel?)value; } // P2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the product.")]
        public string? SlaveSeoUrl { get; set; } // P3

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.ProductID { get => SlaveID; set => SlaveID = value; } // P3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductKey { get => SlaveKey; set => SlaveKey = value; } // P3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductName { get => SlaveName; set => SlaveName = value; } // P3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductSeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // P3

        /// <inheritdoc cref="IAmFilterableByProductModel.Product"/>
        [JsonIgnore]
        IProductModel? IAmFilterableByProductModel.Product { get => Slave; set => Slave = (ProductModel?)value; } // P3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Product)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the product.")]
        public string? MasterSeoUrl { get; set; } // P4

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByProductModel.ProductID { get => MasterID; set => MasterID = value; } // P4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductKey { get => MasterKey; set => MasterKey = value; } // P4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductName { get => MasterName; set => MasterName = value; } // P4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductSeoUrl { get => MasterSeoUrl; set => MasterSeoUrl = value; } // P4

        /// <inheritdoc cref="IAmFilterableByProductModel.Product"/>
        [JsonIgnore]
        IProductModel? IAmFilterableByProductModel.Product { get => Master; set => Master = (ProductModel?)value; } // P4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Product)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the product.")]
        public string? SlaveSeoUrl { get; set; } // P4

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByProductModel.ProductID { get => SlaveID; set => SlaveID = value; } // P5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductKey { get => SlaveKey; set => SlaveKey = value; } // P5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductName { get => SlaveName; set => SlaveName = value; } // P5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByProductModel.ProductSeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // P5

        /// <inheritdoc cref="IAmFilterableByProductModel.Product"/>
        [JsonIgnore]
        IProductModel? IAmFilterableByProductModel.Product { get => Slave; set => Slave = (ProductModel?)value; } // P5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ProductID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the product record.")]
        public int ProductID { get; set; } // P6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ProductKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the product record.")]
        public string? ProductKey { get; set; } // P6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ProductName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the product record.")]
        public string? ProductName { get; set; } // P6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ProductSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The product record.")]
        public string? ProductSeoUrl { get; set; }

        /// <inheritdoc cref="IAmFilterableByProductModel.Product"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Product), DataType = "ProductModel", ParameterType = "body", IsRequired = false,
                Description = "The product record.")]
        public ProductModel? Product { get; set; } // P6

        /// <inheritdoc/>
        [JsonIgnore]
        IProductModel? IAmFilterableByProductModel.Product { get => Product; set => Product = (ProductModel?)value; } // P6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByStore) { #>
        #region IAmFilterableByStore Properties
<#          if (td.IsIAmAStoreRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the Store.")]
        public string? MasterSeoUrl { get; set; } // S1

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByStoreModel.StoreID { get => MasterID; set => MasterID = value; } // S1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreKey { get => MasterKey; set => MasterKey = value; } // S1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreName { get => MasterName; set => MasterName = value; } // S1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreSeoUrl { get => MasterSeoUrl; set => MasterSeoUrl = value; } // S1

        /// <inheritdoc cref="IAmFilterableByStoreModel.Store"/>
        [JsonIgnore]
        IStoreModel? IAmFilterableByStoreModel.Store { get => Master; set => Master = (StoreModel?)value; } // S1
<#          } else if (td.IsIAmAStoreRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the Store.")]
        public string? SlaveSeoUrl { get; set; } // S2

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByStoreModel.StoreID { get => SlaveID; set => SlaveID = value; } // S2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreKey { get => SlaveKey; set => SlaveKey = value; } // S2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreName { get => SlaveName; set => SlaveName = value; } // S2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreSeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // S2

        /// <inheritdoc cref="IAmFilterableByStoreModel.Store"/>
        [JsonIgnore]
        IStoreModel? IAmFilterableByStoreModel.Store { get => Slave; set => Slave = (StoreModel?)value; } // S2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the Store.")]
        public string? SlaveSeoUrl { get; set; } // S3

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.StoreID { get => SlaveID; set => SlaveID = value; } // S3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreKey { get => SlaveKey; set => SlaveKey = value; } // S3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreName { get => SlaveName; set => SlaveName = value; } // S3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreSeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // S3

        /// <inheritdoc cref="IAmFilterableByStoreModel.Store"/>
        [JsonIgnore]
        IStoreModel? IAmFilterableByStoreModel.Store { get => Slave; set => Slave = (StoreModel?)value; } // S3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Store)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the Store.")]
        public string? MasterSeoUrl { get; set; } // S4

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByStoreModel.StoreID { get => MasterID; set => MasterID = value; } // S4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreKey { get => MasterKey; set => MasterKey = value; } // S4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreName { get => MasterName; set => MasterName = value; } // S4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreSeoUrl { get => MasterSeoUrl; set => MasterSeoUrl = value; } // S4

        /// <inheritdoc cref="IAmFilterableByStoreModel.Store"/>
        [JsonIgnore]
        IStoreModel? IAmFilterableByStoreModel.Store { get => Master; set => Master = (StoreModel?)value; } // S4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Store)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The SEO URL of the Store.")]
        public string? SlaveSeoUrl { get; set; } // S4

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByStoreModel.StoreID { get => SlaveID; set => SlaveID = value; } // S5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreKey { get => SlaveKey; set => SlaveKey = value; } // S5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreName { get => SlaveName; set => SlaveName = value; } // S5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByStoreModel.StoreSeoUrl { get => SlaveSeoUrl; set => SlaveSeoUrl = value; } // S5

        /// <inheritdoc cref="IAmFilterableByStoreModel.Store"/>
        [JsonIgnore]
        IStoreModel? IAmFilterableByStoreModel.Store { get => Slave; set => Slave = (StoreModel?)value; } // S5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StoreID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the store record.")]
        public int StoreID { get; set; } // S6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StoreKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the store record.")]
        public string? StoreKey { get; set; } // S6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StoreName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the store record.")]
        public string? StoreName { get; set; } // S6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StoreSeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The store record.")]
        public string? StoreSeoUrl { get; set; }

        /// <inheritdoc cref="IAmFilterableByStoreModel.Store"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Store), DataType = "StoreModel", ParameterType = "body", IsRequired = false,
                Description = "The store record.")]
        public StoreModel? Store { get; set; } // S6

        /// <inheritdoc/>
        [JsonIgnore]
        IStoreModel? IAmFilterableByStoreModel.Store { get => Store; set => Store = (StoreModel?)value; } // S6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByUser) { #>
        #region IAmFilterableByUser Properties
<#          if (td.IsIAmAUserRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterUserName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Username of the User.")]
        public string? MasterUserName { get; set; } // U1

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByUserModel.UserID { get => MasterID; set => MasterID = value; } // U1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserKey { get => MasterKey; set => MasterKey = value; } // U1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserUsername { get => MasterUserName; set => MasterUserName = value; } // U1

        /// <inheritdoc cref="IAmFilterableByUserModel.User"/>
        [JsonIgnore]
        IUserModel? IAmFilterableByUserModel.User { get => Master; set => Master = (UserModel?)value; } // U1
<#          } else if (td.IsIAmAUserRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveUserName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Username of the User.")]
        public string? SlaveUserName { get; set; } // U2

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByUserModel.UserID { get => SlaveID; set => SlaveID = value; } // U2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserKey { get => SlaveKey; set => SlaveKey = value; } // U2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserUsername { get => SlaveUserName; set => SlaveUserName = value; } // U2

        /// <inheritdoc cref="IAmFilterableByUserModel.User"/>
        [JsonIgnore]
        IUserModel? IAmFilterableByUserModel.User { get => Slave; set => Slave = (UserModel?)value; } // U2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveUserName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Username of the User.")]
        public string? SlaveUserName { get; set; } // U3

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.UserID { get => SlaveID; set => SlaveID = value; } // U3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserKey { get => SlaveKey; set => SlaveKey = value; } // U3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserUsername { get => SlaveUserName; set => SlaveUserName = value; } // U3

        /// <inheritdoc cref="IAmFilterableByUserModel.User"/>
        [JsonIgnore]
        IUserModel? IAmFilterableByUserModel.User { get => Slave; set => Slave = (UserModel?)value; } // U3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(User)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterUserName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Username of the User.")]
        public string? MasterUserName { get; set; } // U4

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByUserModel.UserID { get => MasterID; set => MasterID = value; } // U4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserKey { get => MasterKey; set => MasterKey = value; } // U4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserUsername { get => MasterUserName; set => MasterUserName = value; } // U4

        /// <inheritdoc cref="IAmFilterableByUserModel.User"/>
        [JsonIgnore]
        IUserModel? IAmFilterableByUserModel.User { get => Master; set => Master = (UserModel?)value; } // U4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(User)) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveUserName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Username of the User.")]
        public string? SlaveUserName { get; set; } // U5

        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByUserModel.UserID { get => SlaveID; set => SlaveID = value; } // U5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserKey { get => SlaveKey; set => SlaveKey = value; } // U5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByUserModel.UserUsername { get => SlaveUserName; set => SlaveUserName = value; } // U5

        /// <inheritdoc cref="IAmFilterableByUserModel.User"/>
        [JsonIgnore]
        IUserModel? IAmFilterableByUserModel.User { get => Slave; set => Slave = (UserModel?)value; } // U5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(UserID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the user record.")]
        public int UserID { get; set; } // U6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(UserKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the user record.")]
        public string? UserKey { get; set; } // U6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(UserUsername), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the user record.")]
        public string? UserUsername { get; set; } // U6

        /// <inheritdoc cref="IAmFilterableByUserModel.User"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(User), DataType = "UserModel", ParameterType = "body", IsRequired = false,
                Description = "The user record.")]
        public UserModel? User { get; set; } // U6

        /// <inheritdoc/>
        [JsonIgnore]
        IUserModel? IAmFilterableByUserModel.User { get => User; set => User = (UserModel?)value; } // U6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByVendor) { #>
        #region IAmFilterableByVendor Properties
<#          if (td.IsIAmAVendorRelationshipMasterTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByVendorModel.VendorID { get => MasterID; set => MasterID = value; } // V1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorKey { get => MasterKey; set => MasterKey = value; } // V1

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorName { get => MasterName; set => MasterName = value; } // V1

        /// <inheritdoc cref="IAmFilterableByVendorModel.Vendor"/>
        [JsonIgnore]
        IVendorModel? IAmFilterableByVendorModel.Vendor { get => Master; set => Master = (VendorModel?)value; } // V1
<#          } else if (td.IsIAmAVendorRelationshipSlaveTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByVendorModel.VendorID { get => SlaveID; set => SlaveID = value; } // V2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorKey { get => SlaveKey; set => SlaveKey = value; } // V2

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorName { get => SlaveName; set => SlaveName = value; } // V2

        /// <inheritdoc cref="IAmFilterableByVendorModel.Vendor"/>
        [JsonIgnore]
        IVendorModel? IAmFilterableByVendorModel.Vendor { get => Slave; set => Slave = (VendorModel?)value; } // V2
<#          } else if (td.IsIAmADiscountFilterRelationshipTable) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel.VendorID { get => SlaveID; set => SlaveID = value; } // V3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorKey { get => SlaveKey; set => SlaveKey = value; } // V3

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorName { get => SlaveName; set => SlaveName = value; } // V3

        /// <inheritdoc cref="IAmFilterableByVendorModel.Vendor"/>
        [JsonIgnore]
        IVendorModel? IAmFilterableByVendorModel.Vendor { get => Slave; set => Slave = (VendorModel?)value; } // V3
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipPrimaryType == typeof(Vendor)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByVendorModel.VendorID { get => MasterID; set => MasterID = value; } // V4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorKey { get => MasterKey; set => MasterKey = value; } // V4

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorName { get => MasterName; set => MasterName = value; } // V4

        /// <inheritdoc cref="IAmFilterableByVendorModel.Vendor"/>
        [JsonIgnore]
        IVendorModel? IAmFilterableByVendorModel.Vendor { get => Master; set => Master = (VendorModel?)value; } // V4
<#          } else if (td.IsIAmARelationshipTable && td.RelationshipSecondaryType == typeof(Vendor)) { #>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmFilterableByVendorModel.VendorID { get => SlaveID; set => SlaveID = value; } // V5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorKey { get => SlaveKey; set => SlaveKey = value; } // V5

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmFilterableByVendorModel.VendorName { get => SlaveName; set => SlaveName = value; } // V5

        /// <inheritdoc cref="IAmFilterableByVendorModel.Vendor"/>
        [JsonIgnore]
        IVendorModel? IAmFilterableByVendorModel.Vendor { get => Slave; set => Slave = (VendorModel?)value; } // V5
<#          } else { #>
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(VendorID), DataType = "int", ParameterType = "body", IsRequired = true,
                Description = "The identifier of the vendor record.")]
        public int VendorID { get; set; } // V6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(VendorKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The custom key of the vendor record.")]
        public string? VendorKey { get; set; } // V6

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(VendorName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The name of the vendor record.")]
        public string? VendorName { get; set; } // V6

        /// <inheritdoc cref="IAmFilterableByVendorModel.Vendor"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Vendor), DataType = "VendorModel", ParameterType = "body", IsRequired = false,
                Description = "The vendor record.")]
        public VendorModel? Vendor { get; set; } // V6

        /// <inheritdoc/>
        [JsonIgnore]
        IVendorModel? IAmFilterableByVendorModel.Vendor { get => Vendor; set => Vendor = (VendorModel?)value; } // V6
<#          } #>
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableAccount && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableAccount Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? AccountID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? AccountKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? AccountName { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableAccountModel.Account"/>
        public AccountModel? Account { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IAccountModel? IAmFilterableByNullableAccountModel.Account { get => Account; set => Account = (AccountModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableBrand && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableBrand Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? BrandID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? BrandKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? BrandName { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableBrandModel.Brand"/>
        public BrandModel? Brand { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IBrandModel? IAmFilterableByNullableBrandModel.Brand { get => Brand; set => Brand = (BrandModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableCategory && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableCategory Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? CategoryID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? CategoryKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? CategoryName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? CategorySeoUrl { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableCategoryModel.Category"/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public CategoryModel? Category { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICategoryModel? IAmFilterableByNullableCategoryModel.Category { get => Category; set => Category = (CategoryModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableFranchise && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableFranchise Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? FranchiseID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? FranchiseKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? FranchiseName { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableFranchiseModel.Franchise"/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public FranchiseModel? Franchise { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IFranchiseModel? IAmFilterableByNullableFranchiseModel.Franchise { get => Franchise; set => Franchise = (FranchiseModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableManufacturer && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableManufacturer Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? ManufacturerID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ManufacturerKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ManufacturerName { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableManufacturerModel.Manufacturer"/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public ManufacturerModel? Manufacturer { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IManufacturerModel? IAmFilterableByNullableManufacturerModel.Manufacturer { get => Manufacturer; set => Manufacturer = (ManufacturerModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableProduct && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableProduct Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? ProductID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ProductKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ProductName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ProductSeoUrl { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableProductModel.Product"/>
        public ProductModel? Product { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IProductModel? IAmFilterableByNullableProductModel.Product { get => Product; set => Product = (ProductModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableStore && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableStore Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? StoreID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? StoreKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? StoreName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? StoreSeoUrl { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableStoreModel.Store"/>
        public StoreModel? Store { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IStoreModel? IAmFilterableByNullableStoreModel.Store { get => Store; set => Store = (StoreModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableUser && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableUser Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? UserID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? UserKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? UserName { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableUserModel.User "/>
        public UserModel? User { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IUserModel? IAmFilterableByNullableUserModel.User { get => User; set => User = (UserModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmFilterableByNullableVendor && !td.IsISalesCollectionBase) { #>
        #region IAmFilterableByNullableVendor Properties
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? VendorID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? VendorKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? VendorName { get; set; }

        /// <inheritdoc cref="IAmFilterableByNullableVendorModel.Vendor"/>
        public VendorModel? Vendor { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IVendorModel? IAmFilterableByNullableVendorModel.Vendor { get => Vendor; set => Vendor = (VendorModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIHaveANullableContactBase && !td.IsIAmAContactRelationshipTable) { #>
        #region IHaveANullableContactBaseModel
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? ContactID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactPhone { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactFax { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactEmail { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactFirstName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactLastName { get; set; }

        /// <inheritdoc cref="IHaveANullableContactBaseModel.Contact"/>
        public ContactModel? Contact { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IContactModel? IHaveANullableContactBaseModel.Contact { get => Contact; set => Contact = (ContactModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIHaveAContactBase && !td.IsIAmAContactRelationshipTable) { #>
        #region IHaveAContactBaseModel
        /// <inheritdoc/>
        [DefaultValue(0), DataMember(EmitDefaultValue = false)]
        public int ContactID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactPhone { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactFax { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactEmail { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactFirstName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ContactLastName { get; set; }

        /// <inheritdoc cref="IHaveAContactBaseModel.Contact"/>
        public ContactModel? Contact { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IContactModel? IHaveAContactBaseModel.Contact { get => Contact; set => Contact = (ContactModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIHaveNotesBase) { #>
        #region IHaveNotesBaseModel
        /// <inheritdoc cref="IHaveNotesBaseModel.Notes"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Notes), DataType = "List<NoteModel>", ParameterType = "body", IsRequired = false,
                Description = "Notes for the object, optional")]
        public List<NoteModel>? Notes { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<INoteModel>? IHaveNotesBaseModel.Notes { get => Notes?.ToList<INoteModel>(); set => Notes = value?.Cast<NoteModel>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIHaveImagesBase) { #>
        #region IHaveImagesBaseModel
        /// <inheritdoc cref="IHaveImagesBaseModel{I<#= HelpFunctions.SwapToModelType(theType.Name + "Image") #>Model, I<#= HelpFunctions.SwapToModelType(theType.Name + "ImageType") #>Model}.Images"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Images), DataType = "List<<#= theType.Name #>ImageModel>", ParameterType = "body", IsRequired = false,
                Description = "Images for the object, optional")]
        public List<<#= theType.Name #>ImageModel>? Images { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= theType.Name #>ImageModel>? IHaveImagesBaseModel<I<#= HelpFunctions.SwapToModelType(theType.Name + "Image") #>Model, I<#= HelpFunctions.SwapToModelType(theType.Name + "ImageType") #>Model>.Images { get => Images?.ToList<I<#= theType.Name #>ImageModel>(); set => Images = value?.Cast<<#= theType.Name #>ImageModel>().ToList(); }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(PrimaryImageFileName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The primary image from the list of images, or the first image if no primary is set (read-only)")]
        public string? PrimaryImageFileName { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIImageBase) { #>
        #region IsIImageBase
        #region Displaying it info (and metadata)
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? SortOrder { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? DisplayName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? SeoTitle { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? Author { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public DateTime? MediaDate { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? Copyright { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? Location { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public decimal? Latitude { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public decimal? Longitude { get; set; }
        #endregion
        #region Primary of a group of images
        /// <inheritdoc/>
        [DefaultValue(false), DataMember(EmitDefaultValue = false)]
        public bool IsPrimary { get; set; }
        #endregion
        #region The original (unmodified) image as uploaded
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? OriginalWidth { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? OriginalHeight { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? OriginalFileFormat { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? OriginalFileName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(false), DataMember(EmitDefaultValue = false)]
        public bool OriginalIsStoredInDB { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public byte[]? OriginalBytes { get; set; }
        #endregion
        #region A generated thumbnail of the original image
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? ThumbnailWidth { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? ThumbnailHeight { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ThumbnailFileFormat { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ThumbnailFileName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(false), DataMember(EmitDefaultValue = false)]
        public bool ThumbnailIsStoredInDB { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public byte[]? ThumbnailBytes { get; set; }
        #endregion
        #region Related Objects
        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MasterID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MasterKey { get; set; }
        #endregion
        #endregion
<#      } #>
<#      if (td.IsIHaveStoredFilesBase && !td.IsISalesCollectionBase) { #>
        #region IHaveStoredFilesBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StoredFiles), IsRequired = false, DataType = "List<<#= theType.Name #>FileModel>", ParameterType = "body",
                Description = "Stored Files for the object, optional")]
        public List<<#= theType.Name #>FileModel>? StoredFiles { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= theType.Name #>FileModel>? IHaveStoredFilesBaseModel<I<#= theType.Name #>FileModel>.StoredFiles { get => StoredFiles?.ToList<I<#= theType.Name #>FileModel>(); set => StoredFiles = value?.Cast<<#= theType.Name #>FileModel>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIHaveSeoBase) { #>
        #region IHaveSeoBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SeoKeywords), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "SEO Keywords to use in the Meta tags of the page for this object")]
        public string? SeoKeywords { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SeoUrl), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "SEO URL to use to link to the page for this object")]
        public string? SeoUrl { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SeoDescription), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "SEO Description to use in the Meta tags of the page for this object")]
        public string? SeoDescription { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SeoMetaData), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "SEO General Meta Data to use in the Meta tags of the page for this object")]
        public string? SeoMetaData { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SeoPageTitle), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "SEO Page Title to use in the Meta tags of the page for this object")]
        public string? SeoPageTitle { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIHaveOrderMinimumsBase) { #>
        #region IHaveOrderMinimumsBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderDollarAmount), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumOrderDollarAmount { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderDollarAmountAfter), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumOrderDollarAmountAfter { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderDollarAmountWarningMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The warning message for not reaching the minimum order requirement by Dollar Amount")]
        public string? MinimumOrderDollarAmountWarningMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderDollarAmountOverrideFee), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumOrderDollarAmountOverrideFee { get; set; }

        /// <inheritdoc/>
        [DefaultValue(false),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderDollarAmountOverrideFeeIsPercent), DataType = "bool", ParameterType = "body", IsRequired = false,
                Description = "")]
        public bool MinimumOrderDollarAmountOverrideFeeIsPercent { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderDollarAmountOverrideFeeWarningMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The warning message for not reaching the minimum order requirement by Dollar Amount")]
        public string? MinimumOrderDollarAmountOverrideFeeWarningMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderDollarAmountOverrideFeeAcceptedMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The accepted override fee message for not reaching the minimum order requirement by Dollar Amount")]
        public string? MinimumOrderDollarAmountOverrideFeeAcceptedMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderQuantityAmount), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumOrderQuantityAmount { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderQuantityAmountAfter), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumOrderQuantityAmountAfter { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderQuantityAmountWarningMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The warning message for not reaching the minimum order requirement by Unit Quantity")]
        public string? MinimumOrderQuantityAmountWarningMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderQuantityAmountOverrideFee), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumOrderQuantityAmountOverrideFee { get; set; }

        /// <inheritdoc/>
        [DefaultValue(false),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderQuantityAmountOverrideFeeIsPercent), DataType = "bool", ParameterType = "body", IsRequired = false,
                Description = "")]
        public bool MinimumOrderQuantityAmountOverrideFeeIsPercent { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderQuantityAmountOverrideFeeWarningMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The warning message for not reaching the minimum order requirement by Unit Quantity")]
        public string? MinimumOrderQuantityAmountOverrideFeeWarningMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumOrderQuantityAmountOverrideFeeAcceptedMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The accepted override fee message for not reaching the minimum order requirement by Unit Quantity")]
        public string? MinimumOrderQuantityAmountOverrideFeeAcceptedMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumOrderDollarAmountBufferProductID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderDollarAmountBufferProductKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderDollarAmountBufferProductName { get; set; }

        /// <inheritdoc cref="IHaveOrderMinimumsBaseModel.MinimumOrderDollarAmountBufferProduct" />
        public ProductModel? MinimumOrderDollarAmountBufferProduct { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IProductModel? IHaveOrderMinimumsBaseModel.MinimumOrderDollarAmountBufferProduct { get => MinimumOrderDollarAmountBufferProduct; set => MinimumOrderDollarAmountBufferProduct = (ProductModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumOrderQuantityAmountBufferProductID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderQuantityAmountBufferProductKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderQuantityAmountBufferProductName { get; set; }

        /// <inheritdoc cref="IHaveOrderMinimumsBaseModel.MinimumOrderQuantityAmountBufferProduct" />
        public ProductModel? MinimumOrderQuantityAmountBufferProduct { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IProductModel? IHaveOrderMinimumsBaseModel.MinimumOrderQuantityAmountBufferProduct { get => MinimumOrderQuantityAmountBufferProduct; set => MinimumOrderQuantityAmountBufferProduct = (ProductModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumOrderDollarAmountBufferCategoryID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderDollarAmountBufferCategoryKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderDollarAmountBufferCategoryName { get; set; }

        /// <inheritdoc cref="IHaveOrderMinimumsBaseModel.MinimumOrderDollarAmountBufferCategory" />
        public CategoryModel? MinimumOrderDollarAmountBufferCategory { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICategoryModel? IHaveOrderMinimumsBaseModel.MinimumOrderDollarAmountBufferCategory { get => MinimumOrderDollarAmountBufferCategory; set => MinimumOrderDollarAmountBufferCategory = (CategoryModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumOrderQuantityAmountBufferCategoryID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderQuantityAmountBufferCategoryKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumOrderQuantityAmountBufferCategoryName { get; set; }

        /// <inheritdoc cref="IHaveOrderMinimumsBaseModel.MinimumOrderQuantityAmountBufferCategory" />
        public CategoryModel? MinimumOrderQuantityAmountBufferCategory { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICategoryModel? IHaveOrderMinimumsBaseModel.MinimumOrderQuantityAmountBufferCategory { get => MinimumOrderQuantityAmountBufferCategory; set => MinimumOrderQuantityAmountBufferCategory = (CategoryModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIHaveFreeShippingMinimumsBase) { #>
        #region IHaveFreeShippingMinimumsBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingDollarAmount), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumForFreeShippingDollarAmount { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingDollarAmountAfter), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumForFreeShippingDollarAmountAfter { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingDollarAmountWarningMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The warning message for not reaching the minimum free shipping requirement by Dollar Amount")]
        public string? MinimumForFreeShippingDollarAmountWarningMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "")]
        public string? MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingQuantityAmount), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumForFreeShippingQuantityAmount { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingQuantityAmountAfter), DataType = "decimal?", ParameterType = "body", IsRequired = false,
                Description = "")]
        public decimal? MinimumForFreeShippingQuantityAmountAfter { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingQuantityAmountWarningMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The warning message for not reaching the minimum free shipping requirement by Unit Quantity")]
        public string? MinimumForFreeShippingQuantityAmountWarningMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "")]
        public string? MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumForFreeShippingDollarAmountBufferProductID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingDollarAmountBufferProductKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingDollarAmountBufferProductName { get; set; }

        /// <inheritdoc cref="IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingDollarAmountBufferProduct" />
        public ProductModel? MinimumForFreeShippingDollarAmountBufferProduct { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IProductModel? IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingDollarAmountBufferProduct { get => MinimumForFreeShippingDollarAmountBufferProduct; set => MinimumForFreeShippingDollarAmountBufferProduct = (ProductModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumForFreeShippingQuantityAmountBufferProductID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingQuantityAmountBufferProductKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingQuantityAmountBufferProductName { get; set; }

        /// <inheritdoc cref="IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingQuantityAmountBufferProduct" />
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public ProductModel? MinimumForFreeShippingQuantityAmountBufferProduct { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IProductModel? IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingQuantityAmountBufferProduct { get => MinimumForFreeShippingQuantityAmountBufferProduct; set => MinimumForFreeShippingQuantityAmountBufferProduct = (ProductModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumForFreeShippingDollarAmountBufferCategoryID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingDollarAmountBufferCategoryKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingDollarAmountBufferCategoryName { get; set; }

        /// <inheritdoc cref="IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingDollarAmountBufferCategory" />
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public CategoryModel? MinimumForFreeShippingDollarAmountBufferCategory { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICategoryModel? IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingDollarAmountBufferCategory { get => MinimumForFreeShippingDollarAmountBufferCategory; set => MinimumForFreeShippingDollarAmountBufferCategory = (CategoryModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? MinimumForFreeShippingQuantityAmountBufferCategoryID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingQuantityAmountBufferCategoryKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? MinimumForFreeShippingQuantityAmountBufferCategoryName { get; set; }

        /// <inheritdoc cref="IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingQuantityAmountBufferCategory" />
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public CategoryModel? MinimumForFreeShippingQuantityAmountBufferCategory { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICategoryModel? IHaveFreeShippingMinimumsBaseModel.MinimumForFreeShippingQuantityAmountBufferCategory { get => MinimumForFreeShippingQuantityAmountBufferCategory; set => MinimumForFreeShippingQuantityAmountBufferCategory = (CategoryModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIHaveCurrenciesBase) { #>
        #region IHaveCurrenciesBase<I<#= HelpFunctions.SwapToModelType(td.IHaveCurrenciesTType.Name) #>>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Currencies), IsRequired = false, DataType = "List<<#= HelpFunctions.SwapToModelType(td.IHaveCurrenciesTType.Name) #>>", ParameterType = "body",
                Description = "A List of currencies tied to this object")]
        public List<<#= HelpFunctions.SwapToModelType(td.IHaveCurrenciesTType.Name) #>Model>? Currencies { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= HelpFunctions.SwapToModelType(td.IHaveCurrenciesTType.Name) #>Model>? IHaveCurrenciesBaseModel<I<#= HelpFunctions.SwapToModelType(td.IHaveCurrenciesTType.Name) #>Model>.Currencies
        {
            get => Currencies?.ToList<I<#= HelpFunctions.SwapToModelType(td.IHaveCurrenciesTType.Name) #>Model>();
            set => Currencies = value?.Cast<<#= HelpFunctions.SwapToModelType(td.IHaveCurrenciesTType.Name) #>Model>().ToList();
        }
        #endregion
<#      } #>
<#      if (td.IsIHaveLanguagesBase) { #>
        #region IHaveLanguagesBase<I<#= HelpFunctions.SwapToModelType(td.IHaveLanguagesTType.Name) #>>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Languages), IsRequired = false, DataType = "List<<#= HelpFunctions.SwapToModelType(td.IHaveLanguagesTType.Name) #>>", ParameterType = "body",
                Description = "A List of languages tied to this object")]
        public List<<#= HelpFunctions.SwapToModelType(td.IHaveLanguagesTType.Name) #>Model>? Languages { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= HelpFunctions.SwapToModelType(td.IHaveLanguagesTType.Name) #>Model>? IHaveLanguagesBaseModel<I<#= HelpFunctions.SwapToModelType(td.IHaveLanguagesTType.Name) #>Model>.Languages
        {
            get => Languages?.ToList<I<#= HelpFunctions.SwapToModelType(td.IHaveLanguagesTType.Name) #>Model>();
            set => Languages = value?.Cast<<#= HelpFunctions.SwapToModelType(td.IHaveLanguagesTType.Name) #>Model>().ToList();
        }
        #endregion
<#      } #>
<#      if (td.IsIHaveAdCounters) { #>
        #region IHaveAdCountersModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ImpressionCounterID), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "CounterID of Ad Impressions Counter")]
        public int? ImpressionCounterID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ImpressionCounterKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ImpressionCounter), DataType = "CounterModel", ParameterType = "body", IsRequired = false,
                Description = "Ad Impressions Counter")]
        public CounterModel? ImpressionCounter { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICounterModel? IHaveAdCountersModel.ImpressionCounter { get => ImpressionCounter; set => ImpressionCounter = (CounterModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ClickCounterID), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "CounterID of Ad Clicks Counter")]
        public int? ClickCounterID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ClickCounterKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ClickCounter), DataType = "CounterModel", ParameterType = "body", IsRequired = false,
                Description = "Ad Clicks Counter")]
        public CounterModel? ClickCounter { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICounterModel? IHaveAdCountersModel.ClickCounter { get => ClickCounter; set => ClickCounter = (CounterModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIHaveRequiresRolesBase) { #>
        #region IHaveRequiresRolesBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(RequiresRoles), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "A comma delimited string? for Role Names that are required for access")]
        public string? RequiresRoles { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(RequiresRolesList), DataType = "List<string>", ParameterType = "body", IsRequired = false,
                Description = "A List string? for Role Names that are required for access")]
        public List<string> RequiresRolesList => RequiresRoles?.Split(',').Select(s => s.Trim()).ToList()
            ?? new List<string>();

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(RequiresRolesAlt), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "A comma delimited string? for Role Names that are required for access. This is an alternate list for additional purposes.")]
        public string? RequiresRolesAlt { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(RequiresRolesListAlt), DataType = "List<string>", ParameterType = "body", IsRequired = false,
                Description = "A List string? for Role Names that are required for access. This is an alternate list for additional purposes.")]
        public List<string> RequiresRolesListAlt => RequiresRolesAlt?.Split(',').Select(s => s.Trim()).ToList()
            ?? new List<string>();
        #endregion
<#      } #>
<#      if (td.IsIHaveReviewsBase) { #>
        #region IHaveReviewsBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Reviews), DataType = "List<ReviewModel>", ParameterType = "body", IsRequired = false,
                Description = "<#= HelpFunctions.SwapToModelType(name) #> Reviews")]
        public List<ReviewModel>? Reviews { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<IReviewModel>? IHaveReviewsBaseModel.Reviews { get => Reviews?.ToList<IReviewModel>(); set => Reviews = value?.Cast<ReviewModel>().ToList(); }
        #endregion
<#      } #>
<#      if (td.IsIHaveAParentBase) { #>
        #region IHaveAParentBaseModel<I<#= HelpFunctions.SwapToModelType(name) #>Model>
        // Related Objects

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public int? ParentID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null), DataMember(EmitDefaultValue = false)]
        public string? ParentKey { get; set; }

        /// <inheritdoc/>
        public <#= HelpFunctions.SwapToModelType(name) #>Model? Parent { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        I<#= HelpFunctions.SwapToModelType(name) #>Model? IHaveAParentBaseModel<I<#= HelpFunctions.SwapToModelType(name) #>Model>.Parent { get => Parent; set => Parent = (<#= HelpFunctions.SwapToModelType(name) #>Model?)value; }

        // Associated Objects

        /// <inheritdoc/>
        public List<<#= HelpFunctions.SwapToModelType(name) #>Model>? Children { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        List<I<#= HelpFunctions.SwapToModelType(name) #>Model>? IHaveAParentBaseModel<I<#= HelpFunctions.SwapToModelType(name) #>Model>.Children { get => Children?.ToList<I<#= HelpFunctions.SwapToModelType(name) #>Model>(); set => Children = value?.Cast<<#= HelpFunctions.SwapToModelType(name) #>Model>().ToList(); }

        // Convenience Properties

        /// <inheritdoc/>
        [DefaultValue(false),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(HasChildren), DataType = "bool", ParameterType = "body", IsRequired = false,
                Description = "Whether or not the object has child objects (read-only)")]
        public bool HasChildren { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIAmALitelyTrackedEventBase) { #>
        #region IsIAmALitelyTrackedEventBase
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(IPAddress), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The originating IP Address of the Request for the Event")]
        public string? IPAddress { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Score), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The Score of the Event")]
        public int? Score { get; set; }

        // Related Objects

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(AddressID), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The Identifier for the Address storing location information for the Event")]
        public int? AddressID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(AddressKey), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? AddressKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Address), DataType = "AddressModel", ParameterType = "body", IsRequired = false,
                Description = "The body of the Address storing location information for the Event")]
        public AddressModel? Address { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IAddressModel? IAmALitelyTrackedEventBaseModel.Address { get => Address; set => Address = (AddressModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(IPOrganizationID), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The Identifier for the IP Organization related with this Event")]
        public int? IPOrganizationID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(IPOrganizationKey), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? IPOrganizationKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(IPOrganizationName), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? IPOrganizationName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(IPOrganization), DataType = "IPOrganizationModel", ParameterType = "body", IsRequired = false,
                Description = "The body of the IP Organization related with this Event")]
        public IPOrganizationModel? IPOrganization { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IIPOrganizationModel? IAmALitelyTrackedEventBaseModel.IPOrganization { get => IPOrganization; set => IPOrganization = (IPOrganizationModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(UserID), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The Identifier for the Address storing location information for the Event")]
        public int? UserID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(UserKey), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? UserKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(User), DataType = "UserModel", ParameterType = "body", IsRequired = false,
                Description = "The body of the User related with this Event")]
        public UserModel? User { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IUserModel? IAmALitelyTrackedEventBaseModel.User { get => User; set => User = (UserModel?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmATrackedEventBase) { #>
        #region IsIAmATrackedEventBase
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DidBounce), DataType = "bool?", ParameterType = "body", IsRequired = false,
                Description = "Did the visitor bounce from the site after coming to it?")]
        public bool? DidBounce { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(OperatingSystem), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The Operating System used in the request for the Event")]
        public string? OperatingSystem { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Browser), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Browser used in the request for the Event")]
        public string? Browser { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Language), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Language of the Request for the Event")]
        public string? Language { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ContainsSocialProfile), DataType = "bool?", ParameterType = "body", IsRequired = false,
                Description = "Does the Event contain Social Profile Data?")]
        public bool? ContainsSocialProfile { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Delta), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The number of changes from this Event")]
        public int? Delta { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Duration), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The duration of this event in seconds")]
        public int? Duration { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(StartedOn), DataType = "DateTime?", ParameterType = "body", IsRequired = false,
                Description = "The time at which the Event started")]
        public DateTime? StartedOn { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(EndedOn), DataType = "DateTime?", ParameterType = "body", IsRequired = false,
                Description = "The time at which the Event ended")]
        public DateTime? EndedOn { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Time), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The time of the Event")]
        public string? Time { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(EntryPage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The entry page of the event")]
        public string? EntryPage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ExitPage), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The the exit page of the event")]
        public string? ExitPage { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(IsFirstTrigger), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "Is this the first time this event has triggered?")]
        public bool? IsFirstTrigger { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Flash), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "Was Flash used to trigger this event? If so, the version of Flash")]
        public string? Flash { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Keywords), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The keywords for the Event")]
        public string? Keywords { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(PartitionKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Partition Key for the Event")]
        public string? PartitionKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Referrer), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Referring Source of the Event (such as Google, Bing or another website)")]
        public string? Referrer { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ReferringHost), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Host URL of the Referring Source of the Event (such as www.google.com)")]
        public string? ReferringHost { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(RowKey), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The Row Key for this Event")]
        public string? RowKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Source), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The Source of this Event as an integer")]
        public int? Source { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TotalTriggers), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The total number of Triggers for this event")]
        public int? TotalTriggers { get; set; }

        // Related Objects

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(CampaignID), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The identifier of the Campaign related to this Event")]
        public int? CampaignID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Campaign), DataType = "CampaignModel", ParameterType = "body", IsRequired = false,
                Description = "The body of the Campaign related to this Event")]
        public CampaignModel? Campaign { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ICampaignModel? IAmATrackedEventBaseModel.Campaign { get => Campaign; set => Campaign = (CampaignModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(CampaignKey), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? CampaignKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(CampaignName), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? CampaignName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SiteDomainID), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The identifier of the Site Domain related to this Event")]
        public int? SiteDomainID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SiteDomain), DataType = "SiteDomainModel", ParameterType = "body", IsRequired = false,
                Description = "The body of the Site Domain related to this Event")]
        public SiteDomainModel? SiteDomain { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        ISiteDomainModel? IAmATrackedEventBaseModel.SiteDomain { get => SiteDomain; set => SiteDomain = (SiteDomainModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SiteDomainKey), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? SiteDomainKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SiteDomainName), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? SiteDomainName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(VisitorID), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The identifier of the Visitor related to this Event")]
        public int? VisitorID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Visitor), DataType = "VisitorModel?", ParameterType = "body", IsRequired = false,
                Description = "The body of the Visitor related to this Event")]
        public VisitorModel? Visitor { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IVisitorModel? IAmATrackedEventBaseModel.Visitor { get => Visitor; set => Visitor = (VisitorModel?)value; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(VisitorKey), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? VisitorKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(VisitorName), DataType = "string?", ParameterType = "body", IsRequired = false)]
        public string? VisitorName { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIAmARelationshipTable)
        {
            var typesAreTheSame = td.RelationshipPrimaryType == td.RelationshipSecondaryType;
            var modelTypeName = name;
            var primaryTypeModelName = HelpFunctions.SwapToModelType(td.RelationshipPrimaryType.Name);
            var primaryName = (typesAreTheSame ? "Primary" : "") + td.RelationshipPrimaryType.Name;
            var secondaryTypeModelName = HelpFunctions.SwapToModelType(td.RelationshipSecondaryType.Name);
            var secondaryName = (typesAreTheSame ? "Associated" : "") + td.RelationshipSecondaryType.Name;
            var primaryModelSuffix1 = primaryTypeModelName == "SalesItemBase"
                ? "<IApplied" + td.RelationshipPrimaryType.Name + "DiscountModel>"
                : string.Empty;
            var primaryModelSuffix2 = primaryTypeModelName == "SalesItemBase"
                ? "<IApplied" + td.RelationshipPrimaryType.Name + "DiscountModel, Applied" + td.RelationshipPrimaryType.Name + "DiscountModel>"
                : string.Empty;
#>
        #region IAmARelationshipTable<I<#= primaryTypeModelName #>Model<#= primaryModelSuffix1 #>,I<#= secondaryTypeModelName #>Model>
<#              if (td.RelationshipPrimaryTypeTD.IsINameableBase) { #>
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterName), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The Name of the Master record.")]
        public string? MasterName { get; set; }
<#                  if (td.RelationshipPrimaryTypeTD.IsIDisplayableBase) { #>

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterDisplayName), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The DisplayName of the Master record.")]
        public string? MasterDisplayName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterTranslationKey), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The TranslationKey of the Master record.")]
        public string? MasterTranslationKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(MasterSortOrder), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The SortOrder of the Master record.")]
        public int? MasterSortOrder { get; set; }
<#                  } #>
<#              } #>
<#              if (td.RelationshipSecondaryTypeTD.IsINameableBase) { #>

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveName), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The Name of the Slave record.")]
        public string? SlaveName { get; set; }
<#                  if (td.RelationshipSecondaryTypeTD.IsIDisplayableBase) { #>

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveDisplayName), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The DisplayName of the Slave record.")]
        public string? SlaveDisplayName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveTranslationKey), DataType = "string?", ParameterType = "body", IsRequired = false,
                Description = "The TranslationKey of the Slave record.")]
        public string? SlaveTranslationKey { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveSortOrder), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The SortOrder of the Slave record.")]
        public int? SlaveSortOrder { get; set; }
<#                  } #>
<#              } #>

        /// <inheritdoc/>
<#              if (theType.Name == "StoreInventoryLocation") { #>
        [JsonIgnore]
<#              } #>
        public <#= primaryTypeModelName #>Model<#= primaryModelSuffix2 #>? Master { get; set; }

        /// <inheritdoc cref="IAmARelationshipTableBaseModel{I<#= secondaryTypeModelName #>Model}.Slave"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Slave), DataType = "<#= secondaryTypeModelName #>Model?", ParameterType = "body", IsRequired = false,
                Description = "The Slave record (may only be partially mapped out).")]
        public <#= secondaryTypeModelName #>Model? Slave { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        I<#= secondaryTypeModelName #>Model? IAmARelationshipTableBaseModel<I<#= secondaryTypeModelName #>Model>.Slave { get => Slave; set => Slave = (<#= secondaryTypeModelName #>Model?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmAStoredFileRelationshipTable) { #>
        #region IAmAStoredFileRelationshipTable
        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(FileAccessTypeID), DataType = "int", ParameterType = "body", IsRequired = false)]
        public int FileAccessTypeID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SortOrder), DataType = "int?", ParameterType = "body", IsRequired = false)]
        public int? SortOrder { get; set; }
        #endregion
<#      } #>
<#      if (td.IsIAmAContactRelationshipTable) {
            var primaryName = td.RelationshipPrimaryType.Name;
            var secondaryName = td.RelationshipSecondaryType.Name; #>
<#          if (theType.Name.Contains("Favorite")) { secondaryName = "Favorite"; }#>
<#          if ((td.RelationshipSecondaryType != typeof(Store)) || theType.Name.Contains("Favorite")) { #>
        #region IAmAContactRelationshipTable, IAmARelationshipTable<I<#= HelpFunctions.SwapToModelType(primaryName) #>Model, I<#= HelpFunctions.SwapToModelType(secondaryName) #>Model>, IHaveAContactBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlavePhone), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The primary phone number of the contact.")]
        public string? SlavePhone { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveFax), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The fax number of the contact.")]
        public string? SlaveFax { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveEmail), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The email address of the contact.")]
        public string? SlaveEmail { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveFirstName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The first (given) name of the contact.")]
        public string? SlaveFirstName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveLastName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The last (family) name of the contact.")]
        public string? SlaveLastName { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        int IHaveAContactBaseModel.ContactID { get => SlaveID; set => SlaveID = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactKey { get => SlaveKey; set => SlaveKey = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactPhone { get => SlavePhone; set => SlavePhone = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactFax { get => SlaveFax; set => SlaveFax = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactEmail { get => SlaveEmail; set => SlaveEmail = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactFirstName { get => SlaveFirstName; set => SlaveFirstName = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactLastName { get => SlaveLastName; set => SlaveLastName = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        IContactModel? IHaveAContactBaseModel.Contact { get => Slave; set => Slave = (ContactModel?)value; }
        #endregion
<#          } #>
<#      } #>
<#      if (td.IsIAmAFavoriteRelationshipTable) {
            var secondaryTypeModelName = HelpFunctions.SwapToModelType(td.RelationshipSecondaryType.Name); #>
        #region IAmAFavoriteRelationshipTable
        /// <inheritdoc/>
        [JsonIgnore]
        public int FavoriteID { get => SlaveID; set => SlaveID = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        public string? FavoriteKey { get => SlaveKey; set => SlaveKey = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        public string? FavoriteName { get => SlaveName; set => SlaveName = value; }

        /// <inheritdoc cref="IFavorite<#= secondaryTypeModelName #>Model.Favorite"/>
        [JsonIgnore]
        public <#= secondaryTypeModelName #>Model? Favorite { get => Slave; set => Slave = (<#= secondaryTypeModelName #>Model?)value; }

        /// <inheritdoc/>
        [JsonIgnore]
        I<#= secondaryTypeModelName #>Model? IFavorite<#= secondaryTypeModelName #>Model.Favorite { get => Slave; set => Slave = (<#= secondaryTypeModelName #>Model?)value; }
        #endregion
<#      } #>
<#      if (td.IsIAmADiscountFilterRelationshipTable) {
            var secondaryTypeModelName = HelpFunctions.SwapToModelType(td.RelationshipSecondaryType.Name); #>
        #region IAmADiscountFilterRelationshipTable<I<#= secondaryTypeModelName #>Model>
        /// <inheritdoc/>
        [JsonIgnore]
        int IAmADiscountFilterRelationshipTableModel<I<#= secondaryTypeModelName #>Model>.DiscountID { get => MasterID; set => MasterID = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmADiscountFilterRelationshipTableModel<I<#= secondaryTypeModelName #>Model>.DiscountKey { get => MasterKey; set => MasterKey = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAmADiscountFilterRelationshipTableModel<I<#= secondaryTypeModelName #>Model>.DiscountName { get => MasterName; set => MasterName = value; }
        #endregion
<#      } #>
<#      if (td.IsIAppliedDiscountBase) { #>
        #region IAppliedDiscountBase
        /// <inheritdoc/>
        [JsonIgnore]
        IDiscountModel? IAppliedDiscountBaseModel.Discount { get => Slave; set => Slave = (DiscountModel?)value; }

        /// <inheritdoc/>
        [JsonIgnore]
        int IAppliedDiscountBaseModel.DiscountID { get => SlaveID; set => SlaveID = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAppliedDiscountBaseModel.DiscountKey { get => SlaveKey; set => SlaveKey = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IAppliedDiscountBaseModel.DiscountName { get => SlaveName; set => SlaveName = value; }

        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DiscountTypeID), DataType = "int", ParameterType = "body", IsRequired = false,
                Description = "The kind of Discount to apply (what it applies to).")]
        public int DiscountTypeID { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DiscountPriority), DataType = "int?", ParameterType = "body", IsRequired = false,
                Description = "The Priority of this discount (when determining applicable exclusive discounts, the highest priority wins).")]
        public int? DiscountPriority { get; set; }

        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DiscountValueType), DataType = "int", ParameterType = "body", IsRequired = false,
                Description = "The kind of value (0=Percentage, 1=Dollars).")]
        public int DiscountValueType { get; set; }

        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DiscountValue), DataType = "decimal", ParameterType = "body", IsRequired = false,
                Description = "The amount the Discount is allowed to apply.")]
        public decimal DiscountValue { get; set; }

        /// <inheritdoc/>
        [DefaultValue(false),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DiscountCanCombine), DataType = "bool", ParameterType = "body", IsRequired = true,
                Description = "Whether the discount is combinable.")]
        public bool DiscountCanCombine { get; set; }

        /// <inheritdoc/>
        [DefaultValue(false),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DiscountIsAutoApplied), DataType = "bool", ParameterType = "body", IsRequired = true,
                Description = "Whether the discount is automatically applied.")]
        public bool DiscountIsAutoApplied { get; set; }

        /// <inheritdoc/>
        [DefaultValue(0),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(DiscountTotal), DataType = "decimal", ParameterType = "body", IsRequired = true,
                Description = "The total amount of the discount applied.")]
        public decimal DiscountTotal { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(ApplicationsUsed), DataType = "decimal", ParameterType = "body", IsRequired = true,
                Description = "The number of applications used by this discount (in case it is applied to the same master more than once). If this value is null or less than one, it is assumed to have a value of 1")]
        public int? ApplicationsUsed { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(TargetApplicationsUsed), DataType = "decimal", ParameterType = "body", IsRequired = true,
                Description = "The number of target applications used by this discount (in case it is applied to the same master more than once). If this value is null or less than one, it is assumed to have a value of 1")]
        public int? TargetApplicationsUsed { get; set; }
        #endregion
<#      } #>
    }
}
<#      SaveOutput(group.Key.Replace("System", "Structure") + "\\" + theType.Name + "Model", "generated.cs");
    }
}
DeleteOldOutputs();
#>
