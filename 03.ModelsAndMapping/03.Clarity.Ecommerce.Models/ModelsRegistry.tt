<#@ template language="C#"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ import namespace="CodeGenerator"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var processedNames = new List<string>() { "Status", "Type", "State", "Report" };
#>// <autogenerated>
// <copyright file="DataModelRegistry.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the DataModel StructureMap 4 Registry to associate the interfaces with their concretes</summary>
// <remarks>This file was auto-generated by DataModelRegistry.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable UnusedMember.Global
#pragma warning disable 618
namespace Clarity.Ecommerce.Models
{
    using Interfaces.Models;
#if NET5_0_OR_GREATER
    using Lamar;
#else
    using StructureMap;
#endif

#if NET5_0_OR_GREATER
    /// <summary>The models registry.</summary>
    /// <seealso cref="ServiceRegistry"/>
    public class ModelsRegistry : ServiceRegistry
#else
    /// <summary>The models registry.</summary>
    /// <seealso cref="Registry"/>
    public class ModelsRegistry : Registry
#endif
    {
        /// <summary>Initializes a new instance of the Clarity.Ecommerce.Models.ModelsRegistry class.</summary>
        public ModelsRegistry()
        {
            For<IStatusModel>().Use<StatusModel>();
            For<IStatusSearchModel>().Use<StatusSearchModel>();
            For<ITypeModel>().Use<TypeModel>();
            For<ITypeSearchModel>().Use<TypeSearchModel>();
            For<IStateModel>().Use<StateModel>();
            For<IStateSearchModel>().Use<StateSearchModel>();
            For<ICartTotals>().Use<CartTotals>();
            For<IProductCategorySelectorModel>().Use<ProductCategorySelectorModel>();
            For<IPricingFactoryContextModel>().Use<PricingFactoryContextModel>();
            For<IStoreInventoryLocationsMatrixModel>().Use<StoreInventoryLocationsMatrixModel>();
<#  foreach (var group in tableClasses) { #>
            #region <#= group.Key.ToString() #>
<#      foreach (Type theType in group) {
            var name = HelpFunctions.SwapToModelType(theType.Name);
            var td = new TypeDeterminer(theType);
            var extraTypes1 = name == "SalesItemBase" ? "<IApplied" + theType.Name + "DiscountModel>" : "";
            var extraTypes2 = name == "SalesItemBase" ? "<IApplied" + theType.Name + "DiscountModel, Applied" + theType.Name + "DiscountModel>" : "";
            if (td.IsExcludedFromT4
                || processedNames.Contains(name + extraTypes1))
            {
                continue;
            }
            processedNames.Add(name + extraTypes1); #>
            For<I<#= name #>Model<#= extraTypes1 #>>().Use<<#= name #>Model<#= extraTypes2 #>>();
            For<I<#= name #>SearchModel>().Use<<#= name #>SearchModel>();
<#      } #>
            #endregion
<#  }#>
        }
    }
}
