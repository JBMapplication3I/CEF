// <autogenerated>
// <copyright file="SampleRequestContactModel.generated.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Model Interfaces generated to provide base setups</summary>
// <remarks>This file was auto-generated by Models.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#pragma warning disable 618 // Ignore Obsolete warnings
#nullable enable
namespace Clarity.Ecommerce.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.Runtime.Serialization;
    using Interfaces.Models;
    using Newtonsoft.Json;
    using ServiceStack;

    /// <summary>A data transfer model for Sample Request Contact.</summary>
    public partial class SampleRequestContactModel
        : AmARelationshipTableBaseModel
            , ISampleRequestContactModel
    {
        #region IAmARelationshipTable<ISampleRequestModel,IContactModel>

        /// <inheritdoc/>
        public SampleRequestModel? Master { get; set; }

        /// <inheritdoc cref="IAmARelationshipTableBaseModel{IContactModel}.Slave"/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(Slave), DataType = "ContactModel?", ParameterType = "body", IsRequired = false,
                Description = "The Slave record (may only be partially mapped out).")]
        public ContactModel? Slave { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        IContactModel? IAmARelationshipTableBaseModel<IContactModel>.Slave { get => Slave; set => Slave = (ContactModel?)value; }
        #endregion
        #region IAmAContactRelationshipTable, IAmARelationshipTable<ISampleRequestModel, IContactModel>, IHaveAContactBaseModel
        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlavePhone), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The primary phone number of the contact.")]
        public string? SlavePhone { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveFax), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The fax number of the contact.")]
        public string? SlaveFax { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveEmail), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The email address of the contact.")]
        public string? SlaveEmail { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveFirstName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The first (given) name of the contact.")]
        public string? SlaveFirstName { get; set; }

        /// <inheritdoc/>
        [DefaultValue(null),
            DataMember(EmitDefaultValue = false),
            ApiMember(Name = nameof(SlaveLastName), DataType = "string", ParameterType = "body", IsRequired = false,
                Description = "The last (family) name of the contact.")]
        public string? SlaveLastName { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        int IHaveAContactBaseModel.ContactID { get => SlaveID; set => SlaveID = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactKey { get => SlaveKey; set => SlaveKey = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactPhone { get => SlavePhone; set => SlavePhone = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactFax { get => SlaveFax; set => SlaveFax = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactEmail { get => SlaveEmail; set => SlaveEmail = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactFirstName { get => SlaveFirstName; set => SlaveFirstName = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        string? IHaveAContactBaseModel.ContactLastName { get => SlaveLastName; set => SlaveLastName = value; }

        /// <inheritdoc/>
        [JsonIgnore]
        IContactModel? IHaveAContactBaseModel.Contact { get => Slave; set => Slave = (ContactModel?)value; }
        #endregion
    }
}
