<#@ template language="C#" #><#@
assembly name="System" #><#@
assembly name="System.Core" #><#@
assembly name="System.ComponentModel.DataAnnotations" #><#@
assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll" #><#@
assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel.Net5\bin\Debug\net5.0\Clarity.Ecommerce.DataModel.Net5.dll" #><#@
assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net5.0\CodeGenerator.dll" #><#@
import namespace="System.Collections.Generic" #><#@
import namespace="System.ComponentModel.DataAnnotations" #><#@
import namespace="System.ComponentModel.DataAnnotations.Schema" #><#@
import namespace="System.Data.Entity" #><#@
import namespace="System.Linq" #><#@
import namespace="System.Reflection" #><#@
import namespace="System.Runtime.InteropServices" #><#@
import namespace="System.Text" #><#@
import namespace="Clarity.Ecommerce.DataModel" #><#@
import namespace="CodeGenerator" #><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
#>// <autogenerated>
// <copyright file="DefaultData.Identity.Permissions.cs" company="clarity-ventures.com">
// Copyright (c) 2019-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Permissions that should be seeded with identity data</summary>
// <remarks>This file was auto-generated by DefaultData.Identity.Permissions.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable StringLiteralTypo
#nullable enable
#if ORACLE
namespace Clarity.Ecommerce.DataModel.Oracle.DataSets
#else
namespace Clarity.Ecommerce.DataModel.DataSets
#endif
{
    using System.Collections.Generic;

    /// <summary>An identity data.</summary>
    public partial class IdentityData
    {
        private static IEnumerable<string> AdminPerms { get; } = new List<string>
        {
            // Admin UI
            "Admin.Home",
            "Admin.Accounts.Accounts",
            "Admin.Accounts.Badges",
            "Admin.Accounts.Brands",
            "Admin.Accounts.Franchises",
            "Admin.Accounts.Discounts",
            "Admin.Accounts.Reviews",
            "Admin.Accounts.Roles",
            "Admin.Accounts.PriceRules",
            "Admin.Accounts.SiteDomains",
            "Admin.Accounts.SocialProviders",
            "Admin.Accounts.Stores",
            "Admin.Accounts.Subscriptions",
            "Admin.Accounts.Memberships",
            "Admin.Accounts.Users",
            "Admin.Inventory.Attributes",
            "Admin.Inventory.Categories",
            "Admin.Inventory.Manufacturers",
            "Admin.Inventory.Products",
            "Admin.Inventory.PurchaseOrders",
            "Admin.Inventory.Vendors",
            "Admin.Inventory.Warehouses",
            "Admin.Inventory.SubscriptionTypes",
            "Admin.Inventory.MembershipTypes",
            "Admin.Sales.SalesGroups",
            "Admin.Sales.Payments",
            "Admin.Sales.SalesInvoices",
            "Admin.Sales.SalesOrders",
            "Admin.Sales.SalesReturns",
            "Admin.Sales.SalesReturnReasons",
            "Admin.Sales.SalesQuotes",
            "Admin.Sales.SampleRequests",
            "Admin.Sales.PurchaseOrders",
            "Admin.Shipping.CarrierAccounts",
            "Admin.Shipping.Packages",
            "Admin.System.Settings",
            "Admin.System.EmailQueues",
            "Admin.System.EmailTemplates",
            "Admin.System.Currencies",
            "Admin.System.Languages",
            "Admin.System.SystemLogs",
            "Admin.System.UiKeys",
            "Admin.System.UiTranslations",
            "Admin.System.ImportExportMappings",
            "Admin.System.ClarityConnect",
            "Admin.System.Reports.Designer",
            "Admin.System.Reports.Loader",
            "Admin.System.APIReference",
            "Admin.System.ScheduledTasks",
            "Admin.System.SiteMaintenance",
            // Types
            "Admin.Types",
            "Admin.Types.Create",
            "Admin.Types.Update",
            "Admin.Types.View",
            "Admin.Types.Deactivate",
            "Admin.Types.Reactivate",
            "Admin.Types.Delete",
            "Admin.Types.Types",
<#  foreach (var group in tableClasses) { #>
<#      foreach (var theType in group.Where(x => x.GetInterfaces().Any(y => y.Name == "ITypableBase"))) {
            if (!theType.Name.Contains("Type")) { continue; } #>
            "Admin.Types.<#= HelpFunctions.PluralizeName(theType.Name) #>",
<#      } #>
<#  }#>
            // Statuses
            "Admin.Statuses",
            "Admin.Statuses.Create",
            "Admin.Statuses.Update",
            "Admin.Statuses.View",
            "Admin.Statuses.Deactivate",
            "Admin.Statuses.Reactivate",
            "Admin.Statuses.Delete",
            "Admin.Statuses.Statuses",
<#  foreach (var group in tableClasses) { #>
<#      foreach (var theType in group.Where(x => x.GetInterfaces().Any(y => y.Name == "IStatusableBase"))) {
            if (!theType.Name.Contains("Status")) { continue; } #>
            "Admin.Statuses.<#= HelpFunctions.PluralizeName(theType.Name) #>",
<#      } #>
<#  }#>
            // States
            "Admin.States",
            "Admin.States.Create",
            "Admin.States.Update",
            "Admin.States.View",
            "Admin.States.Deactivate",
            "Admin.States.Reactivate",
            "Admin.States.Delete",
            "Admin.States.States",
<#  foreach (var group in tableClasses) { #>
<#      foreach (var theType in group.Where(x => x.GetInterfaces().Any(y => y.Name == "IStateableBase"))) {
            if (!theType.Name.Contains("State")) { continue; } #>
            "Admin.States.<#= HelpFunctions.PluralizeName(theType.Name) #>",
<#      } #>
<#  }#>
            // Other
<#  foreach (var group in tableClasses) { #>
<#      foreach (var theType in group.Where(x => x.GetInterfaces()
                  .Any(y => y.Name == "ITypableBase" || y.Name == "IStatusableBase" || y.Name == "IStateableBase"))) {
            bool isType = theType.Name.Contains("Type");
            bool isStatus = theType.Name.Contains("Status");
            bool isState = theType.Name.Contains("State");
            bool isOther = !(isType || isStatus || isState);
            if (!isOther) { continue; } #>
            "Admin.Types.<#= HelpFunctions.PluralizeName(theType.Name) #>",
<#      } #>
<#  }#>
            // Entity Access
            "Contacts.Role.Create",
            "Contacts.Role.Update",
            "Contacts.Role.View",
            "Contacts.Role.Deactivate",
            "Contacts.Role.Reactivate",
            "Contacts.Role.Delete",
<#  foreach (var group in tableClasses) { #>
<#      foreach (var theType in group) { #>
            "<#= group.Key #>.<#= theType.Name #>.Create",
            "<#= group.Key #>.<#= theType.Name #>.Update",
            "<#= group.Key #>.<#= theType.Name #>.View",
            "<#= group.Key #>.<#= theType.Name #>.Deactivate",
            "<#= group.Key #>.<#= theType.Name #>.Reactivate",
            "<#= group.Key #>.<#= theType.Name #>.Delete",
<#      } #>
<#      if (group.Key == "System") { #>
<#          foreach (var theType in group) { #>
            "Structure.<#= theType.Name #>.Create",
            "Structure.<#= theType.Name #>.Update",
            "Structure.<#= theType.Name #>.View",
            "Structure.<#= theType.Name #>.Deactivate",
            "Structure.<#= theType.Name #>.Reactivate",
            "Structure.<#= theType.Name #>.Delete",
<#          } #>
<#      } #>
<#  }#>
        };
    }
}
