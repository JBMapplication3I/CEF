// <autogenerated>
// <copyright file="DataModelContext.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the IClarityEcommerceEntities interface and Concrete classes with all of the tables listed</summary>
// <remarks>This file was auto-generated by DataModelContext.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable MissingXmlDoc, UnusedMember.Global
#nullable enable
#pragma warning disable 618
namespace Clarity.Ecommerce.Interfaces.DataModel
{
    using System.Data.Entity;
    using Ecommerce.DataModel;

    public interface IClarityEcommerceEntities : IDbContext
    {
        string? ContextProfileName { get; set; }
        #region Accounts
        IDbSet<Account> Accounts { get; set; }
        IDbSet<AccountAssociation> AccountAssociations { get; set; }
        IDbSet<AccountAssociationType> AccountAssociationTypes { get; set; }
        IDbSet<AccountContact> AccountContacts { get; set; }
        IDbSet<AccountCurrency> AccountCurrencies { get; set; }
        IDbSet<AccountFile> AccountFiles { get; set; }
        IDbSet<AccountImage> AccountImages { get; set; }
        IDbSet<AccountImageType> AccountImageTypes { get; set; }
        IDbSet<AccountPricePoint> AccountPricePoints { get; set; }
        IDbSet<AccountProduct> AccountProducts { get; set; }
        IDbSet<AccountProductType> AccountProductTypes { get; set; }
        IDbSet<AccountStatus> AccountStatuses { get; set; }
        IDbSet<AccountType> AccountTypes { get; set; }
        IDbSet<AccountUsageBalance> AccountUsageBalances { get; set; }
        IDbSet<AccountUserRole> AccountUserRoles { get; set; }
        IDbSet<Contractor> Contractors { get; set; }
        IDbSet<ServiceArea> ServiceAreas { get; set; }
        #endregion
        #region Advertising
        IDbSet<Ad> Ads { get; set; }
        IDbSet<AdAccount> AdAccounts { get; set; }
        IDbSet<AdBrand> AdBrands { get; set; }
        IDbSet<AdFranchise> AdFranchises { get; set; }
        IDbSet<AdImage> AdImages { get; set; }
        IDbSet<AdImageType> AdImageTypes { get; set; }
        IDbSet<AdStatus> AdStatuses { get; set; }
        IDbSet<AdStore> AdStores { get; set; }
        IDbSet<AdType> AdTypes { get; set; }
        IDbSet<AdZone> AdZones { get; set; }
        IDbSet<AdZoneAccess> AdZoneAccesses { get; set; }
        IDbSet<Zone> Zones { get; set; }
        IDbSet<ZoneStatus> ZoneStatuses { get; set; }
        IDbSet<ZoneType> ZoneTypes { get; set; }
        #endregion
        #region Attributes
        IDbSet<AttributeGroup> AttributeGroups { get; set; }
        IDbSet<AttributeTab> AttributeTabs { get; set; }
        IDbSet<AttributeType> AttributeTypes { get; set; }
        IDbSet<GeneralAttribute> GeneralAttributes { get; set; }
        IDbSet<GeneralAttributePredefinedOption> GeneralAttributePredefinedOptions { get; set; }
        #endregion
        #region Auctions
        IDbSet<Auction> Auctions { get; set; }
        IDbSet<AuctionCategory> AuctionCategories { get; set; }
        IDbSet<AuctionStatus> AuctionStatuses { get; set; }
        IDbSet<AuctionType> AuctionTypes { get; set; }
        IDbSet<Bid> Bids { get; set; }
        IDbSet<BidStatus> BidStatuses { get; set; }
        IDbSet<BrandAuction> BrandAuctions { get; set; }
        IDbSet<FranchiseAuction> FranchiseAuctions { get; set; }
        IDbSet<Lot> Lots { get; set; }
        IDbSet<LotCategory> LotCategories { get; set; }
        IDbSet<LotGroup> LotGroups { get; set; }
        IDbSet<LotStatus> LotStatuses { get; set; }
        IDbSet<LotType> LotTypes { get; set; }
        IDbSet<StoreAuction> StoreAuctions { get; set; }
        #endregion
        #region Badges
        IDbSet<Badge> Badges { get; set; }
        IDbSet<BadgeImage> BadgeImages { get; set; }
        IDbSet<BadgeImageType> BadgeImageTypes { get; set; }
        IDbSet<BadgeType> BadgeTypes { get; set; }
        #endregion
        #region Brands
        IDbSet<Brand> Brands { get; set; }
        IDbSet<BrandAccount> BrandAccounts { get; set; }
        IDbSet<BrandCategory> BrandCategories { get; set; }
        IDbSet<BrandCurrency> BrandCurrencies { get; set; }
        IDbSet<BrandFranchise> BrandFranchises { get; set; }
        IDbSet<BrandImage> BrandImages { get; set; }
        IDbSet<BrandImageType> BrandImageTypes { get; set; }
        IDbSet<BrandInventoryLocation> BrandInventoryLocations { get; set; }
        IDbSet<BrandInventoryLocationType> BrandInventoryLocationTypes { get; set; }
        IDbSet<BrandLanguage> BrandLanguages { get; set; }
        IDbSet<BrandManufacturer> BrandManufacturers { get; set; }
        IDbSet<BrandProduct> BrandProducts { get; set; }
        IDbSet<BrandSiteDomain> BrandSiteDomains { get; set; }
        IDbSet<BrandStore> BrandStores { get; set; }
        IDbSet<BrandUser> BrandUsers { get; set; }
        IDbSet<BrandVendor> BrandVendors { get; set; }
        #endregion
        #region CalendarEvents
        IDbSet<CalendarEvent> CalendarEvents { get; set; }
        IDbSet<CalendarEventDetail> CalendarEventDetails { get; set; }
        IDbSet<CalendarEventFile> CalendarEventFiles { get; set; }
        IDbSet<CalendarEventImage> CalendarEventImages { get; set; }
        IDbSet<CalendarEventImageType> CalendarEventImageTypes { get; set; }
        IDbSet<CalendarEventProduct> CalendarEventProducts { get; set; }
        IDbSet<CalendarEventStatus> CalendarEventStatuses { get; set; }
        IDbSet<CalendarEventType> CalendarEventTypes { get; set; }
        IDbSet<UserEventAttendance> UserEventAttendances { get; set; }
        IDbSet<UserEventAttendanceType> UserEventAttendanceTypes { get; set; }
        #endregion
        #region Categories
        IDbSet<Category> Categories { get; set; }
        IDbSet<CategoryFile> CategoryFiles { get; set; }
        IDbSet<CategoryImage> CategoryImages { get; set; }
        IDbSet<CategoryImageType> CategoryImageTypes { get; set; }
        IDbSet<CategoryType> CategoryTypes { get; set; }
        #endregion
        #region Contacts
        IDbSet<Contact> Contacts { get; set; }
        IDbSet<ContactImage> ContactImages { get; set; }
        IDbSet<ContactImageType> ContactImageTypes { get; set; }
        IDbSet<ContactType> ContactTypes { get; set; }
        IDbSet<Permission> Permissions { get; set; }
        IDbSet<ProfanityFilter> ProfanityFilters { get; set; }
        IDbSet<ReferralCode> ReferralCodes { get; set; }
        IDbSet<ReferralCodeStatus> ReferralCodeStatuses { get; set; }
        IDbSet<ReferralCodeType> ReferralCodeTypes { get; set; }
        IDbSet<RolePermission> RolePermissions { get; set; }
        IDbSet<RoleUser> RoleUsers { get; set; }
        IDbSet<User> Users { get; set; }
        IDbSet<UserClaim> UserClaims { get; set; }
        IDbSet<UserFile> UserFiles { get; set; }
        IDbSet<UserImage> UserImages { get; set; }
        IDbSet<UserImageType> UserImageTypes { get; set; }
        IDbSet<UserLogin> UserLogins { get; set; }
        IDbSet<UserOnlineStatus> UserOnlineStatuses { get; set; }
        IDbSet<UserProductType> UserProductTypes { get; set; }
        IDbSet<UserRole> Roles { get; set; }
        IDbSet<UserStatus> UserStatuses { get; set; }
        IDbSet<UserType> UserTypes { get; set; }
        #endregion
        #region Counters
        IDbSet<Counter> Counters { get; set; }
        IDbSet<CounterLog> CounterLogs { get; set; }
        IDbSet<CounterLogType> CounterLogTypes { get; set; }
        IDbSet<CounterType> CounterTypes { get; set; }
        #endregion
        #region Currencies
        IDbSet<Currency> Currencies { get; set; }
        IDbSet<CurrencyConversion> CurrencyConversions { get; set; }
        IDbSet<CurrencyImage> CurrencyImages { get; set; }
        IDbSet<CurrencyImageType> CurrencyImageTypes { get; set; }
        IDbSet<HistoricalCurrencyRate> HistoricalCurrencyRates { get; set; }
        #endregion
        #region Discounts
        IDbSet<AppliedCartDiscount> AppliedCartDiscounts { get; set; }
        IDbSet<AppliedCartItemDiscount> AppliedCartItemDiscounts { get; set; }
        IDbSet<Discount> Discounts { get; set; }
        IDbSet<DiscountAccount> DiscountAccounts { get; set; }
        IDbSet<DiscountAccountType> DiscountAccountTypes { get; set; }
        IDbSet<DiscountBrand> DiscountBrands { get; set; }
        IDbSet<DiscountCategory> DiscountCategories { get; set; }
        IDbSet<DiscountCode> DiscountCodes { get; set; }
        IDbSet<DiscountCountry> DiscountCountries { get; set; }
        IDbSet<DiscountFranchise> DiscountFranchises { get; set; }
        IDbSet<DiscountManufacturer> DiscountManufacturers { get; set; }
        IDbSet<DiscountProduct> DiscountProducts { get; set; }
        IDbSet<DiscountProductType> DiscountProductTypes { get; set; }
        IDbSet<DiscountShipCarrierMethod> DiscountShipCarrierMethods { get; set; }
        IDbSet<DiscountStore> DiscountStores { get; set; }
        IDbSet<DiscountUser> DiscountUsers { get; set; }
        IDbSet<DiscountUserRole> DiscountUserRoles { get; set; }
        IDbSet<DiscountVendor> DiscountVendors { get; set; }
        IDbSet<AppliedPurchaseOrderDiscount> AppliedPurchaseOrderDiscounts { get; set; }
        IDbSet<AppliedPurchaseOrderItemDiscount> AppliedPurchaseOrderItemDiscounts { get; set; }
        IDbSet<AppliedSalesInvoiceDiscount> AppliedSalesInvoiceDiscounts { get; set; }
        IDbSet<AppliedSalesInvoiceItemDiscount> AppliedSalesInvoiceItemDiscounts { get; set; }
        IDbSet<AppliedSalesOrderDiscount> AppliedSalesOrderDiscounts { get; set; }
        IDbSet<AppliedSalesOrderItemDiscount> AppliedSalesOrderItemDiscounts { get; set; }
        IDbSet<AppliedSalesQuoteDiscount> AppliedSalesQuoteDiscounts { get; set; }
        IDbSet<AppliedSalesQuoteItemDiscount> AppliedSalesQuoteItemDiscounts { get; set; }
        IDbSet<AppliedSalesReturnDiscount> AppliedSalesReturnDiscounts { get; set; }
        IDbSet<AppliedSalesReturnItemDiscount> AppliedSalesReturnItemDiscounts { get; set; }
        IDbSet<AppliedSampleRequestDiscount> AppliedSampleRequestDiscounts { get; set; }
        IDbSet<AppliedSampleRequestItemDiscount> AppliedSampleRequestItemDiscounts { get; set; }
        #endregion
        #region Favorites
        IDbSet<FavoriteCategory> FavoriteCategories { get; set; }
        IDbSet<FavoriteManufacturer> FavoriteManufacturers { get; set; }
        IDbSet<FavoriteShipCarrier> FavoriteShipCarriers { get; set; }
        IDbSet<FavoriteStore> FavoriteStores { get; set; }
        IDbSet<FavoriteVendor> FavoriteVendors { get; set; }
        #endregion
        #region Franchises
        IDbSet<Franchise> Franchises { get; set; }
        IDbSet<FranchiseAccount> FranchiseAccounts { get; set; }
        IDbSet<FranchiseCategory> FranchiseCategories { get; set; }
        IDbSet<FranchiseCountry> FranchiseCountries { get; set; }
        IDbSet<FranchiseCurrency> FranchiseCurrencies { get; set; }
        IDbSet<FranchiseDistrict> FranchiseDistricts { get; set; }
        IDbSet<FranchiseImage> FranchiseImages { get; set; }
        IDbSet<FranchiseImageType> FranchiseImageTypes { get; set; }
        IDbSet<FranchiseInventoryLocation> FranchiseInventoryLocations { get; set; }
        IDbSet<FranchiseInventoryLocationType> FranchiseInventoryLocationTypes { get; set; }
        IDbSet<FranchiseLanguage> FranchiseLanguages { get; set; }
        IDbSet<FranchiseManufacturer> FranchiseManufacturers { get; set; }
        IDbSet<FranchiseProduct> FranchiseProducts { get; set; }
        IDbSet<FranchiseRegion> FranchiseRegions { get; set; }
        IDbSet<FranchiseSiteDomain> FranchiseSiteDomains { get; set; }
        IDbSet<FranchiseStore> FranchiseStores { get; set; }
        IDbSet<FranchiseType> FranchiseTypes { get; set; }
        IDbSet<FranchiseUser> FranchiseUsers { get; set; }
        IDbSet<FranchiseVendor> FranchiseVendors { get; set; }
        #endregion
        #region Geography
        IDbSet<Address> Addresses { get; set; }
        IDbSet<Country> Countries { get; set; }
        IDbSet<CountryCurrency> CountryCurrencies { get; set; }
        IDbSet<CountryImage> CountryImages { get; set; }
        IDbSet<CountryImageType> CountryImageTypes { get; set; }
        IDbSet<CountryLanguage> CountryLanguages { get; set; }
        IDbSet<District> Districts { get; set; }
        IDbSet<DistrictCurrency> DistrictCurrencies { get; set; }
        IDbSet<DistrictImage> DistrictImages { get; set; }
        IDbSet<DistrictImageType> DistrictImageTypes { get; set; }
        IDbSet<DistrictLanguage> DistrictLanguages { get; set; }
        IDbSet<HistoricalAddressValidation> HistoricalAddressValidations { get; set; }
        IDbSet<PhonePrefixLookup> PhonePrefixLookups { get; set; }
        IDbSet<Region> Regions { get; set; }
        IDbSet<RegionCurrency> RegionCurrencies { get; set; }
        IDbSet<RegionImage> RegionImages { get; set; }
        IDbSet<RegionImageType> RegionImageTypes { get; set; }
        IDbSet<RegionLanguage> RegionLanguages { get; set; }
        IDbSet<ZipCode> ZipCodes { get; set; }
        #endregion
        #region Globalization
        IDbSet<Language> Languages { get; set; }
        IDbSet<LanguageImage> LanguageImages { get; set; }
        IDbSet<LanguageImageType> LanguageImageTypes { get; set; }
        IDbSet<UiKey> UiKeys { get; set; }
        IDbSet<UiTranslation> UiTranslations { get; set; }
        #endregion
        #region Groups
        IDbSet<Group> Groups { get; set; }
        IDbSet<GroupStatus> GroupStatuses { get; set; }
        IDbSet<GroupType> GroupTypes { get; set; }
        IDbSet<GroupUser> GroupUsers { get; set; }
        #endregion
        #region Hangfire
        IDbSet<HangfireAggregatedCounter> HangfireAggregatedCounters { get; set; }
        IDbSet<HangfireCounter> HangfireCounters { get; set; }
        IDbSet<HangfireHash> HangfireHashes { get; set; }
        IDbSet<HangfireJob> HangfireJobs { get; set; }
        IDbSet<HangfireJobParameter> HangfireJobParameters { get; set; }
        IDbSet<HangfireJobQueue> HangfireJobQueues { get; set; }
        IDbSet<HangfireList> HangfireLists { get; set; }
        IDbSet<ScheduledJobConfiguration> ScheduledJobConfigurations { get; set; }
        IDbSet<ScheduledJobConfigurationSetting> ScheduledJobConfigurationSettings { get; set; }
        IDbSet<HangfireSchema> HangfireSchemas { get; set; }
        IDbSet<HangfireServer> HangfireServers { get; set; }
        IDbSet<HangfireSet> HangfireSets { get; set; }
        IDbSet<HangfireState> HangfireStates { get; set; }
        #endregion
        #region Inventory
        IDbSet<InventoryLocation> InventoryLocations { get; set; }
        IDbSet<InventoryLocationRegion> InventoryLocationRegions { get; set; }
        IDbSet<InventoryLocationSection> InventoryLocationSections { get; set; }
        IDbSet<InventoryLocationUser> InventoryLocationUsers { get; set; }
        #endregion
        #region Invoicing
        IDbSet<SalesInvoice> SalesInvoices { get; set; }
        IDbSet<SalesInvoiceContact> SalesInvoiceContacts { get; set; }
        IDbSet<SalesInvoiceEvent> SalesInvoiceEvents { get; set; }
        IDbSet<SalesInvoiceEventType> SalesInvoiceEventTypes { get; set; }
        IDbSet<SalesInvoiceFile> SalesInvoiceFiles { get; set; }
        IDbSet<SalesInvoiceItem> SalesInvoiceItems { get; set; }
        IDbSet<SalesInvoiceItemTarget> SalesInvoiceItemTargets { get; set; }
        IDbSet<SalesInvoiceState> SalesInvoiceStates { get; set; }
        IDbSet<SalesInvoiceStatus> SalesInvoiceStatuses { get; set; }
        IDbSet<SalesInvoiceType> SalesInvoiceTypes { get; set; }
        IDbSet<SalesOrderSalesInvoice> SalesOrderSalesInvoices { get; set; }
        #endregion
        #region Manufacturers
        IDbSet<Manufacturer> Manufacturers { get; set; }
        IDbSet<ManufacturerImage> ManufacturerImages { get; set; }
        IDbSet<ManufacturerImageType> ManufacturerImageTypes { get; set; }
        IDbSet<ManufacturerProduct> ManufacturerProducts { get; set; }
        IDbSet<ManufacturerType> ManufacturerTypes { get; set; }
        #endregion
        #region Media
        IDbSet<StoredFile> StoredFiles { get; set; }
        #endregion
        #region Messaging
        IDbSet<Conversation> Conversations { get; set; }
        IDbSet<ConversationUser> ConversationUsers { get; set; }
        IDbSet<EmailQueue> EmailQueues { get; set; }
        IDbSet<EmailQueueAttachment> EmailQueueAttachments { get; set; }
        IDbSet<EmailStatus> EmailStatuses { get; set; }
        IDbSet<EmailTemplate> EmailTemplates { get; set; }
        IDbSet<EmailType> EmailTypes { get; set; }
        IDbSet<Message> Messages { get; set; }
        IDbSet<MessageAttachment> MessageAttachments { get; set; }
        IDbSet<MessageRecipient> MessageRecipients { get; set; }
        IDbSet<ProductNotification> ProductNotifications { get; set; }
        IDbSet<UserSupportRequest> UserSupportRequests { get; set; }
        #endregion
        #region Ordering
        IDbSet<SalesOrder> SalesOrders { get; set; }
        IDbSet<SalesOrderContact> SalesOrderContacts { get; set; }
        IDbSet<SalesOrderEvent> SalesOrderEvents { get; set; }
        IDbSet<SalesOrderEventType> SalesOrderEventTypes { get; set; }
        IDbSet<SalesOrderFile> SalesOrderFiles { get; set; }
        IDbSet<SalesOrderItem> SalesOrderItems { get; set; }
        IDbSet<SalesOrderItemTarget> SalesOrderItemTargets { get; set; }
        IDbSet<SalesOrderState> SalesOrderStates { get; set; }
        IDbSet<SalesOrderStatus> SalesOrderStatuses { get; set; }
        IDbSet<SalesOrderType> SalesOrderTypes { get; set; }
        #endregion
        #region Payments
        IDbSet<Membership> Memberships { get; set; }
        IDbSet<MembershipAdZoneAccess> MembershipAdZoneAccesses { get; set; }
        IDbSet<MembershipAdZoneAccessByLevel> MembershipAdZoneAccessByLevels { get; set; }
        IDbSet<MembershipLevel> MembershipLevels { get; set; }
        IDbSet<MembershipRepeatType> MembershipRepeatTypes { get; set; }
        IDbSet<Payment> Payments { get; set; }
        IDbSet<PaymentMethod> PaymentMethods { get; set; }
        IDbSet<PaymentStatus> PaymentStatuses { get; set; }
        IDbSet<PaymentType> PaymentTypes { get; set; }
        IDbSet<RepeatType> RepeatTypes { get; set; }
        IDbSet<SalesInvoicePayment> SalesInvoicePayments { get; set; }
        IDbSet<SalesOrderPayment> SalesOrderPayments { get; set; }
        IDbSet<SalesReturnPayment> SalesReturnPayments { get; set; }
        IDbSet<Subscription> Subscriptions { get; set; }
        IDbSet<SubscriptionHistory> SubscriptionHistories { get; set; }
        IDbSet<SubscriptionStatus> SubscriptionStatuses { get; set; }
        IDbSet<SubscriptionType> SubscriptionTypes { get; set; }
        IDbSet<SubscriptionTypeRepeatType> SubscriptionTypeRepeatTypes { get; set; }
        IDbSet<Wallet> Wallets { get; set; }
        #endregion
        #region Pricing
        IDbSet<PricePoint> PricePoints { get; set; }
        IDbSet<PriceRounding> PriceRoundings { get; set; }
        IDbSet<PriceRule> PriceRules { get; set; }
        IDbSet<PriceRuleAccount> PriceRuleAccounts { get; set; }
        IDbSet<PriceRuleAccountType> PriceRuleAccountTypes { get; set; }
        IDbSet<PriceRuleBrand> PriceRuleBrands { get; set; }
        IDbSet<PriceRuleCategory> PriceRuleCategories { get; set; }
        IDbSet<PriceRuleCountry> PriceRuleCountries { get; set; }
        IDbSet<PriceRuleFranchise> PriceRuleFranchises { get; set; }
        IDbSet<PriceRuleManufacturer> PriceRuleManufacturers { get; set; }
        IDbSet<PriceRuleProduct> PriceRuleProducts { get; set; }
        IDbSet<PriceRuleProductType> PriceRuleProductTypes { get; set; }
        IDbSet<PriceRuleStore> PriceRuleStores { get; set; }
        IDbSet<PriceRuleUserRole> PriceRuleUserRoles { get; set; }
        IDbSet<PriceRuleVendor> PriceRuleVendors { get; set; }
        #endregion
        #region Products
        IDbSet<FutureImport> FutureImports { get; set; }
        IDbSet<FutureImportStatus> FutureImportStatuses { get; set; }
        IDbSet<Product> Products { get; set; }
        IDbSet<ProductAssociation> ProductAssociations { get; set; }
        IDbSet<ProductAssociationType> ProductAssociationTypes { get; set; }
        IDbSet<ProductCategory> ProductCategories { get; set; }
        IDbSet<ProductDownload> ProductDownloads { get; set; }
        IDbSet<ProductDownloadType> ProductDownloadTypes { get; set; }
        IDbSet<ProductFile> ProductFiles { get; set; }
        IDbSet<ProductImage> ProductImages { get; set; }
        IDbSet<ProductImageType> ProductImageTypes { get; set; }
        IDbSet<ProductInventoryLocationSection> ProductInventoryLocationSections { get; set; }
        IDbSet<ProductMembershipLevel> ProductMembershipLevels { get; set; }
        IDbSet<ProductPricePoint> ProductPricePoints { get; set; }
        IDbSet<ProductRestriction> ProductRestrictions { get; set; }
        IDbSet<ProductShipCarrierMethod> ProductShipCarrierMethods { get; set; }
        IDbSet<ProductStatus> ProductStatuses { get; set; }
        IDbSet<ProductSubscriptionType> ProductSubscriptionTypes { get; set; }
        IDbSet<ProductType> ProductTypes { get; set; }
        #endregion
        #region Purchasing
        IDbSet<PurchaseOrder> PurchaseOrders { get; set; }
        IDbSet<PurchaseOrderContact> PurchaseOrderContacts { get; set; }
        IDbSet<PurchaseOrderEvent> PurchaseOrderEvents { get; set; }
        IDbSet<PurchaseOrderEventType> PurchaseOrderEventTypes { get; set; }
        IDbSet<PurchaseOrderFile> PurchaseOrderFiles { get; set; }
        IDbSet<PurchaseOrderItem> PurchaseOrderItems { get; set; }
        IDbSet<PurchaseOrderItemTarget> PurchaseOrderItemTargets { get; set; }
        IDbSet<PurchaseOrderState> PurchaseOrderStates { get; set; }
        IDbSet<PurchaseOrderStatus> PurchaseOrderStatuses { get; set; }
        IDbSet<PurchaseOrderType> PurchaseOrderTypes { get; set; }
        IDbSet<SalesOrderPurchaseOrder> SalesOrderPurchaseOrders { get; set; }
        #endregion
        #region Questionnaire
        IDbSet<Answer> Answers { get; set; }
        IDbSet<Question> Questions { get; set; }
        IDbSet<QuestionOption> QuestionOptions { get; set; }
        IDbSet<QuestionType> QuestionTypes { get; set; }
        #endregion
        #region Quoting
        IDbSet<SalesQuote> SalesQuotes { get; set; }
        IDbSet<SalesQuoteCategory> SalesQuoteCategories { get; set; }
        IDbSet<SalesQuoteContact> SalesQuoteContacts { get; set; }
        IDbSet<SalesQuoteEvent> SalesQuoteEvents { get; set; }
        IDbSet<SalesQuoteEventType> SalesQuoteEventTypes { get; set; }
        IDbSet<SalesQuoteFile> SalesQuoteFiles { get; set; }
        IDbSet<SalesQuoteItem> SalesQuoteItems { get; set; }
        IDbSet<SalesQuoteItemTarget> SalesQuoteItemTargets { get; set; }
        IDbSet<SalesQuoteSalesOrder> SalesQuoteSalesOrders { get; set; }
        IDbSet<SalesQuoteState> SalesQuoteStates { get; set; }
        IDbSet<SalesQuoteStatus> SalesQuoteStatuses { get; set; }
        IDbSet<SalesQuoteType> SalesQuoteTypes { get; set; }
        #endregion
        #region Reporting
        IDbSet<Report> Reports { get; set; }
        IDbSet<ReportType> ReportTypes { get; set; }
        #endregion
        #region Returning
        IDbSet<SalesReturn> SalesReturns { get; set; }
        IDbSet<SalesReturnContact> SalesReturnContacts { get; set; }
        IDbSet<SalesReturnEvent> SalesReturnEvents { get; set; }
        IDbSet<SalesReturnEventType> SalesReturnEventTypes { get; set; }
        IDbSet<SalesReturnFile> SalesReturnFiles { get; set; }
        IDbSet<SalesReturnItem> SalesReturnItems { get; set; }
        IDbSet<SalesReturnItemTarget> SalesReturnItemTargets { get; set; }
        IDbSet<SalesReturnReason> SalesReturnReasons { get; set; }
        IDbSet<SalesReturnSalesOrder> SalesReturnSalesOrders { get; set; }
        IDbSet<SalesReturnState> SalesReturnStates { get; set; }
        IDbSet<SalesReturnStatus> SalesReturnStatuses { get; set; }
        IDbSet<SalesReturnType> SalesReturnTypes { get; set; }
        #endregion
        #region Reviews
        IDbSet<Review> Reviews { get; set; }
        IDbSet<ReviewType> ReviewTypes { get; set; }
        #endregion
        #region Sales
        IDbSet<SalesGroup> SalesGroups { get; set; }
        IDbSet<SalesItemTargetType> SalesItemTargetTypes { get; set; }
        #endregion
        #region Sampling
        IDbSet<SampleRequest> SampleRequests { get; set; }
        IDbSet<SampleRequestContact> SampleRequestContacts { get; set; }
        IDbSet<SampleRequestEvent> SampleRequestEvents { get; set; }
        IDbSet<SampleRequestEventType> SampleRequestEventTypes { get; set; }
        IDbSet<SampleRequestFile> SampleRequestFiles { get; set; }
        IDbSet<SampleRequestItem> SampleRequestItems { get; set; }
        IDbSet<SampleRequestItemTarget> SampleRequestItemTargets { get; set; }
        IDbSet<SampleRequestState> SampleRequestStates { get; set; }
        IDbSet<SampleRequestStatus> SampleRequestStatuses { get; set; }
        IDbSet<SampleRequestType> SampleRequestTypes { get; set; }
        #endregion
        #region Scheduling
        IDbSet<Appointment> Appointments { get; set; }
        IDbSet<AppointmentStatus> AppointmentStatuses { get; set; }
        IDbSet<AppointmentType> AppointmentTypes { get; set; }
        IDbSet<Calendar> Calendars { get; set; }
        IDbSet<CalendarAppointment> CalendarAppointments { get; set; }
        #endregion
        #region Scouting
        IDbSet<Scout> Scouts { get; set; }
        IDbSet<ScoutCategory> ScoutCategories { get; set; }
        IDbSet<ScoutCategoryType> ScoutCategoryTypes { get; set; }
        #endregion
        #region Shipping
        IDbSet<Package> Packages { get; set; }
        IDbSet<PackageType> PackageTypes { get; set; }
        IDbSet<RateQuote> RateQuotes { get; set; }
        IDbSet<ShipCarrier> ShipCarriers { get; set; }
        IDbSet<ShipCarrierMethod> ShipCarrierMethods { get; set; }
        IDbSet<Shipment> Shipments { get; set; }
        IDbSet<ShipmentEvent> ShipmentEvents { get; set; }
        IDbSet<ShipmentStatus> ShipmentStatuses { get; set; }
        IDbSet<ShipmentType> ShipmentTypes { get; set; }
        #endregion
        #region Shopping
        IDbSet<Cart> Carts { get; set; }
        IDbSet<CartContact> CartContacts { get; set; }
        IDbSet<CartEvent> CartEvents { get; set; }
        IDbSet<CartEventType> CartEventTypes { get; set; }
        IDbSet<CartFile> CartFiles { get; set; }
        IDbSet<CartItem> CartItems { get; set; }
        IDbSet<CartItemTarget> CartItemTargets { get; set; }
        IDbSet<CartState> CartStates { get; set; }
        IDbSet<CartStatus> CartStatuses { get; set; }
        IDbSet<CartType> CartTypes { get; set; }
        #endregion
        #region Stores
        IDbSet<SiteDomain> SiteDomains { get; set; }
        IDbSet<SiteDomainSocialProvider> SiteDomainSocialProviders { get; set; }
        IDbSet<SocialProvider> SocialProviders { get; set; }
        IDbSet<Store> Stores { get; set; }
        IDbSet<StoreAccount> StoreAccounts { get; set; }
        IDbSet<StoreBadge> StoreBadges { get; set; }
        IDbSet<StoreCategory> StoreCategories { get; set; }
        IDbSet<StoreContact> StoreContacts { get; set; }
        IDbSet<StoreCountry> StoreCountries { get; set; }
        IDbSet<StoreDistrict> StoreDistricts { get; set; }
        IDbSet<StoreImage> StoreImages { get; set; }
        IDbSet<StoreImageType> StoreImageTypes { get; set; }
        IDbSet<StoreInventoryLocation> StoreInventoryLocations { get; set; }
        IDbSet<StoreInventoryLocationType> StoreInventoryLocationTypes { get; set; }
        IDbSet<StoreManufacturer> StoreManufacturers { get; set; }
        IDbSet<StoreProduct> StoreProducts { get; set; }
        IDbSet<StoreRegion> StoreRegions { get; set; }
        IDbSet<StoreSubscription> StoreSubscriptions { get; set; }
        IDbSet<StoreType> StoreTypes { get; set; }
        IDbSet<StoreUser> StoreUsers { get; set; }
        IDbSet<StoreVendor> StoreVendors { get; set; }
        #endregion
        #region System
        IDbSet<ImportExportMapping> ImportExportMappings { get; set; }
        IDbSet<Note> Notes { get; set; }
        IDbSet<NoteType> NoteTypes { get; set; }
        IDbSet<RecordVersion> RecordVersions { get; set; }
        IDbSet<RecordVersionType> RecordVersionTypes { get; set; }
        IDbSet<Setting> Settings { get; set; }
        IDbSet<SettingGroup> SettingGroups { get; set; }
        IDbSet<SettingType> SettingTypes { get; set; }
        IDbSet<EventLog> EventLogs { get; set; }
        #endregion
        #region Tax
        IDbSet<HistoricalTaxRate> HistoricalTaxRates { get; set; }
        IDbSet<TaxCountry> TaxCountries { get; set; }
        IDbSet<TaxDistrict> TaxDistricts { get; set; }
        IDbSet<TaxRegion> TaxRegions { get; set; }
        #endregion
        #region Tracking
        IDbSet<Campaign> Campaigns { get; set; }
        IDbSet<CampaignAd> CampaignAds { get; set; }
        IDbSet<CampaignStatus> CampaignStatuses { get; set; }
        IDbSet<CampaignType> CampaignTypes { get; set; }
        IDbSet<Event> Events { get; set; }
        IDbSet<EventStatus> EventStatuses { get; set; }
        IDbSet<EventType> EventTypes { get; set; }
        IDbSet<IPOrganization> IPOrganizations { get; set; }
        IDbSet<IPOrganizationStatus> IPOrganizationStatuses { get; set; }
        IDbSet<PageView> PageViews { get; set; }
        IDbSet<PageViewEvent> PageViewEvents { get; set; }
        IDbSet<PageViewStatus> PageViewStatuses { get; set; }
        IDbSet<PageViewType> PageViewTypes { get; set; }
        IDbSet<Visit> Visits { get; set; }
        IDbSet<Visitor> Visitors { get; set; }
        IDbSet<VisitStatus> VisitStatuses { get; set; }
        #endregion
        #region Vendors
        IDbSet<Vendor> Vendors { get; set; }
        IDbSet<VendorAccount> VendorAccounts { get; set; }
        IDbSet<VendorImage> VendorImages { get; set; }
        IDbSet<VendorImageType> VendorImageTypes { get; set; }
        IDbSet<VendorManufacturer> VendorManufacturers { get; set; }
        IDbSet<VendorProduct> VendorProducts { get; set; }
        IDbSet<VendorType> VendorTypes { get; set; }
        #endregion
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System.Data.Entity;
    using Interfaces.DataModel;

    public partial class ClarityEcommerceEntities : IClarityEcommerceEntities
    {
        public virtual string? ContextProfileName { get; set; }
        #region Accounts
        public IDbSet<Account> Accounts { get; set; }
        public IDbSet<AccountAssociation> AccountAssociations { get; set; }
        public IDbSet<AccountAssociationType> AccountAssociationTypes { get; set; }
        public IDbSet<AccountContact> AccountContacts { get; set; }
        public IDbSet<AccountCurrency> AccountCurrencies { get; set; }
        public IDbSet<AccountFile> AccountFiles { get; set; }
        public IDbSet<AccountImage> AccountImages { get; set; }
        public IDbSet<AccountImageType> AccountImageTypes { get; set; }
        public IDbSet<AccountPricePoint> AccountPricePoints { get; set; }
        public IDbSet<AccountProduct> AccountProducts { get; set; }
        public IDbSet<AccountProductType> AccountProductTypes { get; set; }
        public IDbSet<AccountStatus> AccountStatuses { get; set; }
        public IDbSet<AccountType> AccountTypes { get; set; }
        public IDbSet<AccountUsageBalance> AccountUsageBalances { get; set; }
        public IDbSet<AccountUserRole> AccountUserRoles { get; set; }
        public IDbSet<Contractor> Contractors { get; set; }
        public IDbSet<ServiceArea> ServiceAreas { get; set; }
        #endregion
        #region Advertising
        public IDbSet<Ad> Ads { get; set; }
        public IDbSet<AdAccount> AdAccounts { get; set; }
        public IDbSet<AdBrand> AdBrands { get; set; }
        public IDbSet<AdFranchise> AdFranchises { get; set; }
        public IDbSet<AdImage> AdImages { get; set; }
        public IDbSet<AdImageType> AdImageTypes { get; set; }
        public IDbSet<AdStatus> AdStatuses { get; set; }
        public IDbSet<AdStore> AdStores { get; set; }
        public IDbSet<AdType> AdTypes { get; set; }
        public IDbSet<AdZone> AdZones { get; set; }
        public IDbSet<AdZoneAccess> AdZoneAccesses { get; set; }
        public IDbSet<Zone> Zones { get; set; }
        public IDbSet<ZoneStatus> ZoneStatuses { get; set; }
        public IDbSet<ZoneType> ZoneTypes { get; set; }
        #endregion
        #region Attributes
        public IDbSet<AttributeGroup> AttributeGroups { get; set; }
        public IDbSet<AttributeTab> AttributeTabs { get; set; }
        public IDbSet<AttributeType> AttributeTypes { get; set; }
        public IDbSet<GeneralAttribute> GeneralAttributes { get; set; }
        public IDbSet<GeneralAttributePredefinedOption> GeneralAttributePredefinedOptions { get; set; }
        #endregion
        #region Auctions
        public IDbSet<Auction> Auctions { get; set; }
        public IDbSet<AuctionCategory> AuctionCategories { get; set; }
        public IDbSet<AuctionStatus> AuctionStatuses { get; set; }
        public IDbSet<AuctionType> AuctionTypes { get; set; }
        public IDbSet<Bid> Bids { get; set; }
        public IDbSet<BidStatus> BidStatuses { get; set; }
        public IDbSet<BrandAuction> BrandAuctions { get; set; }
        public IDbSet<FranchiseAuction> FranchiseAuctions { get; set; }
        public IDbSet<Lot> Lots { get; set; }
        public IDbSet<LotCategory> LotCategories { get; set; }
        public IDbSet<LotGroup> LotGroups { get; set; }
        public IDbSet<LotStatus> LotStatuses { get; set; }
        public IDbSet<LotType> LotTypes { get; set; }
        public IDbSet<StoreAuction> StoreAuctions { get; set; }
        #endregion
        #region Badges
        public IDbSet<Badge> Badges { get; set; }
        public IDbSet<BadgeImage> BadgeImages { get; set; }
        public IDbSet<BadgeImageType> BadgeImageTypes { get; set; }
        public IDbSet<BadgeType> BadgeTypes { get; set; }
        #endregion
        #region Brands
        public IDbSet<Brand> Brands { get; set; }
        public IDbSet<BrandAccount> BrandAccounts { get; set; }
        public IDbSet<BrandCategory> BrandCategories { get; set; }
        public IDbSet<BrandCurrency> BrandCurrencies { get; set; }
        public IDbSet<BrandFranchise> BrandFranchises { get; set; }
        public IDbSet<BrandImage> BrandImages { get; set; }
        public IDbSet<BrandImageType> BrandImageTypes { get; set; }
        public IDbSet<BrandInventoryLocation> BrandInventoryLocations { get; set; }
        public IDbSet<BrandInventoryLocationType> BrandInventoryLocationTypes { get; set; }
        public IDbSet<BrandLanguage> BrandLanguages { get; set; }
        public IDbSet<BrandManufacturer> BrandManufacturers { get; set; }
        public IDbSet<BrandProduct> BrandProducts { get; set; }
        public IDbSet<BrandSiteDomain> BrandSiteDomains { get; set; }
        public IDbSet<BrandStore> BrandStores { get; set; }
        public IDbSet<BrandUser> BrandUsers { get; set; }
        public IDbSet<BrandVendor> BrandVendors { get; set; }
        #endregion
        #region CalendarEvents
        public IDbSet<CalendarEvent> CalendarEvents { get; set; }
        public IDbSet<CalendarEventDetail> CalendarEventDetails { get; set; }
        public IDbSet<CalendarEventFile> CalendarEventFiles { get; set; }
        public IDbSet<CalendarEventImage> CalendarEventImages { get; set; }
        public IDbSet<CalendarEventImageType> CalendarEventImageTypes { get; set; }
        public IDbSet<CalendarEventProduct> CalendarEventProducts { get; set; }
        public IDbSet<CalendarEventStatus> CalendarEventStatuses { get; set; }
        public IDbSet<CalendarEventType> CalendarEventTypes { get; set; }
        public IDbSet<UserEventAttendance> UserEventAttendances { get; set; }
        public IDbSet<UserEventAttendanceType> UserEventAttendanceTypes { get; set; }
        #endregion
        #region Categories
        public IDbSet<Category> Categories { get; set; }
        public IDbSet<CategoryFile> CategoryFiles { get; set; }
        public IDbSet<CategoryImage> CategoryImages { get; set; }
        public IDbSet<CategoryImageType> CategoryImageTypes { get; set; }
        public IDbSet<CategoryType> CategoryTypes { get; set; }
        #endregion
        #region Contacts
        public IDbSet<Contact> Contacts { get; set; }
        public IDbSet<ContactImage> ContactImages { get; set; }
        public IDbSet<ContactImageType> ContactImageTypes { get; set; }
        public IDbSet<ContactType> ContactTypes { get; set; }
        public IDbSet<Permission> Permissions { get; set; }
        public IDbSet<ProfanityFilter> ProfanityFilters { get; set; }
        public IDbSet<ReferralCode> ReferralCodes { get; set; }
        public IDbSet<ReferralCodeStatus> ReferralCodeStatuses { get; set; }
        public IDbSet<ReferralCodeType> ReferralCodeTypes { get; set; }
        public IDbSet<RolePermission> RolePermissions { get; set; }
        public IDbSet<RoleUser> RoleUsers { get; set; }
        public IDbSet<UserClaim> UserClaims { get; set; }
        public IDbSet<UserFile> UserFiles { get; set; }
        public IDbSet<UserImage> UserImages { get; set; }
        public IDbSet<UserImageType> UserImageTypes { get; set; }
        public IDbSet<UserLogin> UserLogins { get; set; }
        public IDbSet<UserOnlineStatus> UserOnlineStatuses { get; set; }
        public IDbSet<UserProductType> UserProductTypes { get; set; }
        public IDbSet<UserStatus> UserStatuses { get; set; }
        public IDbSet<UserType> UserTypes { get; set; }
        #endregion
        #region Counters
        public IDbSet<Counter> Counters { get; set; }
        public IDbSet<CounterLog> CounterLogs { get; set; }
        public IDbSet<CounterLogType> CounterLogTypes { get; set; }
        public IDbSet<CounterType> CounterTypes { get; set; }
        #endregion
        #region Currencies
        public IDbSet<Currency> Currencies { get; set; }
        public IDbSet<CurrencyConversion> CurrencyConversions { get; set; }
        public IDbSet<CurrencyImage> CurrencyImages { get; set; }
        public IDbSet<CurrencyImageType> CurrencyImageTypes { get; set; }
        public IDbSet<HistoricalCurrencyRate> HistoricalCurrencyRates { get; set; }
        #endregion
        #region Discounts
        public IDbSet<AppliedCartDiscount> AppliedCartDiscounts { get; set; }
        public IDbSet<AppliedCartItemDiscount> AppliedCartItemDiscounts { get; set; }
        public IDbSet<Discount> Discounts { get; set; }
        public IDbSet<DiscountAccount> DiscountAccounts { get; set; }
        public IDbSet<DiscountAccountType> DiscountAccountTypes { get; set; }
        public IDbSet<DiscountBrand> DiscountBrands { get; set; }
        public IDbSet<DiscountCategory> DiscountCategories { get; set; }
        public IDbSet<DiscountCode> DiscountCodes { get; set; }
        public IDbSet<DiscountCountry> DiscountCountries { get; set; }
        public IDbSet<DiscountFranchise> DiscountFranchises { get; set; }
        public IDbSet<DiscountManufacturer> DiscountManufacturers { get; set; }
        public IDbSet<DiscountProduct> DiscountProducts { get; set; }
        public IDbSet<DiscountProductType> DiscountProductTypes { get; set; }
        public IDbSet<DiscountShipCarrierMethod> DiscountShipCarrierMethods { get; set; }
        public IDbSet<DiscountStore> DiscountStores { get; set; }
        public IDbSet<DiscountUser> DiscountUsers { get; set; }
        public IDbSet<DiscountUserRole> DiscountUserRoles { get; set; }
        public IDbSet<DiscountVendor> DiscountVendors { get; set; }
        public IDbSet<AppliedPurchaseOrderDiscount> AppliedPurchaseOrderDiscounts { get; set; }
        public IDbSet<AppliedPurchaseOrderItemDiscount> AppliedPurchaseOrderItemDiscounts { get; set; }
        public IDbSet<AppliedSalesInvoiceDiscount> AppliedSalesInvoiceDiscounts { get; set; }
        public IDbSet<AppliedSalesInvoiceItemDiscount> AppliedSalesInvoiceItemDiscounts { get; set; }
        public IDbSet<AppliedSalesOrderDiscount> AppliedSalesOrderDiscounts { get; set; }
        public IDbSet<AppliedSalesOrderItemDiscount> AppliedSalesOrderItemDiscounts { get; set; }
        public IDbSet<AppliedSalesQuoteDiscount> AppliedSalesQuoteDiscounts { get; set; }
        public IDbSet<AppliedSalesQuoteItemDiscount> AppliedSalesQuoteItemDiscounts { get; set; }
        public IDbSet<AppliedSalesReturnDiscount> AppliedSalesReturnDiscounts { get; set; }
        public IDbSet<AppliedSalesReturnItemDiscount> AppliedSalesReturnItemDiscounts { get; set; }
        public IDbSet<AppliedSampleRequestDiscount> AppliedSampleRequestDiscounts { get; set; }
        public IDbSet<AppliedSampleRequestItemDiscount> AppliedSampleRequestItemDiscounts { get; set; }
        #endregion
        #region Favorites
        public IDbSet<FavoriteCategory> FavoriteCategories { get; set; }
        public IDbSet<FavoriteManufacturer> FavoriteManufacturers { get; set; }
        public IDbSet<FavoriteShipCarrier> FavoriteShipCarriers { get; set; }
        public IDbSet<FavoriteStore> FavoriteStores { get; set; }
        public IDbSet<FavoriteVendor> FavoriteVendors { get; set; }
        #endregion
        #region Franchises
        public IDbSet<Franchise> Franchises { get; set; }
        public IDbSet<FranchiseAccount> FranchiseAccounts { get; set; }
        public IDbSet<FranchiseCategory> FranchiseCategories { get; set; }
        public IDbSet<FranchiseCountry> FranchiseCountries { get; set; }
        public IDbSet<FranchiseCurrency> FranchiseCurrencies { get; set; }
        public IDbSet<FranchiseDistrict> FranchiseDistricts { get; set; }
        public IDbSet<FranchiseImage> FranchiseImages { get; set; }
        public IDbSet<FranchiseImageType> FranchiseImageTypes { get; set; }
        public IDbSet<FranchiseInventoryLocation> FranchiseInventoryLocations { get; set; }
        public IDbSet<FranchiseInventoryLocationType> FranchiseInventoryLocationTypes { get; set; }
        public IDbSet<FranchiseLanguage> FranchiseLanguages { get; set; }
        public IDbSet<FranchiseManufacturer> FranchiseManufacturers { get; set; }
        public IDbSet<FranchiseProduct> FranchiseProducts { get; set; }
        public IDbSet<FranchiseRegion> FranchiseRegions { get; set; }
        public IDbSet<FranchiseSiteDomain> FranchiseSiteDomains { get; set; }
        public IDbSet<FranchiseStore> FranchiseStores { get; set; }
        public IDbSet<FranchiseType> FranchiseTypes { get; set; }
        public IDbSet<FranchiseUser> FranchiseUsers { get; set; }
        public IDbSet<FranchiseVendor> FranchiseVendors { get; set; }
        #endregion
        #region Geography
        public IDbSet<Address> Addresses { get; set; }
        public IDbSet<Country> Countries { get; set; }
        public IDbSet<CountryCurrency> CountryCurrencies { get; set; }
        public IDbSet<CountryImage> CountryImages { get; set; }
        public IDbSet<CountryImageType> CountryImageTypes { get; set; }
        public IDbSet<CountryLanguage> CountryLanguages { get; set; }
        public IDbSet<District> Districts { get; set; }
        public IDbSet<DistrictCurrency> DistrictCurrencies { get; set; }
        public IDbSet<DistrictImage> DistrictImages { get; set; }
        public IDbSet<DistrictImageType> DistrictImageTypes { get; set; }
        public IDbSet<DistrictLanguage> DistrictLanguages { get; set; }
        public IDbSet<HistoricalAddressValidation> HistoricalAddressValidations { get; set; }
        public IDbSet<PhonePrefixLookup> PhonePrefixLookups { get; set; }
        public IDbSet<Region> Regions { get; set; }
        public IDbSet<RegionCurrency> RegionCurrencies { get; set; }
        public IDbSet<RegionImage> RegionImages { get; set; }
        public IDbSet<RegionImageType> RegionImageTypes { get; set; }
        public IDbSet<RegionLanguage> RegionLanguages { get; set; }
        public IDbSet<ZipCode> ZipCodes { get; set; }
        #endregion
        #region Globalization
        public IDbSet<Language> Languages { get; set; }
        public IDbSet<LanguageImage> LanguageImages { get; set; }
        public IDbSet<LanguageImageType> LanguageImageTypes { get; set; }
        public IDbSet<UiKey> UiKeys { get; set; }
        public IDbSet<UiTranslation> UiTranslations { get; set; }
        #endregion
        #region Groups
        public IDbSet<Group> Groups { get; set; }
        public IDbSet<GroupStatus> GroupStatuses { get; set; }
        public IDbSet<GroupType> GroupTypes { get; set; }
        public IDbSet<GroupUser> GroupUsers { get; set; }
        #endregion
        #region Hangfire
        public IDbSet<HangfireAggregatedCounter> HangfireAggregatedCounters { get; set; }
        public IDbSet<HangfireCounter> HangfireCounters { get; set; }
        public IDbSet<HangfireHash> HangfireHashes { get; set; }
        public IDbSet<HangfireJob> HangfireJobs { get; set; }
        public IDbSet<HangfireJobParameter> HangfireJobParameters { get; set; }
        public IDbSet<HangfireJobQueue> HangfireJobQueues { get; set; }
        public IDbSet<HangfireList> HangfireLists { get; set; }
        public IDbSet<ScheduledJobConfiguration> ScheduledJobConfigurations { get; set; }
        public IDbSet<ScheduledJobConfigurationSetting> ScheduledJobConfigurationSettings { get; set; }
        public IDbSet<HangfireSchema> HangfireSchemas { get; set; }
        public IDbSet<HangfireServer> HangfireServers { get; set; }
        public IDbSet<HangfireSet> HangfireSets { get; set; }
        public IDbSet<HangfireState> HangfireStates { get; set; }
        #endregion
        #region Inventory
        public IDbSet<InventoryLocation> InventoryLocations { get; set; }
        public IDbSet<InventoryLocationRegion> InventoryLocationRegions { get; set; }
        public IDbSet<InventoryLocationSection> InventoryLocationSections { get; set; }
        public IDbSet<InventoryLocationUser> InventoryLocationUsers { get; set; }
        #endregion
        #region Invoicing
        public IDbSet<SalesInvoice> SalesInvoices { get; set; }
        public IDbSet<SalesInvoiceContact> SalesInvoiceContacts { get; set; }
        public IDbSet<SalesInvoiceEvent> SalesInvoiceEvents { get; set; }
        public IDbSet<SalesInvoiceEventType> SalesInvoiceEventTypes { get; set; }
        public IDbSet<SalesInvoiceFile> SalesInvoiceFiles { get; set; }
        public IDbSet<SalesInvoiceItem> SalesInvoiceItems { get; set; }
        public IDbSet<SalesInvoiceItemTarget> SalesInvoiceItemTargets { get; set; }
        public IDbSet<SalesInvoiceState> SalesInvoiceStates { get; set; }
        public IDbSet<SalesInvoiceStatus> SalesInvoiceStatuses { get; set; }
        public IDbSet<SalesInvoiceType> SalesInvoiceTypes { get; set; }
        public IDbSet<SalesOrderSalesInvoice> SalesOrderSalesInvoices { get; set; }
        #endregion
        #region Manufacturers
        public IDbSet<Manufacturer> Manufacturers { get; set; }
        public IDbSet<ManufacturerImage> ManufacturerImages { get; set; }
        public IDbSet<ManufacturerImageType> ManufacturerImageTypes { get; set; }
        public IDbSet<ManufacturerProduct> ManufacturerProducts { get; set; }
        public IDbSet<ManufacturerType> ManufacturerTypes { get; set; }
        #endregion
        #region Media
        public IDbSet<StoredFile> StoredFiles { get; set; }
        #endregion
        #region Messaging
        public IDbSet<Conversation> Conversations { get; set; }
        public IDbSet<ConversationUser> ConversationUsers { get; set; }
        public IDbSet<EmailQueue> EmailQueues { get; set; }
        public IDbSet<EmailQueueAttachment> EmailQueueAttachments { get; set; }
        public IDbSet<EmailStatus> EmailStatuses { get; set; }
        public IDbSet<EmailTemplate> EmailTemplates { get; set; }
        public IDbSet<EmailType> EmailTypes { get; set; }
        public IDbSet<Message> Messages { get; set; }
        public IDbSet<MessageAttachment> MessageAttachments { get; set; }
        public IDbSet<MessageRecipient> MessageRecipients { get; set; }
        public IDbSet<ProductNotification> ProductNotifications { get; set; }
        public IDbSet<UserSupportRequest> UserSupportRequests { get; set; }
        #endregion
        #region Ordering
        public IDbSet<SalesOrder> SalesOrders { get; set; }
        public IDbSet<SalesOrderContact> SalesOrderContacts { get; set; }
        public IDbSet<SalesOrderEvent> SalesOrderEvents { get; set; }
        public IDbSet<SalesOrderEventType> SalesOrderEventTypes { get; set; }
        public IDbSet<SalesOrderFile> SalesOrderFiles { get; set; }
        public IDbSet<SalesOrderItem> SalesOrderItems { get; set; }
        public IDbSet<SalesOrderItemTarget> SalesOrderItemTargets { get; set; }
        public IDbSet<SalesOrderState> SalesOrderStates { get; set; }
        public IDbSet<SalesOrderStatus> SalesOrderStatuses { get; set; }
        public IDbSet<SalesOrderType> SalesOrderTypes { get; set; }
        #endregion
        #region Payments
        public IDbSet<Membership> Memberships { get; set; }
        public IDbSet<MembershipAdZoneAccess> MembershipAdZoneAccesses { get; set; }
        public IDbSet<MembershipAdZoneAccessByLevel> MembershipAdZoneAccessByLevels { get; set; }
        public IDbSet<MembershipLevel> MembershipLevels { get; set; }
        public IDbSet<MembershipRepeatType> MembershipRepeatTypes { get; set; }
        public IDbSet<Payment> Payments { get; set; }
        public IDbSet<PaymentMethod> PaymentMethods { get; set; }
        public IDbSet<PaymentStatus> PaymentStatuses { get; set; }
        public IDbSet<PaymentType> PaymentTypes { get; set; }
        public IDbSet<RepeatType> RepeatTypes { get; set; }
        public IDbSet<SalesInvoicePayment> SalesInvoicePayments { get; set; }
        public IDbSet<SalesOrderPayment> SalesOrderPayments { get; set; }
        public IDbSet<SalesReturnPayment> SalesReturnPayments { get; set; }
        public IDbSet<Subscription> Subscriptions { get; set; }
        public IDbSet<SubscriptionHistory> SubscriptionHistories { get; set; }
        public IDbSet<SubscriptionStatus> SubscriptionStatuses { get; set; }
        public IDbSet<SubscriptionType> SubscriptionTypes { get; set; }
        public IDbSet<SubscriptionTypeRepeatType> SubscriptionTypeRepeatTypes { get; set; }
        public IDbSet<Wallet> Wallets { get; set; }
        #endregion
        #region Pricing
        public IDbSet<PricePoint> PricePoints { get; set; }
        public IDbSet<PriceRounding> PriceRoundings { get; set; }
        public IDbSet<PriceRule> PriceRules { get; set; }
        public IDbSet<PriceRuleAccount> PriceRuleAccounts { get; set; }
        public IDbSet<PriceRuleAccountType> PriceRuleAccountTypes { get; set; }
        public IDbSet<PriceRuleBrand> PriceRuleBrands { get; set; }
        public IDbSet<PriceRuleCategory> PriceRuleCategories { get; set; }
        public IDbSet<PriceRuleCountry> PriceRuleCountries { get; set; }
        public IDbSet<PriceRuleFranchise> PriceRuleFranchises { get; set; }
        public IDbSet<PriceRuleManufacturer> PriceRuleManufacturers { get; set; }
        public IDbSet<PriceRuleProduct> PriceRuleProducts { get; set; }
        public IDbSet<PriceRuleProductType> PriceRuleProductTypes { get; set; }
        public IDbSet<PriceRuleStore> PriceRuleStores { get; set; }
        public IDbSet<PriceRuleUserRole> PriceRuleUserRoles { get; set; }
        public IDbSet<PriceRuleVendor> PriceRuleVendors { get; set; }
        #endregion
        #region Products
        public IDbSet<FutureImport> FutureImports { get; set; }
        public IDbSet<FutureImportStatus> FutureImportStatuses { get; set; }
        public IDbSet<Product> Products { get; set; }
        public IDbSet<ProductAssociation> ProductAssociations { get; set; }
        public IDbSet<ProductAssociationType> ProductAssociationTypes { get; set; }
        public IDbSet<ProductCategory> ProductCategories { get; set; }
        public IDbSet<ProductDownload> ProductDownloads { get; set; }
        public IDbSet<ProductDownloadType> ProductDownloadTypes { get; set; }
        public IDbSet<ProductFile> ProductFiles { get; set; }
        public IDbSet<ProductImage> ProductImages { get; set; }
        public IDbSet<ProductImageType> ProductImageTypes { get; set; }
        public IDbSet<ProductInventoryLocationSection> ProductInventoryLocationSections { get; set; }
        public IDbSet<ProductMembershipLevel> ProductMembershipLevels { get; set; }
        public IDbSet<ProductPricePoint> ProductPricePoints { get; set; }
        public IDbSet<ProductRestriction> ProductRestrictions { get; set; }
        public IDbSet<ProductShipCarrierMethod> ProductShipCarrierMethods { get; set; }
        public IDbSet<ProductStatus> ProductStatuses { get; set; }
        public IDbSet<ProductSubscriptionType> ProductSubscriptionTypes { get; set; }
        public IDbSet<ProductType> ProductTypes { get; set; }
        #endregion
        #region Purchasing
        public IDbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public IDbSet<PurchaseOrderContact> PurchaseOrderContacts { get; set; }
        public IDbSet<PurchaseOrderEvent> PurchaseOrderEvents { get; set; }
        public IDbSet<PurchaseOrderEventType> PurchaseOrderEventTypes { get; set; }
        public IDbSet<PurchaseOrderFile> PurchaseOrderFiles { get; set; }
        public IDbSet<PurchaseOrderItem> PurchaseOrderItems { get; set; }
        public IDbSet<PurchaseOrderItemTarget> PurchaseOrderItemTargets { get; set; }
        public IDbSet<PurchaseOrderState> PurchaseOrderStates { get; set; }
        public IDbSet<PurchaseOrderStatus> PurchaseOrderStatuses { get; set; }
        public IDbSet<PurchaseOrderType> PurchaseOrderTypes { get; set; }
        public IDbSet<SalesOrderPurchaseOrder> SalesOrderPurchaseOrders { get; set; }
        #endregion
        #region Questionnaire
        public IDbSet<Answer> Answers { get; set; }
        public IDbSet<Question> Questions { get; set; }
        public IDbSet<QuestionOption> QuestionOptions { get; set; }
        public IDbSet<QuestionType> QuestionTypes { get; set; }
        #endregion
        #region Quoting
        public IDbSet<SalesQuote> SalesQuotes { get; set; }
        public IDbSet<SalesQuoteCategory> SalesQuoteCategories { get; set; }
        public IDbSet<SalesQuoteContact> SalesQuoteContacts { get; set; }
        public IDbSet<SalesQuoteEvent> SalesQuoteEvents { get; set; }
        public IDbSet<SalesQuoteEventType> SalesQuoteEventTypes { get; set; }
        public IDbSet<SalesQuoteFile> SalesQuoteFiles { get; set; }
        public IDbSet<SalesQuoteItem> SalesQuoteItems { get; set; }
        public IDbSet<SalesQuoteItemTarget> SalesQuoteItemTargets { get; set; }
        public IDbSet<SalesQuoteSalesOrder> SalesQuoteSalesOrders { get; set; }
        public IDbSet<SalesQuoteState> SalesQuoteStates { get; set; }
        public IDbSet<SalesQuoteStatus> SalesQuoteStatuses { get; set; }
        public IDbSet<SalesQuoteType> SalesQuoteTypes { get; set; }
        #endregion
        #region Reporting
        public IDbSet<Report> Reports { get; set; }
        public IDbSet<ReportType> ReportTypes { get; set; }
        #endregion
        #region Returning
        public IDbSet<SalesReturn> SalesReturns { get; set; }
        public IDbSet<SalesReturnContact> SalesReturnContacts { get; set; }
        public IDbSet<SalesReturnEvent> SalesReturnEvents { get; set; }
        public IDbSet<SalesReturnEventType> SalesReturnEventTypes { get; set; }
        public IDbSet<SalesReturnFile> SalesReturnFiles { get; set; }
        public IDbSet<SalesReturnItem> SalesReturnItems { get; set; }
        public IDbSet<SalesReturnItemTarget> SalesReturnItemTargets { get; set; }
        public IDbSet<SalesReturnReason> SalesReturnReasons { get; set; }
        public IDbSet<SalesReturnSalesOrder> SalesReturnSalesOrders { get; set; }
        public IDbSet<SalesReturnState> SalesReturnStates { get; set; }
        public IDbSet<SalesReturnStatus> SalesReturnStatuses { get; set; }
        public IDbSet<SalesReturnType> SalesReturnTypes { get; set; }
        #endregion
        #region Reviews
        public IDbSet<Review> Reviews { get; set; }
        public IDbSet<ReviewType> ReviewTypes { get; set; }
        #endregion
        #region Sales
        public IDbSet<SalesGroup> SalesGroups { get; set; }
        public IDbSet<SalesItemTargetType> SalesItemTargetTypes { get; set; }
        #endregion
        #region Sampling
        public IDbSet<SampleRequest> SampleRequests { get; set; }
        public IDbSet<SampleRequestContact> SampleRequestContacts { get; set; }
        public IDbSet<SampleRequestEvent> SampleRequestEvents { get; set; }
        public IDbSet<SampleRequestEventType> SampleRequestEventTypes { get; set; }
        public IDbSet<SampleRequestFile> SampleRequestFiles { get; set; }
        public IDbSet<SampleRequestItem> SampleRequestItems { get; set; }
        public IDbSet<SampleRequestItemTarget> SampleRequestItemTargets { get; set; }
        public IDbSet<SampleRequestState> SampleRequestStates { get; set; }
        public IDbSet<SampleRequestStatus> SampleRequestStatuses { get; set; }
        public IDbSet<SampleRequestType> SampleRequestTypes { get; set; }
        #endregion
        #region Scheduling
        public IDbSet<Appointment> Appointments { get; set; }
        public IDbSet<AppointmentStatus> AppointmentStatuses { get; set; }
        public IDbSet<AppointmentType> AppointmentTypes { get; set; }
        public IDbSet<Calendar> Calendars { get; set; }
        public IDbSet<CalendarAppointment> CalendarAppointments { get; set; }
        #endregion
        #region Scouting
        public IDbSet<Scout> Scouts { get; set; }
        public IDbSet<ScoutCategory> ScoutCategories { get; set; }
        public IDbSet<ScoutCategoryType> ScoutCategoryTypes { get; set; }
        #endregion
        #region Shipping
        public IDbSet<Package> Packages { get; set; }
        public IDbSet<PackageType> PackageTypes { get; set; }
        public IDbSet<RateQuote> RateQuotes { get; set; }
        public IDbSet<ShipCarrier> ShipCarriers { get; set; }
        public IDbSet<ShipCarrierMethod> ShipCarrierMethods { get; set; }
        public IDbSet<Shipment> Shipments { get; set; }
        public IDbSet<ShipmentEvent> ShipmentEvents { get; set; }
        public IDbSet<ShipmentStatus> ShipmentStatuses { get; set; }
        public IDbSet<ShipmentType> ShipmentTypes { get; set; }
        #endregion
        #region Shopping
        public IDbSet<Cart> Carts { get; set; }
        public IDbSet<CartContact> CartContacts { get; set; }
        public IDbSet<CartEvent> CartEvents { get; set; }
        public IDbSet<CartEventType> CartEventTypes { get; set; }
        public IDbSet<CartFile> CartFiles { get; set; }
        public IDbSet<CartItem> CartItems { get; set; }
        public IDbSet<CartItemTarget> CartItemTargets { get; set; }
        public IDbSet<CartState> CartStates { get; set; }
        public IDbSet<CartStatus> CartStatuses { get; set; }
        public IDbSet<CartType> CartTypes { get; set; }
        #endregion
        #region Stores
        public IDbSet<SiteDomain> SiteDomains { get; set; }
        public IDbSet<SiteDomainSocialProvider> SiteDomainSocialProviders { get; set; }
        public IDbSet<SocialProvider> SocialProviders { get; set; }
        public IDbSet<Store> Stores { get; set; }
        public IDbSet<StoreAccount> StoreAccounts { get; set; }
        public IDbSet<StoreBadge> StoreBadges { get; set; }
        public IDbSet<StoreCategory> StoreCategories { get; set; }
        public IDbSet<StoreContact> StoreContacts { get; set; }
        public IDbSet<StoreCountry> StoreCountries { get; set; }
        public IDbSet<StoreDistrict> StoreDistricts { get; set; }
        public IDbSet<StoreImage> StoreImages { get; set; }
        public IDbSet<StoreImageType> StoreImageTypes { get; set; }
        public IDbSet<StoreInventoryLocation> StoreInventoryLocations { get; set; }
        public IDbSet<StoreInventoryLocationType> StoreInventoryLocationTypes { get; set; }
        public IDbSet<StoreManufacturer> StoreManufacturers { get; set; }
        public IDbSet<StoreProduct> StoreProducts { get; set; }
        public IDbSet<StoreRegion> StoreRegions { get; set; }
        public IDbSet<StoreSubscription> StoreSubscriptions { get; set; }
        public IDbSet<StoreType> StoreTypes { get; set; }
        public IDbSet<StoreUser> StoreUsers { get; set; }
        public IDbSet<StoreVendor> StoreVendors { get; set; }
        #endregion
        #region System
        public IDbSet<ImportExportMapping> ImportExportMappings { get; set; }
        public IDbSet<Note> Notes { get; set; }
        public IDbSet<NoteType> NoteTypes { get; set; }
        public IDbSet<RecordVersion> RecordVersions { get; set; }
        public IDbSet<RecordVersionType> RecordVersionTypes { get; set; }
        public IDbSet<Setting> Settings { get; set; }
        public IDbSet<SettingGroup> SettingGroups { get; set; }
        public IDbSet<SettingType> SettingTypes { get; set; }
        public IDbSet<EventLog> EventLogs { get; set; }
        #endregion
        #region Tax
        public IDbSet<HistoricalTaxRate> HistoricalTaxRates { get; set; }
        public IDbSet<TaxCountry> TaxCountries { get; set; }
        public IDbSet<TaxDistrict> TaxDistricts { get; set; }
        public IDbSet<TaxRegion> TaxRegions { get; set; }
        #endregion
        #region Tracking
        public IDbSet<Campaign> Campaigns { get; set; }
        public IDbSet<CampaignAd> CampaignAds { get; set; }
        public IDbSet<CampaignStatus> CampaignStatuses { get; set; }
        public IDbSet<CampaignType> CampaignTypes { get; set; }
        public IDbSet<Event> Events { get; set; }
        public IDbSet<EventStatus> EventStatuses { get; set; }
        public IDbSet<EventType> EventTypes { get; set; }
        public IDbSet<IPOrganization> IPOrganizations { get; set; }
        public IDbSet<IPOrganizationStatus> IPOrganizationStatuses { get; set; }
        public IDbSet<PageView> PageViews { get; set; }
        public IDbSet<PageViewEvent> PageViewEvents { get; set; }
        public IDbSet<PageViewStatus> PageViewStatuses { get; set; }
        public IDbSet<PageViewType> PageViewTypes { get; set; }
        public IDbSet<Visit> Visits { get; set; }
        public IDbSet<Visitor> Visitors { get; set; }
        public IDbSet<VisitStatus> VisitStatuses { get; set; }
        #endregion
        #region Vendors
        public IDbSet<Vendor> Vendors { get; set; }
        public IDbSet<VendorAccount> VendorAccounts { get; set; }
        public IDbSet<VendorImage> VendorImages { get; set; }
        public IDbSet<VendorImageType> VendorImageTypes { get; set; }
        public IDbSet<VendorManufacturer> VendorManufacturers { get; set; }
        public IDbSet<VendorProduct> VendorProducts { get; set; }
        public IDbSet<VendorType> VendorTypes { get; set; }
        #endregion

        private static void OnModelCreatingDates(DbModelBuilder modelBuilder)
        {
            #region Accounts
            modelBuilder.Entity<Account>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Account>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountAssociation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountAssociation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountAssociationType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountAssociationType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountCurrency>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountCurrency>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountPricePoint>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountPricePoint>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountProductType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountProductType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountUsageBalance>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountUsageBalance>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Contractor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Contractor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ServiceArea>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ServiceArea>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Advertising
            modelBuilder.Entity<Ad>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Ad>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Ad>().Property(x => x.ExpirationDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Ad>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Ad>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdAccount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdAccount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdBrand>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdBrand>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdFranchise>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdFranchise>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdStore>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdStore>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdZone>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdZone>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Zone>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Zone>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ZoneStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ZoneStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ZoneType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ZoneType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Attributes
            modelBuilder.Entity<AttributeGroup>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AttributeGroup>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AttributeTab>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AttributeTab>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AttributeType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AttributeType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GeneralAttribute>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GeneralAttribute>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GeneralAttributePredefinedOption>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GeneralAttributePredefinedOption>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Auctions
            modelBuilder.Entity<Auction>().Property(x => x.OpensAt).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Auction>().Property(x => x.ClosesAt).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Auction>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Auction>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AuctionCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AuctionCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AuctionStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AuctionStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AuctionType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AuctionType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Bid>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Bid>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BidStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BidStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandAuction>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandAuction>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseAuction>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseAuction>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Lot>().Property(x => x.PickupTime).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Lot>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Lot>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotGroup>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotGroup>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LotType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreAuction>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreAuction>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Badges
            modelBuilder.Entity<Badge>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Badge>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BadgeImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BadgeImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BadgeImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BadgeImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BadgeType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BadgeType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Brands
            modelBuilder.Entity<Brand>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Brand>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandAccount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandAccount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandCurrency>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandCurrency>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandFranchise>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandFranchise>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandInventoryLocation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandInventoryLocation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandInventoryLocationType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandInventoryLocationType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandLanguage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandLanguage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandManufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandManufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandSiteDomain>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandSiteDomain>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandStore>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandStore>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandUser>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandUser>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandVendor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<BrandVendor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region CalendarEvents
            modelBuilder.Entity<CalendarEvent>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEvent>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.StartTime).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.EndTime).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserEventAttendance>().Property(x => x.Date).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserEventAttendance>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserEventAttendance>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserEventAttendanceType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserEventAttendanceType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Categories
            modelBuilder.Entity<Category>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Category>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CategoryType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Contacts
            modelBuilder.Entity<Contact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Contact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ContactImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ContactImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ContactImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ContactImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ContactType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ContactType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProfanityFilter>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProfanityFilter>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReferralCode>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReferralCode>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReferralCodeStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReferralCodeStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReferralCodeType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReferralCodeType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<User>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<User>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<User>().Property(x => x.LockoutEndDateUtc).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<User>().Property(x => x.DateOfBirth).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserOnlineStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserOnlineStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserProductType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserProductType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Counters
            modelBuilder.Entity<Counter>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Counter>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CounterLog>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CounterLog>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CounterLogType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CounterLogType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CounterType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CounterType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Currencies
            modelBuilder.Entity<Currency>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Currency>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CurrencyImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalCurrencyRate>().Property(x => x.OnDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalCurrencyRate>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalCurrencyRate>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Discounts
            modelBuilder.Entity<AppliedCartDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedCartDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedCartItemDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedCartItemDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Discount>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Discount>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Discount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Discount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountAccount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountAccount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountAccountType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountAccountType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountBrand>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountBrand>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountCode>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountCode>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountCountry>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountCountry>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountFranchise>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountFranchise>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountManufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountManufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountProductType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountProductType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountShipCarrierMethod>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountShipCarrierMethod>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountStore>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountStore>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountUser>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountUser>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountUserRole>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountUserRole>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountVendor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DiscountVendor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedPurchaseOrderDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedPurchaseOrderDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedPurchaseOrderItemDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedPurchaseOrderItemDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesInvoiceDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesInvoiceDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesInvoiceItemDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesInvoiceItemDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesOrderDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesOrderDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesOrderItemDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesOrderItemDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesQuoteDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesQuoteDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesQuoteItemDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesQuoteItemDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesReturnDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesReturnDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesReturnItemDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSalesReturnItemDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSampleRequestDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSampleRequestDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSampleRequestItemDiscount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppliedSampleRequestItemDiscount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Favorites
            modelBuilder.Entity<FavoriteCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteManufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteManufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteShipCarrier>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteShipCarrier>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteStore>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteStore>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteVendor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FavoriteVendor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Franchises
            modelBuilder.Entity<Franchise>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Franchise>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseAccount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseAccount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseCountry>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseCountry>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseCurrency>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseCurrency>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseDistrict>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseDistrict>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseInventoryLocation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseInventoryLocation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseInventoryLocationType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseInventoryLocationType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseLanguage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseLanguage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseManufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseManufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseRegion>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseRegion>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseSiteDomain>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseSiteDomain>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseStore>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseStore>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseUser>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseUser>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseVendor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FranchiseVendor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Geography
            modelBuilder.Entity<Address>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Address>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Country>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Country>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryCurrency>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryCurrency>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryLanguage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CountryLanguage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<District>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<District>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictCurrency>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictCurrency>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictLanguage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<DistrictLanguage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalAddressValidation>().Property(x => x.OnDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalAddressValidation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalAddressValidation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PhonePrefixLookup>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PhonePrefixLookup>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Region>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Region>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionCurrency>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionCurrency>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionLanguage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RegionLanguage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ZipCode>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ZipCode>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Globalization
            modelBuilder.Entity<Language>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Language>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LanguageImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LanguageImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LanguageImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<LanguageImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UiKey>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UiKey>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UiTranslation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UiTranslation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Groups
            modelBuilder.Entity<Group>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Group>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GroupStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GroupStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GroupType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GroupType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GroupUser>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<GroupUser>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Hangfire
            modelBuilder.Entity<HangfireAggregatedCounter>().Property(x => x.ExpireAt).HasColumnType("datetime");
            modelBuilder.Entity<HangfireCounter>().Property(x => x.ExpireAt).HasColumnType("datetime");
            modelBuilder.Entity<HangfireHash>().Property(x => x.ExpireAt).HasColumnType("datetime");
            modelBuilder.Entity<HangfireJob>().Property(x => x.CreatedAt).HasColumnType("datetime");
            modelBuilder.Entity<HangfireJob>().Property(x => x.ExpireAt).HasColumnType("datetime");
            modelBuilder.Entity<HangfireJobQueue>().Property(x => x.FetchedAt).HasColumnType("datetime");
            modelBuilder.Entity<HangfireList>().Property(x => x.ExpireAt).HasColumnType("datetime");
            modelBuilder.Entity<ScheduledJobConfiguration>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ScheduledJobConfiguration>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ScheduledJobConfigurationSetting>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ScheduledJobConfigurationSetting>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HangfireServer>().Property(x => x.LastHeartbeat).HasColumnType("datetime");
            modelBuilder.Entity<HangfireSet>().Property(x => x.ExpireAt).HasColumnType("datetime");
            modelBuilder.Entity<HangfireState>().Property(x => x.CreatedAt).HasColumnType("datetime");
            #endregion
            #region Inventory
            modelBuilder.Entity<InventoryLocation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<InventoryLocation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<InventoryLocationRegion>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<InventoryLocationRegion>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<InventoryLocationSection>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<InventoryLocationSection>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<InventoryLocationUser>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<InventoryLocationUser>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Invoicing
            modelBuilder.Entity<SalesInvoice>().Property(x => x.DueDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoice>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoice>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceItem>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceItem>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceItemTarget>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceItemTarget>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceState>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceState>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoiceType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderSalesInvoice>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderSalesInvoice>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Manufacturers
            modelBuilder.Entity<Manufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Manufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ManufacturerType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Media
            modelBuilder.Entity<StoredFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoredFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Messaging
            modelBuilder.Entity<Conversation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Conversation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ConversationUser>().Property(x => x.LastHeartbeat).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ConversationUser>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ConversationUser>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailQueue>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailQueue>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailQueueAttachment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailQueueAttachment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailTemplate>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailTemplate>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EmailType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Message>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Message>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MessageAttachment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MessageAttachment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.ReadAt).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.ArchivedAt).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.EmailSentAt).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductNotification>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductNotification>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserSupportRequest>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<UserSupportRequest>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Ordering
            modelBuilder.Entity<SalesOrder>().Property(x => x.OrderApprovedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrder>().Property(x => x.OrderCommitmentDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrder>().Property(x => x.RequiredShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrder>().Property(x => x.RequestedShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrder>().Property(x => x.ActualShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrder>().Property(x => x.DueDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrder>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrder>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderItem>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderItem>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderItemTarget>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderItemTarget>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderState>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderState>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Payments
            modelBuilder.Entity<Membership>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Membership>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipAdZoneAccess>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipAdZoneAccess>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipAdZoneAccessByLevel>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipAdZoneAccessByLevel>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipLevel>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipLevel>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipRepeatType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<MembershipRepeatType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Payment>().Property(x => x.StatusDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Payment>().Property(x => x.AuthDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Payment>().Property(x => x.ReceivedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Payment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Payment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PaymentMethod>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PaymentMethod>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PaymentStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PaymentStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PaymentType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PaymentType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RepeatType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RepeatType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoicePayment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesInvoicePayment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderPayment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderPayment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnPayment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnPayment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Subscription>().Property(x => x.MemberSince).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Subscription>().Property(x => x.StartsOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Subscription>().Property(x => x.EndsOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Subscription>().Property(x => x.LastPaidDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Subscription>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Subscription>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionHistory>().Property(x => x.PaymentDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionHistory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionHistory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionTypeRepeatType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SubscriptionTypeRepeatType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Wallet>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Wallet>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Pricing
            modelBuilder.Entity<PricePoint>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PricePoint>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRounding>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRounding>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRule>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRule>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRule>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRule>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleAccount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleAccount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleAccountType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleAccountType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleBrand>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleBrand>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleCountry>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleCountry>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleFranchise>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleFranchise>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleManufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleManufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleProductType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleProductType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleStore>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleStore>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleUserRole>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleUserRole>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleVendor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PriceRuleVendor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Products
            modelBuilder.Entity<FutureImport>().Property(x => x.RunImportAt).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FutureImport>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FutureImport>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FutureImportStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<FutureImportStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Product>().Property(x => x.AvailableStartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Product>().Property(x => x.AvailableEndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Product>().Property(x => x.PreSellEndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Product>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Product>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductAssociation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductAssociation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductAssociationType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductAssociationType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductDownload>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductDownload>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductDownloadType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductDownloadType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductInventoryLocationSection>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductInventoryLocationSection>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductMembershipLevel>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductMembershipLevel>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.From).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.To).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductRestriction>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductRestriction>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.From).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.To).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductSubscriptionType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductSubscriptionType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ProductType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Purchasing
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.ReleaseDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.EstimatedReceiptDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.ActualReceiptDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.DueDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderItem>().Property(x => x.DateReceived).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderItem>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderItem>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderItemTarget>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderItemTarget>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderState>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderState>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PurchaseOrderType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderPurchaseOrder>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesOrderPurchaseOrder>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Questionnaire
            modelBuilder.Entity<Answer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Answer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Question>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Question>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<QuestionOption>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<QuestionOption>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<QuestionType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<QuestionType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Quoting
            modelBuilder.Entity<SalesQuote>().Property(x => x.RequestedShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuote>().Property(x => x.DueDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuote>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuote>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteItem>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteItem>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteItemTarget>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteItemTarget>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteSalesOrder>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteSalesOrder>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteState>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteState>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesQuoteType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Reporting
            modelBuilder.Entity<Report>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Report>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReportType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReportType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Returning
            modelBuilder.Entity<SalesReturn>().Property(x => x.ReturnApprovedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturn>().Property(x => x.ReturnCommitmentDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturn>().Property(x => x.RequiredShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturn>().Property(x => x.RequestedShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturn>().Property(x => x.ActualShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturn>().Property(x => x.DueDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturn>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturn>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnItem>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnItem>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnItemTarget>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnItemTarget>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnReason>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnReason>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnSalesOrder>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnSalesOrder>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnState>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnState>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesReturnType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Reviews
            modelBuilder.Entity<Review>().Property(x => x.ApprovedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Review>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Review>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReviewType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ReviewType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Sales
            modelBuilder.Entity<SalesGroup>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesGroup>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesItemTargetType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SalesItemTargetType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Sampling
            modelBuilder.Entity<SampleRequest>().Property(x => x.DueDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequest>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequest>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestItem>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestItem>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestItemTarget>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestItemTarget>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestState>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestState>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SampleRequestType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Scheduling
            modelBuilder.Entity<Appointment>().Property(x => x.AppointmentStart).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Appointment>().Property(x => x.AppointmentEnd).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Appointment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Appointment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppointmentStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppointmentStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppointmentType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<AppointmentType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Calendar>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Calendar>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarAppointment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CalendarAppointment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Scouting
            modelBuilder.Entity<Scout>().Property(x => x.YearMin).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Scout>().Property(x => x.YearMax).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Scout>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Scout>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ScoutCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ScoutCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ScoutCategoryType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ScoutCategoryType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Shipping
            modelBuilder.Entity<Package>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Package>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PackageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PackageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RateQuote>().Property(x => x.EstimatedDeliveryDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RateQuote>().Property(x => x.TargetShippingDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RateQuote>().Property(x => x.RateTimestamp).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RateQuote>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RateQuote>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipCarrier>().Property(x => x.PickupTime).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipCarrier>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipCarrier>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipCarrierMethod>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipCarrierMethod>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Shipment>().Property(x => x.TargetShippingDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Shipment>().Property(x => x.EstimatedDeliveryDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Shipment>().Property(x => x.ShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Shipment>().Property(x => x.DateDelivered).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Shipment>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Shipment>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipmentEvent>().Property(x => x.EventDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipmentEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipmentEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipmentStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipmentStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipmentType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ShipmentType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Shopping
            modelBuilder.Entity<Cart>().Property(x => x.RequestedShipDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Cart>().Property(x => x.DueDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Cart>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Cart>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartEventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartEventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartFile>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartFile>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartItem>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartItem>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartItemTarget>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartItemTarget>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartState>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartState>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CartType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Stores
            modelBuilder.Entity<SiteDomain>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SiteDomain>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SiteDomainSocialProvider>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SiteDomainSocialProvider>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SocialProvider>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SocialProvider>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Store>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Store>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Store>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Store>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreAccount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreAccount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreBadge>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreBadge>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreCategory>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreCategory>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreContact>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreContact>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreCountry>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreCountry>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreDistrict>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreDistrict>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreInventoryLocation>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreInventoryLocation>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreInventoryLocationType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreInventoryLocationType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreManufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreManufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreRegion>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreRegion>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreSubscription>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreSubscription>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreUser>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreUser>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreVendor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<StoreVendor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region System
            modelBuilder.Entity<ImportExportMapping>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<ImportExportMapping>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Note>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Note>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<NoteType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<NoteType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RecordVersion>().Property(x => x.OriginalPublishDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RecordVersion>().Property(x => x.MostRecentPublishDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RecordVersion>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RecordVersion>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RecordVersionType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RecordVersionType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Setting>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Setting>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SettingGroup>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SettingGroup>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SettingType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<SettingType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EventLog>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EventLog>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Tax
            modelBuilder.Entity<HistoricalTaxRate>().Property(x => x.OnDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalTaxRate>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HistoricalTaxRate>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<TaxCountry>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<TaxCountry>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<TaxDistrict>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<TaxDistrict>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<TaxRegion>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<TaxRegion>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Tracking
            modelBuilder.Entity<Campaign>().Property(x => x.ProposedStart).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Campaign>().Property(x => x.ProposedEnd).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Campaign>().Property(x => x.ActualStart).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Campaign>().Property(x => x.ActualEnd).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Campaign>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Campaign>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CampaignAd>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CampaignAd>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CampaignStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CampaignStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CampaignType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<CampaignType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Event>().Property(x => x.StartedOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Event>().Property(x => x.EndedOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Event>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Event>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EventStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EventStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EventType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<EventType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<IPOrganization>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<IPOrganization>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<IPOrganizationStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<IPOrganizationStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageView>().Property(x => x.StartedOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageView>().Property(x => x.EndedOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageView>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageView>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageViewEvent>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageViewEvent>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageViewStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageViewStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageViewType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<PageViewType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Visit>().Property(x => x.StartedOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Visit>().Property(x => x.EndedOn).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Visit>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Visit>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Visitor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Visitor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VisitStatus>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VisitStatus>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            #region Vendors
            modelBuilder.Entity<Vendor>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<Vendor>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorAccount>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorAccount>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorImage>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorImage>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorImageType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorImageType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorManufacturer>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorManufacturer>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorProduct>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorProduct>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorType>().Property(x => x.CreatedDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<VendorType>().Property(x => x.UpdatedDate).HasColumnType("datetime2").HasPrecision(7);
            #endregion
            modelBuilder.Entity<RoleUser>().Property(x => x.StartDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<RoleUser>().Property(x => x.EndDate).HasColumnType("datetime2").HasPrecision(7);
            modelBuilder.Entity<HangfireHash>().Property(x => x.ExpireAt).HasColumnType("datetime2").HasPrecision(7);
        }

        private static void OnModelCreatingSchemas(DbModelBuilder modelBuilder)
        {
            #region Accounts
            modelBuilder.Entity<Account>().ToTable("Account", "Accounts");
            modelBuilder.Entity<AccountAssociation>().ToTable("AccountAssociation", "Accounts");
            modelBuilder.Entity<AccountAssociationType>().ToTable("AccountAssociationType", "Accounts");
            modelBuilder.Entity<AccountContact>().ToTable("AccountContact", "Accounts");
            modelBuilder.Entity<AccountCurrency>().ToTable("AccountCurrency", "Accounts");
            modelBuilder.Entity<AccountFile>().ToTable("AccountFile", "Accounts");
            modelBuilder.Entity<AccountImage>().ToTable("AccountImage", "Accounts");
            modelBuilder.Entity<AccountImageType>().ToTable("AccountImageType", "Accounts");
            modelBuilder.Entity<AccountPricePoint>().ToTable("AccountPricePoint", "Accounts");
            modelBuilder.Entity<AccountProduct>().ToTable("AccountProduct", "Accounts");
            modelBuilder.Entity<AccountProductType>().ToTable("AccountProductType", "Accounts");
            modelBuilder.Entity<AccountStatus>().ToTable("AccountStatus", "Accounts");
            modelBuilder.Entity<AccountType>().ToTable("AccountType", "Accounts");
            modelBuilder.Entity<AccountUsageBalance>().ToTable("AccountUsageBalance", "Accounts");
            modelBuilder.Entity<AccountUserRole>().ToTable("AccountUserRole", "Accounts");
            modelBuilder.Entity<Contractor>().ToTable("Contractor", "Accounts");
            modelBuilder.Entity<ServiceArea>().ToTable("ServiceArea", "Accounts");
            #endregion
            #region Advertising
            modelBuilder.Entity<Ad>().ToTable("Ad", "Advertising");
            modelBuilder.Entity<AdAccount>().ToTable("AdAccount", "Advertising");
            modelBuilder.Entity<AdBrand>().ToTable("AdBrand", "Advertising");
            modelBuilder.Entity<AdFranchise>().ToTable("AdFranchise", "Advertising");
            modelBuilder.Entity<AdImage>().ToTable("AdImage", "Advertising");
            modelBuilder.Entity<AdImageType>().ToTable("AdImageType", "Advertising");
            modelBuilder.Entity<AdStatus>().ToTable("AdStatus", "Advertising");
            modelBuilder.Entity<AdStore>().ToTable("AdStore", "Advertising");
            modelBuilder.Entity<AdType>().ToTable("AdType", "Advertising");
            modelBuilder.Entity<AdZone>().ToTable("AdZone", "Advertising");
            modelBuilder.Entity<AdZoneAccess>().ToTable("AdZoneAccess", "Advertising");
            modelBuilder.Entity<Zone>().ToTable("Zone", "Advertising");
            modelBuilder.Entity<ZoneStatus>().ToTable("ZoneStatus", "Advertising");
            modelBuilder.Entity<ZoneType>().ToTable("ZoneType", "Advertising");
            #endregion
            #region Attributes
            modelBuilder.Entity<AttributeGroup>().ToTable("AttributeGroup", "Attributes");
            modelBuilder.Entity<AttributeTab>().ToTable("AttributeTab", "Attributes");
            modelBuilder.Entity<AttributeType>().ToTable("AttributeType", "Attributes");
            modelBuilder.Entity<GeneralAttribute>().ToTable("GeneralAttribute", "Attributes");
            modelBuilder.Entity<GeneralAttributePredefinedOption>().ToTable("GeneralAttributePredefinedOption", "Attributes");
            #endregion
            #region Auctions
            modelBuilder.Entity<Auction>().ToTable("Auction", "Auctions");
            modelBuilder.Entity<AuctionCategory>().ToTable("AuctionCategory", "Auctions");
            modelBuilder.Entity<AuctionStatus>().ToTable("AuctionStatus", "Auctions");
            modelBuilder.Entity<AuctionType>().ToTable("AuctionType", "Auctions");
            modelBuilder.Entity<Bid>().ToTable("Bid", "Auctions");
            modelBuilder.Entity<BidStatus>().ToTable("BidStatus", "Auctions");
            modelBuilder.Entity<BrandAuction>().ToTable("BrandAuction", "Auctions");
            modelBuilder.Entity<FranchiseAuction>().ToTable("FranchiseAuction", "Auctions");
            modelBuilder.Entity<Lot>().ToTable("Lot", "Auctions");
            modelBuilder.Entity<LotCategory>().ToTable("LotCategory", "Auctions");
            modelBuilder.Entity<LotGroup>().ToTable("LotGroup", "Auctions");
            modelBuilder.Entity<LotStatus>().ToTable("LotStatus", "Auctions");
            modelBuilder.Entity<LotType>().ToTable("LotType", "Auctions");
            modelBuilder.Entity<StoreAuction>().ToTable("StoreAuction", "Auctions");
            #endregion
            #region Badges
            modelBuilder.Entity<Badge>().ToTable("Badge", "Badges");
            modelBuilder.Entity<BadgeImage>().ToTable("BadgeImage", "Badges");
            modelBuilder.Entity<BadgeImageType>().ToTable("BadgeImageType", "Badges");
            modelBuilder.Entity<BadgeType>().ToTable("BadgeType", "Badges");
            #endregion
            #region Brands
            modelBuilder.Entity<Brand>().ToTable("Brand", "Brands");
            modelBuilder.Entity<BrandAccount>().ToTable("BrandAccount", "Brands");
            modelBuilder.Entity<BrandCategory>().ToTable("BrandCategory", "Brands");
            modelBuilder.Entity<BrandCurrency>().ToTable("BrandCurrency", "Brands");
            modelBuilder.Entity<BrandFranchise>().ToTable("BrandFranchise", "Brands");
            modelBuilder.Entity<BrandImage>().ToTable("BrandImage", "Brands");
            modelBuilder.Entity<BrandImageType>().ToTable("BrandImageType", "Brands");
            modelBuilder.Entity<BrandInventoryLocation>().ToTable("BrandInventoryLocation", "Brands");
            modelBuilder.Entity<BrandInventoryLocationType>().ToTable("BrandInventoryLocationType", "Brands");
            modelBuilder.Entity<BrandLanguage>().ToTable("BrandLanguage", "Brands");
            modelBuilder.Entity<BrandManufacturer>().ToTable("BrandManufacturer", "Brands");
            modelBuilder.Entity<BrandProduct>().ToTable("BrandProduct", "Brands");
            modelBuilder.Entity<BrandSiteDomain>().ToTable("BrandSiteDomain", "Brands");
            modelBuilder.Entity<BrandStore>().ToTable("BrandStore", "Brands");
            modelBuilder.Entity<BrandUser>().ToTable("BrandUser", "Brands");
            modelBuilder.Entity<BrandVendor>().ToTable("BrandVendor", "Brands");
            #endregion
            #region CalendarEvents
            modelBuilder.Entity<CalendarEvent>().ToTable("CalendarEvent", "CalendarEvents");
            modelBuilder.Entity<CalendarEventDetail>().ToTable("CalendarEventDetail", "CalendarEvents");
            modelBuilder.Entity<CalendarEventFile>().ToTable("CalendarEventFile", "CalendarEvents");
            modelBuilder.Entity<CalendarEventImage>().ToTable("CalendarEventImage", "CalendarEvents");
            modelBuilder.Entity<CalendarEventImageType>().ToTable("CalendarEventImageType", "CalendarEvents");
            modelBuilder.Entity<CalendarEventProduct>().ToTable("CalendarEventProducts", "CalendarEvents");
            modelBuilder.Entity<CalendarEventStatus>().ToTable("CalendarEventStatus", "CalendarEvents");
            modelBuilder.Entity<CalendarEventType>().ToTable("CalendarEventType", "CalendarEvents");
            modelBuilder.Entity<UserEventAttendance>().ToTable("UserEventAttendance", "CalendarEvents");
            modelBuilder.Entity<UserEventAttendanceType>().ToTable("UserEventAttendanceType", "CalendarEvents");
            #endregion
            #region Categories
            modelBuilder.Entity<Category>().ToTable("Category", "Categories");
            modelBuilder.Entity<CategoryFile>().ToTable("CategoryFile", "Categories");
            modelBuilder.Entity<CategoryImage>().ToTable("CategoryImage", "Categories");
            modelBuilder.Entity<CategoryImageType>().ToTable("CategoryImageType", "Categories");
            modelBuilder.Entity<CategoryType>().ToTable("CategoryType", "Categories");
            #endregion
            #region Contacts
            modelBuilder.Entity<Contact>().ToTable("Contact", "Contacts");
            modelBuilder.Entity<ContactImage>().ToTable("ContactImage", "Contacts");
            modelBuilder.Entity<ContactImageType>().ToTable("ContactImageType", "Contacts");
            modelBuilder.Entity<ContactType>().ToTable("ContactType", "Contacts");
            modelBuilder.Entity<Permission>().ToTable("Permission", "Contacts");
            modelBuilder.Entity<ProfanityFilter>().ToTable("ProfanityFilter", "Contacts");
            modelBuilder.Entity<ReferralCode>().ToTable("ReferralCode", "Contacts");
            modelBuilder.Entity<ReferralCodeStatus>().ToTable("ReferralCodeStatus", "Contacts");
            modelBuilder.Entity<ReferralCodeType>().ToTable("ReferralCodeType", "Contacts");
            modelBuilder.Entity<RolePermission>().ToTable("RolePermission", "Contacts");
            modelBuilder.Entity<RoleUser>().ToTable("RoleUser", "Contacts");
            modelBuilder.Entity<User>().ToTable("User", "Contacts");
            modelBuilder.Entity<UserClaim>().ToTable("UserClaim", "Contacts");
            modelBuilder.Entity<UserFile>().ToTable("UserFile", "Contacts");
            modelBuilder.Entity<UserImage>().ToTable("UserImage", "Contacts");
            modelBuilder.Entity<UserImageType>().ToTable("UserImageType", "Contacts");
            modelBuilder.Entity<UserLogin>().ToTable("UserLogin", "Contacts");
            modelBuilder.Entity<UserOnlineStatus>().ToTable("UserOnlineStatus", "Contacts");
            modelBuilder.Entity<UserProductType>().ToTable("UserProductType", "Contacts");
            modelBuilder.Entity<UserRole>().ToTable("UserRole", "Contacts");
            modelBuilder.Entity<UserStatus>().ToTable("UserStatus", "Contacts");
            modelBuilder.Entity<UserType>().ToTable("UserType", "Contacts");
            #endregion
            #region Counters
            modelBuilder.Entity<Counter>().ToTable("Counter", "Counters");
            modelBuilder.Entity<CounterLog>().ToTable("CounterLog", "Counters");
            modelBuilder.Entity<CounterLogType>().ToTable("CounterLogType", "Counters");
            modelBuilder.Entity<CounterType>().ToTable("CounterType", "Counters");
            #endregion
            #region Currencies
            modelBuilder.Entity<Currency>().ToTable("Currency", "Currencies");
            modelBuilder.Entity<CurrencyConversion>().ToTable("CurrencyConversion", "Currencies");
            modelBuilder.Entity<CurrencyImage>().ToTable("CurrencyImage", "Currencies");
            modelBuilder.Entity<CurrencyImageType>().ToTable("CurrencyImageType", "Currencies");
            modelBuilder.Entity<HistoricalCurrencyRate>().ToTable("HistoricalCurrencyRate", "Currencies");
            #endregion
            #region Discounts
            modelBuilder.Entity<AppliedCartDiscount>().ToTable("CartDiscounts", "Discounts");
            modelBuilder.Entity<AppliedCartItemDiscount>().ToTable("CartItemDiscounts", "Discounts");
            modelBuilder.Entity<Discount>().ToTable("Discount", "Discounts");
            modelBuilder.Entity<DiscountAccount>().ToTable("DiscountAccount", "Discounts");
            modelBuilder.Entity<DiscountAccountType>().ToTable("DiscountAccountType", "Discounts");
            modelBuilder.Entity<DiscountBrand>().ToTable("DiscountBrands", "Discounts");
            modelBuilder.Entity<DiscountCategory>().ToTable("DiscountCategories", "Discounts");
            modelBuilder.Entity<DiscountCode>().ToTable("DiscountCode", "Discounts");
            modelBuilder.Entity<DiscountCountry>().ToTable("DiscountCountry", "Discounts");
            modelBuilder.Entity<DiscountFranchise>().ToTable("DiscountFranchises", "Discounts");
            modelBuilder.Entity<DiscountManufacturer>().ToTable("DiscountManufacturer", "Discounts");
            modelBuilder.Entity<DiscountProduct>().ToTable("DiscountProducts", "Discounts");
            modelBuilder.Entity<DiscountProductType>().ToTable("DiscountProductType", "Discounts");
            modelBuilder.Entity<DiscountShipCarrierMethod>().ToTable("DiscountShipCarrierMethods", "Discounts");
            modelBuilder.Entity<DiscountStore>().ToTable("DiscountStores", "Discounts");
            modelBuilder.Entity<DiscountUser>().ToTable("DiscountUser", "Discounts");
            modelBuilder.Entity<DiscountUserRole>().ToTable("DiscountUserRole", "Discounts");
            modelBuilder.Entity<DiscountVendor>().ToTable("DiscountVendor", "Discounts");
            modelBuilder.Entity<AppliedPurchaseOrderDiscount>().ToTable("PurchaseOrderDiscounts", "Discounts");
            modelBuilder.Entity<AppliedPurchaseOrderItemDiscount>().ToTable("PurchaseOrderItemDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesInvoiceDiscount>().ToTable("SalesInvoiceDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesInvoiceItemDiscount>().ToTable("SalesInvoiceItemDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesOrderDiscount>().ToTable("SalesOrderDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesOrderItemDiscount>().ToTable("SalesOrderItemDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesQuoteDiscount>().ToTable("SalesQuoteDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesQuoteItemDiscount>().ToTable("SalesQuoteItemDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesReturnDiscount>().ToTable("SalesReturnDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSalesReturnItemDiscount>().ToTable("SalesReturnItemDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSampleRequestDiscount>().ToTable("SampleRequestDiscounts", "Discounts");
            modelBuilder.Entity<AppliedSampleRequestItemDiscount>().ToTable("SampleRequestItemDiscounts", "Discounts");
            #endregion
            #region Favorites
            modelBuilder.Entity<FavoriteCategory>().ToTable("FavoriteCategory", "Favorites");
            modelBuilder.Entity<FavoriteManufacturer>().ToTable("FavoriteManufacturer", "Favorites");
            modelBuilder.Entity<FavoriteShipCarrier>().ToTable("FavoriteShipCarrier", "Favorites");
            modelBuilder.Entity<FavoriteStore>().ToTable("FavoriteStore", "Favorites");
            modelBuilder.Entity<FavoriteVendor>().ToTable("FavoriteVendor", "Favorites");
            #endregion
            #region Franchises
            modelBuilder.Entity<Franchise>().ToTable("Franchise", "Franchises");
            modelBuilder.Entity<FranchiseAccount>().ToTable("FranchiseAccount", "Franchises");
            modelBuilder.Entity<FranchiseCategory>().ToTable("FranchiseCategory", "Franchises");
            modelBuilder.Entity<FranchiseCountry>().ToTable("FranchiseCountry", "Franchises");
            modelBuilder.Entity<FranchiseCurrency>().ToTable("FranchiseCurrency", "Franchises");
            modelBuilder.Entity<FranchiseDistrict>().ToTable("FranchiseDistrict", "Franchises");
            modelBuilder.Entity<FranchiseImage>().ToTable("FranchiseImage", "Franchises");
            modelBuilder.Entity<FranchiseImageType>().ToTable("FranchiseImageType", "Franchises");
            modelBuilder.Entity<FranchiseInventoryLocation>().ToTable("FranchiseInventoryLocation", "Franchises");
            modelBuilder.Entity<FranchiseInventoryLocationType>().ToTable("FranchiseInventoryLocationType", "Franchises");
            modelBuilder.Entity<FranchiseLanguage>().ToTable("FranchiseLanguage", "Franchises");
            modelBuilder.Entity<FranchiseManufacturer>().ToTable("FranchiseManufacturer", "Franchises");
            modelBuilder.Entity<FranchiseProduct>().ToTable("FranchiseProduct", "Franchises");
            modelBuilder.Entity<FranchiseRegion>().ToTable("FranchiseRegion", "Franchises");
            modelBuilder.Entity<FranchiseSiteDomain>().ToTable("FranchiseSiteDomain", "Franchises");
            modelBuilder.Entity<FranchiseStore>().ToTable("FranchiseStore", "Franchises");
            modelBuilder.Entity<FranchiseType>().ToTable("FranchiseType", "Franchises");
            modelBuilder.Entity<FranchiseUser>().ToTable("FranchiseUser", "Franchises");
            modelBuilder.Entity<FranchiseVendor>().ToTable("FranchiseVendor", "Franchises");
            #endregion
            #region Geography
            modelBuilder.Entity<Address>().ToTable("Address", "Geography");
            modelBuilder.Entity<Country>().ToTable("Country", "Geography");
            modelBuilder.Entity<CountryCurrency>().ToTable("CountryCurrency", "Geography");
            modelBuilder.Entity<CountryImage>().ToTable("CountryImage", "Geography");
            modelBuilder.Entity<CountryImageType>().ToTable("CountryImageType", "Geography");
            modelBuilder.Entity<CountryLanguage>().ToTable("CountryLanguage", "Geography");
            modelBuilder.Entity<District>().ToTable("District", "Geography");
            modelBuilder.Entity<DistrictCurrency>().ToTable("DistrictCurrency", "Geography");
            modelBuilder.Entity<DistrictImage>().ToTable("DistrictImage", "Geography");
            modelBuilder.Entity<DistrictImageType>().ToTable("DistrictImageType", "Geography");
            modelBuilder.Entity<DistrictLanguage>().ToTable("DistrictLanguage", "Geography");
            modelBuilder.Entity<HistoricalAddressValidation>().ToTable("HistoricalAddressValidation", "Geography");
            modelBuilder.Entity<PhonePrefixLookup>().ToTable("PhonePrefixLookup", "Geography");
            modelBuilder.Entity<Region>().ToTable("Region", "Geography");
            modelBuilder.Entity<RegionCurrency>().ToTable("RegionCurrency", "Geography");
            modelBuilder.Entity<RegionImage>().ToTable("RegionImage", "Geography");
            modelBuilder.Entity<RegionImageType>().ToTable("RegionImageType", "Geography");
            modelBuilder.Entity<RegionLanguage>().ToTable("RegionLanguage", "Geography");
            modelBuilder.Entity<ZipCode>().ToTable("ZipCode", "Geography");
            #endregion
            #region Globalization
            modelBuilder.Entity<Language>().ToTable("Language", "Globalization");
            modelBuilder.Entity<LanguageImage>().ToTable("LanguageImage", "Globalization");
            modelBuilder.Entity<LanguageImageType>().ToTable("LanguageImageType", "Globalization");
            modelBuilder.Entity<UiKey>().ToTable("UiKey", "Globalization");
            modelBuilder.Entity<UiTranslation>().ToTable("UiTranslation", "Globalization");
            #endregion
            #region Groups
            modelBuilder.Entity<Group>().ToTable("Group", "Groups");
            modelBuilder.Entity<GroupStatus>().ToTable("GroupStatus", "Groups");
            modelBuilder.Entity<GroupType>().ToTable("GroupType", "Groups");
            modelBuilder.Entity<GroupUser>().ToTable("GroupUser", "Groups");
            #endregion
            #region Hangfire
            modelBuilder.Entity<HangfireAggregatedCounter>().ToTable("AggregatedCounter", "Hangfire");
            modelBuilder.Entity<HangfireCounter>().ToTable("Counter", "Hangfire");
            modelBuilder.Entity<HangfireHash>().ToTable("Hash", "Hangfire");
            modelBuilder.Entity<HangfireJob>().ToTable("Job", "Hangfire");
            modelBuilder.Entity<HangfireJobParameter>().ToTable("JobParameter", "Hangfire");
            modelBuilder.Entity<HangfireJobQueue>().ToTable("JobQueue", "Hangfire");
            modelBuilder.Entity<HangfireList>().ToTable("List", "Hangfire");
            modelBuilder.Entity<ScheduledJobConfiguration>().ToTable("ScheduledJobConfiguration", "Hangfire");
            modelBuilder.Entity<ScheduledJobConfigurationSetting>().ToTable("ScheduledJobConfigurationSetting", "Hangfire");
            modelBuilder.Entity<HangfireSchema>().ToTable("Schema", "Hangfire");
            modelBuilder.Entity<HangfireServer>().ToTable("Server", "Hangfire");
            modelBuilder.Entity<HangfireSet>().ToTable("Set", "Hangfire");
            modelBuilder.Entity<HangfireState>().ToTable("State", "Hangfire");
            #endregion
            #region Inventory
            modelBuilder.Entity<InventoryLocation>().ToTable("InventoryLocation", "Inventory");
            modelBuilder.Entity<InventoryLocationRegion>().ToTable("InventoryLocationRegion", "Inventory");
            modelBuilder.Entity<InventoryLocationSection>().ToTable("InventoryLocationSection", "Inventory");
            modelBuilder.Entity<InventoryLocationUser>().ToTable("InventoryLocationUser", "Inventory");
            #endregion
            #region Invoicing
            modelBuilder.Entity<SalesInvoice>().ToTable("SalesInvoice", "Invoicing");
            modelBuilder.Entity<SalesInvoiceContact>().ToTable("SalesInvoiceContact", "Invoicing");
            modelBuilder.Entity<SalesInvoiceEvent>().ToTable("SalesInvoiceEvent", "Invoicing");
            modelBuilder.Entity<SalesInvoiceEventType>().ToTable("SalesInvoiceEventType", "Invoicing");
            modelBuilder.Entity<SalesInvoiceFile>().ToTable("SalesInvoiceFile", "Invoicing");
            modelBuilder.Entity<SalesInvoiceItem>().ToTable("SalesInvoiceItem", "Invoicing");
            modelBuilder.Entity<SalesInvoiceItemTarget>().ToTable("SalesInvoiceItemTarget", "Invoicing");
            modelBuilder.Entity<SalesInvoiceState>().ToTable("SalesInvoiceState", "Invoicing");
            modelBuilder.Entity<SalesInvoiceStatus>().ToTable("SalesInvoiceStatus", "Invoicing");
            modelBuilder.Entity<SalesInvoiceType>().ToTable("SalesInvoiceType", "Invoicing");
            modelBuilder.Entity<SalesOrderSalesInvoice>().ToTable("SalesOrderSalesInvoice", "Invoicing");
            #endregion
            #region Manufacturers
            modelBuilder.Entity<Manufacturer>().ToTable("Manufacturer", "Manufacturers");
            modelBuilder.Entity<ManufacturerImage>().ToTable("ManufacturerImage", "Manufacturers");
            modelBuilder.Entity<ManufacturerImageType>().ToTable("ManufacturerImageType", "Manufacturers");
            modelBuilder.Entity<ManufacturerProduct>().ToTable("ManufacturerProduct", "Manufacturers");
            modelBuilder.Entity<ManufacturerType>().ToTable("ManufacturerType", "Manufacturers");
            #endregion
            #region Media
            modelBuilder.Entity<StoredFile>().ToTable("StoredFile", "Media");
            #endregion
            #region Messaging
            modelBuilder.Entity<Conversation>().ToTable("Conversation", "Messaging");
            modelBuilder.Entity<ConversationUser>().ToTable("ConversationUser", "Messaging");
            modelBuilder.Entity<EmailQueue>().ToTable("EmailQueue", "Messaging");
            modelBuilder.Entity<EmailQueueAttachment>().ToTable("EmailQueueAttachment", "Messaging");
            modelBuilder.Entity<EmailStatus>().ToTable("EmailStatus", "Messaging");
            modelBuilder.Entity<EmailTemplate>().ToTable("EmailTemplate", "Messaging");
            modelBuilder.Entity<EmailType>().ToTable("EmailType", "Messaging");
            modelBuilder.Entity<Message>().ToTable("Message", "Messaging");
            modelBuilder.Entity<MessageAttachment>().ToTable("MessageAttachment", "Messaging");
            modelBuilder.Entity<MessageRecipient>().ToTable("MessageRecipient", "Messaging");
            modelBuilder.Entity<ProductNotification>().ToTable("ProductNotification", "Messaging");
            modelBuilder.Entity<UserSupportRequest>().ToTable("UserSupportRequest", "Messaging");
            #endregion
            #region Ordering
            modelBuilder.Entity<SalesOrder>().ToTable("SalesOrder", "Ordering");
            modelBuilder.Entity<SalesOrderContact>().ToTable("SalesOrderContact", "Ordering");
            modelBuilder.Entity<SalesOrderEvent>().ToTable("SalesOrderEvent", "Ordering");
            modelBuilder.Entity<SalesOrderEventType>().ToTable("SalesOrderEventType", "Ordering");
            modelBuilder.Entity<SalesOrderFile>().ToTable("SalesOrderFile", "Ordering");
            modelBuilder.Entity<SalesOrderItem>().ToTable("SalesOrderItem", "Ordering");
            modelBuilder.Entity<SalesOrderItemTarget>().ToTable("SalesOrderItemTarget", "Ordering");
            modelBuilder.Entity<SalesOrderState>().ToTable("SalesOrderState", "Ordering");
            modelBuilder.Entity<SalesOrderStatus>().ToTable("SalesOrderStatus", "Ordering");
            modelBuilder.Entity<SalesOrderType>().ToTable("SalesOrderType", "Ordering");
            #endregion
            #region Payments
            modelBuilder.Entity<Membership>().ToTable("Membership", "Payments");
            modelBuilder.Entity<MembershipAdZoneAccess>().ToTable("MembershipAdZoneAccess", "Payments");
            modelBuilder.Entity<MembershipAdZoneAccessByLevel>().ToTable("MembershipAdZoneAccessByLevel", "Payments");
            modelBuilder.Entity<MembershipLevel>().ToTable("MembershipLevel", "Payments");
            modelBuilder.Entity<MembershipRepeatType>().ToTable("MembershipRepeatType", "Payments");
            modelBuilder.Entity<Payment>().ToTable("Payment", "Payments");
            modelBuilder.Entity<PaymentMethod>().ToTable("PaymentMethod", "Payments");
            modelBuilder.Entity<PaymentStatus>().ToTable("PaymentStatus", "Payments");
            modelBuilder.Entity<PaymentType>().ToTable("PaymentType", "Payments");
            modelBuilder.Entity<RepeatType>().ToTable("RepeatType", "Payments");
            modelBuilder.Entity<SalesInvoicePayment>().ToTable("SalesInvoicePayment", "Payments");
            modelBuilder.Entity<SalesOrderPayment>().ToTable("SalesOrderPayment", "Payments");
            modelBuilder.Entity<SalesReturnPayment>().ToTable("SalesReturnPayment", "Payments");
            modelBuilder.Entity<Subscription>().ToTable("Subscription", "Payments");
            modelBuilder.Entity<SubscriptionHistory>().ToTable("SubscriptionHistory", "Payments");
            modelBuilder.Entity<SubscriptionStatus>().ToTable("SubscriptionStatus", "Payments");
            modelBuilder.Entity<SubscriptionType>().ToTable("SubscriptionType", "Payments");
            modelBuilder.Entity<SubscriptionTypeRepeatType>().ToTable("SubscriptionTypeRepeatType", "Payments");
            modelBuilder.Entity<Wallet>().ToTable("Wallet", "Payments");
            #endregion
            #region Pricing
            modelBuilder.Entity<PricePoint>().ToTable("PricePoint", "Pricing");
            modelBuilder.Entity<PriceRounding>().ToTable("PriceRounding", "Pricing");
            modelBuilder.Entity<PriceRule>().ToTable("PriceRule", "Pricing");
            modelBuilder.Entity<PriceRuleAccount>().ToTable("PriceRuleAccount", "Pricing");
            modelBuilder.Entity<PriceRuleAccountType>().ToTable("PriceRuleAccountType", "Pricing");
            modelBuilder.Entity<PriceRuleBrand>().ToTable("PriceRuleBrand", "Pricing");
            modelBuilder.Entity<PriceRuleCategory>().ToTable("PriceRuleCategory", "Pricing");
            modelBuilder.Entity<PriceRuleCountry>().ToTable("PriceRuleCountry", "Pricing");
            modelBuilder.Entity<PriceRuleFranchise>().ToTable("PriceRuleFranchise", "Pricing");
            modelBuilder.Entity<PriceRuleManufacturer>().ToTable("PriceRuleManufacturer", "Pricing");
            modelBuilder.Entity<PriceRuleProduct>().ToTable("PriceRuleProduct", "Pricing");
            modelBuilder.Entity<PriceRuleProductType>().ToTable("PriceRuleProductType", "Pricing");
            modelBuilder.Entity<PriceRuleStore>().ToTable("PriceRuleStore", "Pricing");
            modelBuilder.Entity<PriceRuleUserRole>().ToTable("PriceRuleUserRole", "Pricing");
            modelBuilder.Entity<PriceRuleVendor>().ToTable("PriceRuleVendor", "Pricing");
            #endregion
            #region Products
            modelBuilder.Entity<FutureImport>().ToTable("FutureImport", "Products");
            modelBuilder.Entity<FutureImportStatus>().ToTable("FutureImportStatus", "Products");
            modelBuilder.Entity<Product>().ToTable("Product", "Products");
            modelBuilder.Entity<ProductAssociation>().ToTable("ProductAssociation", "Products");
            modelBuilder.Entity<ProductAssociationType>().ToTable("ProductAssociationType", "Products");
            modelBuilder.Entity<ProductCategory>().ToTable("ProductCategory", "Products");
            modelBuilder.Entity<ProductDownload>().ToTable("ProductDownload", "Products");
            modelBuilder.Entity<ProductDownloadType>().ToTable("ProductDownloadType", "Products");
            modelBuilder.Entity<ProductFile>().ToTable("ProductFile", "Products");
            modelBuilder.Entity<ProductImage>().ToTable("ProductImage", "Products");
            modelBuilder.Entity<ProductImageType>().ToTable("ProductImageType", "Products");
            modelBuilder.Entity<ProductInventoryLocationSection>().ToTable("ProductInventoryLocationSection", "Products");
            modelBuilder.Entity<ProductMembershipLevel>().ToTable("ProductMembershipLevel", "Products");
            modelBuilder.Entity<ProductPricePoint>().ToTable("ProductPricePoint", "Products");
            modelBuilder.Entity<ProductRestriction>().ToTable("ProductRestriction", "Products");
            modelBuilder.Entity<ProductShipCarrierMethod>().ToTable("ProductShipCarrierMethod", "Products");
            modelBuilder.Entity<ProductStatus>().ToTable("ProductStatus", "Products");
            modelBuilder.Entity<ProductSubscriptionType>().ToTable("ProductSubscriptionType", "Products");
            modelBuilder.Entity<ProductType>().ToTable("ProductType", "Products");
            #endregion
            #region Purchasing
            modelBuilder.Entity<PurchaseOrder>().ToTable("PurchaseOrder", "Purchasing");
            modelBuilder.Entity<PurchaseOrderContact>().ToTable("PurchaseOrderContact", "Purchasing");
            modelBuilder.Entity<PurchaseOrderEvent>().ToTable("PurchaseOrderEvent", "Purchasing");
            modelBuilder.Entity<PurchaseOrderEventType>().ToTable("PurchaseOrderEventType", "Purchasing");
            modelBuilder.Entity<PurchaseOrderFile>().ToTable("PurchaseOrderFile", "Purchasing");
            modelBuilder.Entity<PurchaseOrderItem>().ToTable("PurchaseOrderItem", "Purchasing");
            modelBuilder.Entity<PurchaseOrderItemTarget>().ToTable("PurchaseOrderItemTarget", "Purchasing");
            modelBuilder.Entity<PurchaseOrderState>().ToTable("PurchaseOrderState", "Purchasing");
            modelBuilder.Entity<PurchaseOrderStatus>().ToTable("PurchaseOrderStatus", "Purchasing");
            modelBuilder.Entity<PurchaseOrderType>().ToTable("PurchaseOrderType", "Purchasing");
            modelBuilder.Entity<SalesOrderPurchaseOrder>().ToTable("SalesOrderPurchaseOrder", "Purchasing");
            #endregion
            #region Questionnaire
            modelBuilder.Entity<Answer>().ToTable("Answer", "Questionnaire");
            modelBuilder.Entity<Question>().ToTable("Question", "Questionnaire");
            modelBuilder.Entity<QuestionOption>().ToTable("QuestionOption", "Questionnaire");
            modelBuilder.Entity<QuestionType>().ToTable("QuestionType", "Questionnaire");
            #endregion
            #region Quoting
            modelBuilder.Entity<SalesQuote>().ToTable("SalesQuote", "Quoting");
            modelBuilder.Entity<SalesQuoteCategory>().ToTable("SalesQuoteCategory", "Quoting");
            modelBuilder.Entity<SalesQuoteContact>().ToTable("SalesQuoteContact", "Quoting");
            modelBuilder.Entity<SalesQuoteEvent>().ToTable("SalesQuoteEvent", "Quoting");
            modelBuilder.Entity<SalesQuoteEventType>().ToTable("SalesQuoteEventType", "Quoting");
            modelBuilder.Entity<SalesQuoteFile>().ToTable("SalesQuoteFile", "Quoting");
            modelBuilder.Entity<SalesQuoteItem>().ToTable("SalesQuoteItem", "Quoting");
            modelBuilder.Entity<SalesQuoteItemTarget>().ToTable("SalesQuoteItemTarget", "Quoting");
            modelBuilder.Entity<SalesQuoteSalesOrder>().ToTable("SalesQuoteSalesOrder", "Quoting");
            modelBuilder.Entity<SalesQuoteState>().ToTable("SalesQuoteState", "Quoting");
            modelBuilder.Entity<SalesQuoteStatus>().ToTable("SalesQuoteStatus", "Quoting");
            modelBuilder.Entity<SalesQuoteType>().ToTable("SalesQuoteType", "Quoting");
            #endregion
            #region Reporting
            modelBuilder.Entity<Report>().ToTable("Reports", "Reporting");
            modelBuilder.Entity<ReportType>().ToTable("ReportTypes", "Reporting");
            #endregion
            #region Returning
            modelBuilder.Entity<SalesReturn>().ToTable("SalesReturn", "Returning");
            modelBuilder.Entity<SalesReturnContact>().ToTable("SalesReturnContact", "Returning");
            modelBuilder.Entity<SalesReturnEvent>().ToTable("SalesReturnEvent", "Returning");
            modelBuilder.Entity<SalesReturnEventType>().ToTable("SalesReturnEventType", "Returning");
            modelBuilder.Entity<SalesReturnFile>().ToTable("SalesReturnFile", "Returning");
            modelBuilder.Entity<SalesReturnItem>().ToTable("SalesReturnItem", "Returning");
            modelBuilder.Entity<SalesReturnItemTarget>().ToTable("SalesReturnItemTarget", "Returning");
            modelBuilder.Entity<SalesReturnReason>().ToTable("SalesReturnReason", "Returning");
            modelBuilder.Entity<SalesReturnSalesOrder>().ToTable("SalesReturnSalesOrder", "Returning");
            modelBuilder.Entity<SalesReturnState>().ToTable("SalesReturnState", "Returning");
            modelBuilder.Entity<SalesReturnStatus>().ToTable("SalesReturnStatus", "Returning");
            modelBuilder.Entity<SalesReturnType>().ToTable("SalesReturnType", "Returning");
            #endregion
            #region Reviews
            modelBuilder.Entity<Review>().ToTable("Review", "Reviews");
            modelBuilder.Entity<ReviewType>().ToTable("ReviewType", "Reviews");
            #endregion
            #region Sales
            modelBuilder.Entity<SalesGroup>().ToTable("SalesGroup", "Sales");
            modelBuilder.Entity<SalesItemTargetType>().ToTable("SalesItemTargetType", "Sales");
            #endregion
            #region Sampling
            modelBuilder.Entity<SampleRequest>().ToTable("SampleRequest", "Sampling");
            modelBuilder.Entity<SampleRequestContact>().ToTable("SampleRequestContact", "Sampling");
            modelBuilder.Entity<SampleRequestEvent>().ToTable("SampleRequestEvent", "Sampling");
            modelBuilder.Entity<SampleRequestEventType>().ToTable("SampleRequestEventType", "Sampling");
            modelBuilder.Entity<SampleRequestFile>().ToTable("SampleRequestFile", "Sampling");
            modelBuilder.Entity<SampleRequestItem>().ToTable("SampleRequestItem", "Sampling");
            modelBuilder.Entity<SampleRequestItemTarget>().ToTable("SampleRequestItemTarget", "Sampling");
            modelBuilder.Entity<SampleRequestState>().ToTable("SampleRequestState", "Sampling");
            modelBuilder.Entity<SampleRequestStatus>().ToTable("SampleRequestStatus", "Sampling");
            modelBuilder.Entity<SampleRequestType>().ToTable("SampleRequestType", "Sampling");
            #endregion
            #region Scheduling
            modelBuilder.Entity<Appointment>().ToTable("Appointment", "Scheduling");
            modelBuilder.Entity<AppointmentStatus>().ToTable("AppointmentStatus", "Scheduling");
            modelBuilder.Entity<AppointmentType>().ToTable("AppointmentType", "Scheduling");
            modelBuilder.Entity<Calendar>().ToTable("Calendar", "Scheduling");
            modelBuilder.Entity<CalendarAppointment>().ToTable("CalendarAppointment", "Scheduling");
            #endregion
            #region Scouting
            modelBuilder.Entity<Scout>().ToTable("Scout", "Scouting");
            modelBuilder.Entity<ScoutCategory>().ToTable("ScoutCategory", "Scouting");
            modelBuilder.Entity<ScoutCategoryType>().ToTable("ScoutCategoryType", "Scouting");
            #endregion
            #region Shipping
            modelBuilder.Entity<Package>().ToTable("Package", "Shipping");
            modelBuilder.Entity<PackageType>().ToTable("PackageType", "Shipping");
            modelBuilder.Entity<RateQuote>().ToTable("RateQuote", "Shipping");
            modelBuilder.Entity<ShipCarrier>().ToTable("ShipCarrier", "Shipping");
            modelBuilder.Entity<ShipCarrierMethod>().ToTable("ShipCarrierMethod", "Shipping");
            modelBuilder.Entity<Shipment>().ToTable("Shipment", "Shipping");
            modelBuilder.Entity<ShipmentEvent>().ToTable("ShipmentEvent", "Shipping");
            modelBuilder.Entity<ShipmentStatus>().ToTable("ShipmentStatus", "Shipping");
            modelBuilder.Entity<ShipmentType>().ToTable("ShipmentType", "Shipping");
            #endregion
            #region Shopping
            modelBuilder.Entity<Cart>().ToTable("Cart", "Shopping");
            modelBuilder.Entity<CartContact>().ToTable("CartContact", "Shopping");
            modelBuilder.Entity<CartEvent>().ToTable("CartEvent", "Shopping");
            modelBuilder.Entity<CartEventType>().ToTable("CartEventType", "Shopping");
            modelBuilder.Entity<CartFile>().ToTable("CartFile", "Shopping");
            modelBuilder.Entity<CartItem>().ToTable("CartItem", "Shopping");
            modelBuilder.Entity<CartItemTarget>().ToTable("CartItemTarget", "Shopping");
            modelBuilder.Entity<CartState>().ToTable("CartState", "Shopping");
            modelBuilder.Entity<CartStatus>().ToTable("CartStatus", "Shopping");
            modelBuilder.Entity<CartType>().ToTable("CartType", "Shopping");
            #endregion
            #region Stores
            modelBuilder.Entity<SiteDomain>().ToTable("SiteDomain", "Stores");
            modelBuilder.Entity<SiteDomainSocialProvider>().ToTable("SiteDomainSocialProvider", "Stores");
            modelBuilder.Entity<SocialProvider>().ToTable("SocialProvider", "Stores");
            modelBuilder.Entity<Store>().ToTable("Store", "Stores");
            modelBuilder.Entity<StoreAccount>().ToTable("StoreAccount", "Stores");
            modelBuilder.Entity<StoreBadge>().ToTable("StoreBadge", "Stores");
            modelBuilder.Entity<StoreCategory>().ToTable("StoreCategory", "Stores");
            modelBuilder.Entity<StoreContact>().ToTable("StoreContact", "Stores");
            modelBuilder.Entity<StoreCountry>().ToTable("StoreCountry", "Stores");
            modelBuilder.Entity<StoreDistrict>().ToTable("StoreDistrict", "Stores");
            modelBuilder.Entity<StoreImage>().ToTable("StoreImage", "Stores");
            modelBuilder.Entity<StoreImageType>().ToTable("StoreImageType", "Stores");
            modelBuilder.Entity<StoreInventoryLocation>().ToTable("StoreInventoryLocation", "Stores");
            modelBuilder.Entity<StoreInventoryLocationType>().ToTable("StoreInventoryLocationType", "Stores");
            modelBuilder.Entity<StoreManufacturer>().ToTable("StoreManufacturer", "Stores");
            modelBuilder.Entity<StoreProduct>().ToTable("StoreProduct", "Stores");
            modelBuilder.Entity<StoreRegion>().ToTable("StoreRegion", "Stores");
            modelBuilder.Entity<StoreSubscription>().ToTable("StoreSubscription", "Stores");
            modelBuilder.Entity<StoreType>().ToTable("StoreType", "Stores");
            modelBuilder.Entity<StoreUser>().ToTable("StoreUser", "Stores");
            modelBuilder.Entity<StoreVendor>().ToTable("StoreVendor", "Stores");
            #endregion
            #region System
            modelBuilder.Entity<ImportExportMapping>().ToTable("ImportExportMapping", "System");
            modelBuilder.Entity<Note>().ToTable("Note", "System");
            modelBuilder.Entity<NoteType>().ToTable("NoteType", "System");
            modelBuilder.Entity<RecordVersion>().ToTable("RecordVersion", "System");
            modelBuilder.Entity<RecordVersionType>().ToTable("RecordVersionType", "System");
            modelBuilder.Entity<Setting>().ToTable("Setting", "System");
            modelBuilder.Entity<SettingGroup>().ToTable("SettingGroup", "System");
            modelBuilder.Entity<SettingType>().ToTable("SettingType", "System");
            modelBuilder.Entity<EventLog>().ToTable("SystemLog", "System");
            #endregion
            #region Tax
            modelBuilder.Entity<HistoricalTaxRate>().ToTable("HistoricalTaxRate", "Tax");
            modelBuilder.Entity<TaxCountry>().ToTable("TaxCountry", "Tax");
            modelBuilder.Entity<TaxDistrict>().ToTable("TaxDistrict", "Tax");
            modelBuilder.Entity<TaxRegion>().ToTable("TaxRegion", "Tax");
            #endregion
            #region Tracking
            modelBuilder.Entity<Campaign>().ToTable("Campaign", "Tracking");
            modelBuilder.Entity<CampaignAd>().ToTable("CampaignAd", "Tracking");
            modelBuilder.Entity<CampaignStatus>().ToTable("CampaignStatus", "Tracking");
            modelBuilder.Entity<CampaignType>().ToTable("CampaignType", "Tracking");
            modelBuilder.Entity<Event>().ToTable("Event", "Tracking");
            modelBuilder.Entity<EventStatus>().ToTable("EventStatus", "Tracking");
            modelBuilder.Entity<EventType>().ToTable("EventType", "Tracking");
            modelBuilder.Entity<IPOrganization>().ToTable("IPOrganization", "Tracking");
            modelBuilder.Entity<IPOrganizationStatus>().ToTable("IPOrganizationStatus", "Tracking");
            modelBuilder.Entity<PageView>().ToTable("PageView", "Tracking");
            modelBuilder.Entity<PageViewEvent>().ToTable("PageViewEvent", "Tracking");
            modelBuilder.Entity<PageViewStatus>().ToTable("PageViewStatus", "Tracking");
            modelBuilder.Entity<PageViewType>().ToTable("PageViewType", "Tracking");
            modelBuilder.Entity<Visit>().ToTable("Visit", "Tracking");
            modelBuilder.Entity<Visitor>().ToTable("Visitor", "Tracking");
            modelBuilder.Entity<VisitStatus>().ToTable("VisitStatus", "Tracking");
            #endregion
            #region Vendors
            modelBuilder.Entity<Vendor>().ToTable("Vendor", "Vendors");
            modelBuilder.Entity<VendorAccount>().ToTable("VendorAccount", "Vendors");
            modelBuilder.Entity<VendorImage>().ToTable("VendorImage", "Vendors");
            modelBuilder.Entity<VendorImageType>().ToTable("VendorImageType", "Vendors");
            modelBuilder.Entity<VendorManufacturer>().ToTable("VendorManufacturer", "Vendors");
            modelBuilder.Entity<VendorProduct>().ToTable("VendorProduct", "Vendors");
            modelBuilder.Entity<VendorType>().ToTable("VendorType", "Vendors");
            #endregion
        }
    }
}
