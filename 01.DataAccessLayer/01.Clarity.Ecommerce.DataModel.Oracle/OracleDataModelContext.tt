<#@ template language="C#"#><#@
assembly name="System" #><#@
assembly name="System.Core" #><#@
assembly name="System.ComponentModel.DataAnnotations" #><#@
assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll" #><#@
assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel.Net5\bin\Debug\net5.0\Clarity.Ecommerce.DataModel.Net5.dll" #><#@
assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net5.0\CodeGenerator.dll" #><#@
import namespace="System.Collections.Generic" #><#@
import namespace="System.ComponentModel.DataAnnotations.Schema" #><#@
import namespace="System.Linq" #><#@
import namespace="Clarity.Ecommerce.DataModel" #><#@
import namespace="CodeGenerator" #><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
#>// <autogenerated>
// <copyright file="OracleDataModelContext.cs" company="clarity-ventures.com">
// Copyright (c) <#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the IClarityEcommerceEntities interface and Concrete classes with all of the tables listed for Oracle</summary>
// <remarks>This file was auto-generated by DataModelContext.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
namespace Clarity.Ecommerce.DataModel.Oracle
{
    using System.Data.Entity;
    using Interfaces.DataModel;

    public partial class OracleClarityEcommerceEntities : IClarityEcommerceEntities
    {
        public string ContextProfileName { get; set; }
<#  foreach (var group in tableClasses) { #>
        #region <#= group.Key.ToString() #>
<#      foreach (var theType in group) {
            if (theType.Name == "User" || theType.Name == "UserRole") { continue; }
            var td = new TypeDeterminer(theType);
            if (td.IsDeprecated) { #>
        [Obsolete("<#= td.DeprecatedMessage #>", false)]
<#          } #>
        public IDbSet<<#= theType.Name #>> <#= HelpFunctions.PluralizeName(theType) #> { get; set; }
<#      } #>
        #endregion
<#  } #>

        private static void OnModelCreatingDates(DbModelBuilder modelBuilder)
        {
<#          var skips = new[]
            {
                "Permission", "RolePermission", "RoleUser", "UserClaim", "UserLogin", "UserRole",
            };
            var alts = new[]
            {
                "HangfireAggregatedCounter", "HangfireCounter", "HangfireHash", "HangfireJob", "HangfireJobParameter",
                "HangfireJobQueue", "HangfireList", "HangfireSchema", "HangfireServer", "HangfireSet", "HangfireState"
            };
            foreach (var group in tableClasses)
            { #>
            #region <#= group.Key.ToString() #>
<#              foreach (var theType in group)
                {
                    if (skips.Contains(theType.Name)) { continue; } #>
<#                  var dateProperties = theType.GetProperties()
                        .Where(x => x.PropertyType == typeof(DateTime) || x.PropertyType == typeof(DateTime?))
                        .Where(x => x.Name != "MediaDate" && x.Name != "ViewedOn");
                    foreach (var dateProp in dateProperties)
                    { #>
<#                      if (alts.Contains(theType.Name)) { #>
            modelBuilder.Entity<<#= theType.Name #>>().Property(x => x.<#= dateProp.Name #>).HasColumnType("date");
<#                      } else { #>
            modelBuilder.Entity<<#= theType.Name #>>().Property(x => x.<#= dateProp.Name #>)/*.HasColumnType("timestamp")*/.HasPrecision(6);
<#                      } #>
<#                  } #>
<#              } #>
            #endregion
<#          } #>
            modelBuilder.Entity<RoleUser>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RoleUser>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
        }

        private static void OnModelCreatingSchemas(DbModelBuilder modelBuilder)
        {
<#          foreach (var group in tableClasses)
            { #>
            #region <#= group.Key.ToString() #>
<#              foreach (var theType in group)
                { #>
            modelBuilder.Entity<<#= theType.Name #>>().ToTable("<#= theType.Name.Replace("Applied", string.Empty)
                        /*.Replace("Hangfire", string.Empty)*/.Replace("EventLog", "SystemLog").Replace("DiscountCategory", "DiscountCategories")
                    + (((theType.Name.EndsWith("Discount") || theType.Name.StartsWith("Discount")) && theType.Name != "Discount"
                        && theType.Name != "DiscountAccount" && theType.Name != "DiscountAccountType" && theType.Name != "DiscountCode"
                        && theType.Name != "DiscountCategory" && theType.Name != "DiscountCountry" && theType.Name != "DiscountManufacturer"
                        && theType.Name != "DiscountProductType" && theType.Name != "DiscountUserRole" && theType.Name != "DiscountUser"
                        && theType.Name != "DiscountVendor"
                        || theType.Name == "CalendarEventProduct"
                        || theType.Name == "Report"
                        || theType.Name == "ReportType")
                        ? "s" : string.Empty) #>", OracleUser.ToUpper());
<#              } #>
            #endregion
<#          } #>
        }
    }
}
