// <autogenerated>
// <copyright file="OracleDataModelContext.cs" company="clarity-ventures.com">
// Copyright (c) 2020-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the IClarityEcommerceEntities interface and Concrete classes with all of the tables listed for Oracle</summary>
// <remarks>This file was auto-generated by DataModelContext.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
namespace Clarity.Ecommerce.DataModel.Oracle
{
    using System.Data.Entity;
    using Interfaces.DataModel;

    public partial class OracleClarityEcommerceEntities : IClarityEcommerceEntities
    {
        public string ContextProfileName { get; set; }
        #region Accounts
        public IDbSet<Account> Accounts { get; set; }
        public IDbSet<AccountAssociation> AccountAssociations { get; set; }
        public IDbSet<AccountAssociationType> AccountAssociationTypes { get; set; }
        public IDbSet<AccountContact> AccountContacts { get; set; }
        public IDbSet<AccountCurrency> AccountCurrencies { get; set; }
        public IDbSet<AccountFile> AccountFiles { get; set; }
        public IDbSet<AccountImage> AccountImages { get; set; }
        public IDbSet<AccountImageType> AccountImageTypes { get; set; }
        public IDbSet<AccountPricePoint> AccountPricePoints { get; set; }
        public IDbSet<AccountProduct> AccountProducts { get; set; }
        public IDbSet<AccountProductType> AccountProductTypes { get; set; }
        public IDbSet<AccountStatus> AccountStatuses { get; set; }
        public IDbSet<AccountType> AccountTypes { get; set; }
        public IDbSet<AccountUsageBalance> AccountUsageBalances { get; set; }
        public IDbSet<AccountUserRole> AccountUserRoles { get; set; }
        #endregion
        #region Advertising
        public IDbSet<Ad> Ads { get; set; }
        public IDbSet<AdAccount> AdAccounts { get; set; }
        public IDbSet<AdBrand> AdBrands { get; set; }
        public IDbSet<AdImage> AdImages { get; set; }
        public IDbSet<AdImageType> AdImageTypes { get; set; }
        public IDbSet<AdStatus> AdStatuses { get; set; }
        public IDbSet<AdStore> AdStores { get; set; }
        public IDbSet<AdType> AdTypes { get; set; }
        public IDbSet<AdZone> AdZones { get; set; }
        public IDbSet<AdZoneAccess> AdZoneAccesses { get; set; }
        public IDbSet<Zone> Zones { get; set; }
        public IDbSet<ZoneStatus> ZoneStatuses { get; set; }
        public IDbSet<ZoneType> ZoneTypes { get; set; }
        #endregion
        #region Attributes
        public IDbSet<AttributeGroup> AttributeGroups { get; set; }
        public IDbSet<AttributeTab> AttributeTabs { get; set; }
        public IDbSet<AttributeType> AttributeTypes { get; set; }
        public IDbSet<GeneralAttribute> GeneralAttributes { get; set; }
        public IDbSet<GeneralAttributePredefinedOption> GeneralAttributePredefinedOptions { get; set; }
        #endregion
        #region Badges
        public IDbSet<Badge> Badges { get; set; }
        public IDbSet<BadgeImage> BadgeImages { get; set; }
        public IDbSet<BadgeImageType> BadgeImageTypes { get; set; }
        public IDbSet<BadgeType> BadgeTypes { get; set; }
        #endregion
        #region Brands
        public IDbSet<Brand> Brands { get; set; }
        public IDbSet<BrandAccount> BrandAccounts { get; set; }
        public IDbSet<BrandCategory> BrandCategories { get; set; }
        public IDbSet<BrandCurrency> BrandCurrencies { get; set; }
        public IDbSet<BrandImage> BrandImages { get; set; }
        public IDbSet<BrandImageType> BrandImageTypes { get; set; }
        public IDbSet<BrandInventoryLocation> BrandInventoryLocations { get; set; }
        public IDbSet<BrandInventoryLocationType> BrandInventoryLocationTypes { get; set; }
        public IDbSet<BrandLanguage> BrandLanguages { get; set; }
        public IDbSet<BrandProduct> BrandProducts { get; set; }
        public IDbSet<BrandSiteDomain> BrandSiteDomains { get; set; }
        public IDbSet<BrandStore> BrandStores { get; set; }
        public IDbSet<BrandUser> BrandUsers { get; set; }
        #endregion
        #region CalendarEvents
        public IDbSet<CalendarEvent> CalendarEvents { get; set; }
        public IDbSet<CalendarEventDetail> CalendarEventDetails { get; set; }
        public IDbSet<CalendarEventFile> CalendarEventFiles { get; set; }
        public IDbSet<CalendarEventImage> CalendarEventImages { get; set; }
        public IDbSet<CalendarEventImageType> CalendarEventImageTypes { get; set; }
        public IDbSet<CalendarEventProduct> CalendarEventProducts { get; set; }
        public IDbSet<CalendarEventStatus> CalendarEventStatuses { get; set; }
        public IDbSet<CalendarEventType> CalendarEventTypes { get; set; }
        public IDbSet<UserEventAttendance> UserEventAttendances { get; set; }
        public IDbSet<UserEventAttendanceType> UserEventAttendanceTypes { get; set; }
        #endregion
        #region Categories
        public IDbSet<Category> Categories { get; set; }
        public IDbSet<CategoryFile> CategoryFiles { get; set; }
        public IDbSet<CategoryImage> CategoryImages { get; set; }
        public IDbSet<CategoryImageType> CategoryImageTypes { get; set; }
        public IDbSet<CategoryType> CategoryTypes { get; set; }
        #endregion
        #region Contacts
        public IDbSet<Contact> Contacts { get; set; }
        public IDbSet<ContactImage> ContactImages { get; set; }
        public IDbSet<ContactImageType> ContactImageTypes { get; set; }
        public IDbSet<ContactType> ContactTypes { get; set; }
        public IDbSet<Permission> Permissions { get; set; }
        public IDbSet<ProfanityFilter> ProfanityFilters { get; set; }
        public IDbSet<ReferralCode> ReferralCodes { get; set; }
        public IDbSet<ReferralCodeStatus> ReferralCodeStatuses { get; set; }
        public IDbSet<ReferralCodeType> ReferralCodeTypes { get; set; }
        public IDbSet<RolePermission> RolePermissions { get; set; }
        public IDbSet<RoleUser> RoleUsers { get; set; }
        public IDbSet<UserClaim> UserClaims { get; set; }
        public IDbSet<UserFile> UserFiles { get; set; }
        public IDbSet<UserImage> UserImages { get; set; }
        public IDbSet<UserImageType> UserImageTypes { get; set; }
        public IDbSet<UserLogin> UserLogins { get; set; }
        public IDbSet<UserOnlineStatus> UserOnlineStatuses { get; set; }
        public IDbSet<UserProductType> UserProductTypes { get; set; }
        public IDbSet<UserStatus> UserStatuses { get; set; }
        public IDbSet<UserType> UserTypes { get; set; }
        #endregion
        #region Counters
        public IDbSet<Counter> Counters { get; set; }
        public IDbSet<CounterLog> CounterLogs { get; set; }
        public IDbSet<CounterLogType> CounterLogTypes { get; set; }
        public IDbSet<CounterType> CounterTypes { get; set; }
        #endregion
        #region Currencies
        public IDbSet<Currency> Currencies { get; set; }
        public IDbSet<CurrencyConversion> CurrencyConversions { get; set; }
        public IDbSet<CurrencyImage> CurrencyImages { get; set; }
        public IDbSet<CurrencyImageType> CurrencyImageTypes { get; set; }
        public IDbSet<HistoricalCurrencyRate> HistoricalCurrencyRates { get; set; }
        #endregion
        #region Discounts
        public IDbSet<AppliedCartDiscount> AppliedCartDiscounts { get; set; }
        public IDbSet<AppliedCartItemDiscount> AppliedCartItemDiscounts { get; set; }
        public IDbSet<Discount> Discounts { get; set; }
        public IDbSet<DiscountAccount> DiscountAccounts { get; set; }
        public IDbSet<DiscountAccountType> DiscountAccountTypes { get; set; }
        public IDbSet<DiscountBrand> DiscountBrands { get; set; }
        public IDbSet<DiscountCategory> DiscountCategories { get; set; }
        public IDbSet<DiscountCode> DiscountCodes { get; set; }
        public IDbSet<DiscountCountry> DiscountCountries { get; set; }
        public IDbSet<DiscountManufacturer> DiscountManufacturers { get; set; }
        public IDbSet<DiscountProduct> DiscountProducts { get; set; }
        public IDbSet<DiscountProductType> DiscountProductTypes { get; set; }
        public IDbSet<DiscountShipCarrierMethod> DiscountShipCarrierMethods { get; set; }
        public IDbSet<DiscountStore> DiscountStores { get; set; }
        public IDbSet<DiscountUser> DiscountUsers { get; set; }
        public IDbSet<DiscountUserRole> DiscountUserRoles { get; set; }
        public IDbSet<DiscountVendor> DiscountVendors { get; set; }
        public IDbSet<AppliedPurchaseOrderDiscount> AppliedPurchaseOrderDiscounts { get; set; }
        public IDbSet<AppliedPurchaseOrderItemDiscount> AppliedPurchaseOrderItemDiscounts { get; set; }
        public IDbSet<AppliedSalesInvoiceDiscount> AppliedSalesInvoiceDiscounts { get; set; }
        public IDbSet<AppliedSalesInvoiceItemDiscount> AppliedSalesInvoiceItemDiscounts { get; set; }
        public IDbSet<AppliedSalesOrderDiscount> AppliedSalesOrderDiscounts { get; set; }
        public IDbSet<AppliedSalesOrderItemDiscount> AppliedSalesOrderItemDiscounts { get; set; }
        public IDbSet<AppliedSalesQuoteDiscount> AppliedSalesQuoteDiscounts { get; set; }
        public IDbSet<AppliedSalesQuoteItemDiscount> AppliedSalesQuoteItemDiscounts { get; set; }
        public IDbSet<AppliedSalesReturnDiscount> AppliedSalesReturnDiscounts { get; set; }
        public IDbSet<AppliedSalesReturnItemDiscount> AppliedSalesReturnItemDiscounts { get; set; }
        public IDbSet<AppliedSampleRequestDiscount> AppliedSampleRequestDiscounts { get; set; }
        public IDbSet<AppliedSampleRequestItemDiscount> AppliedSampleRequestItemDiscounts { get; set; }
        #endregion
        #region Favorites
        public IDbSet<FavoriteCategory> FavoriteCategories { get; set; }
        public IDbSet<FavoriteManufacturer> FavoriteManufacturers { get; set; }
        public IDbSet<FavoriteShipCarrier> FavoriteShipCarriers { get; set; }
        public IDbSet<FavoriteStore> FavoriteStores { get; set; }
        public IDbSet<FavoriteVendor> FavoriteVendors { get; set; }
        #endregion
        #region Geography
        public IDbSet<Address> Addresses { get; set; }
        public IDbSet<Country> Countries { get; set; }
        public IDbSet<CountryCurrency> CountryCurrencies { get; set; }
        public IDbSet<CountryImage> CountryImages { get; set; }
        public IDbSet<CountryImageType> CountryImageTypes { get; set; }
        public IDbSet<CountryLanguage> CountryLanguages { get; set; }
        public IDbSet<HistoricalAddressValidation> HistoricalAddressValidations { get; set; }
        public IDbSet<PhonePrefixLookup> PhonePrefixLookups { get; set; }
        public IDbSet<Region> Regions { get; set; }
        public IDbSet<RegionCurrency> RegionCurrencies { get; set; }
        public IDbSet<RegionImage> RegionImages { get; set; }
        public IDbSet<RegionImageType> RegionImageTypes { get; set; }
        public IDbSet<RegionLanguage> RegionLanguages { get; set; }
        public IDbSet<ZipCode> ZipCodes { get; set; }
        #endregion
        #region Globalization
        public IDbSet<Language> Languages { get; set; }
        public IDbSet<LanguageImage> LanguageImages { get; set; }
        public IDbSet<LanguageImageType> LanguageImageTypes { get; set; }
        public IDbSet<UiKey> UiKeys { get; set; }
        public IDbSet<UiTranslation> UiTranslations { get; set; }
        #endregion
        #region Groups
        public IDbSet<Group> Groups { get; set; }
        public IDbSet<GroupStatus> GroupStatuses { get; set; }
        public IDbSet<GroupType> GroupTypes { get; set; }
        public IDbSet<GroupUser> GroupUsers { get; set; }
        #endregion
        #region Hangfire
        public IDbSet<HangfireAggregatedCounter> HangfireAggregatedCounters { get; set; }
        public IDbSet<HangfireCounter> HangfireCounters { get; set; }
        public IDbSet<HangfireHash> HangfireHashes { get; set; }
        public IDbSet<HangfireJob> HangfireJobs { get; set; }
        public IDbSet<HangfireJobParameter> HangfireJobParameters { get; set; }
        public IDbSet<HangfireJobQueue> HangfireJobQueues { get; set; }
        public IDbSet<HangfireList> HangfireLists { get; set; }
        public IDbSet<ScheduledJobConfiguration> ScheduledJobConfigurations { get; set; }
        public IDbSet<ScheduledJobConfigurationSetting> ScheduledJobConfigurationSettings { get; set; }
        public IDbSet<HangfireSchema> HangfireSchemas { get; set; }
        public IDbSet<HangfireServer> HangfireServers { get; set; }
        public IDbSet<HangfireSet> HangfireSets { get; set; }
        public IDbSet<HangfireState> HangfireStates { get; set; }
        #endregion
        #region Inventory
        public IDbSet<InventoryLocation> InventoryLocations { get; set; }
        public IDbSet<InventoryLocationRegion> InventoryLocationRegions { get; set; }
        public IDbSet<InventoryLocationSection> InventoryLocationSections { get; set; }
        #endregion
        #region Invoicing
        public IDbSet<SalesInvoice> SalesInvoices { get; set; }
        public IDbSet<SalesInvoiceContact> SalesInvoiceContacts { get; set; }
        public IDbSet<SalesInvoiceFile> SalesInvoiceFiles { get; set; }
        public IDbSet<SalesInvoiceItem> SalesInvoiceItems { get; set; }
        public IDbSet<SalesInvoiceItemTarget> SalesInvoiceItemTargets { get; set; }
        public IDbSet<SalesInvoiceState> SalesInvoiceStates { get; set; }
        public IDbSet<SalesInvoiceStatus> SalesInvoiceStatuses { get; set; }
        public IDbSet<SalesInvoiceType> SalesInvoiceTypes { get; set; }
        public IDbSet<SalesOrderSalesInvoice> SalesOrderSalesInvoices { get; set; }
        #endregion
        #region Manufacturers
        public IDbSet<Manufacturer> Manufacturers { get; set; }
        public IDbSet<ManufacturerImage> ManufacturerImages { get; set; }
        public IDbSet<ManufacturerImageType> ManufacturerImageTypes { get; set; }
        public IDbSet<ManufacturerProduct> ManufacturerProducts { get; set; }
        public IDbSet<ManufacturerType> ManufacturerTypes { get; set; }
        #endregion
        #region Media
        public IDbSet<StoredFile> StoredFiles { get; set; }
        #endregion
        #region Messaging
        public IDbSet<Conversation> Conversations { get; set; }
        public IDbSet<ConversationUser> ConversationUsers { get; set; }
        public IDbSet<EmailQueue> EmailQueues { get; set; }
        public IDbSet<EmailQueueAttachment> EmailQueueAttachments { get; set; }
        public IDbSet<EmailStatus> EmailStatuses { get; set; }
        public IDbSet<EmailTemplate> EmailTemplates { get; set; }
        public IDbSet<EmailType> EmailTypes { get; set; }
        public IDbSet<Message> Messages { get; set; }
        public IDbSet<MessageAttachment> MessageAttachments { get; set; }
        public IDbSet<MessageRecipient> MessageRecipients { get; set; }
        public IDbSet<ProductNotification> ProductNotifications { get; set; }
        #endregion
        #region Ordering
        public IDbSet<SalesOrder> SalesOrders { get; set; }
        public IDbSet<SalesOrderContact> SalesOrderContacts { get; set; }
        public IDbSet<SalesOrderEvent> SalesOrderEvents { get; set; }
        public IDbSet<SalesOrderFile> SalesOrderFiles { get; set; }
        public IDbSet<SalesOrderItem> SalesOrderItems { get; set; }
        public IDbSet<SalesOrderItemTarget> SalesOrderItemTargets { get; set; }
        public IDbSet<SalesOrderState> SalesOrderStates { get; set; }
        public IDbSet<SalesOrderStatus> SalesOrderStatuses { get; set; }
        public IDbSet<SalesOrderType> SalesOrderTypes { get; set; }
        #endregion
        #region Payments
        public IDbSet<Membership> Memberships { get; set; }
        public IDbSet<MembershipAdZoneAccess> MembershipAdZoneAccesses { get; set; }
        public IDbSet<MembershipAdZoneAccessByLevel> MembershipAdZoneAccessByLevels { get; set; }
        public IDbSet<MembershipLevel> MembershipLevels { get; set; }
        public IDbSet<MembershipRepeatType> MembershipRepeatTypes { get; set; }
        public IDbSet<Payment> Payments { get; set; }
        public IDbSet<PaymentMethod> PaymentMethods { get; set; }
        public IDbSet<PaymentStatus> PaymentStatuses { get; set; }
        public IDbSet<PaymentType> PaymentTypes { get; set; }
        public IDbSet<RepeatType> RepeatTypes { get; set; }
        public IDbSet<SalesInvoicePayment> SalesInvoicePayments { get; set; }
        public IDbSet<SalesOrderPayment> SalesOrderPayments { get; set; }
        public IDbSet<SalesReturnPayment> SalesReturnPayments { get; set; }
        public IDbSet<Subscription> Subscriptions { get; set; }
        public IDbSet<SubscriptionHistory> SubscriptionHistories { get; set; }
        public IDbSet<SubscriptionStatus> SubscriptionStatuses { get; set; }
        public IDbSet<SubscriptionType> SubscriptionTypes { get; set; }
        public IDbSet<SubscriptionTypeRepeatType> SubscriptionTypeRepeatTypes { get; set; }
        public IDbSet<Wallet> Wallets { get; set; }
        #endregion
        #region Pricing
        public IDbSet<PricePoint> PricePoints { get; set; }
        public IDbSet<PriceRounding> PriceRoundings { get; set; }
        public IDbSet<PriceRule> PriceRules { get; set; }
        public IDbSet<PriceRuleAccount> PriceRuleAccounts { get; set; }
        public IDbSet<PriceRuleAccountType> PriceRuleAccountTypes { get; set; }
        public IDbSet<PriceRuleBrand> PriceRuleBrands { get; set; }
        public IDbSet<PriceRuleCategory> PriceRuleCategories { get; set; }
        public IDbSet<PriceRuleCountry> PriceRuleCountries { get; set; }
        public IDbSet<PriceRuleManufacturer> PriceRuleManufacturers { get; set; }
        public IDbSet<PriceRuleProduct> PriceRuleProducts { get; set; }
        public IDbSet<PriceRuleProductType> PriceRuleProductTypes { get; set; }
        public IDbSet<PriceRuleStore> PriceRuleStores { get; set; }
        public IDbSet<PriceRuleUserRole> PriceRuleUserRoles { get; set; }
        public IDbSet<PriceRuleVendor> PriceRuleVendors { get; set; }
        #endregion
        #region Products
        public IDbSet<FutureImport> FutureImports { get; set; }
        public IDbSet<FutureImportStatus> FutureImportStatuses { get; set; }
        public IDbSet<Product> Products { get; set; }
        public IDbSet<ProductAssociation> ProductAssociations { get; set; }
        public IDbSet<ProductAssociationType> ProductAssociationTypes { get; set; }
        public IDbSet<ProductCategory> ProductCategories { get; set; }
        public IDbSet<ProductDownload> ProductDownloads { get; set; }
        public IDbSet<ProductDownloadType> ProductDownloadTypes { get; set; }
        public IDbSet<ProductFile> ProductFiles { get; set; }
        public IDbSet<ProductImage> ProductImages { get; set; }
        public IDbSet<ProductImageType> ProductImageTypes { get; set; }
        public IDbSet<ProductInventoryLocationSection> ProductInventoryLocationSections { get; set; }
        public IDbSet<ProductMembershipLevel> ProductMembershipLevels { get; set; }
        public IDbSet<ProductPricePoint> ProductPricePoints { get; set; }
        public IDbSet<ProductRestriction> ProductRestrictions { get; set; }
        public IDbSet<ProductShipCarrierMethod> ProductShipCarrierMethods { get; set; }
        public IDbSet<ProductStatus> ProductStatuses { get; set; }
        public IDbSet<ProductSubscriptionType> ProductSubscriptionTypes { get; set; }
        public IDbSet<ProductType> ProductTypes { get; set; }
        #endregion
        #region Purchasing
        public IDbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public IDbSet<PurchaseOrderContact> PurchaseOrderContacts { get; set; }
        public IDbSet<PurchaseOrderFile> PurchaseOrderFiles { get; set; }
        public IDbSet<PurchaseOrderItem> PurchaseOrderItems { get; set; }
        public IDbSet<PurchaseOrderItemTarget> PurchaseOrderItemTargets { get; set; }
        public IDbSet<PurchaseOrderState> PurchaseOrderStates { get; set; }
        public IDbSet<PurchaseOrderStatus> PurchaseOrderStatuses { get; set; }
        public IDbSet<PurchaseOrderType> PurchaseOrderTypes { get; set; }
        public IDbSet<SalesOrderPurchaseOrder> SalesOrderPurchaseOrders { get; set; }
        #endregion
        #region Quoting
        public IDbSet<SalesQuote> SalesQuotes { get; set; }
        public IDbSet<SalesQuoteCategory> SalesQuoteCategories { get; set; }
        public IDbSet<SalesQuoteContact> SalesQuoteContacts { get; set; }
        public IDbSet<SalesQuoteFile> SalesQuoteFiles { get; set; }
        public IDbSet<SalesQuoteItem> SalesQuoteItems { get; set; }
        public IDbSet<SalesQuoteItemTarget> SalesQuoteItemTargets { get; set; }
        public IDbSet<SalesQuoteSalesOrder> SalesQuoteSalesOrders { get; set; }
        public IDbSet<SalesQuoteState> SalesQuoteStates { get; set; }
        public IDbSet<SalesQuoteStatus> SalesQuoteStatuses { get; set; }
        public IDbSet<SalesQuoteType> SalesQuoteTypes { get; set; }
        #endregion
        #region Reporting
        public IDbSet<Report> Reports { get; set; }
        public IDbSet<ReportType> ReportTypes { get; set; }
        #endregion
        #region Returning
        public IDbSet<SalesReturn> SalesReturns { get; set; }
        public IDbSet<SalesReturnContact> SalesReturnContacts { get; set; }
        public IDbSet<SalesReturnFile> SalesReturnFiles { get; set; }
        public IDbSet<SalesReturnItem> SalesReturnItems { get; set; }
        public IDbSet<SalesReturnItemTarget> SalesReturnItemTargets { get; set; }
        public IDbSet<SalesReturnReason> SalesReturnReasons { get; set; }
        public IDbSet<SalesReturnSalesOrder> SalesReturnSalesOrders { get; set; }
        public IDbSet<SalesReturnState> SalesReturnStates { get; set; }
        public IDbSet<SalesReturnStatus> SalesReturnStatuses { get; set; }
        public IDbSet<SalesReturnType> SalesReturnTypes { get; set; }
        #endregion
        #region Reviews
        public IDbSet<Review> Reviews { get; set; }
        public IDbSet<ReviewType> ReviewTypes { get; set; }
        #endregion
        #region Sales
        public IDbSet<SalesGroup> SalesGroups { get; set; }
        public IDbSet<SalesItemTargetType> SalesItemTargetTypes { get; set; }
        #endregion
        #region Sampling
        public IDbSet<SampleRequest> SampleRequests { get; set; }
        public IDbSet<SampleRequestContact> SampleRequestContacts { get; set; }
        public IDbSet<SampleRequestFile> SampleRequestFiles { get; set; }
        public IDbSet<SampleRequestItem> SampleRequestItems { get; set; }
        public IDbSet<SampleRequestItemTarget> SampleRequestItemTargets { get; set; }
        public IDbSet<SampleRequestState> SampleRequestStates { get; set; }
        public IDbSet<SampleRequestStatus> SampleRequestStatuses { get; set; }
        public IDbSet<SampleRequestType> SampleRequestTypes { get; set; }
        #endregion
        #region Scheduling
        public IDbSet<Schedule> Schedules { get; set; }
        public IDbSet<ScheduledEvent> ScheduledEvents { get; set; }
        #endregion
        #region Scouting
        public IDbSet<Scout> Scouts { get; set; }
        public IDbSet<ScoutCategory> ScoutCategories { get; set; }
        public IDbSet<ScoutCategoryType> ScoutCategoryTypes { get; set; }
        #endregion
        #region Shipping
        public IDbSet<Package> Packages { get; set; }
        public IDbSet<PackageType> PackageTypes { get; set; }
        public IDbSet<RateQuote> RateQuotes { get; set; }
        public IDbSet<ShipCarrier> ShipCarriers { get; set; }
        public IDbSet<ShipCarrierMethod> ShipCarrierMethods { get; set; }
        public IDbSet<Shipment> Shipments { get; set; }
        public IDbSet<ShipmentEvent> ShipmentEvents { get; set; }
        public IDbSet<ShipmentStatus> ShipmentStatuses { get; set; }
        public IDbSet<ShipmentType> ShipmentTypes { get; set; }
        #endregion
        #region Shopping
        public IDbSet<Cart> Carts { get; set; }
        public IDbSet<CartContact> CartContacts { get; set; }
        public IDbSet<CartFile> CartFiles { get; set; }
        public IDbSet<CartItem> CartItems { get; set; }
        public IDbSet<CartItemTarget> CartItemTargets { get; set; }
        public IDbSet<CartState> CartStates { get; set; }
        public IDbSet<CartStatus> CartStatuses { get; set; }
        public IDbSet<CartType> CartTypes { get; set; }
        #endregion
        #region Stores
        public IDbSet<SiteDomain> SiteDomains { get; set; }
        public IDbSet<SiteDomainSocialProvider> SiteDomainSocialProviders { get; set; }
        public IDbSet<SocialProvider> SocialProviders { get; set; }
        public IDbSet<Store> Stores { get; set; }
        public IDbSet<StoreAccount> StoreAccounts { get; set; }
        public IDbSet<StoreBadge> StoreBadges { get; set; }
        public IDbSet<StoreContact> StoreContacts { get; set; }
        public IDbSet<StoreImage> StoreImages { get; set; }
        public IDbSet<StoreImageType> StoreImageTypes { get; set; }
        public IDbSet<StoreInventoryLocation> StoreInventoryLocations { get; set; }
        public IDbSet<StoreInventoryLocationType> StoreInventoryLocationTypes { get; set; }
        public IDbSet<StoreManufacturer> StoreManufacturers { get; set; }
        public IDbSet<StoreProduct> StoreProducts { get; set; }
        public IDbSet<StoreRegion> StoreRegions { get; set; }
        public IDbSet<StoreSubscription> StoreSubscriptions { get; set; }
        public IDbSet<StoreType> StoreTypes { get; set; }
        public IDbSet<StoreUser> StoreUsers { get; set; }
        public IDbSet<StoreVendor> StoreVendors { get; set; }
        #endregion
        #region System
        public IDbSet<ImportExportMapping> ImportExportMappings { get; set; }
        public IDbSet<Note> Notes { get; set; }
        public IDbSet<NoteType> NoteTypes { get; set; }
        public IDbSet<RecordVersion> RecordVersions { get; set; }
        public IDbSet<RecordVersionType> RecordVersionTypes { get; set; }
        public IDbSet<Setting> Settings { get; set; }
        public IDbSet<SettingGroup> SettingGroups { get; set; }
        public IDbSet<SettingType> SettingTypes { get; set; }
        public IDbSet<EventLog> EventLogs { get; set; }
        #endregion
        #region Tax
        public IDbSet<HistoricalTaxRate> HistoricalTaxRates { get; set; }
        public IDbSet<TaxCountry> TaxCountries { get; set; }
        public IDbSet<TaxRegion> TaxRegions { get; set; }
        #endregion
        #region Tracking
        public IDbSet<Campaign> Campaigns { get; set; }
        public IDbSet<CampaignAd> CampaignAds { get; set; }
        public IDbSet<CampaignStatus> CampaignStatuses { get; set; }
        public IDbSet<CampaignType> CampaignTypes { get; set; }
        public IDbSet<Event> Events { get; set; }
        public IDbSet<EventStatus> EventStatuses { get; set; }
        public IDbSet<EventType> EventTypes { get; set; }
        public IDbSet<IPOrganization> IPOrganizations { get; set; }
        public IDbSet<IPOrganizationStatus> IPOrganizationStatuses { get; set; }
        public IDbSet<PageView> PageViews { get; set; }
        public IDbSet<PageViewEvent> PageViewEvents { get; set; }
        public IDbSet<PageViewStatus> PageViewStatuses { get; set; }
        public IDbSet<PageViewType> PageViewTypes { get; set; }
        public IDbSet<Visit> Visits { get; set; }
        public IDbSet<Visitor> Visitors { get; set; }
        public IDbSet<VisitStatus> VisitStatuses { get; set; }
        #endregion
        #region Vendors
        public IDbSet<Vendor> Vendors { get; set; }
        public IDbSet<VendorAccount> VendorAccounts { get; set; }
        public IDbSet<VendorImage> VendorImages { get; set; }
        public IDbSet<VendorImageType> VendorImageTypes { get; set; }
        public IDbSet<VendorManufacturer> VendorManufacturers { get; set; }
        public IDbSet<VendorProduct> VendorProducts { get; set; }
        public IDbSet<VendorType> VendorTypes { get; set; }
        #endregion

        private static void OnModelCreatingDates(DbModelBuilder modelBuilder)
        {
            #region Accounts
            modelBuilder.Entity<Account>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Account>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountAssociation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountAssociation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountAssociationType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountAssociationType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountCurrency>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountCurrency>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountPricePoint>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountPricePoint>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountProductType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountProductType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountUsageBalance>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountUsageBalance>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AccountUserRole>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Advertising
            modelBuilder.Entity<Ad>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Ad>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Ad>().Property(x => x.ExpirationDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Ad>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Ad>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdAccount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdAccount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdBrand>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdBrand>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdStore>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdStore>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdZone>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdZone>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AdZoneAccess>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Zone>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Zone>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ZoneStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ZoneStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ZoneType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ZoneType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Attributes
            modelBuilder.Entity<AttributeGroup>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AttributeGroup>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AttributeTab>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AttributeTab>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AttributeType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AttributeType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GeneralAttribute>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GeneralAttribute>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GeneralAttributePredefinedOption>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GeneralAttributePredefinedOption>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Badges
            modelBuilder.Entity<Badge>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Badge>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BadgeImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BadgeImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BadgeImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BadgeImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BadgeType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BadgeType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Brands
            modelBuilder.Entity<Brand>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Brand>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandAccount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandAccount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandCategory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandCategory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandCurrency>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandCurrency>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandInventoryLocation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandInventoryLocation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandInventoryLocationType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandInventoryLocationType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandLanguage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandLanguage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandSiteDomain>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandSiteDomain>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandStore>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandStore>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandUser>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<BrandUser>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region CalendarEvents
            modelBuilder.Entity<CalendarEvent>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEvent>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEvent>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEvent>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.StartTime)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.EndTime)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventDetail>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CalendarEventType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserEventAttendance>().Property(x => x.Date)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserEventAttendance>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserEventAttendance>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserEventAttendanceType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserEventAttendanceType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Categories
            modelBuilder.Entity<Category>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Category>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CategoryType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Contacts
            modelBuilder.Entity<Contact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Contact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ContactImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ContactImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ContactImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ContactImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ContactType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ContactType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProfanityFilter>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProfanityFilter>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReferralCode>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReferralCode>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReferralCodeStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReferralCodeStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReferralCodeType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReferralCodeType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<User>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<User>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<User>().Property(x => x.LockoutEndDateUtc)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<User>().Property(x => x.DateOfBirth)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserOnlineStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserOnlineStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserProductType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserProductType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UserType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Counters
            modelBuilder.Entity<Counter>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Counter>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CounterLog>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CounterLog>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CounterLogType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CounterLogType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CounterType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CounterType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Currencies
            modelBuilder.Entity<Currency>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Currency>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyConversion>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CurrencyImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalCurrencyRate>().Property(x => x.OnDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalCurrencyRate>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalCurrencyRate>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Discounts
            modelBuilder.Entity<AppliedCartDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedCartDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedCartItemDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedCartItemDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Discount>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Discount>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Discount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Discount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountAccount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountAccount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountAccountType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountAccountType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountBrand>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountBrand>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountCategory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountCategory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountCode>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountCode>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountCountry>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountCountry>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountManufacturer>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountManufacturer>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountProductType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountProductType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountShipCarrierMethod>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountShipCarrierMethod>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountStore>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountStore>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountUser>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountUser>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountUserRole>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountUserRole>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountVendor>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<DiscountVendor>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedPurchaseOrderDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedPurchaseOrderDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedPurchaseOrderItemDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedPurchaseOrderItemDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesInvoiceDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesInvoiceDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesInvoiceItemDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesInvoiceItemDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesOrderDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesOrderDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesOrderItemDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesOrderItemDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesQuoteDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesQuoteDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesQuoteItemDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesQuoteItemDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesReturnDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesReturnDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesReturnItemDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSalesReturnItemDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSampleRequestDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSampleRequestDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSampleRequestItemDiscount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<AppliedSampleRequestItemDiscount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Favorites
            modelBuilder.Entity<FavoriteCategory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteCategory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteManufacturer>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteManufacturer>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteShipCarrier>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteShipCarrier>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteStore>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteStore>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteVendor>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FavoriteVendor>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Geography
            modelBuilder.Entity<Address>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Address>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Country>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Country>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryCurrency>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryCurrency>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryLanguage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CountryLanguage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalAddressValidation>().Property(x => x.OnDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalAddressValidation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalAddressValidation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PhonePrefixLookup>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PhonePrefixLookup>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Region>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Region>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionCurrency>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionCurrency>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionLanguage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RegionLanguage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ZipCode>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ZipCode>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Globalization
            modelBuilder.Entity<Language>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Language>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<LanguageImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<LanguageImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<LanguageImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<LanguageImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UiKey>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UiKey>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UiTranslation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<UiTranslation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Groups
            modelBuilder.Entity<Group>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Group>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GroupStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GroupStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GroupType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GroupType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GroupUser>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<GroupUser>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Hangfire
            modelBuilder.Entity<HangfireAggregatedCounter>().Property(x => x.ExpireAt).HasColumnType("date");
            modelBuilder.Entity<HangfireCounter>().Property(x => x.ExpireAt).HasColumnType("date");
            modelBuilder.Entity<HangfireHash>().Property(x => x.ExpireAt).HasColumnType("date");
            modelBuilder.Entity<HangfireJob>().Property(x => x.CreatedAt).HasColumnType("date");
            modelBuilder.Entity<HangfireJob>().Property(x => x.ExpireAt).HasColumnType("date");
            modelBuilder.Entity<HangfireJobQueue>().Property(x => x.FetchedAt).HasColumnType("date");
            modelBuilder.Entity<HangfireList>().Property(x => x.ExpireAt).HasColumnType("date");
            modelBuilder.Entity<ScheduledJobConfiguration>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScheduledJobConfiguration>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScheduledJobConfigurationSetting>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScheduledJobConfigurationSetting>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HangfireServer>().Property(x => x.LastHeartbeat).HasColumnType("date");
            modelBuilder.Entity<HangfireSet>().Property(x => x.ExpireAt).HasColumnType("date");
            modelBuilder.Entity<HangfireState>().Property(x => x.CreatedAt).HasColumnType("date");
            #endregion
            #region Inventory
            modelBuilder.Entity<InventoryLocation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<InventoryLocation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<InventoryLocationRegion>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<InventoryLocationRegion>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<InventoryLocationSection>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<InventoryLocationSection>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Invoicing
            modelBuilder.Entity<SalesInvoice>().Property(x => x.DueDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoice>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoice>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceItem>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceItem>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceItemTarget>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceItemTarget>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceState>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceState>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoiceType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderSalesInvoice>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderSalesInvoice>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Manufacturers
            modelBuilder.Entity<Manufacturer>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Manufacturer>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ManufacturerType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Media
            modelBuilder.Entity<StoredFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoredFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Messaging
            modelBuilder.Entity<Conversation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Conversation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ConversationUser>().Property(x => x.LastHeartbeat)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ConversationUser>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ConversationUser>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailQueue>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailQueue>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailQueueAttachment>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailQueueAttachment>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailTemplate>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailTemplate>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EmailType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Message>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Message>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MessageAttachment>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MessageAttachment>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.ReadAt)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.ArchivedAt)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.EmailSentAt)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MessageRecipient>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductNotification>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductNotification>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Ordering
            modelBuilder.Entity<SalesOrder>().Property(x => x.DueDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrder>().Property(x => x.OrderApprovedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrder>().Property(x => x.OrderCommitmentDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrder>().Property(x => x.RequiredShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrder>().Property(x => x.RequestedShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrder>().Property(x => x.ActualShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrder>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrder>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderEvent>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderEvent>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderItem>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderItem>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderItemTarget>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderItemTarget>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderState>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderState>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Payments
            modelBuilder.Entity<Membership>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Membership>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipAdZoneAccess>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipAdZoneAccess>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipAdZoneAccessByLevel>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipAdZoneAccessByLevel>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipLevel>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipLevel>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipRepeatType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<MembershipRepeatType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Payment>().Property(x => x.StatusDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Payment>().Property(x => x.AuthDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Payment>().Property(x => x.ReceivedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Payment>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Payment>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PaymentMethod>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PaymentMethod>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PaymentStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PaymentStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PaymentType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PaymentType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RepeatType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RepeatType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoicePayment>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesInvoicePayment>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderPayment>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderPayment>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnPayment>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnPayment>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.MemberSince)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.StartsOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.EndsOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.LastPaidDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.PrecheckedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.CheckedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.VerifiedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Subscription>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionHistory>().Property(x => x.PaymentDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionHistory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionHistory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionTypeRepeatType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SubscriptionTypeRepeatType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Wallet>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Wallet>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Pricing
            modelBuilder.Entity<PricePoint>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PricePoint>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRounding>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRounding>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRule>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRule>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRule>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRule>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleAccount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleAccount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleAccountType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleAccountType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleBrand>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleBrand>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleCategory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleCategory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleCountry>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleCountry>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleManufacturer>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleManufacturer>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleProductType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleProductType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleStore>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleStore>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleUserRole>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleUserRole>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleVendor>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PriceRuleVendor>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Products
            modelBuilder.Entity<FutureImport>().Property(x => x.RunImportAt)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FutureImport>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FutureImport>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FutureImportStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<FutureImportStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Product>().Property(x => x.AvailableStartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Product>().Property(x => x.AvailableEndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Product>().Property(x => x.PreSellEndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Product>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Product>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductAssociation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductAssociation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductAssociationType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductAssociationType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductCategory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductCategory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductDownload>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductDownload>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductDownloadType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductDownloadType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductInventoryLocationSection>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductInventoryLocationSection>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductMembershipLevel>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductMembershipLevel>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.From)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.To)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductPricePoint>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductRestriction>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductRestriction>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.From)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.To)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductShipCarrierMethod>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductSubscriptionType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductSubscriptionType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ProductType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Purchasing
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.DueDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.ReleaseDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.EstimatedReceiptDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.ActualReceiptDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrder>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderItem>().Property(x => x.DateReceived)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderItem>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderItem>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderItemTarget>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderItemTarget>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderState>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderState>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PurchaseOrderType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderPurchaseOrder>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesOrderPurchaseOrder>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Quoting
            modelBuilder.Entity<SalesQuote>().Property(x => x.DueDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuote>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuote>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteCategory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteCategory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteItem>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteItem>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteItemTarget>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteItemTarget>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteSalesOrder>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteSalesOrder>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteState>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteState>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesQuoteType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Reporting
            modelBuilder.Entity<Report>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Report>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReportType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReportType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Returning
            modelBuilder.Entity<SalesReturn>().Property(x => x.DueDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturn>().Property(x => x.ReturnApprovedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturn>().Property(x => x.ReturnCommitmentDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturn>().Property(x => x.RequiredShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturn>().Property(x => x.RequestedShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturn>().Property(x => x.ActualShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturn>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturn>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnItem>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnItem>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnItemTarget>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnItemTarget>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnReason>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnReason>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnSalesOrder>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnSalesOrder>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnState>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnState>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesReturnType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Reviews
            modelBuilder.Entity<Review>().Property(x => x.ApprovedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Review>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Review>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReviewType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ReviewType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Sales
            modelBuilder.Entity<SalesGroup>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesGroup>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesItemTargetType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SalesItemTargetType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Sampling
            modelBuilder.Entity<SampleRequest>().Property(x => x.DueDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequest>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequest>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestItem>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestItem>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestItemTarget>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestItemTarget>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestState>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestState>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SampleRequestType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Scheduling
            modelBuilder.Entity<Schedule>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Schedule>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScheduledEvent>().Property(x => x.EventStart)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScheduledEvent>().Property(x => x.EventEnd)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScheduledEvent>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScheduledEvent>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Scouting
            modelBuilder.Entity<Scout>().Property(x => x.YearMin)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Scout>().Property(x => x.YearMax)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Scout>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Scout>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScoutCategory>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScoutCategory>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScoutCategoryType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ScoutCategoryType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Shipping
            modelBuilder.Entity<Package>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Package>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PackageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PackageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RateQuote>().Property(x => x.EstimatedDeliveryDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RateQuote>().Property(x => x.TargetShippingDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RateQuote>().Property(x => x.RateTimestamp)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RateQuote>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RateQuote>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipCarrier>().Property(x => x.PickupTime)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipCarrier>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipCarrier>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipCarrierMethod>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipCarrierMethod>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Shipment>().Property(x => x.TargetShippingDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Shipment>().Property(x => x.EstimatedDeliveryDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Shipment>().Property(x => x.ShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Shipment>().Property(x => x.DateDelivered)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Shipment>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Shipment>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipmentEvent>().Property(x => x.EventDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipmentEvent>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipmentEvent>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipmentStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipmentStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipmentType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ShipmentType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Shopping
            modelBuilder.Entity<Cart>().Property(x => x.DueDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Cart>().Property(x => x.RequestedShipDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Cart>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Cart>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartFile>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartFile>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartItem>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartItem>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartItemTarget>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartItemTarget>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartState>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartState>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CartType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Stores
            modelBuilder.Entity<SiteDomain>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SiteDomain>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SiteDomainSocialProvider>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SiteDomainSocialProvider>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SocialProvider>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SocialProvider>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Store>().Property(x => x.FilledOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Store>().Property(x => x.CompletedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Store>().Property(x => x.MedicationChangeOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Store>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Store>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreAccount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreAccount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreBadge>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreBadge>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreContact>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreContact>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreInventoryLocation>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreInventoryLocation>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreInventoryLocationType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreInventoryLocationType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreManufacturer>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreManufacturer>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreRegion>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreRegion>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreSubscription>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreSubscription>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreUser>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreUser>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreVendor>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<StoreVendor>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region System
            modelBuilder.Entity<ImportExportMapping>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<ImportExportMapping>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Note>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Note>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<NoteType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<NoteType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RecordVersion>().Property(x => x.OriginalPublishDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RecordVersion>().Property(x => x.MostRecentPublishDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RecordVersion>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RecordVersion>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RecordVersionType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RecordVersionType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Setting>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Setting>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SettingGroup>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SettingGroup>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SettingType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<SettingType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EventLog>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EventLog>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Tax
            modelBuilder.Entity<HistoricalTaxRate>().Property(x => x.OnDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalTaxRate>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<HistoricalTaxRate>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<TaxCountry>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<TaxCountry>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<TaxRegion>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<TaxRegion>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Tracking
            modelBuilder.Entity<Campaign>().Property(x => x.ProposedStart)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Campaign>().Property(x => x.ProposedEnd)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Campaign>().Property(x => x.ActualStart)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Campaign>().Property(x => x.ActualEnd)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Campaign>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Campaign>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CampaignAd>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CampaignAd>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CampaignStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CampaignStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CampaignType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<CampaignType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Event>().Property(x => x.StartedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Event>().Property(x => x.EndedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Event>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Event>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EventStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EventStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EventType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<EventType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<IPOrganization>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<IPOrganization>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<IPOrganizationStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<IPOrganizationStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageView>().Property(x => x.StartedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageView>().Property(x => x.EndedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageView>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageView>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageViewEvent>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageViewEvent>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageViewStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageViewStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageViewType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<PageViewType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Visit>().Property(x => x.StartedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Visit>().Property(x => x.EndedOn)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Visit>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Visit>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Visitor>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Visitor>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VisitStatus>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VisitStatus>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            #region Vendors
            modelBuilder.Entity<Vendor>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<Vendor>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorAccount>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorAccount>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorImage>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorImage>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorImageType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorImageType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorManufacturer>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorManufacturer>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorProduct>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorProduct>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorType>().Property(x => x.CreatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<VendorType>().Property(x => x.UpdatedDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            #endregion
            modelBuilder.Entity<RoleUser>().Property(x => x.StartDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
            modelBuilder.Entity<RoleUser>().Property(x => x.EndDate)/*.HasColumnType("timestamp")*/.HasPrecision(6);
        }

        private static void OnModelCreatingSchemas(DbModelBuilder modelBuilder)
        {
            #region Accounts
            modelBuilder.Entity<Account>().ToTable("Account", OracleUser.ToUpper());
            modelBuilder.Entity<AccountAssociation>().ToTable("AccountAssociation", OracleUser.ToUpper());
            modelBuilder.Entity<AccountAssociationType>().ToTable("AccountAssociationType", OracleUser.ToUpper());
            modelBuilder.Entity<AccountContact>().ToTable("AccountContact", OracleUser.ToUpper());
            modelBuilder.Entity<AccountCurrency>().ToTable("AccountCurrency", OracleUser.ToUpper());
            modelBuilder.Entity<AccountFile>().ToTable("AccountFile", OracleUser.ToUpper());
            modelBuilder.Entity<AccountImage>().ToTable("AccountImage", OracleUser.ToUpper());
            modelBuilder.Entity<AccountImageType>().ToTable("AccountImageType", OracleUser.ToUpper());
            modelBuilder.Entity<AccountPricePoint>().ToTable("AccountPricePoint", OracleUser.ToUpper());
            modelBuilder.Entity<AccountProduct>().ToTable("AccountProduct", OracleUser.ToUpper());
            modelBuilder.Entity<AccountProductType>().ToTable("AccountProductType", OracleUser.ToUpper());
            modelBuilder.Entity<AccountStatus>().ToTable("AccountStatus", OracleUser.ToUpper());
            modelBuilder.Entity<AccountType>().ToTable("AccountType", OracleUser.ToUpper());
            modelBuilder.Entity<AccountUsageBalance>().ToTable("AccountUsageBalance", OracleUser.ToUpper());
            modelBuilder.Entity<AccountUserRole>().ToTable("AccountUserRole", OracleUser.ToUpper());
            #endregion
            #region Advertising
            modelBuilder.Entity<Ad>().ToTable("Ad", OracleUser.ToUpper());
            modelBuilder.Entity<AdAccount>().ToTable("AdAccount", OracleUser.ToUpper());
            modelBuilder.Entity<AdBrand>().ToTable("AdBrand", OracleUser.ToUpper());
            modelBuilder.Entity<AdImage>().ToTable("AdImage", OracleUser.ToUpper());
            modelBuilder.Entity<AdImageType>().ToTable("AdImageType", OracleUser.ToUpper());
            modelBuilder.Entity<AdStatus>().ToTable("AdStatus", OracleUser.ToUpper());
            modelBuilder.Entity<AdStore>().ToTable("AdStore", OracleUser.ToUpper());
            modelBuilder.Entity<AdType>().ToTable("AdType", OracleUser.ToUpper());
            modelBuilder.Entity<AdZone>().ToTable("AdZone", OracleUser.ToUpper());
            modelBuilder.Entity<AdZoneAccess>().ToTable("AdZoneAccess", OracleUser.ToUpper());
            modelBuilder.Entity<Zone>().ToTable("Zone", OracleUser.ToUpper());
            modelBuilder.Entity<ZoneStatus>().ToTable("ZoneStatus", OracleUser.ToUpper());
            modelBuilder.Entity<ZoneType>().ToTable("ZoneType", OracleUser.ToUpper());
            #endregion
            #region Attributes
            modelBuilder.Entity<AttributeGroup>().ToTable("AttributeGroup", OracleUser.ToUpper());
            modelBuilder.Entity<AttributeTab>().ToTable("AttributeTab", OracleUser.ToUpper());
            modelBuilder.Entity<AttributeType>().ToTable("AttributeType", OracleUser.ToUpper());
            modelBuilder.Entity<GeneralAttribute>().ToTable("GeneralAttribute", OracleUser.ToUpper());
            modelBuilder.Entity<GeneralAttributePredefinedOption>().ToTable("GeneralAttributePredefinedOption", OracleUser.ToUpper());
            #endregion
            #region Badges
            modelBuilder.Entity<Badge>().ToTable("Badge", OracleUser.ToUpper());
            modelBuilder.Entity<BadgeImage>().ToTable("BadgeImage", OracleUser.ToUpper());
            modelBuilder.Entity<BadgeImageType>().ToTable("BadgeImageType", OracleUser.ToUpper());
            modelBuilder.Entity<BadgeType>().ToTable("BadgeType", OracleUser.ToUpper());
            #endregion
            #region Brands
            modelBuilder.Entity<Brand>().ToTable("Brand", OracleUser.ToUpper());
            modelBuilder.Entity<BrandAccount>().ToTable("BrandAccount", OracleUser.ToUpper());
            modelBuilder.Entity<BrandCategory>().ToTable("BrandCategory", OracleUser.ToUpper());
            modelBuilder.Entity<BrandCurrency>().ToTable("BrandCurrency", OracleUser.ToUpper());
            modelBuilder.Entity<BrandImage>().ToTable("BrandImage", OracleUser.ToUpper());
            modelBuilder.Entity<BrandImageType>().ToTable("BrandImageType", OracleUser.ToUpper());
            modelBuilder.Entity<BrandInventoryLocation>().ToTable("BrandInventoryLocation", OracleUser.ToUpper());
            modelBuilder.Entity<BrandInventoryLocationType>().ToTable("BrandInventoryLocationType", OracleUser.ToUpper());
            modelBuilder.Entity<BrandLanguage>().ToTable("BrandLanguage", OracleUser.ToUpper());
            modelBuilder.Entity<BrandProduct>().ToTable("BrandProduct", OracleUser.ToUpper());
            modelBuilder.Entity<BrandSiteDomain>().ToTable("BrandSiteDomain", OracleUser.ToUpper());
            modelBuilder.Entity<BrandStore>().ToTable("BrandStore", OracleUser.ToUpper());
            modelBuilder.Entity<BrandUser>().ToTable("BrandUser", OracleUser.ToUpper());
            #endregion
            #region CalendarEvents
            modelBuilder.Entity<CalendarEvent>().ToTable("CalendarEvent", OracleUser.ToUpper());
            modelBuilder.Entity<CalendarEventDetail>().ToTable("CalendarEventDetail", OracleUser.ToUpper());
            modelBuilder.Entity<CalendarEventFile>().ToTable("CalendarEventFile", OracleUser.ToUpper());
            modelBuilder.Entity<CalendarEventImage>().ToTable("CalendarEventImage", OracleUser.ToUpper());
            modelBuilder.Entity<CalendarEventImageType>().ToTable("CalendarEventImageType", OracleUser.ToUpper());
            modelBuilder.Entity<CalendarEventProduct>().ToTable("CalendarEventProducts", OracleUser.ToUpper());
            modelBuilder.Entity<CalendarEventStatus>().ToTable("CalendarEventStatus", OracleUser.ToUpper());
            modelBuilder.Entity<CalendarEventType>().ToTable("CalendarEventType", OracleUser.ToUpper());
            modelBuilder.Entity<UserEventAttendance>().ToTable("UserEventAttendance", OracleUser.ToUpper());
            modelBuilder.Entity<UserEventAttendanceType>().ToTable("UserEventAttendanceType", OracleUser.ToUpper());
            #endregion
            #region Categories
            modelBuilder.Entity<Category>().ToTable("Category", OracleUser.ToUpper());
            modelBuilder.Entity<CategoryFile>().ToTable("CategoryFile", OracleUser.ToUpper());
            modelBuilder.Entity<CategoryImage>().ToTable("CategoryImage", OracleUser.ToUpper());
            modelBuilder.Entity<CategoryImageType>().ToTable("CategoryImageType", OracleUser.ToUpper());
            modelBuilder.Entity<CategoryType>().ToTable("CategoryType", OracleUser.ToUpper());
            #endregion
            #region Contacts
            modelBuilder.Entity<Contact>().ToTable("Contact", OracleUser.ToUpper());
            modelBuilder.Entity<ContactImage>().ToTable("ContactImage", OracleUser.ToUpper());
            modelBuilder.Entity<ContactImageType>().ToTable("ContactImageType", OracleUser.ToUpper());
            modelBuilder.Entity<ContactType>().ToTable("ContactType", OracleUser.ToUpper());
            modelBuilder.Entity<Permission>().ToTable("Permission", OracleUser.ToUpper());
            modelBuilder.Entity<ProfanityFilter>().ToTable("ProfanityFilter", OracleUser.ToUpper());
            modelBuilder.Entity<ReferralCode>().ToTable("ReferralCode", OracleUser.ToUpper());
            modelBuilder.Entity<ReferralCodeStatus>().ToTable("ReferralCodeStatus", OracleUser.ToUpper());
            modelBuilder.Entity<ReferralCodeType>().ToTable("ReferralCodeType", OracleUser.ToUpper());
            modelBuilder.Entity<RolePermission>().ToTable("RolePermission", OracleUser.ToUpper());
            modelBuilder.Entity<RoleUser>().ToTable("RoleUser", OracleUser.ToUpper());
            modelBuilder.Entity<User>().ToTable("User", OracleUser.ToUpper());
            modelBuilder.Entity<UserClaim>().ToTable("UserClaim", OracleUser.ToUpper());
            modelBuilder.Entity<UserFile>().ToTable("UserFile", OracleUser.ToUpper());
            modelBuilder.Entity<UserImage>().ToTable("UserImage", OracleUser.ToUpper());
            modelBuilder.Entity<UserImageType>().ToTable("UserImageType", OracleUser.ToUpper());
            modelBuilder.Entity<UserLogin>().ToTable("UserLogin", OracleUser.ToUpper());
            modelBuilder.Entity<UserOnlineStatus>().ToTable("UserOnlineStatus", OracleUser.ToUpper());
            modelBuilder.Entity<UserProductType>().ToTable("UserProductType", OracleUser.ToUpper());
            modelBuilder.Entity<UserRole>().ToTable("UserRole", OracleUser.ToUpper());
            modelBuilder.Entity<UserStatus>().ToTable("UserStatus", OracleUser.ToUpper());
            modelBuilder.Entity<UserType>().ToTable("UserType", OracleUser.ToUpper());
            #endregion
            #region Counters
            modelBuilder.Entity<Counter>().ToTable("Counter", OracleUser.ToUpper());
            modelBuilder.Entity<CounterLog>().ToTable("CounterLog", OracleUser.ToUpper());
            modelBuilder.Entity<CounterLogType>().ToTable("CounterLogType", OracleUser.ToUpper());
            modelBuilder.Entity<CounterType>().ToTable("CounterType", OracleUser.ToUpper());
            #endregion
            #region Currencies
            modelBuilder.Entity<Currency>().ToTable("Currency", OracleUser.ToUpper());
            modelBuilder.Entity<CurrencyConversion>().ToTable("CurrencyConversion", OracleUser.ToUpper());
            modelBuilder.Entity<CurrencyImage>().ToTable("CurrencyImage", OracleUser.ToUpper());
            modelBuilder.Entity<CurrencyImageType>().ToTable("CurrencyImageType", OracleUser.ToUpper());
            modelBuilder.Entity<HistoricalCurrencyRate>().ToTable("HistoricalCurrencyRate", OracleUser.ToUpper());
            #endregion
            #region Discounts
            modelBuilder.Entity<AppliedCartDiscount>().ToTable("CartDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedCartItemDiscount>().ToTable("CartItemDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<Discount>().ToTable("Discount", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountAccount>().ToTable("DiscountAccount", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountAccountType>().ToTable("DiscountAccountType", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountBrand>().ToTable("DiscountBrands", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountCategory>().ToTable("DiscountCategories", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountCode>().ToTable("DiscountCode", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountCountry>().ToTable("DiscountCountry", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountManufacturer>().ToTable("DiscountManufacturer", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountProduct>().ToTable("DiscountProducts", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountProductType>().ToTable("DiscountProductType", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountShipCarrierMethod>().ToTable("DiscountShipCarrierMethods", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountStore>().ToTable("DiscountStores", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountUser>().ToTable("DiscountUser", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountUserRole>().ToTable("DiscountUserRole", OracleUser.ToUpper());
            modelBuilder.Entity<DiscountVendor>().ToTable("DiscountVendor", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedPurchaseOrderDiscount>().ToTable("PurchaseOrderDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedPurchaseOrderItemDiscount>().ToTable("PurchaseOrderItemDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesInvoiceDiscount>().ToTable("SalesInvoiceDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesInvoiceItemDiscount>().ToTable("SalesInvoiceItemDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesOrderDiscount>().ToTable("SalesOrderDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesOrderItemDiscount>().ToTable("SalesOrderItemDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesQuoteDiscount>().ToTable("SalesQuoteDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesQuoteItemDiscount>().ToTable("SalesQuoteItemDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesReturnDiscount>().ToTable("SalesReturnDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSalesReturnItemDiscount>().ToTable("SalesReturnItemDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSampleRequestDiscount>().ToTable("SampleRequestDiscounts", OracleUser.ToUpper());
            modelBuilder.Entity<AppliedSampleRequestItemDiscount>().ToTable("SampleRequestItemDiscounts", OracleUser.ToUpper());
            #endregion
            #region Favorites
            modelBuilder.Entity<FavoriteCategory>().ToTable("FavoriteCategory", OracleUser.ToUpper());
            modelBuilder.Entity<FavoriteManufacturer>().ToTable("FavoriteManufacturer", OracleUser.ToUpper());
            modelBuilder.Entity<FavoriteShipCarrier>().ToTable("FavoriteShipCarrier", OracleUser.ToUpper());
            modelBuilder.Entity<FavoriteStore>().ToTable("FavoriteStore", OracleUser.ToUpper());
            modelBuilder.Entity<FavoriteVendor>().ToTable("FavoriteVendor", OracleUser.ToUpper());
            #endregion
            #region Geography
            modelBuilder.Entity<Address>().ToTable("Address", OracleUser.ToUpper());
            modelBuilder.Entity<Country>().ToTable("Country", OracleUser.ToUpper());
            modelBuilder.Entity<CountryCurrency>().ToTable("CountryCurrency", OracleUser.ToUpper());
            modelBuilder.Entity<CountryImage>().ToTable("CountryImage", OracleUser.ToUpper());
            modelBuilder.Entity<CountryImageType>().ToTable("CountryImageType", OracleUser.ToUpper());
            modelBuilder.Entity<CountryLanguage>().ToTable("CountryLanguage", OracleUser.ToUpper());
            modelBuilder.Entity<HistoricalAddressValidation>().ToTable("HistoricalAddressValidation", OracleUser.ToUpper());
            modelBuilder.Entity<PhonePrefixLookup>().ToTable("PhonePrefixLookup", OracleUser.ToUpper());
            modelBuilder.Entity<Region>().ToTable("Region", OracleUser.ToUpper());
            modelBuilder.Entity<RegionCurrency>().ToTable("RegionCurrency", OracleUser.ToUpper());
            modelBuilder.Entity<RegionImage>().ToTable("RegionImage", OracleUser.ToUpper());
            modelBuilder.Entity<RegionImageType>().ToTable("RegionImageType", OracleUser.ToUpper());
            modelBuilder.Entity<RegionLanguage>().ToTable("RegionLanguage", OracleUser.ToUpper());
            modelBuilder.Entity<ZipCode>().ToTable("ZipCode", OracleUser.ToUpper());
            #endregion
            #region Globalization
            modelBuilder.Entity<Language>().ToTable("Language", OracleUser.ToUpper());
            modelBuilder.Entity<LanguageImage>().ToTable("LanguageImage", OracleUser.ToUpper());
            modelBuilder.Entity<LanguageImageType>().ToTable("LanguageImageType", OracleUser.ToUpper());
            modelBuilder.Entity<UiKey>().ToTable("UiKey", OracleUser.ToUpper());
            modelBuilder.Entity<UiTranslation>().ToTable("UiTranslation", OracleUser.ToUpper());
            #endregion
            #region Groups
            modelBuilder.Entity<Group>().ToTable("Group", OracleUser.ToUpper());
            modelBuilder.Entity<GroupStatus>().ToTable("GroupStatus", OracleUser.ToUpper());
            modelBuilder.Entity<GroupType>().ToTable("GroupType", OracleUser.ToUpper());
            modelBuilder.Entity<GroupUser>().ToTable("GroupUser", OracleUser.ToUpper());
            #endregion
            #region Hangfire
            modelBuilder.Entity<HangfireAggregatedCounter>().ToTable("HangfireAggregatedCounter", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireCounter>().ToTable("HangfireCounter", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireHash>().ToTable("HangfireHash", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireJob>().ToTable("HangfireJob", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireJobParameter>().ToTable("HangfireJobParameter", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireJobQueue>().ToTable("HangfireJobQueue", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireList>().ToTable("HangfireList", OracleUser.ToUpper());
            modelBuilder.Entity<ScheduledJobConfiguration>().ToTable("ScheduledJobConfiguration", OracleUser.ToUpper());
            modelBuilder.Entity<ScheduledJobConfigurationSetting>().ToTable("ScheduledJobConfigurationSetting", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireSchema>().ToTable("HangfireSchema", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireServer>().ToTable("HangfireServer", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireSet>().ToTable("HangfireSet", OracleUser.ToUpper());
            modelBuilder.Entity<HangfireState>().ToTable("HangfireState", OracleUser.ToUpper());
            #endregion
            #region Inventory
            modelBuilder.Entity<InventoryLocation>().ToTable("InventoryLocation", OracleUser.ToUpper());
            modelBuilder.Entity<InventoryLocationRegion>().ToTable("InventoryLocationRegion", OracleUser.ToUpper());
            modelBuilder.Entity<InventoryLocationSection>().ToTable("InventoryLocationSection", OracleUser.ToUpper());
            #endregion
            #region Invoicing
            modelBuilder.Entity<SalesInvoice>().ToTable("SalesInvoice", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoiceContact>().ToTable("SalesInvoiceContact", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoiceFile>().ToTable("SalesInvoiceFile", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoiceItem>().ToTable("SalesInvoiceItem", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoiceItemTarget>().ToTable("SalesInvoiceItemTarget", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoiceState>().ToTable("SalesInvoiceState", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoiceStatus>().ToTable("SalesInvoiceStatus", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoiceType>().ToTable("SalesInvoiceType", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderSalesInvoice>().ToTable("SalesOrderSalesInvoice", OracleUser.ToUpper());
            #endregion
            #region Manufacturers
            modelBuilder.Entity<Manufacturer>().ToTable("Manufacturer", OracleUser.ToUpper());
            modelBuilder.Entity<ManufacturerImage>().ToTable("ManufacturerImage", OracleUser.ToUpper());
            modelBuilder.Entity<ManufacturerImageType>().ToTable("ManufacturerImageType", OracleUser.ToUpper());
            modelBuilder.Entity<ManufacturerProduct>().ToTable("ManufacturerProduct", OracleUser.ToUpper());
            modelBuilder.Entity<ManufacturerType>().ToTable("ManufacturerType", OracleUser.ToUpper());
            #endregion
            #region Media
            modelBuilder.Entity<StoredFile>().ToTable("StoredFile", OracleUser.ToUpper());
            #endregion
            #region Messaging
            modelBuilder.Entity<Conversation>().ToTable("Conversation", OracleUser.ToUpper());
            modelBuilder.Entity<ConversationUser>().ToTable("ConversationUser", OracleUser.ToUpper());
            modelBuilder.Entity<EmailQueue>().ToTable("EmailQueue", OracleUser.ToUpper());
            modelBuilder.Entity<EmailQueueAttachment>().ToTable("EmailQueueAttachment", OracleUser.ToUpper());
            modelBuilder.Entity<EmailStatus>().ToTable("EmailStatus", OracleUser.ToUpper());
            modelBuilder.Entity<EmailTemplate>().ToTable("EmailTemplate", OracleUser.ToUpper());
            modelBuilder.Entity<EmailType>().ToTable("EmailType", OracleUser.ToUpper());
            modelBuilder.Entity<Message>().ToTable("Message", OracleUser.ToUpper());
            modelBuilder.Entity<MessageAttachment>().ToTable("MessageAttachment", OracleUser.ToUpper());
            modelBuilder.Entity<MessageRecipient>().ToTable("MessageRecipient", OracleUser.ToUpper());
            modelBuilder.Entity<ProductNotification>().ToTable("ProductNotification", OracleUser.ToUpper());
            #endregion
            #region Ordering
            modelBuilder.Entity<SalesOrder>().ToTable("SalesOrder", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderContact>().ToTable("SalesOrderContact", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderEvent>().ToTable("SalesOrderEvent", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderFile>().ToTable("SalesOrderFile", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderItem>().ToTable("SalesOrderItem", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderItemTarget>().ToTable("SalesOrderItemTarget", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderState>().ToTable("SalesOrderState", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderStatus>().ToTable("SalesOrderStatus", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderType>().ToTable("SalesOrderType", OracleUser.ToUpper());
            #endregion
            #region Payments
            modelBuilder.Entity<Membership>().ToTable("Membership", OracleUser.ToUpper());
            modelBuilder.Entity<MembershipAdZoneAccess>().ToTable("MembershipAdZoneAccess", OracleUser.ToUpper());
            modelBuilder.Entity<MembershipAdZoneAccessByLevel>().ToTable("MembershipAdZoneAccessByLevel", OracleUser.ToUpper());
            modelBuilder.Entity<MembershipLevel>().ToTable("MembershipLevel", OracleUser.ToUpper());
            modelBuilder.Entity<MembershipRepeatType>().ToTable("MembershipRepeatType", OracleUser.ToUpper());
            modelBuilder.Entity<Payment>().ToTable("Payment", OracleUser.ToUpper());
            modelBuilder.Entity<PaymentMethod>().ToTable("PaymentMethod", OracleUser.ToUpper());
            modelBuilder.Entity<PaymentStatus>().ToTable("PaymentStatus", OracleUser.ToUpper());
            modelBuilder.Entity<PaymentType>().ToTable("PaymentType", OracleUser.ToUpper());
            modelBuilder.Entity<RepeatType>().ToTable("RepeatType", OracleUser.ToUpper());
            modelBuilder.Entity<SalesInvoicePayment>().ToTable("SalesInvoicePayment", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderPayment>().ToTable("SalesOrderPayment", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnPayment>().ToTable("SalesReturnPayment", OracleUser.ToUpper());
            modelBuilder.Entity<Subscription>().ToTable("Subscription", OracleUser.ToUpper());
            modelBuilder.Entity<SubscriptionHistory>().ToTable("SubscriptionHistory", OracleUser.ToUpper());
            modelBuilder.Entity<SubscriptionStatus>().ToTable("SubscriptionStatus", OracleUser.ToUpper());
            modelBuilder.Entity<SubscriptionType>().ToTable("SubscriptionType", OracleUser.ToUpper());
            modelBuilder.Entity<SubscriptionTypeRepeatType>().ToTable("SubscriptionTypeRepeatType", OracleUser.ToUpper());
            modelBuilder.Entity<Wallet>().ToTable("Wallet", OracleUser.ToUpper());
            #endregion
            #region Pricing
            modelBuilder.Entity<PricePoint>().ToTable("PricePoint", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRounding>().ToTable("PriceRounding", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRule>().ToTable("PriceRule", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleAccount>().ToTable("PriceRuleAccount", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleAccountType>().ToTable("PriceRuleAccountType", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleBrand>().ToTable("PriceRuleBrand", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleCategory>().ToTable("PriceRuleCategory", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleCountry>().ToTable("PriceRuleCountry", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleManufacturer>().ToTable("PriceRuleManufacturer", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleProduct>().ToTable("PriceRuleProduct", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleProductType>().ToTable("PriceRuleProductType", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleStore>().ToTable("PriceRuleStore", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleUserRole>().ToTable("PriceRuleUserRole", OracleUser.ToUpper());
            modelBuilder.Entity<PriceRuleVendor>().ToTable("PriceRuleVendor", OracleUser.ToUpper());
            #endregion
            #region Products
            modelBuilder.Entity<FutureImport>().ToTable("FutureImport", OracleUser.ToUpper());
            modelBuilder.Entity<FutureImportStatus>().ToTable("FutureImportStatus", OracleUser.ToUpper());
            modelBuilder.Entity<Product>().ToTable("Product", OracleUser.ToUpper());
            modelBuilder.Entity<ProductAssociation>().ToTable("ProductAssociation", OracleUser.ToUpper());
            modelBuilder.Entity<ProductAssociationType>().ToTable("ProductAssociationType", OracleUser.ToUpper());
            modelBuilder.Entity<ProductCategory>().ToTable("ProductCategory", OracleUser.ToUpper());
            modelBuilder.Entity<ProductDownload>().ToTable("ProductDownload", OracleUser.ToUpper());
            modelBuilder.Entity<ProductDownloadType>().ToTable("ProductDownloadType", OracleUser.ToUpper());
            modelBuilder.Entity<ProductFile>().ToTable("ProductFile", OracleUser.ToUpper());
            modelBuilder.Entity<ProductImage>().ToTable("ProductImage", OracleUser.ToUpper());
            modelBuilder.Entity<ProductImageType>().ToTable("ProductImageType", OracleUser.ToUpper());
            modelBuilder.Entity<ProductInventoryLocationSection>().ToTable("ProductInventoryLocationSection", OracleUser.ToUpper());
            modelBuilder.Entity<ProductMembershipLevel>().ToTable("ProductMembershipLevel", OracleUser.ToUpper());
            modelBuilder.Entity<ProductPricePoint>().ToTable("ProductPricePoint", OracleUser.ToUpper());
            modelBuilder.Entity<ProductRestriction>().ToTable("ProductRestriction", OracleUser.ToUpper());
            modelBuilder.Entity<ProductShipCarrierMethod>().ToTable("ProductShipCarrierMethod", OracleUser.ToUpper());
            modelBuilder.Entity<ProductStatus>().ToTable("ProductStatus", OracleUser.ToUpper());
            modelBuilder.Entity<ProductSubscriptionType>().ToTable("ProductSubscriptionType", OracleUser.ToUpper());
            modelBuilder.Entity<ProductType>().ToTable("ProductType", OracleUser.ToUpper());
            #endregion
            #region Purchasing
            modelBuilder.Entity<PurchaseOrder>().ToTable("PurchaseOrder", OracleUser.ToUpper());
            modelBuilder.Entity<PurchaseOrderContact>().ToTable("PurchaseOrderContact", OracleUser.ToUpper());
            modelBuilder.Entity<PurchaseOrderFile>().ToTable("PurchaseOrderFile", OracleUser.ToUpper());
            modelBuilder.Entity<PurchaseOrderItem>().ToTable("PurchaseOrderItem", OracleUser.ToUpper());
            modelBuilder.Entity<PurchaseOrderItemTarget>().ToTable("PurchaseOrderItemTarget", OracleUser.ToUpper());
            modelBuilder.Entity<PurchaseOrderState>().ToTable("PurchaseOrderState", OracleUser.ToUpper());
            modelBuilder.Entity<PurchaseOrderStatus>().ToTable("PurchaseOrderStatus", OracleUser.ToUpper());
            modelBuilder.Entity<PurchaseOrderType>().ToTable("PurchaseOrderType", OracleUser.ToUpper());
            modelBuilder.Entity<SalesOrderPurchaseOrder>().ToTable("SalesOrderPurchaseOrder", OracleUser.ToUpper());
            #endregion
            #region Quoting
            modelBuilder.Entity<SalesQuote>().ToTable("SalesQuote", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteCategory>().ToTable("SalesQuoteCategory", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteContact>().ToTable("SalesQuoteContact", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteFile>().ToTable("SalesQuoteFile", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteItem>().ToTable("SalesQuoteItem", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteItemTarget>().ToTable("SalesQuoteItemTarget", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteSalesOrder>().ToTable("SalesQuoteSalesOrder", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteState>().ToTable("SalesQuoteState", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteStatus>().ToTable("SalesQuoteStatus", OracleUser.ToUpper());
            modelBuilder.Entity<SalesQuoteType>().ToTable("SalesQuoteType", OracleUser.ToUpper());
            #endregion
            #region Reporting
            modelBuilder.Entity<Report>().ToTable("Reports", OracleUser.ToUpper());
            modelBuilder.Entity<ReportType>().ToTable("ReportTypes", OracleUser.ToUpper());
            #endregion
            #region Returning
            modelBuilder.Entity<SalesReturn>().ToTable("SalesReturn", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnContact>().ToTable("SalesReturnContact", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnFile>().ToTable("SalesReturnFile", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnItem>().ToTable("SalesReturnItem", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnItemTarget>().ToTable("SalesReturnItemTarget", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnReason>().ToTable("SalesReturnReason", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnSalesOrder>().ToTable("SalesReturnSalesOrder", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnState>().ToTable("SalesReturnState", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnStatus>().ToTable("SalesReturnStatus", OracleUser.ToUpper());
            modelBuilder.Entity<SalesReturnType>().ToTable("SalesReturnType", OracleUser.ToUpper());
            #endregion
            #region Reviews
            modelBuilder.Entity<Review>().ToTable("Review", OracleUser.ToUpper());
            modelBuilder.Entity<ReviewType>().ToTable("ReviewType", OracleUser.ToUpper());
            #endregion
            #region Sales
            modelBuilder.Entity<SalesGroup>().ToTable("SalesGroup", OracleUser.ToUpper());
            modelBuilder.Entity<SalesItemTargetType>().ToTable("SalesItemTargetType", OracleUser.ToUpper());
            #endregion
            #region Sampling
            modelBuilder.Entity<SampleRequest>().ToTable("SampleRequest", OracleUser.ToUpper());
            modelBuilder.Entity<SampleRequestContact>().ToTable("SampleRequestContact", OracleUser.ToUpper());
            modelBuilder.Entity<SampleRequestFile>().ToTable("SampleRequestFile", OracleUser.ToUpper());
            modelBuilder.Entity<SampleRequestItem>().ToTable("SampleRequestItem", OracleUser.ToUpper());
            modelBuilder.Entity<SampleRequestItemTarget>().ToTable("SampleRequestItemTarget", OracleUser.ToUpper());
            modelBuilder.Entity<SampleRequestState>().ToTable("SampleRequestState", OracleUser.ToUpper());
            modelBuilder.Entity<SampleRequestStatus>().ToTable("SampleRequestStatus", OracleUser.ToUpper());
            modelBuilder.Entity<SampleRequestType>().ToTable("SampleRequestType", OracleUser.ToUpper());
            #endregion
            #region Scheduling
            modelBuilder.Entity<Schedule>().ToTable("Schedule", OracleUser.ToUpper());
            modelBuilder.Entity<ScheduledEvent>().ToTable("ScheduledEvent", OracleUser.ToUpper());
            #endregion
            #region Scouting
            modelBuilder.Entity<Scout>().ToTable("Scout", OracleUser.ToUpper());
            modelBuilder.Entity<ScoutCategory>().ToTable("ScoutCategory", OracleUser.ToUpper());
            modelBuilder.Entity<ScoutCategoryType>().ToTable("ScoutCategoryType", OracleUser.ToUpper());
            #endregion
            #region Shipping
            modelBuilder.Entity<Package>().ToTable("Package", OracleUser.ToUpper());
            modelBuilder.Entity<PackageType>().ToTable("PackageType", OracleUser.ToUpper());
            modelBuilder.Entity<RateQuote>().ToTable("RateQuote", OracleUser.ToUpper());
            modelBuilder.Entity<ShipCarrier>().ToTable("ShipCarrier", OracleUser.ToUpper());
            modelBuilder.Entity<ShipCarrierMethod>().ToTable("ShipCarrierMethod", OracleUser.ToUpper());
            modelBuilder.Entity<Shipment>().ToTable("Shipment", OracleUser.ToUpper());
            modelBuilder.Entity<ShipmentEvent>().ToTable("ShipmentEvent", OracleUser.ToUpper());
            modelBuilder.Entity<ShipmentStatus>().ToTable("ShipmentStatus", OracleUser.ToUpper());
            modelBuilder.Entity<ShipmentType>().ToTable("ShipmentType", OracleUser.ToUpper());
            #endregion
            #region Shopping
            modelBuilder.Entity<Cart>().ToTable("Cart", OracleUser.ToUpper());
            modelBuilder.Entity<CartContact>().ToTable("CartContact", OracleUser.ToUpper());
            modelBuilder.Entity<CartFile>().ToTable("CartFile", OracleUser.ToUpper());
            modelBuilder.Entity<CartItem>().ToTable("CartItem", OracleUser.ToUpper());
            modelBuilder.Entity<CartItemTarget>().ToTable("CartItemTarget", OracleUser.ToUpper());
            modelBuilder.Entity<CartState>().ToTable("CartState", OracleUser.ToUpper());
            modelBuilder.Entity<CartStatus>().ToTable("CartStatus", OracleUser.ToUpper());
            modelBuilder.Entity<CartType>().ToTable("CartType", OracleUser.ToUpper());
            #endregion
            #region Stores
            modelBuilder.Entity<SiteDomain>().ToTable("SiteDomain", OracleUser.ToUpper());
            modelBuilder.Entity<SiteDomainSocialProvider>().ToTable("SiteDomainSocialProvider", OracleUser.ToUpper());
            modelBuilder.Entity<SocialProvider>().ToTable("SocialProvider", OracleUser.ToUpper());
            modelBuilder.Entity<Store>().ToTable("Store", OracleUser.ToUpper());
            modelBuilder.Entity<StoreAccount>().ToTable("StoreAccount", OracleUser.ToUpper());
            modelBuilder.Entity<StoreBadge>().ToTable("StoreBadge", OracleUser.ToUpper());
            modelBuilder.Entity<StoreContact>().ToTable("StoreContact", OracleUser.ToUpper());
            modelBuilder.Entity<StoreImage>().ToTable("StoreImage", OracleUser.ToUpper());
            modelBuilder.Entity<StoreImageType>().ToTable("StoreImageType", OracleUser.ToUpper());
            modelBuilder.Entity<StoreInventoryLocation>().ToTable("StoreInventoryLocation", OracleUser.ToUpper());
            modelBuilder.Entity<StoreInventoryLocationType>().ToTable("StoreInventoryLocationType", OracleUser.ToUpper());
            modelBuilder.Entity<StoreManufacturer>().ToTable("StoreManufacturer", OracleUser.ToUpper());
            modelBuilder.Entity<StoreProduct>().ToTable("StoreProduct", OracleUser.ToUpper());
            modelBuilder.Entity<StoreRegion>().ToTable("StoreRegion", OracleUser.ToUpper());
            modelBuilder.Entity<StoreSubscription>().ToTable("StoreSubscription", OracleUser.ToUpper());
            modelBuilder.Entity<StoreType>().ToTable("StoreType", OracleUser.ToUpper());
            modelBuilder.Entity<StoreUser>().ToTable("StoreUser", OracleUser.ToUpper());
            modelBuilder.Entity<StoreVendor>().ToTable("StoreVendor", OracleUser.ToUpper());
            #endregion
            #region System
            modelBuilder.Entity<ImportExportMapping>().ToTable("ImportExportMapping", OracleUser.ToUpper());
            modelBuilder.Entity<Note>().ToTable("Note", OracleUser.ToUpper());
            modelBuilder.Entity<NoteType>().ToTable("NoteType", OracleUser.ToUpper());
            modelBuilder.Entity<RecordVersion>().ToTable("RecordVersion", OracleUser.ToUpper());
            modelBuilder.Entity<RecordVersionType>().ToTable("RecordVersionType", OracleUser.ToUpper());
            modelBuilder.Entity<Setting>().ToTable("Setting", OracleUser.ToUpper());
            modelBuilder.Entity<SettingGroup>().ToTable("SettingGroup", OracleUser.ToUpper());
            modelBuilder.Entity<SettingType>().ToTable("SettingType", OracleUser.ToUpper());
            modelBuilder.Entity<EventLog>().ToTable("SystemLog", OracleUser.ToUpper());
            #endregion
            #region Tax
            modelBuilder.Entity<HistoricalTaxRate>().ToTable("HistoricalTaxRate", OracleUser.ToUpper());
            modelBuilder.Entity<TaxCountry>().ToTable("TaxCountry", OracleUser.ToUpper());
            modelBuilder.Entity<TaxRegion>().ToTable("TaxRegion", OracleUser.ToUpper());
            #endregion
            #region Tracking
            modelBuilder.Entity<Campaign>().ToTable("Campaign", OracleUser.ToUpper());
            modelBuilder.Entity<CampaignAd>().ToTable("CampaignAd", OracleUser.ToUpper());
            modelBuilder.Entity<CampaignStatus>().ToTable("CampaignStatus", OracleUser.ToUpper());
            modelBuilder.Entity<CampaignType>().ToTable("CampaignType", OracleUser.ToUpper());
            modelBuilder.Entity<Event>().ToTable("Event", OracleUser.ToUpper());
            modelBuilder.Entity<EventStatus>().ToTable("EventStatus", OracleUser.ToUpper());
            modelBuilder.Entity<EventType>().ToTable("EventType", OracleUser.ToUpper());
            modelBuilder.Entity<IPOrganization>().ToTable("IPOrganization", OracleUser.ToUpper());
            modelBuilder.Entity<IPOrganizationStatus>().ToTable("IPOrganizationStatus", OracleUser.ToUpper());
            modelBuilder.Entity<PageView>().ToTable("PageView", OracleUser.ToUpper());
            modelBuilder.Entity<PageViewEvent>().ToTable("PageViewEvent", OracleUser.ToUpper());
            modelBuilder.Entity<PageViewStatus>().ToTable("PageViewStatus", OracleUser.ToUpper());
            modelBuilder.Entity<PageViewType>().ToTable("PageViewType", OracleUser.ToUpper());
            modelBuilder.Entity<Visit>().ToTable("Visit", OracleUser.ToUpper());
            modelBuilder.Entity<Visitor>().ToTable("Visitor", OracleUser.ToUpper());
            modelBuilder.Entity<VisitStatus>().ToTable("VisitStatus", OracleUser.ToUpper());
            #endregion
            #region Vendors
            modelBuilder.Entity<Vendor>().ToTable("Vendor", OracleUser.ToUpper());
            modelBuilder.Entity<VendorAccount>().ToTable("VendorAccount", OracleUser.ToUpper());
            modelBuilder.Entity<VendorImage>().ToTable("VendorImage", OracleUser.ToUpper());
            modelBuilder.Entity<VendorImageType>().ToTable("VendorImageType", OracleUser.ToUpper());
            modelBuilder.Entity<VendorManufacturer>().ToTable("VendorManufacturer", OracleUser.ToUpper());
            modelBuilder.Entity<VendorProduct>().ToTable("VendorProduct", OracleUser.ToUpper());
            modelBuilder.Entity<VendorType>().ToTable("VendorType", OracleUser.ToUpper());
            #endregion
        }
    }
}
