// <autogenerated>
// <copyright file="Contacts.ISearchModels.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the FilterBy Query Extensions generated to provide searching queries.</summary>
// <remarks>This file was auto-generated by FilterBys.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable PartialTypeWithSinglePart, RedundantUsingDirective, RegionWithSingleElement
#pragma warning disable 8669 // nullable reference types disabled
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;
    using System.Linq;
    using DataModel;
    using Ecommerce.DataModel;
    using Utilities;

    /// <content>The Role User SQL search extensions.</content>
    public static partial class RoleUserSQLSearchExtensions
    {
        /// <summary>An <see cref="IQueryable{RoleUser}" /> extension method that filters  by each of the properties of
        /// the search model which have been set.</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <param name="query">The query to act on.</param>
        /// <param name="model">The search model to filter by.</param>
        /// <returns>The <see cref="IQueryable{RoleUser}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<RoleUser> FilterRoleUsersBySearchModel(
                this IQueryable<RoleUser> query,
                IRoleUserSearchModel model)
        {
            if (model == null)
            {
                return query;
            }
            var query2 = Contract.RequiresNotNull(query)
                .FilterByBaseSearchModel(model)
                .FilterRoleUsersByMinRoleId(model.MinRoleId)
                .FilterRoleUsersByMaxRoleId(model.MaxRoleId)
                .FilterRoleUsersByMatchRoleId(model.MatchRoleId)
                .FilterRoleUsersByMinUserId(model.MinUserId)
                .FilterRoleUsersByMaxUserId(model.MaxUserId)
                .FilterRoleUsersByMatchUserId(model.MatchUserId)
                .FilterRoleUsersByMinEndDate(model.MinEndDate)
                .FilterRoleUsersByMaxEndDate(model.MaxEndDate)
                .FilterRoleUsersByMatchEndDate(model.MatchEndDate, model.MatchEndDateIncludeNull)
                .FilterRoleUsersByGroupID(model.GroupID, model.GroupIDIncludeNull)
                .FilterRoleUsersByMinStartDate(model.MinStartDate)
                .FilterRoleUsersByMaxStartDate(model.MaxStartDate)
                .FilterRoleUsersByMatchStartDate(model.MatchStartDate, model.MatchStartDateIncludeNull)
                ;
            return query2;
        }

        #region RoleId
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMinRoleId<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IRoleUser
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RoleId >= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMaxRoleId<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IRoleUser
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RoleId <= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a integer value to match).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMatchRoleId<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IRoleUser
        {
            if (Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RoleId == parameter);
        }
        #endregion

        #region UserId
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMinUserId<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IRoleUser
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.UserId >= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMaxUserId<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IRoleUser
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.UserId <= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a integer value to match).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMatchUserId<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IRoleUser
        {
            if (Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.UserId == parameter);
        }
        #endregion

        #region EndDate
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum Date/Time).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMinEndDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter)
            where TEntity : class, IRoleUser
        {
            if (!Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.EndDate >= parameter!.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum Date/Time).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMaxEndDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter)
            where TEntity : class, IRoleUser
        {
            if (!Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.EndDate <= parameter!.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a Date/Time to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMatchEndDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter,
                bool? includeNull)
            where TEntity : class, IRoleUser
        {
            if (includeNull != true && !Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.EndDate == parameter);
        }
        #endregion

        #region GroupID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByGroupID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IRoleUser
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.GroupID == parameter);
        }
        #endregion

        #region StartDate
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum Date/Time).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMinStartDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter)
            where TEntity : class, IRoleUser
        {
            if (!Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.StartDate >= parameter!.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum Date/Time).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMaxStartDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter)
            where TEntity : class, IRoleUser
        {
            if (!Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.StartDate <= parameter!.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a Date/Time to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterRoleUsersByMatchStartDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter,
                bool? includeNull)
            where TEntity : class, IRoleUser
        {
            if (includeNull != true && !Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.StartDate == parameter);
        }
        #endregion
    }
}
