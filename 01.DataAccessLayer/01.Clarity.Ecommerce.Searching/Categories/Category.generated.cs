// <autogenerated>
// <copyright file="Categories.ISearchModels.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the FilterBy Query Extensions generated to provide searching queries.</summary>
// <remarks>This file was auto-generated by FilterBys.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable PartialTypeWithSinglePart, RedundantUsingDirective, RegionWithSingleElement
#pragma warning disable 8669 // nullable reference types disabled
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;
    using System.Linq;
    using DataModel;
    using Ecommerce.DataModel;
    using Utilities;

    /// <content>The Category SQL search extensions.</content>
    public static partial class CategorySQLSearchExtensions
    {
        /// <summary>An <see cref="IQueryable{Category}" /> extension method that filters  by each of the properties of
        /// the search model which have been set.</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <param name="query">The query to act on.</param>
        /// <param name="model">The search model to filter by.</param>
        /// <returns>The <see cref="IQueryable{Category}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<Category> FilterCategoriesBySearchModel(
                this IQueryable<Category> query,
                ICategorySearchModel model)
        {
            if (model == null)
            {
                return query;
            }
            var query2 = Contract.RequiresNotNull(query)
                .FilterByNameableBaseSearchModel(model)
                .FilterIAmFilterableByMasterBrandsBySearchModel<Category, BrandCategory>(model)
                .FilterIAmFilterableByMasterFranchisesBySearchModel<Category, FranchiseCategory>(model)
                .FilterIAmFilterableByMasterProductsBySearchModel<Category, ProductCategory>(model)
                .FilterIAmFilterableByMasterStoresBySearchModel<Category, StoreCategory>(model)
                .FilterByHaveATypeSearchModel<Category, CategoryType>(model)
                .FilterIHaveAParentBasesBySearchModel(model)
                .FilterIHaveSeoBaseBySearchModel(model)
                .FilterCategoriesByIncludeInMenu(model.IncludeInMenu)
                .FilterCategoriesByIsVisible(model.IsVisible)
                .FilterCategoriesByMinimumOrderDollarAmountOverrideFeeIsPercent(model.MinimumOrderDollarAmountOverrideFeeIsPercent)
                .FilterCategoriesByMinimumOrderQuantityAmountOverrideFeeIsPercent(model.MinimumOrderQuantityAmountOverrideFeeIsPercent)
                .FilterCategoriesByMinHandlingCharge(model.MinHandlingCharge)
                .FilterCategoriesByMaxHandlingCharge(model.MaxHandlingCharge)
                .FilterCategoriesByMatchHandlingCharge(model.MatchHandlingCharge, model.MatchHandlingChargeIncludeNull)
                .FilterCategoriesByMinMinimumForFreeShippingDollarAmount(model.MinMinimumForFreeShippingDollarAmount)
                .FilterCategoriesByMaxMinimumForFreeShippingDollarAmount(model.MaxMinimumForFreeShippingDollarAmount)
                .FilterCategoriesByMatchMinimumForFreeShippingDollarAmount(model.MatchMinimumForFreeShippingDollarAmount, model.MatchMinimumForFreeShippingDollarAmountIncludeNull)
                .FilterCategoriesByMinMinimumForFreeShippingDollarAmountAfter(model.MinMinimumForFreeShippingDollarAmountAfter)
                .FilterCategoriesByMaxMinimumForFreeShippingDollarAmountAfter(model.MaxMinimumForFreeShippingDollarAmountAfter)
                .FilterCategoriesByMatchMinimumForFreeShippingDollarAmountAfter(model.MatchMinimumForFreeShippingDollarAmountAfter, model.MatchMinimumForFreeShippingDollarAmountAfterIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingDollarAmountBufferCategoryID(model.MinimumForFreeShippingDollarAmountBufferCategoryID, model.MinimumForFreeShippingDollarAmountBufferCategoryIDIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingDollarAmountBufferProductID(model.MinimumForFreeShippingDollarAmountBufferProductID, model.MinimumForFreeShippingDollarAmountBufferProductIDIncludeNull)
                .FilterCategoriesByMinMinimumForFreeShippingQuantityAmount(model.MinMinimumForFreeShippingQuantityAmount)
                .FilterCategoriesByMaxMinimumForFreeShippingQuantityAmount(model.MaxMinimumForFreeShippingQuantityAmount)
                .FilterCategoriesByMatchMinimumForFreeShippingQuantityAmount(model.MatchMinimumForFreeShippingQuantityAmount, model.MatchMinimumForFreeShippingQuantityAmountIncludeNull)
                .FilterCategoriesByMinMinimumForFreeShippingQuantityAmountAfter(model.MinMinimumForFreeShippingQuantityAmountAfter)
                .FilterCategoriesByMaxMinimumForFreeShippingQuantityAmountAfter(model.MaxMinimumForFreeShippingQuantityAmountAfter)
                .FilterCategoriesByMatchMinimumForFreeShippingQuantityAmountAfter(model.MatchMinimumForFreeShippingQuantityAmountAfter, model.MatchMinimumForFreeShippingQuantityAmountAfterIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingQuantityAmountBufferCategoryID(model.MinimumForFreeShippingQuantityAmountBufferCategoryID, model.MinimumForFreeShippingQuantityAmountBufferCategoryIDIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingQuantityAmountBufferProductID(model.MinimumForFreeShippingQuantityAmountBufferProductID, model.MinimumForFreeShippingQuantityAmountBufferProductIDIncludeNull)
                .FilterCategoriesByMinMinimumOrderDollarAmount(model.MinMinimumOrderDollarAmount)
                .FilterCategoriesByMaxMinimumOrderDollarAmount(model.MaxMinimumOrderDollarAmount)
                .FilterCategoriesByMatchMinimumOrderDollarAmount(model.MatchMinimumOrderDollarAmount, model.MatchMinimumOrderDollarAmountIncludeNull)
                .FilterCategoriesByMinMinimumOrderDollarAmountAfter(model.MinMinimumOrderDollarAmountAfter)
                .FilterCategoriesByMaxMinimumOrderDollarAmountAfter(model.MaxMinimumOrderDollarAmountAfter)
                .FilterCategoriesByMatchMinimumOrderDollarAmountAfter(model.MatchMinimumOrderDollarAmountAfter, model.MatchMinimumOrderDollarAmountAfterIncludeNull)
                .FilterCategoriesByMinimumOrderDollarAmountBufferCategoryID(model.MinimumOrderDollarAmountBufferCategoryID, model.MinimumOrderDollarAmountBufferCategoryIDIncludeNull)
                .FilterCategoriesByMinimumOrderDollarAmountBufferProductID(model.MinimumOrderDollarAmountBufferProductID, model.MinimumOrderDollarAmountBufferProductIDIncludeNull)
                .FilterCategoriesByMinMinimumOrderDollarAmountOverrideFee(model.MinMinimumOrderDollarAmountOverrideFee)
                .FilterCategoriesByMaxMinimumOrderDollarAmountOverrideFee(model.MaxMinimumOrderDollarAmountOverrideFee)
                .FilterCategoriesByMatchMinimumOrderDollarAmountOverrideFee(model.MatchMinimumOrderDollarAmountOverrideFee, model.MatchMinimumOrderDollarAmountOverrideFeeIncludeNull)
                .FilterCategoriesByMinMinimumOrderQuantityAmount(model.MinMinimumOrderQuantityAmount)
                .FilterCategoriesByMaxMinimumOrderQuantityAmount(model.MaxMinimumOrderQuantityAmount)
                .FilterCategoriesByMatchMinimumOrderQuantityAmount(model.MatchMinimumOrderQuantityAmount, model.MatchMinimumOrderQuantityAmountIncludeNull)
                .FilterCategoriesByMinMinimumOrderQuantityAmountAfter(model.MinMinimumOrderQuantityAmountAfter)
                .FilterCategoriesByMaxMinimumOrderQuantityAmountAfter(model.MaxMinimumOrderQuantityAmountAfter)
                .FilterCategoriesByMatchMinimumOrderQuantityAmountAfter(model.MatchMinimumOrderQuantityAmountAfter, model.MatchMinimumOrderQuantityAmountAfterIncludeNull)
                .FilterCategoriesByMinimumOrderQuantityAmountBufferCategoryID(model.MinimumOrderQuantityAmountBufferCategoryID, model.MinimumOrderQuantityAmountBufferCategoryIDIncludeNull)
                .FilterCategoriesByMinimumOrderQuantityAmountBufferProductID(model.MinimumOrderQuantityAmountBufferProductID, model.MinimumOrderQuantityAmountBufferProductIDIncludeNull)
                .FilterCategoriesByMinMinimumOrderQuantityAmountOverrideFee(model.MinMinimumOrderQuantityAmountOverrideFee)
                .FilterCategoriesByMaxMinimumOrderQuantityAmountOverrideFee(model.MaxMinimumOrderQuantityAmountOverrideFee)
                .FilterCategoriesByMatchMinimumOrderQuantityAmountOverrideFee(model.MatchMinimumOrderQuantityAmountOverrideFee, model.MatchMinimumOrderQuantityAmountOverrideFeeIncludeNull)
                .FilterCategoriesByParentID(model.ParentID, model.ParentIDIncludeNull)
                .FilterCategoriesByMinRestockingFeeAmount(model.MinRestockingFeeAmount)
                .FilterCategoriesByMaxRestockingFeeAmount(model.MaxRestockingFeeAmount)
                .FilterCategoriesByMatchRestockingFeeAmount(model.MatchRestockingFeeAmount, model.MatchRestockingFeeAmountIncludeNull)
                .FilterCategoriesByRestockingFeeAmountCurrencyID(model.RestockingFeeAmountCurrencyID, model.RestockingFeeAmountCurrencyIDIncludeNull)
                .FilterCategoriesByMinRestockingFeePercent(model.MinRestockingFeePercent)
                .FilterCategoriesByMaxRestockingFeePercent(model.MaxRestockingFeePercent)
                .FilterCategoriesByMatchRestockingFeePercent(model.MatchRestockingFeePercent, model.MatchRestockingFeePercentIncludeNull)
                .FilterCategoriesByMinSortOrder(model.MinSortOrder)
                .FilterCategoriesByMaxSortOrder(model.MaxSortOrder)
                .FilterCategoriesByMatchSortOrder(model.MatchSortOrder, model.MatchSortOrderIncludeNull)
                .FilterCategoriesByDisplayName(model.DisplayName, model.DisplayNameStrict, model.DisplayNameIncludeNull)
                .FilterCategoriesByFooterContent(model.FooterContent, model.FooterContentStrict, model.FooterContentIncludeNull)
                ; // Forced clip to prevent CS8078
            query2 = query2
                .FilterCategoriesByHeaderContent(model.HeaderContent, model.HeaderContentStrict, model.HeaderContentIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage, model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessageStrict, model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessageIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingDollarAmountWarningMessage(model.MinimumForFreeShippingDollarAmountWarningMessage, model.MinimumForFreeShippingDollarAmountWarningMessageStrict, model.MinimumForFreeShippingDollarAmountWarningMessageIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage, model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessageStrict, model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessageIncludeNull)
                .FilterCategoriesByMinimumForFreeShippingQuantityAmountWarningMessage(model.MinimumForFreeShippingQuantityAmountWarningMessage, model.MinimumForFreeShippingQuantityAmountWarningMessageStrict, model.MinimumForFreeShippingQuantityAmountWarningMessageIncludeNull)
                .FilterCategoriesByMinimumOrderDollarAmountOverrideFeeAcceptedMessage(model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage, model.MinimumOrderDollarAmountOverrideFeeAcceptedMessageStrict, model.MinimumOrderDollarAmountOverrideFeeAcceptedMessageIncludeNull)
                .FilterCategoriesByMinimumOrderDollarAmountOverrideFeeWarningMessage(model.MinimumOrderDollarAmountOverrideFeeWarningMessage, model.MinimumOrderDollarAmountOverrideFeeWarningMessageStrict, model.MinimumOrderDollarAmountOverrideFeeWarningMessageIncludeNull)
                .FilterCategoriesByMinimumOrderDollarAmountWarningMessage(model.MinimumOrderDollarAmountWarningMessage, model.MinimumOrderDollarAmountWarningMessageStrict, model.MinimumOrderDollarAmountWarningMessageIncludeNull)
                .FilterCategoriesByMinimumOrderQuantityAmountOverrideFeeAcceptedMessage(model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage, model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessageStrict, model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessageIncludeNull)
                .FilterCategoriesByMinimumOrderQuantityAmountOverrideFeeWarningMessage(model.MinimumOrderQuantityAmountOverrideFeeWarningMessage, model.MinimumOrderQuantityAmountOverrideFeeWarningMessageStrict, model.MinimumOrderQuantityAmountOverrideFeeWarningMessageIncludeNull)
                .FilterCategoriesByMinimumOrderQuantityAmountWarningMessage(model.MinimumOrderQuantityAmountWarningMessage, model.MinimumOrderQuantityAmountWarningMessageStrict, model.MinimumOrderQuantityAmountWarningMessageIncludeNull)
                .FilterCategoriesByRequiresRoles(model.RequiresRoles, model.RequiresRolesStrict, model.RequiresRolesIncludeNull)
                .FilterCategoriesByRequiresRolesAlt(model.RequiresRolesAlt, model.RequiresRolesAltStrict, model.RequiresRolesAltIncludeNull)
                .FilterCategoriesBySidebarContent(model.SidebarContent, model.SidebarContentStrict, model.SidebarContentIncludeNull)
                ;
            return query2;
        }

        #region IncludeInMenu
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByIncludeInMenu<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.IncludeInMenu == parameter);
        }
        #endregion

        #region IsVisible
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByIsVisible<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.IsVisible == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFeeIsPercent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderDollarAmountOverrideFeeIsPercent<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeIsPercent == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeIsPercent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderQuantityAmountOverrideFeeIsPercent<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeIsPercent == parameter);
        }
        #endregion

        #region HandlingCharge
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinHandlingCharge<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.HandlingCharge >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxHandlingCharge<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.HandlingCharge <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchHandlingCharge<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.HandlingCharge == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingDollarAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingDollarAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingQuantityAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingQuantityAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderDollarAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderDollarAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFee
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderQuantityAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderQuantityAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFee
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee == parameter);
        }
        #endregion

        #region ParentID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByParentID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.ParentID == parameter);
        }
        #endregion

        #region RestockingFeeAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinRestockingFeeAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.RestockingFeeAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxRestockingFeeAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RestockingFeeAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchRestockingFeeAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RestockingFeeAmount == parameter);
        }
        #endregion

        #region RestockingFeeAmountCurrencyID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByRestockingFeeAmountCurrencyID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RestockingFeeAmountCurrencyID == parameter);
        }
        #endregion

        #region RestockingFeePercent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinRestockingFeePercent<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.RestockingFeePercent >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxRestockingFeePercent<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RestockingFeePercent <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchRestockingFeePercent<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RestockingFeePercent == parameter);
        }
        #endregion

        #region SortOrder
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinSortOrder<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.SortOrder >= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMaxSortOrder<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, ICategory
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.SortOrder <= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a integer value to match).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMatchSortOrder<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.SortOrder == parameter);
        }
        #endregion

        #region DisplayName
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByDisplayName<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.DisplayName == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.DisplayName == null || x.DisplayName == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.DisplayName != null && x.DisplayName.Contains(search));
        }
        #endregion

        #region FooterContent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByFooterContent<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.FooterContent == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.FooterContent == null || x.FooterContent == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.FooterContent != null && x.FooterContent.Contains(search));
        }
        #endregion

        #region HeaderContent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByHeaderContent<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.HeaderContent == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.HeaderContent == null || x.HeaderContent == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.HeaderContent != null && x.HeaderContent.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingDollarAmountIgnoredAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == null || x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage != null && x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingDollarAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage == null || x.MinimumForFreeShippingDollarAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage != null && x.MinimumForFreeShippingDollarAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == null || x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage != null && x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumForFreeShippingQuantityAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage == null || x.MinimumForFreeShippingQuantityAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage != null && x.MinimumForFreeShippingQuantityAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFeeAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderDollarAmountOverrideFeeAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == null || x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage != null && x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFeeWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderDollarAmountOverrideFeeWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage == null || x.MinimumOrderDollarAmountOverrideFeeWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage != null && x.MinimumOrderDollarAmountOverrideFeeWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderDollarAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountWarningMessage == null || x.MinimumOrderDollarAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountWarningMessage != null && x.MinimumOrderDollarAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderQuantityAmountOverrideFeeAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == null || x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage != null && x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderQuantityAmountOverrideFeeWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == null || x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage != null && x.MinimumOrderQuantityAmountOverrideFeeWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByMinimumOrderQuantityAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountWarningMessage == null || x.MinimumOrderQuantityAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountWarningMessage != null && x.MinimumOrderQuantityAmountWarningMessage.Contains(search));
        }
        #endregion

        #region RequiresRoles
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByRequiresRoles<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.RequiresRoles == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.RequiresRoles == null || x.RequiresRoles == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.RequiresRoles != null && x.RequiresRoles.Contains(search));
        }
        #endregion

        #region RequiresRolesAlt
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesByRequiresRolesAlt<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.RequiresRolesAlt == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.RequiresRolesAlt == null || x.RequiresRolesAlt == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.RequiresRolesAlt != null && x.RequiresRolesAlt.Contains(search));
        }
        #endregion

        #region SidebarContent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterCategoriesBySidebarContent<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, ICategory
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.SidebarContent == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.SidebarContent == null || x.SidebarContent == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.SidebarContent != null && x.SidebarContent.Contains(search));
        }
        #endregion
    }
}
