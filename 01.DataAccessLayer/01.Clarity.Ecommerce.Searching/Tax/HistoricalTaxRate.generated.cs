// <autogenerated>
// <copyright file="Tax.ISearchModels.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the FilterBy Query Extensions generated to provide searching queries.</summary>
// <remarks>This file was auto-generated by FilterBys.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable PartialTypeWithSinglePart, RedundantUsingDirective, RegionWithSingleElement
#pragma warning disable 8669 // nullable reference types disabled
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;
    using System.Linq;
    using DataModel;
    using Ecommerce.DataModel;
    using Utilities;

    /// <content>The Historical Tax Rate SQL search extensions.</content>
    public static partial class HistoricalTaxRateSQLSearchExtensions
    {
        /// <summary>An <see cref="IQueryable{HistoricalTaxRate}" /> extension method that filters  by each of the properties of
        /// the search model which have been set.</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <param name="query">The query to act on.</param>
        /// <param name="model">The search model to filter by.</param>
        /// <returns>The <see cref="IQueryable{HistoricalTaxRate}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<HistoricalTaxRate> FilterHistoricalTaxRatesBySearchModel(
                this IQueryable<HistoricalTaxRate> query,
                IHistoricalTaxRateSearchModel model)
        {
            if (model == null)
            {
                return query;
            }
            var query2 = Contract.RequiresNotNull(query)
                .FilterByBaseSearchModel(model)
                .FilterHistoricalTaxRatesByMinOnDate(model.MinOnDate)
                .FilterHistoricalTaxRatesByMaxOnDate(model.MaxOnDate)
                .FilterHistoricalTaxRatesByMatchOnDate(model.MatchOnDate)
                .FilterHistoricalTaxRatesByMinRate(model.MinRate)
                .FilterHistoricalTaxRatesByMaxRate(model.MaxRate)
                .FilterHistoricalTaxRatesByMatchRate(model.MatchRate)
                .FilterHistoricalTaxRatesByMinCartHash(model.MinCartHash)
                .FilterHistoricalTaxRatesByMaxCartHash(model.MaxCartHash)
                .FilterHistoricalTaxRatesByMatchCartHash(model.MatchCartHash, model.MatchCartHashIncludeNull)
                .FilterHistoricalTaxRatesByMinCountryLevelRate(model.MinCountryLevelRate)
                .FilterHistoricalTaxRatesByMaxCountryLevelRate(model.MaxCountryLevelRate)
                .FilterHistoricalTaxRatesByMatchCountryLevelRate(model.MatchCountryLevelRate, model.MatchCountryLevelRateIncludeNull)
                .FilterHistoricalTaxRatesByMinDistrictLevelRate(model.MinDistrictLevelRate)
                .FilterHistoricalTaxRatesByMaxDistrictLevelRate(model.MaxDistrictLevelRate)
                .FilterHistoricalTaxRatesByMatchDistrictLevelRate(model.MatchDistrictLevelRate, model.MatchDistrictLevelRateIncludeNull)
                .FilterHistoricalTaxRatesByMinRegionLevelRate(model.MinRegionLevelRate)
                .FilterHistoricalTaxRatesByMaxRegionLevelRate(model.MaxRegionLevelRate)
                .FilterHistoricalTaxRatesByMatchRegionLevelRate(model.MatchRegionLevelRate, model.MatchRegionLevelRateIncludeNull)
                .FilterHistoricalTaxRatesByMinTotalAmount(model.MinTotalAmount)
                .FilterHistoricalTaxRatesByMaxTotalAmount(model.MaxTotalAmount)
                .FilterHistoricalTaxRatesByMatchTotalAmount(model.MatchTotalAmount, model.MatchTotalAmountIncludeNull)
                .FilterHistoricalTaxRatesByMinTotalTax(model.MinTotalTax)
                .FilterHistoricalTaxRatesByMaxTotalTax(model.MaxTotalTax)
                .FilterHistoricalTaxRatesByMatchTotalTax(model.MatchTotalTax, model.MatchTotalTaxIncludeNull)
                .FilterHistoricalTaxRatesByMinTotalTaxable(model.MinTotalTaxable)
                .FilterHistoricalTaxRatesByMaxTotalTaxable(model.MaxTotalTaxable)
                .FilterHistoricalTaxRatesByMatchTotalTaxable(model.MatchTotalTaxable, model.MatchTotalTaxableIncludeNull)
                .FilterHistoricalTaxRatesByMinTotalTaxCalculated(model.MinTotalTaxCalculated)
                .FilterHistoricalTaxRatesByMaxTotalTaxCalculated(model.MaxTotalTaxCalculated)
                .FilterHistoricalTaxRatesByMatchTotalTaxCalculated(model.MatchTotalTaxCalculated, model.MatchTotalTaxCalculatedIncludeNull)
                .FilterHistoricalTaxRatesByProvider(model.Provider, model.ProviderStrict, model.ProviderIncludeNull)
                .FilterHistoricalTaxRatesBySerializedRequest(model.SerializedRequest, model.SerializedRequestStrict, model.SerializedRequestIncludeNull)
                .FilterHistoricalTaxRatesBySerializedResponse(model.SerializedResponse, model.SerializedResponseStrict, model.SerializedResponseIncludeNull)
                ;
            return query2;
        }

        #region OnDate
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum Date/Time).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinOnDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OnDate >= parameter!.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum Date/Time).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxOnDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OnDate <= parameter!.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a Date/Time to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchOnDate<TEntity>(
                this IQueryable<TEntity> query,
                DateTime? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!Contract.CheckValidDate(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OnDate == parameter);
        }
        #endregion

        #region Rate
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.Rate >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.Rate <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.Rate == parameter);
        }
        #endregion

        #region CartHash
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum long value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinCartHash<TEntity>(
                this IQueryable<TEntity> query,
                long? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.CartHash >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum long value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxCartHash<TEntity>(
                this IQueryable<TEntity> query,
                long? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.CartHash <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a long value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchCartHash<TEntity>(
                this IQueryable<TEntity> query,
                long? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.CartHash == parameter);
        }
        #endregion

        #region CountryLevelRate
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinCountryLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.CountryLevelRate >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxCountryLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.CountryLevelRate <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchCountryLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.CountryLevelRate == parameter);
        }
        #endregion

        #region DistrictLevelRate
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinDistrictLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.DistrictLevelRate >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxDistrictLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.DistrictLevelRate <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchDistrictLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.DistrictLevelRate == parameter);
        }
        #endregion

        #region RegionLevelRate
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinRegionLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.RegionLevelRate >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxRegionLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RegionLevelRate <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchRegionLevelRate<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.RegionLevelRate == parameter);
        }
        #endregion

        #region TotalAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinTotalAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxTotalAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchTotalAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalAmount == parameter);
        }
        #endregion

        #region TotalTax
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinTotalTax<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTax >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxTotalTax<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTax <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchTotalTax<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTax == parameter);
        }
        #endregion

        #region TotalTaxable
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinTotalTaxable<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTaxable >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxTotalTaxable<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTaxable <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchTotalTaxable<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTaxable == parameter);
        }
        #endregion

        #region TotalTaxCalculated
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMinTotalTaxCalculated<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTaxCalculated >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMaxTotalTaxCalculated<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IHistoricalTaxRate
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTaxCalculated <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByMatchTotalTaxCalculated<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.TotalTaxCalculated == parameter);
        }
        #endregion

        #region Provider
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesByProvider<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.Provider == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.Provider == null || x.Provider == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.Provider != null && x.Provider.Contains(search));
        }
        #endregion

        #region SerializedRequest
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesBySerializedRequest<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.SerializedRequest == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.SerializedRequest == null || x.SerializedRequest == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.SerializedRequest != null && x.SerializedRequest.Contains(search));
        }
        #endregion

        #region SerializedResponse
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterHistoricalTaxRatesBySerializedResponse<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IHistoricalTaxRate
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.SerializedResponse == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.SerializedResponse == null || x.SerializedResponse == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.SerializedResponse != null && x.SerializedResponse.Contains(search));
        }
        #endregion
    }
}
