// <autogenerated>
// <copyright file="Franchises.ISearchModels.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the FilterBy Query Extensions generated to provide searching queries.</summary>
// <remarks>This file was auto-generated by FilterBys.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable PartialTypeWithSinglePart, RedundantUsingDirective, RegionWithSingleElement
#pragma warning disable 8669 // nullable reference types disabled
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;
    using System.Linq;
    using DataModel;
    using Ecommerce.DataModel;
    using Utilities;

    /// <content>The Franchise SQL search extensions.</content>
    public static partial class FranchiseSQLSearchExtensions
    {
        /// <summary>An <see cref="IQueryable{Franchise}" /> extension method that filters  by each of the properties of
        /// the search model which have been set.</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <param name="query">The query to act on.</param>
        /// <param name="model">The search model to filter by.</param>
        /// <returns>The <see cref="IQueryable{Franchise}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<Franchise> FilterFranchisesBySearchModel(
                this IQueryable<Franchise> query,
                IFranchiseSearchModel model)
        {
            if (model == null)
            {
                return query;
            }
            var query2 = Contract.RequiresNotNull(query)
                .FilterByNameableBaseSearchModel(model)
                .FilterIAmFilterableBySlaveAccountsBySearchModel<Franchise, FranchiseAccount>(model)
                .FilterIAmFilterableByMasterBrandsBySearchModel<Franchise, BrandFranchise>(model)
                .FilterIAmFilterableBySlaveCategoriesBySearchModel<Franchise, FranchiseCategory>(model)
                .FilterIAmFilterableBySlaveManufacturersBySearchModel<Franchise, FranchiseManufacturer>(model)
                .FilterIAmFilterableBySlaveProductsBySearchModel<Franchise, FranchiseProduct>(model)
                .FilterIAmFilterableBySlaveStoresBySearchModel<Franchise, FranchiseStore>(model)
                .FilterIAmFilterableBySlaveUsersBySearchModel<Franchise, FranchiseUser>(model)
                .FilterIAmFilterableBySlaveVendorsBySearchModel<Franchise, FranchiseVendor>(model)
                .FilterByHaveATypeSearchModel<Franchise, FranchiseType>(model)
                .FilterFranchisesByMinimumOrderDollarAmountOverrideFeeIsPercent(model.MinimumOrderDollarAmountOverrideFeeIsPercent)
                .FilterFranchisesByMinimumOrderQuantityAmountOverrideFeeIsPercent(model.MinimumOrderQuantityAmountOverrideFeeIsPercent)
                .FilterFranchisesByMinMinimumForFreeShippingDollarAmount(model.MinMinimumForFreeShippingDollarAmount)
                .FilterFranchisesByMaxMinimumForFreeShippingDollarAmount(model.MaxMinimumForFreeShippingDollarAmount)
                .FilterFranchisesByMatchMinimumForFreeShippingDollarAmount(model.MatchMinimumForFreeShippingDollarAmount, model.MatchMinimumForFreeShippingDollarAmountIncludeNull)
                .FilterFranchisesByMinMinimumForFreeShippingDollarAmountAfter(model.MinMinimumForFreeShippingDollarAmountAfter)
                .FilterFranchisesByMaxMinimumForFreeShippingDollarAmountAfter(model.MaxMinimumForFreeShippingDollarAmountAfter)
                .FilterFranchisesByMatchMinimumForFreeShippingDollarAmountAfter(model.MatchMinimumForFreeShippingDollarAmountAfter, model.MatchMinimumForFreeShippingDollarAmountAfterIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingDollarAmountBufferCategoryID(model.MinimumForFreeShippingDollarAmountBufferCategoryID, model.MinimumForFreeShippingDollarAmountBufferCategoryIDIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingDollarAmountBufferProductID(model.MinimumForFreeShippingDollarAmountBufferProductID, model.MinimumForFreeShippingDollarAmountBufferProductIDIncludeNull)
                .FilterFranchisesByMinMinimumForFreeShippingQuantityAmount(model.MinMinimumForFreeShippingQuantityAmount)
                .FilterFranchisesByMaxMinimumForFreeShippingQuantityAmount(model.MaxMinimumForFreeShippingQuantityAmount)
                .FilterFranchisesByMatchMinimumForFreeShippingQuantityAmount(model.MatchMinimumForFreeShippingQuantityAmount, model.MatchMinimumForFreeShippingQuantityAmountIncludeNull)
                .FilterFranchisesByMinMinimumForFreeShippingQuantityAmountAfter(model.MinMinimumForFreeShippingQuantityAmountAfter)
                .FilterFranchisesByMaxMinimumForFreeShippingQuantityAmountAfter(model.MaxMinimumForFreeShippingQuantityAmountAfter)
                .FilterFranchisesByMatchMinimumForFreeShippingQuantityAmountAfter(model.MatchMinimumForFreeShippingQuantityAmountAfter, model.MatchMinimumForFreeShippingQuantityAmountAfterIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingQuantityAmountBufferCategoryID(model.MinimumForFreeShippingQuantityAmountBufferCategoryID, model.MinimumForFreeShippingQuantityAmountBufferCategoryIDIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingQuantityAmountBufferProductID(model.MinimumForFreeShippingQuantityAmountBufferProductID, model.MinimumForFreeShippingQuantityAmountBufferProductIDIncludeNull)
                .FilterFranchisesByMinMinimumOrderDollarAmount(model.MinMinimumOrderDollarAmount)
                .FilterFranchisesByMaxMinimumOrderDollarAmount(model.MaxMinimumOrderDollarAmount)
                .FilterFranchisesByMatchMinimumOrderDollarAmount(model.MatchMinimumOrderDollarAmount, model.MatchMinimumOrderDollarAmountIncludeNull)
                .FilterFranchisesByMinMinimumOrderDollarAmountAfter(model.MinMinimumOrderDollarAmountAfter)
                .FilterFranchisesByMaxMinimumOrderDollarAmountAfter(model.MaxMinimumOrderDollarAmountAfter)
                .FilterFranchisesByMatchMinimumOrderDollarAmountAfter(model.MatchMinimumOrderDollarAmountAfter, model.MatchMinimumOrderDollarAmountAfterIncludeNull)
                .FilterFranchisesByMinimumOrderDollarAmountBufferCategoryID(model.MinimumOrderDollarAmountBufferCategoryID, model.MinimumOrderDollarAmountBufferCategoryIDIncludeNull)
                .FilterFranchisesByMinimumOrderDollarAmountBufferProductID(model.MinimumOrderDollarAmountBufferProductID, model.MinimumOrderDollarAmountBufferProductIDIncludeNull)
                .FilterFranchisesByMinMinimumOrderDollarAmountOverrideFee(model.MinMinimumOrderDollarAmountOverrideFee)
                .FilterFranchisesByMaxMinimumOrderDollarAmountOverrideFee(model.MaxMinimumOrderDollarAmountOverrideFee)
                .FilterFranchisesByMatchMinimumOrderDollarAmountOverrideFee(model.MatchMinimumOrderDollarAmountOverrideFee, model.MatchMinimumOrderDollarAmountOverrideFeeIncludeNull)
                .FilterFranchisesByMinMinimumOrderQuantityAmount(model.MinMinimumOrderQuantityAmount)
                .FilterFranchisesByMaxMinimumOrderQuantityAmount(model.MaxMinimumOrderQuantityAmount)
                .FilterFranchisesByMatchMinimumOrderQuantityAmount(model.MatchMinimumOrderQuantityAmount, model.MatchMinimumOrderQuantityAmountIncludeNull)
                .FilterFranchisesByMinMinimumOrderQuantityAmountAfter(model.MinMinimumOrderQuantityAmountAfter)
                .FilterFranchisesByMaxMinimumOrderQuantityAmountAfter(model.MaxMinimumOrderQuantityAmountAfter)
                .FilterFranchisesByMatchMinimumOrderQuantityAmountAfter(model.MatchMinimumOrderQuantityAmountAfter, model.MatchMinimumOrderQuantityAmountAfterIncludeNull)
                .FilterFranchisesByMinimumOrderQuantityAmountBufferCategoryID(model.MinimumOrderQuantityAmountBufferCategoryID, model.MinimumOrderQuantityAmountBufferCategoryIDIncludeNull)
                .FilterFranchisesByMinimumOrderQuantityAmountBufferProductID(model.MinimumOrderQuantityAmountBufferProductID, model.MinimumOrderQuantityAmountBufferProductIDIncludeNull)
                .FilterFranchisesByMinMinimumOrderQuantityAmountOverrideFee(model.MinMinimumOrderQuantityAmountOverrideFee)
                .FilterFranchisesByMaxMinimumOrderQuantityAmountOverrideFee(model.MaxMinimumOrderQuantityAmountOverrideFee)
                .FilterFranchisesByMatchMinimumOrderQuantityAmountOverrideFee(model.MatchMinimumOrderQuantityAmountOverrideFee, model.MatchMinimumOrderQuantityAmountOverrideFeeIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage, model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessageStrict, model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessageIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingDollarAmountWarningMessage(model.MinimumForFreeShippingDollarAmountWarningMessage, model.MinimumForFreeShippingDollarAmountWarningMessageStrict, model.MinimumForFreeShippingDollarAmountWarningMessageIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage, model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessageStrict, model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessageIncludeNull)
                .FilterFranchisesByMinimumForFreeShippingQuantityAmountWarningMessage(model.MinimumForFreeShippingQuantityAmountWarningMessage, model.MinimumForFreeShippingQuantityAmountWarningMessageStrict, model.MinimumForFreeShippingQuantityAmountWarningMessageIncludeNull)
                .FilterFranchisesByMinimumOrderDollarAmountOverrideFeeAcceptedMessage(model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage, model.MinimumOrderDollarAmountOverrideFeeAcceptedMessageStrict, model.MinimumOrderDollarAmountOverrideFeeAcceptedMessageIncludeNull)
                .FilterFranchisesByMinimumOrderDollarAmountOverrideFeeWarningMessage(model.MinimumOrderDollarAmountOverrideFeeWarningMessage, model.MinimumOrderDollarAmountOverrideFeeWarningMessageStrict, model.MinimumOrderDollarAmountOverrideFeeWarningMessageIncludeNull)
                .FilterFranchisesByMinimumOrderDollarAmountWarningMessage(model.MinimumOrderDollarAmountWarningMessage, model.MinimumOrderDollarAmountWarningMessageStrict, model.MinimumOrderDollarAmountWarningMessageIncludeNull)
                .FilterFranchisesByMinimumOrderQuantityAmountOverrideFeeAcceptedMessage(model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage, model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessageStrict, model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessageIncludeNull)
                .FilterFranchisesByMinimumOrderQuantityAmountOverrideFeeWarningMessage(model.MinimumOrderQuantityAmountOverrideFeeWarningMessage, model.MinimumOrderQuantityAmountOverrideFeeWarningMessageStrict, model.MinimumOrderQuantityAmountOverrideFeeWarningMessageIncludeNull)
                .FilterFranchisesByMinimumOrderQuantityAmountWarningMessage(model.MinimumOrderQuantityAmountWarningMessage, model.MinimumOrderQuantityAmountWarningMessageStrict, model.MinimumOrderQuantityAmountWarningMessageIncludeNull)
                ;
            return query2;
        }

        #region MinimumOrderDollarAmountOverrideFeeIsPercent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderDollarAmountOverrideFeeIsPercent<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeIsPercent == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeIsPercent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderQuantityAmountOverrideFeeIsPercent<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeIsPercent == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingDollarAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingDollarAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingQuantityAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingQuantityAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderDollarAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderDollarAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFee
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderQuantityAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderQuantityAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFee
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMaxMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchise
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMatchMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingDollarAmountIgnoredAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == null || x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage != null && x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingDollarAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage == null || x.MinimumForFreeShippingDollarAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage != null && x.MinimumForFreeShippingDollarAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == null || x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage != null && x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumForFreeShippingQuantityAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage == null || x.MinimumForFreeShippingQuantityAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage != null && x.MinimumForFreeShippingQuantityAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFeeAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderDollarAmountOverrideFeeAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == null || x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage != null && x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFeeWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderDollarAmountOverrideFeeWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage == null || x.MinimumOrderDollarAmountOverrideFeeWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage != null && x.MinimumOrderDollarAmountOverrideFeeWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderDollarAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountWarningMessage == null || x.MinimumOrderDollarAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountWarningMessage != null && x.MinimumOrderDollarAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderQuantityAmountOverrideFeeAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == null || x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage != null && x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderQuantityAmountOverrideFeeWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == null || x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage != null && x.MinimumOrderQuantityAmountOverrideFeeWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchisesByMinimumOrderQuantityAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IFranchise
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountWarningMessage == null || x.MinimumOrderQuantityAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountWarningMessage != null && x.MinimumOrderQuantityAmountWarningMessage.Contains(search));
        }
        #endregion
    }
}
