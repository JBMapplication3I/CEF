// <autogenerated>
// <copyright file="Franchises.ISearchModels.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the FilterBy Query Extensions generated to provide searching queries.</summary>
// <remarks>This file was auto-generated by FilterBys.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable PartialTypeWithSinglePart, RedundantUsingDirective, RegionWithSingleElement
#pragma warning disable 8669 // nullable reference types disabled
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;
    using System.Linq;
    using DataModel;
    using Ecommerce.DataModel;
    using Utilities;

    /// <content>The Franchise Product SQL search extensions.</content>
    public static partial class FranchiseProductSQLSearchExtensions
    {
        /// <summary>An <see cref="IQueryable{FranchiseProduct}" /> extension method that filters  by each of the properties of
        /// the search model which have been set.</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <param name="query">The query to act on.</param>
        /// <param name="model">The search model to filter by.</param>
        /// <returns>The <see cref="IQueryable{FranchiseProduct}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<FranchiseProduct> FilterFranchiseProductsBySearchModel(
                this IQueryable<FranchiseProduct> query,
                IFranchiseProductSearchModel model)
        {
            if (model == null)
            {
                return query;
            }
            var query2 = Contract.RequiresNotNull(query)
                .FilterByBaseSearchModel(model)
                .FilterByIAmARelationshipTableBaseSearchModel<FranchiseProduct, Franchise, Product>(model)
                .FilterFranchiseProductsByIsVisibleIn(model.IsVisibleIn)
                .FilterFranchiseProductsByMinPriceBase(model.MinPriceBase)
                .FilterFranchiseProductsByMaxPriceBase(model.MaxPriceBase)
                .FilterFranchiseProductsByMatchPriceBase(model.MatchPriceBase, model.MatchPriceBaseIncludeNull)
                .FilterFranchiseProductsByMinPriceMsrp(model.MinPriceMsrp)
                .FilterFranchiseProductsByMaxPriceMsrp(model.MaxPriceMsrp)
                .FilterFranchiseProductsByMatchPriceMsrp(model.MatchPriceMsrp, model.MatchPriceMsrpIncludeNull)
                .FilterFranchiseProductsByMinPriceReduction(model.MinPriceReduction)
                .FilterFranchiseProductsByMaxPriceReduction(model.MaxPriceReduction)
                .FilterFranchiseProductsByMatchPriceReduction(model.MatchPriceReduction, model.MatchPriceReductionIncludeNull)
                .FilterFranchiseProductsByMinPriceSale(model.MinPriceSale)
                .FilterFranchiseProductsByMaxPriceSale(model.MaxPriceSale)
                .FilterFranchiseProductsByMatchPriceSale(model.MatchPriceSale, model.MatchPriceSaleIncludeNull)
                ;
            return query2;
        }

        #region IsVisibleIn
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByIsVisibleIn<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.IsVisibleIn == parameter);
        }
        #endregion

        #region PriceBase
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMinPriceBase<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceBase >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMaxPriceBase<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceBase <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMatchPriceBase<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchiseProduct
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceBase == parameter);
        }
        #endregion

        #region PriceMsrp
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMinPriceMsrp<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceMsrp >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMaxPriceMsrp<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceMsrp <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMatchPriceMsrp<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchiseProduct
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceMsrp == parameter);
        }
        #endregion

        #region PriceReduction
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMinPriceReduction<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceReduction >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMaxPriceReduction<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceReduction <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMatchPriceReduction<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchiseProduct
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceReduction == parameter);
        }
        #endregion

        #region PriceSale
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMinPriceSale<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceSale >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMaxPriceSale<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IFranchiseProduct
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceSale <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterFranchiseProductsByMatchPriceSale<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IFranchiseProduct
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.PriceSale == parameter);
        }
        #endregion
    }
}
