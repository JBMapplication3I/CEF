// <autogenerated>
// <copyright file="Brands.ISearchModels.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the FilterBy Query Extensions generated to provide searching queries.</summary>
// <remarks>This file was auto-generated by FilterBys.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable PartialTypeWithSinglePart, RedundantUsingDirective, RegionWithSingleElement
#pragma warning disable 8669 // nullable reference types disabled
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;
    using System.Linq;
    using DataModel;
    using Ecommerce.DataModel;
    using Utilities;

    /// <content>The Brand SQL search extensions.</content>
    public static partial class BrandSQLSearchExtensions
    {
        /// <summary>An <see cref="IQueryable{Brand}" /> extension method that filters  by each of the properties of
        /// the search model which have been set.</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <param name="query">The query to act on.</param>
        /// <param name="model">The search model to filter by.</param>
        /// <returns>The <see cref="IQueryable{Brand}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<Brand> FilterBrandsBySearchModel(
                this IQueryable<Brand> query,
                IBrandSearchModel model)
        {
            if (model == null)
            {
                return query;
            }
            var query2 = Contract.RequiresNotNull(query)
                .FilterByNameableBaseSearchModel(model)
                .FilterIAmFilterableBySlaveAccountsBySearchModel<Brand, BrandAccount>(model)
                .FilterIAmFilterableBySlaveCategoriesBySearchModel<Brand, BrandCategory>(model)
                .FilterIAmFilterableBySlaveFranchisesBySearchModel<Brand, BrandFranchise>(model)
                .FilterIAmFilterableBySlaveProductsBySearchModel<Brand, BrandProduct>(model)
                .FilterIAmFilterableBySlaveStoresBySearchModel<Brand, BrandStore>(model)
                .FilterIAmFilterableBySlaveUsersBySearchModel<Brand, BrandUser>(model)
                .FilterBrandsByMinimumOrderDollarAmountOverrideFeeIsPercent(model.MinimumOrderDollarAmountOverrideFeeIsPercent)
                .FilterBrandsByMinimumOrderQuantityAmountOverrideFeeIsPercent(model.MinimumOrderQuantityAmountOverrideFeeIsPercent)
                .FilterBrandsByMinMinimumForFreeShippingDollarAmount(model.MinMinimumForFreeShippingDollarAmount)
                .FilterBrandsByMaxMinimumForFreeShippingDollarAmount(model.MaxMinimumForFreeShippingDollarAmount)
                .FilterBrandsByMatchMinimumForFreeShippingDollarAmount(model.MatchMinimumForFreeShippingDollarAmount, model.MatchMinimumForFreeShippingDollarAmountIncludeNull)
                .FilterBrandsByMinMinimumForFreeShippingDollarAmountAfter(model.MinMinimumForFreeShippingDollarAmountAfter)
                .FilterBrandsByMaxMinimumForFreeShippingDollarAmountAfter(model.MaxMinimumForFreeShippingDollarAmountAfter)
                .FilterBrandsByMatchMinimumForFreeShippingDollarAmountAfter(model.MatchMinimumForFreeShippingDollarAmountAfter, model.MatchMinimumForFreeShippingDollarAmountAfterIncludeNull)
                .FilterBrandsByMinimumForFreeShippingDollarAmountBufferCategoryID(model.MinimumForFreeShippingDollarAmountBufferCategoryID, model.MinimumForFreeShippingDollarAmountBufferCategoryIDIncludeNull)
                .FilterBrandsByMinimumForFreeShippingDollarAmountBufferProductID(model.MinimumForFreeShippingDollarAmountBufferProductID, model.MinimumForFreeShippingDollarAmountBufferProductIDIncludeNull)
                .FilterBrandsByMinMinimumForFreeShippingQuantityAmount(model.MinMinimumForFreeShippingQuantityAmount)
                .FilterBrandsByMaxMinimumForFreeShippingQuantityAmount(model.MaxMinimumForFreeShippingQuantityAmount)
                .FilterBrandsByMatchMinimumForFreeShippingQuantityAmount(model.MatchMinimumForFreeShippingQuantityAmount, model.MatchMinimumForFreeShippingQuantityAmountIncludeNull)
                .FilterBrandsByMinMinimumForFreeShippingQuantityAmountAfter(model.MinMinimumForFreeShippingQuantityAmountAfter)
                .FilterBrandsByMaxMinimumForFreeShippingQuantityAmountAfter(model.MaxMinimumForFreeShippingQuantityAmountAfter)
                .FilterBrandsByMatchMinimumForFreeShippingQuantityAmountAfter(model.MatchMinimumForFreeShippingQuantityAmountAfter, model.MatchMinimumForFreeShippingQuantityAmountAfterIncludeNull)
                .FilterBrandsByMinimumForFreeShippingQuantityAmountBufferCategoryID(model.MinimumForFreeShippingQuantityAmountBufferCategoryID, model.MinimumForFreeShippingQuantityAmountBufferCategoryIDIncludeNull)
                .FilterBrandsByMinimumForFreeShippingQuantityAmountBufferProductID(model.MinimumForFreeShippingQuantityAmountBufferProductID, model.MinimumForFreeShippingQuantityAmountBufferProductIDIncludeNull)
                .FilterBrandsByMinMinimumOrderDollarAmount(model.MinMinimumOrderDollarAmount)
                .FilterBrandsByMaxMinimumOrderDollarAmount(model.MaxMinimumOrderDollarAmount)
                .FilterBrandsByMatchMinimumOrderDollarAmount(model.MatchMinimumOrderDollarAmount, model.MatchMinimumOrderDollarAmountIncludeNull)
                .FilterBrandsByMinMinimumOrderDollarAmountAfter(model.MinMinimumOrderDollarAmountAfter)
                .FilterBrandsByMaxMinimumOrderDollarAmountAfter(model.MaxMinimumOrderDollarAmountAfter)
                .FilterBrandsByMatchMinimumOrderDollarAmountAfter(model.MatchMinimumOrderDollarAmountAfter, model.MatchMinimumOrderDollarAmountAfterIncludeNull)
                .FilterBrandsByMinimumOrderDollarAmountBufferCategoryID(model.MinimumOrderDollarAmountBufferCategoryID, model.MinimumOrderDollarAmountBufferCategoryIDIncludeNull)
                .FilterBrandsByMinimumOrderDollarAmountBufferProductID(model.MinimumOrderDollarAmountBufferProductID, model.MinimumOrderDollarAmountBufferProductIDIncludeNull)
                .FilterBrandsByMinMinimumOrderDollarAmountOverrideFee(model.MinMinimumOrderDollarAmountOverrideFee)
                .FilterBrandsByMaxMinimumOrderDollarAmountOverrideFee(model.MaxMinimumOrderDollarAmountOverrideFee)
                .FilterBrandsByMatchMinimumOrderDollarAmountOverrideFee(model.MatchMinimumOrderDollarAmountOverrideFee, model.MatchMinimumOrderDollarAmountOverrideFeeIncludeNull)
                .FilterBrandsByMinMinimumOrderQuantityAmount(model.MinMinimumOrderQuantityAmount)
                .FilterBrandsByMaxMinimumOrderQuantityAmount(model.MaxMinimumOrderQuantityAmount)
                .FilterBrandsByMatchMinimumOrderQuantityAmount(model.MatchMinimumOrderQuantityAmount, model.MatchMinimumOrderQuantityAmountIncludeNull)
                .FilterBrandsByMinMinimumOrderQuantityAmountAfter(model.MinMinimumOrderQuantityAmountAfter)
                .FilterBrandsByMaxMinimumOrderQuantityAmountAfter(model.MaxMinimumOrderQuantityAmountAfter)
                .FilterBrandsByMatchMinimumOrderQuantityAmountAfter(model.MatchMinimumOrderQuantityAmountAfter, model.MatchMinimumOrderQuantityAmountAfterIncludeNull)
                .FilterBrandsByMinimumOrderQuantityAmountBufferCategoryID(model.MinimumOrderQuantityAmountBufferCategoryID, model.MinimumOrderQuantityAmountBufferCategoryIDIncludeNull)
                .FilterBrandsByMinimumOrderQuantityAmountBufferProductID(model.MinimumOrderQuantityAmountBufferProductID, model.MinimumOrderQuantityAmountBufferProductIDIncludeNull)
                .FilterBrandsByMinMinimumOrderQuantityAmountOverrideFee(model.MinMinimumOrderQuantityAmountOverrideFee)
                .FilterBrandsByMaxMinimumOrderQuantityAmountOverrideFee(model.MaxMinimumOrderQuantityAmountOverrideFee)
                .FilterBrandsByMatchMinimumOrderQuantityAmountOverrideFee(model.MatchMinimumOrderQuantityAmountOverrideFee, model.MatchMinimumOrderQuantityAmountOverrideFeeIncludeNull)
                .FilterBrandsByMinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage, model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessageStrict, model.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessageIncludeNull)
                .FilterBrandsByMinimumForFreeShippingDollarAmountWarningMessage(model.MinimumForFreeShippingDollarAmountWarningMessage, model.MinimumForFreeShippingDollarAmountWarningMessageStrict, model.MinimumForFreeShippingDollarAmountWarningMessageIncludeNull)
                .FilterBrandsByMinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage, model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessageStrict, model.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessageIncludeNull)
                .FilterBrandsByMinimumForFreeShippingQuantityAmountWarningMessage(model.MinimumForFreeShippingQuantityAmountWarningMessage, model.MinimumForFreeShippingQuantityAmountWarningMessageStrict, model.MinimumForFreeShippingQuantityAmountWarningMessageIncludeNull)
                .FilterBrandsByMinimumOrderDollarAmountOverrideFeeAcceptedMessage(model.MinimumOrderDollarAmountOverrideFeeAcceptedMessage, model.MinimumOrderDollarAmountOverrideFeeAcceptedMessageStrict, model.MinimumOrderDollarAmountOverrideFeeAcceptedMessageIncludeNull)
                .FilterBrandsByMinimumOrderDollarAmountOverrideFeeWarningMessage(model.MinimumOrderDollarAmountOverrideFeeWarningMessage, model.MinimumOrderDollarAmountOverrideFeeWarningMessageStrict, model.MinimumOrderDollarAmountOverrideFeeWarningMessageIncludeNull)
                .FilterBrandsByMinimumOrderDollarAmountWarningMessage(model.MinimumOrderDollarAmountWarningMessage, model.MinimumOrderDollarAmountWarningMessageStrict, model.MinimumOrderDollarAmountWarningMessageIncludeNull)
                .FilterBrandsByMinimumOrderQuantityAmountOverrideFeeAcceptedMessage(model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage, model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessageStrict, model.MinimumOrderQuantityAmountOverrideFeeAcceptedMessageIncludeNull)
                .FilterBrandsByMinimumOrderQuantityAmountOverrideFeeWarningMessage(model.MinimumOrderQuantityAmountOverrideFeeWarningMessage, model.MinimumOrderQuantityAmountOverrideFeeWarningMessageStrict, model.MinimumOrderQuantityAmountOverrideFeeWarningMessageIncludeNull)
                .FilterBrandsByMinimumOrderQuantityAmountWarningMessage(model.MinimumOrderQuantityAmountWarningMessage, model.MinimumOrderQuantityAmountWarningMessageStrict, model.MinimumOrderQuantityAmountWarningMessageIncludeNull)
                ;
            return query2;
        }

        #region MinimumOrderDollarAmountOverrideFeeIsPercent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderDollarAmountOverrideFeeIsPercent<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeIsPercent == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeIsPercent
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderQuantityAmountOverrideFeeIsPercent<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeIsPercent == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumForFreeShippingDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmount == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumForFreeShippingDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountAfter == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingDollarAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingDollarAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumForFreeShippingQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmount == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumForFreeShippingQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountAfter == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingQuantityAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingQuantityAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumOrderDollarAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmount == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumOrderDollarAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountAfter == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderDollarAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderDollarAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFee
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumOrderDollarAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFee == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmount
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumOrderQuantityAmount<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmount == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountAfter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumOrderQuantityAmountAfter<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountAfter == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountBufferCategoryID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderQuantityAmountBufferCategoryID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountBufferCategoryID == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountBufferProductID
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderQuantityAmountBufferProductID<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountBufferProductID == parameter);
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFee
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMaxMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IBrand
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMatchMinimumOrderQuantityAmountOverrideFee<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFee == parameter);
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingDollarAmountIgnoredAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == null || x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage != null && x.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingDollarAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingDollarAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage == null || x.MinimumForFreeShippingDollarAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingDollarAmountWarningMessage != null && x.MinimumForFreeShippingDollarAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == null || x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage != null && x.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumForFreeShippingQuantityAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumForFreeShippingQuantityAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage == null || x.MinimumForFreeShippingQuantityAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumForFreeShippingQuantityAmountWarningMessage != null && x.MinimumForFreeShippingQuantityAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFeeAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderDollarAmountOverrideFeeAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == null || x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage != null && x.MinimumOrderDollarAmountOverrideFeeAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountOverrideFeeWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderDollarAmountOverrideFeeWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage == null || x.MinimumOrderDollarAmountOverrideFeeWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountOverrideFeeWarningMessage != null && x.MinimumOrderDollarAmountOverrideFeeWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderDollarAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderDollarAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderDollarAmountWarningMessage == null || x.MinimumOrderDollarAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderDollarAmountWarningMessage != null && x.MinimumOrderDollarAmountWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeAcceptedMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderQuantityAmountOverrideFeeAcceptedMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == null || x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage != null && x.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountOverrideFeeWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderQuantityAmountOverrideFeeWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == null || x.MinimumOrderQuantityAmountOverrideFeeWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountOverrideFeeWarningMessage != null && x.MinimumOrderQuantityAmountOverrideFeeWarningMessage.Contains(search));
        }
        #endregion

        #region MinimumOrderQuantityAmountWarningMessage
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterBrandsByMinimumOrderQuantityAmountWarningMessage<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IBrand
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountWarningMessage == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.MinimumOrderQuantityAmountWarningMessage == null || x.MinimumOrderQuantityAmountWarningMessage == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.MinimumOrderQuantityAmountWarningMessage != null && x.MinimumOrderQuantityAmountWarningMessage.Contains(search));
        }
        #endregion
    }
}
