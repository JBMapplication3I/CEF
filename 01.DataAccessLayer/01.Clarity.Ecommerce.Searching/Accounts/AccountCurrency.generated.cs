// <autogenerated>
// <copyright file="Accounts.ISearchModels.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the FilterBy Query Extensions generated to provide searching queries.</summary>
// <remarks>This file was auto-generated by FilterBys.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable PartialTypeWithSinglePart, RedundantUsingDirective, RegionWithSingleElement
#pragma warning disable 8669 // nullable reference types disabled
#nullable enable
namespace Clarity.Ecommerce.Interfaces.Models
{
    using System;
    using System.Linq;
    using DataModel;
    using Ecommerce.DataModel;
    using Utilities;

    /// <content>The Account Currency SQL search extensions.</content>
    public static partial class AccountCurrencySQLSearchExtensions
    {
        /// <summary>An <see cref="IQueryable{AccountCurrency}" /> extension method that filters  by each of the properties of
        /// the search model which have been set.</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <param name="query">The query to act on.</param>
        /// <param name="model">The search model to filter by.</param>
        /// <returns>The <see cref="IQueryable{AccountCurrency}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<AccountCurrency> FilterAccountCurrenciesBySearchModel(
                this IQueryable<AccountCurrency> query,
                IAccountCurrencySearchModel model)
        {
            if (model == null)
            {
                return query;
            }
            var query2 = Contract.RequiresNotNull(query)
                .FilterByBaseSearchModel(model)
                .FilterByIAmARelationshipTableBaseSearchModel<AccountCurrency, Account, Currency>(model)
                .FilterAccountCurrenciesByIsPrimary(model.IsPrimary)
                .FilterAccountCurrenciesByMinOverrideUnicodeSymbolValue(model.MinOverrideUnicodeSymbolValue)
                .FilterAccountCurrenciesByMaxOverrideUnicodeSymbolValue(model.MaxOverrideUnicodeSymbolValue)
                .FilterAccountCurrenciesByMatchOverrideUnicodeSymbolValue(model.MatchOverrideUnicodeSymbolValue)
                .FilterAccountCurrenciesByMinOverrideDecimalPlaceAccuracy(model.MinOverrideDecimalPlaceAccuracy)
                .FilterAccountCurrenciesByMaxOverrideDecimalPlaceAccuracy(model.MaxOverrideDecimalPlaceAccuracy)
                .FilterAccountCurrenciesByMatchOverrideDecimalPlaceAccuracy(model.MatchOverrideDecimalPlaceAccuracy, model.MatchOverrideDecimalPlaceAccuracyIncludeNull)
                .FilterAccountCurrenciesByOverrideUseSeparator(model.OverrideUseSeparator, model.OverrideUseSeparatorIncludeNull)
                .FilterAccountCurrenciesByCustomName(model.CustomName, model.CustomNameStrict, model.CustomNameIncludeNull)
                .FilterAccountCurrenciesByCustomTranslationKey(model.CustomTranslationKey, model.CustomTranslationKeyStrict, model.CustomTranslationKeyIncludeNull)
                .FilterAccountCurrenciesByOverrideHtmlCharacterCode(model.OverrideHtmlCharacterCode, model.OverrideHtmlCharacterCodeStrict, model.OverrideHtmlCharacterCodeIncludeNull)
                .FilterAccountCurrenciesByOverrideHtmlDecimalCharacterCode(model.OverrideHtmlDecimalCharacterCode, model.OverrideHtmlDecimalCharacterCodeStrict, model.OverrideHtmlDecimalCharacterCodeIncludeNull)
                .FilterAccountCurrenciesByOverrideHtmlSeparatorCharacterCode(model.OverrideHtmlSeparatorCharacterCode, model.OverrideHtmlSeparatorCharacterCodeStrict, model.OverrideHtmlSeparatorCharacterCodeIncludeNull)
                .FilterAccountCurrenciesByOverrideRawCharacter(model.OverrideRawCharacter, model.OverrideRawCharacterStrict, model.OverrideRawCharacterIncludeNull)
                .FilterAccountCurrenciesByOverrideRawDecimalCharacter(model.OverrideRawDecimalCharacter, model.OverrideRawDecimalCharacterStrict, model.OverrideRawDecimalCharacterIncludeNull)
                .FilterAccountCurrenciesByOverrideRawSeparatorCharacter(model.OverrideRawSeparatorCharacter, model.OverrideRawSeparatorCharacterStrict, model.OverrideRawSeparatorCharacterIncludeNull)
                ;
            return query2;
        }

        #region IsPrimary
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByIsPrimary<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter)
            where TEntity : class, IAccountCurrency
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.IsPrimary == parameter);
        }
        #endregion

        #region OverrideUnicodeSymbolValue
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByMinOverrideUnicodeSymbolValue<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IAccountCurrency
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            var search = parameter.Value;
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideUnicodeSymbolValue >= search);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum decimal value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">    The query to act on.</param>
        /// <param name="parameter">The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByMaxOverrideUnicodeSymbolValue<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IAccountCurrency
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideUnicodeSymbolValue <= parameter.Value);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a decimal value to match exactly).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByMatchOverrideUnicodeSymbolValue<TEntity>(
                this IQueryable<TEntity> query,
                decimal? parameter)
            where TEntity : class, IAccountCurrency
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideUnicodeSymbolValue == parameter);
        }
        #endregion

        #region OverrideDecimalPlaceAccuracy
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a minimum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByMinOverrideDecimalPlaceAccuracy<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IAccountCurrency
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideDecimalPlaceAccuracy >= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a maximum integer value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByMaxOverrideDecimalPlaceAccuracy<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter)
            where TEntity : class, IAccountCurrency
        {
            if (!parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideDecimalPlaceAccuracy <= parameter);
        }

        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a integer value to match).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByMatchOverrideDecimalPlaceAccuracy<TEntity>(
                this IQueryable<TEntity> query,
                int? parameter,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && Contract.CheckInvalidID(parameter))
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideDecimalPlaceAccuracy == parameter);
        }
        #endregion

        #region OverrideUseSeparator
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (a boolean value).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByOverrideUseSeparator<TEntity>(
                this IQueryable<TEntity> query,
                bool? parameter,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !parameter.HasValue)
            {
                return query;
            }
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideUseSeparator == parameter);
        }
        #endregion

        #region CustomName
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByCustomName<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.CustomName == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.CustomName == null || x.CustomName == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.CustomName != null && x.CustomName.Contains(search));
        }
        #endregion

        #region CustomTranslationKey
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByCustomTranslationKey<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.CustomTranslationKey == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.CustomTranslationKey == null || x.CustomTranslationKey == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.CustomTranslationKey != null && x.CustomTranslationKey.Contains(search));
        }
        #endregion

        #region OverrideHtmlCharacterCode
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByOverrideHtmlCharacterCode<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideHtmlCharacterCode == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideHtmlCharacterCode == null || x.OverrideHtmlCharacterCode == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideHtmlCharacterCode != null && x.OverrideHtmlCharacterCode.Contains(search));
        }
        #endregion

        #region OverrideHtmlDecimalCharacterCode
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByOverrideHtmlDecimalCharacterCode<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideHtmlDecimalCharacterCode == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideHtmlDecimalCharacterCode == null || x.OverrideHtmlDecimalCharacterCode == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideHtmlDecimalCharacterCode != null && x.OverrideHtmlDecimalCharacterCode.Contains(search));
        }
        #endregion

        #region OverrideHtmlSeparatorCharacterCode
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByOverrideHtmlSeparatorCharacterCode<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideHtmlSeparatorCharacterCode == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideHtmlSeparatorCharacterCode == null || x.OverrideHtmlSeparatorCharacterCode == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideHtmlSeparatorCharacterCode != null && x.OverrideHtmlSeparatorCharacterCode.Contains(search));
        }
        #endregion

        #region OverrideRawCharacter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByOverrideRawCharacter<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideRawCharacter == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideRawCharacter == null || x.OverrideRawCharacter == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideRawCharacter != null && x.OverrideRawCharacter.Contains(search));
        }
        #endregion

        #region OverrideRawDecimalCharacter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByOverrideRawDecimalCharacter<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideRawDecimalCharacter == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideRawDecimalCharacter == null || x.OverrideRawDecimalCharacter == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideRawDecimalCharacter != null && x.OverrideRawDecimalCharacter.Contains(search));
        }
        #endregion

        #region OverrideRawSeparatorCharacter
        /// <summary>An <see cref="IQueryable{TEntity}" /> extension method that filters records by the parameter (an identifier).</summary>
        /// <remarks>Pass a parameter value of null to not filter by this in a fluid call chain.</remarks>
        /// <typeparam name="TEntity">Type of the entity.</typeparam>
        /// <param name="query">      The query to act on.</param>
        /// <param name="parameter">  The parameter to filter by.</param>
        /// <param name="strict">     If set, must match the string exactly (false or null will use a Contains/LIKE).</param>
        /// <param name="includeNull">If set, match the parameter even if it's null.</param>
        /// <returns>The <see cref="IQueryable{TEntity}" /> with an additional Where applied if the parameter has a value.</returns>
        public static IQueryable<TEntity> FilterAccountCurrenciesByOverrideRawSeparatorCharacter<TEntity>(
                this IQueryable<TEntity> query,
                string? parameter,
                bool? strict,
                bool? includeNull)
            where TEntity : class, IAccountCurrency
        {
            if (includeNull != true && !Contract.CheckValidKey(parameter))
            {
                return query;
            }
            var search = parameter?.Trim();
            if (strict == true)
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideRawSeparatorCharacter == search);
            }
            if (includeNull == true && !Contract.CheckValidKey(search))
            {
                return Contract.RequiresNotNull(query)
                    .Where(x => x.OverrideRawSeparatorCharacter == null || x.OverrideRawSeparatorCharacter == string.Empty);
            }
            search = search!.ToLower();
            return Contract.RequiresNotNull(query)
                .Where(x => x.OverrideRawSeparatorCharacter != null && x.OverrideRawSeparatorCharacter.Contains(search));
        }
        #endregion
    }
}
