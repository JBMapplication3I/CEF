// <autogenerated>
// <copyright file="ImportAssigners.07.DbContext.cs" company="clarity-ventures.com">
// Copyright (c) 2018-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the import assigners class</summary>
// <summary>Implements the Import Assigners for dynamic mapping</summary>
// <remarks>This file was auto-generated by ImportAssigners.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, MemberCanBePrivate.Global, MissingXmlDoc, UnusedMember.Global, UnusedMember.Local
#pragma warning disable 618, 1591
namespace Clarity.Ecommerce.Providers.SalesQuoteImporter
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using DataModel;
    using Interfaces.DataModel;
    using Interfaces.Models;

    public static partial class ImportAssigners
    {
        // DbContext/DbSet/Add/Find
        public static object DbSet(IClarityEcommerceEntities context, Type type)
        {
            #region Accounts
            if (type == typeof(Account)) { return DbSet_Accounts(context); }
            if (type == typeof(AccountAssociation)) { return DbSet_AccountAssociations(context); }
            if (type == typeof(AccountAssociationType)) { return DbSet_AccountAssociationTypes(context); }
            if (type == typeof(AccountContact)) { return DbSet_AccountContacts(context); }
            if (type == typeof(AccountCurrency)) { return DbSet_AccountCurrencies(context); }
            if (type == typeof(AccountFile)) { return DbSet_AccountFiles(context); }
            if (type == typeof(AccountImage)) { return DbSet_AccountImages(context); }
            if (type == typeof(AccountImageType)) { return DbSet_AccountImageTypes(context); }
            if (type == typeof(AccountPricePoint)) { return DbSet_AccountPricePoints(context); }
            if (type == typeof(AccountProduct)) { return DbSet_AccountProducts(context); }
            if (type == typeof(AccountProductType)) { return DbSet_AccountProductTypes(context); }
            if (type == typeof(AccountStatus)) { return DbSet_AccountStatuses(context); }
            if (type == typeof(AccountType)) { return DbSet_AccountTypes(context); }
            if (type == typeof(AccountUsageBalance)) { return DbSet_AccountUsageBalances(context); }
            #endregion
            #region Advertising
            if (type == typeof(Ad)) { return DbSet_Ads(context); }
            if (type == typeof(AdAccount)) { return DbSet_AdAccounts(context); }
            if (type == typeof(AdBrand)) { return DbSet_AdBrands(context); }
            if (type == typeof(AdImage)) { return DbSet_AdImages(context); }
            if (type == typeof(AdImageType)) { return DbSet_AdImageTypes(context); }
            if (type == typeof(AdStatus)) { return DbSet_AdStatuses(context); }
            if (type == typeof(AdStore)) { return DbSet_AdStores(context); }
            if (type == typeof(AdType)) { return DbSet_AdTypes(context); }
            if (type == typeof(AdZone)) { return DbSet_AdZones(context); }
            if (type == typeof(AdZoneAccess)) { return DbSet_AdZoneAccesses(context); }
            if (type == typeof(Zone)) { return DbSet_Zones(context); }
            if (type == typeof(ZoneStatus)) { return DbSet_ZoneStatuses(context); }
            if (type == typeof(ZoneType)) { return DbSet_ZoneTypes(context); }
            #endregion
            #region Attributes
            if (type == typeof(AttributeGroup)) { return DbSet_AttributeGroups(context); }
            if (type == typeof(AttributeTab)) { return DbSet_AttributeTabs(context); }
            if (type == typeof(AttributeType)) { return DbSet_AttributeTypes(context); }
            if (type == typeof(GeneralAttribute)) { return DbSet_GeneralAttributes(context); }
            if (type == typeof(GeneralAttributePredefinedOption)) { return DbSet_GeneralAttributePredefinedOptions(context); }
            #endregion
            #region Badges
            if (type == typeof(Badge)) { return DbSet_Badges(context); }
            if (type == typeof(BadgeImage)) { return DbSet_BadgeImages(context); }
            if (type == typeof(BadgeImageType)) { return DbSet_BadgeImageTypes(context); }
            if (type == typeof(BadgeType)) { return DbSet_BadgeTypes(context); }
            #endregion
            #region Brands
            if (type == typeof(Brand)) { return DbSet_Brands(context); }
            if (type == typeof(BrandAccount)) { return DbSet_BrandAccounts(context); }
            if (type == typeof(BrandCategory)) { return DbSet_BrandCategories(context); }
            if (type == typeof(BrandCurrency)) { return DbSet_BrandCurrencies(context); }
            if (type == typeof(BrandImage)) { return DbSet_BrandImages(context); }
            if (type == typeof(BrandImageType)) { return DbSet_BrandImageTypes(context); }
            if (type == typeof(BrandInventoryLocation)) { return DbSet_BrandInventoryLocations(context); }
            if (type == typeof(BrandInventoryLocationType)) { return DbSet_BrandInventoryLocationTypes(context); }
            if (type == typeof(BrandLanguage)) { return DbSet_BrandLanguages(context); }
            if (type == typeof(BrandProduct)) { return DbSet_BrandProducts(context); }
            if (type == typeof(BrandSiteDomain)) { return DbSet_BrandSiteDomains(context); }
            if (type == typeof(BrandStore)) { return DbSet_BrandStores(context); }
            if (type == typeof(BrandUser)) { return DbSet_BrandUsers(context); }
            #endregion
            #region CalendarEvents
            if (type == typeof(CalendarEvent)) { return DbSet_CalendarEvents(context); }
            if (type == typeof(CalendarEventDetail)) { return DbSet_CalendarEventDetails(context); }
            if (type == typeof(CalendarEventFile)) { return DbSet_CalendarEventFiles(context); }
            if (type == typeof(CalendarEventImage)) { return DbSet_CalendarEventImages(context); }
            if (type == typeof(CalendarEventImageType)) { return DbSet_CalendarEventImageTypes(context); }
            if (type == typeof(CalendarEventProduct)) { return DbSet_CalendarEventProducts(context); }
            if (type == typeof(CalendarEventStatus)) { return DbSet_CalendarEventStatuses(context); }
            if (type == typeof(CalendarEventType)) { return DbSet_CalendarEventTypes(context); }
            if (type == typeof(UserEventAttendance)) { return DbSet_UserEventAttendances(context); }
            if (type == typeof(UserEventAttendanceType)) { return DbSet_UserEventAttendanceTypes(context); }
            #endregion
            #region Categories
            if (type == typeof(Category)) { return DbSet_Categories(context); }
            if (type == typeof(CategoryFile)) { return DbSet_CategoryFiles(context); }
            if (type == typeof(CategoryImage)) { return DbSet_CategoryImages(context); }
            if (type == typeof(CategoryImageType)) { return DbSet_CategoryImageTypes(context); }
            if (type == typeof(CategoryType)) { return DbSet_CategoryTypes(context); }
            #endregion
            #region Contacts
            if (type == typeof(Contact)) { return DbSet_Contacts(context); }
            if (type == typeof(ContactImage)) { return DbSet_ContactImages(context); }
            if (type == typeof(ContactImageType)) { return DbSet_ContactImageTypes(context); }
            if (type == typeof(ContactType)) { return DbSet_ContactTypes(context); }
            if (type == typeof(ProfanityFilter)) { return DbSet_ProfanityFilters(context); }
            if (type == typeof(ReferralCode)) { return DbSet_ReferralCodes(context); }
            if (type == typeof(ReferralCodeStatus)) { return DbSet_ReferralCodeStatuses(context); }
            if (type == typeof(ReferralCodeType)) { return DbSet_ReferralCodeTypes(context); }
            if (type == typeof(User)) { return DbSet_Users(context); }
            if (type == typeof(UserFile)) { return DbSet_UserFiles(context); }
            if (type == typeof(UserImage)) { return DbSet_UserImages(context); }
            if (type == typeof(UserImageType)) { return DbSet_UserImageTypes(context); }
            if (type == typeof(UserOnlineStatus)) { return DbSet_UserOnlineStatuses(context); }
            if (type == typeof(UserProductType)) { return DbSet_UserProductTypes(context); }
            if (type == typeof(UserStatus)) { return DbSet_UserStatuses(context); }
            if (type == typeof(UserType)) { return DbSet_UserTypes(context); }
            #endregion
            #region Counters
            if (type == typeof(Counter)) { return DbSet_Counters(context); }
            if (type == typeof(CounterLog)) { return DbSet_CounterLogs(context); }
            if (type == typeof(CounterLogType)) { return DbSet_CounterLogTypes(context); }
            if (type == typeof(CounterType)) { return DbSet_CounterTypes(context); }
            #endregion
            #region Currencies
            if (type == typeof(Currency)) { return DbSet_Currencies(context); }
            if (type == typeof(CurrencyConversion)) { return DbSet_CurrencyConversions(context); }
            if (type == typeof(CurrencyImage)) { return DbSet_CurrencyImages(context); }
            if (type == typeof(CurrencyImageType)) { return DbSet_CurrencyImageTypes(context); }
            if (type == typeof(HistoricalCurrencyRate)) { return DbSet_HistoricalCurrencyRates(context); }
            #endregion
            #region Discounts
            if (type == typeof(AppliedCartDiscount)) { return DbSet_AppliedCartDiscounts(context); }
            if (type == typeof(AppliedCartItemDiscount)) { return DbSet_AppliedCartItemDiscounts(context); }
            if (type == typeof(Discount)) { return DbSet_Discounts(context); }
            if (type == typeof(DiscountAccount)) { return DbSet_DiscountAccounts(context); }
            if (type == typeof(DiscountAccountType)) { return DbSet_DiscountAccountTypes(context); }
            if (type == typeof(DiscountBrand)) { return DbSet_DiscountBrands(context); }
            if (type == typeof(DiscountCategory)) { return DbSet_DiscountCategories(context); }
            if (type == typeof(DiscountCode)) { return DbSet_DiscountCodes(context); }
            if (type == typeof(DiscountCountry)) { return DbSet_DiscountCountries(context); }
            if (type == typeof(DiscountManufacturer)) { return DbSet_DiscountManufacturers(context); }
            if (type == typeof(DiscountProduct)) { return DbSet_DiscountProducts(context); }
            if (type == typeof(DiscountProductType)) { return DbSet_DiscountProductTypes(context); }
            if (type == typeof(DiscountShipCarrierMethod)) { return DbSet_DiscountShipCarrierMethods(context); }
            if (type == typeof(DiscountStore)) { return DbSet_DiscountStores(context); }
            if (type == typeof(DiscountUser)) { return DbSet_DiscountUsers(context); }
            if (type == typeof(DiscountUserRole)) { return DbSet_DiscountUserRoles(context); }
            if (type == typeof(DiscountVendor)) { return DbSet_DiscountVendors(context); }
            if (type == typeof(AppliedPurchaseOrderDiscount)) { return DbSet_AppliedPurchaseOrderDiscounts(context); }
            if (type == typeof(AppliedPurchaseOrderItemDiscount)) { return DbSet_AppliedPurchaseOrderItemDiscounts(context); }
            if (type == typeof(AppliedSalesInvoiceDiscount)) { return DbSet_AppliedSalesInvoiceDiscounts(context); }
            if (type == typeof(AppliedSalesInvoiceItemDiscount)) { return DbSet_AppliedSalesInvoiceItemDiscounts(context); }
            if (type == typeof(AppliedSalesOrderDiscount)) { return DbSet_AppliedSalesOrderDiscounts(context); }
            if (type == typeof(AppliedSalesOrderItemDiscount)) { return DbSet_AppliedSalesOrderItemDiscounts(context); }
            if (type == typeof(AppliedSalesQuoteDiscount)) { return DbSet_AppliedSalesQuoteDiscounts(context); }
            if (type == typeof(AppliedSalesQuoteItemDiscount)) { return DbSet_AppliedSalesQuoteItemDiscounts(context); }
            if (type == typeof(AppliedSalesReturnDiscount)) { return DbSet_AppliedSalesReturnDiscounts(context); }
            if (type == typeof(AppliedSalesReturnItemDiscount)) { return DbSet_AppliedSalesReturnItemDiscounts(context); }
            if (type == typeof(AppliedSampleRequestDiscount)) { return DbSet_AppliedSampleRequestDiscounts(context); }
            if (type == typeof(AppliedSampleRequestItemDiscount)) { return DbSet_AppliedSampleRequestItemDiscounts(context); }
            #endregion
            #region Favorites
            if (type == typeof(FavoriteCategory)) { return DbSet_FavoriteCategories(context); }
            if (type == typeof(FavoriteManufacturer)) { return DbSet_FavoriteManufacturers(context); }
            if (type == typeof(FavoriteShipCarrier)) { return DbSet_FavoriteShipCarriers(context); }
            if (type == typeof(FavoriteStore)) { return DbSet_FavoriteStores(context); }
            if (type == typeof(FavoriteVendor)) { return DbSet_FavoriteVendors(context); }
            #endregion
            #region Geography
            if (type == typeof(Address)) { return DbSet_Addresses(context); }
            if (type == typeof(Country)) { return DbSet_Countries(context); }
            if (type == typeof(CountryCurrency)) { return DbSet_CountryCurrencies(context); }
            if (type == typeof(CountryImage)) { return DbSet_CountryImages(context); }
            if (type == typeof(CountryImageType)) { return DbSet_CountryImageTypes(context); }
            if (type == typeof(CountryLanguage)) { return DbSet_CountryLanguages(context); }
            if (type == typeof(HistoricalAddressValidation)) { return DbSet_HistoricalAddressValidations(context); }
            if (type == typeof(PhonePrefixLookup)) { return DbSet_PhonePrefixLookups(context); }
            if (type == typeof(Region)) { return DbSet_Regions(context); }
            if (type == typeof(RegionCurrency)) { return DbSet_RegionCurrencies(context); }
            if (type == typeof(RegionImage)) { return DbSet_RegionImages(context); }
            if (type == typeof(RegionImageType)) { return DbSet_RegionImageTypes(context); }
            if (type == typeof(RegionLanguage)) { return DbSet_RegionLanguages(context); }
            if (type == typeof(ZipCode)) { return DbSet_ZipCodes(context); }
            #endregion
            #region Globalization
            if (type == typeof(Language)) { return DbSet_Languages(context); }
            if (type == typeof(LanguageImage)) { return DbSet_LanguageImages(context); }
            if (type == typeof(LanguageImageType)) { return DbSet_LanguageImageTypes(context); }
            if (type == typeof(UiKey)) { return DbSet_UiKeys(context); }
            if (type == typeof(UiTranslation)) { return DbSet_UiTranslations(context); }
            #endregion
            #region Groups
            if (type == typeof(Group)) { return DbSet_Groups(context); }
            if (type == typeof(GroupStatus)) { return DbSet_GroupStatuses(context); }
            if (type == typeof(GroupType)) { return DbSet_GroupTypes(context); }
            if (type == typeof(GroupUser)) { return DbSet_GroupUsers(context); }
            #endregion
            #region Hangfire
            if (type == typeof(ScheduledJobConfiguration)) { return DbSet_ScheduledJobConfigurations(context); }
            if (type == typeof(ScheduledJobConfigurationSetting)) { return DbSet_ScheduledJobConfigurationSettings(context); }
            #endregion
            #region Inventory
            if (type == typeof(InventoryLocation)) { return DbSet_InventoryLocations(context); }
            if (type == typeof(InventoryLocationSection)) { return DbSet_InventoryLocationSections(context); }
            #endregion
            #region Invoicing
            if (type == typeof(SalesInvoice)) { return DbSet_SalesInvoices(context); }
            if (type == typeof(SalesInvoiceContact)) { return DbSet_SalesInvoiceContacts(context); }
            if (type == typeof(SalesInvoiceFile)) { return DbSet_SalesInvoiceFiles(context); }
            if (type == typeof(SalesInvoiceItem)) { return DbSet_SalesInvoiceItems(context); }
            if (type == typeof(SalesInvoiceItemTarget)) { return DbSet_SalesInvoiceItemTargets(context); }
            if (type == typeof(SalesInvoiceState)) { return DbSet_SalesInvoiceStates(context); }
            if (type == typeof(SalesInvoiceStatus)) { return DbSet_SalesInvoiceStatuses(context); }
            if (type == typeof(SalesInvoiceType)) { return DbSet_SalesInvoiceTypes(context); }
            if (type == typeof(SalesOrderSalesInvoice)) { return DbSet_SalesOrderSalesInvoices(context); }
            #endregion
            #region Manufacturers
            if (type == typeof(Manufacturer)) { return DbSet_Manufacturers(context); }
            if (type == typeof(ManufacturerImage)) { return DbSet_ManufacturerImages(context); }
            if (type == typeof(ManufacturerImageType)) { return DbSet_ManufacturerImageTypes(context); }
            if (type == typeof(ManufacturerProduct)) { return DbSet_ManufacturerProducts(context); }
            if (type == typeof(ManufacturerType)) { return DbSet_ManufacturerTypes(context); }
            #endregion
            #region Media
            if (type == typeof(StoredFile)) { return DbSet_StoredFiles(context); }
            #endregion
            #region Messaging
            if (type == typeof(Conversation)) { return DbSet_Conversations(context); }
            if (type == typeof(ConversationUser)) { return DbSet_ConversationUsers(context); }
            if (type == typeof(EmailQueue)) { return DbSet_EmailQueues(context); }
            if (type == typeof(EmailQueueAttachment)) { return DbSet_EmailQueueAttachments(context); }
            if (type == typeof(EmailStatus)) { return DbSet_EmailStatuses(context); }
            if (type == typeof(EmailTemplate)) { return DbSet_EmailTemplates(context); }
            if (type == typeof(EmailType)) { return DbSet_EmailTypes(context); }
            if (type == typeof(Message)) { return DbSet_Messages(context); }
            if (type == typeof(MessageAttachment)) { return DbSet_MessageAttachments(context); }
            if (type == typeof(MessageRecipient)) { return DbSet_MessageRecipients(context); }
            if (type == typeof(ProductNotification)) { return DbSet_ProductNotifications(context); }
            #endregion
            #region Ordering
            if (type == typeof(SalesOrder)) { return DbSet_SalesOrders(context); }
            if (type == typeof(SalesOrderContact)) { return DbSet_SalesOrderContacts(context); }
            if (type == typeof(SalesOrderEvent)) { return DbSet_SalesOrderEvents(context); }
            if (type == typeof(SalesOrderFile)) { return DbSet_SalesOrderFiles(context); }
            if (type == typeof(SalesOrderItem)) { return DbSet_SalesOrderItems(context); }
            if (type == typeof(SalesOrderItemTarget)) { return DbSet_SalesOrderItemTargets(context); }
            if (type == typeof(SalesOrderState)) { return DbSet_SalesOrderStates(context); }
            if (type == typeof(SalesOrderStatus)) { return DbSet_SalesOrderStatuses(context); }
            if (type == typeof(SalesOrderType)) { return DbSet_SalesOrderTypes(context); }
            #endregion
            #region Payments
            if (type == typeof(Membership)) { return DbSet_Memberships(context); }
            if (type == typeof(MembershipAdZoneAccess)) { return DbSet_MembershipAdZoneAccesses(context); }
            if (type == typeof(MembershipAdZoneAccessByLevel)) { return DbSet_MembershipAdZoneAccessByLevels(context); }
            if (type == typeof(MembershipLevel)) { return DbSet_MembershipLevels(context); }
            if (type == typeof(MembershipRepeatType)) { return DbSet_MembershipRepeatTypes(context); }
            if (type == typeof(Payment)) { return DbSet_Payments(context); }
            if (type == typeof(PaymentMethod)) { return DbSet_PaymentMethods(context); }
            if (type == typeof(PaymentStatus)) { return DbSet_PaymentStatuses(context); }
            if (type == typeof(PaymentType)) { return DbSet_PaymentTypes(context); }
            if (type == typeof(RepeatType)) { return DbSet_RepeatTypes(context); }
            if (type == typeof(SalesInvoicePayment)) { return DbSet_SalesInvoicePayments(context); }
            if (type == typeof(SalesOrderPayment)) { return DbSet_SalesOrderPayments(context); }
            if (type == typeof(SalesReturnPayment)) { return DbSet_SalesReturnPayments(context); }
            if (type == typeof(Subscription)) { return DbSet_Subscriptions(context); }
            if (type == typeof(SubscriptionHistory)) { return DbSet_SubscriptionHistories(context); }
            if (type == typeof(SubscriptionStatus)) { return DbSet_SubscriptionStatuses(context); }
            if (type == typeof(SubscriptionType)) { return DbSet_SubscriptionTypes(context); }
            if (type == typeof(Wallet)) { return DbSet_Wallets(context); }
            #endregion
            #region Pricing
            if (type == typeof(PricePoint)) { return DbSet_PricePoints(context); }
            if (type == typeof(PriceRounding)) { return DbSet_PriceRoundings(context); }
            if (type == typeof(PriceRule)) { return DbSet_PriceRules(context); }
            if (type == typeof(PriceRuleAccount)) { return DbSet_PriceRuleAccounts(context); }
            if (type == typeof(PriceRuleAccountType)) { return DbSet_PriceRuleAccountTypes(context); }
            if (type == typeof(PriceRuleBrand)) { return DbSet_PriceRuleBrands(context); }
            if (type == typeof(PriceRuleCategory)) { return DbSet_PriceRuleCategories(context); }
            if (type == typeof(PriceRuleCountry)) { return DbSet_PriceRuleCountries(context); }
            if (type == typeof(PriceRuleManufacturer)) { return DbSet_PriceRuleManufacturers(context); }
            if (type == typeof(PriceRuleProduct)) { return DbSet_PriceRuleProducts(context); }
            if (type == typeof(PriceRuleProductType)) { return DbSet_PriceRuleProductTypes(context); }
            if (type == typeof(PriceRuleStore)) { return DbSet_PriceRuleStores(context); }
            if (type == typeof(PriceRuleUserRole)) { return DbSet_PriceRuleUserRoles(context); }
            if (type == typeof(PriceRuleVendor)) { return DbSet_PriceRuleVendors(context); }
            #endregion
            #region Products
            if (type == typeof(FutureImport)) { return DbSet_FutureImports(context); }
            if (type == typeof(FutureImportStatus)) { return DbSet_FutureImportStatuses(context); }
            if (type == typeof(Product)) { return DbSet_Products(context); }
            if (type == typeof(ProductAssociation)) { return DbSet_ProductAssociations(context); }
            if (type == typeof(ProductAssociationType)) { return DbSet_ProductAssociationTypes(context); }
            if (type == typeof(ProductCategory)) { return DbSet_ProductCategories(context); }
            if (type == typeof(ProductDownload)) { return DbSet_ProductDownloads(context); }
            if (type == typeof(ProductDownloadType)) { return DbSet_ProductDownloadTypes(context); }
            if (type == typeof(ProductFile)) { return DbSet_ProductFiles(context); }
            if (type == typeof(ProductImage)) { return DbSet_ProductImages(context); }
            if (type == typeof(ProductImageType)) { return DbSet_ProductImageTypes(context); }
            if (type == typeof(ProductInventoryLocationSection)) { return DbSet_ProductInventoryLocationSections(context); }
            if (type == typeof(ProductMembershipLevel)) { return DbSet_ProductMembershipLevels(context); }
            if (type == typeof(ProductPricePoint)) { return DbSet_ProductPricePoints(context); }
            if (type == typeof(ProductRestriction)) { return DbSet_ProductRestrictions(context); }
            if (type == typeof(ProductShipCarrierMethod)) { return DbSet_ProductShipCarrierMethods(context); }
            if (type == typeof(ProductStatus)) { return DbSet_ProductStatuses(context); }
            if (type == typeof(ProductSubscriptionType)) { return DbSet_ProductSubscriptionTypes(context); }
            if (type == typeof(ProductType)) { return DbSet_ProductTypes(context); }
            #endregion
            #region Purchasing
            if (type == typeof(PurchaseOrder)) { return DbSet_PurchaseOrders(context); }
            if (type == typeof(PurchaseOrderContact)) { return DbSet_PurchaseOrderContacts(context); }
            if (type == typeof(PurchaseOrderFile)) { return DbSet_PurchaseOrderFiles(context); }
            if (type == typeof(PurchaseOrderItem)) { return DbSet_PurchaseOrderItems(context); }
            if (type == typeof(PurchaseOrderItemTarget)) { return DbSet_PurchaseOrderItemTargets(context); }
            if (type == typeof(PurchaseOrderState)) { return DbSet_PurchaseOrderStates(context); }
            if (type == typeof(PurchaseOrderStatus)) { return DbSet_PurchaseOrderStatuses(context); }
            if (type == typeof(PurchaseOrderType)) { return DbSet_PurchaseOrderTypes(context); }
            if (type == typeof(SalesOrderPurchaseOrder)) { return DbSet_SalesOrderPurchaseOrders(context); }
            #endregion
            #region Quoting
            if (type == typeof(SalesQuote)) { return DbSet_SalesQuotes(context); }
            if (type == typeof(SalesQuoteCategory)) { return DbSet_SalesQuoteCategories(context); }
            if (type == typeof(SalesQuoteContact)) { return DbSet_SalesQuoteContacts(context); }
            if (type == typeof(SalesQuoteFile)) { return DbSet_SalesQuoteFiles(context); }
            if (type == typeof(SalesQuoteItem)) { return DbSet_SalesQuoteItems(context); }
            if (type == typeof(SalesQuoteItemTarget)) { return DbSet_SalesQuoteItemTargets(context); }
            if (type == typeof(SalesQuoteSalesOrder)) { return DbSet_SalesQuoteSalesOrders(context); }
            if (type == typeof(SalesQuoteState)) { return DbSet_SalesQuoteStates(context); }
            if (type == typeof(SalesQuoteStatus)) { return DbSet_SalesQuoteStatuses(context); }
            if (type == typeof(SalesQuoteType)) { return DbSet_SalesQuoteTypes(context); }
            #endregion
            #region Reporting
            if (type == typeof(ReportType)) { return DbSet_ReportTypes(context); }
            #endregion
            #region Returning
            if (type == typeof(SalesReturn)) { return DbSet_SalesReturns(context); }
            if (type == typeof(SalesReturnContact)) { return DbSet_SalesReturnContacts(context); }
            if (type == typeof(SalesReturnFile)) { return DbSet_SalesReturnFiles(context); }
            if (type == typeof(SalesReturnItem)) { return DbSet_SalesReturnItems(context); }
            if (type == typeof(SalesReturnItemTarget)) { return DbSet_SalesReturnItemTargets(context); }
            if (type == typeof(SalesReturnReason)) { return DbSet_SalesReturnReasons(context); }
            if (type == typeof(SalesReturnSalesOrder)) { return DbSet_SalesReturnSalesOrders(context); }
            if (type == typeof(SalesReturnState)) { return DbSet_SalesReturnStates(context); }
            if (type == typeof(SalesReturnStatus)) { return DbSet_SalesReturnStatuses(context); }
            if (type == typeof(SalesReturnType)) { return DbSet_SalesReturnTypes(context); }
            #endregion
            #region Reviews
            if (type == typeof(Review)) { return DbSet_Reviews(context); }
            if (type == typeof(ReviewType)) { return DbSet_ReviewTypes(context); }
            #endregion
            #region Sales
            if (type == typeof(SalesGroup)) { return DbSet_SalesGroups(context); }
            if (type == typeof(SalesItemTargetType)) { return DbSet_SalesItemTargetTypes(context); }
            #endregion
            #region Sampling
            if (type == typeof(SampleRequest)) { return DbSet_SampleRequests(context); }
            if (type == typeof(SampleRequestContact)) { return DbSet_SampleRequestContacts(context); }
            if (type == typeof(SampleRequestFile)) { return DbSet_SampleRequestFiles(context); }
            if (type == typeof(SampleRequestItem)) { return DbSet_SampleRequestItems(context); }
            if (type == typeof(SampleRequestItemTarget)) { return DbSet_SampleRequestItemTargets(context); }
            if (type == typeof(SampleRequestState)) { return DbSet_SampleRequestStates(context); }
            if (type == typeof(SampleRequestStatus)) { return DbSet_SampleRequestStatuses(context); }
            if (type == typeof(SampleRequestType)) { return DbSet_SampleRequestTypes(context); }
            #endregion
            #region Scouting
            if (type == typeof(Scout)) { return DbSet_Scouts(context); }
            if (type == typeof(ScoutCategory)) { return DbSet_ScoutCategories(context); }
            if (type == typeof(ScoutCategoryType)) { return DbSet_ScoutCategoryTypes(context); }
            #endregion
            #region Shipping
            if (type == typeof(Package)) { return DbSet_Packages(context); }
            if (type == typeof(PackageType)) { return DbSet_PackageTypes(context); }
            if (type == typeof(RateQuote)) { return DbSet_RateQuotes(context); }
            if (type == typeof(ShipCarrier)) { return DbSet_ShipCarriers(context); }
            if (type == typeof(ShipCarrierMethod)) { return DbSet_ShipCarrierMethods(context); }
            if (type == typeof(Shipment)) { return DbSet_Shipments(context); }
            if (type == typeof(ShipmentEvent)) { return DbSet_ShipmentEvents(context); }
            if (type == typeof(ShipmentStatus)) { return DbSet_ShipmentStatuses(context); }
            if (type == typeof(ShipmentType)) { return DbSet_ShipmentTypes(context); }
            #endregion
            #region Shopping
            if (type == typeof(Cart)) { return DbSet_Carts(context); }
            if (type == typeof(CartContact)) { return DbSet_CartContacts(context); }
            if (type == typeof(CartFile)) { return DbSet_CartFiles(context); }
            if (type == typeof(CartItem)) { return DbSet_CartItems(context); }
            if (type == typeof(CartItemTarget)) { return DbSet_CartItemTargets(context); }
            if (type == typeof(CartState)) { return DbSet_CartStates(context); }
            if (type == typeof(CartStatus)) { return DbSet_CartStatuses(context); }
            if (type == typeof(CartType)) { return DbSet_CartTypes(context); }
            #endregion
            #region Stores
            if (type == typeof(SiteDomain)) { return DbSet_SiteDomains(context); }
            if (type == typeof(SiteDomainSocialProvider)) { return DbSet_SiteDomainSocialProviders(context); }
            if (type == typeof(SocialProvider)) { return DbSet_SocialProviders(context); }
            if (type == typeof(Store)) { return DbSet_Stores(context); }
            if (type == typeof(StoreAccount)) { return DbSet_StoreAccounts(context); }
            if (type == typeof(StoreBadge)) { return DbSet_StoreBadges(context); }
            if (type == typeof(StoreContact)) { return DbSet_StoreContacts(context); }
            if (type == typeof(StoreImage)) { return DbSet_StoreImages(context); }
            if (type == typeof(StoreImageType)) { return DbSet_StoreImageTypes(context); }
            if (type == typeof(StoreInventoryLocation)) { return DbSet_StoreInventoryLocations(context); }
            if (type == typeof(StoreInventoryLocationType)) { return DbSet_StoreInventoryLocationTypes(context); }
            if (type == typeof(StoreManufacturer)) { return DbSet_StoreManufacturers(context); }
            if (type == typeof(StoreProduct)) { return DbSet_StoreProducts(context); }
            if (type == typeof(StoreSubscription)) { return DbSet_StoreSubscriptions(context); }
            if (type == typeof(StoreType)) { return DbSet_StoreTypes(context); }
            if (type == typeof(StoreUser)) { return DbSet_StoreUsers(context); }
            if (type == typeof(StoreVendor)) { return DbSet_StoreVendors(context); }
            #endregion
            #region System
            if (type == typeof(ImportExportMapping)) { return DbSet_ImportExportMappings(context); }
            if (type == typeof(Note)) { return DbSet_Notes(context); }
            if (type == typeof(NoteType)) { return DbSet_NoteTypes(context); }
            if (type == typeof(RecordVersion)) { return DbSet_RecordVersions(context); }
            if (type == typeof(RecordVersionType)) { return DbSet_RecordVersionTypes(context); }
            if (type == typeof(Setting)) { return DbSet_Settings(context); }
            if (type == typeof(SettingGroup)) { return DbSet_SettingGroups(context); }
            if (type == typeof(SettingType)) { return DbSet_SettingTypes(context); }
            if (type == typeof(EventLog)) { return DbSet_EventLogs(context); }
            #endregion
            #region Tax
            if (type == typeof(HistoricalTaxRate)) { return DbSet_HistoricalTaxRates(context); }
            if (type == typeof(TaxCountry)) { return DbSet_TaxCountries(context); }
            if (type == typeof(TaxRegion)) { return DbSet_TaxRegions(context); }
            #endregion
            #region Tracking
            if (type == typeof(Campaign)) { return DbSet_Campaigns(context); }
            if (type == typeof(CampaignAd)) { return DbSet_CampaignAds(context); }
            if (type == typeof(CampaignStatus)) { return DbSet_CampaignStatuses(context); }
            if (type == typeof(CampaignType)) { return DbSet_CampaignTypes(context); }
            if (type == typeof(Event)) { return DbSet_Events(context); }
            if (type == typeof(EventStatus)) { return DbSet_EventStatuses(context); }
            if (type == typeof(EventType)) { return DbSet_EventTypes(context); }
            if (type == typeof(IPOrganization)) { return DbSet_IPOrganizations(context); }
            if (type == typeof(IPOrganizationStatus)) { return DbSet_IPOrganizationStatuses(context); }
            if (type == typeof(PageView)) { return DbSet_PageViews(context); }
            if (type == typeof(PageViewEvent)) { return DbSet_PageViewEvents(context); }
            if (type == typeof(PageViewStatus)) { return DbSet_PageViewStatuses(context); }
            if (type == typeof(PageViewType)) { return DbSet_PageViewTypes(context); }
            if (type == typeof(Visit)) { return DbSet_Visits(context); }
            if (type == typeof(Visitor)) { return DbSet_Visitors(context); }
            if (type == typeof(VisitStatus)) { return DbSet_VisitStatuses(context); }
            #endregion
            #region Vendors
            if (type == typeof(Vendor)) { return DbSet_Vendors(context); }
            if (type == typeof(VendorAccount)) { return DbSet_VendorAccounts(context); }
            if (type == typeof(VendorImage)) { return DbSet_VendorImages(context); }
            if (type == typeof(VendorImageType)) { return DbSet_VendorImageTypes(context); }
            if (type == typeof(VendorManufacturer)) { return DbSet_VendorManufacturers(context); }
            if (type == typeof(VendorProduct)) { return DbSet_VendorProducts(context); }
            if (type == typeof(VendorType)) { return DbSet_VendorTypes(context); }
            #endregion
            throw new ArgumentException($"Unknown entity type: {type.Name}");
        }
        public static void AddToDbSet(IClarityEcommerceEntities context, Type type, object @object)
        {
            #region Accounts
            if (type == typeof(Account)) { AddToDbSet_Accounts(context, @object); }
            if (type == typeof(AccountAssociation)) { AddToDbSet_AccountAssociations(context, @object); }
            if (type == typeof(AccountAssociationType)) { AddToDbSet_AccountAssociationTypes(context, @object); }
            if (type == typeof(AccountContact)) { AddToDbSet_AccountContacts(context, @object); }
            if (type == typeof(AccountCurrency)) { AddToDbSet_AccountCurrencies(context, @object); }
            if (type == typeof(AccountFile)) { AddToDbSet_AccountFiles(context, @object); }
            if (type == typeof(AccountImage)) { AddToDbSet_AccountImages(context, @object); }
            if (type == typeof(AccountImageType)) { AddToDbSet_AccountImageTypes(context, @object); }
            if (type == typeof(AccountPricePoint)) { AddToDbSet_AccountPricePoints(context, @object); }
            if (type == typeof(AccountProduct)) { AddToDbSet_AccountProducts(context, @object); }
            if (type == typeof(AccountProductType)) { AddToDbSet_AccountProductTypes(context, @object); }
            if (type == typeof(AccountStatus)) { AddToDbSet_AccountStatuses(context, @object); }
            if (type == typeof(AccountType)) { AddToDbSet_AccountTypes(context, @object); }
            if (type == typeof(AccountUsageBalance)) { AddToDbSet_AccountUsageBalances(context, @object); }
            #endregion
            #region Advertising
            if (type == typeof(Ad)) { AddToDbSet_Ads(context, @object); }
            if (type == typeof(AdAccount)) { AddToDbSet_AdAccounts(context, @object); }
            if (type == typeof(AdBrand)) { AddToDbSet_AdBrands(context, @object); }
            if (type == typeof(AdImage)) { AddToDbSet_AdImages(context, @object); }
            if (type == typeof(AdImageType)) { AddToDbSet_AdImageTypes(context, @object); }
            if (type == typeof(AdStatus)) { AddToDbSet_AdStatuses(context, @object); }
            if (type == typeof(AdStore)) { AddToDbSet_AdStores(context, @object); }
            if (type == typeof(AdType)) { AddToDbSet_AdTypes(context, @object); }
            if (type == typeof(AdZone)) { AddToDbSet_AdZones(context, @object); }
            if (type == typeof(AdZoneAccess)) { AddToDbSet_AdZoneAccesses(context, @object); }
            if (type == typeof(Zone)) { AddToDbSet_Zones(context, @object); }
            if (type == typeof(ZoneStatus)) { AddToDbSet_ZoneStatuses(context, @object); }
            if (type == typeof(ZoneType)) { AddToDbSet_ZoneTypes(context, @object); }
            #endregion
            #region Attributes
            if (type == typeof(AttributeGroup)) { AddToDbSet_AttributeGroups(context, @object); }
            if (type == typeof(AttributeTab)) { AddToDbSet_AttributeTabs(context, @object); }
            if (type == typeof(AttributeType)) { AddToDbSet_AttributeTypes(context, @object); }
            if (type == typeof(GeneralAttribute)) { AddToDbSet_GeneralAttributes(context, @object); }
            if (type == typeof(GeneralAttributePredefinedOption)) { AddToDbSet_GeneralAttributePredefinedOptions(context, @object); }
            #endregion
            #region Badges
            if (type == typeof(Badge)) { AddToDbSet_Badges(context, @object); }
            if (type == typeof(BadgeImage)) { AddToDbSet_BadgeImages(context, @object); }
            if (type == typeof(BadgeImageType)) { AddToDbSet_BadgeImageTypes(context, @object); }
            if (type == typeof(BadgeType)) { AddToDbSet_BadgeTypes(context, @object); }
            #endregion
            #region Brands
            if (type == typeof(Brand)) { AddToDbSet_Brands(context, @object); }
            if (type == typeof(BrandAccount)) { AddToDbSet_BrandAccounts(context, @object); }
            if (type == typeof(BrandCategory)) { AddToDbSet_BrandCategories(context, @object); }
            if (type == typeof(BrandCurrency)) { AddToDbSet_BrandCurrencies(context, @object); }
            if (type == typeof(BrandImage)) { AddToDbSet_BrandImages(context, @object); }
            if (type == typeof(BrandImageType)) { AddToDbSet_BrandImageTypes(context, @object); }
            if (type == typeof(BrandInventoryLocation)) { AddToDbSet_BrandInventoryLocations(context, @object); }
            if (type == typeof(BrandInventoryLocationType)) { AddToDbSet_BrandInventoryLocationTypes(context, @object); }
            if (type == typeof(BrandLanguage)) { AddToDbSet_BrandLanguages(context, @object); }
            if (type == typeof(BrandProduct)) { AddToDbSet_BrandProducts(context, @object); }
            if (type == typeof(BrandSiteDomain)) { AddToDbSet_BrandSiteDomains(context, @object); }
            if (type == typeof(BrandStore)) { AddToDbSet_BrandStores(context, @object); }
            if (type == typeof(BrandUser)) { AddToDbSet_BrandUsers(context, @object); }
            #endregion
            #region CalendarEvents
            if (type == typeof(CalendarEvent)) { AddToDbSet_CalendarEvents(context, @object); }
            if (type == typeof(CalendarEventDetail)) { AddToDbSet_CalendarEventDetails(context, @object); }
            if (type == typeof(CalendarEventFile)) { AddToDbSet_CalendarEventFiles(context, @object); }
            if (type == typeof(CalendarEventImage)) { AddToDbSet_CalendarEventImages(context, @object); }
            if (type == typeof(CalendarEventImageType)) { AddToDbSet_CalendarEventImageTypes(context, @object); }
            if (type == typeof(CalendarEventProduct)) { AddToDbSet_CalendarEventProducts(context, @object); }
            if (type == typeof(CalendarEventStatus)) { AddToDbSet_CalendarEventStatuses(context, @object); }
            if (type == typeof(CalendarEventType)) { AddToDbSet_CalendarEventTypes(context, @object); }
            if (type == typeof(UserEventAttendance)) { AddToDbSet_UserEventAttendances(context, @object); }
            if (type == typeof(UserEventAttendanceType)) { AddToDbSet_UserEventAttendanceTypes(context, @object); }
            #endregion
            #region Categories
            if (type == typeof(Category)) { AddToDbSet_Categories(context, @object); }
            if (type == typeof(CategoryFile)) { AddToDbSet_CategoryFiles(context, @object); }
            if (type == typeof(CategoryImage)) { AddToDbSet_CategoryImages(context, @object); }
            if (type == typeof(CategoryImageType)) { AddToDbSet_CategoryImageTypes(context, @object); }
            if (type == typeof(CategoryType)) { AddToDbSet_CategoryTypes(context, @object); }
            #endregion
            #region Contacts
            if (type == typeof(Contact)) { AddToDbSet_Contacts(context, @object); }
            if (type == typeof(ContactImage)) { AddToDbSet_ContactImages(context, @object); }
            if (type == typeof(ContactImageType)) { AddToDbSet_ContactImageTypes(context, @object); }
            if (type == typeof(ContactType)) { AddToDbSet_ContactTypes(context, @object); }
            if (type == typeof(ProfanityFilter)) { AddToDbSet_ProfanityFilters(context, @object); }
            if (type == typeof(ReferralCode)) { AddToDbSet_ReferralCodes(context, @object); }
            if (type == typeof(ReferralCodeStatus)) { AddToDbSet_ReferralCodeStatuses(context, @object); }
            if (type == typeof(ReferralCodeType)) { AddToDbSet_ReferralCodeTypes(context, @object); }
            if (type == typeof(User)) { AddToDbSet_Users(context, @object); }
            if (type == typeof(UserFile)) { AddToDbSet_UserFiles(context, @object); }
            if (type == typeof(UserImage)) { AddToDbSet_UserImages(context, @object); }
            if (type == typeof(UserImageType)) { AddToDbSet_UserImageTypes(context, @object); }
            if (type == typeof(UserOnlineStatus)) { AddToDbSet_UserOnlineStatuses(context, @object); }
            if (type == typeof(UserProductType)) { AddToDbSet_UserProductTypes(context, @object); }
            if (type == typeof(UserStatus)) { AddToDbSet_UserStatuses(context, @object); }
            if (type == typeof(UserType)) { AddToDbSet_UserTypes(context, @object); }
            #endregion
            #region Counters
            if (type == typeof(Counter)) { AddToDbSet_Counters(context, @object); }
            if (type == typeof(CounterLog)) { AddToDbSet_CounterLogs(context, @object); }
            if (type == typeof(CounterLogType)) { AddToDbSet_CounterLogTypes(context, @object); }
            if (type == typeof(CounterType)) { AddToDbSet_CounterTypes(context, @object); }
            #endregion
            #region Currencies
            if (type == typeof(Currency)) { AddToDbSet_Currencies(context, @object); }
            if (type == typeof(CurrencyConversion)) { AddToDbSet_CurrencyConversions(context, @object); }
            if (type == typeof(CurrencyImage)) { AddToDbSet_CurrencyImages(context, @object); }
            if (type == typeof(CurrencyImageType)) { AddToDbSet_CurrencyImageTypes(context, @object); }
            if (type == typeof(HistoricalCurrencyRate)) { AddToDbSet_HistoricalCurrencyRates(context, @object); }
            #endregion
            #region Discounts
            if (type == typeof(AppliedCartDiscount)) { AddToDbSet_AppliedCartDiscounts(context, @object); }
            if (type == typeof(AppliedCartItemDiscount)) { AddToDbSet_AppliedCartItemDiscounts(context, @object); }
            if (type == typeof(Discount)) { AddToDbSet_Discounts(context, @object); }
            if (type == typeof(DiscountAccount)) { AddToDbSet_DiscountAccounts(context, @object); }
            if (type == typeof(DiscountAccountType)) { AddToDbSet_DiscountAccountTypes(context, @object); }
            if (type == typeof(DiscountBrand)) { AddToDbSet_DiscountBrands(context, @object); }
            if (type == typeof(DiscountCategory)) { AddToDbSet_DiscountCategories(context, @object); }
            if (type == typeof(DiscountCode)) { AddToDbSet_DiscountCodes(context, @object); }
            if (type == typeof(DiscountCountry)) { AddToDbSet_DiscountCountries(context, @object); }
            if (type == typeof(DiscountManufacturer)) { AddToDbSet_DiscountManufacturers(context, @object); }
            if (type == typeof(DiscountProduct)) { AddToDbSet_DiscountProducts(context, @object); }
            if (type == typeof(DiscountProductType)) { AddToDbSet_DiscountProductTypes(context, @object); }
            if (type == typeof(DiscountShipCarrierMethod)) { AddToDbSet_DiscountShipCarrierMethods(context, @object); }
            if (type == typeof(DiscountStore)) { AddToDbSet_DiscountStores(context, @object); }
            if (type == typeof(DiscountUser)) { AddToDbSet_DiscountUsers(context, @object); }
            if (type == typeof(DiscountUserRole)) { AddToDbSet_DiscountUserRoles(context, @object); }
            if (type == typeof(DiscountVendor)) { AddToDbSet_DiscountVendors(context, @object); }
            if (type == typeof(AppliedPurchaseOrderDiscount)) { AddToDbSet_AppliedPurchaseOrderDiscounts(context, @object); }
            if (type == typeof(AppliedPurchaseOrderItemDiscount)) { AddToDbSet_AppliedPurchaseOrderItemDiscounts(context, @object); }
            if (type == typeof(AppliedSalesInvoiceDiscount)) { AddToDbSet_AppliedSalesInvoiceDiscounts(context, @object); }
            if (type == typeof(AppliedSalesInvoiceItemDiscount)) { AddToDbSet_AppliedSalesInvoiceItemDiscounts(context, @object); }
            if (type == typeof(AppliedSalesOrderDiscount)) { AddToDbSet_AppliedSalesOrderDiscounts(context, @object); }
            if (type == typeof(AppliedSalesOrderItemDiscount)) { AddToDbSet_AppliedSalesOrderItemDiscounts(context, @object); }
            if (type == typeof(AppliedSalesQuoteDiscount)) { AddToDbSet_AppliedSalesQuoteDiscounts(context, @object); }
            if (type == typeof(AppliedSalesQuoteItemDiscount)) { AddToDbSet_AppliedSalesQuoteItemDiscounts(context, @object); }
            if (type == typeof(AppliedSalesReturnDiscount)) { AddToDbSet_AppliedSalesReturnDiscounts(context, @object); }
            if (type == typeof(AppliedSalesReturnItemDiscount)) { AddToDbSet_AppliedSalesReturnItemDiscounts(context, @object); }
            if (type == typeof(AppliedSampleRequestDiscount)) { AddToDbSet_AppliedSampleRequestDiscounts(context, @object); }
            if (type == typeof(AppliedSampleRequestItemDiscount)) { AddToDbSet_AppliedSampleRequestItemDiscounts(context, @object); }
            #endregion
            #region Favorites
            if (type == typeof(FavoriteCategory)) { AddToDbSet_FavoriteCategories(context, @object); }
            if (type == typeof(FavoriteManufacturer)) { AddToDbSet_FavoriteManufacturers(context, @object); }
            if (type == typeof(FavoriteShipCarrier)) { AddToDbSet_FavoriteShipCarriers(context, @object); }
            if (type == typeof(FavoriteStore)) { AddToDbSet_FavoriteStores(context, @object); }
            if (type == typeof(FavoriteVendor)) { AddToDbSet_FavoriteVendors(context, @object); }
            #endregion
            #region Geography
            if (type == typeof(Address)) { AddToDbSet_Addresses(context, @object); }
            if (type == typeof(Country)) { AddToDbSet_Countries(context, @object); }
            if (type == typeof(CountryCurrency)) { AddToDbSet_CountryCurrencies(context, @object); }
            if (type == typeof(CountryImage)) { AddToDbSet_CountryImages(context, @object); }
            if (type == typeof(CountryImageType)) { AddToDbSet_CountryImageTypes(context, @object); }
            if (type == typeof(CountryLanguage)) { AddToDbSet_CountryLanguages(context, @object); }
            if (type == typeof(HistoricalAddressValidation)) { AddToDbSet_HistoricalAddressValidations(context, @object); }
            if (type == typeof(PhonePrefixLookup)) { AddToDbSet_PhonePrefixLookups(context, @object); }
            if (type == typeof(Region)) { AddToDbSet_Regions(context, @object); }
            if (type == typeof(RegionCurrency)) { AddToDbSet_RegionCurrencies(context, @object); }
            if (type == typeof(RegionImage)) { AddToDbSet_RegionImages(context, @object); }
            if (type == typeof(RegionImageType)) { AddToDbSet_RegionImageTypes(context, @object); }
            if (type == typeof(RegionLanguage)) { AddToDbSet_RegionLanguages(context, @object); }
            if (type == typeof(ZipCode)) { AddToDbSet_ZipCodes(context, @object); }
            #endregion
            #region Globalization
            if (type == typeof(Language)) { AddToDbSet_Languages(context, @object); }
            if (type == typeof(LanguageImage)) { AddToDbSet_LanguageImages(context, @object); }
            if (type == typeof(LanguageImageType)) { AddToDbSet_LanguageImageTypes(context, @object); }
            if (type == typeof(UiKey)) { AddToDbSet_UiKeys(context, @object); }
            if (type == typeof(UiTranslation)) { AddToDbSet_UiTranslations(context, @object); }
            #endregion
            #region Groups
            if (type == typeof(Group)) { AddToDbSet_Groups(context, @object); }
            if (type == typeof(GroupStatus)) { AddToDbSet_GroupStatuses(context, @object); }
            if (type == typeof(GroupType)) { AddToDbSet_GroupTypes(context, @object); }
            if (type == typeof(GroupUser)) { AddToDbSet_GroupUsers(context, @object); }
            #endregion
            #region Hangfire
            if (type == typeof(ScheduledJobConfiguration)) { AddToDbSet_ScheduledJobConfigurations(context, @object); }
            if (type == typeof(ScheduledJobConfigurationSetting)) { AddToDbSet_ScheduledJobConfigurationSettings(context, @object); }
            #endregion
            #region Inventory
            if (type == typeof(InventoryLocation)) { AddToDbSet_InventoryLocations(context, @object); }
            if (type == typeof(InventoryLocationSection)) { AddToDbSet_InventoryLocationSections(context, @object); }
            #endregion
            #region Invoicing
            if (type == typeof(SalesInvoice)) { AddToDbSet_SalesInvoices(context, @object); }
            if (type == typeof(SalesInvoiceContact)) { AddToDbSet_SalesInvoiceContacts(context, @object); }
            if (type == typeof(SalesInvoiceFile)) { AddToDbSet_SalesInvoiceFiles(context, @object); }
            if (type == typeof(SalesInvoiceItem)) { AddToDbSet_SalesInvoiceItems(context, @object); }
            if (type == typeof(SalesInvoiceItemTarget)) { AddToDbSet_SalesInvoiceItemTargets(context, @object); }
            if (type == typeof(SalesInvoiceState)) { AddToDbSet_SalesInvoiceStates(context, @object); }
            if (type == typeof(SalesInvoiceStatus)) { AddToDbSet_SalesInvoiceStatuses(context, @object); }
            if (type == typeof(SalesInvoiceType)) { AddToDbSet_SalesInvoiceTypes(context, @object); }
            if (type == typeof(SalesOrderSalesInvoice)) { AddToDbSet_SalesOrderSalesInvoices(context, @object); }
            #endregion
            #region Manufacturers
            if (type == typeof(Manufacturer)) { AddToDbSet_Manufacturers(context, @object); }
            if (type == typeof(ManufacturerImage)) { AddToDbSet_ManufacturerImages(context, @object); }
            if (type == typeof(ManufacturerImageType)) { AddToDbSet_ManufacturerImageTypes(context, @object); }
            if (type == typeof(ManufacturerProduct)) { AddToDbSet_ManufacturerProducts(context, @object); }
            if (type == typeof(ManufacturerType)) { AddToDbSet_ManufacturerTypes(context, @object); }
            #endregion
            #region Media
            if (type == typeof(StoredFile)) { AddToDbSet_StoredFiles(context, @object); }
            #endregion
            #region Messaging
            if (type == typeof(Conversation)) { AddToDbSet_Conversations(context, @object); }
            if (type == typeof(ConversationUser)) { AddToDbSet_ConversationUsers(context, @object); }
            if (type == typeof(EmailQueue)) { AddToDbSet_EmailQueues(context, @object); }
            if (type == typeof(EmailQueueAttachment)) { AddToDbSet_EmailQueueAttachments(context, @object); }
            if (type == typeof(EmailStatus)) { AddToDbSet_EmailStatuses(context, @object); }
            if (type == typeof(EmailTemplate)) { AddToDbSet_EmailTemplates(context, @object); }
            if (type == typeof(EmailType)) { AddToDbSet_EmailTypes(context, @object); }
            if (type == typeof(Message)) { AddToDbSet_Messages(context, @object); }
            if (type == typeof(MessageAttachment)) { AddToDbSet_MessageAttachments(context, @object); }
            if (type == typeof(MessageRecipient)) { AddToDbSet_MessageRecipients(context, @object); }
            if (type == typeof(ProductNotification)) { AddToDbSet_ProductNotifications(context, @object); }
            #endregion
            #region Ordering
            if (type == typeof(SalesOrder)) { AddToDbSet_SalesOrders(context, @object); }
            if (type == typeof(SalesOrderContact)) { AddToDbSet_SalesOrderContacts(context, @object); }
            if (type == typeof(SalesOrderEvent)) { AddToDbSet_SalesOrderEvents(context, @object); }
            if (type == typeof(SalesOrderFile)) { AddToDbSet_SalesOrderFiles(context, @object); }
            if (type == typeof(SalesOrderItem)) { AddToDbSet_SalesOrderItems(context, @object); }
            if (type == typeof(SalesOrderItemTarget)) { AddToDbSet_SalesOrderItemTargets(context, @object); }
            if (type == typeof(SalesOrderState)) { AddToDbSet_SalesOrderStates(context, @object); }
            if (type == typeof(SalesOrderStatus)) { AddToDbSet_SalesOrderStatuses(context, @object); }
            if (type == typeof(SalesOrderType)) { AddToDbSet_SalesOrderTypes(context, @object); }
            #endregion
            #region Payments
            if (type == typeof(Membership)) { AddToDbSet_Memberships(context, @object); }
            if (type == typeof(MembershipAdZoneAccess)) { AddToDbSet_MembershipAdZoneAccesses(context, @object); }
            if (type == typeof(MembershipAdZoneAccessByLevel)) { AddToDbSet_MembershipAdZoneAccessByLevels(context, @object); }
            if (type == typeof(MembershipLevel)) { AddToDbSet_MembershipLevels(context, @object); }
            if (type == typeof(MembershipRepeatType)) { AddToDbSet_MembershipRepeatTypes(context, @object); }
            if (type == typeof(Payment)) { AddToDbSet_Payments(context, @object); }
            if (type == typeof(PaymentMethod)) { AddToDbSet_PaymentMethods(context, @object); }
            if (type == typeof(PaymentStatus)) { AddToDbSet_PaymentStatuses(context, @object); }
            if (type == typeof(PaymentType)) { AddToDbSet_PaymentTypes(context, @object); }
            if (type == typeof(RepeatType)) { AddToDbSet_RepeatTypes(context, @object); }
            if (type == typeof(SalesInvoicePayment)) { AddToDbSet_SalesInvoicePayments(context, @object); }
            if (type == typeof(SalesOrderPayment)) { AddToDbSet_SalesOrderPayments(context, @object); }
            if (type == typeof(SalesReturnPayment)) { AddToDbSet_SalesReturnPayments(context, @object); }
            if (type == typeof(Subscription)) { AddToDbSet_Subscriptions(context, @object); }
            if (type == typeof(SubscriptionHistory)) { AddToDbSet_SubscriptionHistories(context, @object); }
            if (type == typeof(SubscriptionStatus)) { AddToDbSet_SubscriptionStatuses(context, @object); }
            if (type == typeof(SubscriptionType)) { AddToDbSet_SubscriptionTypes(context, @object); }
            if (type == typeof(Wallet)) { AddToDbSet_Wallets(context, @object); }
            #endregion
            #region Pricing
            if (type == typeof(PricePoint)) { AddToDbSet_PricePoints(context, @object); }
            if (type == typeof(PriceRounding)) { AddToDbSet_PriceRoundings(context, @object); }
            if (type == typeof(PriceRule)) { AddToDbSet_PriceRules(context, @object); }
            if (type == typeof(PriceRuleAccount)) { AddToDbSet_PriceRuleAccounts(context, @object); }
            if (type == typeof(PriceRuleAccountType)) { AddToDbSet_PriceRuleAccountTypes(context, @object); }
            if (type == typeof(PriceRuleBrand)) { AddToDbSet_PriceRuleBrands(context, @object); }
            if (type == typeof(PriceRuleCategory)) { AddToDbSet_PriceRuleCategories(context, @object); }
            if (type == typeof(PriceRuleCountry)) { AddToDbSet_PriceRuleCountries(context, @object); }
            if (type == typeof(PriceRuleManufacturer)) { AddToDbSet_PriceRuleManufacturers(context, @object); }
            if (type == typeof(PriceRuleProduct)) { AddToDbSet_PriceRuleProducts(context, @object); }
            if (type == typeof(PriceRuleProductType)) { AddToDbSet_PriceRuleProductTypes(context, @object); }
            if (type == typeof(PriceRuleStore)) { AddToDbSet_PriceRuleStores(context, @object); }
            if (type == typeof(PriceRuleUserRole)) { AddToDbSet_PriceRuleUserRoles(context, @object); }
            if (type == typeof(PriceRuleVendor)) { AddToDbSet_PriceRuleVendors(context, @object); }
            #endregion
            #region Products
            if (type == typeof(FutureImport)) { AddToDbSet_FutureImports(context, @object); }
            if (type == typeof(FutureImportStatus)) { AddToDbSet_FutureImportStatuses(context, @object); }
            if (type == typeof(Product)) { AddToDbSet_Products(context, @object); }
            if (type == typeof(ProductAssociation)) { AddToDbSet_ProductAssociations(context, @object); }
            if (type == typeof(ProductAssociationType)) { AddToDbSet_ProductAssociationTypes(context, @object); }
            if (type == typeof(ProductCategory)) { AddToDbSet_ProductCategories(context, @object); }
            if (type == typeof(ProductDownload)) { AddToDbSet_ProductDownloads(context, @object); }
            if (type == typeof(ProductDownloadType)) { AddToDbSet_ProductDownloadTypes(context, @object); }
            if (type == typeof(ProductFile)) { AddToDbSet_ProductFiles(context, @object); }
            if (type == typeof(ProductImage)) { AddToDbSet_ProductImages(context, @object); }
            if (type == typeof(ProductImageType)) { AddToDbSet_ProductImageTypes(context, @object); }
            if (type == typeof(ProductInventoryLocationSection)) { AddToDbSet_ProductInventoryLocationSections(context, @object); }
            if (type == typeof(ProductMembershipLevel)) { AddToDbSet_ProductMembershipLevels(context, @object); }
            if (type == typeof(ProductPricePoint)) { AddToDbSet_ProductPricePoints(context, @object); }
            if (type == typeof(ProductRestriction)) { AddToDbSet_ProductRestrictions(context, @object); }
            if (type == typeof(ProductShipCarrierMethod)) { AddToDbSet_ProductShipCarrierMethods(context, @object); }
            if (type == typeof(ProductStatus)) { AddToDbSet_ProductStatuses(context, @object); }
            if (type == typeof(ProductSubscriptionType)) { AddToDbSet_ProductSubscriptionTypes(context, @object); }
            if (type == typeof(ProductType)) { AddToDbSet_ProductTypes(context, @object); }
            #endregion
            #region Purchasing
            if (type == typeof(PurchaseOrder)) { AddToDbSet_PurchaseOrders(context, @object); }
            if (type == typeof(PurchaseOrderContact)) { AddToDbSet_PurchaseOrderContacts(context, @object); }
            if (type == typeof(PurchaseOrderFile)) { AddToDbSet_PurchaseOrderFiles(context, @object); }
            if (type == typeof(PurchaseOrderItem)) { AddToDbSet_PurchaseOrderItems(context, @object); }
            if (type == typeof(PurchaseOrderItemTarget)) { AddToDbSet_PurchaseOrderItemTargets(context, @object); }
            if (type == typeof(PurchaseOrderState)) { AddToDbSet_PurchaseOrderStates(context, @object); }
            if (type == typeof(PurchaseOrderStatus)) { AddToDbSet_PurchaseOrderStatuses(context, @object); }
            if (type == typeof(PurchaseOrderType)) { AddToDbSet_PurchaseOrderTypes(context, @object); }
            if (type == typeof(SalesOrderPurchaseOrder)) { AddToDbSet_SalesOrderPurchaseOrders(context, @object); }
            #endregion
            #region Quoting
            if (type == typeof(SalesQuote)) { AddToDbSet_SalesQuotes(context, @object); }
            if (type == typeof(SalesQuoteCategory)) { AddToDbSet_SalesQuoteCategories(context, @object); }
            if (type == typeof(SalesQuoteContact)) { AddToDbSet_SalesQuoteContacts(context, @object); }
            if (type == typeof(SalesQuoteFile)) { AddToDbSet_SalesQuoteFiles(context, @object); }
            if (type == typeof(SalesQuoteItem)) { AddToDbSet_SalesQuoteItems(context, @object); }
            if (type == typeof(SalesQuoteItemTarget)) { AddToDbSet_SalesQuoteItemTargets(context, @object); }
            if (type == typeof(SalesQuoteSalesOrder)) { AddToDbSet_SalesQuoteSalesOrders(context, @object); }
            if (type == typeof(SalesQuoteState)) { AddToDbSet_SalesQuoteStates(context, @object); }
            if (type == typeof(SalesQuoteStatus)) { AddToDbSet_SalesQuoteStatuses(context, @object); }
            if (type == typeof(SalesQuoteType)) { AddToDbSet_SalesQuoteTypes(context, @object); }
            #endregion
            #region Reporting
            if (type == typeof(ReportType)) { AddToDbSet_ReportTypes(context, @object); }
            #endregion
            #region Returning
            if (type == typeof(SalesReturn)) { AddToDbSet_SalesReturns(context, @object); }
            if (type == typeof(SalesReturnContact)) { AddToDbSet_SalesReturnContacts(context, @object); }
            if (type == typeof(SalesReturnFile)) { AddToDbSet_SalesReturnFiles(context, @object); }
            if (type == typeof(SalesReturnItem)) { AddToDbSet_SalesReturnItems(context, @object); }
            if (type == typeof(SalesReturnItemTarget)) { AddToDbSet_SalesReturnItemTargets(context, @object); }
            if (type == typeof(SalesReturnReason)) { AddToDbSet_SalesReturnReasons(context, @object); }
            if (type == typeof(SalesReturnSalesOrder)) { AddToDbSet_SalesReturnSalesOrders(context, @object); }
            if (type == typeof(SalesReturnState)) { AddToDbSet_SalesReturnStates(context, @object); }
            if (type == typeof(SalesReturnStatus)) { AddToDbSet_SalesReturnStatuses(context, @object); }
            if (type == typeof(SalesReturnType)) { AddToDbSet_SalesReturnTypes(context, @object); }
            #endregion
            #region Reviews
            if (type == typeof(Review)) { AddToDbSet_Reviews(context, @object); }
            if (type == typeof(ReviewType)) { AddToDbSet_ReviewTypes(context, @object); }
            #endregion
            #region Sales
            if (type == typeof(SalesGroup)) { AddToDbSet_SalesGroups(context, @object); }
            if (type == typeof(SalesItemTargetType)) { AddToDbSet_SalesItemTargetTypes(context, @object); }
            #endregion
            #region Sampling
            if (type == typeof(SampleRequest)) { AddToDbSet_SampleRequests(context, @object); }
            if (type == typeof(SampleRequestContact)) { AddToDbSet_SampleRequestContacts(context, @object); }
            if (type == typeof(SampleRequestFile)) { AddToDbSet_SampleRequestFiles(context, @object); }
            if (type == typeof(SampleRequestItem)) { AddToDbSet_SampleRequestItems(context, @object); }
            if (type == typeof(SampleRequestItemTarget)) { AddToDbSet_SampleRequestItemTargets(context, @object); }
            if (type == typeof(SampleRequestState)) { AddToDbSet_SampleRequestStates(context, @object); }
            if (type == typeof(SampleRequestStatus)) { AddToDbSet_SampleRequestStatuses(context, @object); }
            if (type == typeof(SampleRequestType)) { AddToDbSet_SampleRequestTypes(context, @object); }
            #endregion
            #region Scouting
            if (type == typeof(Scout)) { AddToDbSet_Scouts(context, @object); }
            if (type == typeof(ScoutCategory)) { AddToDbSet_ScoutCategories(context, @object); }
            if (type == typeof(ScoutCategoryType)) { AddToDbSet_ScoutCategoryTypes(context, @object); }
            #endregion
            #region Shipping
            if (type == typeof(Package)) { AddToDbSet_Packages(context, @object); }
            if (type == typeof(PackageType)) { AddToDbSet_PackageTypes(context, @object); }
            if (type == typeof(RateQuote)) { AddToDbSet_RateQuotes(context, @object); }
            if (type == typeof(ShipCarrier)) { AddToDbSet_ShipCarriers(context, @object); }
            if (type == typeof(ShipCarrierMethod)) { AddToDbSet_ShipCarrierMethods(context, @object); }
            if (type == typeof(Shipment)) { AddToDbSet_Shipments(context, @object); }
            if (type == typeof(ShipmentEvent)) { AddToDbSet_ShipmentEvents(context, @object); }
            if (type == typeof(ShipmentStatus)) { AddToDbSet_ShipmentStatuses(context, @object); }
            if (type == typeof(ShipmentType)) { AddToDbSet_ShipmentTypes(context, @object); }
            #endregion
            #region Shopping
            if (type == typeof(Cart)) { AddToDbSet_Carts(context, @object); }
            if (type == typeof(CartContact)) { AddToDbSet_CartContacts(context, @object); }
            if (type == typeof(CartFile)) { AddToDbSet_CartFiles(context, @object); }
            if (type == typeof(CartItem)) { AddToDbSet_CartItems(context, @object); }
            if (type == typeof(CartItemTarget)) { AddToDbSet_CartItemTargets(context, @object); }
            if (type == typeof(CartState)) { AddToDbSet_CartStates(context, @object); }
            if (type == typeof(CartStatus)) { AddToDbSet_CartStatuses(context, @object); }
            if (type == typeof(CartType)) { AddToDbSet_CartTypes(context, @object); }
            #endregion
            #region Stores
            if (type == typeof(SiteDomain)) { AddToDbSet_SiteDomains(context, @object); }
            if (type == typeof(SiteDomainSocialProvider)) { AddToDbSet_SiteDomainSocialProviders(context, @object); }
            if (type == typeof(SocialProvider)) { AddToDbSet_SocialProviders(context, @object); }
            if (type == typeof(Store)) { AddToDbSet_Stores(context, @object); }
            if (type == typeof(StoreAccount)) { AddToDbSet_StoreAccounts(context, @object); }
            if (type == typeof(StoreBadge)) { AddToDbSet_StoreBadges(context, @object); }
            if (type == typeof(StoreContact)) { AddToDbSet_StoreContacts(context, @object); }
            if (type == typeof(StoreImage)) { AddToDbSet_StoreImages(context, @object); }
            if (type == typeof(StoreImageType)) { AddToDbSet_StoreImageTypes(context, @object); }
            if (type == typeof(StoreInventoryLocation)) { AddToDbSet_StoreInventoryLocations(context, @object); }
            if (type == typeof(StoreInventoryLocationType)) { AddToDbSet_StoreInventoryLocationTypes(context, @object); }
            if (type == typeof(StoreManufacturer)) { AddToDbSet_StoreManufacturers(context, @object); }
            if (type == typeof(StoreProduct)) { AddToDbSet_StoreProducts(context, @object); }
            if (type == typeof(StoreSubscription)) { AddToDbSet_StoreSubscriptions(context, @object); }
            if (type == typeof(StoreType)) { AddToDbSet_StoreTypes(context, @object); }
            if (type == typeof(StoreUser)) { AddToDbSet_StoreUsers(context, @object); }
            if (type == typeof(StoreVendor)) { AddToDbSet_StoreVendors(context, @object); }
            #endregion
            #region System
            if (type == typeof(ImportExportMapping)) { AddToDbSet_ImportExportMappings(context, @object); }
            if (type == typeof(Note)) { AddToDbSet_Notes(context, @object); }
            if (type == typeof(NoteType)) { AddToDbSet_NoteTypes(context, @object); }
            if (type == typeof(RecordVersion)) { AddToDbSet_RecordVersions(context, @object); }
            if (type == typeof(RecordVersionType)) { AddToDbSet_RecordVersionTypes(context, @object); }
            if (type == typeof(Setting)) { AddToDbSet_Settings(context, @object); }
            if (type == typeof(SettingGroup)) { AddToDbSet_SettingGroups(context, @object); }
            if (type == typeof(SettingType)) { AddToDbSet_SettingTypes(context, @object); }
            if (type == typeof(EventLog)) { AddToDbSet_EventLogs(context, @object); }
            #endregion
            #region Tax
            if (type == typeof(HistoricalTaxRate)) { AddToDbSet_HistoricalTaxRates(context, @object); }
            if (type == typeof(TaxCountry)) { AddToDbSet_TaxCountries(context, @object); }
            if (type == typeof(TaxRegion)) { AddToDbSet_TaxRegions(context, @object); }
            #endregion
            #region Tracking
            if (type == typeof(Campaign)) { AddToDbSet_Campaigns(context, @object); }
            if (type == typeof(CampaignAd)) { AddToDbSet_CampaignAds(context, @object); }
            if (type == typeof(CampaignStatus)) { AddToDbSet_CampaignStatuses(context, @object); }
            if (type == typeof(CampaignType)) { AddToDbSet_CampaignTypes(context, @object); }
            if (type == typeof(Event)) { AddToDbSet_Events(context, @object); }
            if (type == typeof(EventStatus)) { AddToDbSet_EventStatuses(context, @object); }
            if (type == typeof(EventType)) { AddToDbSet_EventTypes(context, @object); }
            if (type == typeof(IPOrganization)) { AddToDbSet_IPOrganizations(context, @object); }
            if (type == typeof(IPOrganizationStatus)) { AddToDbSet_IPOrganizationStatuses(context, @object); }
            if (type == typeof(PageView)) { AddToDbSet_PageViews(context, @object); }
            if (type == typeof(PageViewEvent)) { AddToDbSet_PageViewEvents(context, @object); }
            if (type == typeof(PageViewStatus)) { AddToDbSet_PageViewStatuses(context, @object); }
            if (type == typeof(PageViewType)) { AddToDbSet_PageViewTypes(context, @object); }
            if (type == typeof(Visit)) { AddToDbSet_Visits(context, @object); }
            if (type == typeof(Visitor)) { AddToDbSet_Visitors(context, @object); }
            if (type == typeof(VisitStatus)) { AddToDbSet_VisitStatuses(context, @object); }
            #endregion
            #region Vendors
            if (type == typeof(Vendor)) { AddToDbSet_Vendors(context, @object); }
            if (type == typeof(VendorAccount)) { AddToDbSet_VendorAccounts(context, @object); }
            if (type == typeof(VendorImage)) { AddToDbSet_VendorImages(context, @object); }
            if (type == typeof(VendorImageType)) { AddToDbSet_VendorImageTypes(context, @object); }
            if (type == typeof(VendorManufacturer)) { AddToDbSet_VendorManufacturers(context, @object); }
            if (type == typeof(VendorProduct)) { AddToDbSet_VendorProducts(context, @object); }
            if (type == typeof(VendorType)) { AddToDbSet_VendorTypes(context, @object); }
            #endregion
            throw new ArgumentException($"Unknown entity type: {type.Name}");
        }
        public static int? FindFirstActiveIDInDbSet(IClarityEcommerceEntities context, Type type)
        {
            var typeName = type.Name;
            if (typeName.EndsWith("Model"))
            {
                typeName = typeName.Substring(0, typeName.Length - 5);
            }
            if (type.IsInterface)
            {
                typeName = typeName.Substring(1);
            }
            switch (typeName)
            {
                #region Accounts
                case "Account": return FindFirstActiveIDInDbSet_Accounts(context);
                case "AccountAssociation": return FindFirstActiveIDInDbSet_AccountAssociations(context);
                case "AccountAssociationType": return FindFirstActiveIDInDbSet_AccountAssociationTypes(context);
                case "AccountContact": return FindFirstActiveIDInDbSet_AccountContacts(context);
                case "AccountCurrency": return FindFirstActiveIDInDbSet_AccountCurrencies(context);
                case "AccountFile": return FindFirstActiveIDInDbSet_AccountFiles(context);
                case "AccountImage": return FindFirstActiveIDInDbSet_AccountImages(context);
                case "AccountImageType": return FindFirstActiveIDInDbSet_AccountImageTypes(context);
                case "AccountPricePoint": return FindFirstActiveIDInDbSet_AccountPricePoints(context);
                case "AccountProduct": return FindFirstActiveIDInDbSet_AccountProducts(context);
                case "AccountProductType": return FindFirstActiveIDInDbSet_AccountProductTypes(context);
                case "AccountStatus": return FindFirstActiveIDInDbSet_AccountStatuses(context);
                case "AccountType": return FindFirstActiveIDInDbSet_AccountTypes(context);
                case "AccountUsageBalance": return FindFirstActiveIDInDbSet_AccountUsageBalances(context);
                #endregion
                #region Advertising
                case "Ad": return FindFirstActiveIDInDbSet_Ads(context);
                case "AdAccount": return FindFirstActiveIDInDbSet_AdAccounts(context);
                case "AdBrand": return FindFirstActiveIDInDbSet_AdBrands(context);
                case "AdImage": return FindFirstActiveIDInDbSet_AdImages(context);
                case "AdImageType": return FindFirstActiveIDInDbSet_AdImageTypes(context);
                case "AdStatus": return FindFirstActiveIDInDbSet_AdStatuses(context);
                case "AdStore": return FindFirstActiveIDInDbSet_AdStores(context);
                case "AdType": return FindFirstActiveIDInDbSet_AdTypes(context);
                case "AdZone": return FindFirstActiveIDInDbSet_AdZones(context);
                case "AdZoneAccess": return FindFirstActiveIDInDbSet_AdZoneAccesses(context);
                case "Zone": return FindFirstActiveIDInDbSet_Zones(context);
                case "ZoneStatus": return FindFirstActiveIDInDbSet_ZoneStatuses(context);
                case "ZoneType": return FindFirstActiveIDInDbSet_ZoneTypes(context);
                #endregion
                #region Attributes
                case "AttributeGroup": return FindFirstActiveIDInDbSet_AttributeGroups(context);
                case "AttributeTab": return FindFirstActiveIDInDbSet_AttributeTabs(context);
                case "AttributeType": return FindFirstActiveIDInDbSet_AttributeTypes(context);
                case "GeneralAttribute": return FindFirstActiveIDInDbSet_GeneralAttributes(context);
                case "GeneralAttributePredefinedOption": return FindFirstActiveIDInDbSet_GeneralAttributePredefinedOptions(context);
                #endregion
                #region Badges
                case "Badge": return FindFirstActiveIDInDbSet_Badges(context);
                case "BadgeImage": return FindFirstActiveIDInDbSet_BadgeImages(context);
                case "BadgeImageType": return FindFirstActiveIDInDbSet_BadgeImageTypes(context);
                case "BadgeType": return FindFirstActiveIDInDbSet_BadgeTypes(context);
                #endregion
                #region Brands
                case "Brand": return FindFirstActiveIDInDbSet_Brands(context);
                case "BrandAccount": return FindFirstActiveIDInDbSet_BrandAccounts(context);
                case "BrandCategory": return FindFirstActiveIDInDbSet_BrandCategories(context);
                case "BrandCurrency": return FindFirstActiveIDInDbSet_BrandCurrencies(context);
                case "BrandImage": return FindFirstActiveIDInDbSet_BrandImages(context);
                case "BrandImageType": return FindFirstActiveIDInDbSet_BrandImageTypes(context);
                case "BrandInventoryLocation": return FindFirstActiveIDInDbSet_BrandInventoryLocations(context);
                case "BrandInventoryLocationType": return FindFirstActiveIDInDbSet_BrandInventoryLocationTypes(context);
                case "BrandLanguage": return FindFirstActiveIDInDbSet_BrandLanguages(context);
                case "BrandProduct": return FindFirstActiveIDInDbSet_BrandProducts(context);
                case "BrandSiteDomain": return FindFirstActiveIDInDbSet_BrandSiteDomains(context);
                case "BrandStore": return FindFirstActiveIDInDbSet_BrandStores(context);
                case "BrandUser": return FindFirstActiveIDInDbSet_BrandUsers(context);
                #endregion
                #region CalendarEvents
                case "CalendarEvent": return FindFirstActiveIDInDbSet_CalendarEvents(context);
                case "CalendarEventDetail": return FindFirstActiveIDInDbSet_CalendarEventDetails(context);
                case "CalendarEventFile": return FindFirstActiveIDInDbSet_CalendarEventFiles(context);
                case "CalendarEventImage": return FindFirstActiveIDInDbSet_CalendarEventImages(context);
                case "CalendarEventImageType": return FindFirstActiveIDInDbSet_CalendarEventImageTypes(context);
                case "CalendarEventProduct": return FindFirstActiveIDInDbSet_CalendarEventProducts(context);
                case "CalendarEventStatus": return FindFirstActiveIDInDbSet_CalendarEventStatuses(context);
                case "CalendarEventType": return FindFirstActiveIDInDbSet_CalendarEventTypes(context);
                case "UserEventAttendance": return FindFirstActiveIDInDbSet_UserEventAttendances(context);
                case "UserEventAttendanceType": return FindFirstActiveIDInDbSet_UserEventAttendanceTypes(context);
                #endregion
                #region Categories
                case "Category": return FindFirstActiveIDInDbSet_Categories(context);
                case "CategoryFile": return FindFirstActiveIDInDbSet_CategoryFiles(context);
                case "CategoryImage": return FindFirstActiveIDInDbSet_CategoryImages(context);
                case "CategoryImageType": return FindFirstActiveIDInDbSet_CategoryImageTypes(context);
                case "CategoryType": return FindFirstActiveIDInDbSet_CategoryTypes(context);
                #endregion
                #region Contacts
                case "Contact": return FindFirstActiveIDInDbSet_Contacts(context);
                case "ContactImage": return FindFirstActiveIDInDbSet_ContactImages(context);
                case "ContactImageType": return FindFirstActiveIDInDbSet_ContactImageTypes(context);
                case "ContactType": return FindFirstActiveIDInDbSet_ContactTypes(context);
                case "ProfanityFilter": return FindFirstActiveIDInDbSet_ProfanityFilters(context);
                case "ReferralCode": return FindFirstActiveIDInDbSet_ReferralCodes(context);
                case "ReferralCodeStatus": return FindFirstActiveIDInDbSet_ReferralCodeStatuses(context);
                case "ReferralCodeType": return FindFirstActiveIDInDbSet_ReferralCodeTypes(context);
                case "User": return FindFirstActiveIDInDbSet_Users(context);
                case "UserFile": return FindFirstActiveIDInDbSet_UserFiles(context);
                case "UserImage": return FindFirstActiveIDInDbSet_UserImages(context);
                case "UserImageType": return FindFirstActiveIDInDbSet_UserImageTypes(context);
                case "UserOnlineStatus": return FindFirstActiveIDInDbSet_UserOnlineStatuses(context);
                case "UserProductType": return FindFirstActiveIDInDbSet_UserProductTypes(context);
                case "UserStatus": return FindFirstActiveIDInDbSet_UserStatuses(context);
                case "UserType": return FindFirstActiveIDInDbSet_UserTypes(context);
                #endregion
                #region Counters
                case "Counter": return FindFirstActiveIDInDbSet_Counters(context);
                case "CounterLog": return FindFirstActiveIDInDbSet_CounterLogs(context);
                case "CounterLogType": return FindFirstActiveIDInDbSet_CounterLogTypes(context);
                case "CounterType": return FindFirstActiveIDInDbSet_CounterTypes(context);
                #endregion
                #region Currencies
                case "Currency": return FindFirstActiveIDInDbSet_Currencies(context);
                case "CurrencyConversion": return FindFirstActiveIDInDbSet_CurrencyConversions(context);
                case "CurrencyImage": return FindFirstActiveIDInDbSet_CurrencyImages(context);
                case "CurrencyImageType": return FindFirstActiveIDInDbSet_CurrencyImageTypes(context);
                case "HistoricalCurrencyRate": return FindFirstActiveIDInDbSet_HistoricalCurrencyRates(context);
                #endregion
                #region Discounts
                case "AppliedCartDiscount": return FindFirstActiveIDInDbSet_AppliedCartDiscounts(context);
                case "AppliedCartItemDiscount": return FindFirstActiveIDInDbSet_AppliedCartItemDiscounts(context);
                case "Discount": return FindFirstActiveIDInDbSet_Discounts(context);
                case "DiscountAccount": return FindFirstActiveIDInDbSet_DiscountAccounts(context);
                case "DiscountAccountType": return FindFirstActiveIDInDbSet_DiscountAccountTypes(context);
                case "DiscountBrand": return FindFirstActiveIDInDbSet_DiscountBrands(context);
                case "DiscountCategory": return FindFirstActiveIDInDbSet_DiscountCategories(context);
                case "DiscountCode": return FindFirstActiveIDInDbSet_DiscountCodes(context);
                case "DiscountCountry": return FindFirstActiveIDInDbSet_DiscountCountries(context);
                case "DiscountManufacturer": return FindFirstActiveIDInDbSet_DiscountManufacturers(context);
                case "DiscountProduct": return FindFirstActiveIDInDbSet_DiscountProducts(context);
                case "DiscountProductType": return FindFirstActiveIDInDbSet_DiscountProductTypes(context);
                case "DiscountShipCarrierMethod": return FindFirstActiveIDInDbSet_DiscountShipCarrierMethods(context);
                case "DiscountStore": return FindFirstActiveIDInDbSet_DiscountStores(context);
                case "DiscountUser": return FindFirstActiveIDInDbSet_DiscountUsers(context);
                case "DiscountUserRole": return FindFirstActiveIDInDbSet_DiscountUserRoles(context);
                case "DiscountVendor": return FindFirstActiveIDInDbSet_DiscountVendors(context);
                case "AppliedPurchaseOrderDiscount": return FindFirstActiveIDInDbSet_AppliedPurchaseOrderDiscounts(context);
                case "AppliedPurchaseOrderItemDiscount": return FindFirstActiveIDInDbSet_AppliedPurchaseOrderItemDiscounts(context);
                case "AppliedSalesInvoiceDiscount": return FindFirstActiveIDInDbSet_AppliedSalesInvoiceDiscounts(context);
                case "AppliedSalesInvoiceItemDiscount": return FindFirstActiveIDInDbSet_AppliedSalesInvoiceItemDiscounts(context);
                case "AppliedSalesOrderDiscount": return FindFirstActiveIDInDbSet_AppliedSalesOrderDiscounts(context);
                case "AppliedSalesOrderItemDiscount": return FindFirstActiveIDInDbSet_AppliedSalesOrderItemDiscounts(context);
                case "AppliedSalesQuoteDiscount": return FindFirstActiveIDInDbSet_AppliedSalesQuoteDiscounts(context);
                case "AppliedSalesQuoteItemDiscount": return FindFirstActiveIDInDbSet_AppliedSalesQuoteItemDiscounts(context);
                case "AppliedSalesReturnDiscount": return FindFirstActiveIDInDbSet_AppliedSalesReturnDiscounts(context);
                case "AppliedSalesReturnItemDiscount": return FindFirstActiveIDInDbSet_AppliedSalesReturnItemDiscounts(context);
                case "AppliedSampleRequestDiscount": return FindFirstActiveIDInDbSet_AppliedSampleRequestDiscounts(context);
                case "AppliedSampleRequestItemDiscount": return FindFirstActiveIDInDbSet_AppliedSampleRequestItemDiscounts(context);
                #endregion
                #region Favorites
                case "FavoriteCategory": return FindFirstActiveIDInDbSet_FavoriteCategories(context);
                case "FavoriteManufacturer": return FindFirstActiveIDInDbSet_FavoriteManufacturers(context);
                case "FavoriteShipCarrier": return FindFirstActiveIDInDbSet_FavoriteShipCarriers(context);
                case "FavoriteStore": return FindFirstActiveIDInDbSet_FavoriteStores(context);
                case "FavoriteVendor": return FindFirstActiveIDInDbSet_FavoriteVendors(context);
                #endregion
                #region Geography
                case "Address": return FindFirstActiveIDInDbSet_Addresses(context);
                case "Country": return FindFirstActiveIDInDbSet_Countries(context);
                case "CountryCurrency": return FindFirstActiveIDInDbSet_CountryCurrencies(context);
                case "CountryImage": return FindFirstActiveIDInDbSet_CountryImages(context);
                case "CountryImageType": return FindFirstActiveIDInDbSet_CountryImageTypes(context);
                case "CountryLanguage": return FindFirstActiveIDInDbSet_CountryLanguages(context);
                case "HistoricalAddressValidation": return FindFirstActiveIDInDbSet_HistoricalAddressValidations(context);
                case "PhonePrefixLookup": return FindFirstActiveIDInDbSet_PhonePrefixLookups(context);
                case "Region": return FindFirstActiveIDInDbSet_Regions(context);
                case "RegionCurrency": return FindFirstActiveIDInDbSet_RegionCurrencies(context);
                case "RegionImage": return FindFirstActiveIDInDbSet_RegionImages(context);
                case "RegionImageType": return FindFirstActiveIDInDbSet_RegionImageTypes(context);
                case "RegionLanguage": return FindFirstActiveIDInDbSet_RegionLanguages(context);
                case "ZipCode": return FindFirstActiveIDInDbSet_ZipCodes(context);
                #endregion
                #region Globalization
                case "Language": return FindFirstActiveIDInDbSet_Languages(context);
                case "LanguageImage": return FindFirstActiveIDInDbSet_LanguageImages(context);
                case "LanguageImageType": return FindFirstActiveIDInDbSet_LanguageImageTypes(context);
                case "UiKey": return FindFirstActiveIDInDbSet_UiKeys(context);
                case "UiTranslation": return FindFirstActiveIDInDbSet_UiTranslations(context);
                #endregion
                #region Groups
                case "Group": return FindFirstActiveIDInDbSet_Groups(context);
                case "GroupStatus": return FindFirstActiveIDInDbSet_GroupStatuses(context);
                case "GroupType": return FindFirstActiveIDInDbSet_GroupTypes(context);
                case "GroupUser": return FindFirstActiveIDInDbSet_GroupUsers(context);
                #endregion
                #region Hangfire
                case "ScheduledJobConfiguration": return FindFirstActiveIDInDbSet_ScheduledJobConfigurations(context);
                case "ScheduledJobConfigurationSetting": return FindFirstActiveIDInDbSet_ScheduledJobConfigurationSettings(context);
                #endregion
                #region Inventory
                case "InventoryLocation": return FindFirstActiveIDInDbSet_InventoryLocations(context);
                case "InventoryLocationSection": return FindFirstActiveIDInDbSet_InventoryLocationSections(context);
                #endregion
                #region Invoicing
                case "SalesInvoice": return FindFirstActiveIDInDbSet_SalesInvoices(context);
                case "SalesInvoiceContact": return FindFirstActiveIDInDbSet_SalesInvoiceContacts(context);
                case "SalesInvoiceFile": return FindFirstActiveIDInDbSet_SalesInvoiceFiles(context);
                case "SalesInvoiceItem": return FindFirstActiveIDInDbSet_SalesInvoiceItems(context);
                case "SalesInvoiceItemTarget": return FindFirstActiveIDInDbSet_SalesInvoiceItemTargets(context);
                case "SalesInvoiceState": return FindFirstActiveIDInDbSet_SalesInvoiceStates(context);
                case "SalesInvoiceStatus": return FindFirstActiveIDInDbSet_SalesInvoiceStatuses(context);
                case "SalesInvoiceType": return FindFirstActiveIDInDbSet_SalesInvoiceTypes(context);
                case "SalesOrderSalesInvoice": return FindFirstActiveIDInDbSet_SalesOrderSalesInvoices(context);
                #endregion
                #region Manufacturers
                case "Manufacturer": return FindFirstActiveIDInDbSet_Manufacturers(context);
                case "ManufacturerImage": return FindFirstActiveIDInDbSet_ManufacturerImages(context);
                case "ManufacturerImageType": return FindFirstActiveIDInDbSet_ManufacturerImageTypes(context);
                case "ManufacturerProduct": return FindFirstActiveIDInDbSet_ManufacturerProducts(context);
                case "ManufacturerType": return FindFirstActiveIDInDbSet_ManufacturerTypes(context);
                #endregion
                #region Media
                case "StoredFile": return FindFirstActiveIDInDbSet_StoredFiles(context);
                #endregion
                #region Messaging
                case "Conversation": return FindFirstActiveIDInDbSet_Conversations(context);
                case "ConversationUser": return FindFirstActiveIDInDbSet_ConversationUsers(context);
                case "EmailQueue": return FindFirstActiveIDInDbSet_EmailQueues(context);
                case "EmailQueueAttachment": return FindFirstActiveIDInDbSet_EmailQueueAttachments(context);
                case "EmailStatus": return FindFirstActiveIDInDbSet_EmailStatuses(context);
                case "EmailTemplate": return FindFirstActiveIDInDbSet_EmailTemplates(context);
                case "EmailType": return FindFirstActiveIDInDbSet_EmailTypes(context);
                case "Message": return FindFirstActiveIDInDbSet_Messages(context);
                case "MessageAttachment": return FindFirstActiveIDInDbSet_MessageAttachments(context);
                case "MessageRecipient": return FindFirstActiveIDInDbSet_MessageRecipients(context);
                case "ProductNotification": return FindFirstActiveIDInDbSet_ProductNotifications(context);
                #endregion
                #region Ordering
                case "SalesOrder": return FindFirstActiveIDInDbSet_SalesOrders(context);
                case "SalesOrderContact": return FindFirstActiveIDInDbSet_SalesOrderContacts(context);
                case "SalesOrderEvent": return FindFirstActiveIDInDbSet_SalesOrderEvents(context);
                case "SalesOrderFile": return FindFirstActiveIDInDbSet_SalesOrderFiles(context);
                case "SalesOrderItem": return FindFirstActiveIDInDbSet_SalesOrderItems(context);
                case "SalesOrderItemTarget": return FindFirstActiveIDInDbSet_SalesOrderItemTargets(context);
                case "SalesOrderState": return FindFirstActiveIDInDbSet_SalesOrderStates(context);
                case "SalesOrderStatus": return FindFirstActiveIDInDbSet_SalesOrderStatuses(context);
                case "SalesOrderType": return FindFirstActiveIDInDbSet_SalesOrderTypes(context);
                #endregion
                #region Payments
                case "Membership": return FindFirstActiveIDInDbSet_Memberships(context);
                case "MembershipAdZoneAccess": return FindFirstActiveIDInDbSet_MembershipAdZoneAccesses(context);
                case "MembershipAdZoneAccessByLevel": return FindFirstActiveIDInDbSet_MembershipAdZoneAccessByLevels(context);
                case "MembershipLevel": return FindFirstActiveIDInDbSet_MembershipLevels(context);
                case "MembershipRepeatType": return FindFirstActiveIDInDbSet_MembershipRepeatTypes(context);
                case "Payment": return FindFirstActiveIDInDbSet_Payments(context);
                case "PaymentMethod": return FindFirstActiveIDInDbSet_PaymentMethods(context);
                case "PaymentStatus": return FindFirstActiveIDInDbSet_PaymentStatuses(context);
                case "PaymentType": return FindFirstActiveIDInDbSet_PaymentTypes(context);
                case "RepeatType": return FindFirstActiveIDInDbSet_RepeatTypes(context);
                case "SalesInvoicePayment": return FindFirstActiveIDInDbSet_SalesInvoicePayments(context);
                case "SalesOrderPayment": return FindFirstActiveIDInDbSet_SalesOrderPayments(context);
                case "SalesReturnPayment": return FindFirstActiveIDInDbSet_SalesReturnPayments(context);
                case "Subscription": return FindFirstActiveIDInDbSet_Subscriptions(context);
                case "SubscriptionHistory": return FindFirstActiveIDInDbSet_SubscriptionHistories(context);
                case "SubscriptionStatus": return FindFirstActiveIDInDbSet_SubscriptionStatuses(context);
                case "SubscriptionType": return FindFirstActiveIDInDbSet_SubscriptionTypes(context);
                case "Wallet": return FindFirstActiveIDInDbSet_Wallets(context);
                #endregion
                #region Pricing
                case "PricePoint": return FindFirstActiveIDInDbSet_PricePoints(context);
                case "PriceRounding": return FindFirstActiveIDInDbSet_PriceRoundings(context);
                case "PriceRule": return FindFirstActiveIDInDbSet_PriceRules(context);
                case "PriceRuleAccount": return FindFirstActiveIDInDbSet_PriceRuleAccounts(context);
                case "PriceRuleAccountType": return FindFirstActiveIDInDbSet_PriceRuleAccountTypes(context);
                case "PriceRuleBrand": return FindFirstActiveIDInDbSet_PriceRuleBrands(context);
                case "PriceRuleCategory": return FindFirstActiveIDInDbSet_PriceRuleCategories(context);
                case "PriceRuleCountry": return FindFirstActiveIDInDbSet_PriceRuleCountries(context);
                case "PriceRuleManufacturer": return FindFirstActiveIDInDbSet_PriceRuleManufacturers(context);
                case "PriceRuleProduct": return FindFirstActiveIDInDbSet_PriceRuleProducts(context);
                case "PriceRuleProductType": return FindFirstActiveIDInDbSet_PriceRuleProductTypes(context);
                case "PriceRuleStore": return FindFirstActiveIDInDbSet_PriceRuleStores(context);
                case "PriceRuleUserRole": return FindFirstActiveIDInDbSet_PriceRuleUserRoles(context);
                case "PriceRuleVendor": return FindFirstActiveIDInDbSet_PriceRuleVendors(context);
                #endregion
                #region Products
                case "FutureImport": return FindFirstActiveIDInDbSet_FutureImports(context);
                case "FutureImportStatus": return FindFirstActiveIDInDbSet_FutureImportStatuses(context);
                case "Product": return FindFirstActiveIDInDbSet_Products(context);
                case "ProductAssociation": return FindFirstActiveIDInDbSet_ProductAssociations(context);
                case "ProductAssociationType": return FindFirstActiveIDInDbSet_ProductAssociationTypes(context);
                case "ProductCategory": return FindFirstActiveIDInDbSet_ProductCategories(context);
                case "ProductDownload": return FindFirstActiveIDInDbSet_ProductDownloads(context);
                case "ProductDownloadType": return FindFirstActiveIDInDbSet_ProductDownloadTypes(context);
                case "ProductFile": return FindFirstActiveIDInDbSet_ProductFiles(context);
                case "ProductImage": return FindFirstActiveIDInDbSet_ProductImages(context);
                case "ProductImageType": return FindFirstActiveIDInDbSet_ProductImageTypes(context);
                case "ProductInventoryLocationSection": return FindFirstActiveIDInDbSet_ProductInventoryLocationSections(context);
                case "ProductMembershipLevel": return FindFirstActiveIDInDbSet_ProductMembershipLevels(context);
                case "ProductPricePoint": return FindFirstActiveIDInDbSet_ProductPricePoints(context);
                case "ProductRestriction": return FindFirstActiveIDInDbSet_ProductRestrictions(context);
                case "ProductShipCarrierMethod": return FindFirstActiveIDInDbSet_ProductShipCarrierMethods(context);
                case "ProductStatus": return FindFirstActiveIDInDbSet_ProductStatuses(context);
                case "ProductSubscriptionType": return FindFirstActiveIDInDbSet_ProductSubscriptionTypes(context);
                case "ProductType": return FindFirstActiveIDInDbSet_ProductTypes(context);
                #endregion
                #region Purchasing
                case "PurchaseOrder": return FindFirstActiveIDInDbSet_PurchaseOrders(context);
                case "PurchaseOrderContact": return FindFirstActiveIDInDbSet_PurchaseOrderContacts(context);
                case "PurchaseOrderFile": return FindFirstActiveIDInDbSet_PurchaseOrderFiles(context);
                case "PurchaseOrderItem": return FindFirstActiveIDInDbSet_PurchaseOrderItems(context);
                case "PurchaseOrderItemTarget": return FindFirstActiveIDInDbSet_PurchaseOrderItemTargets(context);
                case "PurchaseOrderState": return FindFirstActiveIDInDbSet_PurchaseOrderStates(context);
                case "PurchaseOrderStatus": return FindFirstActiveIDInDbSet_PurchaseOrderStatuses(context);
                case "PurchaseOrderType": return FindFirstActiveIDInDbSet_PurchaseOrderTypes(context);
                case "SalesOrderPurchaseOrder": return FindFirstActiveIDInDbSet_SalesOrderPurchaseOrders(context);
                #endregion
                #region Quoting
                case "SalesQuote": return FindFirstActiveIDInDbSet_SalesQuotes(context);
                case "SalesQuoteCategory": return FindFirstActiveIDInDbSet_SalesQuoteCategories(context);
                case "SalesQuoteContact": return FindFirstActiveIDInDbSet_SalesQuoteContacts(context);
                case "SalesQuoteFile": return FindFirstActiveIDInDbSet_SalesQuoteFiles(context);
                case "SalesQuoteItem": return FindFirstActiveIDInDbSet_SalesQuoteItems(context);
                case "SalesQuoteItemTarget": return FindFirstActiveIDInDbSet_SalesQuoteItemTargets(context);
                case "SalesQuoteSalesOrder": return FindFirstActiveIDInDbSet_SalesQuoteSalesOrders(context);
                case "SalesQuoteState": return FindFirstActiveIDInDbSet_SalesQuoteStates(context);
                case "SalesQuoteStatus": return FindFirstActiveIDInDbSet_SalesQuoteStatuses(context);
                case "SalesQuoteType": return FindFirstActiveIDInDbSet_SalesQuoteTypes(context);
                #endregion
                #region Reporting
                case "ReportType": return FindFirstActiveIDInDbSet_ReportTypes(context);
                #endregion
                #region Returning
                case "SalesReturn": return FindFirstActiveIDInDbSet_SalesReturns(context);
                case "SalesReturnContact": return FindFirstActiveIDInDbSet_SalesReturnContacts(context);
                case "SalesReturnFile": return FindFirstActiveIDInDbSet_SalesReturnFiles(context);
                case "SalesReturnItem": return FindFirstActiveIDInDbSet_SalesReturnItems(context);
                case "SalesReturnItemTarget": return FindFirstActiveIDInDbSet_SalesReturnItemTargets(context);
                case "SalesReturnReason": return FindFirstActiveIDInDbSet_SalesReturnReasons(context);
                case "SalesReturnSalesOrder": return FindFirstActiveIDInDbSet_SalesReturnSalesOrders(context);
                case "SalesReturnState": return FindFirstActiveIDInDbSet_SalesReturnStates(context);
                case "SalesReturnStatus": return FindFirstActiveIDInDbSet_SalesReturnStatuses(context);
                case "SalesReturnType": return FindFirstActiveIDInDbSet_SalesReturnTypes(context);
                #endregion
                #region Reviews
                case "Review": return FindFirstActiveIDInDbSet_Reviews(context);
                case "ReviewType": return FindFirstActiveIDInDbSet_ReviewTypes(context);
                #endregion
                #region Sales
                case "SalesGroup": return FindFirstActiveIDInDbSet_SalesGroups(context);
                case "SalesItemTargetType": return FindFirstActiveIDInDbSet_SalesItemTargetTypes(context);
                #endregion
                #region Sampling
                case "SampleRequest": return FindFirstActiveIDInDbSet_SampleRequests(context);
                case "SampleRequestContact": return FindFirstActiveIDInDbSet_SampleRequestContacts(context);
                case "SampleRequestFile": return FindFirstActiveIDInDbSet_SampleRequestFiles(context);
                case "SampleRequestItem": return FindFirstActiveIDInDbSet_SampleRequestItems(context);
                case "SampleRequestItemTarget": return FindFirstActiveIDInDbSet_SampleRequestItemTargets(context);
                case "SampleRequestState": return FindFirstActiveIDInDbSet_SampleRequestStates(context);
                case "SampleRequestStatus": return FindFirstActiveIDInDbSet_SampleRequestStatuses(context);
                case "SampleRequestType": return FindFirstActiveIDInDbSet_SampleRequestTypes(context);
                #endregion
                #region Scouting
                case "Scout": return FindFirstActiveIDInDbSet_Scouts(context);
                case "ScoutCategory": return FindFirstActiveIDInDbSet_ScoutCategories(context);
                case "ScoutCategoryType": return FindFirstActiveIDInDbSet_ScoutCategoryTypes(context);
                #endregion
                #region Shipping
                case "Package": return FindFirstActiveIDInDbSet_Packages(context);
                case "PackageType": return FindFirstActiveIDInDbSet_PackageTypes(context);
                case "RateQuote": return FindFirstActiveIDInDbSet_RateQuotes(context);
                case "ShipCarrier": return FindFirstActiveIDInDbSet_ShipCarriers(context);
                case "ShipCarrierMethod": return FindFirstActiveIDInDbSet_ShipCarrierMethods(context);
                case "Shipment": return FindFirstActiveIDInDbSet_Shipments(context);
                case "ShipmentEvent": return FindFirstActiveIDInDbSet_ShipmentEvents(context);
                case "ShipmentStatus": return FindFirstActiveIDInDbSet_ShipmentStatuses(context);
                case "ShipmentType": return FindFirstActiveIDInDbSet_ShipmentTypes(context);
                #endregion
                #region Shopping
                case "Cart": return FindFirstActiveIDInDbSet_Carts(context);
                case "CartContact": return FindFirstActiveIDInDbSet_CartContacts(context);
                case "CartFile": return FindFirstActiveIDInDbSet_CartFiles(context);
                case "CartItem": return FindFirstActiveIDInDbSet_CartItems(context);
                case "CartItemTarget": return FindFirstActiveIDInDbSet_CartItemTargets(context);
                case "CartState": return FindFirstActiveIDInDbSet_CartStates(context);
                case "CartStatus": return FindFirstActiveIDInDbSet_CartStatuses(context);
                case "CartType": return FindFirstActiveIDInDbSet_CartTypes(context);
                #endregion
                #region Stores
                case "SiteDomain": return FindFirstActiveIDInDbSet_SiteDomains(context);
                case "SiteDomainSocialProvider": return FindFirstActiveIDInDbSet_SiteDomainSocialProviders(context);
                case "SocialProvider": return FindFirstActiveIDInDbSet_SocialProviders(context);
                case "Store": return FindFirstActiveIDInDbSet_Stores(context);
                case "StoreAccount": return FindFirstActiveIDInDbSet_StoreAccounts(context);
                case "StoreBadge": return FindFirstActiveIDInDbSet_StoreBadges(context);
                case "StoreContact": return FindFirstActiveIDInDbSet_StoreContacts(context);
                case "StoreImage": return FindFirstActiveIDInDbSet_StoreImages(context);
                case "StoreImageType": return FindFirstActiveIDInDbSet_StoreImageTypes(context);
                case "StoreInventoryLocation": return FindFirstActiveIDInDbSet_StoreInventoryLocations(context);
                case "StoreInventoryLocationType": return FindFirstActiveIDInDbSet_StoreInventoryLocationTypes(context);
                case "StoreManufacturer": return FindFirstActiveIDInDbSet_StoreManufacturers(context);
                case "StoreProduct": return FindFirstActiveIDInDbSet_StoreProducts(context);
                case "StoreSubscription": return FindFirstActiveIDInDbSet_StoreSubscriptions(context);
                case "StoreType": return FindFirstActiveIDInDbSet_StoreTypes(context);
                case "StoreUser": return FindFirstActiveIDInDbSet_StoreUsers(context);
                case "StoreVendor": return FindFirstActiveIDInDbSet_StoreVendors(context);
                #endregion
                #region System
                case "ImportExportMapping": return FindFirstActiveIDInDbSet_ImportExportMappings(context);
                case "Note": return FindFirstActiveIDInDbSet_Notes(context);
                case "NoteType": return FindFirstActiveIDInDbSet_NoteTypes(context);
                case "RecordVersion": return FindFirstActiveIDInDbSet_RecordVersions(context);
                case "RecordVersionType": return FindFirstActiveIDInDbSet_RecordVersionTypes(context);
                case "Setting": return FindFirstActiveIDInDbSet_Settings(context);
                case "SettingGroup": return FindFirstActiveIDInDbSet_SettingGroups(context);
                case "SettingType": return FindFirstActiveIDInDbSet_SettingTypes(context);
                case "EventLog": return FindFirstActiveIDInDbSet_EventLogs(context);
                #endregion
                #region Tax
                case "HistoricalTaxRate": return FindFirstActiveIDInDbSet_HistoricalTaxRates(context);
                case "TaxCountry": return FindFirstActiveIDInDbSet_TaxCountries(context);
                case "TaxRegion": return FindFirstActiveIDInDbSet_TaxRegions(context);
                #endregion
                #region Tracking
                case "Campaign": return FindFirstActiveIDInDbSet_Campaigns(context);
                case "CampaignAd": return FindFirstActiveIDInDbSet_CampaignAds(context);
                case "CampaignStatus": return FindFirstActiveIDInDbSet_CampaignStatuses(context);
                case "CampaignType": return FindFirstActiveIDInDbSet_CampaignTypes(context);
                case "Event": return FindFirstActiveIDInDbSet_Events(context);
                case "EventStatus": return FindFirstActiveIDInDbSet_EventStatuses(context);
                case "EventType": return FindFirstActiveIDInDbSet_EventTypes(context);
                case "IPOrganization": return FindFirstActiveIDInDbSet_IPOrganizations(context);
                case "IPOrganizationStatus": return FindFirstActiveIDInDbSet_IPOrganizationStatuses(context);
                case "PageView": return FindFirstActiveIDInDbSet_PageViews(context);
                case "PageViewEvent": return FindFirstActiveIDInDbSet_PageViewEvents(context);
                case "PageViewStatus": return FindFirstActiveIDInDbSet_PageViewStatuses(context);
                case "PageViewType": return FindFirstActiveIDInDbSet_PageViewTypes(context);
                case "Visit": return FindFirstActiveIDInDbSet_Visits(context);
                case "Visitor": return FindFirstActiveIDInDbSet_Visitors(context);
                case "VisitStatus": return FindFirstActiveIDInDbSet_VisitStatuses(context);
                #endregion
                #region Vendors
                case "Vendor": return FindFirstActiveIDInDbSet_Vendors(context);
                case "VendorAccount": return FindFirstActiveIDInDbSet_VendorAccounts(context);
                case "VendorImage": return FindFirstActiveIDInDbSet_VendorImages(context);
                case "VendorImageType": return FindFirstActiveIDInDbSet_VendorImageTypes(context);
                case "VendorManufacturer": return FindFirstActiveIDInDbSet_VendorManufacturers(context);
                case "VendorProduct": return FindFirstActiveIDInDbSet_VendorProducts(context);
                case "VendorType": return FindFirstActiveIDInDbSet_VendorTypes(context);
                #endregion
            }
            throw new ArgumentException($"Unknown entity type: {type.Name}");
        }
        public static object FindFirstActiveByImportGuidInDbSet(IClarityEcommerceEntities context, Type type, Guid recordGuid)
        {
            #region Accounts
            if (type == typeof(Account)) { FindFirstActiveByImportGuidInDbSet_Accounts(context, recordGuid); }
            if (type == typeof(AccountAssociation)) { FindFirstActiveByImportGuidInDbSet_AccountAssociations(context, recordGuid); }
            if (type == typeof(AccountAssociationType)) { FindFirstActiveByImportGuidInDbSet_AccountAssociationTypes(context, recordGuid); }
            if (type == typeof(AccountContact)) { FindFirstActiveByImportGuidInDbSet_AccountContacts(context, recordGuid); }
            if (type == typeof(AccountCurrency)) { FindFirstActiveByImportGuidInDbSet_AccountCurrencies(context, recordGuid); }
            if (type == typeof(AccountFile)) { FindFirstActiveByImportGuidInDbSet_AccountFiles(context, recordGuid); }
            if (type == typeof(AccountImage)) { FindFirstActiveByImportGuidInDbSet_AccountImages(context, recordGuid); }
            if (type == typeof(AccountImageType)) { FindFirstActiveByImportGuidInDbSet_AccountImageTypes(context, recordGuid); }
            if (type == typeof(AccountPricePoint)) { FindFirstActiveByImportGuidInDbSet_AccountPricePoints(context, recordGuid); }
            if (type == typeof(AccountProduct)) { FindFirstActiveByImportGuidInDbSet_AccountProducts(context, recordGuid); }
            if (type == typeof(AccountProductType)) { FindFirstActiveByImportGuidInDbSet_AccountProductTypes(context, recordGuid); }
            if (type == typeof(AccountStatus)) { FindFirstActiveByImportGuidInDbSet_AccountStatuses(context, recordGuid); }
            if (type == typeof(AccountType)) { FindFirstActiveByImportGuidInDbSet_AccountTypes(context, recordGuid); }
            if (type == typeof(AccountUsageBalance)) { FindFirstActiveByImportGuidInDbSet_AccountUsageBalances(context, recordGuid); }
            #endregion
            #region Advertising
            if (type == typeof(Ad)) { FindFirstActiveByImportGuidInDbSet_Ads(context, recordGuid); }
            if (type == typeof(AdAccount)) { FindFirstActiveByImportGuidInDbSet_AdAccounts(context, recordGuid); }
            if (type == typeof(AdBrand)) { FindFirstActiveByImportGuidInDbSet_AdBrands(context, recordGuid); }
            if (type == typeof(AdImage)) { FindFirstActiveByImportGuidInDbSet_AdImages(context, recordGuid); }
            if (type == typeof(AdImageType)) { FindFirstActiveByImportGuidInDbSet_AdImageTypes(context, recordGuid); }
            if (type == typeof(AdStatus)) { FindFirstActiveByImportGuidInDbSet_AdStatuses(context, recordGuid); }
            if (type == typeof(AdStore)) { FindFirstActiveByImportGuidInDbSet_AdStores(context, recordGuid); }
            if (type == typeof(AdType)) { FindFirstActiveByImportGuidInDbSet_AdTypes(context, recordGuid); }
            if (type == typeof(AdZone)) { FindFirstActiveByImportGuidInDbSet_AdZones(context, recordGuid); }
            if (type == typeof(AdZoneAccess)) { FindFirstActiveByImportGuidInDbSet_AdZoneAccesses(context, recordGuid); }
            if (type == typeof(Zone)) { FindFirstActiveByImportGuidInDbSet_Zones(context, recordGuid); }
            if (type == typeof(ZoneStatus)) { FindFirstActiveByImportGuidInDbSet_ZoneStatuses(context, recordGuid); }
            if (type == typeof(ZoneType)) { FindFirstActiveByImportGuidInDbSet_ZoneTypes(context, recordGuid); }
            #endregion
            #region Attributes
            if (type == typeof(AttributeGroup)) { FindFirstActiveByImportGuidInDbSet_AttributeGroups(context, recordGuid); }
            if (type == typeof(AttributeTab)) { FindFirstActiveByImportGuidInDbSet_AttributeTabs(context, recordGuid); }
            if (type == typeof(AttributeType)) { FindFirstActiveByImportGuidInDbSet_AttributeTypes(context, recordGuid); }
            if (type == typeof(GeneralAttribute)) { FindFirstActiveByImportGuidInDbSet_GeneralAttributes(context, recordGuid); }
            if (type == typeof(GeneralAttributePredefinedOption)) { FindFirstActiveByImportGuidInDbSet_GeneralAttributePredefinedOptions(context, recordGuid); }
            #endregion
            #region Badges
            if (type == typeof(Badge)) { FindFirstActiveByImportGuidInDbSet_Badges(context, recordGuid); }
            if (type == typeof(BadgeImage)) { FindFirstActiveByImportGuidInDbSet_BadgeImages(context, recordGuid); }
            if (type == typeof(BadgeImageType)) { FindFirstActiveByImportGuidInDbSet_BadgeImageTypes(context, recordGuid); }
            if (type == typeof(BadgeType)) { FindFirstActiveByImportGuidInDbSet_BadgeTypes(context, recordGuid); }
            #endregion
            #region Brands
            if (type == typeof(Brand)) { FindFirstActiveByImportGuidInDbSet_Brands(context, recordGuid); }
            if (type == typeof(BrandAccount)) { FindFirstActiveByImportGuidInDbSet_BrandAccounts(context, recordGuid); }
            if (type == typeof(BrandCategory)) { FindFirstActiveByImportGuidInDbSet_BrandCategories(context, recordGuid); }
            if (type == typeof(BrandCurrency)) { FindFirstActiveByImportGuidInDbSet_BrandCurrencies(context, recordGuid); }
            if (type == typeof(BrandImage)) { FindFirstActiveByImportGuidInDbSet_BrandImages(context, recordGuid); }
            if (type == typeof(BrandImageType)) { FindFirstActiveByImportGuidInDbSet_BrandImageTypes(context, recordGuid); }
            if (type == typeof(BrandInventoryLocation)) { FindFirstActiveByImportGuidInDbSet_BrandInventoryLocations(context, recordGuid); }
            if (type == typeof(BrandInventoryLocationType)) { FindFirstActiveByImportGuidInDbSet_BrandInventoryLocationTypes(context, recordGuid); }
            if (type == typeof(BrandLanguage)) { FindFirstActiveByImportGuidInDbSet_BrandLanguages(context, recordGuid); }
            if (type == typeof(BrandProduct)) { FindFirstActiveByImportGuidInDbSet_BrandProducts(context, recordGuid); }
            if (type == typeof(BrandSiteDomain)) { FindFirstActiveByImportGuidInDbSet_BrandSiteDomains(context, recordGuid); }
            if (type == typeof(BrandStore)) { FindFirstActiveByImportGuidInDbSet_BrandStores(context, recordGuid); }
            if (type == typeof(BrandUser)) { FindFirstActiveByImportGuidInDbSet_BrandUsers(context, recordGuid); }
            #endregion
            #region CalendarEvents
            if (type == typeof(CalendarEvent)) { FindFirstActiveByImportGuidInDbSet_CalendarEvents(context, recordGuid); }
            if (type == typeof(CalendarEventDetail)) { FindFirstActiveByImportGuidInDbSet_CalendarEventDetails(context, recordGuid); }
            if (type == typeof(CalendarEventFile)) { FindFirstActiveByImportGuidInDbSet_CalendarEventFiles(context, recordGuid); }
            if (type == typeof(CalendarEventImage)) { FindFirstActiveByImportGuidInDbSet_CalendarEventImages(context, recordGuid); }
            if (type == typeof(CalendarEventImageType)) { FindFirstActiveByImportGuidInDbSet_CalendarEventImageTypes(context, recordGuid); }
            if (type == typeof(CalendarEventProduct)) { FindFirstActiveByImportGuidInDbSet_CalendarEventProducts(context, recordGuid); }
            if (type == typeof(CalendarEventStatus)) { FindFirstActiveByImportGuidInDbSet_CalendarEventStatuses(context, recordGuid); }
            if (type == typeof(CalendarEventType)) { FindFirstActiveByImportGuidInDbSet_CalendarEventTypes(context, recordGuid); }
            if (type == typeof(UserEventAttendance)) { FindFirstActiveByImportGuidInDbSet_UserEventAttendances(context, recordGuid); }
            if (type == typeof(UserEventAttendanceType)) { FindFirstActiveByImportGuidInDbSet_UserEventAttendanceTypes(context, recordGuid); }
            #endregion
            #region Categories
            if (type == typeof(Category)) { FindFirstActiveByImportGuidInDbSet_Categories(context, recordGuid); }
            if (type == typeof(CategoryFile)) { FindFirstActiveByImportGuidInDbSet_CategoryFiles(context, recordGuid); }
            if (type == typeof(CategoryImage)) { FindFirstActiveByImportGuidInDbSet_CategoryImages(context, recordGuid); }
            if (type == typeof(CategoryImageType)) { FindFirstActiveByImportGuidInDbSet_CategoryImageTypes(context, recordGuid); }
            if (type == typeof(CategoryType)) { FindFirstActiveByImportGuidInDbSet_CategoryTypes(context, recordGuid); }
            #endregion
            #region Contacts
            if (type == typeof(Contact)) { FindFirstActiveByImportGuidInDbSet_Contacts(context, recordGuid); }
            if (type == typeof(ContactImage)) { FindFirstActiveByImportGuidInDbSet_ContactImages(context, recordGuid); }
            if (type == typeof(ContactImageType)) { FindFirstActiveByImportGuidInDbSet_ContactImageTypes(context, recordGuid); }
            if (type == typeof(ContactType)) { FindFirstActiveByImportGuidInDbSet_ContactTypes(context, recordGuid); }
            if (type == typeof(ProfanityFilter)) { FindFirstActiveByImportGuidInDbSet_ProfanityFilters(context, recordGuid); }
            if (type == typeof(ReferralCode)) { FindFirstActiveByImportGuidInDbSet_ReferralCodes(context, recordGuid); }
            if (type == typeof(ReferralCodeStatus)) { FindFirstActiveByImportGuidInDbSet_ReferralCodeStatuses(context, recordGuid); }
            if (type == typeof(ReferralCodeType)) { FindFirstActiveByImportGuidInDbSet_ReferralCodeTypes(context, recordGuid); }
            if (type == typeof(User)) { FindFirstActiveByImportGuidInDbSet_Users(context, recordGuid); }
            if (type == typeof(UserFile)) { FindFirstActiveByImportGuidInDbSet_UserFiles(context, recordGuid); }
            if (type == typeof(UserImage)) { FindFirstActiveByImportGuidInDbSet_UserImages(context, recordGuid); }
            if (type == typeof(UserImageType)) { FindFirstActiveByImportGuidInDbSet_UserImageTypes(context, recordGuid); }
            if (type == typeof(UserOnlineStatus)) { FindFirstActiveByImportGuidInDbSet_UserOnlineStatuses(context, recordGuid); }
            if (type == typeof(UserProductType)) { FindFirstActiveByImportGuidInDbSet_UserProductTypes(context, recordGuid); }
            if (type == typeof(UserStatus)) { FindFirstActiveByImportGuidInDbSet_UserStatuses(context, recordGuid); }
            if (type == typeof(UserType)) { FindFirstActiveByImportGuidInDbSet_UserTypes(context, recordGuid); }
            #endregion
            #region Counters
            if (type == typeof(Counter)) { FindFirstActiveByImportGuidInDbSet_Counters(context, recordGuid); }
            if (type == typeof(CounterLog)) { FindFirstActiveByImportGuidInDbSet_CounterLogs(context, recordGuid); }
            if (type == typeof(CounterLogType)) { FindFirstActiveByImportGuidInDbSet_CounterLogTypes(context, recordGuid); }
            if (type == typeof(CounterType)) { FindFirstActiveByImportGuidInDbSet_CounterTypes(context, recordGuid); }
            #endregion
            #region Currencies
            if (type == typeof(Currency)) { FindFirstActiveByImportGuidInDbSet_Currencies(context, recordGuid); }
            if (type == typeof(CurrencyConversion)) { FindFirstActiveByImportGuidInDbSet_CurrencyConversions(context, recordGuid); }
            if (type == typeof(CurrencyImage)) { FindFirstActiveByImportGuidInDbSet_CurrencyImages(context, recordGuid); }
            if (type == typeof(CurrencyImageType)) { FindFirstActiveByImportGuidInDbSet_CurrencyImageTypes(context, recordGuid); }
            if (type == typeof(HistoricalCurrencyRate)) { FindFirstActiveByImportGuidInDbSet_HistoricalCurrencyRates(context, recordGuid); }
            #endregion
            #region Discounts
            if (type == typeof(AppliedCartDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedCartDiscounts(context, recordGuid); }
            if (type == typeof(AppliedCartItemDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedCartItemDiscounts(context, recordGuid); }
            if (type == typeof(Discount)) { FindFirstActiveByImportGuidInDbSet_Discounts(context, recordGuid); }
            if (type == typeof(DiscountAccount)) { FindFirstActiveByImportGuidInDbSet_DiscountAccounts(context, recordGuid); }
            if (type == typeof(DiscountAccountType)) { FindFirstActiveByImportGuidInDbSet_DiscountAccountTypes(context, recordGuid); }
            if (type == typeof(DiscountBrand)) { FindFirstActiveByImportGuidInDbSet_DiscountBrands(context, recordGuid); }
            if (type == typeof(DiscountCategory)) { FindFirstActiveByImportGuidInDbSet_DiscountCategories(context, recordGuid); }
            if (type == typeof(DiscountCode)) { FindFirstActiveByImportGuidInDbSet_DiscountCodes(context, recordGuid); }
            if (type == typeof(DiscountCountry)) { FindFirstActiveByImportGuidInDbSet_DiscountCountries(context, recordGuid); }
            if (type == typeof(DiscountManufacturer)) { FindFirstActiveByImportGuidInDbSet_DiscountManufacturers(context, recordGuid); }
            if (type == typeof(DiscountProduct)) { FindFirstActiveByImportGuidInDbSet_DiscountProducts(context, recordGuid); }
            if (type == typeof(DiscountProductType)) { FindFirstActiveByImportGuidInDbSet_DiscountProductTypes(context, recordGuid); }
            if (type == typeof(DiscountShipCarrierMethod)) { FindFirstActiveByImportGuidInDbSet_DiscountShipCarrierMethods(context, recordGuid); }
            if (type == typeof(DiscountStore)) { FindFirstActiveByImportGuidInDbSet_DiscountStores(context, recordGuid); }
            if (type == typeof(DiscountUser)) { FindFirstActiveByImportGuidInDbSet_DiscountUsers(context, recordGuid); }
            if (type == typeof(DiscountUserRole)) { FindFirstActiveByImportGuidInDbSet_DiscountUserRoles(context, recordGuid); }
            if (type == typeof(DiscountVendor)) { FindFirstActiveByImportGuidInDbSet_DiscountVendors(context, recordGuid); }
            if (type == typeof(AppliedPurchaseOrderDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedPurchaseOrderDiscounts(context, recordGuid); }
            if (type == typeof(AppliedPurchaseOrderItemDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedPurchaseOrderItemDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesInvoiceDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesInvoiceDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesInvoiceItemDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesInvoiceItemDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesOrderDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesOrderDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesOrderItemDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesOrderItemDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesQuoteDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesQuoteDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesQuoteItemDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesQuoteItemDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesReturnDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesReturnDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSalesReturnItemDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSalesReturnItemDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSampleRequestDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSampleRequestDiscounts(context, recordGuid); }
            if (type == typeof(AppliedSampleRequestItemDiscount)) { FindFirstActiveByImportGuidInDbSet_AppliedSampleRequestItemDiscounts(context, recordGuid); }
            #endregion
            #region Favorites
            if (type == typeof(FavoriteCategory)) { FindFirstActiveByImportGuidInDbSet_FavoriteCategories(context, recordGuid); }
            if (type == typeof(FavoriteManufacturer)) { FindFirstActiveByImportGuidInDbSet_FavoriteManufacturers(context, recordGuid); }
            if (type == typeof(FavoriteShipCarrier)) { FindFirstActiveByImportGuidInDbSet_FavoriteShipCarriers(context, recordGuid); }
            if (type == typeof(FavoriteStore)) { FindFirstActiveByImportGuidInDbSet_FavoriteStores(context, recordGuid); }
            if (type == typeof(FavoriteVendor)) { FindFirstActiveByImportGuidInDbSet_FavoriteVendors(context, recordGuid); }
            #endregion
            #region Geography
            if (type == typeof(Address)) { FindFirstActiveByImportGuidInDbSet_Addresses(context, recordGuid); }
            if (type == typeof(Country)) { FindFirstActiveByImportGuidInDbSet_Countries(context, recordGuid); }
            if (type == typeof(CountryCurrency)) { FindFirstActiveByImportGuidInDbSet_CountryCurrencies(context, recordGuid); }
            if (type == typeof(CountryImage)) { FindFirstActiveByImportGuidInDbSet_CountryImages(context, recordGuid); }
            if (type == typeof(CountryImageType)) { FindFirstActiveByImportGuidInDbSet_CountryImageTypes(context, recordGuid); }
            if (type == typeof(CountryLanguage)) { FindFirstActiveByImportGuidInDbSet_CountryLanguages(context, recordGuid); }
            if (type == typeof(HistoricalAddressValidation)) { FindFirstActiveByImportGuidInDbSet_HistoricalAddressValidations(context, recordGuid); }
            if (type == typeof(PhonePrefixLookup)) { FindFirstActiveByImportGuidInDbSet_PhonePrefixLookups(context, recordGuid); }
            if (type == typeof(Region)) { FindFirstActiveByImportGuidInDbSet_Regions(context, recordGuid); }
            if (type == typeof(RegionCurrency)) { FindFirstActiveByImportGuidInDbSet_RegionCurrencies(context, recordGuid); }
            if (type == typeof(RegionImage)) { FindFirstActiveByImportGuidInDbSet_RegionImages(context, recordGuid); }
            if (type == typeof(RegionImageType)) { FindFirstActiveByImportGuidInDbSet_RegionImageTypes(context, recordGuid); }
            if (type == typeof(RegionLanguage)) { FindFirstActiveByImportGuidInDbSet_RegionLanguages(context, recordGuid); }
            if (type == typeof(ZipCode)) { FindFirstActiveByImportGuidInDbSet_ZipCodes(context, recordGuid); }
            #endregion
            #region Globalization
            if (type == typeof(Language)) { FindFirstActiveByImportGuidInDbSet_Languages(context, recordGuid); }
            if (type == typeof(LanguageImage)) { FindFirstActiveByImportGuidInDbSet_LanguageImages(context, recordGuid); }
            if (type == typeof(LanguageImageType)) { FindFirstActiveByImportGuidInDbSet_LanguageImageTypes(context, recordGuid); }
            if (type == typeof(UiKey)) { FindFirstActiveByImportGuidInDbSet_UiKeys(context, recordGuid); }
            if (type == typeof(UiTranslation)) { FindFirstActiveByImportGuidInDbSet_UiTranslations(context, recordGuid); }
            #endregion
            #region Groups
            if (type == typeof(Group)) { FindFirstActiveByImportGuidInDbSet_Groups(context, recordGuid); }
            if (type == typeof(GroupStatus)) { FindFirstActiveByImportGuidInDbSet_GroupStatuses(context, recordGuid); }
            if (type == typeof(GroupType)) { FindFirstActiveByImportGuidInDbSet_GroupTypes(context, recordGuid); }
            if (type == typeof(GroupUser)) { FindFirstActiveByImportGuidInDbSet_GroupUsers(context, recordGuid); }
            #endregion
            #region Hangfire
            if (type == typeof(ScheduledJobConfiguration)) { FindFirstActiveByImportGuidInDbSet_ScheduledJobConfigurations(context, recordGuid); }
            if (type == typeof(ScheduledJobConfigurationSetting)) { FindFirstActiveByImportGuidInDbSet_ScheduledJobConfigurationSettings(context, recordGuid); }
            #endregion
            #region Inventory
            if (type == typeof(InventoryLocation)) { FindFirstActiveByImportGuidInDbSet_InventoryLocations(context, recordGuid); }
            if (type == typeof(InventoryLocationSection)) { FindFirstActiveByImportGuidInDbSet_InventoryLocationSections(context, recordGuid); }
            #endregion
            #region Invoicing
            if (type == typeof(SalesInvoice)) { FindFirstActiveByImportGuidInDbSet_SalesInvoices(context, recordGuid); }
            if (type == typeof(SalesInvoiceContact)) { FindFirstActiveByImportGuidInDbSet_SalesInvoiceContacts(context, recordGuid); }
            if (type == typeof(SalesInvoiceFile)) { FindFirstActiveByImportGuidInDbSet_SalesInvoiceFiles(context, recordGuid); }
            if (type == typeof(SalesInvoiceItem)) { FindFirstActiveByImportGuidInDbSet_SalesInvoiceItems(context, recordGuid); }
            if (type == typeof(SalesInvoiceItemTarget)) { FindFirstActiveByImportGuidInDbSet_SalesInvoiceItemTargets(context, recordGuid); }
            if (type == typeof(SalesInvoiceState)) { FindFirstActiveByImportGuidInDbSet_SalesInvoiceStates(context, recordGuid); }
            if (type == typeof(SalesInvoiceStatus)) { FindFirstActiveByImportGuidInDbSet_SalesInvoiceStatuses(context, recordGuid); }
            if (type == typeof(SalesInvoiceType)) { FindFirstActiveByImportGuidInDbSet_SalesInvoiceTypes(context, recordGuid); }
            if (type == typeof(SalesOrderSalesInvoice)) { FindFirstActiveByImportGuidInDbSet_SalesOrderSalesInvoices(context, recordGuid); }
            #endregion
            #region Manufacturers
            if (type == typeof(Manufacturer)) { FindFirstActiveByImportGuidInDbSet_Manufacturers(context, recordGuid); }
            if (type == typeof(ManufacturerImage)) { FindFirstActiveByImportGuidInDbSet_ManufacturerImages(context, recordGuid); }
            if (type == typeof(ManufacturerImageType)) { FindFirstActiveByImportGuidInDbSet_ManufacturerImageTypes(context, recordGuid); }
            if (type == typeof(ManufacturerProduct)) { FindFirstActiveByImportGuidInDbSet_ManufacturerProducts(context, recordGuid); }
            if (type == typeof(ManufacturerType)) { FindFirstActiveByImportGuidInDbSet_ManufacturerTypes(context, recordGuid); }
            #endregion
            #region Media
            if (type == typeof(StoredFile)) { FindFirstActiveByImportGuidInDbSet_StoredFiles(context, recordGuid); }
            #endregion
            #region Messaging
            if (type == typeof(Conversation)) { FindFirstActiveByImportGuidInDbSet_Conversations(context, recordGuid); }
            if (type == typeof(ConversationUser)) { FindFirstActiveByImportGuidInDbSet_ConversationUsers(context, recordGuid); }
            if (type == typeof(EmailQueue)) { FindFirstActiveByImportGuidInDbSet_EmailQueues(context, recordGuid); }
            if (type == typeof(EmailQueueAttachment)) { FindFirstActiveByImportGuidInDbSet_EmailQueueAttachments(context, recordGuid); }
            if (type == typeof(EmailStatus)) { FindFirstActiveByImportGuidInDbSet_EmailStatuses(context, recordGuid); }
            if (type == typeof(EmailTemplate)) { FindFirstActiveByImportGuidInDbSet_EmailTemplates(context, recordGuid); }
            if (type == typeof(EmailType)) { FindFirstActiveByImportGuidInDbSet_EmailTypes(context, recordGuid); }
            if (type == typeof(Message)) { FindFirstActiveByImportGuidInDbSet_Messages(context, recordGuid); }
            if (type == typeof(MessageAttachment)) { FindFirstActiveByImportGuidInDbSet_MessageAttachments(context, recordGuid); }
            if (type == typeof(MessageRecipient)) { FindFirstActiveByImportGuidInDbSet_MessageRecipients(context, recordGuid); }
            if (type == typeof(ProductNotification)) { FindFirstActiveByImportGuidInDbSet_ProductNotifications(context, recordGuid); }
            #endregion
            #region Ordering
            if (type == typeof(SalesOrder)) { FindFirstActiveByImportGuidInDbSet_SalesOrders(context, recordGuid); }
            if (type == typeof(SalesOrderContact)) { FindFirstActiveByImportGuidInDbSet_SalesOrderContacts(context, recordGuid); }
            if (type == typeof(SalesOrderEvent)) { FindFirstActiveByImportGuidInDbSet_SalesOrderEvents(context, recordGuid); }
            if (type == typeof(SalesOrderFile)) { FindFirstActiveByImportGuidInDbSet_SalesOrderFiles(context, recordGuid); }
            if (type == typeof(SalesOrderItem)) { FindFirstActiveByImportGuidInDbSet_SalesOrderItems(context, recordGuid); }
            if (type == typeof(SalesOrderItemTarget)) { FindFirstActiveByImportGuidInDbSet_SalesOrderItemTargets(context, recordGuid); }
            if (type == typeof(SalesOrderState)) { FindFirstActiveByImportGuidInDbSet_SalesOrderStates(context, recordGuid); }
            if (type == typeof(SalesOrderStatus)) { FindFirstActiveByImportGuidInDbSet_SalesOrderStatuses(context, recordGuid); }
            if (type == typeof(SalesOrderType)) { FindFirstActiveByImportGuidInDbSet_SalesOrderTypes(context, recordGuid); }
            #endregion
            #region Payments
            if (type == typeof(Membership)) { FindFirstActiveByImportGuidInDbSet_Memberships(context, recordGuid); }
            if (type == typeof(MembershipAdZoneAccess)) { FindFirstActiveByImportGuidInDbSet_MembershipAdZoneAccesses(context, recordGuid); }
            if (type == typeof(MembershipAdZoneAccessByLevel)) { FindFirstActiveByImportGuidInDbSet_MembershipAdZoneAccessByLevels(context, recordGuid); }
            if (type == typeof(MembershipLevel)) { FindFirstActiveByImportGuidInDbSet_MembershipLevels(context, recordGuid); }
            if (type == typeof(MembershipRepeatType)) { FindFirstActiveByImportGuidInDbSet_MembershipRepeatTypes(context, recordGuid); }
            if (type == typeof(Payment)) { FindFirstActiveByImportGuidInDbSet_Payments(context, recordGuid); }
            if (type == typeof(PaymentMethod)) { FindFirstActiveByImportGuidInDbSet_PaymentMethods(context, recordGuid); }
            if (type == typeof(PaymentStatus)) { FindFirstActiveByImportGuidInDbSet_PaymentStatuses(context, recordGuid); }
            if (type == typeof(PaymentType)) { FindFirstActiveByImportGuidInDbSet_PaymentTypes(context, recordGuid); }
            if (type == typeof(RepeatType)) { FindFirstActiveByImportGuidInDbSet_RepeatTypes(context, recordGuid); }
            if (type == typeof(SalesInvoicePayment)) { FindFirstActiveByImportGuidInDbSet_SalesInvoicePayments(context, recordGuid); }
            if (type == typeof(SalesOrderPayment)) { FindFirstActiveByImportGuidInDbSet_SalesOrderPayments(context, recordGuid); }
            if (type == typeof(SalesReturnPayment)) { FindFirstActiveByImportGuidInDbSet_SalesReturnPayments(context, recordGuid); }
            if (type == typeof(Subscription)) { FindFirstActiveByImportGuidInDbSet_Subscriptions(context, recordGuid); }
            if (type == typeof(SubscriptionHistory)) { FindFirstActiveByImportGuidInDbSet_SubscriptionHistories(context, recordGuid); }
            if (type == typeof(SubscriptionStatus)) { FindFirstActiveByImportGuidInDbSet_SubscriptionStatuses(context, recordGuid); }
            if (type == typeof(SubscriptionType)) { FindFirstActiveByImportGuidInDbSet_SubscriptionTypes(context, recordGuid); }
            if (type == typeof(Wallet)) { FindFirstActiveByImportGuidInDbSet_Wallets(context, recordGuid); }
            #endregion
            #region Pricing
            if (type == typeof(PricePoint)) { FindFirstActiveByImportGuidInDbSet_PricePoints(context, recordGuid); }
            if (type == typeof(PriceRounding)) { FindFirstActiveByImportGuidInDbSet_PriceRoundings(context, recordGuid); }
            if (type == typeof(PriceRule)) { FindFirstActiveByImportGuidInDbSet_PriceRules(context, recordGuid); }
            if (type == typeof(PriceRuleAccount)) { FindFirstActiveByImportGuidInDbSet_PriceRuleAccounts(context, recordGuid); }
            if (type == typeof(PriceRuleAccountType)) { FindFirstActiveByImportGuidInDbSet_PriceRuleAccountTypes(context, recordGuid); }
            if (type == typeof(PriceRuleBrand)) { FindFirstActiveByImportGuidInDbSet_PriceRuleBrands(context, recordGuid); }
            if (type == typeof(PriceRuleCategory)) { FindFirstActiveByImportGuidInDbSet_PriceRuleCategories(context, recordGuid); }
            if (type == typeof(PriceRuleCountry)) { FindFirstActiveByImportGuidInDbSet_PriceRuleCountries(context, recordGuid); }
            if (type == typeof(PriceRuleManufacturer)) { FindFirstActiveByImportGuidInDbSet_PriceRuleManufacturers(context, recordGuid); }
            if (type == typeof(PriceRuleProduct)) { FindFirstActiveByImportGuidInDbSet_PriceRuleProducts(context, recordGuid); }
            if (type == typeof(PriceRuleProductType)) { FindFirstActiveByImportGuidInDbSet_PriceRuleProductTypes(context, recordGuid); }
            if (type == typeof(PriceRuleStore)) { FindFirstActiveByImportGuidInDbSet_PriceRuleStores(context, recordGuid); }
            if (type == typeof(PriceRuleUserRole)) { FindFirstActiveByImportGuidInDbSet_PriceRuleUserRoles(context, recordGuid); }
            if (type == typeof(PriceRuleVendor)) { FindFirstActiveByImportGuidInDbSet_PriceRuleVendors(context, recordGuid); }
            #endregion
            #region Products
            if (type == typeof(FutureImport)) { FindFirstActiveByImportGuidInDbSet_FutureImports(context, recordGuid); }
            if (type == typeof(FutureImportStatus)) { FindFirstActiveByImportGuidInDbSet_FutureImportStatuses(context, recordGuid); }
            if (type == typeof(Product)) { FindFirstActiveByImportGuidInDbSet_Products(context, recordGuid); }
            if (type == typeof(ProductAssociation)) { FindFirstActiveByImportGuidInDbSet_ProductAssociations(context, recordGuid); }
            if (type == typeof(ProductAssociationType)) { FindFirstActiveByImportGuidInDbSet_ProductAssociationTypes(context, recordGuid); }
            if (type == typeof(ProductCategory)) { FindFirstActiveByImportGuidInDbSet_ProductCategories(context, recordGuid); }
            if (type == typeof(ProductDownload)) { FindFirstActiveByImportGuidInDbSet_ProductDownloads(context, recordGuid); }
            if (type == typeof(ProductDownloadType)) { FindFirstActiveByImportGuidInDbSet_ProductDownloadTypes(context, recordGuid); }
            if (type == typeof(ProductFile)) { FindFirstActiveByImportGuidInDbSet_ProductFiles(context, recordGuid); }
            if (type == typeof(ProductImage)) { FindFirstActiveByImportGuidInDbSet_ProductImages(context, recordGuid); }
            if (type == typeof(ProductImageType)) { FindFirstActiveByImportGuidInDbSet_ProductImageTypes(context, recordGuid); }
            if (type == typeof(ProductInventoryLocationSection)) { FindFirstActiveByImportGuidInDbSet_ProductInventoryLocationSections(context, recordGuid); }
            if (type == typeof(ProductMembershipLevel)) { FindFirstActiveByImportGuidInDbSet_ProductMembershipLevels(context, recordGuid); }
            if (type == typeof(ProductPricePoint)) { FindFirstActiveByImportGuidInDbSet_ProductPricePoints(context, recordGuid); }
            if (type == typeof(ProductRestriction)) { FindFirstActiveByImportGuidInDbSet_ProductRestrictions(context, recordGuid); }
            if (type == typeof(ProductShipCarrierMethod)) { FindFirstActiveByImportGuidInDbSet_ProductShipCarrierMethods(context, recordGuid); }
            if (type == typeof(ProductStatus)) { FindFirstActiveByImportGuidInDbSet_ProductStatuses(context, recordGuid); }
            if (type == typeof(ProductSubscriptionType)) { FindFirstActiveByImportGuidInDbSet_ProductSubscriptionTypes(context, recordGuid); }
            if (type == typeof(ProductType)) { FindFirstActiveByImportGuidInDbSet_ProductTypes(context, recordGuid); }
            #endregion
            #region Purchasing
            if (type == typeof(PurchaseOrder)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrders(context, recordGuid); }
            if (type == typeof(PurchaseOrderContact)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrderContacts(context, recordGuid); }
            if (type == typeof(PurchaseOrderFile)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrderFiles(context, recordGuid); }
            if (type == typeof(PurchaseOrderItem)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrderItems(context, recordGuid); }
            if (type == typeof(PurchaseOrderItemTarget)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrderItemTargets(context, recordGuid); }
            if (type == typeof(PurchaseOrderState)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrderStates(context, recordGuid); }
            if (type == typeof(PurchaseOrderStatus)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrderStatuses(context, recordGuid); }
            if (type == typeof(PurchaseOrderType)) { FindFirstActiveByImportGuidInDbSet_PurchaseOrderTypes(context, recordGuid); }
            if (type == typeof(SalesOrderPurchaseOrder)) { FindFirstActiveByImportGuidInDbSet_SalesOrderPurchaseOrders(context, recordGuid); }
            #endregion
            #region Quoting
            if (type == typeof(SalesQuote)) { FindFirstActiveByImportGuidInDbSet_SalesQuotes(context, recordGuid); }
            if (type == typeof(SalesQuoteCategory)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteCategories(context, recordGuid); }
            if (type == typeof(SalesQuoteContact)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteContacts(context, recordGuid); }
            if (type == typeof(SalesQuoteFile)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteFiles(context, recordGuid); }
            if (type == typeof(SalesQuoteItem)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteItems(context, recordGuid); }
            if (type == typeof(SalesQuoteItemTarget)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteItemTargets(context, recordGuid); }
            if (type == typeof(SalesQuoteSalesOrder)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteSalesOrders(context, recordGuid); }
            if (type == typeof(SalesQuoteState)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteStates(context, recordGuid); }
            if (type == typeof(SalesQuoteStatus)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteStatuses(context, recordGuid); }
            if (type == typeof(SalesQuoteType)) { FindFirstActiveByImportGuidInDbSet_SalesQuoteTypes(context, recordGuid); }
            #endregion
            #region Reporting
            if (type == typeof(ReportType)) { FindFirstActiveByImportGuidInDbSet_ReportTypes(context, recordGuid); }
            #endregion
            #region Returning
            if (type == typeof(SalesReturn)) { FindFirstActiveByImportGuidInDbSet_SalesReturns(context, recordGuid); }
            if (type == typeof(SalesReturnContact)) { FindFirstActiveByImportGuidInDbSet_SalesReturnContacts(context, recordGuid); }
            if (type == typeof(SalesReturnFile)) { FindFirstActiveByImportGuidInDbSet_SalesReturnFiles(context, recordGuid); }
            if (type == typeof(SalesReturnItem)) { FindFirstActiveByImportGuidInDbSet_SalesReturnItems(context, recordGuid); }
            if (type == typeof(SalesReturnItemTarget)) { FindFirstActiveByImportGuidInDbSet_SalesReturnItemTargets(context, recordGuid); }
            if (type == typeof(SalesReturnReason)) { FindFirstActiveByImportGuidInDbSet_SalesReturnReasons(context, recordGuid); }
            if (type == typeof(SalesReturnSalesOrder)) { FindFirstActiveByImportGuidInDbSet_SalesReturnSalesOrders(context, recordGuid); }
            if (type == typeof(SalesReturnState)) { FindFirstActiveByImportGuidInDbSet_SalesReturnStates(context, recordGuid); }
            if (type == typeof(SalesReturnStatus)) { FindFirstActiveByImportGuidInDbSet_SalesReturnStatuses(context, recordGuid); }
            if (type == typeof(SalesReturnType)) { FindFirstActiveByImportGuidInDbSet_SalesReturnTypes(context, recordGuid); }
            #endregion
            #region Reviews
            if (type == typeof(Review)) { FindFirstActiveByImportGuidInDbSet_Reviews(context, recordGuid); }
            if (type == typeof(ReviewType)) { FindFirstActiveByImportGuidInDbSet_ReviewTypes(context, recordGuid); }
            #endregion
            #region Sales
            if (type == typeof(SalesGroup)) { FindFirstActiveByImportGuidInDbSet_SalesGroups(context, recordGuid); }
            if (type == typeof(SalesItemTargetType)) { FindFirstActiveByImportGuidInDbSet_SalesItemTargetTypes(context, recordGuid); }
            #endregion
            #region Sampling
            if (type == typeof(SampleRequest)) { FindFirstActiveByImportGuidInDbSet_SampleRequests(context, recordGuid); }
            if (type == typeof(SampleRequestContact)) { FindFirstActiveByImportGuidInDbSet_SampleRequestContacts(context, recordGuid); }
            if (type == typeof(SampleRequestFile)) { FindFirstActiveByImportGuidInDbSet_SampleRequestFiles(context, recordGuid); }
            if (type == typeof(SampleRequestItem)) { FindFirstActiveByImportGuidInDbSet_SampleRequestItems(context, recordGuid); }
            if (type == typeof(SampleRequestItemTarget)) { FindFirstActiveByImportGuidInDbSet_SampleRequestItemTargets(context, recordGuid); }
            if (type == typeof(SampleRequestState)) { FindFirstActiveByImportGuidInDbSet_SampleRequestStates(context, recordGuid); }
            if (type == typeof(SampleRequestStatus)) { FindFirstActiveByImportGuidInDbSet_SampleRequestStatuses(context, recordGuid); }
            if (type == typeof(SampleRequestType)) { FindFirstActiveByImportGuidInDbSet_SampleRequestTypes(context, recordGuid); }
            #endregion
            #region Scouting
            if (type == typeof(Scout)) { FindFirstActiveByImportGuidInDbSet_Scouts(context, recordGuid); }
            if (type == typeof(ScoutCategory)) { FindFirstActiveByImportGuidInDbSet_ScoutCategories(context, recordGuid); }
            if (type == typeof(ScoutCategoryType)) { FindFirstActiveByImportGuidInDbSet_ScoutCategoryTypes(context, recordGuid); }
            #endregion
            #region Shipping
            if (type == typeof(Package)) { FindFirstActiveByImportGuidInDbSet_Packages(context, recordGuid); }
            if (type == typeof(PackageType)) { FindFirstActiveByImportGuidInDbSet_PackageTypes(context, recordGuid); }
            if (type == typeof(RateQuote)) { FindFirstActiveByImportGuidInDbSet_RateQuotes(context, recordGuid); }
            if (type == typeof(ShipCarrier)) { FindFirstActiveByImportGuidInDbSet_ShipCarriers(context, recordGuid); }
            if (type == typeof(ShipCarrierMethod)) { FindFirstActiveByImportGuidInDbSet_ShipCarrierMethods(context, recordGuid); }
            if (type == typeof(Shipment)) { FindFirstActiveByImportGuidInDbSet_Shipments(context, recordGuid); }
            if (type == typeof(ShipmentEvent)) { FindFirstActiveByImportGuidInDbSet_ShipmentEvents(context, recordGuid); }
            if (type == typeof(ShipmentStatus)) { FindFirstActiveByImportGuidInDbSet_ShipmentStatuses(context, recordGuid); }
            if (type == typeof(ShipmentType)) { FindFirstActiveByImportGuidInDbSet_ShipmentTypes(context, recordGuid); }
            #endregion
            #region Shopping
            if (type == typeof(Cart)) { FindFirstActiveByImportGuidInDbSet_Carts(context, recordGuid); }
            if (type == typeof(CartContact)) { FindFirstActiveByImportGuidInDbSet_CartContacts(context, recordGuid); }
            if (type == typeof(CartFile)) { FindFirstActiveByImportGuidInDbSet_CartFiles(context, recordGuid); }
            if (type == typeof(CartItem)) { FindFirstActiveByImportGuidInDbSet_CartItems(context, recordGuid); }
            if (type == typeof(CartItemTarget)) { FindFirstActiveByImportGuidInDbSet_CartItemTargets(context, recordGuid); }
            if (type == typeof(CartState)) { FindFirstActiveByImportGuidInDbSet_CartStates(context, recordGuid); }
            if (type == typeof(CartStatus)) { FindFirstActiveByImportGuidInDbSet_CartStatuses(context, recordGuid); }
            if (type == typeof(CartType)) { FindFirstActiveByImportGuidInDbSet_CartTypes(context, recordGuid); }
            #endregion
            #region Stores
            if (type == typeof(SiteDomain)) { FindFirstActiveByImportGuidInDbSet_SiteDomains(context, recordGuid); }
            if (type == typeof(SiteDomainSocialProvider)) { FindFirstActiveByImportGuidInDbSet_SiteDomainSocialProviders(context, recordGuid); }
            if (type == typeof(SocialProvider)) { FindFirstActiveByImportGuidInDbSet_SocialProviders(context, recordGuid); }
            if (type == typeof(Store)) { FindFirstActiveByImportGuidInDbSet_Stores(context, recordGuid); }
            if (type == typeof(StoreAccount)) { FindFirstActiveByImportGuidInDbSet_StoreAccounts(context, recordGuid); }
            if (type == typeof(StoreBadge)) { FindFirstActiveByImportGuidInDbSet_StoreBadges(context, recordGuid); }
            if (type == typeof(StoreContact)) { FindFirstActiveByImportGuidInDbSet_StoreContacts(context, recordGuid); }
            if (type == typeof(StoreImage)) { FindFirstActiveByImportGuidInDbSet_StoreImages(context, recordGuid); }
            if (type == typeof(StoreImageType)) { FindFirstActiveByImportGuidInDbSet_StoreImageTypes(context, recordGuid); }
            if (type == typeof(StoreInventoryLocation)) { FindFirstActiveByImportGuidInDbSet_StoreInventoryLocations(context, recordGuid); }
            if (type == typeof(StoreInventoryLocationType)) { FindFirstActiveByImportGuidInDbSet_StoreInventoryLocationTypes(context, recordGuid); }
            if (type == typeof(StoreManufacturer)) { FindFirstActiveByImportGuidInDbSet_StoreManufacturers(context, recordGuid); }
            if (type == typeof(StoreProduct)) { FindFirstActiveByImportGuidInDbSet_StoreProducts(context, recordGuid); }
            if (type == typeof(StoreSubscription)) { FindFirstActiveByImportGuidInDbSet_StoreSubscriptions(context, recordGuid); }
            if (type == typeof(StoreType)) { FindFirstActiveByImportGuidInDbSet_StoreTypes(context, recordGuid); }
            if (type == typeof(StoreUser)) { FindFirstActiveByImportGuidInDbSet_StoreUsers(context, recordGuid); }
            if (type == typeof(StoreVendor)) { FindFirstActiveByImportGuidInDbSet_StoreVendors(context, recordGuid); }
            #endregion
            #region System
            if (type == typeof(ImportExportMapping)) { FindFirstActiveByImportGuidInDbSet_ImportExportMappings(context, recordGuid); }
            if (type == typeof(Note)) { FindFirstActiveByImportGuidInDbSet_Notes(context, recordGuid); }
            if (type == typeof(NoteType)) { FindFirstActiveByImportGuidInDbSet_NoteTypes(context, recordGuid); }
            if (type == typeof(RecordVersion)) { FindFirstActiveByImportGuidInDbSet_RecordVersions(context, recordGuid); }
            if (type == typeof(RecordVersionType)) { FindFirstActiveByImportGuidInDbSet_RecordVersionTypes(context, recordGuid); }
            if (type == typeof(Setting)) { FindFirstActiveByImportGuidInDbSet_Settings(context, recordGuid); }
            if (type == typeof(SettingGroup)) { FindFirstActiveByImportGuidInDbSet_SettingGroups(context, recordGuid); }
            if (type == typeof(SettingType)) { FindFirstActiveByImportGuidInDbSet_SettingTypes(context, recordGuid); }
            if (type == typeof(EventLog)) { FindFirstActiveByImportGuidInDbSet_EventLogs(context, recordGuid); }
            #endregion
            #region Tax
            if (type == typeof(HistoricalTaxRate)) { FindFirstActiveByImportGuidInDbSet_HistoricalTaxRates(context, recordGuid); }
            if (type == typeof(TaxCountry)) { FindFirstActiveByImportGuidInDbSet_TaxCountries(context, recordGuid); }
            if (type == typeof(TaxRegion)) { FindFirstActiveByImportGuidInDbSet_TaxRegions(context, recordGuid); }
            #endregion
            #region Tracking
            if (type == typeof(Campaign)) { FindFirstActiveByImportGuidInDbSet_Campaigns(context, recordGuid); }
            if (type == typeof(CampaignAd)) { FindFirstActiveByImportGuidInDbSet_CampaignAds(context, recordGuid); }
            if (type == typeof(CampaignStatus)) { FindFirstActiveByImportGuidInDbSet_CampaignStatuses(context, recordGuid); }
            if (type == typeof(CampaignType)) { FindFirstActiveByImportGuidInDbSet_CampaignTypes(context, recordGuid); }
            if (type == typeof(Event)) { FindFirstActiveByImportGuidInDbSet_Events(context, recordGuid); }
            if (type == typeof(EventStatus)) { FindFirstActiveByImportGuidInDbSet_EventStatuses(context, recordGuid); }
            if (type == typeof(EventType)) { FindFirstActiveByImportGuidInDbSet_EventTypes(context, recordGuid); }
            if (type == typeof(IPOrganization)) { FindFirstActiveByImportGuidInDbSet_IPOrganizations(context, recordGuid); }
            if (type == typeof(IPOrganizationStatus)) { FindFirstActiveByImportGuidInDbSet_IPOrganizationStatuses(context, recordGuid); }
            if (type == typeof(PageView)) { FindFirstActiveByImportGuidInDbSet_PageViews(context, recordGuid); }
            if (type == typeof(PageViewEvent)) { FindFirstActiveByImportGuidInDbSet_PageViewEvents(context, recordGuid); }
            if (type == typeof(PageViewStatus)) { FindFirstActiveByImportGuidInDbSet_PageViewStatuses(context, recordGuid); }
            if (type == typeof(PageViewType)) { FindFirstActiveByImportGuidInDbSet_PageViewTypes(context, recordGuid); }
            if (type == typeof(Visit)) { FindFirstActiveByImportGuidInDbSet_Visits(context, recordGuid); }
            if (type == typeof(Visitor)) { FindFirstActiveByImportGuidInDbSet_Visitors(context, recordGuid); }
            if (type == typeof(VisitStatus)) { FindFirstActiveByImportGuidInDbSet_VisitStatuses(context, recordGuid); }
            #endregion
            #region Vendors
            if (type == typeof(Vendor)) { FindFirstActiveByImportGuidInDbSet_Vendors(context, recordGuid); }
            if (type == typeof(VendorAccount)) { FindFirstActiveByImportGuidInDbSet_VendorAccounts(context, recordGuid); }
            if (type == typeof(VendorImage)) { FindFirstActiveByImportGuidInDbSet_VendorImages(context, recordGuid); }
            if (type == typeof(VendorImageType)) { FindFirstActiveByImportGuidInDbSet_VendorImageTypes(context, recordGuid); }
            if (type == typeof(VendorManufacturer)) { FindFirstActiveByImportGuidInDbSet_VendorManufacturers(context, recordGuid); }
            if (type == typeof(VendorProduct)) { FindFirstActiveByImportGuidInDbSet_VendorProducts(context, recordGuid); }
            if (type == typeof(VendorType)) { FindFirstActiveByImportGuidInDbSet_VendorTypes(context, recordGuid); }
            #endregion
            throw new ArgumentException($"Unknown entity type: {type.Name}");
        }
        public static object FindFirstActiveByImportGuidInList(IEnumerable<IBaseModel> collection, Guid recordGuid)
        {
            return collection.FirstOrDefault(
                x => x.Active
                  && x.JsonAttributes.DeserializeAttributesDictionary().ContainsKey("ImportGuid")
                  && x.JsonAttributes.DeserializeAttributesDictionary()["ImportGuid"].Value
                         == recordGuid.ToString());
        }
    }
}
