// <autogenerated>
// <copyright file="ImportAssigners.03.GetTypeOfProperty.cs" company="clarity-ventures.com">
// Copyright (c) 2018-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the import assigners class</summary>
// <summary>Implements the Import Assigners for dynamic mapping</summary>
// <remarks>This file was auto-generated by ImportAssigners.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable MemberCanBePrivate.Global, MissingXmlDoc, UnusedMember.Global, UnusedMember.Local
#pragma warning disable 618, 1591
namespace Clarity.Ecommerce.Providers.SalesQuoteImporter
{
    using System;
    using System.Linq;
    using Interfaces.Models;

    public static partial class ImportAssigners
    {
        public static Type GetTypeOfProperty(object @object, string property)
        {
            var type = @object.GetType();
            if (BaseProperties.Contains(property) && @object is IBaseModel)
            {
                switch (property)
                {
                    case "ID": return typeof(int);
                    case "CustomKey": return typeof(string);
                    case "CreatedDate": return typeof(DateTime);
                    case "UpdatedDate": return typeof(DateTime?);
                    case "Active": return typeof(bool);
                    case "Hash": return typeof(long?);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (NameableBaseProperties.Contains(property) && @object is INameableBaseModel)
            {
                switch (property)
                {
                    case "Name": return typeof(string);
                    case "Description": return typeof(string);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (HaveJsonAttributesBaseProperties.Contains(property) && @object is IHaveJsonAttributesBaseModel)
            {
                switch (property)
                {
                    case "JsonAttributes": return typeof(string);
                    case "SerializableAttributes": return typeof(SerializableAttributesDictionary);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (TypableBaseProperties.Contains(property))
            {
                if (@object is ITypeModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return typeof(string);
                        case "SortOrder": return typeof(int?);
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
                if (@object is IStatusModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return typeof(string);
                        case "SortOrder": return typeof(int?);
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
                if (@object is IStateModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return typeof(string);
                        case "SortOrder": return typeof(int?);
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
            }
            if (HaveSeoBaseProperties.Contains(property) && @object is IHaveSeoBaseModel)
            {
                switch (property)
                {
                    case "SeoKeywords": return typeof(string);
                    case "SeoUrl": return typeof(string);
                    case "SeoPageTitle": return typeof(string);
                    case "SeoDescription": return typeof(string);
                    case "SeoMetaData": return typeof(string);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #region Accounts
            if (type.GetInterfaces().Any(x => x == typeof(IAccountModel)))
            {
                switch (property)
                {
                    case "Images": return GetConcreteTypeOfAccount_Images();
                    case "StoredFiles": return GetConcreteTypeOfAccount_StoredFiles();
                    case "Brands": return GetConcreteTypeOfAccount_Brands();
                    case "Stores": return GetConcreteTypeOfAccount_Stores();
                    case "Products": return GetConcreteTypeOfAccount_Products();
                    case "Vendors": return GetConcreteTypeOfAccount_Vendors();
                    case "Users": return GetConcreteTypeOfAccount_Users();
                    case "Notes": return GetConcreteTypeOfAccount_Notes();
                    case "TypeID": return GetConcreteTypeOfAccount_TypeID();
                    case "Type": return GetConcreteTypeOfAccount_Type();
                    case "StatusID": return GetConcreteTypeOfAccount_StatusID();
                    case "Status": return GetConcreteTypeOfAccount_Status();
                    case "IsTaxable": return GetConcreteTypeOfAccount_IsTaxable();
                    case "TaxExemptionNo": return GetConcreteTypeOfAccount_TaxExemptionNo();
                    case "TaxEntityUseCode": return GetConcreteTypeOfAccount_TaxEntityUseCode();
                    case "IsOnHold": return GetConcreteTypeOfAccount_IsOnHold();
                    case "Credit": return GetConcreteTypeOfAccount_Credit();
                    case "Token": return GetConcreteTypeOfAccount_Token();
                    case "SageID": return GetConcreteTypeOfAccount_SageID();
                    case "CreditCurrencyID": return GetConcreteTypeOfAccount_CreditCurrencyID();
                    case "CreditCurrency": return GetConcreteTypeOfAccount_CreditCurrency();
                    case "AccountContacts": return GetConcreteTypeOfAccount_AccountContacts();
                    case "AccountCurrencies": return GetConcreteTypeOfAccount_AccountCurrencies();
                    case "AccountPricePoints": return GetConcreteTypeOfAccount_AccountPricePoints();
                    case "AccountAssociations": return GetConcreteTypeOfAccount_AccountAssociations();
                    case "AccountsAssociatedWith": return GetConcreteTypeOfAccount_AccountsAssociatedWith();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountAssociationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAccountAssociation_MasterID();
                    case "SlaveID": return GetConcreteTypeOfAccountAssociation_SlaveID();
                    case "Slave": return GetConcreteTypeOfAccountAssociation_Slave();
                    case "TypeID": return GetConcreteTypeOfAccountAssociation_TypeID();
                    case "Type": return GetConcreteTypeOfAccountAssociation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAccountAssociationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAccountContact_MasterID();
                    case "SlaveID": return GetConcreteTypeOfAccountContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfAccountContact_Slave();
                    case "IsPrimary": return GetConcreteTypeOfAccountContact_IsPrimary();
                    case "IsBilling": return GetConcreteTypeOfAccountContact_IsBilling();
                    case "TransmittedToERP": return GetConcreteTypeOfAccountContact_TransmittedToERP();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAccountCurrency_MasterID();
                    case "Master": return GetConcreteTypeOfAccountCurrency_Master();
                    case "SlaveID": return GetConcreteTypeOfAccountCurrency_SlaveID();
                    case "Slave": return GetConcreteTypeOfAccountCurrency_Slave();
                    case "IsPrimary": return GetConcreteTypeOfAccountCurrency_IsPrimary();
                    case "CustomName": return GetConcreteTypeOfAccountCurrency_CustomName();
                    case "CustomTranslationKey": return GetConcreteTypeOfAccountCurrency_CustomTranslationKey();
                    case "OverrideUnicodeSymbolValue": return GetConcreteTypeOfAccountCurrency_OverrideUnicodeSymbolValue();
                    case "OverrideHtmlCharacterCode": return GetConcreteTypeOfAccountCurrency_OverrideHtmlCharacterCode();
                    case "OverrideRawCharacter": return GetConcreteTypeOfAccountCurrency_OverrideRawCharacter();
                    case "OverrideDecimalPlaceAccuracy": return GetConcreteTypeOfAccountCurrency_OverrideDecimalPlaceAccuracy();
                    case "OverrideUseSeparator": return GetConcreteTypeOfAccountCurrency_OverrideUseSeparator();
                    case "OverrideRawDecimalCharacter": return GetConcreteTypeOfAccountCurrency_OverrideRawDecimalCharacter();
                    case "OverrideHtmlDecimalCharacterCode": return GetConcreteTypeOfAccountCurrency_OverrideHtmlDecimalCharacterCode();
                    case "OverrideRawSeparatorCharacter": return GetConcreteTypeOfAccountCurrency_OverrideRawSeparatorCharacter();
                    case "OverrideHtmlSeparatorCharacterCode": return GetConcreteTypeOfAccountCurrency_OverrideHtmlSeparatorCharacterCode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAccountFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfAccountFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfAccountFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfAccountFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAccountImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfAccountImage_TypeID();
                    case "Type": return GetConcreteTypeOfAccountImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfAccountImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfAccountImage_Author();
                    case "MediaDate": return GetConcreteTypeOfAccountImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfAccountImage_Copyright();
                    case "Location": return GetConcreteTypeOfAccountImage_Location();
                    case "Latitude": return GetConcreteTypeOfAccountImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfAccountImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfAccountImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfAccountImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfAccountImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfAccountImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfAccountImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfAccountImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfAccountImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfAccountImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfAccountImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfAccountImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfAccountImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfAccountImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfAccountImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAccountImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountPricePointModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAccountPricePoint_MasterID();
                    case "Master": return GetConcreteTypeOfAccountPricePoint_Master();
                    case "SlaveID": return GetConcreteTypeOfAccountPricePoint_SlaveID();
                    case "Slave": return GetConcreteTypeOfAccountPricePoint_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAccountProduct_MasterID();
                    case "SlaveID": return GetConcreteTypeOfAccountProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfAccountProduct_Slave();
                    case "TypeID": return GetConcreteTypeOfAccountProduct_TypeID();
                    case "Type": return GetConcreteTypeOfAccountProduct_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAccountProductType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAccountStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfAccountType_StoreID();
                    case "Store": return GetConcreteTypeOfAccountType_Store();
                    case "TranslationKey": return GetConcreteTypeOfAccountType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountUsageBalanceModel)))
            {
                switch (property)
                {
                    case "Master": return GetConcreteTypeOfAccountUsageBalance_Master();
                    case "MasterID": return GetConcreteTypeOfAccountUsageBalance_MasterID();
                    case "SlaveID": return GetConcreteTypeOfAccountUsageBalance_SlaveID();
                    case "Slave": return GetConcreteTypeOfAccountUsageBalance_Slave();
                    case "Quantity": return GetConcreteTypeOfAccountUsageBalance_Quantity();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Advertising
            if (type.GetInterfaces().Any(x => x == typeof(IAdModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfAd_TypeID();
                    case "Type": return GetConcreteTypeOfAd_Type();
                    case "StatusID": return GetConcreteTypeOfAd_StatusID();
                    case "Status": return GetConcreteTypeOfAd_Status();
                    case "Images": return GetConcreteTypeOfAd_Images();
                    case "Brands": return GetConcreteTypeOfAd_Brands();
                    case "Stores": return GetConcreteTypeOfAd_Stores();
                    case "Accounts": return GetConcreteTypeOfAd_Accounts();
                    case "TargetURL": return GetConcreteTypeOfAd_TargetURL();
                    case "Caption": return GetConcreteTypeOfAd_Caption();
                    case "StartDate": return GetConcreteTypeOfAd_StartDate();
                    case "EndDate": return GetConcreteTypeOfAd_EndDate();
                    case "ExpirationDate": return GetConcreteTypeOfAd_ExpirationDate();
                    case "Weight": return GetConcreteTypeOfAd_Weight();
                    case "ImpressionCounterID": return GetConcreteTypeOfAd_ImpressionCounterID();
                    case "ImpressionCounter": return GetConcreteTypeOfAd_ImpressionCounter();
                    case "ClickCounterID": return GetConcreteTypeOfAd_ClickCounterID();
                    case "ClickCounter": return GetConcreteTypeOfAd_ClickCounter();
                    case "AdZones": return GetConcreteTypeOfAd_AdZones();
                    case "CampaignAds": return GetConcreteTypeOfAd_CampaignAds();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAdAccount_MasterID();
                    case "Master": return GetConcreteTypeOfAdAccount_Master();
                    case "SlaveID": return GetConcreteTypeOfAdAccount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAdAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAdBrand_MasterID();
                    case "Master": return GetConcreteTypeOfAdBrand_Master();
                    case "SlaveID": return GetConcreteTypeOfAdBrand_SlaveID();
                    case "Slave": return GetConcreteTypeOfAdBrand_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAdImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfAdImage_TypeID();
                    case "Type": return GetConcreteTypeOfAdImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfAdImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfAdImage_Author();
                    case "MediaDate": return GetConcreteTypeOfAdImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfAdImage_Copyright();
                    case "Location": return GetConcreteTypeOfAdImage_Location();
                    case "Latitude": return GetConcreteTypeOfAdImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfAdImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfAdImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfAdImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfAdImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfAdImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfAdImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfAdImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfAdImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfAdImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfAdImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfAdImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfAdImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfAdImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfAdImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAdImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAdStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAdStore_MasterID();
                    case "Master": return GetConcreteTypeOfAdStore_Master();
                    case "SlaveID": return GetConcreteTypeOfAdStore_SlaveID();
                    case "Slave": return GetConcreteTypeOfAdStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAdType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdZoneModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAdZone_MasterID();
                    case "Master": return GetConcreteTypeOfAdZone_Master();
                    case "SlaveID": return GetConcreteTypeOfAdZone_SlaveID();
                    case "Slave": return GetConcreteTypeOfAdZone_Slave();
                    case "ImpressionCounterID": return GetConcreteTypeOfAdZone_ImpressionCounterID();
                    case "ImpressionCounter": return GetConcreteTypeOfAdZone_ImpressionCounter();
                    case "ClickCounterID": return GetConcreteTypeOfAdZone_ClickCounterID();
                    case "ClickCounter": return GetConcreteTypeOfAdZone_ClickCounter();
                    case "AdZoneAccessID": return GetConcreteTypeOfAdZone_AdZoneAccessID();
                    case "AdZoneAccess": return GetConcreteTypeOfAdZone_AdZoneAccess();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdZoneAccessModel)))
            {
                switch (property)
                {
                    case "ImpressionCounterID": return GetConcreteTypeOfAdZoneAccess_ImpressionCounterID();
                    case "ImpressionCounter": return GetConcreteTypeOfAdZoneAccess_ImpressionCounter();
                    case "ClickCounterID": return GetConcreteTypeOfAdZoneAccess_ClickCounterID();
                    case "ClickCounter": return GetConcreteTypeOfAdZoneAccess_ClickCounter();
                    case "StartDate": return GetConcreteTypeOfAdZoneAccess_StartDate();
                    case "EndDate": return GetConcreteTypeOfAdZoneAccess_EndDate();
                    case "UniqueAdLimit": return GetConcreteTypeOfAdZoneAccess_UniqueAdLimit();
                    case "ImpressionLimit": return GetConcreteTypeOfAdZoneAccess_ImpressionLimit();
                    case "ClickLimit": return GetConcreteTypeOfAdZoneAccess_ClickLimit();
                    case "ZoneID": return GetConcreteTypeOfAdZoneAccess_ZoneID();
                    case "Zone": return GetConcreteTypeOfAdZoneAccess_Zone();
                    case "SubscriptionID": return GetConcreteTypeOfAdZoneAccess_SubscriptionID();
                    case "Subscription": return GetConcreteTypeOfAdZoneAccess_Subscription();
                    case "AdZones": return GetConcreteTypeOfAdZoneAccess_AdZones();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IZoneModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfZone_TypeID();
                    case "Type": return GetConcreteTypeOfZone_Type();
                    case "StatusID": return GetConcreteTypeOfZone_StatusID();
                    case "Status": return GetConcreteTypeOfZone_Status();
                    case "Width": return GetConcreteTypeOfZone_Width();
                    case "Height": return GetConcreteTypeOfZone_Height();
                    case "AdZones": return GetConcreteTypeOfZone_AdZones();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfZoneStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfZoneType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Attributes
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeGroupModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAttributeGroup_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeTabModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfAttributeTab_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeTypeModel)))
            {
                switch (property)
                {
                    case "GeneralAttributes": return GetConcreteTypeOfAttributeType_GeneralAttributes();
                    case "TranslationKey": return GetConcreteTypeOfAttributeType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGeneralAttributeModel)))
            {
                switch (property)
                {
                    case "IsFilter": return GetConcreteTypeOfGeneralAttribute_IsFilter();
                    case "IsComparable": return GetConcreteTypeOfGeneralAttribute_IsComparable();
                    case "IsPredefined": return GetConcreteTypeOfGeneralAttribute_IsPredefined();
                    case "IsMarkup": return GetConcreteTypeOfGeneralAttribute_IsMarkup();
                    case "IsTab": return GetConcreteTypeOfGeneralAttribute_IsTab();
                    case "HideFromStorefront": return GetConcreteTypeOfGeneralAttribute_HideFromStorefront();
                    case "HideFromSuppliers": return GetConcreteTypeOfGeneralAttribute_HideFromSuppliers();
                    case "HideFromProductDetailView": return GetConcreteTypeOfGeneralAttribute_HideFromProductDetailView();
                    case "HideFromCatalogViews": return GetConcreteTypeOfGeneralAttribute_HideFromCatalogViews();
                    case "TypeID": return GetConcreteTypeOfGeneralAttribute_TypeID();
                    case "Type": return GetConcreteTypeOfGeneralAttribute_Type();
                    case "AttributeTabID": return GetConcreteTypeOfGeneralAttribute_AttributeTabID();
                    case "AttributeTab": return GetConcreteTypeOfGeneralAttribute_AttributeTab();
                    case "AttributeGroupID": return GetConcreteTypeOfGeneralAttribute_AttributeGroupID();
                    case "AttributeGroup": return GetConcreteTypeOfGeneralAttribute_AttributeGroup();
                    case "TranslationKey": return GetConcreteTypeOfGeneralAttribute_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGeneralAttributePredefinedOptionModel)))
            {
                switch (property)
                {
                    case "Value": return GetConcreteTypeOfGeneralAttributePredefinedOption_Value();
                    case "UofM": return GetConcreteTypeOfGeneralAttributePredefinedOption_UofM();
                    case "AttributeID": return GetConcreteTypeOfGeneralAttributePredefinedOption_AttributeID();
                    case "Attribute": return GetConcreteTypeOfGeneralAttributePredefinedOption_Attribute();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Badges
            if (type.GetInterfaces().Any(x => x == typeof(IBadgeModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfBadge_TypeID();
                    case "Type": return GetConcreteTypeOfBadge_Type();
                    case "Images": return GetConcreteTypeOfBadge_Images();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBadgeImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBadgeImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfBadgeImage_TypeID();
                    case "Type": return GetConcreteTypeOfBadgeImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfBadgeImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfBadgeImage_Author();
                    case "MediaDate": return GetConcreteTypeOfBadgeImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfBadgeImage_Copyright();
                    case "Location": return GetConcreteTypeOfBadgeImage_Location();
                    case "Latitude": return GetConcreteTypeOfBadgeImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfBadgeImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfBadgeImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfBadgeImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfBadgeImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfBadgeImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfBadgeImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfBadgeImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfBadgeImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfBadgeImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfBadgeImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfBadgeImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfBadgeImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfBadgeImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfBadgeImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfBadgeImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfBadgeType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Brands
            if (type.GetInterfaces().Any(x => x == typeof(IBrandModel)))
            {
                switch (property)
                {
                    case "Notes": return GetConcreteTypeOfBrand_Notes();
                    case "Images": return GetConcreteTypeOfBrand_Images();
                    case "MinimumOrderDollarAmount": return GetConcreteTypeOfBrand_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetConcreteTypeOfBrand_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetConcreteTypeOfBrand_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetConcreteTypeOfBrand_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetConcreteTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Accounts": return GetConcreteTypeOfBrand_Accounts();
                    case "Users": return GetConcreteTypeOfBrand_Users();
                    case "Categories": return GetConcreteTypeOfBrand_Categories();
                    case "Stores": return GetConcreteTypeOfBrand_Stores();
                    case "BrandCurrencies": return GetConcreteTypeOfBrand_BrandCurrencies();
                    case "BrandInventoryLocations": return GetConcreteTypeOfBrand_BrandInventoryLocations();
                    case "BrandLanguages": return GetConcreteTypeOfBrand_BrandLanguages();
                    case "BrandSiteDomains": return GetConcreteTypeOfBrand_BrandSiteDomains();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandAccount_MasterID();
                    case "Master": return GetConcreteTypeOfBrandAccount_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandAccount_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandAccount_Slave();
                    case "HasAccessToBrand": return GetConcreteTypeOfBrandAccount_HasAccessToBrand();
                    case "PricePointID": return GetConcreteTypeOfBrandAccount_PricePointID();
                    case "PricePoint": return GetConcreteTypeOfBrandAccount_PricePoint();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandCategory_MasterID();
                    case "Master": return GetConcreteTypeOfBrandCategory_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandCategory_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandCurrency_MasterID();
                    case "Master": return GetConcreteTypeOfBrandCurrency_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandCurrency_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandCurrency_Slave();
                    case "IsPrimary": return GetConcreteTypeOfBrandCurrency_IsPrimary();
                    case "CustomName": return GetConcreteTypeOfBrandCurrency_CustomName();
                    case "CustomTranslationKey": return GetConcreteTypeOfBrandCurrency_CustomTranslationKey();
                    case "OverrideUnicodeSymbolValue": return GetConcreteTypeOfBrandCurrency_OverrideUnicodeSymbolValue();
                    case "OverrideHtmlCharacterCode": return GetConcreteTypeOfBrandCurrency_OverrideHtmlCharacterCode();
                    case "OverrideRawCharacter": return GetConcreteTypeOfBrandCurrency_OverrideRawCharacter();
                    case "OverrideDecimalPlaceAccuracy": return GetConcreteTypeOfBrandCurrency_OverrideDecimalPlaceAccuracy();
                    case "OverrideUseSeparator": return GetConcreteTypeOfBrandCurrency_OverrideUseSeparator();
                    case "OverrideRawDecimalCharacter": return GetConcreteTypeOfBrandCurrency_OverrideRawDecimalCharacter();
                    case "OverrideHtmlDecimalCharacterCode": return GetConcreteTypeOfBrandCurrency_OverrideHtmlDecimalCharacterCode();
                    case "OverrideRawSeparatorCharacter": return GetConcreteTypeOfBrandCurrency_OverrideRawSeparatorCharacter();
                    case "OverrideHtmlSeparatorCharacterCode": return GetConcreteTypeOfBrandCurrency_OverrideHtmlSeparatorCharacterCode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfBrandImage_TypeID();
                    case "Type": return GetConcreteTypeOfBrandImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfBrandImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfBrandImage_Author();
                    case "MediaDate": return GetConcreteTypeOfBrandImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfBrandImage_Copyright();
                    case "Location": return GetConcreteTypeOfBrandImage_Location();
                    case "Latitude": return GetConcreteTypeOfBrandImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfBrandImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfBrandImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfBrandImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfBrandImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfBrandImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfBrandImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfBrandImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfBrandImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfBrandImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfBrandImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfBrandImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfBrandImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfBrandImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfBrandImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfBrandImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandInventoryLocationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandInventoryLocation_MasterID();
                    case "Master": return GetConcreteTypeOfBrandInventoryLocation_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandInventoryLocation_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandInventoryLocation_Slave();
                    case "TypeID": return GetConcreteTypeOfBrandInventoryLocation_TypeID();
                    case "Type": return GetConcreteTypeOfBrandInventoryLocation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfBrandInventoryLocationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandLanguage_MasterID();
                    case "Master": return GetConcreteTypeOfBrandLanguage_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandLanguage_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandLanguage_Slave();
                    case "OverrideLocale": return GetConcreteTypeOfBrandLanguage_OverrideLocale();
                    case "OverrideUnicodeName": return GetConcreteTypeOfBrandLanguage_OverrideUnicodeName();
                    case "OverrideISO639_1_2002": return GetConcreteTypeOfBrandLanguage_OverrideISO639_1_2002();
                    case "OverrideISO639_2_1998": return GetConcreteTypeOfBrandLanguage_OverrideISO639_2_1998();
                    case "OverrideISO639_3_2007": return GetConcreteTypeOfBrandLanguage_OverrideISO639_3_2007();
                    case "OverrideISO639_5_2008": return GetConcreteTypeOfBrandLanguage_OverrideISO639_5_2008();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandProduct_MasterID();
                    case "Master": return GetConcreteTypeOfBrandProduct_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandProduct_Slave();
                    case "IsVisibleInBrand": return GetConcreteTypeOfBrandProduct_IsVisibleInBrand();
                    case "PriceBase": return GetConcreteTypeOfBrandProduct_PriceBase();
                    case "PriceMsrp": return GetConcreteTypeOfBrandProduct_PriceMsrp();
                    case "PriceReduction": return GetConcreteTypeOfBrandProduct_PriceReduction();
                    case "PriceSale": return GetConcreteTypeOfBrandProduct_PriceSale();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandSiteDomainModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandSiteDomain_MasterID();
                    case "Master": return GetConcreteTypeOfBrandSiteDomain_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandSiteDomain_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandSiteDomain_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandStore_MasterID();
                    case "Master": return GetConcreteTypeOfBrandStore_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandStore_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfBrandUser_MasterID();
                    case "Master": return GetConcreteTypeOfBrandUser_Master();
                    case "SlaveID": return GetConcreteTypeOfBrandUser_SlaveID();
                    case "Slave": return GetConcreteTypeOfBrandUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region CalendarEvents
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfCalendarEvent_TypeID();
                    case "Type": return GetConcreteTypeOfCalendarEvent_Type();
                    case "StatusID": return GetConcreteTypeOfCalendarEvent_StatusID();
                    case "Status": return GetConcreteTypeOfCalendarEvent_Status();
                    case "ContactID": return GetConcreteTypeOfCalendarEvent_ContactID();
                    case "Contact": return GetConcreteTypeOfCalendarEvent_Contact();
                    case "Images": return GetConcreteTypeOfCalendarEvent_Images();
                    case "StoredFiles": return GetConcreteTypeOfCalendarEvent_StoredFiles();
                    case "Products": return GetConcreteTypeOfCalendarEvent_Products();
                    case "ShortDescription": return GetConcreteTypeOfCalendarEvent_ShortDescription();
                    case "EventDurationUnitOfMeasure": return GetConcreteTypeOfCalendarEvent_EventDurationUnitOfMeasure();
                    case "RecurrenceString": return GetConcreteTypeOfCalendarEvent_RecurrenceString();
                    case "StartDate": return GetConcreteTypeOfCalendarEvent_StartDate();
                    case "EndDate": return GetConcreteTypeOfCalendarEvent_EndDate();
                    case "EventDuration": return GetConcreteTypeOfCalendarEvent_EventDuration();
                    case "MaxAttendees": return GetConcreteTypeOfCalendarEvent_MaxAttendees();
                    case "GroupID": return GetConcreteTypeOfCalendarEvent_GroupID();
                    case "Group": return GetConcreteTypeOfCalendarEvent_Group();
                    case "CalendarEventDetails": return GetConcreteTypeOfCalendarEvent_CalendarEventDetails();
                    case "UserEventAttendances": return GetConcreteTypeOfCalendarEvent_UserEventAttendances();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventDetailModel)))
            {
                switch (property)
                {
                    case "Day": return GetConcreteTypeOfCalendarEventDetail_Day();
                    case "StartTime": return GetConcreteTypeOfCalendarEventDetail_StartTime();
                    case "EndTime": return GetConcreteTypeOfCalendarEventDetail_EndTime();
                    case "Location": return GetConcreteTypeOfCalendarEventDetail_Location();
                    case "CalendarEventID": return GetConcreteTypeOfCalendarEventDetail_CalendarEventID();
                    case "CalendarEvent": return GetConcreteTypeOfCalendarEventDetail_CalendarEvent();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCalendarEventFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfCalendarEventFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfCalendarEventFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfCalendarEventFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCalendarEventImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfCalendarEventImage_TypeID();
                    case "Type": return GetConcreteTypeOfCalendarEventImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfCalendarEventImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfCalendarEventImage_Author();
                    case "MediaDate": return GetConcreteTypeOfCalendarEventImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfCalendarEventImage_Copyright();
                    case "Location": return GetConcreteTypeOfCalendarEventImage_Location();
                    case "Latitude": return GetConcreteTypeOfCalendarEventImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfCalendarEventImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfCalendarEventImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfCalendarEventImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfCalendarEventImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfCalendarEventImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfCalendarEventImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfCalendarEventImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfCalendarEventImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfCalendarEventImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfCalendarEventImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfCalendarEventImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfCalendarEventImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfCalendarEventImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfCalendarEventImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCalendarEventImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCalendarEventProduct_MasterID();
                    case "Master": return GetConcreteTypeOfCalendarEventProduct_Master();
                    case "SlaveID": return GetConcreteTypeOfCalendarEventProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfCalendarEventProduct_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCalendarEventStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCalendarEventType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserEventAttendanceModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfUserEventAttendance_TypeID();
                    case "Type": return GetConcreteTypeOfUserEventAttendance_Type();
                    case "MasterID": return GetConcreteTypeOfUserEventAttendance_MasterID();
                    case "Master": return GetConcreteTypeOfUserEventAttendance_Master();
                    case "SlaveID": return GetConcreteTypeOfUserEventAttendance_SlaveID();
                    case "Slave": return GetConcreteTypeOfUserEventAttendance_Slave();
                    case "HasAttended": return GetConcreteTypeOfUserEventAttendance_HasAttended();
                    case "Date": return GetConcreteTypeOfUserEventAttendance_Date();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfUserEventAttendanceType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Categories
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryModel)))
            {
                switch (property)
                {
                    case "ParentID": return GetConcreteTypeOfCategory_ParentID();
                    case "Parent": return GetConcreteTypeOfCategory_Parent();
                    case "Children": return GetConcreteTypeOfCategory_Children();
                    case "MinimumOrderDollarAmount": return GetConcreteTypeOfCategory_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetConcreteTypeOfCategory_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetConcreteTypeOfCategory_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetConcreteTypeOfCategory_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetConcreteTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "TypeID": return GetConcreteTypeOfCategory_TypeID();
                    case "Type": return GetConcreteTypeOfCategory_Type();
                    case "Brands": return GetConcreteTypeOfCategory_Brands();
                    case "RequiresRoles": return GetConcreteTypeOfCategory_RequiresRoles();
                    case "RequiresRolesList": return GetConcreteTypeOfCategory_RequiresRolesList();
                    case "RequiresRolesAlt": return GetConcreteTypeOfCategory_RequiresRolesAlt();
                    case "RequiresRolesListAlt": return GetConcreteTypeOfCategory_RequiresRolesListAlt();
                    case "Reviews": return GetConcreteTypeOfCategory_Reviews();
                    case "Images": return GetConcreteTypeOfCategory_Images();
                    case "StoredFiles": return GetConcreteTypeOfCategory_StoredFiles();
                    case "IsVisible": return GetConcreteTypeOfCategory_IsVisible();
                    case "IncludeInMenu": return GetConcreteTypeOfCategory_IncludeInMenu();
                    case "HeaderContent": return GetConcreteTypeOfCategory_HeaderContent();
                    case "SidebarContent": return GetConcreteTypeOfCategory_SidebarContent();
                    case "FooterContent": return GetConcreteTypeOfCategory_FooterContent();
                    case "HandlingCharge": return GetConcreteTypeOfCategory_HandlingCharge();
                    case "RestockingFeePercent": return GetConcreteTypeOfCategory_RestockingFeePercent();
                    case "RestockingFeeAmount": return GetConcreteTypeOfCategory_RestockingFeeAmount();
                    case "RestockingFeeAmountCurrencyID": return GetConcreteTypeOfCategory_RestockingFeeAmountCurrencyID();
                    case "RestockingFeeAmountCurrency": return GetConcreteTypeOfCategory_RestockingFeeAmountCurrency();
                    case "ProductCategories": return GetConcreteTypeOfCategory_ProductCategories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCategoryFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfCategoryFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfCategoryFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfCategoryFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCategoryImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfCategoryImage_TypeID();
                    case "Type": return GetConcreteTypeOfCategoryImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfCategoryImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfCategoryImage_Author();
                    case "MediaDate": return GetConcreteTypeOfCategoryImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfCategoryImage_Copyright();
                    case "Location": return GetConcreteTypeOfCategoryImage_Location();
                    case "Latitude": return GetConcreteTypeOfCategoryImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfCategoryImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfCategoryImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfCategoryImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfCategoryImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfCategoryImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfCategoryImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfCategoryImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfCategoryImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfCategoryImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfCategoryImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfCategoryImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfCategoryImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfCategoryImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfCategoryImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCategoryImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCategoryType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Contacts
            if (type.GetInterfaces().Any(x => x == typeof(IContactModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfContact_TypeID();
                    case "Type": return GetConcreteTypeOfContact_Type();
                    case "Images": return GetConcreteTypeOfContact_Images();
                    case "FirstName": return GetConcreteTypeOfContact_FirstName();
                    case "MiddleName": return GetConcreteTypeOfContact_MiddleName();
                    case "LastName": return GetConcreteTypeOfContact_LastName();
                    case "FullName": return GetConcreteTypeOfContact_FullName();
                    case "Phone1": return GetConcreteTypeOfContact_Phone1();
                    case "Phone2": return GetConcreteTypeOfContact_Phone2();
                    case "Phone3": return GetConcreteTypeOfContact_Phone3();
                    case "Fax1": return GetConcreteTypeOfContact_Fax1();
                    case "Email1": return GetConcreteTypeOfContact_Email1();
                    case "Website1": return GetConcreteTypeOfContact_Website1();
                    case "AddressID": return GetConcreteTypeOfContact_AddressID();
                    case "Address": return GetConcreteTypeOfContact_Address();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IContactImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfContactImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfContactImage_TypeID();
                    case "Type": return GetConcreteTypeOfContactImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfContactImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfContactImage_Author();
                    case "MediaDate": return GetConcreteTypeOfContactImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfContactImage_Copyright();
                    case "Location": return GetConcreteTypeOfContactImage_Location();
                    case "Latitude": return GetConcreteTypeOfContactImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfContactImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfContactImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfContactImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfContactImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfContactImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfContactImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfContactImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfContactImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfContactImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfContactImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfContactImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfContactImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfContactImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfContactImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfContactImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfContactType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProfanityFilterModel)))
            {
                switch (property)
                {
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IReferralCodeModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfReferralCode_TypeID();
                    case "Type": return GetConcreteTypeOfReferralCode_Type();
                    case "StatusID": return GetConcreteTypeOfReferralCode_StatusID();
                    case "Status": return GetConcreteTypeOfReferralCode_Status();
                    case "Code": return GetConcreteTypeOfReferralCode_Code();
                    case "UserID": return GetConcreteTypeOfReferralCode_UserID();
                    case "User": return GetConcreteTypeOfReferralCode_User();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfReferralCodeStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfReferralCodeType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfUser_TypeID();
                    case "Type": return GetConcreteTypeOfUser_Type();
                    case "StatusID": return GetConcreteTypeOfUser_StatusID();
                    case "Status": return GetConcreteTypeOfUser_Status();
                    case "ContactID": return GetConcreteTypeOfUser_ContactID();
                    case "Contact": return GetConcreteTypeOfUser_Contact();
                    case "Brands": return GetConcreteTypeOfUser_Brands();
                    case "Stores": return GetConcreteTypeOfUser_Stores();
                    case "Images": return GetConcreteTypeOfUser_Images();
                    case "StoredFiles": return GetConcreteTypeOfUser_StoredFiles();
                    case "UserName": return GetConcreteTypeOfUser_UserName();
                    case "SecurityStamp": return GetConcreteTypeOfUser_SecurityStamp();
                    case "PhoneNumber": return GetConcreteTypeOfUser_PhoneNumber();
                    case "LockoutEndDateUtc": return GetConcreteTypeOfUser_LockoutEndDateUtc();
                    case "IsApproved": return GetConcreteTypeOfUser_IsApproved();
                    case "RequirePasswordChangeOnNextLogin": return GetConcreteTypeOfUser_RequirePasswordChangeOnNextLogin();
                    case "AccountID": return GetConcreteTypeOfUser_AccountID();
                    case "Account": return GetConcreteTypeOfUser_Account();
                    case "PreferredStoreID": return GetConcreteTypeOfUser_PreferredStoreID();
                    case "PreferredStore": return GetConcreteTypeOfUser_PreferredStore();
                    case "CurrencyID": return GetConcreteTypeOfUser_CurrencyID();
                    case "Currency": return GetConcreteTypeOfUser_Currency();
                    case "LanguageID": return GetConcreteTypeOfUser_LanguageID();
                    case "Language": return GetConcreteTypeOfUser_Language();
                    case "UserOnlineStatusID": return GetConcreteTypeOfUser_UserOnlineStatusID();
                    case "UserOnlineStatus": return GetConcreteTypeOfUser_UserOnlineStatus();
                    case "FavoriteCategories": return GetConcreteTypeOfUser_FavoriteCategories();
                    case "FavoriteVendors": return GetConcreteTypeOfUser_FavoriteVendors();
                    case "FavoriteManufacturers": return GetConcreteTypeOfUser_FavoriteManufacturers();
                    case "FavoriteStores": return GetConcreteTypeOfUser_FavoriteStores();
                    case "ReferralCodes": return GetConcreteTypeOfUser_ReferralCodes();
                    case "UserProductTypes": return GetConcreteTypeOfUser_UserProductTypes();
                    case "EmailConfirmed": return GetConcreteTypeOfUser_EmailConfirmed();
                    case "PhoneNumberConfirmed": return GetConcreteTypeOfUser_PhoneNumberConfirmed();
                    case "TwoFactorEnabled": return GetConcreteTypeOfUser_TwoFactorEnabled();
                    case "LockoutEnabled": return GetConcreteTypeOfUser_LockoutEnabled();
                    case "AccessFailedCount": return GetConcreteTypeOfUser_AccessFailedCount();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfUserFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfUserFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfUserFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfUserFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfUserImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfUserImage_TypeID();
                    case "Type": return GetConcreteTypeOfUserImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfUserImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfUserImage_Author();
                    case "MediaDate": return GetConcreteTypeOfUserImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfUserImage_Copyright();
                    case "Location": return GetConcreteTypeOfUserImage_Location();
                    case "Latitude": return GetConcreteTypeOfUserImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfUserImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfUserImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfUserImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfUserImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfUserImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfUserImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfUserImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfUserImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfUserImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfUserImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfUserImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfUserImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfUserImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfUserImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfUserImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfUserOnlineStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfUserProductType_MasterID();
                    case "Master": return GetConcreteTypeOfUserProductType_Master();
                    case "SlaveID": return GetConcreteTypeOfUserProductType_SlaveID();
                    case "Slave": return GetConcreteTypeOfUserProductType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfUserStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfUserType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Counters
            if (type.GetInterfaces().Any(x => x == typeof(ICounterModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfCounter_TypeID();
                    case "Type": return GetConcreteTypeOfCounter_Type();
                    case "Value": return GetConcreteTypeOfCounter_Value();
                    case "CounterLogs": return GetConcreteTypeOfCounter_CounterLogs();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICounterLogModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfCounterLog_TypeID();
                    case "Type": return GetConcreteTypeOfCounterLog_Type();
                    case "Value": return GetConcreteTypeOfCounterLog_Value();
                    case "CounterID": return GetConcreteTypeOfCounterLog_CounterID();
                    case "Counter": return GetConcreteTypeOfCounterLog_Counter();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCounterLogType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCounterType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Currencies
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyModel)))
            {
                switch (property)
                {
                    case "Images": return GetConcreteTypeOfCurrency_Images();
                    case "ISO4217Alpha": return GetConcreteTypeOfCurrency_ISO4217Alpha();
                    case "ISO4217Numeric": return GetConcreteTypeOfCurrency_ISO4217Numeric();
                    case "UnicodeSymbolValue": return GetConcreteTypeOfCurrency_UnicodeSymbolValue();
                    case "HtmlCharacterCode": return GetConcreteTypeOfCurrency_HtmlCharacterCode();
                    case "RawCharacter": return GetConcreteTypeOfCurrency_RawCharacter();
                    case "DecimalPlaceAccuracy": return GetConcreteTypeOfCurrency_DecimalPlaceAccuracy();
                    case "UseSeparator": return GetConcreteTypeOfCurrency_UseSeparator();
                    case "RawDecimalCharacter": return GetConcreteTypeOfCurrency_RawDecimalCharacter();
                    case "HtmlDecimalCharacterCode": return GetConcreteTypeOfCurrency_HtmlDecimalCharacterCode();
                    case "RawSeparatorCharacter": return GetConcreteTypeOfCurrency_RawSeparatorCharacter();
                    case "HtmlSeparatorCharacterCode": return GetConcreteTypeOfCurrency_HtmlSeparatorCharacterCode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyConversionModel)))
            {
                switch (property)
                {
                    case "Rate": return GetConcreteTypeOfCurrencyConversion_Rate();
                    case "StartDate": return GetConcreteTypeOfCurrencyConversion_StartDate();
                    case "EndDate": return GetConcreteTypeOfCurrencyConversion_EndDate();
                    case "StartingCurrencyID": return GetConcreteTypeOfCurrencyConversion_StartingCurrencyID();
                    case "StartingCurrency": return GetConcreteTypeOfCurrencyConversion_StartingCurrency();
                    case "EndingCurrencyID": return GetConcreteTypeOfCurrencyConversion_EndingCurrencyID();
                    case "EndingCurrency": return GetConcreteTypeOfCurrencyConversion_EndingCurrency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCurrencyImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfCurrencyImage_TypeID();
                    case "Type": return GetConcreteTypeOfCurrencyImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfCurrencyImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfCurrencyImage_Author();
                    case "MediaDate": return GetConcreteTypeOfCurrencyImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfCurrencyImage_Copyright();
                    case "Location": return GetConcreteTypeOfCurrencyImage_Location();
                    case "Latitude": return GetConcreteTypeOfCurrencyImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfCurrencyImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfCurrencyImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfCurrencyImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfCurrencyImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfCurrencyImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfCurrencyImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfCurrencyImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfCurrencyImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfCurrencyImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfCurrencyImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfCurrencyImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfCurrencyImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfCurrencyImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfCurrencyImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCurrencyImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalCurrencyRateModel)))
            {
                switch (property)
                {
                    case "Rate": return GetConcreteTypeOfHistoricalCurrencyRate_Rate();
                    case "OnDate": return GetConcreteTypeOfHistoricalCurrencyRate_OnDate();
                    case "StartingCurrencyID": return GetConcreteTypeOfHistoricalCurrencyRate_StartingCurrencyID();
                    case "StartingCurrency": return GetConcreteTypeOfHistoricalCurrencyRate_StartingCurrency();
                    case "EndingCurrencyID": return GetConcreteTypeOfHistoricalCurrencyRate_EndingCurrencyID();
                    case "EndingCurrency": return GetConcreteTypeOfHistoricalCurrencyRate_EndingCurrency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Discounts
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedCartDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedCartDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedCartDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedCartDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedCartDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedCartDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedCartItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedCartItemDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedCartItemDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedCartItemDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedCartItemDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedCartItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountModel)))
            {
                switch (property)
                {
                    case "UsageLimitByUser": return GetConcreteTypeOfDiscount_UsageLimitByUser();
                    case "CanCombine": return GetConcreteTypeOfDiscount_CanCombine();
                    case "IsAutoApplied": return GetConcreteTypeOfDiscount_IsAutoApplied();
                    case "Value": return GetConcreteTypeOfDiscount_Value();
                    case "ThresholdAmount": return GetConcreteTypeOfDiscount_ThresholdAmount();
                    case "BuyXValue": return GetConcreteTypeOfDiscount_BuyXValue();
                    case "GetYValue": return GetConcreteTypeOfDiscount_GetYValue();
                    case "RoundingOperation": return GetConcreteTypeOfDiscount_RoundingOperation();
                    case "UsageLimit": return GetConcreteTypeOfDiscount_UsageLimit();
                    case "DiscountCompareOperator": return GetConcreteTypeOfDiscount_DiscountCompareOperator();
                    case "DiscountTypeID": return GetConcreteTypeOfDiscount_DiscountTypeID();
                    case "ValueType": return GetConcreteTypeOfDiscount_ValueType();
                    case "RoundingType": return GetConcreteTypeOfDiscount_RoundingType();
                    case "Priority": return GetConcreteTypeOfDiscount_Priority();
                    case "StartDate": return GetConcreteTypeOfDiscount_StartDate();
                    case "EndDate": return GetConcreteTypeOfDiscount_EndDate();
                    case "Products": return GetConcreteTypeOfDiscount_Products();
                    case "Brands": return GetConcreteTypeOfDiscount_Brands();
                    case "Stores": return GetConcreteTypeOfDiscount_Stores();
                    case "Accounts": return GetConcreteTypeOfDiscount_Accounts();
                    case "Users": return GetConcreteTypeOfDiscount_Users();
                    case "Vendors": return GetConcreteTypeOfDiscount_Vendors();
                    case "Manufacturers": return GetConcreteTypeOfDiscount_Manufacturers();
                    case "Codes": return GetConcreteTypeOfDiscount_Codes();
                    case "Countries": return GetConcreteTypeOfDiscount_Countries();
                    case "UserRoles": return GetConcreteTypeOfDiscount_UserRoles();
                    case "Categories": return GetConcreteTypeOfDiscount_Categories();
                    case "AccountTypes": return GetConcreteTypeOfDiscount_AccountTypes();
                    case "ProductTypes": return GetConcreteTypeOfDiscount_ProductTypes();
                    case "ShipCarrierMethods": return GetConcreteTypeOfDiscount_ShipCarrierMethods();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountAccount_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountAccount_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountAccount_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountAccountTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountAccountType_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountAccountType_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountAccountType_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountAccountType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountBrand_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountBrand_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountBrand_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountBrand_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountCategory_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountCategory_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountCategory_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCodeModel)))
            {
                switch (property)
                {
                    case "Code": return GetConcreteTypeOfDiscountCode_Code();
                    case "DiscountID": return GetConcreteTypeOfDiscountCode_DiscountID();
                    case "UserID": return GetConcreteTypeOfDiscountCode_UserID();
                    case "User": return GetConcreteTypeOfDiscountCode_User();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCountryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountCountry_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountCountry_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountCountry_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountCountry_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountManufacturer_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountManufacturer_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountManufacturer_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountProduct_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountProduct_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountProduct_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountProductType_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountProductType_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountProductType_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountProductType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountShipCarrierMethod_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountShipCarrierMethod_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountShipCarrierMethod_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountShipCarrierMethod_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountStore_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountStore_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountStore_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountUser_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountUser_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountUser_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountUserRoleModel)))
            {
                switch (property)
                {
                    case "RoleName": return GetConcreteTypeOfDiscountUserRole_RoleName();
                    case "MasterID": return GetConcreteTypeOfDiscountUserRole_MasterID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfDiscountVendor_MasterID();
                    case "Master": return GetConcreteTypeOfDiscountVendor_Master();
                    case "SlaveID": return GetConcreteTypeOfDiscountVendor_SlaveID();
                    case "Slave": return GetConcreteTypeOfDiscountVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedPurchaseOrderDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedPurchaseOrderDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedPurchaseOrderDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedPurchaseOrderDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedPurchaseOrderDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedPurchaseOrderDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedPurchaseOrderItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedPurchaseOrderItemDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedPurchaseOrderItemDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedPurchaseOrderItemDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedPurchaseOrderItemDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedPurchaseOrderItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesInvoiceDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesInvoiceDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesInvoiceDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesInvoiceDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesInvoiceDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesInvoiceDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesInvoiceItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesInvoiceItemDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesInvoiceItemDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesInvoiceItemDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesInvoiceItemDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesInvoiceItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesOrderDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesOrderDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesOrderDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesOrderDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesOrderDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesOrderDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesOrderItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesOrderItemDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesOrderItemDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesOrderItemDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesOrderItemDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesOrderItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesQuoteDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesQuoteDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesQuoteDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesQuoteDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesQuoteDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesQuoteDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesQuoteItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesQuoteItemDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesQuoteItemDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesQuoteItemDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesQuoteItemDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesQuoteItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesReturnDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesReturnDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesReturnDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesReturnDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesReturnDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesReturnDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesReturnItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSalesReturnItemDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSalesReturnItemDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSalesReturnItemDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSalesReturnItemDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSalesReturnItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSampleRequestDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSampleRequestDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSampleRequestDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSampleRequestDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSampleRequestDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSampleRequestDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSampleRequestItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfAppliedSampleRequestItemDiscount_MasterID();
                    case "Master": return GetConcreteTypeOfAppliedSampleRequestItemDiscount_Master();
                    case "SlaveID": return GetConcreteTypeOfAppliedSampleRequestItemDiscount_SlaveID();
                    case "Slave": return GetConcreteTypeOfAppliedSampleRequestItemDiscount_Slave();
                    case "DiscountTotal": return GetConcreteTypeOfAppliedSampleRequestItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Favorites
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfFavoriteCategory_MasterID();
                    case "Master": return GetConcreteTypeOfFavoriteCategory_Master();
                    case "SlaveID": return GetConcreteTypeOfFavoriteCategory_SlaveID();
                    case "Slave": return GetConcreteTypeOfFavoriteCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfFavoriteManufacturer_MasterID();
                    case "Master": return GetConcreteTypeOfFavoriteManufacturer_Master();
                    case "SlaveID": return GetConcreteTypeOfFavoriteManufacturer_SlaveID();
                    case "Slave": return GetConcreteTypeOfFavoriteManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteShipCarrierModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfFavoriteShipCarrier_MasterID();
                    case "Master": return GetConcreteTypeOfFavoriteShipCarrier_Master();
                    case "SlaveID": return GetConcreteTypeOfFavoriteShipCarrier_SlaveID();
                    case "Slave": return GetConcreteTypeOfFavoriteShipCarrier_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfFavoriteStore_MasterID();
                    case "Master": return GetConcreteTypeOfFavoriteStore_Master();
                    case "SlaveID": return GetConcreteTypeOfFavoriteStore_SlaveID();
                    case "Slave": return GetConcreteTypeOfFavoriteStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfFavoriteVendor_MasterID();
                    case "Master": return GetConcreteTypeOfFavoriteVendor_Master();
                    case "SlaveID": return GetConcreteTypeOfFavoriteVendor_SlaveID();
                    case "Slave": return GetConcreteTypeOfFavoriteVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Geography
            if (type.GetInterfaces().Any(x => x == typeof(IAddressModel)))
            {
                switch (property)
                {
                    case "Company": return GetConcreteTypeOfAddress_Company();
                    case "Street1": return GetConcreteTypeOfAddress_Street1();
                    case "Street2": return GetConcreteTypeOfAddress_Street2();
                    case "Street3": return GetConcreteTypeOfAddress_Street3();
                    case "City": return GetConcreteTypeOfAddress_City();
                    case "RegionCustom": return GetConcreteTypeOfAddress_RegionCustom();
                    case "CountryCustom": return GetConcreteTypeOfAddress_CountryCustom();
                    case "PostalCode": return GetConcreteTypeOfAddress_PostalCode();
                    case "Latitude": return GetConcreteTypeOfAddress_Latitude();
                    case "Longitude": return GetConcreteTypeOfAddress_Longitude();
                    case "CountryID": return GetConcreteTypeOfAddress_CountryID();
                    case "Country": return GetConcreteTypeOfAddress_Country();
                    case "RegionID": return GetConcreteTypeOfAddress_RegionID();
                    case "Region": return GetConcreteTypeOfAddress_Region();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryModel)))
            {
                switch (property)
                {
                    case "Images": return GetConcreteTypeOfCountry_Images();
                    case "Languages": return GetConcreteTypeOfCountry_Languages();
                    case "Currencies": return GetConcreteTypeOfCountry_Currencies();
                    case "Code": return GetConcreteTypeOfCountry_Code();
                    case "ISO3166Alpha2": return GetConcreteTypeOfCountry_ISO3166Alpha2();
                    case "ISO3166Alpha3": return GetConcreteTypeOfCountry_ISO3166Alpha3();
                    case "ISO3166Numeric": return GetConcreteTypeOfCountry_ISO3166Numeric();
                    case "PhoneRegEx": return GetConcreteTypeOfCountry_PhoneRegEx();
                    case "PhonePrefix": return GetConcreteTypeOfCountry_PhonePrefix();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCountryCurrency_MasterID();
                    case "SlaveID": return GetConcreteTypeOfCountryCurrency_SlaveID();
                    case "Slave": return GetConcreteTypeOfCountryCurrency_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCountryImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfCountryImage_TypeID();
                    case "Type": return GetConcreteTypeOfCountryImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfCountryImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfCountryImage_Author();
                    case "MediaDate": return GetConcreteTypeOfCountryImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfCountryImage_Copyright();
                    case "Location": return GetConcreteTypeOfCountryImage_Location();
                    case "Latitude": return GetConcreteTypeOfCountryImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfCountryImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfCountryImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfCountryImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfCountryImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfCountryImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfCountryImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfCountryImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfCountryImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfCountryImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfCountryImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfCountryImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfCountryImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfCountryImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfCountryImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCountryImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCountryLanguage_MasterID();
                    case "SlaveID": return GetConcreteTypeOfCountryLanguage_SlaveID();
                    case "Slave": return GetConcreteTypeOfCountryLanguage_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalAddressValidationModel)))
            {
                switch (property)
                {
                    case "AddressHash": return GetConcreteTypeOfHistoricalAddressValidation_AddressHash();
                    case "OnDate": return GetConcreteTypeOfHistoricalAddressValidation_OnDate();
                    case "IsValid": return GetConcreteTypeOfHistoricalAddressValidation_IsValid();
                    case "Provider": return GetConcreteTypeOfHistoricalAddressValidation_Provider();
                    case "SerializedRequest": return GetConcreteTypeOfHistoricalAddressValidation_SerializedRequest();
                    case "SerializedResponse": return GetConcreteTypeOfHistoricalAddressValidation_SerializedResponse();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPhonePrefixLookupModel)))
            {
                switch (property)
                {
                    case "Prefix": return GetConcreteTypeOfPhonePrefixLookup_Prefix();
                    case "TimeZone": return GetConcreteTypeOfPhonePrefixLookup_TimeZone();
                    case "CityName": return GetConcreteTypeOfPhonePrefixLookup_CityName();
                    case "CountryID": return GetConcreteTypeOfPhonePrefixLookup_CountryID();
                    case "Country": return GetConcreteTypeOfPhonePrefixLookup_Country();
                    case "RegionID": return GetConcreteTypeOfPhonePrefixLookup_RegionID();
                    case "Region": return GetConcreteTypeOfPhonePrefixLookup_Region();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionModel)))
            {
                switch (property)
                {
                    case "Images": return GetConcreteTypeOfRegion_Images();
                    case "Languages": return GetConcreteTypeOfRegion_Languages();
                    case "Currencies": return GetConcreteTypeOfRegion_Currencies();
                    case "Code": return GetConcreteTypeOfRegion_Code();
                    case "Taxes": return GetConcreteTypeOfRegion_Taxes();
                    case "CountryID": return GetConcreteTypeOfRegion_CountryID();
                    case "Country": return GetConcreteTypeOfRegion_Country();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfRegionCurrency_MasterID();
                    case "SlaveID": return GetConcreteTypeOfRegionCurrency_SlaveID();
                    case "Slave": return GetConcreteTypeOfRegionCurrency_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfRegionImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfRegionImage_TypeID();
                    case "Type": return GetConcreteTypeOfRegionImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfRegionImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfRegionImage_Author();
                    case "MediaDate": return GetConcreteTypeOfRegionImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfRegionImage_Copyright();
                    case "Location": return GetConcreteTypeOfRegionImage_Location();
                    case "Latitude": return GetConcreteTypeOfRegionImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfRegionImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfRegionImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfRegionImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfRegionImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfRegionImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfRegionImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfRegionImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfRegionImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfRegionImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfRegionImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfRegionImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfRegionImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfRegionImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfRegionImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfRegionImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfRegionLanguage_MasterID();
                    case "SlaveID": return GetConcreteTypeOfRegionLanguage_SlaveID();
                    case "Slave": return GetConcreteTypeOfRegionLanguage_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IZipCodeModel)))
            {
                switch (property)
                {
                    case "ZipCodeValue": return GetConcreteTypeOfZipCode_ZipCodeValue();
                    case "ZipType": return GetConcreteTypeOfZipCode_ZipType();
                    case "CityName": return GetConcreteTypeOfZipCode_CityName();
                    case "CityType": return GetConcreteTypeOfZipCode_CityType();
                    case "CountyName": return GetConcreteTypeOfZipCode_CountyName();
                    case "CountyFIPS": return GetConcreteTypeOfZipCode_CountyFIPS();
                    case "StateName": return GetConcreteTypeOfZipCode_StateName();
                    case "StateAbbreviation": return GetConcreteTypeOfZipCode_StateAbbreviation();
                    case "StateFIPS": return GetConcreteTypeOfZipCode_StateFIPS();
                    case "MSACode": return GetConcreteTypeOfZipCode_MSACode();
                    case "AreaCode": return GetConcreteTypeOfZipCode_AreaCode();
                    case "TimeZone": return GetConcreteTypeOfZipCode_TimeZone();
                    case "UTC": return GetConcreteTypeOfZipCode_UTC();
                    case "DST": return GetConcreteTypeOfZipCode_DST();
                    case "Latitude": return GetConcreteTypeOfZipCode_Latitude();
                    case "Longitude": return GetConcreteTypeOfZipCode_Longitude();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Globalization
            if (type.GetInterfaces().Any(x => x == typeof(ILanguageModel)))
            {
                switch (property)
                {
                    case "Images": return GetConcreteTypeOfLanguage_Images();
                    case "Locale": return GetConcreteTypeOfLanguage_Locale();
                    case "UnicodeName": return GetConcreteTypeOfLanguage_UnicodeName();
                    case "ISO639_1_2002": return GetConcreteTypeOfLanguage_ISO639_1_2002();
                    case "ISO639_2_1998": return GetConcreteTypeOfLanguage_ISO639_2_1998();
                    case "ISO639_3_2007": return GetConcreteTypeOfLanguage_ISO639_3_2007();
                    case "ISO639_5_2008": return GetConcreteTypeOfLanguage_ISO639_5_2008();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ILanguageImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfLanguageImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfLanguageImage_TypeID();
                    case "Type": return GetConcreteTypeOfLanguageImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfLanguageImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfLanguageImage_Author();
                    case "MediaDate": return GetConcreteTypeOfLanguageImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfLanguageImage_Copyright();
                    case "Location": return GetConcreteTypeOfLanguageImage_Location();
                    case "Latitude": return GetConcreteTypeOfLanguageImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfLanguageImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfLanguageImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfLanguageImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfLanguageImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfLanguageImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfLanguageImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfLanguageImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfLanguageImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfLanguageImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfLanguageImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfLanguageImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfLanguageImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfLanguageImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfLanguageImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfLanguageImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUiKeyModel)))
            {
                switch (property)
                {
                    case "Type": return GetConcreteTypeOfUiKey_Type();
                    case "UiTranslations": return GetConcreteTypeOfUiKey_UiTranslations();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUiTranslationModel)))
            {
                switch (property)
                {
                    case "Locale": return GetConcreteTypeOfUiTranslation_Locale();
                    case "Value": return GetConcreteTypeOfUiTranslation_Value();
                    case "UiKeyID": return GetConcreteTypeOfUiTranslation_UiKeyID();
                    case "UiKey": return GetConcreteTypeOfUiTranslation_UiKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Groups
            if (type.GetInterfaces().Any(x => x == typeof(IGroupModel)))
            {
                switch (property)
                {
                    case "ParentID": return GetConcreteTypeOfGroup_ParentID();
                    case "Parent": return GetConcreteTypeOfGroup_Parent();
                    case "Children": return GetConcreteTypeOfGroup_Children();
                    case "Users": return GetConcreteTypeOfGroup_Users();
                    case "TypeID": return GetConcreteTypeOfGroup_TypeID();
                    case "Type": return GetConcreteTypeOfGroup_Type();
                    case "StatusID": return GetConcreteTypeOfGroup_StatusID();
                    case "Status": return GetConcreteTypeOfGroup_Status();
                    case "GroupOwnerID": return GetConcreteTypeOfGroup_GroupOwnerID();
                    case "GroupOwner": return GetConcreteTypeOfGroup_GroupOwner();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfGroupStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfGroupType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGroupUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfGroupUser_MasterID();
                    case "Master": return GetConcreteTypeOfGroupUser_Master();
                    case "SlaveID": return GetConcreteTypeOfGroupUser_SlaveID();
                    case "Slave": return GetConcreteTypeOfGroupUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Hangfire
            if (type.GetInterfaces().Any(x => x == typeof(IScheduledJobConfigurationModel)))
            {
                switch (property)
                {
                    case "NotificationTemplateID": return GetConcreteTypeOfScheduledJobConfiguration_NotificationTemplateID();
                    case "NotificationTemplate": return GetConcreteTypeOfScheduledJobConfiguration_NotificationTemplate();
                    case "ScheduledJobConfigurationSettings": return GetConcreteTypeOfScheduledJobConfiguration_ScheduledJobConfigurationSettings();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IScheduledJobConfigurationSettingModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfScheduledJobConfigurationSetting_MasterID();
                    case "Master": return GetConcreteTypeOfScheduledJobConfigurationSetting_Master();
                    case "SlaveID": return GetConcreteTypeOfScheduledJobConfigurationSetting_SlaveID();
                    case "Slave": return GetConcreteTypeOfScheduledJobConfigurationSetting_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Inventory
            if (type.GetInterfaces().Any(x => x == typeof(IInventoryLocationModel)))
            {
                switch (property)
                {
                    case "ContactID": return GetConcreteTypeOfInventoryLocation_ContactID();
                    case "Contact": return GetConcreteTypeOfInventoryLocation_Contact();
                    case "Brands": return GetConcreteTypeOfInventoryLocation_Brands();
                    case "Stores": return GetConcreteTypeOfInventoryLocation_Stores();
                    case "Sections": return GetConcreteTypeOfInventoryLocation_Sections();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IInventoryLocationSectionModel)))
            {
                switch (property)
                {
                    case "InventoryLocationID": return GetConcreteTypeOfInventoryLocationSection_InventoryLocationID();
                    case "InventoryLocation": return GetConcreteTypeOfInventoryLocationSection_InventoryLocation();
                    case "ProductInventoryLocationSections": return GetConcreteTypeOfInventoryLocationSection_ProductInventoryLocationSections();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Invoicing
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetConcreteTypeOfSalesInvoice_DueDate();
                    case "SubtotalItems": return GetConcreteTypeOfSalesInvoice_SubtotalItems();
                    case "SubtotalShipping": return GetConcreteTypeOfSalesInvoice_SubtotalShipping();
                    case "SubtotalTaxes": return GetConcreteTypeOfSalesInvoice_SubtotalTaxes();
                    case "SubtotalFees": return GetConcreteTypeOfSalesInvoice_SubtotalFees();
                    case "SubtotalHandling": return GetConcreteTypeOfSalesInvoice_SubtotalHandling();
                    case "SubtotalDiscounts": return GetConcreteTypeOfSalesInvoice_SubtotalDiscounts();
                    case "Total": return GetConcreteTypeOfSalesInvoice_Total();
                    case "ShippingSameAsBilling": return GetConcreteTypeOfSalesInvoice_ShippingSameAsBilling();
                    case "BillingContactID": return GetConcreteTypeOfSalesInvoice_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfSalesInvoice_BillingContact();
                    case "ShippingContactID": return GetConcreteTypeOfSalesInvoice_ShippingContactID();
                    case "ShippingContact": return GetConcreteTypeOfSalesInvoice_ShippingContact();
                    case "StatusID": return GetConcreteTypeOfSalesInvoice_StatusID();
                    case "Status": return GetConcreteTypeOfSalesInvoice_Status();
                    case "StateID": return GetConcreteTypeOfSalesInvoice_StateID();
                    case "State": return GetConcreteTypeOfSalesInvoice_State();
                    case "TypeID": return GetConcreteTypeOfSalesInvoice_TypeID();
                    case "Type": return GetConcreteTypeOfSalesInvoice_Type();
                    case "UserID": return GetConcreteTypeOfSalesInvoice_UserID();
                    case "User": return GetConcreteTypeOfSalesInvoice_User();
                    case "AccountID": return GetConcreteTypeOfSalesInvoice_AccountID();
                    case "Account": return GetConcreteTypeOfSalesInvoice_Account();
                    case "SalesItems": return GetConcreteTypeOfSalesInvoice_SalesItems();
                    case "Discounts": return GetConcreteTypeOfSalesInvoice_Discounts();
                    case "StoredFiles": return GetConcreteTypeOfSalesInvoice_StoredFiles();
                    case "Contacts": return GetConcreteTypeOfSalesInvoice_Contacts();
                    case "RateQuotes": return GetConcreteTypeOfSalesInvoice_RateQuotes();
                    case "Notes": return GetConcreteTypeOfSalesInvoice_Notes();
                    case "StoreID": return GetConcreteTypeOfSalesInvoice_StoreID();
                    case "Store": return GetConcreteTypeOfSalesInvoice_Store();
                    case "BrandID": return GetConcreteTypeOfSalesInvoice_BrandID();
                    case "Brand": return GetConcreteTypeOfSalesInvoice_Brand();
                    case "BalanceDue": return GetConcreteTypeOfSalesInvoice_BalanceDue();
                    case "SalesGroupID": return GetConcreteTypeOfSalesInvoice_SalesGroupID();
                    case "SalesGroup": return GetConcreteTypeOfSalesInvoice_SalesGroup();
                    case "AssociatedSalesOrders": return GetConcreteTypeOfSalesInvoice_AssociatedSalesOrders();
                    case "SalesInvoicePayments": return GetConcreteTypeOfSalesInvoice_SalesInvoicePayments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesInvoiceContact_MasterID();
                    case "Master": return GetConcreteTypeOfSalesInvoiceContact_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesInvoiceContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesInvoiceContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesInvoiceFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSalesInvoiceFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesInvoiceFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfSalesInvoiceFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetConcreteTypeOfSalesInvoiceItem_Sku();
                    case "UnitOfMeasure": return GetConcreteTypeOfSalesInvoiceItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetConcreteTypeOfSalesInvoiceItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetConcreteTypeOfSalesInvoiceItem_Quantity();
                    case "QuantityBackOrdered": return GetConcreteTypeOfSalesInvoiceItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetConcreteTypeOfSalesInvoiceItem_QuantityPreSold();
                    case "TotalQuantity": return GetConcreteTypeOfSalesInvoiceItem_TotalQuantity();
                    case "UnitCorePrice": return GetConcreteTypeOfSalesInvoiceItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetConcreteTypeOfSalesInvoiceItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetConcreteTypeOfSalesInvoiceItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetConcreteTypeOfSalesInvoiceItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetConcreteTypeOfSalesInvoiceItem_MasterID();
                    case "ProductID": return GetConcreteTypeOfSalesInvoiceItem_ProductID();
                    case "UserID": return GetConcreteTypeOfSalesInvoiceItem_UserID();
                    case "User": return GetConcreteTypeOfSalesInvoiceItem_User();
                    case "OriginalCurrencyID": return GetConcreteTypeOfSalesInvoiceItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetConcreteTypeOfSalesInvoiceItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetConcreteTypeOfSalesInvoiceItem_SellingCurrencyID();
                    case "SellingCurrency": return GetConcreteTypeOfSalesInvoiceItem_SellingCurrency();
                    case "Discounts": return GetConcreteTypeOfSalesInvoiceItem_Discounts();
                    case "Targets": return GetConcreteTypeOfSalesInvoiceItem_Targets();
                    case "Notes": return GetConcreteTypeOfSalesInvoiceItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetConcreteTypeOfSalesInvoiceItemTarget_Quantity();
                    case "NothingToShip": return GetConcreteTypeOfSalesInvoiceItemTarget_NothingToShip();
                    case "MasterID": return GetConcreteTypeOfSalesInvoiceItemTarget_MasterID();
                    case "TypeID": return GetConcreteTypeOfSalesInvoiceItemTarget_TypeID();
                    case "Type": return GetConcreteTypeOfSalesInvoiceItemTarget_Type();
                    case "DestinationContactID": return GetConcreteTypeOfSalesInvoiceItemTarget_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfSalesInvoiceItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetConcreteTypeOfSalesInvoiceItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetConcreteTypeOfSalesInvoiceItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetConcreteTypeOfSalesInvoiceItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetConcreteTypeOfSalesInvoiceItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetConcreteTypeOfSalesInvoiceItemTarget_BrandProductID();
                    case "BrandProduct": return GetConcreteTypeOfSalesInvoiceItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetConcreteTypeOfSalesInvoiceItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetConcreteTypeOfSalesInvoiceItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetConcreteTypeOfSalesInvoiceItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetConcreteTypeOfSalesInvoiceItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesInvoiceState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesInvoiceStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesInvoiceType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderSalesInvoiceModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesOrderSalesInvoice_MasterID();
                    case "Master": return GetConcreteTypeOfSalesOrderSalesInvoice_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesOrderSalesInvoice_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesOrderSalesInvoice_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Manufacturers
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfManufacturer_TypeID();
                    case "Type": return GetConcreteTypeOfManufacturer_Type();
                    case "ContactID": return GetConcreteTypeOfManufacturer_ContactID();
                    case "Contact": return GetConcreteTypeOfManufacturer_Contact();
                    case "Notes": return GetConcreteTypeOfManufacturer_Notes();
                    case "Images": return GetConcreteTypeOfManufacturer_Images();
                    case "MinimumOrderDollarAmountWarningMessage": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmount": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountOverrideFee": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetConcreteTypeOfManufacturer_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetConcreteTypeOfManufacturer_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetConcreteTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Products": return GetConcreteTypeOfManufacturer_Products();
                    case "Vendors": return GetConcreteTypeOfManufacturer_Vendors();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfManufacturerImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfManufacturerImage_TypeID();
                    case "Type": return GetConcreteTypeOfManufacturerImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfManufacturerImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfManufacturerImage_Author();
                    case "MediaDate": return GetConcreteTypeOfManufacturerImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfManufacturerImage_Copyright();
                    case "Location": return GetConcreteTypeOfManufacturerImage_Location();
                    case "Latitude": return GetConcreteTypeOfManufacturerImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfManufacturerImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfManufacturerImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfManufacturerImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfManufacturerImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfManufacturerImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfManufacturerImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfManufacturerImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfManufacturerImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfManufacturerImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfManufacturerImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfManufacturerImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfManufacturerImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfManufacturerImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfManufacturerImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfManufacturerImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfManufacturerProduct_MasterID();
                    case "Master": return GetConcreteTypeOfManufacturerProduct_Master();
                    case "SlaveID": return GetConcreteTypeOfManufacturerProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfManufacturerProduct_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfManufacturerType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Media
            if (type.GetInterfaces().Any(x => x == typeof(IStoredFileModel)))
            {
                switch (property)
                {
                    case "SeoTitle": return GetConcreteTypeOfStoredFile_SeoTitle();
                    case "Author": return GetConcreteTypeOfStoredFile_Author();
                    case "Copyright": return GetConcreteTypeOfStoredFile_Copyright();
                    case "FileFormat": return GetConcreteTypeOfStoredFile_FileFormat();
                    case "FileName": return GetConcreteTypeOfStoredFile_FileName();
                    case "IsStoredInDB": return GetConcreteTypeOfStoredFile_IsStoredInDB();
                    case "Bytes": return GetConcreteTypeOfStoredFile_Bytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Messaging
            if (type.GetInterfaces().Any(x => x == typeof(IConversationModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfConversation_StoreID();
                    case "Store": return GetConcreteTypeOfConversation_Store();
                    case "BrandID": return GetConcreteTypeOfConversation_BrandID();
                    case "Brand": return GetConcreteTypeOfConversation_Brand();
                    case "Users": return GetConcreteTypeOfConversation_Users();
                    case "HasEnded": return GetConcreteTypeOfConversation_HasEnded();
                    case "CopyUserWhenEnded": return GetConcreteTypeOfConversation_CopyUserWhenEnded();
                    case "Messages": return GetConcreteTypeOfConversation_Messages();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IConversationUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfConversationUser_MasterID();
                    case "Master": return GetConcreteTypeOfConversationUser_Master();
                    case "SlaveID": return GetConcreteTypeOfConversationUser_SlaveID();
                    case "Slave": return GetConcreteTypeOfConversationUser_Slave();
                    case "LastHeartbeat": return GetConcreteTypeOfConversationUser_LastHeartbeat();
                    case "IsTyping": return GetConcreteTypeOfConversationUser_IsTyping();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailQueueModel)))
            {
                switch (property)
                {
                    case "AddressesTo": return GetConcreteTypeOfEmailQueue_AddressesTo();
                    case "AddressesCc": return GetConcreteTypeOfEmailQueue_AddressesCc();
                    case "AddressesBcc": return GetConcreteTypeOfEmailQueue_AddressesBcc();
                    case "AddressFrom": return GetConcreteTypeOfEmailQueue_AddressFrom();
                    case "Subject": return GetConcreteTypeOfEmailQueue_Subject();
                    case "Body": return GetConcreteTypeOfEmailQueue_Body();
                    case "Attempts": return GetConcreteTypeOfEmailQueue_Attempts();
                    case "IsHtml": return GetConcreteTypeOfEmailQueue_IsHtml();
                    case "HasError": return GetConcreteTypeOfEmailQueue_HasError();
                    case "TypeID": return GetConcreteTypeOfEmailQueue_TypeID();
                    case "Type": return GetConcreteTypeOfEmailQueue_Type();
                    case "StatusID": return GetConcreteTypeOfEmailQueue_StatusID();
                    case "Status": return GetConcreteTypeOfEmailQueue_Status();
                    case "EmailTemplateID": return GetConcreteTypeOfEmailQueue_EmailTemplateID();
                    case "EmailTemplate": return GetConcreteTypeOfEmailQueue_EmailTemplate();
                    case "MessageRecipientID": return GetConcreteTypeOfEmailQueue_MessageRecipientID();
                    case "MessageRecipient": return GetConcreteTypeOfEmailQueue_MessageRecipient();
                    case "EmailQueueAttachments": return GetConcreteTypeOfEmailQueue_EmailQueueAttachments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailQueueAttachmentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfEmailQueueAttachment_MasterID();
                    case "SlaveID": return GetConcreteTypeOfEmailQueueAttachment_SlaveID();
                    case "Slave": return GetConcreteTypeOfEmailQueueAttachment_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfEmailQueueAttachment_FileAccessTypeID();
                    case "CreatedByUserID": return GetConcreteTypeOfEmailQueueAttachment_CreatedByUserID();
                    case "CreatedByUser": return GetConcreteTypeOfEmailQueueAttachment_CreatedByUser();
                    case "UpdatedByUserID": return GetConcreteTypeOfEmailQueueAttachment_UpdatedByUserID();
                    case "UpdatedByUser": return GetConcreteTypeOfEmailQueueAttachment_UpdatedByUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfEmailStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailTemplateModel)))
            {
                switch (property)
                {
                    case "Subject": return GetConcreteTypeOfEmailTemplate_Subject();
                    case "Body": return GetConcreteTypeOfEmailTemplate_Body();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfEmailType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfMessage_StoreID();
                    case "Store": return GetConcreteTypeOfMessage_Store();
                    case "BrandID": return GetConcreteTypeOfMessage_BrandID();
                    case "Brand": return GetConcreteTypeOfMessage_Brand();
                    case "Subject": return GetConcreteTypeOfMessage_Subject();
                    case "Context": return GetConcreteTypeOfMessage_Context();
                    case "Body": return GetConcreteTypeOfMessage_Body();
                    case "IsReplyAllAllowed": return GetConcreteTypeOfMessage_IsReplyAllAllowed();
                    case "ConversationID": return GetConcreteTypeOfMessage_ConversationID();
                    case "Conversation": return GetConcreteTypeOfMessage_Conversation();
                    case "SentByUserID": return GetConcreteTypeOfMessage_SentByUserID();
                    case "SentByUser": return GetConcreteTypeOfMessage_SentByUser();
                    case "MessageRecipients": return GetConcreteTypeOfMessage_MessageRecipients();
                    case "MessageAttachments": return GetConcreteTypeOfMessage_MessageAttachments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageAttachmentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfMessageAttachment_MasterID();
                    case "Master": return GetConcreteTypeOfMessageAttachment_Master();
                    case "SlaveID": return GetConcreteTypeOfMessageAttachment_SlaveID();
                    case "Slave": return GetConcreteTypeOfMessageAttachment_Slave();
                    case "CreatedByUserID": return GetConcreteTypeOfMessageAttachment_CreatedByUserID();
                    case "CreatedByUser": return GetConcreteTypeOfMessageAttachment_CreatedByUser();
                    case "UpdatedByUserID": return GetConcreteTypeOfMessageAttachment_UpdatedByUserID();
                    case "UpdatedByUser": return GetConcreteTypeOfMessageAttachment_UpdatedByUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageRecipientModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfMessageRecipient_MasterID();
                    case "SlaveID": return GetConcreteTypeOfMessageRecipient_SlaveID();
                    case "Slave": return GetConcreteTypeOfMessageRecipient_Slave();
                    case "IsRead": return GetConcreteTypeOfMessageRecipient_IsRead();
                    case "ReadAt": return GetConcreteTypeOfMessageRecipient_ReadAt();
                    case "IsArchived": return GetConcreteTypeOfMessageRecipient_IsArchived();
                    case "ArchivedAt": return GetConcreteTypeOfMessageRecipient_ArchivedAt();
                    case "HasSentAnEmail": return GetConcreteTypeOfMessageRecipient_HasSentAnEmail();
                    case "EmailSentAt": return GetConcreteTypeOfMessageRecipient_EmailSentAt();
                    case "GroupID": return GetConcreteTypeOfMessageRecipient_GroupID();
                    case "Group": return GetConcreteTypeOfMessageRecipient_Group();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductNotificationModel)))
            {
                switch (property)
                {
                    case "ProductID": return GetConcreteTypeOfProductNotification_ProductID();
                    case "Product": return GetConcreteTypeOfProductNotification_Product();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Ordering
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetConcreteTypeOfSalesOrder_DueDate();
                    case "SubtotalItems": return GetConcreteTypeOfSalesOrder_SubtotalItems();
                    case "SubtotalShipping": return GetConcreteTypeOfSalesOrder_SubtotalShipping();
                    case "SubtotalTaxes": return GetConcreteTypeOfSalesOrder_SubtotalTaxes();
                    case "SubtotalFees": return GetConcreteTypeOfSalesOrder_SubtotalFees();
                    case "SubtotalHandling": return GetConcreteTypeOfSalesOrder_SubtotalHandling();
                    case "SubtotalDiscounts": return GetConcreteTypeOfSalesOrder_SubtotalDiscounts();
                    case "Total": return GetConcreteTypeOfSalesOrder_Total();
                    case "ShippingSameAsBilling": return GetConcreteTypeOfSalesOrder_ShippingSameAsBilling();
                    case "BillingContactID": return GetConcreteTypeOfSalesOrder_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfSalesOrder_BillingContact();
                    case "ShippingContactID": return GetConcreteTypeOfSalesOrder_ShippingContactID();
                    case "ShippingContact": return GetConcreteTypeOfSalesOrder_ShippingContact();
                    case "StatusID": return GetConcreteTypeOfSalesOrder_StatusID();
                    case "Status": return GetConcreteTypeOfSalesOrder_Status();
                    case "StateID": return GetConcreteTypeOfSalesOrder_StateID();
                    case "State": return GetConcreteTypeOfSalesOrder_State();
                    case "TypeID": return GetConcreteTypeOfSalesOrder_TypeID();
                    case "Type": return GetConcreteTypeOfSalesOrder_Type();
                    case "UserID": return GetConcreteTypeOfSalesOrder_UserID();
                    case "User": return GetConcreteTypeOfSalesOrder_User();
                    case "AccountID": return GetConcreteTypeOfSalesOrder_AccountID();
                    case "Account": return GetConcreteTypeOfSalesOrder_Account();
                    case "SalesItems": return GetConcreteTypeOfSalesOrder_SalesItems();
                    case "Discounts": return GetConcreteTypeOfSalesOrder_Discounts();
                    case "StoredFiles": return GetConcreteTypeOfSalesOrder_StoredFiles();
                    case "Contacts": return GetConcreteTypeOfSalesOrder_Contacts();
                    case "RateQuotes": return GetConcreteTypeOfSalesOrder_RateQuotes();
                    case "Notes": return GetConcreteTypeOfSalesOrder_Notes();
                    case "StoreID": return GetConcreteTypeOfSalesOrder_StoreID();
                    case "Store": return GetConcreteTypeOfSalesOrder_Store();
                    case "BrandID": return GetConcreteTypeOfSalesOrder_BrandID();
                    case "Brand": return GetConcreteTypeOfSalesOrder_Brand();
                    case "PurchaseOrderNumber": return GetConcreteTypeOfSalesOrder_PurchaseOrderNumber();
                    case "BalanceDue": return GetConcreteTypeOfSalesOrder_BalanceDue();
                    case "TrackingNumber": return GetConcreteTypeOfSalesOrder_TrackingNumber();
                    case "PaymentTransactionID": return GetConcreteTypeOfSalesOrder_PaymentTransactionID();
                    case "TaxTransactionID": return GetConcreteTypeOfSalesOrder_TaxTransactionID();
                    case "OrderApprovedDate": return GetConcreteTypeOfSalesOrder_OrderApprovedDate();
                    case "OrderCommitmentDate": return GetConcreteTypeOfSalesOrder_OrderCommitmentDate();
                    case "RequiredShipDate": return GetConcreteTypeOfSalesOrder_RequiredShipDate();
                    case "RequestedShipDate": return GetConcreteTypeOfSalesOrder_RequestedShipDate();
                    case "ActualShipDate": return GetConcreteTypeOfSalesOrder_ActualShipDate();
                    case "SalesGroupAsMasterID": return GetConcreteTypeOfSalesOrder_SalesGroupAsMasterID();
                    case "SalesGroupAsSubID": return GetConcreteTypeOfSalesOrder_SalesGroupAsSubID();
                    case "SalesOrderPayments": return GetConcreteTypeOfSalesOrder_SalesOrderPayments();
                    case "AssociatedSalesQuotes": return GetConcreteTypeOfSalesOrder_AssociatedSalesQuotes();
                    case "AssociatedSalesReturns": return GetConcreteTypeOfSalesOrder_AssociatedSalesReturns();
                    case "AssociatedSalesInvoices": return GetConcreteTypeOfSalesOrder_AssociatedSalesInvoices();
                    case "AssociatedPurchaseOrders": return GetConcreteTypeOfSalesOrder_AssociatedPurchaseOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesOrderContact_MasterID();
                    case "Master": return GetConcreteTypeOfSalesOrderContact_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesOrderContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesOrderContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderEventModel)))
            {
                switch (property)
                {
                    case "OldStateID": return GetConcreteTypeOfSalesOrderEvent_OldStateID();
                    case "NewStateID": return GetConcreteTypeOfSalesOrderEvent_NewStateID();
                    case "OldStatusID": return GetConcreteTypeOfSalesOrderEvent_OldStatusID();
                    case "NewStatusID": return GetConcreteTypeOfSalesOrderEvent_NewStatusID();
                    case "OldTypeID": return GetConcreteTypeOfSalesOrderEvent_OldTypeID();
                    case "NewTypeID": return GetConcreteTypeOfSalesOrderEvent_NewTypeID();
                    case "OldBalanceDue": return GetConcreteTypeOfSalesOrderEvent_OldBalanceDue();
                    case "NewBalanceDue": return GetConcreteTypeOfSalesOrderEvent_NewBalanceDue();
                    case "OldHash": return GetConcreteTypeOfSalesOrderEvent_OldHash();
                    case "NewHash": return GetConcreteTypeOfSalesOrderEvent_NewHash();
                    case "OldRecordSerialized": return GetConcreteTypeOfSalesOrderEvent_OldRecordSerialized();
                    case "NewRecordSerialized": return GetConcreteTypeOfSalesOrderEvent_NewRecordSerialized();
                    case "SalesOrderID": return GetConcreteTypeOfSalesOrderEvent_SalesOrderID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesOrderFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSalesOrderFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesOrderFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfSalesOrderFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetConcreteTypeOfSalesOrderItem_Sku();
                    case "UnitOfMeasure": return GetConcreteTypeOfSalesOrderItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetConcreteTypeOfSalesOrderItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetConcreteTypeOfSalesOrderItem_Quantity();
                    case "QuantityBackOrdered": return GetConcreteTypeOfSalesOrderItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetConcreteTypeOfSalesOrderItem_QuantityPreSold();
                    case "TotalQuantity": return GetConcreteTypeOfSalesOrderItem_TotalQuantity();
                    case "UnitCorePrice": return GetConcreteTypeOfSalesOrderItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetConcreteTypeOfSalesOrderItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetConcreteTypeOfSalesOrderItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetConcreteTypeOfSalesOrderItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetConcreteTypeOfSalesOrderItem_MasterID();
                    case "ProductID": return GetConcreteTypeOfSalesOrderItem_ProductID();
                    case "UserID": return GetConcreteTypeOfSalesOrderItem_UserID();
                    case "User": return GetConcreteTypeOfSalesOrderItem_User();
                    case "OriginalCurrencyID": return GetConcreteTypeOfSalesOrderItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetConcreteTypeOfSalesOrderItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetConcreteTypeOfSalesOrderItem_SellingCurrencyID();
                    case "SellingCurrency": return GetConcreteTypeOfSalesOrderItem_SellingCurrency();
                    case "Discounts": return GetConcreteTypeOfSalesOrderItem_Discounts();
                    case "Targets": return GetConcreteTypeOfSalesOrderItem_Targets();
                    case "Notes": return GetConcreteTypeOfSalesOrderItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetConcreteTypeOfSalesOrderItemTarget_Quantity();
                    case "NothingToShip": return GetConcreteTypeOfSalesOrderItemTarget_NothingToShip();
                    case "MasterID": return GetConcreteTypeOfSalesOrderItemTarget_MasterID();
                    case "TypeID": return GetConcreteTypeOfSalesOrderItemTarget_TypeID();
                    case "Type": return GetConcreteTypeOfSalesOrderItemTarget_Type();
                    case "DestinationContactID": return GetConcreteTypeOfSalesOrderItemTarget_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfSalesOrderItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetConcreteTypeOfSalesOrderItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetConcreteTypeOfSalesOrderItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetConcreteTypeOfSalesOrderItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetConcreteTypeOfSalesOrderItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetConcreteTypeOfSalesOrderItemTarget_BrandProductID();
                    case "BrandProduct": return GetConcreteTypeOfSalesOrderItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetConcreteTypeOfSalesOrderItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetConcreteTypeOfSalesOrderItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetConcreteTypeOfSalesOrderItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetConcreteTypeOfSalesOrderItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesOrderState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesOrderStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesOrderType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Payments
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipModel)))
            {
                switch (property)
                {
                    case "IsContractual": return GetConcreteTypeOfMembership_IsContractual();
                    case "MembershipLevels": return GetConcreteTypeOfMembership_MembershipLevels();
                    case "MembershipRepeatTypes": return GetConcreteTypeOfMembership_MembershipRepeatTypes();
                    case "TranslationKey": return GetConcreteTypeOfMembership_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipAdZoneAccessModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfMembershipAdZoneAccess_MasterID();
                    case "SlaveID": return GetConcreteTypeOfMembershipAdZoneAccess_SlaveID();
                    case "Slave": return GetConcreteTypeOfMembershipAdZoneAccess_Slave();
                    case "MembershipAdZoneAccessByLevels": return GetConcreteTypeOfMembershipAdZoneAccess_MembershipAdZoneAccessByLevels();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipAdZoneAccessByLevelModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfMembershipAdZoneAccessByLevel_MasterID();
                    case "SlaveID": return GetConcreteTypeOfMembershipAdZoneAccessByLevel_SlaveID();
                    case "Slave": return GetConcreteTypeOfMembershipAdZoneAccessByLevel_Slave();
                    case "SubscriberCountThreshold": return GetConcreteTypeOfMembershipAdZoneAccessByLevel_SubscriberCountThreshold();
                    case "UniqueAdLimit": return GetConcreteTypeOfMembershipAdZoneAccessByLevel_UniqueAdLimit();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipLevelModel)))
            {
                switch (property)
                {
                    case "RolesApplied": return GetConcreteTypeOfMembershipLevel_RolesApplied();
                    case "MembershipID": return GetConcreteTypeOfMembershipLevel_MembershipID();
                    case "Membership": return GetConcreteTypeOfMembershipLevel_Membership();
                    case "MembershipAdZoneAccessByLevels": return GetConcreteTypeOfMembershipLevel_MembershipAdZoneAccessByLevels();
                    case "TranslationKey": return GetConcreteTypeOfMembershipLevel_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipRepeatTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfMembershipRepeatType_MasterID();
                    case "SlaveID": return GetConcreteTypeOfMembershipRepeatType_SlaveID();
                    case "Slave": return GetConcreteTypeOfMembershipRepeatType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPaymentModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfPayment_StoreID();
                    case "Store": return GetConcreteTypeOfPayment_Store();
                    case "BrandID": return GetConcreteTypeOfPayment_BrandID();
                    case "Brand": return GetConcreteTypeOfPayment_Brand();
                    case "Amount": return GetConcreteTypeOfPayment_Amount();
                    case "AuthCode": return GetConcreteTypeOfPayment_AuthCode();
                    case "ReferenceNo": return GetConcreteTypeOfPayment_ReferenceNo();
                    case "TransactionNumber": return GetConcreteTypeOfPayment_TransactionNumber();
                    case "StatusDate": return GetConcreteTypeOfPayment_StatusDate();
                    case "Authorized": return GetConcreteTypeOfPayment_Authorized();
                    case "AuthDate": return GetConcreteTypeOfPayment_AuthDate();
                    case "Received": return GetConcreteTypeOfPayment_Received();
                    case "ReceivedDate": return GetConcreteTypeOfPayment_ReceivedDate();
                    case "Response": return GetConcreteTypeOfPayment_Response();
                    case "ExternalCustomerID": return GetConcreteTypeOfPayment_ExternalCustomerID();
                    case "ExternalPaymentID": return GetConcreteTypeOfPayment_ExternalPaymentID();
                    case "PaymentData": return GetConcreteTypeOfPayment_PaymentData();
                    case "CardTypeID": return GetConcreteTypeOfPayment_CardTypeID();
                    case "CardMask": return GetConcreteTypeOfPayment_CardMask();
                    case "CVV": return GetConcreteTypeOfPayment_CVV();
                    case "Last4CardDigits": return GetConcreteTypeOfPayment_Last4CardDigits();
                    case "ExpirationMonth": return GetConcreteTypeOfPayment_ExpirationMonth();
                    case "ExpirationYear": return GetConcreteTypeOfPayment_ExpirationYear();
                    case "CheckNumber": return GetConcreteTypeOfPayment_CheckNumber();
                    case "RoutingNumberLast4": return GetConcreteTypeOfPayment_RoutingNumberLast4();
                    case "AccountNumberLast4": return GetConcreteTypeOfPayment_AccountNumberLast4();
                    case "BankName": return GetConcreteTypeOfPayment_BankName();
                    case "TypeID": return GetConcreteTypeOfPayment_TypeID();
                    case "Type": return GetConcreteTypeOfPayment_Type();
                    case "StatusID": return GetConcreteTypeOfPayment_StatusID();
                    case "Status": return GetConcreteTypeOfPayment_Status();
                    case "BillingContactID": return GetConcreteTypeOfPayment_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfPayment_BillingContact();
                    case "PaymentMethodID": return GetConcreteTypeOfPayment_PaymentMethodID();
                    case "PaymentMethod": return GetConcreteTypeOfPayment_PaymentMethod();
                    case "CurrencyID": return GetConcreteTypeOfPayment_CurrencyID();
                    case "Currency": return GetConcreteTypeOfPayment_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPaymentMethodModel)))
            {
                switch (property)
                {
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPaymentStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPaymentType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRepeatTypeModel)))
            {
                switch (property)
                {
                    case "RepeatableBillingPeriods": return GetConcreteTypeOfRepeatType_RepeatableBillingPeriods();
                    case "InitialBonusBillingPeriods": return GetConcreteTypeOfRepeatType_InitialBonusBillingPeriods();
                    case "TranslationKey": return GetConcreteTypeOfRepeatType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoicePaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesInvoicePayment_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSalesInvoicePayment_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesInvoicePayment_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderPaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesOrderPayment_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSalesOrderPayment_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesOrderPayment_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnPaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesReturnPayment_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSalesReturnPayment_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesReturnPayment_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfSubscription_TypeID();
                    case "Type": return GetConcreteTypeOfSubscription_Type();
                    case "StatusID": return GetConcreteTypeOfSubscription_StatusID();
                    case "Status": return GetConcreteTypeOfSubscription_Status();
                    case "MemberSince": return GetConcreteTypeOfSubscription_MemberSince();
                    case "StartsOn": return GetConcreteTypeOfSubscription_StartsOn();
                    case "EndsOn": return GetConcreteTypeOfSubscription_EndsOn();
                    case "LastPaidDate": return GetConcreteTypeOfSubscription_LastPaidDate();
                    case "BillingPeriodsTotal": return GetConcreteTypeOfSubscription_BillingPeriodsTotal();
                    case "BillingPeriodsPaid": return GetConcreteTypeOfSubscription_BillingPeriodsPaid();
                    case "Fee": return GetConcreteTypeOfSubscription_Fee();
                    case "CreditUponUpgrade": return GetConcreteTypeOfSubscription_CreditUponUpgrade();
                    case "AutoRenew": return GetConcreteTypeOfSubscription_AutoRenew();
                    case "CanUpgrade": return GetConcreteTypeOfSubscription_CanUpgrade();
                    case "Memo": return GetConcreteTypeOfSubscription_Memo();
                    case "ProductMembershipLevelID": return GetConcreteTypeOfSubscription_ProductMembershipLevelID();
                    case "ProductMembershipLevel": return GetConcreteTypeOfSubscription_ProductMembershipLevel();
                    case "RepeatTypeID": return GetConcreteTypeOfSubscription_RepeatTypeID();
                    case "RepeatType": return GetConcreteTypeOfSubscription_RepeatType();
                    case "SalesInvoiceID": return GetConcreteTypeOfSubscription_SalesInvoiceID();
                    case "SalesInvoice": return GetConcreteTypeOfSubscription_SalesInvoice();
                    case "UserID": return GetConcreteTypeOfSubscription_UserID();
                    case "User": return GetConcreteTypeOfSubscription_User();
                    case "AccountID": return GetConcreteTypeOfSubscription_AccountID();
                    case "Account": return GetConcreteTypeOfSubscription_Account();
                    case "SubscriptionHistories": return GetConcreteTypeOfSubscription_SubscriptionHistories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionHistoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSubscriptionHistory_MasterID();
                    case "Master": return GetConcreteTypeOfSubscriptionHistory_Master();
                    case "SlaveID": return GetConcreteTypeOfSubscriptionHistory_SlaveID();
                    case "Slave": return GetConcreteTypeOfSubscriptionHistory_Slave();
                    case "PaymentDate": return GetConcreteTypeOfSubscriptionHistory_PaymentDate();
                    case "PaymentSuccess": return GetConcreteTypeOfSubscriptionHistory_PaymentSuccess();
                    case "Memo": return GetConcreteTypeOfSubscriptionHistory_Memo();
                    case "BillingPeriodsPaid": return GetConcreteTypeOfSubscriptionHistory_BillingPeriodsPaid();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSubscriptionStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionTypeModel)))
            {
                switch (property)
                {
                    case "ProductSubscriptionTypes": return GetConcreteTypeOfSubscriptionType_ProductSubscriptionTypes();
                    case "TranslationKey": return GetConcreteTypeOfSubscriptionType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IWalletModel)))
            {
                switch (property)
                {
                    case "CreditCardNumber": return GetConcreteTypeOfWallet_CreditCardNumber();
                    case "AccountNumber": return GetConcreteTypeOfWallet_AccountNumber();
                    case "RoutingNumber": return GetConcreteTypeOfWallet_RoutingNumber();
                    case "BankName": return GetConcreteTypeOfWallet_BankName();
                    case "ExpirationMonth": return GetConcreteTypeOfWallet_ExpirationMonth();
                    case "ExpirationYear": return GetConcreteTypeOfWallet_ExpirationYear();
                    case "Token": return GetConcreteTypeOfWallet_Token();
                    case "CardType": return GetConcreteTypeOfWallet_CardType();
                    case "CardHolderName": return GetConcreteTypeOfWallet_CardHolderName();
                    case "UserID": return GetConcreteTypeOfWallet_UserID();
                    case "User": return GetConcreteTypeOfWallet_User();
                    case "CurrencyID": return GetConcreteTypeOfWallet_CurrencyID();
                    case "Currency": return GetConcreteTypeOfWallet_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Pricing
            if (type.GetInterfaces().Any(x => x == typeof(IPricePointModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPricePoint_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRoundingModel)))
            {
                switch (property)
                {
                    case "PricePointKey": return GetConcreteTypeOfPriceRounding_PricePointKey();
                    case "ProductKey": return GetConcreteTypeOfPriceRounding_ProductKey();
                    case "CurrencyKey": return GetConcreteTypeOfPriceRounding_CurrencyKey();
                    case "UnitOfMeasure": return GetConcreteTypeOfPriceRounding_UnitOfMeasure();
                    case "RoundHow": return GetConcreteTypeOfPriceRounding_RoundHow();
                    case "RoundTo": return GetConcreteTypeOfPriceRounding_RoundTo();
                    case "RoundingAmount": return GetConcreteTypeOfPriceRounding_RoundingAmount();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleModel)))
            {
                switch (property)
                {
                    case "StartDate": return GetConcreteTypeOfPriceRule_StartDate();
                    case "EndDate": return GetConcreteTypeOfPriceRule_EndDate();
                    case "UnitOfMeasure": return GetConcreteTypeOfPriceRule_UnitOfMeasure();
                    case "PriceAdjustment": return GetConcreteTypeOfPriceRule_PriceAdjustment();
                    case "MinQuantity": return GetConcreteTypeOfPriceRule_MinQuantity();
                    case "MaxQuantity": return GetConcreteTypeOfPriceRule_MaxQuantity();
                    case "IsPercentage": return GetConcreteTypeOfPriceRule_IsPercentage();
                    case "IsMarkup": return GetConcreteTypeOfPriceRule_IsMarkup();
                    case "UsePriceBase": return GetConcreteTypeOfPriceRule_UsePriceBase();
                    case "IsExclusive": return GetConcreteTypeOfPriceRule_IsExclusive();
                    case "IsOnlyForAnonymousUsers": return GetConcreteTypeOfPriceRule_IsOnlyForAnonymousUsers();
                    case "Priority": return GetConcreteTypeOfPriceRule_Priority();
                    case "CurrencyID": return GetConcreteTypeOfPriceRule_CurrencyID();
                    case "Currency": return GetConcreteTypeOfPriceRule_Currency();
                    case "Products": return GetConcreteTypeOfPriceRule_Products();
                    case "Brands": return GetConcreteTypeOfPriceRule_Brands();
                    case "Stores": return GetConcreteTypeOfPriceRule_Stores();
                    case "Accounts": return GetConcreteTypeOfPriceRule_Accounts();
                    case "Vendors": return GetConcreteTypeOfPriceRule_Vendors();
                    case "Manufacturers": return GetConcreteTypeOfPriceRule_Manufacturers();
                    case "PriceRuleCountries": return GetConcreteTypeOfPriceRule_PriceRuleCountries();
                    case "PriceRuleUserRoles": return GetConcreteTypeOfPriceRule_PriceRuleUserRoles();
                    case "PriceRuleCategories": return GetConcreteTypeOfPriceRule_PriceRuleCategories();
                    case "PriceRuleAccountTypes": return GetConcreteTypeOfPriceRule_PriceRuleAccountTypes();
                    case "PriceRuleProductTypes": return GetConcreteTypeOfPriceRule_PriceRuleProductTypes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleAccount_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleAccount_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleAccount_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleAccountTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleAccountType_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleAccountType_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleAccountType_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleAccountType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleBrand_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleBrand_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleBrand_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleBrand_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleCategory_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleCategory_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleCategory_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleCountryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleCountry_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleCountry_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleCountry_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleCountry_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleManufacturer_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleManufacturer_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleManufacturer_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleProduct_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleProduct_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleProduct_Slave();
                    case "OverridePrice": return GetConcreteTypeOfPriceRuleProduct_OverridePrice();
                    case "OverrideBasePrice": return GetConcreteTypeOfPriceRuleProduct_OverrideBasePrice();
                    case "OverrideSalePrice": return GetConcreteTypeOfPriceRuleProduct_OverrideSalePrice();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleProductType_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleProductType_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleProductType_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleProductType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleStore_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleStore_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleStore_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleUserRoleModel)))
            {
                switch (property)
                {
                    case "RoleName": return GetConcreteTypeOfPriceRuleUserRole_RoleName();
                    case "PriceRuleID": return GetConcreteTypeOfPriceRuleUserRole_PriceRuleID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPriceRuleVendor_MasterID();
                    case "Master": return GetConcreteTypeOfPriceRuleVendor_Master();
                    case "SlaveID": return GetConcreteTypeOfPriceRuleVendor_SlaveID();
                    case "Slave": return GetConcreteTypeOfPriceRuleVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Products
            if (type.GetInterfaces().Any(x => x == typeof(IFutureImportModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetConcreteTypeOfFutureImport_StatusID();
                    case "Status": return GetConcreteTypeOfFutureImport_Status();
                    case "StoreID": return GetConcreteTypeOfFutureImport_StoreID();
                    case "Store": return GetConcreteTypeOfFutureImport_Store();
                    case "FileName": return GetConcreteTypeOfFutureImport_FileName();
                    case "RunImportAt": return GetConcreteTypeOfFutureImport_RunImportAt();
                    case "Attempts": return GetConcreteTypeOfFutureImport_Attempts();
                    case "HasError": return GetConcreteTypeOfFutureImport_HasError();
                    case "VendorID": return GetConcreteTypeOfFutureImport_VendorID();
                    case "Vendor": return GetConcreteTypeOfFutureImport_Vendor();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfFutureImportStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetConcreteTypeOfProduct_StatusID();
                    case "Status": return GetConcreteTypeOfProduct_Status();
                    case "TypeID": return GetConcreteTypeOfProduct_TypeID();
                    case "Type": return GetConcreteTypeOfProduct_Type();
                    case "RequiresRoles": return GetConcreteTypeOfProduct_RequiresRoles();
                    case "RequiresRolesList": return GetConcreteTypeOfProduct_RequiresRolesList();
                    case "RequiresRolesAlt": return GetConcreteTypeOfProduct_RequiresRolesAlt();
                    case "RequiresRolesListAlt": return GetConcreteTypeOfProduct_RequiresRolesListAlt();
                    case "Weight": return GetConcreteTypeOfProduct_Weight();
                    case "WeightUnitOfMeasure": return GetConcreteTypeOfProduct_WeightUnitOfMeasure();
                    case "Width": return GetConcreteTypeOfProduct_Width();
                    case "WidthUnitOfMeasure": return GetConcreteTypeOfProduct_WidthUnitOfMeasure();
                    case "Depth": return GetConcreteTypeOfProduct_Depth();
                    case "DepthUnitOfMeasure": return GetConcreteTypeOfProduct_DepthUnitOfMeasure();
                    case "Height": return GetConcreteTypeOfProduct_Height();
                    case "HeightUnitOfMeasure": return GetConcreteTypeOfProduct_HeightUnitOfMeasure();
                    case "Images": return GetConcreteTypeOfProduct_Images();
                    case "StoredFiles": return GetConcreteTypeOfProduct_StoredFiles();
                    case "Brands": return GetConcreteTypeOfProduct_Brands();
                    case "Stores": return GetConcreteTypeOfProduct_Stores();
                    case "Accounts": return GetConcreteTypeOfProduct_Accounts();
                    case "Vendors": return GetConcreteTypeOfProduct_Vendors();
                    case "Manufacturers": return GetConcreteTypeOfProduct_Manufacturers();
                    case "IsVisible": return GetConcreteTypeOfProduct_IsVisible();
                    case "IsDiscontinued": return GetConcreteTypeOfProduct_IsDiscontinued();
                    case "IsEligibleForReturn": return GetConcreteTypeOfProduct_IsEligibleForReturn();
                    case "IsTaxable": return GetConcreteTypeOfProduct_IsTaxable();
                    case "AllowBackOrder": return GetConcreteTypeOfProduct_AllowBackOrder();
                    case "AllowPreSale": return GetConcreteTypeOfProduct_AllowPreSale();
                    case "IsUnlimitedStock": return GetConcreteTypeOfProduct_IsUnlimitedStock();
                    case "IsFreeShipping": return GetConcreteTypeOfProduct_IsFreeShipping();
                    case "NothingToShip": return GetConcreteTypeOfProduct_NothingToShip();
                    case "DropShipOnly": return GetConcreteTypeOfProduct_DropShipOnly();
                    case "ShippingLeadTimeIsCalendarDays": return GetConcreteTypeOfProduct_ShippingLeadTimeIsCalendarDays();
                    case "ShortDescription": return GetConcreteTypeOfProduct_ShortDescription();
                    case "ManufacturerPartNumber": return GetConcreteTypeOfProduct_ManufacturerPartNumber();
                    case "BrandName": return GetConcreteTypeOfProduct_BrandName();
                    case "TaxCode": return GetConcreteTypeOfProduct_TaxCode();
                    case "UnitOfMeasure": return GetConcreteTypeOfProduct_UnitOfMeasure();
                    case "IndexSynonyms": return GetConcreteTypeOfProduct_IndexSynonyms();
                    case "HandlingCharge": return GetConcreteTypeOfProduct_HandlingCharge();
                    case "FlatShippingCharge": return GetConcreteTypeOfProduct_FlatShippingCharge();
                    case "RestockingFeePercent": return GetConcreteTypeOfProduct_RestockingFeePercent();
                    case "RestockingFeeAmount": return GetConcreteTypeOfProduct_RestockingFeeAmount();
                    case "AvailableStartDate": return GetConcreteTypeOfProduct_AvailableStartDate();
                    case "AvailableEndDate": return GetConcreteTypeOfProduct_AvailableEndDate();
                    case "PreSellEndDate": return GetConcreteTypeOfProduct_PreSellEndDate();
                    case "QuantityPerMasterPack": return GetConcreteTypeOfProduct_QuantityPerMasterPack();
                    case "QuantityMasterPackPerLayer": return GetConcreteTypeOfProduct_QuantityMasterPackPerLayer();
                    case "QuantityMasterPackLayersPerPallet": return GetConcreteTypeOfProduct_QuantityMasterPackLayersPerPallet();
                    case "QuantityMasterPackPerPallet": return GetConcreteTypeOfProduct_QuantityMasterPackPerPallet();
                    case "QuantityPerLayer": return GetConcreteTypeOfProduct_QuantityPerLayer();
                    case "QuantityLayersPerPallet": return GetConcreteTypeOfProduct_QuantityLayersPerPallet();
                    case "QuantityPerPallet": return GetConcreteTypeOfProduct_QuantityPerPallet();
                    case "KitBaseQuantityPriceMultiplier": return GetConcreteTypeOfProduct_KitBaseQuantityPriceMultiplier();
                    case "ShippingLeadTimeDays": return GetConcreteTypeOfProduct_ShippingLeadTimeDays();
                    case "MinimumPurchaseQuantity": return GetConcreteTypeOfProduct_MinimumPurchaseQuantity();
                    case "MinimumPurchaseQuantityIfPastPurchased": return GetConcreteTypeOfProduct_MinimumPurchaseQuantityIfPastPurchased();
                    case "MaximumPurchaseQuantity": return GetConcreteTypeOfProduct_MaximumPurchaseQuantity();
                    case "MaximumPurchaseQuantityIfPastPurchased": return GetConcreteTypeOfProduct_MaximumPurchaseQuantityIfPastPurchased();
                    case "MaximumBackOrderPurchaseQuantity": return GetConcreteTypeOfProduct_MaximumBackOrderPurchaseQuantity();
                    case "MaximumBackOrderPurchaseQuantityIfPastPurchased": return GetConcreteTypeOfProduct_MaximumBackOrderPurchaseQuantityIfPastPurchased();
                    case "MaximumBackOrderPurchaseQuantityGlobal": return GetConcreteTypeOfProduct_MaximumBackOrderPurchaseQuantityGlobal();
                    case "MaximumPrePurchaseQuantity": return GetConcreteTypeOfProduct_MaximumPrePurchaseQuantity();
                    case "MaximumPrePurchaseQuantityIfPastPurchased": return GetConcreteTypeOfProduct_MaximumPrePurchaseQuantityIfPastPurchased();
                    case "MaximumPrePurchaseQuantityGlobal": return GetConcreteTypeOfProduct_MaximumPrePurchaseQuantityGlobal();
                    case "DocumentRequiredForPurchase": return GetConcreteTypeOfProduct_DocumentRequiredForPurchase();
                    case "DocumentRequiredForPurchaseMissingWarningMessage": return GetConcreteTypeOfProduct_DocumentRequiredForPurchaseMissingWarningMessage();
                    case "DocumentRequiredForPurchaseExpiredWarningMessage": return GetConcreteTypeOfProduct_DocumentRequiredForPurchaseExpiredWarningMessage();
                    case "DocumentRequiredForPurchaseOverrideFee": return GetConcreteTypeOfProduct_DocumentRequiredForPurchaseOverrideFee();
                    case "DocumentRequiredForPurchaseOverrideFeeIsPercent": return GetConcreteTypeOfProduct_DocumentRequiredForPurchaseOverrideFeeIsPercent();
                    case "DocumentRequiredForPurchaseOverrideFeeWarningMessage": return GetConcreteTypeOfProduct_DocumentRequiredForPurchaseOverrideFeeWarningMessage();
                    case "DocumentRequiredForPurchaseOverrideFeeAcceptedMessage": return GetConcreteTypeOfProduct_DocumentRequiredForPurchaseOverrideFeeAcceptedMessage();
                    case "MustPurchaseInMultiplesOfAmount": return GetConcreteTypeOfProduct_MustPurchaseInMultiplesOfAmount();
                    case "MustPurchaseInMultiplesOfAmountWarningMessage": return GetConcreteTypeOfProduct_MustPurchaseInMultiplesOfAmountWarningMessage();
                    case "MustPurchaseInMultiplesOfAmountOverrideFee": return GetConcreteTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFee();
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent": return GetConcreteTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent();
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage": return GetConcreteTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage();
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage();
                    case "TotalPurchasedAmount": return GetConcreteTypeOfProduct_TotalPurchasedAmount();
                    case "TotalPurchasedAmountCurrencyID": return GetConcreteTypeOfProduct_TotalPurchasedAmountCurrencyID();
                    case "TotalPurchasedAmountCurrency": return GetConcreteTypeOfProduct_TotalPurchasedAmountCurrency();
                    case "TotalPurchasedQuantity": return GetConcreteTypeOfProduct_TotalPurchasedQuantity();
                    case "PackageID": return GetConcreteTypeOfProduct_PackageID();
                    case "Package": return GetConcreteTypeOfProduct_Package();
                    case "MasterPackID": return GetConcreteTypeOfProduct_MasterPackID();
                    case "MasterPack": return GetConcreteTypeOfProduct_MasterPack();
                    case "PalletID": return GetConcreteTypeOfProduct_PalletID();
                    case "Pallet": return GetConcreteTypeOfProduct_Pallet();
                    case "RestockingFeeAmountCurrencyID": return GetConcreteTypeOfProduct_RestockingFeeAmountCurrencyID();
                    case "RestockingFeeAmountCurrency": return GetConcreteTypeOfProduct_RestockingFeeAmountCurrency();
                    case "ProductAssociations": return GetConcreteTypeOfProduct_ProductAssociations();
                    case "ProductsAssociatedWith": return GetConcreteTypeOfProduct_ProductsAssociatedWith();
                    case "ProductCategories": return GetConcreteTypeOfProduct_ProductCategories();
                    case "ProductMembershipLevels": return GetConcreteTypeOfProduct_ProductMembershipLevels();
                    case "ProductDownloads": return GetConcreteTypeOfProduct_ProductDownloads();
                    case "ProductShipCarrierMethods": return GetConcreteTypeOfProduct_ProductShipCarrierMethods();
                    case "ProductSubscriptionTypes": return GetConcreteTypeOfProduct_ProductSubscriptionTypes();
                    case "ProductRestrictions": return GetConcreteTypeOfProduct_ProductRestrictions();
                    case "ProductNotifications": return GetConcreteTypeOfProduct_ProductNotifications();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductAssociationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductAssociation_MasterID();
                    case "Master": return GetConcreteTypeOfProductAssociation_Master();
                    case "SlaveID": return GetConcreteTypeOfProductAssociation_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductAssociation_Slave();
                    case "Quantity": return GetConcreteTypeOfProductAssociation_Quantity();
                    case "UnitOfMeasure": return GetConcreteTypeOfProductAssociation_UnitOfMeasure();
                    case "StoreID": return GetConcreteTypeOfProductAssociation_StoreID();
                    case "Store": return GetConcreteTypeOfProductAssociation_Store();
                    case "BrandID": return GetConcreteTypeOfProductAssociation_BrandID();
                    case "Brand": return GetConcreteTypeOfProductAssociation_Brand();
                    case "TypeID": return GetConcreteTypeOfProductAssociation_TypeID();
                    case "Type": return GetConcreteTypeOfProductAssociation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfProductAssociationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductCategory_MasterID();
                    case "Master": return GetConcreteTypeOfProductCategory_Master();
                    case "SlaveID": return GetConcreteTypeOfProductCategory_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductDownloadModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfProductDownload_TypeID();
                    case "Type": return GetConcreteTypeOfProductDownload_Type();
                    case "IsAbsoluteUrl": return GetConcreteTypeOfProductDownload_IsAbsoluteUrl();
                    case "AbsoluteUrl": return GetConcreteTypeOfProductDownload_AbsoluteUrl();
                    case "RelativeUrl": return GetConcreteTypeOfProductDownload_RelativeUrl();
                    case "ProductID": return GetConcreteTypeOfProductDownload_ProductID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfProductDownloadType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfProductFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfProductFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfProductImage_TypeID();
                    case "Type": return GetConcreteTypeOfProductImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfProductImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfProductImage_Author();
                    case "MediaDate": return GetConcreteTypeOfProductImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfProductImage_Copyright();
                    case "Location": return GetConcreteTypeOfProductImage_Location();
                    case "Latitude": return GetConcreteTypeOfProductImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfProductImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfProductImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfProductImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfProductImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfProductImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfProductImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfProductImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfProductImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfProductImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfProductImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfProductImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfProductImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfProductImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfProductImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfProductImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductInventoryLocationSectionModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductInventoryLocationSection_MasterID();
                    case "Master": return GetConcreteTypeOfProductInventoryLocationSection_Master();
                    case "SlaveID": return GetConcreteTypeOfProductInventoryLocationSection_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductInventoryLocationSection_Slave();
                    case "Quantity": return GetConcreteTypeOfProductInventoryLocationSection_Quantity();
                    case "QuantityAllocated": return GetConcreteTypeOfProductInventoryLocationSection_QuantityAllocated();
                    case "QuantityPreSold": return GetConcreteTypeOfProductInventoryLocationSection_QuantityPreSold();
                    case "QuantityBroken": return GetConcreteTypeOfProductInventoryLocationSection_QuantityBroken();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductMembershipLevelModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductMembershipLevel_MasterID();
                    case "Master": return GetConcreteTypeOfProductMembershipLevel_Master();
                    case "SlaveID": return GetConcreteTypeOfProductMembershipLevel_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductMembershipLevel_Slave();
                    case "MembershipRepeatTypeID": return GetConcreteTypeOfProductMembershipLevel_MembershipRepeatTypeID();
                    case "MembershipRepeatType": return GetConcreteTypeOfProductMembershipLevel_MembershipRepeatType();
                    case "Subscriptions": return GetConcreteTypeOfProductMembershipLevel_Subscriptions();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductPricePointModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductPricePoint_MasterID();
                    case "Master": return GetConcreteTypeOfProductPricePoint_Master();
                    case "SlaveID": return GetConcreteTypeOfProductPricePoint_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductPricePoint_Slave();
                    case "StoreID": return GetConcreteTypeOfProductPricePoint_StoreID();
                    case "Store": return GetConcreteTypeOfProductPricePoint_Store();
                    case "BrandID": return GetConcreteTypeOfProductPricePoint_BrandID();
                    case "Brand": return GetConcreteTypeOfProductPricePoint_Brand();
                    case "Price": return GetConcreteTypeOfProductPricePoint_Price();
                    case "PercentDiscount": return GetConcreteTypeOfProductPricePoint_PercentDiscount();
                    case "MinQuantity": return GetConcreteTypeOfProductPricePoint_MinQuantity();
                    case "MaxQuantity": return GetConcreteTypeOfProductPricePoint_MaxQuantity();
                    case "UnitOfMeasure": return GetConcreteTypeOfProductPricePoint_UnitOfMeasure();
                    case "From": return GetConcreteTypeOfProductPricePoint_From();
                    case "To": return GetConcreteTypeOfProductPricePoint_To();
                    case "PriceRoundingID": return GetConcreteTypeOfProductPricePoint_PriceRoundingID();
                    case "PriceRounding": return GetConcreteTypeOfProductPricePoint_PriceRounding();
                    case "CurrencyID": return GetConcreteTypeOfProductPricePoint_CurrencyID();
                    case "Currency": return GetConcreteTypeOfProductPricePoint_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductRestrictionModel)))
            {
                switch (property)
                {
                    case "ProductID": return GetConcreteTypeOfProductRestriction_ProductID();
                    case "CanPurchaseInternationally": return GetConcreteTypeOfProductRestriction_CanPurchaseInternationally();
                    case "CanPurchaseDomestically": return GetConcreteTypeOfProductRestriction_CanPurchaseDomestically();
                    case "CanPurchaseIntraRegion": return GetConcreteTypeOfProductRestriction_CanPurchaseIntraRegion();
                    case "CanShipInternationally": return GetConcreteTypeOfProductRestriction_CanShipInternationally();
                    case "CanShipDomestically": return GetConcreteTypeOfProductRestriction_CanShipDomestically();
                    case "CanShipIntraRegion": return GetConcreteTypeOfProductRestriction_CanShipIntraRegion();
                    case "RestrictionsApplyToCity": return GetConcreteTypeOfProductRestriction_RestrictionsApplyToCity();
                    case "RestrictionsApplyToPostalCode": return GetConcreteTypeOfProductRestriction_RestrictionsApplyToPostalCode();
                    case "OverrideWithRoles": return GetConcreteTypeOfProductRestriction_OverrideWithRoles();
                    case "OverrideWithAccountTypeID": return GetConcreteTypeOfProductRestriction_OverrideWithAccountTypeID();
                    case "OverrideWithAccountType": return GetConcreteTypeOfProductRestriction_OverrideWithAccountType();
                    case "RestrictionsApplyToCountryID": return GetConcreteTypeOfProductRestriction_RestrictionsApplyToCountryID();
                    case "RestrictionsApplyToCountry": return GetConcreteTypeOfProductRestriction_RestrictionsApplyToCountry();
                    case "RestrictionsApplyToRegionID": return GetConcreteTypeOfProductRestriction_RestrictionsApplyToRegionID();
                    case "RestrictionsApplyToRegion": return GetConcreteTypeOfProductRestriction_RestrictionsApplyToRegion();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductShipCarrierMethod_MasterID();
                    case "Master": return GetConcreteTypeOfProductShipCarrierMethod_Master();
                    case "SlaveID": return GetConcreteTypeOfProductShipCarrierMethod_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductShipCarrierMethod_Slave();
                    case "StoreID": return GetConcreteTypeOfProductShipCarrierMethod_StoreID();
                    case "Store": return GetConcreteTypeOfProductShipCarrierMethod_Store();
                    case "BrandID": return GetConcreteTypeOfProductShipCarrierMethod_BrandID();
                    case "Brand": return GetConcreteTypeOfProductShipCarrierMethod_Brand();
                    case "MinQuantity": return GetConcreteTypeOfProductShipCarrierMethod_MinQuantity();
                    case "MaxQuantity": return GetConcreteTypeOfProductShipCarrierMethod_MaxQuantity();
                    case "From": return GetConcreteTypeOfProductShipCarrierMethod_From();
                    case "To": return GetConcreteTypeOfProductShipCarrierMethod_To();
                    case "UnitOfMeasure": return GetConcreteTypeOfProductShipCarrierMethod_UnitOfMeasure();
                    case "Price": return GetConcreteTypeOfProductShipCarrierMethod_Price();
                    case "CurrencyID": return GetConcreteTypeOfProductShipCarrierMethod_CurrencyID();
                    case "Currency": return GetConcreteTypeOfProductShipCarrierMethod_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfProductStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductSubscriptionTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfProductSubscriptionType_MasterID();
                    case "Master": return GetConcreteTypeOfProductSubscriptionType_Master();
                    case "SlaveID": return GetConcreteTypeOfProductSubscriptionType_SlaveID();
                    case "Slave": return GetConcreteTypeOfProductSubscriptionType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfProductType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Purchasing
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetConcreteTypeOfPurchaseOrder_DueDate();
                    case "SubtotalItems": return GetConcreteTypeOfPurchaseOrder_SubtotalItems();
                    case "SubtotalShipping": return GetConcreteTypeOfPurchaseOrder_SubtotalShipping();
                    case "SubtotalTaxes": return GetConcreteTypeOfPurchaseOrder_SubtotalTaxes();
                    case "SubtotalFees": return GetConcreteTypeOfPurchaseOrder_SubtotalFees();
                    case "SubtotalHandling": return GetConcreteTypeOfPurchaseOrder_SubtotalHandling();
                    case "SubtotalDiscounts": return GetConcreteTypeOfPurchaseOrder_SubtotalDiscounts();
                    case "Total": return GetConcreteTypeOfPurchaseOrder_Total();
                    case "ShippingSameAsBilling": return GetConcreteTypeOfPurchaseOrder_ShippingSameAsBilling();
                    case "BillingContactID": return GetConcreteTypeOfPurchaseOrder_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfPurchaseOrder_BillingContact();
                    case "ShippingContactID": return GetConcreteTypeOfPurchaseOrder_ShippingContactID();
                    case "ShippingContact": return GetConcreteTypeOfPurchaseOrder_ShippingContact();
                    case "StatusID": return GetConcreteTypeOfPurchaseOrder_StatusID();
                    case "Status": return GetConcreteTypeOfPurchaseOrder_Status();
                    case "StateID": return GetConcreteTypeOfPurchaseOrder_StateID();
                    case "State": return GetConcreteTypeOfPurchaseOrder_State();
                    case "TypeID": return GetConcreteTypeOfPurchaseOrder_TypeID();
                    case "Type": return GetConcreteTypeOfPurchaseOrder_Type();
                    case "UserID": return GetConcreteTypeOfPurchaseOrder_UserID();
                    case "User": return GetConcreteTypeOfPurchaseOrder_User();
                    case "AccountID": return GetConcreteTypeOfPurchaseOrder_AccountID();
                    case "Account": return GetConcreteTypeOfPurchaseOrder_Account();
                    case "SalesItems": return GetConcreteTypeOfPurchaseOrder_SalesItems();
                    case "Discounts": return GetConcreteTypeOfPurchaseOrder_Discounts();
                    case "StoredFiles": return GetConcreteTypeOfPurchaseOrder_StoredFiles();
                    case "Contacts": return GetConcreteTypeOfPurchaseOrder_Contacts();
                    case "RateQuotes": return GetConcreteTypeOfPurchaseOrder_RateQuotes();
                    case "Notes": return GetConcreteTypeOfPurchaseOrder_Notes();
                    case "StoreID": return GetConcreteTypeOfPurchaseOrder_StoreID();
                    case "Store": return GetConcreteTypeOfPurchaseOrder_Store();
                    case "BrandID": return GetConcreteTypeOfPurchaseOrder_BrandID();
                    case "Brand": return GetConcreteTypeOfPurchaseOrder_Brand();
                    case "TrackingNumber": return GetConcreteTypeOfPurchaseOrder_TrackingNumber();
                    case "ReleaseDate": return GetConcreteTypeOfPurchaseOrder_ReleaseDate();
                    case "EstimatedReceiptDate": return GetConcreteTypeOfPurchaseOrder_EstimatedReceiptDate();
                    case "ActualReceiptDate": return GetConcreteTypeOfPurchaseOrder_ActualReceiptDate();
                    case "InventoryLocationID": return GetConcreteTypeOfPurchaseOrder_InventoryLocationID();
                    case "InventoryLocation": return GetConcreteTypeOfPurchaseOrder_InventoryLocation();
                    case "ShipCarrierID": return GetConcreteTypeOfPurchaseOrder_ShipCarrierID();
                    case "ShipCarrier": return GetConcreteTypeOfPurchaseOrder_ShipCarrier();
                    case "VendorID": return GetConcreteTypeOfPurchaseOrder_VendorID();
                    case "Vendor": return GetConcreteTypeOfPurchaseOrder_Vendor();
                    case "SalesGroupID": return GetConcreteTypeOfPurchaseOrder_SalesGroupID();
                    case "SalesGroup": return GetConcreteTypeOfPurchaseOrder_SalesGroup();
                    case "AssociatedSalesOrders": return GetConcreteTypeOfPurchaseOrder_AssociatedSalesOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPurchaseOrderContact_MasterID();
                    case "Master": return GetConcreteTypeOfPurchaseOrderContact_Master();
                    case "SlaveID": return GetConcreteTypeOfPurchaseOrderContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfPurchaseOrderContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPurchaseOrderFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfPurchaseOrderFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfPurchaseOrderFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfPurchaseOrderFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetConcreteTypeOfPurchaseOrderItem_Sku();
                    case "UnitOfMeasure": return GetConcreteTypeOfPurchaseOrderItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetConcreteTypeOfPurchaseOrderItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetConcreteTypeOfPurchaseOrderItem_Quantity();
                    case "QuantityBackOrdered": return GetConcreteTypeOfPurchaseOrderItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetConcreteTypeOfPurchaseOrderItem_QuantityPreSold();
                    case "TotalQuantity": return GetConcreteTypeOfPurchaseOrderItem_TotalQuantity();
                    case "UnitCorePrice": return GetConcreteTypeOfPurchaseOrderItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetConcreteTypeOfPurchaseOrderItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetConcreteTypeOfPurchaseOrderItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetConcreteTypeOfPurchaseOrderItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetConcreteTypeOfPurchaseOrderItem_MasterID();
                    case "ProductID": return GetConcreteTypeOfPurchaseOrderItem_ProductID();
                    case "UserID": return GetConcreteTypeOfPurchaseOrderItem_UserID();
                    case "User": return GetConcreteTypeOfPurchaseOrderItem_User();
                    case "OriginalCurrencyID": return GetConcreteTypeOfPurchaseOrderItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetConcreteTypeOfPurchaseOrderItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetConcreteTypeOfPurchaseOrderItem_SellingCurrencyID();
                    case "SellingCurrency": return GetConcreteTypeOfPurchaseOrderItem_SellingCurrency();
                    case "Discounts": return GetConcreteTypeOfPurchaseOrderItem_Discounts();
                    case "Targets": return GetConcreteTypeOfPurchaseOrderItem_Targets();
                    case "Notes": return GetConcreteTypeOfPurchaseOrderItem_Notes();
                    case "DateReceived": return GetConcreteTypeOfPurchaseOrderItem_DateReceived();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetConcreteTypeOfPurchaseOrderItemTarget_Quantity();
                    case "NothingToShip": return GetConcreteTypeOfPurchaseOrderItemTarget_NothingToShip();
                    case "MasterID": return GetConcreteTypeOfPurchaseOrderItemTarget_MasterID();
                    case "TypeID": return GetConcreteTypeOfPurchaseOrderItemTarget_TypeID();
                    case "Type": return GetConcreteTypeOfPurchaseOrderItemTarget_Type();
                    case "DestinationContactID": return GetConcreteTypeOfPurchaseOrderItemTarget_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfPurchaseOrderItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetConcreteTypeOfPurchaseOrderItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetConcreteTypeOfPurchaseOrderItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetConcreteTypeOfPurchaseOrderItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetConcreteTypeOfPurchaseOrderItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetConcreteTypeOfPurchaseOrderItemTarget_BrandProductID();
                    case "BrandProduct": return GetConcreteTypeOfPurchaseOrderItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetConcreteTypeOfPurchaseOrderItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetConcreteTypeOfPurchaseOrderItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetConcreteTypeOfPurchaseOrderItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetConcreteTypeOfPurchaseOrderItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPurchaseOrderState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPurchaseOrderStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPurchaseOrderType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderPurchaseOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesOrderPurchaseOrder_MasterID();
                    case "Master": return GetConcreteTypeOfSalesOrderPurchaseOrder_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesOrderPurchaseOrder_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesOrderPurchaseOrder_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Quoting
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetConcreteTypeOfSalesQuote_DueDate();
                    case "SubtotalItems": return GetConcreteTypeOfSalesQuote_SubtotalItems();
                    case "SubtotalShipping": return GetConcreteTypeOfSalesQuote_SubtotalShipping();
                    case "SubtotalTaxes": return GetConcreteTypeOfSalesQuote_SubtotalTaxes();
                    case "SubtotalFees": return GetConcreteTypeOfSalesQuote_SubtotalFees();
                    case "SubtotalHandling": return GetConcreteTypeOfSalesQuote_SubtotalHandling();
                    case "SubtotalDiscounts": return GetConcreteTypeOfSalesQuote_SubtotalDiscounts();
                    case "Total": return GetConcreteTypeOfSalesQuote_Total();
                    case "ShippingSameAsBilling": return GetConcreteTypeOfSalesQuote_ShippingSameAsBilling();
                    case "BillingContactID": return GetConcreteTypeOfSalesQuote_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfSalesQuote_BillingContact();
                    case "ShippingContactID": return GetConcreteTypeOfSalesQuote_ShippingContactID();
                    case "ShippingContact": return GetConcreteTypeOfSalesQuote_ShippingContact();
                    case "StatusID": return GetConcreteTypeOfSalesQuote_StatusID();
                    case "Status": return GetConcreteTypeOfSalesQuote_Status();
                    case "StateID": return GetConcreteTypeOfSalesQuote_StateID();
                    case "State": return GetConcreteTypeOfSalesQuote_State();
                    case "TypeID": return GetConcreteTypeOfSalesQuote_TypeID();
                    case "Type": return GetConcreteTypeOfSalesQuote_Type();
                    case "UserID": return GetConcreteTypeOfSalesQuote_UserID();
                    case "User": return GetConcreteTypeOfSalesQuote_User();
                    case "AccountID": return GetConcreteTypeOfSalesQuote_AccountID();
                    case "Account": return GetConcreteTypeOfSalesQuote_Account();
                    case "SalesItems": return GetConcreteTypeOfSalesQuote_SalesItems();
                    case "Discounts": return GetConcreteTypeOfSalesQuote_Discounts();
                    case "StoredFiles": return GetConcreteTypeOfSalesQuote_StoredFiles();
                    case "Contacts": return GetConcreteTypeOfSalesQuote_Contacts();
                    case "RateQuotes": return GetConcreteTypeOfSalesQuote_RateQuotes();
                    case "Notes": return GetConcreteTypeOfSalesQuote_Notes();
                    case "StoreID": return GetConcreteTypeOfSalesQuote_StoreID();
                    case "Store": return GetConcreteTypeOfSalesQuote_Store();
                    case "BrandID": return GetConcreteTypeOfSalesQuote_BrandID();
                    case "Brand": return GetConcreteTypeOfSalesQuote_Brand();
                    case "BalanceDue": return GetConcreteTypeOfSalesQuote_BalanceDue();
                    case "ResponseAsVendorID": return GetConcreteTypeOfSalesQuote_ResponseAsVendorID();
                    case "ResponseAsVendor": return GetConcreteTypeOfSalesQuote_ResponseAsVendor();
                    case "ResponseAsStoreID": return GetConcreteTypeOfSalesQuote_ResponseAsStoreID();
                    case "ResponseAsStore": return GetConcreteTypeOfSalesQuote_ResponseAsStore();
                    case "SalesGroupAsMasterID": return GetConcreteTypeOfSalesQuote_SalesGroupAsMasterID();
                    case "SalesGroupAsResponseID": return GetConcreteTypeOfSalesQuote_SalesGroupAsResponseID();
                    case "AssociatedSalesOrders": return GetConcreteTypeOfSalesQuote_AssociatedSalesOrders();
                    case "SalesQuoteCategories": return GetConcreteTypeOfSalesQuote_SalesQuoteCategories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesQuoteCategory_MasterID();
                    case "Master": return GetConcreteTypeOfSalesQuoteCategory_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesQuoteCategory_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesQuoteCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesQuoteContact_MasterID();
                    case "Master": return GetConcreteTypeOfSalesQuoteContact_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesQuoteContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesQuoteContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesQuoteFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSalesQuoteFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesQuoteFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfSalesQuoteFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetConcreteTypeOfSalesQuoteItem_Sku();
                    case "UnitOfMeasure": return GetConcreteTypeOfSalesQuoteItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetConcreteTypeOfSalesQuoteItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetConcreteTypeOfSalesQuoteItem_Quantity();
                    case "QuantityBackOrdered": return GetConcreteTypeOfSalesQuoteItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetConcreteTypeOfSalesQuoteItem_QuantityPreSold();
                    case "TotalQuantity": return GetConcreteTypeOfSalesQuoteItem_TotalQuantity();
                    case "UnitCorePrice": return GetConcreteTypeOfSalesQuoteItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetConcreteTypeOfSalesQuoteItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetConcreteTypeOfSalesQuoteItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetConcreteTypeOfSalesQuoteItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetConcreteTypeOfSalesQuoteItem_MasterID();
                    case "ProductID": return GetConcreteTypeOfSalesQuoteItem_ProductID();
                    case "UserID": return GetConcreteTypeOfSalesQuoteItem_UserID();
                    case "User": return GetConcreteTypeOfSalesQuoteItem_User();
                    case "OriginalCurrencyID": return GetConcreteTypeOfSalesQuoteItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetConcreteTypeOfSalesQuoteItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetConcreteTypeOfSalesQuoteItem_SellingCurrencyID();
                    case "SellingCurrency": return GetConcreteTypeOfSalesQuoteItem_SellingCurrency();
                    case "Discounts": return GetConcreteTypeOfSalesQuoteItem_Discounts();
                    case "Targets": return GetConcreteTypeOfSalesQuoteItem_Targets();
                    case "Notes": return GetConcreteTypeOfSalesQuoteItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetConcreteTypeOfSalesQuoteItemTarget_Quantity();
                    case "NothingToShip": return GetConcreteTypeOfSalesQuoteItemTarget_NothingToShip();
                    case "MasterID": return GetConcreteTypeOfSalesQuoteItemTarget_MasterID();
                    case "TypeID": return GetConcreteTypeOfSalesQuoteItemTarget_TypeID();
                    case "Type": return GetConcreteTypeOfSalesQuoteItemTarget_Type();
                    case "DestinationContactID": return GetConcreteTypeOfSalesQuoteItemTarget_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfSalesQuoteItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetConcreteTypeOfSalesQuoteItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetConcreteTypeOfSalesQuoteItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetConcreteTypeOfSalesQuoteItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetConcreteTypeOfSalesQuoteItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetConcreteTypeOfSalesQuoteItemTarget_BrandProductID();
                    case "BrandProduct": return GetConcreteTypeOfSalesQuoteItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetConcreteTypeOfSalesQuoteItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetConcreteTypeOfSalesQuoteItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetConcreteTypeOfSalesQuoteItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetConcreteTypeOfSalesQuoteItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteSalesOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesQuoteSalesOrder_MasterID();
                    case "Master": return GetConcreteTypeOfSalesQuoteSalesOrder_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesQuoteSalesOrder_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesQuoteSalesOrder_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesQuoteState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesQuoteStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesQuoteType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Reporting
            if (type.GetInterfaces().Any(x => x == typeof(IReportTypeModel)))
            {
                switch (property)
                {
                    case "Template": return GetConcreteTypeOfReportType_Template();
                    case "TranslationKey": return GetConcreteTypeOfReportType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Returning
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetConcreteTypeOfSalesReturn_DueDate();
                    case "SubtotalItems": return GetConcreteTypeOfSalesReturn_SubtotalItems();
                    case "SubtotalShipping": return GetConcreteTypeOfSalesReturn_SubtotalShipping();
                    case "SubtotalTaxes": return GetConcreteTypeOfSalesReturn_SubtotalTaxes();
                    case "SubtotalFees": return GetConcreteTypeOfSalesReturn_SubtotalFees();
                    case "SubtotalHandling": return GetConcreteTypeOfSalesReturn_SubtotalHandling();
                    case "SubtotalDiscounts": return GetConcreteTypeOfSalesReturn_SubtotalDiscounts();
                    case "Total": return GetConcreteTypeOfSalesReturn_Total();
                    case "ShippingSameAsBilling": return GetConcreteTypeOfSalesReturn_ShippingSameAsBilling();
                    case "BillingContactID": return GetConcreteTypeOfSalesReturn_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfSalesReturn_BillingContact();
                    case "ShippingContactID": return GetConcreteTypeOfSalesReturn_ShippingContactID();
                    case "ShippingContact": return GetConcreteTypeOfSalesReturn_ShippingContact();
                    case "StatusID": return GetConcreteTypeOfSalesReturn_StatusID();
                    case "Status": return GetConcreteTypeOfSalesReturn_Status();
                    case "StateID": return GetConcreteTypeOfSalesReturn_StateID();
                    case "State": return GetConcreteTypeOfSalesReturn_State();
                    case "TypeID": return GetConcreteTypeOfSalesReturn_TypeID();
                    case "Type": return GetConcreteTypeOfSalesReturn_Type();
                    case "UserID": return GetConcreteTypeOfSalesReturn_UserID();
                    case "User": return GetConcreteTypeOfSalesReturn_User();
                    case "AccountID": return GetConcreteTypeOfSalesReturn_AccountID();
                    case "Account": return GetConcreteTypeOfSalesReturn_Account();
                    case "SalesItems": return GetConcreteTypeOfSalesReturn_SalesItems();
                    case "Discounts": return GetConcreteTypeOfSalesReturn_Discounts();
                    case "StoredFiles": return GetConcreteTypeOfSalesReturn_StoredFiles();
                    case "Contacts": return GetConcreteTypeOfSalesReturn_Contacts();
                    case "RateQuotes": return GetConcreteTypeOfSalesReturn_RateQuotes();
                    case "Notes": return GetConcreteTypeOfSalesReturn_Notes();
                    case "StoreID": return GetConcreteTypeOfSalesReturn_StoreID();
                    case "Store": return GetConcreteTypeOfSalesReturn_Store();
                    case "BrandID": return GetConcreteTypeOfSalesReturn_BrandID();
                    case "Brand": return GetConcreteTypeOfSalesReturn_Brand();
                    case "PurchaseOrderNumber": return GetConcreteTypeOfSalesReturn_PurchaseOrderNumber();
                    case "TrackingNumber": return GetConcreteTypeOfSalesReturn_TrackingNumber();
                    case "RefundTransactionID": return GetConcreteTypeOfSalesReturn_RefundTransactionID();
                    case "TaxTransactionID": return GetConcreteTypeOfSalesReturn_TaxTransactionID();
                    case "BalanceDue": return GetConcreteTypeOfSalesReturn_BalanceDue();
                    case "RefundAmount": return GetConcreteTypeOfSalesReturn_RefundAmount();
                    case "ReturnApprovedDate": return GetConcreteTypeOfSalesReturn_ReturnApprovedDate();
                    case "ReturnCommitmentDate": return GetConcreteTypeOfSalesReturn_ReturnCommitmentDate();
                    case "RequiredShipDate": return GetConcreteTypeOfSalesReturn_RequiredShipDate();
                    case "RequestedShipDate": return GetConcreteTypeOfSalesReturn_RequestedShipDate();
                    case "ActualShipDate": return GetConcreteTypeOfSalesReturn_ActualShipDate();
                    case "SalesGroupID": return GetConcreteTypeOfSalesReturn_SalesGroupID();
                    case "SalesGroup": return GetConcreteTypeOfSalesReturn_SalesGroup();
                    case "SalesReturnPayments": return GetConcreteTypeOfSalesReturn_SalesReturnPayments();
                    case "AssociatedSalesOrders": return GetConcreteTypeOfSalesReturn_AssociatedSalesOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesReturnContact_MasterID();
                    case "Master": return GetConcreteTypeOfSalesReturnContact_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesReturnContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesReturnContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesReturnFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSalesReturnFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesReturnFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfSalesReturnFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetConcreteTypeOfSalesReturnItem_Sku();
                    case "UnitOfMeasure": return GetConcreteTypeOfSalesReturnItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetConcreteTypeOfSalesReturnItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetConcreteTypeOfSalesReturnItem_Quantity();
                    case "QuantityBackOrdered": return GetConcreteTypeOfSalesReturnItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetConcreteTypeOfSalesReturnItem_QuantityPreSold();
                    case "TotalQuantity": return GetConcreteTypeOfSalesReturnItem_TotalQuantity();
                    case "UnitCorePrice": return GetConcreteTypeOfSalesReturnItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetConcreteTypeOfSalesReturnItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetConcreteTypeOfSalesReturnItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetConcreteTypeOfSalesReturnItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetConcreteTypeOfSalesReturnItem_MasterID();
                    case "ProductID": return GetConcreteTypeOfSalesReturnItem_ProductID();
                    case "UserID": return GetConcreteTypeOfSalesReturnItem_UserID();
                    case "User": return GetConcreteTypeOfSalesReturnItem_User();
                    case "OriginalCurrencyID": return GetConcreteTypeOfSalesReturnItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetConcreteTypeOfSalesReturnItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetConcreteTypeOfSalesReturnItem_SellingCurrencyID();
                    case "SellingCurrency": return GetConcreteTypeOfSalesReturnItem_SellingCurrency();
                    case "Discounts": return GetConcreteTypeOfSalesReturnItem_Discounts();
                    case "Targets": return GetConcreteTypeOfSalesReturnItem_Targets();
                    case "Notes": return GetConcreteTypeOfSalesReturnItem_Notes();
                    case "RestockingFeeAmount": return GetConcreteTypeOfSalesReturnItem_RestockingFeeAmount();
                    case "SalesReturnReasonID": return GetConcreteTypeOfSalesReturnItem_SalesReturnReasonID();
                    case "SalesReturnReason": return GetConcreteTypeOfSalesReturnItem_SalesReturnReason();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetConcreteTypeOfSalesReturnItemTarget_Quantity();
                    case "NothingToShip": return GetConcreteTypeOfSalesReturnItemTarget_NothingToShip();
                    case "MasterID": return GetConcreteTypeOfSalesReturnItemTarget_MasterID();
                    case "TypeID": return GetConcreteTypeOfSalesReturnItemTarget_TypeID();
                    case "Type": return GetConcreteTypeOfSalesReturnItemTarget_Type();
                    case "DestinationContactID": return GetConcreteTypeOfSalesReturnItemTarget_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfSalesReturnItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetConcreteTypeOfSalesReturnItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetConcreteTypeOfSalesReturnItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetConcreteTypeOfSalesReturnItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetConcreteTypeOfSalesReturnItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetConcreteTypeOfSalesReturnItemTarget_BrandProductID();
                    case "BrandProduct": return GetConcreteTypeOfSalesReturnItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetConcreteTypeOfSalesReturnItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetConcreteTypeOfSalesReturnItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetConcreteTypeOfSalesReturnItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetConcreteTypeOfSalesReturnItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnReasonModel)))
            {
                switch (property)
                {
                    case "IsRestockingFeeApplicable": return GetConcreteTypeOfSalesReturnReason_IsRestockingFeeApplicable();
                    case "RestockingFeePercent": return GetConcreteTypeOfSalesReturnReason_RestockingFeePercent();
                    case "RestockingFeeAmount": return GetConcreteTypeOfSalesReturnReason_RestockingFeeAmount();
                    case "RestockingFeeAmountCurrencyID": return GetConcreteTypeOfSalesReturnReason_RestockingFeeAmountCurrencyID();
                    case "RestockingFeeAmountCurrency": return GetConcreteTypeOfSalesReturnReason_RestockingFeeAmountCurrency();
                    case "TranslationKey": return GetConcreteTypeOfSalesReturnReason_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnSalesOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSalesReturnSalesOrder_MasterID();
                    case "Master": return GetConcreteTypeOfSalesReturnSalesOrder_Master();
                    case "SlaveID": return GetConcreteTypeOfSalesReturnSalesOrder_SlaveID();
                    case "Slave": return GetConcreteTypeOfSalesReturnSalesOrder_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesReturnState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesReturnStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesReturnType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Reviews
            if (type.GetInterfaces().Any(x => x == typeof(IReviewModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfReview_TypeID();
                    case "Type": return GetConcreteTypeOfReview_Type();
                    case "Value": return GetConcreteTypeOfReview_Value();
                    case "Comment": return GetConcreteTypeOfReview_Comment();
                    case "Approved": return GetConcreteTypeOfReview_Approved();
                    case "ApprovedDate": return GetConcreteTypeOfReview_ApprovedDate();
                    case "Title": return GetConcreteTypeOfReview_Title();
                    case "Location": return GetConcreteTypeOfReview_Location();
                    case "SubmittedByUserID": return GetConcreteTypeOfReview_SubmittedByUserID();
                    case "SubmittedByUser": return GetConcreteTypeOfReview_SubmittedByUser();
                    case "ApprovedByUserID": return GetConcreteTypeOfReview_ApprovedByUserID();
                    case "ApprovedByUser": return GetConcreteTypeOfReview_ApprovedByUser();
                    case "CategoryID": return GetConcreteTypeOfReview_CategoryID();
                    case "Category": return GetConcreteTypeOfReview_Category();
                    case "ManufacturerID": return GetConcreteTypeOfReview_ManufacturerID();
                    case "Manufacturer": return GetConcreteTypeOfReview_Manufacturer();
                    case "ProductID": return GetConcreteTypeOfReview_ProductID();
                    case "Product": return GetConcreteTypeOfReview_Product();
                    case "StoreID": return GetConcreteTypeOfReview_StoreID();
                    case "Store": return GetConcreteTypeOfReview_Store();
                    case "UserID": return GetConcreteTypeOfReview_UserID();
                    case "User": return GetConcreteTypeOfReview_User();
                    case "VendorID": return GetConcreteTypeOfReview_VendorID();
                    case "Vendor": return GetConcreteTypeOfReview_Vendor();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfReviewType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Sales
            if (type.GetInterfaces().Any(x => x == typeof(ISalesGroupModel)))
            {
                switch (property)
                {
                    case "Notes": return GetConcreteTypeOfSalesGroup_Notes();
                    case "AccountID": return GetConcreteTypeOfSalesGroup_AccountID();
                    case "Account": return GetConcreteTypeOfSalesGroup_Account();
                    case "BillingContactID": return GetConcreteTypeOfSalesGroup_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfSalesGroup_BillingContact();
                    case "SalesQuoteResponses": return GetConcreteTypeOfSalesGroup_SalesQuoteResponses();
                    case "SalesQuoteMasters": return GetConcreteTypeOfSalesGroup_SalesQuoteMasters();
                    case "SubSalesOrders": return GetConcreteTypeOfSalesGroup_SubSalesOrders();
                    case "SalesOrderMasters": return GetConcreteTypeOfSalesGroup_SalesOrderMasters();
                    case "PurchaseOrders": return GetConcreteTypeOfSalesGroup_PurchaseOrders();
                    case "SalesInvoices": return GetConcreteTypeOfSalesGroup_SalesInvoices();
                    case "SalesReturns": return GetConcreteTypeOfSalesGroup_SalesReturns();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSalesItemTargetType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Sampling
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetConcreteTypeOfSampleRequest_DueDate();
                    case "SubtotalItems": return GetConcreteTypeOfSampleRequest_SubtotalItems();
                    case "SubtotalShipping": return GetConcreteTypeOfSampleRequest_SubtotalShipping();
                    case "SubtotalTaxes": return GetConcreteTypeOfSampleRequest_SubtotalTaxes();
                    case "SubtotalFees": return GetConcreteTypeOfSampleRequest_SubtotalFees();
                    case "SubtotalHandling": return GetConcreteTypeOfSampleRequest_SubtotalHandling();
                    case "SubtotalDiscounts": return GetConcreteTypeOfSampleRequest_SubtotalDiscounts();
                    case "Total": return GetConcreteTypeOfSampleRequest_Total();
                    case "ShippingSameAsBilling": return GetConcreteTypeOfSampleRequest_ShippingSameAsBilling();
                    case "BillingContactID": return GetConcreteTypeOfSampleRequest_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfSampleRequest_BillingContact();
                    case "ShippingContactID": return GetConcreteTypeOfSampleRequest_ShippingContactID();
                    case "ShippingContact": return GetConcreteTypeOfSampleRequest_ShippingContact();
                    case "StatusID": return GetConcreteTypeOfSampleRequest_StatusID();
                    case "Status": return GetConcreteTypeOfSampleRequest_Status();
                    case "StateID": return GetConcreteTypeOfSampleRequest_StateID();
                    case "State": return GetConcreteTypeOfSampleRequest_State();
                    case "TypeID": return GetConcreteTypeOfSampleRequest_TypeID();
                    case "Type": return GetConcreteTypeOfSampleRequest_Type();
                    case "UserID": return GetConcreteTypeOfSampleRequest_UserID();
                    case "User": return GetConcreteTypeOfSampleRequest_User();
                    case "AccountID": return GetConcreteTypeOfSampleRequest_AccountID();
                    case "Account": return GetConcreteTypeOfSampleRequest_Account();
                    case "SalesItems": return GetConcreteTypeOfSampleRequest_SalesItems();
                    case "Discounts": return GetConcreteTypeOfSampleRequest_Discounts();
                    case "StoredFiles": return GetConcreteTypeOfSampleRequest_StoredFiles();
                    case "Contacts": return GetConcreteTypeOfSampleRequest_Contacts();
                    case "RateQuotes": return GetConcreteTypeOfSampleRequest_RateQuotes();
                    case "Notes": return GetConcreteTypeOfSampleRequest_Notes();
                    case "StoreID": return GetConcreteTypeOfSampleRequest_StoreID();
                    case "Store": return GetConcreteTypeOfSampleRequest_Store();
                    case "BrandID": return GetConcreteTypeOfSampleRequest_BrandID();
                    case "Brand": return GetConcreteTypeOfSampleRequest_Brand();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSampleRequestContact_MasterID();
                    case "Master": return GetConcreteTypeOfSampleRequestContact_Master();
                    case "SlaveID": return GetConcreteTypeOfSampleRequestContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfSampleRequestContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSampleRequestFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfSampleRequestFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfSampleRequestFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfSampleRequestFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetConcreteTypeOfSampleRequestItem_Sku();
                    case "UnitOfMeasure": return GetConcreteTypeOfSampleRequestItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetConcreteTypeOfSampleRequestItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetConcreteTypeOfSampleRequestItem_Quantity();
                    case "QuantityBackOrdered": return GetConcreteTypeOfSampleRequestItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetConcreteTypeOfSampleRequestItem_QuantityPreSold();
                    case "TotalQuantity": return GetConcreteTypeOfSampleRequestItem_TotalQuantity();
                    case "UnitCorePrice": return GetConcreteTypeOfSampleRequestItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetConcreteTypeOfSampleRequestItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetConcreteTypeOfSampleRequestItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetConcreteTypeOfSampleRequestItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetConcreteTypeOfSampleRequestItem_MasterID();
                    case "ProductID": return GetConcreteTypeOfSampleRequestItem_ProductID();
                    case "UserID": return GetConcreteTypeOfSampleRequestItem_UserID();
                    case "User": return GetConcreteTypeOfSampleRequestItem_User();
                    case "OriginalCurrencyID": return GetConcreteTypeOfSampleRequestItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetConcreteTypeOfSampleRequestItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetConcreteTypeOfSampleRequestItem_SellingCurrencyID();
                    case "SellingCurrency": return GetConcreteTypeOfSampleRequestItem_SellingCurrency();
                    case "Discounts": return GetConcreteTypeOfSampleRequestItem_Discounts();
                    case "Targets": return GetConcreteTypeOfSampleRequestItem_Targets();
                    case "Notes": return GetConcreteTypeOfSampleRequestItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetConcreteTypeOfSampleRequestItemTarget_Quantity();
                    case "NothingToShip": return GetConcreteTypeOfSampleRequestItemTarget_NothingToShip();
                    case "MasterID": return GetConcreteTypeOfSampleRequestItemTarget_MasterID();
                    case "TypeID": return GetConcreteTypeOfSampleRequestItemTarget_TypeID();
                    case "Type": return GetConcreteTypeOfSampleRequestItemTarget_Type();
                    case "DestinationContactID": return GetConcreteTypeOfSampleRequestItemTarget_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfSampleRequestItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetConcreteTypeOfSampleRequestItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetConcreteTypeOfSampleRequestItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetConcreteTypeOfSampleRequestItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetConcreteTypeOfSampleRequestItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetConcreteTypeOfSampleRequestItemTarget_BrandProductID();
                    case "BrandProduct": return GetConcreteTypeOfSampleRequestItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetConcreteTypeOfSampleRequestItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetConcreteTypeOfSampleRequestItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetConcreteTypeOfSampleRequestItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetConcreteTypeOfSampleRequestItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSampleRequestState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSampleRequestStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSampleRequestType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Scouting
            if (type.GetInterfaces().Any(x => x == typeof(IScoutModel)))
            {
                switch (property)
                {
                    case "YearMin": return GetConcreteTypeOfScout_YearMin();
                    case "YearMax": return GetConcreteTypeOfScout_YearMax();
                    case "PriceMin": return GetConcreteTypeOfScout_PriceMin();
                    case "PriceMax": return GetConcreteTypeOfScout_PriceMax();
                    case "HoursUsedMin": return GetConcreteTypeOfScout_HoursUsedMin();
                    case "HoursUsedMax": return GetConcreteTypeOfScout_HoursUsedMax();
                    case "DistanceUsedMin": return GetConcreteTypeOfScout_DistanceUsedMin();
                    case "DistanceUsedMax": return GetConcreteTypeOfScout_DistanceUsedMax();
                    case "DistanceUnitOfMeasure": return GetConcreteTypeOfScout_DistanceUnitOfMeasure();
                    case "CreatedByUserID": return GetConcreteTypeOfScout_CreatedByUserID();
                    case "CreatedByUser": return GetConcreteTypeOfScout_CreatedByUser();
                    case "Categories": return GetConcreteTypeOfScout_Categories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IScoutCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfScoutCategory_MasterID();
                    case "Master": return GetConcreteTypeOfScoutCategory_Master();
                    case "SlaveID": return GetConcreteTypeOfScoutCategory_SlaveID();
                    case "Slave": return GetConcreteTypeOfScoutCategory_Slave();
                    case "TypeID": return GetConcreteTypeOfScoutCategory_TypeID();
                    case "Type": return GetConcreteTypeOfScoutCategory_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfScoutCategoryType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Shipping
            if (type.GetInterfaces().Any(x => x == typeof(IPackageModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfPackage_TypeID();
                    case "Type": return GetConcreteTypeOfPackage_Type();
                    case "Width": return GetConcreteTypeOfPackage_Width();
                    case "WidthUnitOfMeasure": return GetConcreteTypeOfPackage_WidthUnitOfMeasure();
                    case "Depth": return GetConcreteTypeOfPackage_Depth();
                    case "DepthUnitOfMeasure": return GetConcreteTypeOfPackage_DepthUnitOfMeasure();
                    case "Height": return GetConcreteTypeOfPackage_Height();
                    case "HeightUnitOfMeasure": return GetConcreteTypeOfPackage_HeightUnitOfMeasure();
                    case "Weight": return GetConcreteTypeOfPackage_Weight();
                    case "WeightUnitOfMeasure": return GetConcreteTypeOfPackage_WeightUnitOfMeasure();
                    case "DimensionalWeight": return GetConcreteTypeOfPackage_DimensionalWeight();
                    case "DimensionalWeightUnitOfMeasure": return GetConcreteTypeOfPackage_DimensionalWeightUnitOfMeasure();
                    case "IsCustom": return GetConcreteTypeOfPackage_IsCustom();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPackageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRateQuoteModel)))
            {
                switch (property)
                {
                    case "EstimatedDeliveryDate": return GetConcreteTypeOfRateQuote_EstimatedDeliveryDate();
                    case "TargetShippingDate": return GetConcreteTypeOfRateQuote_TargetShippingDate();
                    case "Rate": return GetConcreteTypeOfRateQuote_Rate();
                    case "CartHash": return GetConcreteTypeOfRateQuote_CartHash();
                    case "RateTimestamp": return GetConcreteTypeOfRateQuote_RateTimestamp();
                    case "Selected": return GetConcreteTypeOfRateQuote_Selected();
                    case "ShipCarrierMethodID": return GetConcreteTypeOfRateQuote_ShipCarrierMethodID();
                    case "ShipCarrierMethod": return GetConcreteTypeOfRateQuote_ShipCarrierMethod();
                    case "CartID": return GetConcreteTypeOfRateQuote_CartID();
                    case "SampleRequestID": return GetConcreteTypeOfRateQuote_SampleRequestID();
                    case "SalesQuoteID": return GetConcreteTypeOfRateQuote_SalesQuoteID();
                    case "SalesOrderID": return GetConcreteTypeOfRateQuote_SalesOrderID();
                    case "PurchaseOrderID": return GetConcreteTypeOfRateQuote_PurchaseOrderID();
                    case "SalesInvoiceID": return GetConcreteTypeOfRateQuote_SalesInvoiceID();
                    case "SalesReturnID": return GetConcreteTypeOfRateQuote_SalesReturnID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipCarrierModel)))
            {
                switch (property)
                {
                    case "ContactID": return GetConcreteTypeOfShipCarrier_ContactID();
                    case "Contact": return GetConcreteTypeOfShipCarrier_Contact();
                    case "PointOfContact": return GetConcreteTypeOfShipCarrier_PointOfContact();
                    case "IsInbound": return GetConcreteTypeOfShipCarrier_IsInbound();
                    case "IsOutbound": return GetConcreteTypeOfShipCarrier_IsOutbound();
                    case "Username": return GetConcreteTypeOfShipCarrier_Username();
                    case "Authentication": return GetConcreteTypeOfShipCarrier_Authentication();
                    case "AccountNumber": return GetConcreteTypeOfShipCarrier_AccountNumber();
                    case "SalesRep": return GetConcreteTypeOfShipCarrier_SalesRep();
                    case "PickupTime": return GetConcreteTypeOfShipCarrier_PickupTime();
                    case "ShipCarrierMethods": return GetConcreteTypeOfShipCarrier_ShipCarrierMethods();
                    case "Shipments": return GetConcreteTypeOfShipCarrier_Shipments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "ShipCarrierID": return GetConcreteTypeOfShipCarrierMethod_ShipCarrierID();
                    case "ShipCarrier": return GetConcreteTypeOfShipCarrierMethod_ShipCarrier();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipmentModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfShipment_TypeID();
                    case "Type": return GetConcreteTypeOfShipment_Type();
                    case "StatusID": return GetConcreteTypeOfShipment_StatusID();
                    case "Status": return GetConcreteTypeOfShipment_Status();
                    case "Reference1": return GetConcreteTypeOfShipment_Reference1();
                    case "Reference2": return GetConcreteTypeOfShipment_Reference2();
                    case "Reference3": return GetConcreteTypeOfShipment_Reference3();
                    case "TrackingNumber": return GetConcreteTypeOfShipment_TrackingNumber();
                    case "Destination": return GetConcreteTypeOfShipment_Destination();
                    case "TargetShippingDate": return GetConcreteTypeOfShipment_TargetShippingDate();
                    case "EstimatedDeliveryDate": return GetConcreteTypeOfShipment_EstimatedDeliveryDate();
                    case "ShipDate": return GetConcreteTypeOfShipment_ShipDate();
                    case "DateDelivered": return GetConcreteTypeOfShipment_DateDelivered();
                    case "NegotiatedRate": return GetConcreteTypeOfShipment_NegotiatedRate();
                    case "PublishedRate": return GetConcreteTypeOfShipment_PublishedRate();
                    case "OriginContactID": return GetConcreteTypeOfShipment_OriginContactID();
                    case "OriginContact": return GetConcreteTypeOfShipment_OriginContact();
                    case "DestinationContactID": return GetConcreteTypeOfShipment_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfShipment_DestinationContact();
                    case "InventoryLocationSectionID": return GetConcreteTypeOfShipment_InventoryLocationSectionID();
                    case "InventoryLocationSection": return GetConcreteTypeOfShipment_InventoryLocationSection();
                    case "ShipCarrierID": return GetConcreteTypeOfShipment_ShipCarrierID();
                    case "ShipCarrier": return GetConcreteTypeOfShipment_ShipCarrier();
                    case "ShipCarrierMethodID": return GetConcreteTypeOfShipment_ShipCarrierMethodID();
                    case "ShipCarrierMethod": return GetConcreteTypeOfShipment_ShipCarrierMethod();
                    case "VendorID": return GetConcreteTypeOfShipment_VendorID();
                    case "Vendor": return GetConcreteTypeOfShipment_Vendor();
                    case "ShipmentEvents": return GetConcreteTypeOfShipment_ShipmentEvents();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipmentEventModel)))
            {
                switch (property)
                {
                    case "Note": return GetConcreteTypeOfShipmentEvent_Note();
                    case "EventDate": return GetConcreteTypeOfShipmentEvent_EventDate();
                    case "AddressID": return GetConcreteTypeOfShipmentEvent_AddressID();
                    case "Address": return GetConcreteTypeOfShipmentEvent_Address();
                    case "ShipmentID": return GetConcreteTypeOfShipmentEvent_ShipmentID();
                    case "Shipment": return GetConcreteTypeOfShipmentEvent_Shipment();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfShipmentStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfShipmentType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Shopping
            if (type.GetInterfaces().Any(x => x == typeof(ICartModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetConcreteTypeOfCart_DueDate();
                    case "SubtotalItems": return GetConcreteTypeOfCart_SubtotalItems();
                    case "SubtotalShipping": return GetConcreteTypeOfCart_SubtotalShipping();
                    case "SubtotalTaxes": return GetConcreteTypeOfCart_SubtotalTaxes();
                    case "SubtotalFees": return GetConcreteTypeOfCart_SubtotalFees();
                    case "SubtotalHandling": return GetConcreteTypeOfCart_SubtotalHandling();
                    case "SubtotalDiscounts": return GetConcreteTypeOfCart_SubtotalDiscounts();
                    case "Total": return GetConcreteTypeOfCart_Total();
                    case "ShippingSameAsBilling": return GetConcreteTypeOfCart_ShippingSameAsBilling();
                    case "BillingContactID": return GetConcreteTypeOfCart_BillingContactID();
                    case "BillingContact": return GetConcreteTypeOfCart_BillingContact();
                    case "ShippingContactID": return GetConcreteTypeOfCart_ShippingContactID();
                    case "ShippingContact": return GetConcreteTypeOfCart_ShippingContact();
                    case "StatusID": return GetConcreteTypeOfCart_StatusID();
                    case "Status": return GetConcreteTypeOfCart_Status();
                    case "StateID": return GetConcreteTypeOfCart_StateID();
                    case "State": return GetConcreteTypeOfCart_State();
                    case "TypeID": return GetConcreteTypeOfCart_TypeID();
                    case "Type": return GetConcreteTypeOfCart_Type();
                    case "UserID": return GetConcreteTypeOfCart_UserID();
                    case "User": return GetConcreteTypeOfCart_User();
                    case "AccountID": return GetConcreteTypeOfCart_AccountID();
                    case "Account": return GetConcreteTypeOfCart_Account();
                    case "SalesItems": return GetConcreteTypeOfCart_SalesItems();
                    case "Discounts": return GetConcreteTypeOfCart_Discounts();
                    case "StoredFiles": return GetConcreteTypeOfCart_StoredFiles();
                    case "Contacts": return GetConcreteTypeOfCart_Contacts();
                    case "RateQuotes": return GetConcreteTypeOfCart_RateQuotes();
                    case "Notes": return GetConcreteTypeOfCart_Notes();
                    case "StoreID": return GetConcreteTypeOfCart_StoreID();
                    case "Store": return GetConcreteTypeOfCart_Store();
                    case "BrandID": return GetConcreteTypeOfCart_BrandID();
                    case "Brand": return GetConcreteTypeOfCart_Brand();
                    case "SessionID": return GetConcreteTypeOfCart_SessionID();
                    case "SubtotalShippingModifier": return GetConcreteTypeOfCart_SubtotalShippingModifier();
                    case "SubtotalShippingModifierMode": return GetConcreteTypeOfCart_SubtotalShippingModifierMode();
                    case "SubtotalTaxesModifier": return GetConcreteTypeOfCart_SubtotalTaxesModifier();
                    case "SubtotalTaxesModifierMode": return GetConcreteTypeOfCart_SubtotalTaxesModifierMode();
                    case "SubtotalFeesModifier": return GetConcreteTypeOfCart_SubtotalFeesModifier();
                    case "SubtotalFeesModifierMode": return GetConcreteTypeOfCart_SubtotalFeesModifierMode();
                    case "SubtotalHandlingModifier": return GetConcreteTypeOfCart_SubtotalHandlingModifier();
                    case "SubtotalHandlingModifierMode": return GetConcreteTypeOfCart_SubtotalHandlingModifierMode();
                    case "SubtotalDiscountsModifier": return GetConcreteTypeOfCart_SubtotalDiscountsModifier();
                    case "SubtotalDiscountsModifierMode": return GetConcreteTypeOfCart_SubtotalDiscountsModifierMode();
                    case "RequestedShipDate": return GetConcreteTypeOfCart_RequestedShipDate();
                    case "ShipmentID": return GetConcreteTypeOfCart_ShipmentID();
                    case "Shipment": return GetConcreteTypeOfCart_Shipment();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCartContact_MasterID();
                    case "Master": return GetConcreteTypeOfCartContact_Master();
                    case "SlaveID": return GetConcreteTypeOfCartContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfCartContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCartFile_MasterID();
                    case "SlaveID": return GetConcreteTypeOfCartFile_SlaveID();
                    case "Slave": return GetConcreteTypeOfCartFile_Slave();
                    case "FileAccessTypeID": return GetConcreteTypeOfCartFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetConcreteTypeOfCartItem_Sku();
                    case "UnitOfMeasure": return GetConcreteTypeOfCartItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetConcreteTypeOfCartItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetConcreteTypeOfCartItem_Quantity();
                    case "QuantityBackOrdered": return GetConcreteTypeOfCartItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetConcreteTypeOfCartItem_QuantityPreSold();
                    case "TotalQuantity": return GetConcreteTypeOfCartItem_TotalQuantity();
                    case "UnitCorePrice": return GetConcreteTypeOfCartItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetConcreteTypeOfCartItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetConcreteTypeOfCartItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetConcreteTypeOfCartItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetConcreteTypeOfCartItem_MasterID();
                    case "ProductID": return GetConcreteTypeOfCartItem_ProductID();
                    case "UserID": return GetConcreteTypeOfCartItem_UserID();
                    case "User": return GetConcreteTypeOfCartItem_User();
                    case "OriginalCurrencyID": return GetConcreteTypeOfCartItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetConcreteTypeOfCartItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetConcreteTypeOfCartItem_SellingCurrencyID();
                    case "SellingCurrency": return GetConcreteTypeOfCartItem_SellingCurrency();
                    case "Discounts": return GetConcreteTypeOfCartItem_Discounts();
                    case "Targets": return GetConcreteTypeOfCartItem_Targets();
                    case "Notes": return GetConcreteTypeOfCartItem_Notes();
                    case "UnitSoldPriceModifier": return GetConcreteTypeOfCartItem_UnitSoldPriceModifier();
                    case "UnitSoldPriceModifierMode": return GetConcreteTypeOfCartItem_UnitSoldPriceModifierMode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetConcreteTypeOfCartItemTarget_Quantity();
                    case "NothingToShip": return GetConcreteTypeOfCartItemTarget_NothingToShip();
                    case "MasterID": return GetConcreteTypeOfCartItemTarget_MasterID();
                    case "TypeID": return GetConcreteTypeOfCartItemTarget_TypeID();
                    case "Type": return GetConcreteTypeOfCartItemTarget_Type();
                    case "DestinationContactID": return GetConcreteTypeOfCartItemTarget_DestinationContactID();
                    case "DestinationContact": return GetConcreteTypeOfCartItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetConcreteTypeOfCartItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetConcreteTypeOfCartItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetConcreteTypeOfCartItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetConcreteTypeOfCartItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetConcreteTypeOfCartItemTarget_BrandProductID();
                    case "BrandProduct": return GetConcreteTypeOfCartItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetConcreteTypeOfCartItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetConcreteTypeOfCartItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetConcreteTypeOfCartItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetConcreteTypeOfCartItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCartState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCartStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartTypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfCartType_StoreID();
                    case "Store": return GetConcreteTypeOfCartType_Store();
                    case "BrandID": return GetConcreteTypeOfCartType_BrandID();
                    case "Brand": return GetConcreteTypeOfCartType_Brand();
                    case "CreatedByUserID": return GetConcreteTypeOfCartType_CreatedByUserID();
                    case "CreatedByUser": return GetConcreteTypeOfCartType_CreatedByUser();
                    case "TranslationKey": return GetConcreteTypeOfCartType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Stores
            if (type.GetInterfaces().Any(x => x == typeof(ISiteDomainModel)))
            {
                switch (property)
                {
                    case "Brands": return GetConcreteTypeOfSiteDomain_Brands();
                    case "HeaderContent": return GetConcreteTypeOfSiteDomain_HeaderContent();
                    case "FooterContent": return GetConcreteTypeOfSiteDomain_FooterContent();
                    case "SideBarContent": return GetConcreteTypeOfSiteDomain_SideBarContent();
                    case "CatalogContent": return GetConcreteTypeOfSiteDomain_CatalogContent();
                    case "Url": return GetConcreteTypeOfSiteDomain_Url();
                    case "AlternateUrl1": return GetConcreteTypeOfSiteDomain_AlternateUrl1();
                    case "AlternateUrl2": return GetConcreteTypeOfSiteDomain_AlternateUrl2();
                    case "AlternateUrl3": return GetConcreteTypeOfSiteDomain_AlternateUrl3();
                    case "SiteDomainSocialProviders": return GetConcreteTypeOfSiteDomain_SiteDomainSocialProviders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISiteDomainSocialProviderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfSiteDomainSocialProvider_MasterID();
                    case "Master": return GetConcreteTypeOfSiteDomainSocialProvider_Master();
                    case "SlaveID": return GetConcreteTypeOfSiteDomainSocialProvider_SlaveID();
                    case "Slave": return GetConcreteTypeOfSiteDomainSocialProvider_Slave();
                    case "Script": return GetConcreteTypeOfSiteDomainSocialProvider_Script();
                    case "UrlValues": return GetConcreteTypeOfSiteDomainSocialProvider_UrlValues();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISocialProviderModel)))
            {
                switch (property)
                {
                    case "Url": return GetConcreteTypeOfSocialProvider_Url();
                    case "UrlFormat": return GetConcreteTypeOfSocialProvider_UrlFormat();
                    case "SiteDomainSocialProviders": return GetConcreteTypeOfSocialProvider_SiteDomainSocialProviders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfStore_TypeID();
                    case "Type": return GetConcreteTypeOfStore_Type();
                    case "ContactID": return GetConcreteTypeOfStore_ContactID();
                    case "Contact": return GetConcreteTypeOfStore_Contact();
                    case "Notes": return GetConcreteTypeOfStore_Notes();
                    case "Images": return GetConcreteTypeOfStore_Images();
                    case "Reviews": return GetConcreteTypeOfStore_Reviews();
                    case "MinimumOrderDollarAmount": return GetConcreteTypeOfStore_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetConcreteTypeOfStore_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetConcreteTypeOfStore_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetConcreteTypeOfStore_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetConcreteTypeOfStore_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetConcreteTypeOfStore_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfStore_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetConcreteTypeOfStore_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetConcreteTypeOfStore_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetConcreteTypeOfStore_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetConcreteTypeOfStore_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetConcreteTypeOfStore_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetConcreteTypeOfStore_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetConcreteTypeOfStore_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetConcreteTypeOfStore_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Accounts": return GetConcreteTypeOfStore_Accounts();
                    case "Users": return GetConcreteTypeOfStore_Users();
                    case "Vendors": return GetConcreteTypeOfStore_Vendors();
                    case "Brands": return GetConcreteTypeOfStore_Brands();
                    case "Manufacturers": return GetConcreteTypeOfStore_Manufacturers();
                    case "Slogan": return GetConcreteTypeOfStore_Slogan();
                    case "MissionStatement": return GetConcreteTypeOfStore_MissionStatement();
                    case "About": return GetConcreteTypeOfStore_About();
                    case "Overview": return GetConcreteTypeOfStore_Overview();
                    case "ExternalUrl": return GetConcreteTypeOfStore_ExternalUrl();
                    case "OperatingHoursTimeZoneId": return GetConcreteTypeOfStore_OperatingHoursTimeZoneId();
                    case "OperatingHoursMondayStart": return GetConcreteTypeOfStore_OperatingHoursMondayStart();
                    case "OperatingHoursMondayEnd": return GetConcreteTypeOfStore_OperatingHoursMondayEnd();
                    case "OperatingHoursTuesdayStart": return GetConcreteTypeOfStore_OperatingHoursTuesdayStart();
                    case "OperatingHoursTuesdayEnd": return GetConcreteTypeOfStore_OperatingHoursTuesdayEnd();
                    case "OperatingHoursWednesdayStart": return GetConcreteTypeOfStore_OperatingHoursWednesdayStart();
                    case "OperatingHoursWednesdayEnd": return GetConcreteTypeOfStore_OperatingHoursWednesdayEnd();
                    case "OperatingHoursThursdayStart": return GetConcreteTypeOfStore_OperatingHoursThursdayStart();
                    case "OperatingHoursThursdayEnd": return GetConcreteTypeOfStore_OperatingHoursThursdayEnd();
                    case "OperatingHoursFridayStart": return GetConcreteTypeOfStore_OperatingHoursFridayStart();
                    case "OperatingHoursFridayEnd": return GetConcreteTypeOfStore_OperatingHoursFridayEnd();
                    case "OperatingHoursSaturdayStart": return GetConcreteTypeOfStore_OperatingHoursSaturdayStart();
                    case "OperatingHoursSaturdayEnd": return GetConcreteTypeOfStore_OperatingHoursSaturdayEnd();
                    case "OperatingHoursSundayStart": return GetConcreteTypeOfStore_OperatingHoursSundayStart();
                    case "OperatingHoursSundayEnd": return GetConcreteTypeOfStore_OperatingHoursSundayEnd();
                    case "OperatingHoursClosedStatement": return GetConcreteTypeOfStore_OperatingHoursClosedStatement();
                    case "LanguageID": return GetConcreteTypeOfStore_LanguageID();
                    case "Language": return GetConcreteTypeOfStore_Language();
                    case "StoreBadges": return GetConcreteTypeOfStore_StoreBadges();
                    case "StoreContacts": return GetConcreteTypeOfStore_StoreContacts();
                    case "StoreInventoryLocations": return GetConcreteTypeOfStore_StoreInventoryLocations();
                    case "StoreSubscriptions": return GetConcreteTypeOfStore_StoreSubscriptions();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreAccount_MasterID();
                    case "Master": return GetConcreteTypeOfStoreAccount_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreAccount_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreAccount_Slave();
                    case "HasAccessToStore": return GetConcreteTypeOfStoreAccount_HasAccessToStore();
                    case "PricePointID": return GetConcreteTypeOfStoreAccount_PricePointID();
                    case "PricePoint": return GetConcreteTypeOfStoreAccount_PricePoint();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreBadgeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreBadge_MasterID();
                    case "Master": return GetConcreteTypeOfStoreBadge_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreBadge_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreBadge_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreContact_MasterID();
                    case "Master": return GetConcreteTypeOfStoreContact_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreContact_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfStoreImage_TypeID();
                    case "Type": return GetConcreteTypeOfStoreImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfStoreImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfStoreImage_Author();
                    case "MediaDate": return GetConcreteTypeOfStoreImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfStoreImage_Copyright();
                    case "Location": return GetConcreteTypeOfStoreImage_Location();
                    case "Latitude": return GetConcreteTypeOfStoreImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfStoreImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfStoreImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfStoreImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfStoreImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfStoreImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfStoreImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfStoreImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfStoreImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfStoreImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfStoreImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfStoreImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfStoreImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfStoreImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfStoreImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfStoreImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreInventoryLocationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreInventoryLocation_MasterID();
                    case "Master": return GetConcreteTypeOfStoreInventoryLocation_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreInventoryLocation_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreInventoryLocation_Slave();
                    case "TypeID": return GetConcreteTypeOfStoreInventoryLocation_TypeID();
                    case "Type": return GetConcreteTypeOfStoreInventoryLocation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfStoreInventoryLocationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreManufacturer_MasterID();
                    case "Master": return GetConcreteTypeOfStoreManufacturer_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreManufacturer_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreProduct_MasterID();
                    case "Master": return GetConcreteTypeOfStoreProduct_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreProduct_Slave();
                    case "IsVisibleInStore": return GetConcreteTypeOfStoreProduct_IsVisibleInStore();
                    case "PriceBase": return GetConcreteTypeOfStoreProduct_PriceBase();
                    case "PriceMsrp": return GetConcreteTypeOfStoreProduct_PriceMsrp();
                    case "PriceReduction": return GetConcreteTypeOfStoreProduct_PriceReduction();
                    case "PriceSale": return GetConcreteTypeOfStoreProduct_PriceSale();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreSubscriptionModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreSubscription_MasterID();
                    case "Master": return GetConcreteTypeOfStoreSubscription_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreSubscription_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreSubscription_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfStoreType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreUser_MasterID();
                    case "Master": return GetConcreteTypeOfStoreUser_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreUser_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfStoreVendor_MasterID();
                    case "Master": return GetConcreteTypeOfStoreVendor_Master();
                    case "SlaveID": return GetConcreteTypeOfStoreVendor_SlaveID();
                    case "Slave": return GetConcreteTypeOfStoreVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region System
            if (type.GetInterfaces().Any(x => x == typeof(IImportExportMappingModel)))
            {
                switch (property)
                {
                    case "MappingJson": return GetConcreteTypeOfImportExportMapping_MappingJson();
                    case "MappingJsonHash": return GetConcreteTypeOfImportExportMapping_MappingJsonHash();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(INoteModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfNote_TypeID();
                    case "Type": return GetConcreteTypeOfNote_Type();
                    case "Note1": return GetConcreteTypeOfNote_Note1();
                    case "CreatedByUserID": return GetConcreteTypeOfNote_CreatedByUserID();
                    case "CreatedByUser": return GetConcreteTypeOfNote_CreatedByUser();
                    case "UpdatedByUserID": return GetConcreteTypeOfNote_UpdatedByUserID();
                    case "UpdatedByUser": return GetConcreteTypeOfNote_UpdatedByUser();
                    case "AccountID": return GetConcreteTypeOfNote_AccountID();
                    case "UserID": return GetConcreteTypeOfNote_UserID();
                    case "VendorID": return GetConcreteTypeOfNote_VendorID();
                    case "ManufacturerID": return GetConcreteTypeOfNote_ManufacturerID();
                    case "BrandID": return GetConcreteTypeOfNote_BrandID();
                    case "StoreID": return GetConcreteTypeOfNote_StoreID();
                    case "SalesGroupID": return GetConcreteTypeOfNote_SalesGroupID();
                    case "PurchaseOrderID": return GetConcreteTypeOfNote_PurchaseOrderID();
                    case "SalesOrderID": return GetConcreteTypeOfNote_SalesOrderID();
                    case "SalesInvoiceID": return GetConcreteTypeOfNote_SalesInvoiceID();
                    case "SalesQuoteID": return GetConcreteTypeOfNote_SalesQuoteID();
                    case "SampleRequestID": return GetConcreteTypeOfNote_SampleRequestID();
                    case "SalesReturnID": return GetConcreteTypeOfNote_SalesReturnID();
                    case "CartID": return GetConcreteTypeOfNote_CartID();
                    case "PurchaseOrderItemID": return GetConcreteTypeOfNote_PurchaseOrderItemID();
                    case "SalesOrderItemID": return GetConcreteTypeOfNote_SalesOrderItemID();
                    case "SalesInvoiceItemID": return GetConcreteTypeOfNote_SalesInvoiceItemID();
                    case "SalesQuoteItemID": return GetConcreteTypeOfNote_SalesQuoteItemID();
                    case "SampleRequestItemID": return GetConcreteTypeOfNote_SampleRequestItemID();
                    case "SalesReturnItemID": return GetConcreteTypeOfNote_SalesReturnItemID();
                    case "CartItemID": return GetConcreteTypeOfNote_CartItemID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(INoteTypeModel)))
            {
                switch (property)
                {
                    case "IsPublic": return GetConcreteTypeOfNoteType_IsPublic();
                    case "IsCustomer": return GetConcreteTypeOfNoteType_IsCustomer();
                    case "TranslationKey": return GetConcreteTypeOfNoteType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRecordVersionModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfRecordVersion_StoreID();
                    case "Store": return GetConcreteTypeOfRecordVersion_Store();
                    case "BrandID": return GetConcreteTypeOfRecordVersion_BrandID();
                    case "Brand": return GetConcreteTypeOfRecordVersion_Brand();
                    case "TypeID": return GetConcreteTypeOfRecordVersion_TypeID();
                    case "Type": return GetConcreteTypeOfRecordVersion_Type();
                    case "RecordID": return GetConcreteTypeOfRecordVersion_RecordID();
                    case "OriginalPublishDate": return GetConcreteTypeOfRecordVersion_OriginalPublishDate();
                    case "MostRecentPublishDate": return GetConcreteTypeOfRecordVersion_MostRecentPublishDate();
                    case "IsDraft": return GetConcreteTypeOfRecordVersion_IsDraft();
                    case "SerializedRecord": return GetConcreteTypeOfRecordVersion_SerializedRecord();
                    case "PublishedByUserID": return GetConcreteTypeOfRecordVersion_PublishedByUserID();
                    case "PublishedByUser": return GetConcreteTypeOfRecordVersion_PublishedByUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfRecordVersionType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISettingModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfSetting_TypeID();
                    case "Type": return GetConcreteTypeOfSetting_Type();
                    case "StoreID": return GetConcreteTypeOfSetting_StoreID();
                    case "Store": return GetConcreteTypeOfSetting_Store();
                    case "BrandID": return GetConcreteTypeOfSetting_BrandID();
                    case "Brand": return GetConcreteTypeOfSetting_Brand();
                    case "Value": return GetConcreteTypeOfSetting_Value();
                    case "SettingGroupID": return GetConcreteTypeOfSetting_SettingGroupID();
                    case "SettingGroup": return GetConcreteTypeOfSetting_SettingGroup();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISettingGroupModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSettingGroup_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfSettingType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEventLogModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfEventLog_StoreID();
                    case "Store": return GetConcreteTypeOfEventLog_Store();
                    case "BrandID": return GetConcreteTypeOfEventLog_BrandID();
                    case "Brand": return GetConcreteTypeOfEventLog_Brand();
                    case "DataID": return GetConcreteTypeOfEventLog_DataID();
                    case "LogLevel": return GetConcreteTypeOfEventLog_LogLevel();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Tax
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalTaxRateModel)))
            {
                switch (property)
                {
                    case "Provider": return GetConcreteTypeOfHistoricalTaxRate_Provider();
                    case "CartHash": return GetConcreteTypeOfHistoricalTaxRate_CartHash();
                    case "OnDate": return GetConcreteTypeOfHistoricalTaxRate_OnDate();
                    case "CountryLevelRate": return GetConcreteTypeOfHistoricalTaxRate_CountryLevelRate();
                    case "RegionLevelRate": return GetConcreteTypeOfHistoricalTaxRate_RegionLevelRate();
                    case "CountyLevelRate": return GetConcreteTypeOfHistoricalTaxRate_CountyLevelRate();
                    case "TotalAmount": return GetConcreteTypeOfHistoricalTaxRate_TotalAmount();
                    case "TotalTaxable": return GetConcreteTypeOfHistoricalTaxRate_TotalTaxable();
                    case "TotalTax": return GetConcreteTypeOfHistoricalTaxRate_TotalTax();
                    case "TotalTaxCalculated": return GetConcreteTypeOfHistoricalTaxRate_TotalTaxCalculated();
                    case "Rate": return GetConcreteTypeOfHistoricalTaxRate_Rate();
                    case "SerializedRequest": return GetConcreteTypeOfHistoricalTaxRate_SerializedRequest();
                    case "SerializedResponse": return GetConcreteTypeOfHistoricalTaxRate_SerializedResponse();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITaxCountryModel)))
            {
                switch (property)
                {
                    case "Rate": return GetConcreteTypeOfTaxCountry_Rate();
                    case "CountryID": return GetConcreteTypeOfTaxCountry_CountryID();
                    case "Country": return GetConcreteTypeOfTaxCountry_Country();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITaxRegionModel)))
            {
                switch (property)
                {
                    case "Rate": return GetConcreteTypeOfTaxRegion_Rate();
                    case "RegionID": return GetConcreteTypeOfTaxRegion_RegionID();
                    case "Region": return GetConcreteTypeOfTaxRegion_Region();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Tracking
            if (type.GetInterfaces().Any(x => x == typeof(ICampaignModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfCampaign_TypeID();
                    case "Type": return GetConcreteTypeOfCampaign_Type();
                    case "StatusID": return GetConcreteTypeOfCampaign_StatusID();
                    case "Status": return GetConcreteTypeOfCampaign_Status();
                    case "ProposedStart": return GetConcreteTypeOfCampaign_ProposedStart();
                    case "ProposedEnd": return GetConcreteTypeOfCampaign_ProposedEnd();
                    case "ActualStart": return GetConcreteTypeOfCampaign_ActualStart();
                    case "ActualEnd": return GetConcreteTypeOfCampaign_ActualEnd();
                    case "BudgetedCost": return GetConcreteTypeOfCampaign_BudgetedCost();
                    case "OtherCost": return GetConcreteTypeOfCampaign_OtherCost();
                    case "ExpectedRevenue": return GetConcreteTypeOfCampaign_ExpectedRevenue();
                    case "TotalActualCost": return GetConcreteTypeOfCampaign_TotalActualCost();
                    case "TotalCampaignActivityActualCost": return GetConcreteTypeOfCampaign_TotalCampaignActivityActualCost();
                    case "ExchangeRate": return GetConcreteTypeOfCampaign_ExchangeRate();
                    case "CodeName": return GetConcreteTypeOfCampaign_CodeName();
                    case "PromotionCodeName": return GetConcreteTypeOfCampaign_PromotionCodeName();
                    case "Message": return GetConcreteTypeOfCampaign_Message();
                    case "Objective": return GetConcreteTypeOfCampaign_Objective();
                    case "ExpectedResponse": return GetConcreteTypeOfCampaign_ExpectedResponse();
                    case "UTCConversionTimeZoneCode": return GetConcreteTypeOfCampaign_UTCConversionTimeZoneCode();
                    case "IsTemplate": return GetConcreteTypeOfCampaign_IsTemplate();
                    case "CreatedByUserID": return GetConcreteTypeOfCampaign_CreatedByUserID();
                    case "CreatedByUser": return GetConcreteTypeOfCampaign_CreatedByUser();
                    case "CampaignAds": return GetConcreteTypeOfCampaign_CampaignAds();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICampaignAdModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfCampaignAd_MasterID();
                    case "Master": return GetConcreteTypeOfCampaignAd_Master();
                    case "SlaveID": return GetConcreteTypeOfCampaignAd_SlaveID();
                    case "Slave": return GetConcreteTypeOfCampaignAd_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfCampaignStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConcreteTypeOfCampaignType_StoreID();
                    case "Store": return GetConcreteTypeOfCampaignType_Store();
                    case "BrandID": return GetConcreteTypeOfCampaignType_BrandID();
                    case "Brand": return GetConcreteTypeOfCampaignType_Brand();
                    case "TranslationKey": return GetConcreteTypeOfCampaignType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEventModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfEvent_TypeID();
                    case "Type": return GetConcreteTypeOfEvent_Type();
                    case "StatusID": return GetConcreteTypeOfEvent_StatusID();
                    case "Status": return GetConcreteTypeOfEvent_Status();
                    case "IPAddress": return GetConcreteTypeOfEvent_IPAddress();
                    case "Score": return GetConcreteTypeOfEvent_Score();
                    case "AddressID": return GetConcreteTypeOfEvent_AddressID();
                    case "Address": return GetConcreteTypeOfEvent_Address();
                    case "IPOrganizationID": return GetConcreteTypeOfEvent_IPOrganizationID();
                    case "IPOrganization": return GetConcreteTypeOfEvent_IPOrganization();
                    case "UserID": return GetConcreteTypeOfEvent_UserID();
                    case "User": return GetConcreteTypeOfEvent_User();
                    case "DidBounce": return GetConcreteTypeOfEvent_DidBounce();
                    case "OperatingSystem": return GetConcreteTypeOfEvent_OperatingSystem();
                    case "Browser": return GetConcreteTypeOfEvent_Browser();
                    case "Language": return GetConcreteTypeOfEvent_Language();
                    case "ContainsSocialProfile": return GetConcreteTypeOfEvent_ContainsSocialProfile();
                    case "Delta": return GetConcreteTypeOfEvent_Delta();
                    case "Duration": return GetConcreteTypeOfEvent_Duration();
                    case "StartedOn": return GetConcreteTypeOfEvent_StartedOn();
                    case "EndedOn": return GetConcreteTypeOfEvent_EndedOn();
                    case "Time": return GetConcreteTypeOfEvent_Time();
                    case "EntryPage": return GetConcreteTypeOfEvent_EntryPage();
                    case "ExitPage": return GetConcreteTypeOfEvent_ExitPage();
                    case "IsFirstTrigger": return GetConcreteTypeOfEvent_IsFirstTrigger();
                    case "Flash": return GetConcreteTypeOfEvent_Flash();
                    case "Keywords": return GetConcreteTypeOfEvent_Keywords();
                    case "PartitionKey": return GetConcreteTypeOfEvent_PartitionKey();
                    case "Referrer": return GetConcreteTypeOfEvent_Referrer();
                    case "ReferringHost": return GetConcreteTypeOfEvent_ReferringHost();
                    case "RowKey": return GetConcreteTypeOfEvent_RowKey();
                    case "Source": return GetConcreteTypeOfEvent_Source();
                    case "TotalTriggers": return GetConcreteTypeOfEvent_TotalTriggers();
                    case "CampaignID": return GetConcreteTypeOfEvent_CampaignID();
                    case "Campaign": return GetConcreteTypeOfEvent_Campaign();
                    case "ContactID": return GetConcreteTypeOfEvent_ContactID();
                    case "Contact": return GetConcreteTypeOfEvent_Contact();
                    case "SiteDomainID": return GetConcreteTypeOfEvent_SiteDomainID();
                    case "SiteDomain": return GetConcreteTypeOfEvent_SiteDomain();
                    case "VisitorID": return GetConcreteTypeOfEvent_VisitorID();
                    case "Visitor": return GetConcreteTypeOfEvent_Visitor();
                    case "VisitID": return GetConcreteTypeOfEvent_VisitID();
                    case "Visit": return GetConcreteTypeOfEvent_Visit();
                    case "PageViewEvents": return GetConcreteTypeOfEvent_PageViewEvents();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfEventStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfEventType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IIPOrganizationModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetConcreteTypeOfIPOrganization_StatusID();
                    case "Status": return GetConcreteTypeOfIPOrganization_Status();
                    case "IPAddress": return GetConcreteTypeOfIPOrganization_IPAddress();
                    case "Score": return GetConcreteTypeOfIPOrganization_Score();
                    case "VisitorKey": return GetConcreteTypeOfIPOrganization_VisitorKey();
                    case "AddressID": return GetConcreteTypeOfIPOrganization_AddressID();
                    case "Address": return GetConcreteTypeOfIPOrganization_Address();
                    case "PrimaryUserID": return GetConcreteTypeOfIPOrganization_PrimaryUserID();
                    case "PrimaryUser": return GetConcreteTypeOfIPOrganization_PrimaryUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfIPOrganizationStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPageViewModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfPageView_TypeID();
                    case "Type": return GetConcreteTypeOfPageView_Type();
                    case "StatusID": return GetConcreteTypeOfPageView_StatusID();
                    case "Status": return GetConcreteTypeOfPageView_Status();
                    case "IPAddress": return GetConcreteTypeOfPageView_IPAddress();
                    case "Score": return GetConcreteTypeOfPageView_Score();
                    case "AddressID": return GetConcreteTypeOfPageView_AddressID();
                    case "Address": return GetConcreteTypeOfPageView_Address();
                    case "IPOrganizationID": return GetConcreteTypeOfPageView_IPOrganizationID();
                    case "IPOrganization": return GetConcreteTypeOfPageView_IPOrganization();
                    case "UserID": return GetConcreteTypeOfPageView_UserID();
                    case "User": return GetConcreteTypeOfPageView_User();
                    case "DidBounce": return GetConcreteTypeOfPageView_DidBounce();
                    case "OperatingSystem": return GetConcreteTypeOfPageView_OperatingSystem();
                    case "Browser": return GetConcreteTypeOfPageView_Browser();
                    case "Language": return GetConcreteTypeOfPageView_Language();
                    case "ContainsSocialProfile": return GetConcreteTypeOfPageView_ContainsSocialProfile();
                    case "Delta": return GetConcreteTypeOfPageView_Delta();
                    case "Duration": return GetConcreteTypeOfPageView_Duration();
                    case "StartedOn": return GetConcreteTypeOfPageView_StartedOn();
                    case "EndedOn": return GetConcreteTypeOfPageView_EndedOn();
                    case "Time": return GetConcreteTypeOfPageView_Time();
                    case "EntryPage": return GetConcreteTypeOfPageView_EntryPage();
                    case "ExitPage": return GetConcreteTypeOfPageView_ExitPage();
                    case "IsFirstTrigger": return GetConcreteTypeOfPageView_IsFirstTrigger();
                    case "Flash": return GetConcreteTypeOfPageView_Flash();
                    case "Keywords": return GetConcreteTypeOfPageView_Keywords();
                    case "PartitionKey": return GetConcreteTypeOfPageView_PartitionKey();
                    case "Referrer": return GetConcreteTypeOfPageView_Referrer();
                    case "ReferringHost": return GetConcreteTypeOfPageView_ReferringHost();
                    case "RowKey": return GetConcreteTypeOfPageView_RowKey();
                    case "Source": return GetConcreteTypeOfPageView_Source();
                    case "TotalTriggers": return GetConcreteTypeOfPageView_TotalTriggers();
                    case "CampaignID": return GetConcreteTypeOfPageView_CampaignID();
                    case "Campaign": return GetConcreteTypeOfPageView_Campaign();
                    case "ContactID": return GetConcreteTypeOfPageView_ContactID();
                    case "Contact": return GetConcreteTypeOfPageView_Contact();
                    case "SiteDomainID": return GetConcreteTypeOfPageView_SiteDomainID();
                    case "SiteDomain": return GetConcreteTypeOfPageView_SiteDomain();
                    case "VisitorID": return GetConcreteTypeOfPageView_VisitorID();
                    case "Visitor": return GetConcreteTypeOfPageView_Visitor();
                    case "Title": return GetConcreteTypeOfPageView_Title();
                    case "URI": return GetConcreteTypeOfPageView_URI();
                    case "ViewedOn": return GetConcreteTypeOfPageView_ViewedOn();
                    case "VisitKey": return GetConcreteTypeOfPageView_VisitKey();
                    case "CategoryID": return GetConcreteTypeOfPageView_CategoryID();
                    case "Category": return GetConcreteTypeOfPageView_Category();
                    case "ProductID": return GetConcreteTypeOfPageView_ProductID();
                    case "Product": return GetConcreteTypeOfPageView_Product();
                    case "PageViewEvents": return GetConcreteTypeOfPageView_PageViewEvents();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPageViewEventModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfPageViewEvent_MasterID();
                    case "Master": return GetConcreteTypeOfPageViewEvent_Master();
                    case "SlaveID": return GetConcreteTypeOfPageViewEvent_SlaveID();
                    case "Slave": return GetConcreteTypeOfPageViewEvent_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPageViewStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfPageViewType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVisitModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetConcreteTypeOfVisit_StatusID();
                    case "Status": return GetConcreteTypeOfVisit_Status();
                    case "IPAddress": return GetConcreteTypeOfVisit_IPAddress();
                    case "Score": return GetConcreteTypeOfVisit_Score();
                    case "AddressID": return GetConcreteTypeOfVisit_AddressID();
                    case "Address": return GetConcreteTypeOfVisit_Address();
                    case "IPOrganizationID": return GetConcreteTypeOfVisit_IPOrganizationID();
                    case "IPOrganization": return GetConcreteTypeOfVisit_IPOrganization();
                    case "UserID": return GetConcreteTypeOfVisit_UserID();
                    case "User": return GetConcreteTypeOfVisit_User();
                    case "DidBounce": return GetConcreteTypeOfVisit_DidBounce();
                    case "OperatingSystem": return GetConcreteTypeOfVisit_OperatingSystem();
                    case "Browser": return GetConcreteTypeOfVisit_Browser();
                    case "Language": return GetConcreteTypeOfVisit_Language();
                    case "ContainsSocialProfile": return GetConcreteTypeOfVisit_ContainsSocialProfile();
                    case "Delta": return GetConcreteTypeOfVisit_Delta();
                    case "Duration": return GetConcreteTypeOfVisit_Duration();
                    case "StartedOn": return GetConcreteTypeOfVisit_StartedOn();
                    case "EndedOn": return GetConcreteTypeOfVisit_EndedOn();
                    case "Time": return GetConcreteTypeOfVisit_Time();
                    case "EntryPage": return GetConcreteTypeOfVisit_EntryPage();
                    case "ExitPage": return GetConcreteTypeOfVisit_ExitPage();
                    case "IsFirstTrigger": return GetConcreteTypeOfVisit_IsFirstTrigger();
                    case "Flash": return GetConcreteTypeOfVisit_Flash();
                    case "Keywords": return GetConcreteTypeOfVisit_Keywords();
                    case "PartitionKey": return GetConcreteTypeOfVisit_PartitionKey();
                    case "Referrer": return GetConcreteTypeOfVisit_Referrer();
                    case "ReferringHost": return GetConcreteTypeOfVisit_ReferringHost();
                    case "RowKey": return GetConcreteTypeOfVisit_RowKey();
                    case "Source": return GetConcreteTypeOfVisit_Source();
                    case "TotalTriggers": return GetConcreteTypeOfVisit_TotalTriggers();
                    case "CampaignID": return GetConcreteTypeOfVisit_CampaignID();
                    case "Campaign": return GetConcreteTypeOfVisit_Campaign();
                    case "ContactID": return GetConcreteTypeOfVisit_ContactID();
                    case "Contact": return GetConcreteTypeOfVisit_Contact();
                    case "SiteDomainID": return GetConcreteTypeOfVisit_SiteDomainID();
                    case "SiteDomain": return GetConcreteTypeOfVisit_SiteDomain();
                    case "VisitorID": return GetConcreteTypeOfVisit_VisitorID();
                    case "Visitor": return GetConcreteTypeOfVisit_Visitor();
                    case "Events": return GetConcreteTypeOfVisit_Events();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVisitorModel)))
            {
                switch (property)
                {
                    case "IPAddress": return GetConcreteTypeOfVisitor_IPAddress();
                    case "Score": return GetConcreteTypeOfVisitor_Score();
                    case "AddressID": return GetConcreteTypeOfVisitor_AddressID();
                    case "Address": return GetConcreteTypeOfVisitor_Address();
                    case "IPOrganizationID": return GetConcreteTypeOfVisitor_IPOrganizationID();
                    case "IPOrganization": return GetConcreteTypeOfVisitor_IPOrganization();
                    case "UserID": return GetConcreteTypeOfVisitor_UserID();
                    case "User": return GetConcreteTypeOfVisitor_User();
                    case "Visits": return GetConcreteTypeOfVisitor_Visits();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfVisitStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Vendors
            if (type.GetInterfaces().Any(x => x == typeof(IVendorModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetConcreteTypeOfVendor_TypeID();
                    case "Type": return GetConcreteTypeOfVendor_Type();
                    case "ContactID": return GetConcreteTypeOfVendor_ContactID();
                    case "Contact": return GetConcreteTypeOfVendor_Contact();
                    case "Notes": return GetConcreteTypeOfVendor_Notes();
                    case "Images": return GetConcreteTypeOfVendor_Images();
                    case "MinimumOrderDollarAmount": return GetConcreteTypeOfVendor_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetConcreteTypeOfVendor_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetConcreteTypeOfVendor_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetConcreteTypeOfVendor_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetConcreteTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Accounts": return GetConcreteTypeOfVendor_Accounts();
                    case "Products": return GetConcreteTypeOfVendor_Products();
                    case "Manufacturers": return GetConcreteTypeOfVendor_Manufacturers();
                    case "Notes1": return GetConcreteTypeOfVendor_Notes1();
                    case "AccountNumber": return GetConcreteTypeOfVendor_AccountNumber();
                    case "Terms": return GetConcreteTypeOfVendor_Terms();
                    case "TermNotes": return GetConcreteTypeOfVendor_TermNotes();
                    case "SendMethod": return GetConcreteTypeOfVendor_SendMethod();
                    case "EmailSubject": return GetConcreteTypeOfVendor_EmailSubject();
                    case "ShipTo": return GetConcreteTypeOfVendor_ShipTo();
                    case "ShipViaNotes": return GetConcreteTypeOfVendor_ShipViaNotes();
                    case "SignBy": return GetConcreteTypeOfVendor_SignBy();
                    case "AllowDropShip": return GetConcreteTypeOfVendor_AllowDropShip();
                    case "DefaultDiscount": return GetConcreteTypeOfVendor_DefaultDiscount();
                    case "RecommendedPurchaseOrderDollarAmount": return GetConcreteTypeOfVendor_RecommendedPurchaseOrderDollarAmount();
                    case "UserName": return GetConcreteTypeOfVendor_UserName();
                    case "PasswordHash": return GetConcreteTypeOfVendor_PasswordHash();
                    case "SecurityToken": return GetConcreteTypeOfVendor_SecurityToken();
                    case "MustResetPassword": return GetConcreteTypeOfVendor_MustResetPassword();
                    case "Shipments": return GetConcreteTypeOfVendor_Shipments();
                    case "PurchaseOrders": return GetConcreteTypeOfVendor_PurchaseOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfVendorAccount_MasterID();
                    case "Master": return GetConcreteTypeOfVendorAccount_Master();
                    case "SlaveID": return GetConcreteTypeOfVendorAccount_SlaveID();
                    case "Slave": return GetConcreteTypeOfVendorAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfVendorImage_MasterID();
                    case "TypeID": return GetConcreteTypeOfVendorImage_TypeID();
                    case "Type": return GetConcreteTypeOfVendorImage_Type();
                    case "SeoTitle": return GetConcreteTypeOfVendorImage_SeoTitle();
                    case "Author": return GetConcreteTypeOfVendorImage_Author();
                    case "MediaDate": return GetConcreteTypeOfVendorImage_MediaDate();
                    case "Copyright": return GetConcreteTypeOfVendorImage_Copyright();
                    case "Location": return GetConcreteTypeOfVendorImage_Location();
                    case "Latitude": return GetConcreteTypeOfVendorImage_Latitude();
                    case "Longitude": return GetConcreteTypeOfVendorImage_Longitude();
                    case "IsPrimary": return GetConcreteTypeOfVendorImage_IsPrimary();
                    case "OriginalWidth": return GetConcreteTypeOfVendorImage_OriginalWidth();
                    case "OriginalHeight": return GetConcreteTypeOfVendorImage_OriginalHeight();
                    case "OriginalFileFormat": return GetConcreteTypeOfVendorImage_OriginalFileFormat();
                    case "OriginalFileName": return GetConcreteTypeOfVendorImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetConcreteTypeOfVendorImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetConcreteTypeOfVendorImage_OriginalBytes();
                    case "ThumbnailWidth": return GetConcreteTypeOfVendorImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetConcreteTypeOfVendorImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetConcreteTypeOfVendorImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetConcreteTypeOfVendorImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetConcreteTypeOfVendorImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetConcreteTypeOfVendorImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfVendorImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfVendorManufacturer_MasterID();
                    case "Master": return GetConcreteTypeOfVendorManufacturer_Master();
                    case "SlaveID": return GetConcreteTypeOfVendorManufacturer_SlaveID();
                    case "Slave": return GetConcreteTypeOfVendorManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConcreteTypeOfVendorProduct_MasterID();
                    case "Master": return GetConcreteTypeOfVendorProduct_Master();
                    case "SlaveID": return GetConcreteTypeOfVendorProduct_SlaveID();
                    case "Slave": return GetConcreteTypeOfVendorProduct_Slave();
                    case "Bin": return GetConcreteTypeOfVendorProduct_Bin();
                    case "MinimumInventory": return GetConcreteTypeOfVendorProduct_MinimumInventory();
                    case "MaximumInventory": return GetConcreteTypeOfVendorProduct_MaximumInventory();
                    case "InventoryCount": return GetConcreteTypeOfVendorProduct_InventoryCount();
                    case "CostMultiplier": return GetConcreteTypeOfVendorProduct_CostMultiplier();
                    case "ListedPrice": return GetConcreteTypeOfVendorProduct_ListedPrice();
                    case "ActualCost": return GetConcreteTypeOfVendorProduct_ActualCost();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetConcreteTypeOfVendorType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            return (Type)typeof(ImportAssigners)
                .GetMethod($"GetTypeOf{type.Name}_{property}")
                .Invoke(null, new object[] { });
        }
        public static Type GetTypeOfPropertyInterface(object @object, string property)
        {
            var type = @object.GetType();
            if (BaseProperties.Contains(property) && @object is IBaseModel)
            {
                switch (property)
                {
                    case "ID": return typeof(int);
                    case "CustomKey": return typeof(string);
                    case "CreatedDate": return typeof(DateTime);
                    case "UpdatedDate": return typeof(DateTime?);
                    case "Active": return typeof(bool);
                    case "Hash": return typeof(long?);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (NameableBaseProperties.Contains(property) && @object is INameableBaseModel)
            {
                switch (property)
                {
                    case "Name": return typeof(string);
                    case "Description": return typeof(string);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (HaveJsonAttributesBaseProperties.Contains(property) && @object is IHaveJsonAttributesBaseModel)
            {
                switch (property)
                {
                    case "JsonAttributes": return typeof(string);
                    case "SerializableAttributes": return typeof(SerializableAttributesDictionary);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (TypableBaseProperties.Contains(property))
            {
                if (@object is ITypeModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return typeof(string);
                        case "SortOrder": return typeof(int?);
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
                if (@object is IStatusModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return typeof(string);
                        case "SortOrder": return typeof(int?);
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
                if (@object is IStateModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return typeof(string);
                        case "SortOrder": return typeof(int?);
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
            }
            if (HaveSeoBaseProperties.Contains(property) && @object is IHaveSeoBaseModel)
            {
                switch (property)
                {
                    case "SeoKeywords": return typeof(string);
                    case "SeoUrl": return typeof(string);
                    case "SeoPageTitle": return typeof(string);
                    case "SeoDescription": return typeof(string);
                    case "SeoMetaData": return typeof(string);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #region Accounts
            if (type.GetInterfaces().Any(x => x == typeof(IAccountModel)))
            {
                switch (property)
                {
                    case "Images": return GetInterfaceTypeOfAccount_Images();
                    case "StoredFiles": return GetInterfaceTypeOfAccount_StoredFiles();
                    case "Brands": return GetInterfaceTypeOfAccount_Brands();
                    case "Stores": return GetInterfaceTypeOfAccount_Stores();
                    case "Products": return GetInterfaceTypeOfAccount_Products();
                    case "Vendors": return GetInterfaceTypeOfAccount_Vendors();
                    case "Users": return GetInterfaceTypeOfAccount_Users();
                    case "Notes": return GetInterfaceTypeOfAccount_Notes();
                    case "TypeID": return GetInterfaceTypeOfAccount_TypeID();
                    case "Type": return GetInterfaceTypeOfAccount_Type();
                    case "StatusID": return GetInterfaceTypeOfAccount_StatusID();
                    case "Status": return GetInterfaceTypeOfAccount_Status();
                    case "IsTaxable": return GetInterfaceTypeOfAccount_IsTaxable();
                    case "TaxExemptionNo": return GetInterfaceTypeOfAccount_TaxExemptionNo();
                    case "TaxEntityUseCode": return GetInterfaceTypeOfAccount_TaxEntityUseCode();
                    case "IsOnHold": return GetInterfaceTypeOfAccount_IsOnHold();
                    case "Credit": return GetInterfaceTypeOfAccount_Credit();
                    case "Token": return GetInterfaceTypeOfAccount_Token();
                    case "SageID": return GetInterfaceTypeOfAccount_SageID();
                    case "CreditCurrencyID": return GetInterfaceTypeOfAccount_CreditCurrencyID();
                    case "CreditCurrency": return GetInterfaceTypeOfAccount_CreditCurrency();
                    case "AccountContacts": return GetInterfaceTypeOfAccount_AccountContacts();
                    case "AccountCurrencies": return GetInterfaceTypeOfAccount_AccountCurrencies();
                    case "AccountPricePoints": return GetInterfaceTypeOfAccount_AccountPricePoints();
                    case "AccountAssociations": return GetInterfaceTypeOfAccount_AccountAssociations();
                    case "AccountsAssociatedWith": return GetInterfaceTypeOfAccount_AccountsAssociatedWith();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountAssociationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAccountAssociation_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfAccountAssociation_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAccountAssociation_Slave();
                    case "TypeID": return GetInterfaceTypeOfAccountAssociation_TypeID();
                    case "Type": return GetInterfaceTypeOfAccountAssociation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAccountAssociationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAccountContact_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfAccountContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAccountContact_Slave();
                    case "IsPrimary": return GetInterfaceTypeOfAccountContact_IsPrimary();
                    case "IsBilling": return GetInterfaceTypeOfAccountContact_IsBilling();
                    case "TransmittedToERP": return GetInterfaceTypeOfAccountContact_TransmittedToERP();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAccountCurrency_MasterID();
                    case "Master": return GetInterfaceTypeOfAccountCurrency_Master();
                    case "SlaveID": return GetInterfaceTypeOfAccountCurrency_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAccountCurrency_Slave();
                    case "IsPrimary": return GetInterfaceTypeOfAccountCurrency_IsPrimary();
                    case "CustomName": return GetInterfaceTypeOfAccountCurrency_CustomName();
                    case "CustomTranslationKey": return GetInterfaceTypeOfAccountCurrency_CustomTranslationKey();
                    case "OverrideUnicodeSymbolValue": return GetInterfaceTypeOfAccountCurrency_OverrideUnicodeSymbolValue();
                    case "OverrideHtmlCharacterCode": return GetInterfaceTypeOfAccountCurrency_OverrideHtmlCharacterCode();
                    case "OverrideRawCharacter": return GetInterfaceTypeOfAccountCurrency_OverrideRawCharacter();
                    case "OverrideDecimalPlaceAccuracy": return GetInterfaceTypeOfAccountCurrency_OverrideDecimalPlaceAccuracy();
                    case "OverrideUseSeparator": return GetInterfaceTypeOfAccountCurrency_OverrideUseSeparator();
                    case "OverrideRawDecimalCharacter": return GetInterfaceTypeOfAccountCurrency_OverrideRawDecimalCharacter();
                    case "OverrideHtmlDecimalCharacterCode": return GetInterfaceTypeOfAccountCurrency_OverrideHtmlDecimalCharacterCode();
                    case "OverrideRawSeparatorCharacter": return GetInterfaceTypeOfAccountCurrency_OverrideRawSeparatorCharacter();
                    case "OverrideHtmlSeparatorCharacterCode": return GetInterfaceTypeOfAccountCurrency_OverrideHtmlSeparatorCharacterCode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAccountFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfAccountFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAccountFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfAccountFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAccountImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfAccountImage_TypeID();
                    case "Type": return GetInterfaceTypeOfAccountImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfAccountImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfAccountImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfAccountImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfAccountImage_Copyright();
                    case "Location": return GetInterfaceTypeOfAccountImage_Location();
                    case "Latitude": return GetInterfaceTypeOfAccountImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfAccountImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfAccountImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfAccountImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfAccountImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfAccountImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfAccountImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfAccountImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfAccountImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfAccountImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfAccountImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfAccountImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfAccountImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfAccountImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfAccountImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAccountImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountPricePointModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAccountPricePoint_MasterID();
                    case "Master": return GetInterfaceTypeOfAccountPricePoint_Master();
                    case "SlaveID": return GetInterfaceTypeOfAccountPricePoint_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAccountPricePoint_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAccountProduct_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfAccountProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAccountProduct_Slave();
                    case "TypeID": return GetInterfaceTypeOfAccountProduct_TypeID();
                    case "Type": return GetInterfaceTypeOfAccountProduct_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAccountProductType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAccountStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfAccountType_StoreID();
                    case "Store": return GetInterfaceTypeOfAccountType_Store();
                    case "TranslationKey": return GetInterfaceTypeOfAccountType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountUsageBalanceModel)))
            {
                switch (property)
                {
                    case "Master": return GetInterfaceTypeOfAccountUsageBalance_Master();
                    case "MasterID": return GetInterfaceTypeOfAccountUsageBalance_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfAccountUsageBalance_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAccountUsageBalance_Slave();
                    case "Quantity": return GetInterfaceTypeOfAccountUsageBalance_Quantity();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Advertising
            if (type.GetInterfaces().Any(x => x == typeof(IAdModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfAd_TypeID();
                    case "Type": return GetInterfaceTypeOfAd_Type();
                    case "StatusID": return GetInterfaceTypeOfAd_StatusID();
                    case "Status": return GetInterfaceTypeOfAd_Status();
                    case "Images": return GetInterfaceTypeOfAd_Images();
                    case "Brands": return GetInterfaceTypeOfAd_Brands();
                    case "Stores": return GetInterfaceTypeOfAd_Stores();
                    case "Accounts": return GetInterfaceTypeOfAd_Accounts();
                    case "TargetURL": return GetInterfaceTypeOfAd_TargetURL();
                    case "Caption": return GetInterfaceTypeOfAd_Caption();
                    case "StartDate": return GetInterfaceTypeOfAd_StartDate();
                    case "EndDate": return GetInterfaceTypeOfAd_EndDate();
                    case "ExpirationDate": return GetInterfaceTypeOfAd_ExpirationDate();
                    case "Weight": return GetInterfaceTypeOfAd_Weight();
                    case "ImpressionCounterID": return GetInterfaceTypeOfAd_ImpressionCounterID();
                    case "ImpressionCounter": return GetInterfaceTypeOfAd_ImpressionCounter();
                    case "ClickCounterID": return GetInterfaceTypeOfAd_ClickCounterID();
                    case "ClickCounter": return GetInterfaceTypeOfAd_ClickCounter();
                    case "AdZones": return GetInterfaceTypeOfAd_AdZones();
                    case "CampaignAds": return GetInterfaceTypeOfAd_CampaignAds();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAdAccount_MasterID();
                    case "Master": return GetInterfaceTypeOfAdAccount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAdAccount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAdAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAdBrand_MasterID();
                    case "Master": return GetInterfaceTypeOfAdBrand_Master();
                    case "SlaveID": return GetInterfaceTypeOfAdBrand_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAdBrand_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAdImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfAdImage_TypeID();
                    case "Type": return GetInterfaceTypeOfAdImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfAdImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfAdImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfAdImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfAdImage_Copyright();
                    case "Location": return GetInterfaceTypeOfAdImage_Location();
                    case "Latitude": return GetInterfaceTypeOfAdImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfAdImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfAdImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfAdImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfAdImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfAdImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfAdImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfAdImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfAdImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfAdImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfAdImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfAdImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfAdImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfAdImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfAdImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAdImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAdStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAdStore_MasterID();
                    case "Master": return GetInterfaceTypeOfAdStore_Master();
                    case "SlaveID": return GetInterfaceTypeOfAdStore_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAdStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAdType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdZoneModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAdZone_MasterID();
                    case "Master": return GetInterfaceTypeOfAdZone_Master();
                    case "SlaveID": return GetInterfaceTypeOfAdZone_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAdZone_Slave();
                    case "ImpressionCounterID": return GetInterfaceTypeOfAdZone_ImpressionCounterID();
                    case "ImpressionCounter": return GetInterfaceTypeOfAdZone_ImpressionCounter();
                    case "ClickCounterID": return GetInterfaceTypeOfAdZone_ClickCounterID();
                    case "ClickCounter": return GetInterfaceTypeOfAdZone_ClickCounter();
                    case "AdZoneAccessID": return GetInterfaceTypeOfAdZone_AdZoneAccessID();
                    case "AdZoneAccess": return GetInterfaceTypeOfAdZone_AdZoneAccess();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdZoneAccessModel)))
            {
                switch (property)
                {
                    case "ImpressionCounterID": return GetInterfaceTypeOfAdZoneAccess_ImpressionCounterID();
                    case "ImpressionCounter": return GetInterfaceTypeOfAdZoneAccess_ImpressionCounter();
                    case "ClickCounterID": return GetInterfaceTypeOfAdZoneAccess_ClickCounterID();
                    case "ClickCounter": return GetInterfaceTypeOfAdZoneAccess_ClickCounter();
                    case "StartDate": return GetInterfaceTypeOfAdZoneAccess_StartDate();
                    case "EndDate": return GetInterfaceTypeOfAdZoneAccess_EndDate();
                    case "UniqueAdLimit": return GetInterfaceTypeOfAdZoneAccess_UniqueAdLimit();
                    case "ImpressionLimit": return GetInterfaceTypeOfAdZoneAccess_ImpressionLimit();
                    case "ClickLimit": return GetInterfaceTypeOfAdZoneAccess_ClickLimit();
                    case "ZoneID": return GetInterfaceTypeOfAdZoneAccess_ZoneID();
                    case "Zone": return GetInterfaceTypeOfAdZoneAccess_Zone();
                    case "SubscriptionID": return GetInterfaceTypeOfAdZoneAccess_SubscriptionID();
                    case "Subscription": return GetInterfaceTypeOfAdZoneAccess_Subscription();
                    case "AdZones": return GetInterfaceTypeOfAdZoneAccess_AdZones();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IZoneModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfZone_TypeID();
                    case "Type": return GetInterfaceTypeOfZone_Type();
                    case "StatusID": return GetInterfaceTypeOfZone_StatusID();
                    case "Status": return GetInterfaceTypeOfZone_Status();
                    case "Width": return GetInterfaceTypeOfZone_Width();
                    case "Height": return GetInterfaceTypeOfZone_Height();
                    case "AdZones": return GetInterfaceTypeOfZone_AdZones();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfZoneStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfZoneType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Attributes
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeGroupModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAttributeGroup_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeTabModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfAttributeTab_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeTypeModel)))
            {
                switch (property)
                {
                    case "GeneralAttributes": return GetInterfaceTypeOfAttributeType_GeneralAttributes();
                    case "TranslationKey": return GetInterfaceTypeOfAttributeType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGeneralAttributeModel)))
            {
                switch (property)
                {
                    case "IsFilter": return GetInterfaceTypeOfGeneralAttribute_IsFilter();
                    case "IsComparable": return GetInterfaceTypeOfGeneralAttribute_IsComparable();
                    case "IsPredefined": return GetInterfaceTypeOfGeneralAttribute_IsPredefined();
                    case "IsMarkup": return GetInterfaceTypeOfGeneralAttribute_IsMarkup();
                    case "IsTab": return GetInterfaceTypeOfGeneralAttribute_IsTab();
                    case "HideFromStorefront": return GetInterfaceTypeOfGeneralAttribute_HideFromStorefront();
                    case "HideFromSuppliers": return GetInterfaceTypeOfGeneralAttribute_HideFromSuppliers();
                    case "HideFromProductDetailView": return GetInterfaceTypeOfGeneralAttribute_HideFromProductDetailView();
                    case "HideFromCatalogViews": return GetInterfaceTypeOfGeneralAttribute_HideFromCatalogViews();
                    case "TypeID": return GetInterfaceTypeOfGeneralAttribute_TypeID();
                    case "Type": return GetInterfaceTypeOfGeneralAttribute_Type();
                    case "AttributeTabID": return GetInterfaceTypeOfGeneralAttribute_AttributeTabID();
                    case "AttributeTab": return GetInterfaceTypeOfGeneralAttribute_AttributeTab();
                    case "AttributeGroupID": return GetInterfaceTypeOfGeneralAttribute_AttributeGroupID();
                    case "AttributeGroup": return GetInterfaceTypeOfGeneralAttribute_AttributeGroup();
                    case "TranslationKey": return GetInterfaceTypeOfGeneralAttribute_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGeneralAttributePredefinedOptionModel)))
            {
                switch (property)
                {
                    case "Value": return GetInterfaceTypeOfGeneralAttributePredefinedOption_Value();
                    case "UofM": return GetInterfaceTypeOfGeneralAttributePredefinedOption_UofM();
                    case "AttributeID": return GetInterfaceTypeOfGeneralAttributePredefinedOption_AttributeID();
                    case "Attribute": return GetInterfaceTypeOfGeneralAttributePredefinedOption_Attribute();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Badges
            if (type.GetInterfaces().Any(x => x == typeof(IBadgeModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfBadge_TypeID();
                    case "Type": return GetInterfaceTypeOfBadge_Type();
                    case "Images": return GetInterfaceTypeOfBadge_Images();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBadgeImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBadgeImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfBadgeImage_TypeID();
                    case "Type": return GetInterfaceTypeOfBadgeImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfBadgeImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfBadgeImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfBadgeImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfBadgeImage_Copyright();
                    case "Location": return GetInterfaceTypeOfBadgeImage_Location();
                    case "Latitude": return GetInterfaceTypeOfBadgeImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfBadgeImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfBadgeImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfBadgeImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfBadgeImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfBadgeImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfBadgeImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfBadgeImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfBadgeImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfBadgeImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfBadgeImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfBadgeImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfBadgeImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfBadgeImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfBadgeImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfBadgeImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfBadgeType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Brands
            if (type.GetInterfaces().Any(x => x == typeof(IBrandModel)))
            {
                switch (property)
                {
                    case "Notes": return GetInterfaceTypeOfBrand_Notes();
                    case "Images": return GetInterfaceTypeOfBrand_Images();
                    case "MinimumOrderDollarAmount": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetInterfaceTypeOfBrand_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetInterfaceTypeOfBrand_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetInterfaceTypeOfBrand_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetInterfaceTypeOfBrand_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Accounts": return GetInterfaceTypeOfBrand_Accounts();
                    case "Users": return GetInterfaceTypeOfBrand_Users();
                    case "Categories": return GetInterfaceTypeOfBrand_Categories();
                    case "Stores": return GetInterfaceTypeOfBrand_Stores();
                    case "BrandCurrencies": return GetInterfaceTypeOfBrand_BrandCurrencies();
                    case "BrandInventoryLocations": return GetInterfaceTypeOfBrand_BrandInventoryLocations();
                    case "BrandLanguages": return GetInterfaceTypeOfBrand_BrandLanguages();
                    case "BrandSiteDomains": return GetInterfaceTypeOfBrand_BrandSiteDomains();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandAccount_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandAccount_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandAccount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandAccount_Slave();
                    case "HasAccessToBrand": return GetInterfaceTypeOfBrandAccount_HasAccessToBrand();
                    case "PricePointID": return GetInterfaceTypeOfBrandAccount_PricePointID();
                    case "PricePoint": return GetInterfaceTypeOfBrandAccount_PricePoint();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandCategory_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandCategory_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandCategory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandCurrency_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandCurrency_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandCurrency_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandCurrency_Slave();
                    case "IsPrimary": return GetInterfaceTypeOfBrandCurrency_IsPrimary();
                    case "CustomName": return GetInterfaceTypeOfBrandCurrency_CustomName();
                    case "CustomTranslationKey": return GetInterfaceTypeOfBrandCurrency_CustomTranslationKey();
                    case "OverrideUnicodeSymbolValue": return GetInterfaceTypeOfBrandCurrency_OverrideUnicodeSymbolValue();
                    case "OverrideHtmlCharacterCode": return GetInterfaceTypeOfBrandCurrency_OverrideHtmlCharacterCode();
                    case "OverrideRawCharacter": return GetInterfaceTypeOfBrandCurrency_OverrideRawCharacter();
                    case "OverrideDecimalPlaceAccuracy": return GetInterfaceTypeOfBrandCurrency_OverrideDecimalPlaceAccuracy();
                    case "OverrideUseSeparator": return GetInterfaceTypeOfBrandCurrency_OverrideUseSeparator();
                    case "OverrideRawDecimalCharacter": return GetInterfaceTypeOfBrandCurrency_OverrideRawDecimalCharacter();
                    case "OverrideHtmlDecimalCharacterCode": return GetInterfaceTypeOfBrandCurrency_OverrideHtmlDecimalCharacterCode();
                    case "OverrideRawSeparatorCharacter": return GetInterfaceTypeOfBrandCurrency_OverrideRawSeparatorCharacter();
                    case "OverrideHtmlSeparatorCharacterCode": return GetInterfaceTypeOfBrandCurrency_OverrideHtmlSeparatorCharacterCode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfBrandImage_TypeID();
                    case "Type": return GetInterfaceTypeOfBrandImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfBrandImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfBrandImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfBrandImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfBrandImage_Copyright();
                    case "Location": return GetInterfaceTypeOfBrandImage_Location();
                    case "Latitude": return GetInterfaceTypeOfBrandImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfBrandImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfBrandImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfBrandImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfBrandImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfBrandImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfBrandImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfBrandImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfBrandImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfBrandImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfBrandImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfBrandImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfBrandImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfBrandImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfBrandImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfBrandImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandInventoryLocationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandInventoryLocation_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandInventoryLocation_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandInventoryLocation_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandInventoryLocation_Slave();
                    case "TypeID": return GetInterfaceTypeOfBrandInventoryLocation_TypeID();
                    case "Type": return GetInterfaceTypeOfBrandInventoryLocation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfBrandInventoryLocationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandLanguage_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandLanguage_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandLanguage_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandLanguage_Slave();
                    case "OverrideLocale": return GetInterfaceTypeOfBrandLanguage_OverrideLocale();
                    case "OverrideUnicodeName": return GetInterfaceTypeOfBrandLanguage_OverrideUnicodeName();
                    case "OverrideISO639_1_2002": return GetInterfaceTypeOfBrandLanguage_OverrideISO639_1_2002();
                    case "OverrideISO639_2_1998": return GetInterfaceTypeOfBrandLanguage_OverrideISO639_2_1998();
                    case "OverrideISO639_3_2007": return GetInterfaceTypeOfBrandLanguage_OverrideISO639_3_2007();
                    case "OverrideISO639_5_2008": return GetInterfaceTypeOfBrandLanguage_OverrideISO639_5_2008();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandProduct_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandProduct_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandProduct_Slave();
                    case "IsVisibleInBrand": return GetInterfaceTypeOfBrandProduct_IsVisibleInBrand();
                    case "PriceBase": return GetInterfaceTypeOfBrandProduct_PriceBase();
                    case "PriceMsrp": return GetInterfaceTypeOfBrandProduct_PriceMsrp();
                    case "PriceReduction": return GetInterfaceTypeOfBrandProduct_PriceReduction();
                    case "PriceSale": return GetInterfaceTypeOfBrandProduct_PriceSale();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandSiteDomainModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandSiteDomain_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandSiteDomain_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandSiteDomain_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandSiteDomain_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandStore_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandStore_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandStore_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfBrandUser_MasterID();
                    case "Master": return GetInterfaceTypeOfBrandUser_Master();
                    case "SlaveID": return GetInterfaceTypeOfBrandUser_SlaveID();
                    case "Slave": return GetInterfaceTypeOfBrandUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region CalendarEvents
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfCalendarEvent_TypeID();
                    case "Type": return GetInterfaceTypeOfCalendarEvent_Type();
                    case "StatusID": return GetInterfaceTypeOfCalendarEvent_StatusID();
                    case "Status": return GetInterfaceTypeOfCalendarEvent_Status();
                    case "ContactID": return GetInterfaceTypeOfCalendarEvent_ContactID();
                    case "Contact": return GetInterfaceTypeOfCalendarEvent_Contact();
                    case "Images": return GetInterfaceTypeOfCalendarEvent_Images();
                    case "StoredFiles": return GetInterfaceTypeOfCalendarEvent_StoredFiles();
                    case "Products": return GetInterfaceTypeOfCalendarEvent_Products();
                    case "ShortDescription": return GetInterfaceTypeOfCalendarEvent_ShortDescription();
                    case "EventDurationUnitOfMeasure": return GetInterfaceTypeOfCalendarEvent_EventDurationUnitOfMeasure();
                    case "RecurrenceString": return GetInterfaceTypeOfCalendarEvent_RecurrenceString();
                    case "StartDate": return GetInterfaceTypeOfCalendarEvent_StartDate();
                    case "EndDate": return GetInterfaceTypeOfCalendarEvent_EndDate();
                    case "EventDuration": return GetInterfaceTypeOfCalendarEvent_EventDuration();
                    case "MaxAttendees": return GetInterfaceTypeOfCalendarEvent_MaxAttendees();
                    case "GroupID": return GetInterfaceTypeOfCalendarEvent_GroupID();
                    case "Group": return GetInterfaceTypeOfCalendarEvent_Group();
                    case "CalendarEventDetails": return GetInterfaceTypeOfCalendarEvent_CalendarEventDetails();
                    case "UserEventAttendances": return GetInterfaceTypeOfCalendarEvent_UserEventAttendances();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventDetailModel)))
            {
                switch (property)
                {
                    case "Day": return GetInterfaceTypeOfCalendarEventDetail_Day();
                    case "StartTime": return GetInterfaceTypeOfCalendarEventDetail_StartTime();
                    case "EndTime": return GetInterfaceTypeOfCalendarEventDetail_EndTime();
                    case "Location": return GetInterfaceTypeOfCalendarEventDetail_Location();
                    case "CalendarEventID": return GetInterfaceTypeOfCalendarEventDetail_CalendarEventID();
                    case "CalendarEvent": return GetInterfaceTypeOfCalendarEventDetail_CalendarEvent();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCalendarEventFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfCalendarEventFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCalendarEventFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfCalendarEventFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCalendarEventImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfCalendarEventImage_TypeID();
                    case "Type": return GetInterfaceTypeOfCalendarEventImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfCalendarEventImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfCalendarEventImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfCalendarEventImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfCalendarEventImage_Copyright();
                    case "Location": return GetInterfaceTypeOfCalendarEventImage_Location();
                    case "Latitude": return GetInterfaceTypeOfCalendarEventImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfCalendarEventImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfCalendarEventImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfCalendarEventImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfCalendarEventImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfCalendarEventImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfCalendarEventImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfCalendarEventImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfCalendarEventImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfCalendarEventImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfCalendarEventImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfCalendarEventImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfCalendarEventImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfCalendarEventImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfCalendarEventImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCalendarEventImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCalendarEventProduct_MasterID();
                    case "Master": return GetInterfaceTypeOfCalendarEventProduct_Master();
                    case "SlaveID": return GetInterfaceTypeOfCalendarEventProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCalendarEventProduct_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCalendarEventStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCalendarEventType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserEventAttendanceModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfUserEventAttendance_TypeID();
                    case "Type": return GetInterfaceTypeOfUserEventAttendance_Type();
                    case "MasterID": return GetInterfaceTypeOfUserEventAttendance_MasterID();
                    case "Master": return GetInterfaceTypeOfUserEventAttendance_Master();
                    case "SlaveID": return GetInterfaceTypeOfUserEventAttendance_SlaveID();
                    case "Slave": return GetInterfaceTypeOfUserEventAttendance_Slave();
                    case "HasAttended": return GetInterfaceTypeOfUserEventAttendance_HasAttended();
                    case "Date": return GetInterfaceTypeOfUserEventAttendance_Date();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfUserEventAttendanceType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Categories
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryModel)))
            {
                switch (property)
                {
                    case "ParentID": return GetInterfaceTypeOfCategory_ParentID();
                    case "Parent": return GetInterfaceTypeOfCategory_Parent();
                    case "Children": return GetInterfaceTypeOfCategory_Children();
                    case "MinimumOrderDollarAmount": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetInterfaceTypeOfCategory_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetInterfaceTypeOfCategory_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetInterfaceTypeOfCategory_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetInterfaceTypeOfCategory_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "TypeID": return GetInterfaceTypeOfCategory_TypeID();
                    case "Type": return GetInterfaceTypeOfCategory_Type();
                    case "Brands": return GetInterfaceTypeOfCategory_Brands();
                    case "RequiresRoles": return GetInterfaceTypeOfCategory_RequiresRoles();
                    case "RequiresRolesList": return GetInterfaceTypeOfCategory_RequiresRolesList();
                    case "RequiresRolesAlt": return GetInterfaceTypeOfCategory_RequiresRolesAlt();
                    case "RequiresRolesListAlt": return GetInterfaceTypeOfCategory_RequiresRolesListAlt();
                    case "Reviews": return GetInterfaceTypeOfCategory_Reviews();
                    case "Images": return GetInterfaceTypeOfCategory_Images();
                    case "StoredFiles": return GetInterfaceTypeOfCategory_StoredFiles();
                    case "IsVisible": return GetInterfaceTypeOfCategory_IsVisible();
                    case "IncludeInMenu": return GetInterfaceTypeOfCategory_IncludeInMenu();
                    case "HeaderContent": return GetInterfaceTypeOfCategory_HeaderContent();
                    case "SidebarContent": return GetInterfaceTypeOfCategory_SidebarContent();
                    case "FooterContent": return GetInterfaceTypeOfCategory_FooterContent();
                    case "HandlingCharge": return GetInterfaceTypeOfCategory_HandlingCharge();
                    case "RestockingFeePercent": return GetInterfaceTypeOfCategory_RestockingFeePercent();
                    case "RestockingFeeAmount": return GetInterfaceTypeOfCategory_RestockingFeeAmount();
                    case "RestockingFeeAmountCurrencyID": return GetInterfaceTypeOfCategory_RestockingFeeAmountCurrencyID();
                    case "RestockingFeeAmountCurrency": return GetInterfaceTypeOfCategory_RestockingFeeAmountCurrency();
                    case "ProductCategories": return GetInterfaceTypeOfCategory_ProductCategories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCategoryFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfCategoryFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCategoryFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfCategoryFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCategoryImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfCategoryImage_TypeID();
                    case "Type": return GetInterfaceTypeOfCategoryImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfCategoryImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfCategoryImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfCategoryImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfCategoryImage_Copyright();
                    case "Location": return GetInterfaceTypeOfCategoryImage_Location();
                    case "Latitude": return GetInterfaceTypeOfCategoryImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfCategoryImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfCategoryImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfCategoryImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfCategoryImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfCategoryImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfCategoryImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfCategoryImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfCategoryImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfCategoryImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfCategoryImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfCategoryImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfCategoryImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfCategoryImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfCategoryImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCategoryImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCategoryType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Contacts
            if (type.GetInterfaces().Any(x => x == typeof(IContactModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfContact_TypeID();
                    case "Type": return GetInterfaceTypeOfContact_Type();
                    case "Images": return GetInterfaceTypeOfContact_Images();
                    case "FirstName": return GetInterfaceTypeOfContact_FirstName();
                    case "MiddleName": return GetInterfaceTypeOfContact_MiddleName();
                    case "LastName": return GetInterfaceTypeOfContact_LastName();
                    case "FullName": return GetInterfaceTypeOfContact_FullName();
                    case "Phone1": return GetInterfaceTypeOfContact_Phone1();
                    case "Phone2": return GetInterfaceTypeOfContact_Phone2();
                    case "Phone3": return GetInterfaceTypeOfContact_Phone3();
                    case "Fax1": return GetInterfaceTypeOfContact_Fax1();
                    case "Email1": return GetInterfaceTypeOfContact_Email1();
                    case "Website1": return GetInterfaceTypeOfContact_Website1();
                    case "AddressID": return GetInterfaceTypeOfContact_AddressID();
                    case "Address": return GetInterfaceTypeOfContact_Address();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IContactImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfContactImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfContactImage_TypeID();
                    case "Type": return GetInterfaceTypeOfContactImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfContactImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfContactImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfContactImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfContactImage_Copyright();
                    case "Location": return GetInterfaceTypeOfContactImage_Location();
                    case "Latitude": return GetInterfaceTypeOfContactImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfContactImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfContactImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfContactImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfContactImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfContactImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfContactImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfContactImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfContactImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfContactImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfContactImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfContactImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfContactImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfContactImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfContactImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfContactImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfContactType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProfanityFilterModel)))
            {
                switch (property)
                {
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IReferralCodeModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfReferralCode_TypeID();
                    case "Type": return GetInterfaceTypeOfReferralCode_Type();
                    case "StatusID": return GetInterfaceTypeOfReferralCode_StatusID();
                    case "Status": return GetInterfaceTypeOfReferralCode_Status();
                    case "Code": return GetInterfaceTypeOfReferralCode_Code();
                    case "UserID": return GetInterfaceTypeOfReferralCode_UserID();
                    case "User": return GetInterfaceTypeOfReferralCode_User();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfReferralCodeStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfReferralCodeType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfUser_TypeID();
                    case "Type": return GetInterfaceTypeOfUser_Type();
                    case "StatusID": return GetInterfaceTypeOfUser_StatusID();
                    case "Status": return GetInterfaceTypeOfUser_Status();
                    case "ContactID": return GetInterfaceTypeOfUser_ContactID();
                    case "Contact": return GetInterfaceTypeOfUser_Contact();
                    case "Brands": return GetInterfaceTypeOfUser_Brands();
                    case "Stores": return GetInterfaceTypeOfUser_Stores();
                    case "Images": return GetInterfaceTypeOfUser_Images();
                    case "StoredFiles": return GetInterfaceTypeOfUser_StoredFiles();
                    case "UserName": return GetInterfaceTypeOfUser_UserName();
                    case "SecurityStamp": return GetInterfaceTypeOfUser_SecurityStamp();
                    case "PhoneNumber": return GetInterfaceTypeOfUser_PhoneNumber();
                    case "LockoutEndDateUtc": return GetInterfaceTypeOfUser_LockoutEndDateUtc();
                    case "IsApproved": return GetInterfaceTypeOfUser_IsApproved();
                    case "RequirePasswordChangeOnNextLogin": return GetInterfaceTypeOfUser_RequirePasswordChangeOnNextLogin();
                    case "AccountID": return GetInterfaceTypeOfUser_AccountID();
                    case "Account": return GetInterfaceTypeOfUser_Account();
                    case "PreferredStoreID": return GetInterfaceTypeOfUser_PreferredStoreID();
                    case "PreferredStore": return GetInterfaceTypeOfUser_PreferredStore();
                    case "CurrencyID": return GetInterfaceTypeOfUser_CurrencyID();
                    case "Currency": return GetInterfaceTypeOfUser_Currency();
                    case "LanguageID": return GetInterfaceTypeOfUser_LanguageID();
                    case "Language": return GetInterfaceTypeOfUser_Language();
                    case "UserOnlineStatusID": return GetInterfaceTypeOfUser_UserOnlineStatusID();
                    case "UserOnlineStatus": return GetInterfaceTypeOfUser_UserOnlineStatus();
                    case "FavoriteCategories": return GetInterfaceTypeOfUser_FavoriteCategories();
                    case "FavoriteVendors": return GetInterfaceTypeOfUser_FavoriteVendors();
                    case "FavoriteManufacturers": return GetInterfaceTypeOfUser_FavoriteManufacturers();
                    case "FavoriteStores": return GetInterfaceTypeOfUser_FavoriteStores();
                    case "ReferralCodes": return GetInterfaceTypeOfUser_ReferralCodes();
                    case "UserProductTypes": return GetInterfaceTypeOfUser_UserProductTypes();
                    case "EmailConfirmed": return GetInterfaceTypeOfUser_EmailConfirmed();
                    case "PhoneNumberConfirmed": return GetInterfaceTypeOfUser_PhoneNumberConfirmed();
                    case "TwoFactorEnabled": return GetInterfaceTypeOfUser_TwoFactorEnabled();
                    case "LockoutEnabled": return GetInterfaceTypeOfUser_LockoutEnabled();
                    case "AccessFailedCount": return GetInterfaceTypeOfUser_AccessFailedCount();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfUserFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfUserFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfUserFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfUserFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfUserImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfUserImage_TypeID();
                    case "Type": return GetInterfaceTypeOfUserImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfUserImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfUserImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfUserImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfUserImage_Copyright();
                    case "Location": return GetInterfaceTypeOfUserImage_Location();
                    case "Latitude": return GetInterfaceTypeOfUserImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfUserImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfUserImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfUserImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfUserImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfUserImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfUserImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfUserImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfUserImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfUserImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfUserImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfUserImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfUserImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfUserImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfUserImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfUserImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfUserOnlineStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfUserProductType_MasterID();
                    case "Master": return GetInterfaceTypeOfUserProductType_Master();
                    case "SlaveID": return GetInterfaceTypeOfUserProductType_SlaveID();
                    case "Slave": return GetInterfaceTypeOfUserProductType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfUserStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfUserType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Counters
            if (type.GetInterfaces().Any(x => x == typeof(ICounterModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfCounter_TypeID();
                    case "Type": return GetInterfaceTypeOfCounter_Type();
                    case "Value": return GetInterfaceTypeOfCounter_Value();
                    case "CounterLogs": return GetInterfaceTypeOfCounter_CounterLogs();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICounterLogModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfCounterLog_TypeID();
                    case "Type": return GetInterfaceTypeOfCounterLog_Type();
                    case "Value": return GetInterfaceTypeOfCounterLog_Value();
                    case "CounterID": return GetInterfaceTypeOfCounterLog_CounterID();
                    case "Counter": return GetInterfaceTypeOfCounterLog_Counter();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCounterLogType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCounterType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Currencies
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyModel)))
            {
                switch (property)
                {
                    case "Images": return GetInterfaceTypeOfCurrency_Images();
                    case "ISO4217Alpha": return GetInterfaceTypeOfCurrency_ISO4217Alpha();
                    case "ISO4217Numeric": return GetInterfaceTypeOfCurrency_ISO4217Numeric();
                    case "UnicodeSymbolValue": return GetInterfaceTypeOfCurrency_UnicodeSymbolValue();
                    case "HtmlCharacterCode": return GetInterfaceTypeOfCurrency_HtmlCharacterCode();
                    case "RawCharacter": return GetInterfaceTypeOfCurrency_RawCharacter();
                    case "DecimalPlaceAccuracy": return GetInterfaceTypeOfCurrency_DecimalPlaceAccuracy();
                    case "UseSeparator": return GetInterfaceTypeOfCurrency_UseSeparator();
                    case "RawDecimalCharacter": return GetInterfaceTypeOfCurrency_RawDecimalCharacter();
                    case "HtmlDecimalCharacterCode": return GetInterfaceTypeOfCurrency_HtmlDecimalCharacterCode();
                    case "RawSeparatorCharacter": return GetInterfaceTypeOfCurrency_RawSeparatorCharacter();
                    case "HtmlSeparatorCharacterCode": return GetInterfaceTypeOfCurrency_HtmlSeparatorCharacterCode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyConversionModel)))
            {
                switch (property)
                {
                    case "Rate": return GetInterfaceTypeOfCurrencyConversion_Rate();
                    case "StartDate": return GetInterfaceTypeOfCurrencyConversion_StartDate();
                    case "EndDate": return GetInterfaceTypeOfCurrencyConversion_EndDate();
                    case "StartingCurrencyID": return GetInterfaceTypeOfCurrencyConversion_StartingCurrencyID();
                    case "StartingCurrency": return GetInterfaceTypeOfCurrencyConversion_StartingCurrency();
                    case "EndingCurrencyID": return GetInterfaceTypeOfCurrencyConversion_EndingCurrencyID();
                    case "EndingCurrency": return GetInterfaceTypeOfCurrencyConversion_EndingCurrency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCurrencyImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfCurrencyImage_TypeID();
                    case "Type": return GetInterfaceTypeOfCurrencyImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfCurrencyImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfCurrencyImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfCurrencyImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfCurrencyImage_Copyright();
                    case "Location": return GetInterfaceTypeOfCurrencyImage_Location();
                    case "Latitude": return GetInterfaceTypeOfCurrencyImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfCurrencyImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfCurrencyImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfCurrencyImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfCurrencyImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfCurrencyImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfCurrencyImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfCurrencyImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfCurrencyImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfCurrencyImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfCurrencyImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfCurrencyImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfCurrencyImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfCurrencyImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfCurrencyImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCurrencyImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalCurrencyRateModel)))
            {
                switch (property)
                {
                    case "Rate": return GetInterfaceTypeOfHistoricalCurrencyRate_Rate();
                    case "OnDate": return GetInterfaceTypeOfHistoricalCurrencyRate_OnDate();
                    case "StartingCurrencyID": return GetInterfaceTypeOfHistoricalCurrencyRate_StartingCurrencyID();
                    case "StartingCurrency": return GetInterfaceTypeOfHistoricalCurrencyRate_StartingCurrency();
                    case "EndingCurrencyID": return GetInterfaceTypeOfHistoricalCurrencyRate_EndingCurrencyID();
                    case "EndingCurrency": return GetInterfaceTypeOfHistoricalCurrencyRate_EndingCurrency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Discounts
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedCartDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedCartDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedCartDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedCartDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedCartDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedCartDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedCartItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedCartItemDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedCartItemDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedCartItemDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedCartItemDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedCartItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountModel)))
            {
                switch (property)
                {
                    case "UsageLimitByUser": return GetInterfaceTypeOfDiscount_UsageLimitByUser();
                    case "CanCombine": return GetInterfaceTypeOfDiscount_CanCombine();
                    case "IsAutoApplied": return GetInterfaceTypeOfDiscount_IsAutoApplied();
                    case "Value": return GetInterfaceTypeOfDiscount_Value();
                    case "ThresholdAmount": return GetInterfaceTypeOfDiscount_ThresholdAmount();
                    case "BuyXValue": return GetInterfaceTypeOfDiscount_BuyXValue();
                    case "GetYValue": return GetInterfaceTypeOfDiscount_GetYValue();
                    case "RoundingOperation": return GetInterfaceTypeOfDiscount_RoundingOperation();
                    case "UsageLimit": return GetInterfaceTypeOfDiscount_UsageLimit();
                    case "DiscountCompareOperator": return GetInterfaceTypeOfDiscount_DiscountCompareOperator();
                    case "DiscountTypeID": return GetInterfaceTypeOfDiscount_DiscountTypeID();
                    case "ValueType": return GetInterfaceTypeOfDiscount_ValueType();
                    case "RoundingType": return GetInterfaceTypeOfDiscount_RoundingType();
                    case "Priority": return GetInterfaceTypeOfDiscount_Priority();
                    case "StartDate": return GetInterfaceTypeOfDiscount_StartDate();
                    case "EndDate": return GetInterfaceTypeOfDiscount_EndDate();
                    case "Products": return GetInterfaceTypeOfDiscount_Products();
                    case "Brands": return GetInterfaceTypeOfDiscount_Brands();
                    case "Stores": return GetInterfaceTypeOfDiscount_Stores();
                    case "Accounts": return GetInterfaceTypeOfDiscount_Accounts();
                    case "Users": return GetInterfaceTypeOfDiscount_Users();
                    case "Vendors": return GetInterfaceTypeOfDiscount_Vendors();
                    case "Manufacturers": return GetInterfaceTypeOfDiscount_Manufacturers();
                    case "Codes": return GetInterfaceTypeOfDiscount_Codes();
                    case "Countries": return GetInterfaceTypeOfDiscount_Countries();
                    case "UserRoles": return GetInterfaceTypeOfDiscount_UserRoles();
                    case "Categories": return GetInterfaceTypeOfDiscount_Categories();
                    case "AccountTypes": return GetInterfaceTypeOfDiscount_AccountTypes();
                    case "ProductTypes": return GetInterfaceTypeOfDiscount_ProductTypes();
                    case "ShipCarrierMethods": return GetInterfaceTypeOfDiscount_ShipCarrierMethods();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountAccount_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountAccount_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountAccount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountAccountTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountAccountType_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountAccountType_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountAccountType_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountAccountType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountBrand_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountBrand_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountBrand_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountBrand_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountCategory_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountCategory_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountCategory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCodeModel)))
            {
                switch (property)
                {
                    case "Code": return GetInterfaceTypeOfDiscountCode_Code();
                    case "DiscountID": return GetInterfaceTypeOfDiscountCode_DiscountID();
                    case "UserID": return GetInterfaceTypeOfDiscountCode_UserID();
                    case "User": return GetInterfaceTypeOfDiscountCode_User();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCountryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountCountry_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountCountry_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountCountry_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountCountry_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountManufacturer_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountManufacturer_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountManufacturer_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountProduct_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountProduct_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountProduct_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountProductType_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountProductType_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountProductType_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountProductType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountShipCarrierMethod_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountShipCarrierMethod_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountShipCarrierMethod_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountShipCarrierMethod_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountStore_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountStore_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountStore_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountUser_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountUser_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountUser_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountUserRoleModel)))
            {
                switch (property)
                {
                    case "RoleName": return GetInterfaceTypeOfDiscountUserRole_RoleName();
                    case "MasterID": return GetInterfaceTypeOfDiscountUserRole_MasterID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfDiscountVendor_MasterID();
                    case "Master": return GetInterfaceTypeOfDiscountVendor_Master();
                    case "SlaveID": return GetInterfaceTypeOfDiscountVendor_SlaveID();
                    case "Slave": return GetInterfaceTypeOfDiscountVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedPurchaseOrderDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedPurchaseOrderDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedPurchaseOrderDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedPurchaseOrderDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedPurchaseOrderDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedPurchaseOrderDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedPurchaseOrderItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedPurchaseOrderItemDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedPurchaseOrderItemDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedPurchaseOrderItemDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedPurchaseOrderItemDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedPurchaseOrderItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesInvoiceDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesInvoiceDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesInvoiceDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesInvoiceDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesInvoiceDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesInvoiceDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesInvoiceItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesInvoiceItemDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesInvoiceItemDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesInvoiceItemDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesInvoiceItemDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesInvoiceItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesOrderDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesOrderDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesOrderDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesOrderDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesOrderDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesOrderDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesOrderItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesOrderItemDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesOrderItemDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesOrderItemDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesOrderItemDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesOrderItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesQuoteDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesQuoteDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesQuoteDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesQuoteDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesQuoteDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesQuoteDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesQuoteItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesQuoteItemDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesQuoteItemDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesQuoteItemDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesQuoteItemDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesQuoteItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesReturnDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesReturnDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesReturnDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesReturnDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesReturnDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesReturnDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesReturnItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSalesReturnItemDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSalesReturnItemDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSalesReturnItemDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSalesReturnItemDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSalesReturnItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSampleRequestDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSampleRequestDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSampleRequestDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSampleRequestDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSampleRequestDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSampleRequestDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSampleRequestItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfAppliedSampleRequestItemDiscount_MasterID();
                    case "Master": return GetInterfaceTypeOfAppliedSampleRequestItemDiscount_Master();
                    case "SlaveID": return GetInterfaceTypeOfAppliedSampleRequestItemDiscount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfAppliedSampleRequestItemDiscount_Slave();
                    case "DiscountTotal": return GetInterfaceTypeOfAppliedSampleRequestItemDiscount_DiscountTotal();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Favorites
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfFavoriteCategory_MasterID();
                    case "Master": return GetInterfaceTypeOfFavoriteCategory_Master();
                    case "SlaveID": return GetInterfaceTypeOfFavoriteCategory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfFavoriteCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfFavoriteManufacturer_MasterID();
                    case "Master": return GetInterfaceTypeOfFavoriteManufacturer_Master();
                    case "SlaveID": return GetInterfaceTypeOfFavoriteManufacturer_SlaveID();
                    case "Slave": return GetInterfaceTypeOfFavoriteManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteShipCarrierModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfFavoriteShipCarrier_MasterID();
                    case "Master": return GetInterfaceTypeOfFavoriteShipCarrier_Master();
                    case "SlaveID": return GetInterfaceTypeOfFavoriteShipCarrier_SlaveID();
                    case "Slave": return GetInterfaceTypeOfFavoriteShipCarrier_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfFavoriteStore_MasterID();
                    case "Master": return GetInterfaceTypeOfFavoriteStore_Master();
                    case "SlaveID": return GetInterfaceTypeOfFavoriteStore_SlaveID();
                    case "Slave": return GetInterfaceTypeOfFavoriteStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfFavoriteVendor_MasterID();
                    case "Master": return GetInterfaceTypeOfFavoriteVendor_Master();
                    case "SlaveID": return GetInterfaceTypeOfFavoriteVendor_SlaveID();
                    case "Slave": return GetInterfaceTypeOfFavoriteVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Geography
            if (type.GetInterfaces().Any(x => x == typeof(IAddressModel)))
            {
                switch (property)
                {
                    case "Company": return GetInterfaceTypeOfAddress_Company();
                    case "Street1": return GetInterfaceTypeOfAddress_Street1();
                    case "Street2": return GetInterfaceTypeOfAddress_Street2();
                    case "Street3": return GetInterfaceTypeOfAddress_Street3();
                    case "City": return GetInterfaceTypeOfAddress_City();
                    case "RegionCustom": return GetInterfaceTypeOfAddress_RegionCustom();
                    case "CountryCustom": return GetInterfaceTypeOfAddress_CountryCustom();
                    case "PostalCode": return GetInterfaceTypeOfAddress_PostalCode();
                    case "Latitude": return GetInterfaceTypeOfAddress_Latitude();
                    case "Longitude": return GetInterfaceTypeOfAddress_Longitude();
                    case "CountryID": return GetInterfaceTypeOfAddress_CountryID();
                    case "Country": return GetInterfaceTypeOfAddress_Country();
                    case "RegionID": return GetInterfaceTypeOfAddress_RegionID();
                    case "Region": return GetInterfaceTypeOfAddress_Region();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryModel)))
            {
                switch (property)
                {
                    case "Images": return GetInterfaceTypeOfCountry_Images();
                    case "Languages": return GetInterfaceTypeOfCountry_Languages();
                    case "Currencies": return GetInterfaceTypeOfCountry_Currencies();
                    case "Code": return GetInterfaceTypeOfCountry_Code();
                    case "ISO3166Alpha2": return GetInterfaceTypeOfCountry_ISO3166Alpha2();
                    case "ISO3166Alpha3": return GetInterfaceTypeOfCountry_ISO3166Alpha3();
                    case "ISO3166Numeric": return GetInterfaceTypeOfCountry_ISO3166Numeric();
                    case "PhoneRegEx": return GetInterfaceTypeOfCountry_PhoneRegEx();
                    case "PhonePrefix": return GetInterfaceTypeOfCountry_PhonePrefix();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCountryCurrency_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfCountryCurrency_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCountryCurrency_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCountryImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfCountryImage_TypeID();
                    case "Type": return GetInterfaceTypeOfCountryImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfCountryImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfCountryImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfCountryImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfCountryImage_Copyright();
                    case "Location": return GetInterfaceTypeOfCountryImage_Location();
                    case "Latitude": return GetInterfaceTypeOfCountryImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfCountryImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfCountryImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfCountryImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfCountryImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfCountryImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfCountryImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfCountryImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfCountryImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfCountryImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfCountryImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfCountryImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfCountryImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfCountryImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfCountryImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCountryImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCountryLanguage_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfCountryLanguage_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCountryLanguage_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalAddressValidationModel)))
            {
                switch (property)
                {
                    case "AddressHash": return GetInterfaceTypeOfHistoricalAddressValidation_AddressHash();
                    case "OnDate": return GetInterfaceTypeOfHistoricalAddressValidation_OnDate();
                    case "IsValid": return GetInterfaceTypeOfHistoricalAddressValidation_IsValid();
                    case "Provider": return GetInterfaceTypeOfHistoricalAddressValidation_Provider();
                    case "SerializedRequest": return GetInterfaceTypeOfHistoricalAddressValidation_SerializedRequest();
                    case "SerializedResponse": return GetInterfaceTypeOfHistoricalAddressValidation_SerializedResponse();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPhonePrefixLookupModel)))
            {
                switch (property)
                {
                    case "Prefix": return GetInterfaceTypeOfPhonePrefixLookup_Prefix();
                    case "TimeZone": return GetInterfaceTypeOfPhonePrefixLookup_TimeZone();
                    case "CityName": return GetInterfaceTypeOfPhonePrefixLookup_CityName();
                    case "CountryID": return GetInterfaceTypeOfPhonePrefixLookup_CountryID();
                    case "Country": return GetInterfaceTypeOfPhonePrefixLookup_Country();
                    case "RegionID": return GetInterfaceTypeOfPhonePrefixLookup_RegionID();
                    case "Region": return GetInterfaceTypeOfPhonePrefixLookup_Region();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionModel)))
            {
                switch (property)
                {
                    case "Images": return GetInterfaceTypeOfRegion_Images();
                    case "Languages": return GetInterfaceTypeOfRegion_Languages();
                    case "Currencies": return GetInterfaceTypeOfRegion_Currencies();
                    case "Code": return GetInterfaceTypeOfRegion_Code();
                    case "Taxes": return GetInterfaceTypeOfRegion_Taxes();
                    case "CountryID": return GetInterfaceTypeOfRegion_CountryID();
                    case "Country": return GetInterfaceTypeOfRegion_Country();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfRegionCurrency_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfRegionCurrency_SlaveID();
                    case "Slave": return GetInterfaceTypeOfRegionCurrency_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfRegionImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfRegionImage_TypeID();
                    case "Type": return GetInterfaceTypeOfRegionImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfRegionImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfRegionImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfRegionImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfRegionImage_Copyright();
                    case "Location": return GetInterfaceTypeOfRegionImage_Location();
                    case "Latitude": return GetInterfaceTypeOfRegionImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfRegionImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfRegionImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfRegionImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfRegionImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfRegionImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfRegionImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfRegionImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfRegionImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfRegionImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfRegionImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfRegionImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfRegionImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfRegionImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfRegionImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfRegionImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfRegionLanguage_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfRegionLanguage_SlaveID();
                    case "Slave": return GetInterfaceTypeOfRegionLanguage_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IZipCodeModel)))
            {
                switch (property)
                {
                    case "ZipCodeValue": return GetInterfaceTypeOfZipCode_ZipCodeValue();
                    case "ZipType": return GetInterfaceTypeOfZipCode_ZipType();
                    case "CityName": return GetInterfaceTypeOfZipCode_CityName();
                    case "CityType": return GetInterfaceTypeOfZipCode_CityType();
                    case "CountyName": return GetInterfaceTypeOfZipCode_CountyName();
                    case "CountyFIPS": return GetInterfaceTypeOfZipCode_CountyFIPS();
                    case "StateName": return GetInterfaceTypeOfZipCode_StateName();
                    case "StateAbbreviation": return GetInterfaceTypeOfZipCode_StateAbbreviation();
                    case "StateFIPS": return GetInterfaceTypeOfZipCode_StateFIPS();
                    case "MSACode": return GetInterfaceTypeOfZipCode_MSACode();
                    case "AreaCode": return GetInterfaceTypeOfZipCode_AreaCode();
                    case "TimeZone": return GetInterfaceTypeOfZipCode_TimeZone();
                    case "UTC": return GetInterfaceTypeOfZipCode_UTC();
                    case "DST": return GetInterfaceTypeOfZipCode_DST();
                    case "Latitude": return GetInterfaceTypeOfZipCode_Latitude();
                    case "Longitude": return GetInterfaceTypeOfZipCode_Longitude();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Globalization
            if (type.GetInterfaces().Any(x => x == typeof(ILanguageModel)))
            {
                switch (property)
                {
                    case "Images": return GetInterfaceTypeOfLanguage_Images();
                    case "Locale": return GetInterfaceTypeOfLanguage_Locale();
                    case "UnicodeName": return GetInterfaceTypeOfLanguage_UnicodeName();
                    case "ISO639_1_2002": return GetInterfaceTypeOfLanguage_ISO639_1_2002();
                    case "ISO639_2_1998": return GetInterfaceTypeOfLanguage_ISO639_2_1998();
                    case "ISO639_3_2007": return GetInterfaceTypeOfLanguage_ISO639_3_2007();
                    case "ISO639_5_2008": return GetInterfaceTypeOfLanguage_ISO639_5_2008();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ILanguageImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfLanguageImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfLanguageImage_TypeID();
                    case "Type": return GetInterfaceTypeOfLanguageImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfLanguageImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfLanguageImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfLanguageImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfLanguageImage_Copyright();
                    case "Location": return GetInterfaceTypeOfLanguageImage_Location();
                    case "Latitude": return GetInterfaceTypeOfLanguageImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfLanguageImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfLanguageImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfLanguageImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfLanguageImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfLanguageImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfLanguageImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfLanguageImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfLanguageImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfLanguageImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfLanguageImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfLanguageImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfLanguageImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfLanguageImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfLanguageImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfLanguageImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUiKeyModel)))
            {
                switch (property)
                {
                    case "Type": return GetInterfaceTypeOfUiKey_Type();
                    case "UiTranslations": return GetInterfaceTypeOfUiKey_UiTranslations();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUiTranslationModel)))
            {
                switch (property)
                {
                    case "Locale": return GetInterfaceTypeOfUiTranslation_Locale();
                    case "Value": return GetInterfaceTypeOfUiTranslation_Value();
                    case "UiKeyID": return GetInterfaceTypeOfUiTranslation_UiKeyID();
                    case "UiKey": return GetInterfaceTypeOfUiTranslation_UiKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Groups
            if (type.GetInterfaces().Any(x => x == typeof(IGroupModel)))
            {
                switch (property)
                {
                    case "ParentID": return GetInterfaceTypeOfGroup_ParentID();
                    case "Parent": return GetInterfaceTypeOfGroup_Parent();
                    case "Children": return GetInterfaceTypeOfGroup_Children();
                    case "Users": return GetInterfaceTypeOfGroup_Users();
                    case "TypeID": return GetInterfaceTypeOfGroup_TypeID();
                    case "Type": return GetInterfaceTypeOfGroup_Type();
                    case "StatusID": return GetInterfaceTypeOfGroup_StatusID();
                    case "Status": return GetInterfaceTypeOfGroup_Status();
                    case "GroupOwnerID": return GetInterfaceTypeOfGroup_GroupOwnerID();
                    case "GroupOwner": return GetInterfaceTypeOfGroup_GroupOwner();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfGroupStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfGroupType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGroupUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfGroupUser_MasterID();
                    case "Master": return GetInterfaceTypeOfGroupUser_Master();
                    case "SlaveID": return GetInterfaceTypeOfGroupUser_SlaveID();
                    case "Slave": return GetInterfaceTypeOfGroupUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Hangfire
            if (type.GetInterfaces().Any(x => x == typeof(IScheduledJobConfigurationModel)))
            {
                switch (property)
                {
                    case "NotificationTemplateID": return GetInterfaceTypeOfScheduledJobConfiguration_NotificationTemplateID();
                    case "NotificationTemplate": return GetInterfaceTypeOfScheduledJobConfiguration_NotificationTemplate();
                    case "ScheduledJobConfigurationSettings": return GetInterfaceTypeOfScheduledJobConfiguration_ScheduledJobConfigurationSettings();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IScheduledJobConfigurationSettingModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfScheduledJobConfigurationSetting_MasterID();
                    case "Master": return GetInterfaceTypeOfScheduledJobConfigurationSetting_Master();
                    case "SlaveID": return GetInterfaceTypeOfScheduledJobConfigurationSetting_SlaveID();
                    case "Slave": return GetInterfaceTypeOfScheduledJobConfigurationSetting_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Inventory
            if (type.GetInterfaces().Any(x => x == typeof(IInventoryLocationModel)))
            {
                switch (property)
                {
                    case "ContactID": return GetInterfaceTypeOfInventoryLocation_ContactID();
                    case "Contact": return GetInterfaceTypeOfInventoryLocation_Contact();
                    case "Brands": return GetInterfaceTypeOfInventoryLocation_Brands();
                    case "Stores": return GetInterfaceTypeOfInventoryLocation_Stores();
                    case "Sections": return GetInterfaceTypeOfInventoryLocation_Sections();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IInventoryLocationSectionModel)))
            {
                switch (property)
                {
                    case "InventoryLocationID": return GetInterfaceTypeOfInventoryLocationSection_InventoryLocationID();
                    case "InventoryLocation": return GetInterfaceTypeOfInventoryLocationSection_InventoryLocation();
                    case "ProductInventoryLocationSections": return GetInterfaceTypeOfInventoryLocationSection_ProductInventoryLocationSections();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Invoicing
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetInterfaceTypeOfSalesInvoice_DueDate();
                    case "SubtotalItems": return GetInterfaceTypeOfSalesInvoice_SubtotalItems();
                    case "SubtotalShipping": return GetInterfaceTypeOfSalesInvoice_SubtotalShipping();
                    case "SubtotalTaxes": return GetInterfaceTypeOfSalesInvoice_SubtotalTaxes();
                    case "SubtotalFees": return GetInterfaceTypeOfSalesInvoice_SubtotalFees();
                    case "SubtotalHandling": return GetInterfaceTypeOfSalesInvoice_SubtotalHandling();
                    case "SubtotalDiscounts": return GetInterfaceTypeOfSalesInvoice_SubtotalDiscounts();
                    case "Total": return GetInterfaceTypeOfSalesInvoice_Total();
                    case "ShippingSameAsBilling": return GetInterfaceTypeOfSalesInvoice_ShippingSameAsBilling();
                    case "BillingContactID": return GetInterfaceTypeOfSalesInvoice_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfSalesInvoice_BillingContact();
                    case "ShippingContactID": return GetInterfaceTypeOfSalesInvoice_ShippingContactID();
                    case "ShippingContact": return GetInterfaceTypeOfSalesInvoice_ShippingContact();
                    case "StatusID": return GetInterfaceTypeOfSalesInvoice_StatusID();
                    case "Status": return GetInterfaceTypeOfSalesInvoice_Status();
                    case "StateID": return GetInterfaceTypeOfSalesInvoice_StateID();
                    case "State": return GetInterfaceTypeOfSalesInvoice_State();
                    case "TypeID": return GetInterfaceTypeOfSalesInvoice_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesInvoice_Type();
                    case "UserID": return GetInterfaceTypeOfSalesInvoice_UserID();
                    case "User": return GetInterfaceTypeOfSalesInvoice_User();
                    case "AccountID": return GetInterfaceTypeOfSalesInvoice_AccountID();
                    case "Account": return GetInterfaceTypeOfSalesInvoice_Account();
                    case "SalesItems": return GetInterfaceTypeOfSalesInvoice_SalesItems();
                    case "Discounts": return GetInterfaceTypeOfSalesInvoice_Discounts();
                    case "StoredFiles": return GetInterfaceTypeOfSalesInvoice_StoredFiles();
                    case "Contacts": return GetInterfaceTypeOfSalesInvoice_Contacts();
                    case "RateQuotes": return GetInterfaceTypeOfSalesInvoice_RateQuotes();
                    case "Notes": return GetInterfaceTypeOfSalesInvoice_Notes();
                    case "StoreID": return GetInterfaceTypeOfSalesInvoice_StoreID();
                    case "Store": return GetInterfaceTypeOfSalesInvoice_Store();
                    case "BrandID": return GetInterfaceTypeOfSalesInvoice_BrandID();
                    case "Brand": return GetInterfaceTypeOfSalesInvoice_Brand();
                    case "BalanceDue": return GetInterfaceTypeOfSalesInvoice_BalanceDue();
                    case "SalesGroupID": return GetInterfaceTypeOfSalesInvoice_SalesGroupID();
                    case "SalesGroup": return GetInterfaceTypeOfSalesInvoice_SalesGroup();
                    case "AssociatedSalesOrders": return GetInterfaceTypeOfSalesInvoice_AssociatedSalesOrders();
                    case "SalesInvoicePayments": return GetInterfaceTypeOfSalesInvoice_SalesInvoicePayments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesInvoiceContact_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesInvoiceContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesInvoiceContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesInvoiceContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesInvoiceFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSalesInvoiceFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesInvoiceFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfSalesInvoiceFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetInterfaceTypeOfSalesInvoiceItem_Sku();
                    case "UnitOfMeasure": return GetInterfaceTypeOfSalesInvoiceItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetInterfaceTypeOfSalesInvoiceItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetInterfaceTypeOfSalesInvoiceItem_Quantity();
                    case "QuantityBackOrdered": return GetInterfaceTypeOfSalesInvoiceItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetInterfaceTypeOfSalesInvoiceItem_QuantityPreSold();
                    case "TotalQuantity": return GetInterfaceTypeOfSalesInvoiceItem_TotalQuantity();
                    case "UnitCorePrice": return GetInterfaceTypeOfSalesInvoiceItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetInterfaceTypeOfSalesInvoiceItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetInterfaceTypeOfSalesInvoiceItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetInterfaceTypeOfSalesInvoiceItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetInterfaceTypeOfSalesInvoiceItem_MasterID();
                    case "ProductID": return GetInterfaceTypeOfSalesInvoiceItem_ProductID();
                    case "UserID": return GetInterfaceTypeOfSalesInvoiceItem_UserID();
                    case "User": return GetInterfaceTypeOfSalesInvoiceItem_User();
                    case "OriginalCurrencyID": return GetInterfaceTypeOfSalesInvoiceItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetInterfaceTypeOfSalesInvoiceItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetInterfaceTypeOfSalesInvoiceItem_SellingCurrencyID();
                    case "SellingCurrency": return GetInterfaceTypeOfSalesInvoiceItem_SellingCurrency();
                    case "Discounts": return GetInterfaceTypeOfSalesInvoiceItem_Discounts();
                    case "Targets": return GetInterfaceTypeOfSalesInvoiceItem_Targets();
                    case "Notes": return GetInterfaceTypeOfSalesInvoiceItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetInterfaceTypeOfSalesInvoiceItemTarget_Quantity();
                    case "NothingToShip": return GetInterfaceTypeOfSalesInvoiceItemTarget_NothingToShip();
                    case "MasterID": return GetInterfaceTypeOfSalesInvoiceItemTarget_MasterID();
                    case "TypeID": return GetInterfaceTypeOfSalesInvoiceItemTarget_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesInvoiceItemTarget_Type();
                    case "DestinationContactID": return GetInterfaceTypeOfSalesInvoiceItemTarget_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfSalesInvoiceItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetInterfaceTypeOfSalesInvoiceItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetInterfaceTypeOfSalesInvoiceItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetInterfaceTypeOfSalesInvoiceItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetInterfaceTypeOfSalesInvoiceItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetInterfaceTypeOfSalesInvoiceItemTarget_BrandProductID();
                    case "BrandProduct": return GetInterfaceTypeOfSalesInvoiceItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetInterfaceTypeOfSalesInvoiceItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetInterfaceTypeOfSalesInvoiceItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetInterfaceTypeOfSalesInvoiceItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetInterfaceTypeOfSalesInvoiceItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesInvoiceState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesInvoiceStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesInvoiceType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderSalesInvoiceModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesOrderSalesInvoice_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesOrderSalesInvoice_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesOrderSalesInvoice_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesOrderSalesInvoice_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Manufacturers
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfManufacturer_TypeID();
                    case "Type": return GetInterfaceTypeOfManufacturer_Type();
                    case "ContactID": return GetInterfaceTypeOfManufacturer_ContactID();
                    case "Contact": return GetInterfaceTypeOfManufacturer_Contact();
                    case "Notes": return GetInterfaceTypeOfManufacturer_Notes();
                    case "Images": return GetInterfaceTypeOfManufacturer_Images();
                    case "MinimumOrderDollarAmountWarningMessage": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmount": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountOverrideFee": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetInterfaceTypeOfManufacturer_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetInterfaceTypeOfManufacturer_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetInterfaceTypeOfManufacturer_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Products": return GetInterfaceTypeOfManufacturer_Products();
                    case "Vendors": return GetInterfaceTypeOfManufacturer_Vendors();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfManufacturerImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfManufacturerImage_TypeID();
                    case "Type": return GetInterfaceTypeOfManufacturerImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfManufacturerImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfManufacturerImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfManufacturerImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfManufacturerImage_Copyright();
                    case "Location": return GetInterfaceTypeOfManufacturerImage_Location();
                    case "Latitude": return GetInterfaceTypeOfManufacturerImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfManufacturerImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfManufacturerImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfManufacturerImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfManufacturerImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfManufacturerImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfManufacturerImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfManufacturerImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfManufacturerImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfManufacturerImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfManufacturerImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfManufacturerImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfManufacturerImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfManufacturerImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfManufacturerImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfManufacturerImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfManufacturerProduct_MasterID();
                    case "Master": return GetInterfaceTypeOfManufacturerProduct_Master();
                    case "SlaveID": return GetInterfaceTypeOfManufacturerProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfManufacturerProduct_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfManufacturerType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Media
            if (type.GetInterfaces().Any(x => x == typeof(IStoredFileModel)))
            {
                switch (property)
                {
                    case "SeoTitle": return GetInterfaceTypeOfStoredFile_SeoTitle();
                    case "Author": return GetInterfaceTypeOfStoredFile_Author();
                    case "Copyright": return GetInterfaceTypeOfStoredFile_Copyright();
                    case "FileFormat": return GetInterfaceTypeOfStoredFile_FileFormat();
                    case "FileName": return GetInterfaceTypeOfStoredFile_FileName();
                    case "IsStoredInDB": return GetInterfaceTypeOfStoredFile_IsStoredInDB();
                    case "Bytes": return GetInterfaceTypeOfStoredFile_Bytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Messaging
            if (type.GetInterfaces().Any(x => x == typeof(IConversationModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfConversation_StoreID();
                    case "Store": return GetInterfaceTypeOfConversation_Store();
                    case "BrandID": return GetInterfaceTypeOfConversation_BrandID();
                    case "Brand": return GetInterfaceTypeOfConversation_Brand();
                    case "Users": return GetInterfaceTypeOfConversation_Users();
                    case "HasEnded": return GetInterfaceTypeOfConversation_HasEnded();
                    case "CopyUserWhenEnded": return GetInterfaceTypeOfConversation_CopyUserWhenEnded();
                    case "Messages": return GetInterfaceTypeOfConversation_Messages();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IConversationUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfConversationUser_MasterID();
                    case "Master": return GetInterfaceTypeOfConversationUser_Master();
                    case "SlaveID": return GetInterfaceTypeOfConversationUser_SlaveID();
                    case "Slave": return GetInterfaceTypeOfConversationUser_Slave();
                    case "LastHeartbeat": return GetInterfaceTypeOfConversationUser_LastHeartbeat();
                    case "IsTyping": return GetInterfaceTypeOfConversationUser_IsTyping();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailQueueModel)))
            {
                switch (property)
                {
                    case "AddressesTo": return GetInterfaceTypeOfEmailQueue_AddressesTo();
                    case "AddressesCc": return GetInterfaceTypeOfEmailQueue_AddressesCc();
                    case "AddressesBcc": return GetInterfaceTypeOfEmailQueue_AddressesBcc();
                    case "AddressFrom": return GetInterfaceTypeOfEmailQueue_AddressFrom();
                    case "Subject": return GetInterfaceTypeOfEmailQueue_Subject();
                    case "Body": return GetInterfaceTypeOfEmailQueue_Body();
                    case "Attempts": return GetInterfaceTypeOfEmailQueue_Attempts();
                    case "IsHtml": return GetInterfaceTypeOfEmailQueue_IsHtml();
                    case "HasError": return GetInterfaceTypeOfEmailQueue_HasError();
                    case "TypeID": return GetInterfaceTypeOfEmailQueue_TypeID();
                    case "Type": return GetInterfaceTypeOfEmailQueue_Type();
                    case "StatusID": return GetInterfaceTypeOfEmailQueue_StatusID();
                    case "Status": return GetInterfaceTypeOfEmailQueue_Status();
                    case "EmailTemplateID": return GetInterfaceTypeOfEmailQueue_EmailTemplateID();
                    case "EmailTemplate": return GetInterfaceTypeOfEmailQueue_EmailTemplate();
                    case "MessageRecipientID": return GetInterfaceTypeOfEmailQueue_MessageRecipientID();
                    case "MessageRecipient": return GetInterfaceTypeOfEmailQueue_MessageRecipient();
                    case "EmailQueueAttachments": return GetInterfaceTypeOfEmailQueue_EmailQueueAttachments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailQueueAttachmentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfEmailQueueAttachment_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfEmailQueueAttachment_SlaveID();
                    case "Slave": return GetInterfaceTypeOfEmailQueueAttachment_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfEmailQueueAttachment_FileAccessTypeID();
                    case "CreatedByUserID": return GetInterfaceTypeOfEmailQueueAttachment_CreatedByUserID();
                    case "CreatedByUser": return GetInterfaceTypeOfEmailQueueAttachment_CreatedByUser();
                    case "UpdatedByUserID": return GetInterfaceTypeOfEmailQueueAttachment_UpdatedByUserID();
                    case "UpdatedByUser": return GetInterfaceTypeOfEmailQueueAttachment_UpdatedByUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfEmailStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailTemplateModel)))
            {
                switch (property)
                {
                    case "Subject": return GetInterfaceTypeOfEmailTemplate_Subject();
                    case "Body": return GetInterfaceTypeOfEmailTemplate_Body();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfEmailType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfMessage_StoreID();
                    case "Store": return GetInterfaceTypeOfMessage_Store();
                    case "BrandID": return GetInterfaceTypeOfMessage_BrandID();
                    case "Brand": return GetInterfaceTypeOfMessage_Brand();
                    case "Subject": return GetInterfaceTypeOfMessage_Subject();
                    case "Context": return GetInterfaceTypeOfMessage_Context();
                    case "Body": return GetInterfaceTypeOfMessage_Body();
                    case "IsReplyAllAllowed": return GetInterfaceTypeOfMessage_IsReplyAllAllowed();
                    case "ConversationID": return GetInterfaceTypeOfMessage_ConversationID();
                    case "Conversation": return GetInterfaceTypeOfMessage_Conversation();
                    case "SentByUserID": return GetInterfaceTypeOfMessage_SentByUserID();
                    case "SentByUser": return GetInterfaceTypeOfMessage_SentByUser();
                    case "MessageRecipients": return GetInterfaceTypeOfMessage_MessageRecipients();
                    case "MessageAttachments": return GetInterfaceTypeOfMessage_MessageAttachments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageAttachmentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfMessageAttachment_MasterID();
                    case "Master": return GetInterfaceTypeOfMessageAttachment_Master();
                    case "SlaveID": return GetInterfaceTypeOfMessageAttachment_SlaveID();
                    case "Slave": return GetInterfaceTypeOfMessageAttachment_Slave();
                    case "CreatedByUserID": return GetInterfaceTypeOfMessageAttachment_CreatedByUserID();
                    case "CreatedByUser": return GetInterfaceTypeOfMessageAttachment_CreatedByUser();
                    case "UpdatedByUserID": return GetInterfaceTypeOfMessageAttachment_UpdatedByUserID();
                    case "UpdatedByUser": return GetInterfaceTypeOfMessageAttachment_UpdatedByUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageRecipientModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfMessageRecipient_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfMessageRecipient_SlaveID();
                    case "Slave": return GetInterfaceTypeOfMessageRecipient_Slave();
                    case "IsRead": return GetInterfaceTypeOfMessageRecipient_IsRead();
                    case "ReadAt": return GetInterfaceTypeOfMessageRecipient_ReadAt();
                    case "IsArchived": return GetInterfaceTypeOfMessageRecipient_IsArchived();
                    case "ArchivedAt": return GetInterfaceTypeOfMessageRecipient_ArchivedAt();
                    case "HasSentAnEmail": return GetInterfaceTypeOfMessageRecipient_HasSentAnEmail();
                    case "EmailSentAt": return GetInterfaceTypeOfMessageRecipient_EmailSentAt();
                    case "GroupID": return GetInterfaceTypeOfMessageRecipient_GroupID();
                    case "Group": return GetInterfaceTypeOfMessageRecipient_Group();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductNotificationModel)))
            {
                switch (property)
                {
                    case "ProductID": return GetInterfaceTypeOfProductNotification_ProductID();
                    case "Product": return GetInterfaceTypeOfProductNotification_Product();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Ordering
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetInterfaceTypeOfSalesOrder_DueDate();
                    case "SubtotalItems": return GetInterfaceTypeOfSalesOrder_SubtotalItems();
                    case "SubtotalShipping": return GetInterfaceTypeOfSalesOrder_SubtotalShipping();
                    case "SubtotalTaxes": return GetInterfaceTypeOfSalesOrder_SubtotalTaxes();
                    case "SubtotalFees": return GetInterfaceTypeOfSalesOrder_SubtotalFees();
                    case "SubtotalHandling": return GetInterfaceTypeOfSalesOrder_SubtotalHandling();
                    case "SubtotalDiscounts": return GetInterfaceTypeOfSalesOrder_SubtotalDiscounts();
                    case "Total": return GetInterfaceTypeOfSalesOrder_Total();
                    case "ShippingSameAsBilling": return GetInterfaceTypeOfSalesOrder_ShippingSameAsBilling();
                    case "BillingContactID": return GetInterfaceTypeOfSalesOrder_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfSalesOrder_BillingContact();
                    case "ShippingContactID": return GetInterfaceTypeOfSalesOrder_ShippingContactID();
                    case "ShippingContact": return GetInterfaceTypeOfSalesOrder_ShippingContact();
                    case "StatusID": return GetInterfaceTypeOfSalesOrder_StatusID();
                    case "Status": return GetInterfaceTypeOfSalesOrder_Status();
                    case "StateID": return GetInterfaceTypeOfSalesOrder_StateID();
                    case "State": return GetInterfaceTypeOfSalesOrder_State();
                    case "TypeID": return GetInterfaceTypeOfSalesOrder_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesOrder_Type();
                    case "UserID": return GetInterfaceTypeOfSalesOrder_UserID();
                    case "User": return GetInterfaceTypeOfSalesOrder_User();
                    case "AccountID": return GetInterfaceTypeOfSalesOrder_AccountID();
                    case "Account": return GetInterfaceTypeOfSalesOrder_Account();
                    case "SalesItems": return GetInterfaceTypeOfSalesOrder_SalesItems();
                    case "Discounts": return GetInterfaceTypeOfSalesOrder_Discounts();
                    case "StoredFiles": return GetInterfaceTypeOfSalesOrder_StoredFiles();
                    case "Contacts": return GetInterfaceTypeOfSalesOrder_Contacts();
                    case "RateQuotes": return GetInterfaceTypeOfSalesOrder_RateQuotes();
                    case "Notes": return GetInterfaceTypeOfSalesOrder_Notes();
                    case "StoreID": return GetInterfaceTypeOfSalesOrder_StoreID();
                    case "Store": return GetInterfaceTypeOfSalesOrder_Store();
                    case "BrandID": return GetInterfaceTypeOfSalesOrder_BrandID();
                    case "Brand": return GetInterfaceTypeOfSalesOrder_Brand();
                    case "PurchaseOrderNumber": return GetInterfaceTypeOfSalesOrder_PurchaseOrderNumber();
                    case "BalanceDue": return GetInterfaceTypeOfSalesOrder_BalanceDue();
                    case "TrackingNumber": return GetInterfaceTypeOfSalesOrder_TrackingNumber();
                    case "PaymentTransactionID": return GetInterfaceTypeOfSalesOrder_PaymentTransactionID();
                    case "TaxTransactionID": return GetInterfaceTypeOfSalesOrder_TaxTransactionID();
                    case "OrderApprovedDate": return GetInterfaceTypeOfSalesOrder_OrderApprovedDate();
                    case "OrderCommitmentDate": return GetInterfaceTypeOfSalesOrder_OrderCommitmentDate();
                    case "RequiredShipDate": return GetInterfaceTypeOfSalesOrder_RequiredShipDate();
                    case "RequestedShipDate": return GetInterfaceTypeOfSalesOrder_RequestedShipDate();
                    case "ActualShipDate": return GetInterfaceTypeOfSalesOrder_ActualShipDate();
                    case "SalesGroupAsMasterID": return GetInterfaceTypeOfSalesOrder_SalesGroupAsMasterID();
                    case "SalesGroupAsSubID": return GetInterfaceTypeOfSalesOrder_SalesGroupAsSubID();
                    case "SalesOrderPayments": return GetInterfaceTypeOfSalesOrder_SalesOrderPayments();
                    case "AssociatedSalesQuotes": return GetInterfaceTypeOfSalesOrder_AssociatedSalesQuotes();
                    case "AssociatedSalesReturns": return GetInterfaceTypeOfSalesOrder_AssociatedSalesReturns();
                    case "AssociatedSalesInvoices": return GetInterfaceTypeOfSalesOrder_AssociatedSalesInvoices();
                    case "AssociatedPurchaseOrders": return GetInterfaceTypeOfSalesOrder_AssociatedPurchaseOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesOrderContact_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesOrderContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesOrderContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesOrderContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderEventModel)))
            {
                switch (property)
                {
                    case "OldStateID": return GetInterfaceTypeOfSalesOrderEvent_OldStateID();
                    case "NewStateID": return GetInterfaceTypeOfSalesOrderEvent_NewStateID();
                    case "OldStatusID": return GetInterfaceTypeOfSalesOrderEvent_OldStatusID();
                    case "NewStatusID": return GetInterfaceTypeOfSalesOrderEvent_NewStatusID();
                    case "OldTypeID": return GetInterfaceTypeOfSalesOrderEvent_OldTypeID();
                    case "NewTypeID": return GetInterfaceTypeOfSalesOrderEvent_NewTypeID();
                    case "OldBalanceDue": return GetInterfaceTypeOfSalesOrderEvent_OldBalanceDue();
                    case "NewBalanceDue": return GetInterfaceTypeOfSalesOrderEvent_NewBalanceDue();
                    case "OldHash": return GetInterfaceTypeOfSalesOrderEvent_OldHash();
                    case "NewHash": return GetInterfaceTypeOfSalesOrderEvent_NewHash();
                    case "OldRecordSerialized": return GetInterfaceTypeOfSalesOrderEvent_OldRecordSerialized();
                    case "NewRecordSerialized": return GetInterfaceTypeOfSalesOrderEvent_NewRecordSerialized();
                    case "SalesOrderID": return GetInterfaceTypeOfSalesOrderEvent_SalesOrderID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesOrderFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSalesOrderFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesOrderFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfSalesOrderFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetInterfaceTypeOfSalesOrderItem_Sku();
                    case "UnitOfMeasure": return GetInterfaceTypeOfSalesOrderItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetInterfaceTypeOfSalesOrderItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetInterfaceTypeOfSalesOrderItem_Quantity();
                    case "QuantityBackOrdered": return GetInterfaceTypeOfSalesOrderItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetInterfaceTypeOfSalesOrderItem_QuantityPreSold();
                    case "TotalQuantity": return GetInterfaceTypeOfSalesOrderItem_TotalQuantity();
                    case "UnitCorePrice": return GetInterfaceTypeOfSalesOrderItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetInterfaceTypeOfSalesOrderItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetInterfaceTypeOfSalesOrderItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetInterfaceTypeOfSalesOrderItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetInterfaceTypeOfSalesOrderItem_MasterID();
                    case "ProductID": return GetInterfaceTypeOfSalesOrderItem_ProductID();
                    case "UserID": return GetInterfaceTypeOfSalesOrderItem_UserID();
                    case "User": return GetInterfaceTypeOfSalesOrderItem_User();
                    case "OriginalCurrencyID": return GetInterfaceTypeOfSalesOrderItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetInterfaceTypeOfSalesOrderItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetInterfaceTypeOfSalesOrderItem_SellingCurrencyID();
                    case "SellingCurrency": return GetInterfaceTypeOfSalesOrderItem_SellingCurrency();
                    case "Discounts": return GetInterfaceTypeOfSalesOrderItem_Discounts();
                    case "Targets": return GetInterfaceTypeOfSalesOrderItem_Targets();
                    case "Notes": return GetInterfaceTypeOfSalesOrderItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetInterfaceTypeOfSalesOrderItemTarget_Quantity();
                    case "NothingToShip": return GetInterfaceTypeOfSalesOrderItemTarget_NothingToShip();
                    case "MasterID": return GetInterfaceTypeOfSalesOrderItemTarget_MasterID();
                    case "TypeID": return GetInterfaceTypeOfSalesOrderItemTarget_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesOrderItemTarget_Type();
                    case "DestinationContactID": return GetInterfaceTypeOfSalesOrderItemTarget_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfSalesOrderItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetInterfaceTypeOfSalesOrderItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetInterfaceTypeOfSalesOrderItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetInterfaceTypeOfSalesOrderItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetInterfaceTypeOfSalesOrderItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetInterfaceTypeOfSalesOrderItemTarget_BrandProductID();
                    case "BrandProduct": return GetInterfaceTypeOfSalesOrderItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetInterfaceTypeOfSalesOrderItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetInterfaceTypeOfSalesOrderItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetInterfaceTypeOfSalesOrderItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetInterfaceTypeOfSalesOrderItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesOrderState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesOrderStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesOrderType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Payments
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipModel)))
            {
                switch (property)
                {
                    case "IsContractual": return GetInterfaceTypeOfMembership_IsContractual();
                    case "MembershipLevels": return GetInterfaceTypeOfMembership_MembershipLevels();
                    case "MembershipRepeatTypes": return GetInterfaceTypeOfMembership_MembershipRepeatTypes();
                    case "TranslationKey": return GetInterfaceTypeOfMembership_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipAdZoneAccessModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfMembershipAdZoneAccess_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfMembershipAdZoneAccess_SlaveID();
                    case "Slave": return GetInterfaceTypeOfMembershipAdZoneAccess_Slave();
                    case "MembershipAdZoneAccessByLevels": return GetInterfaceTypeOfMembershipAdZoneAccess_MembershipAdZoneAccessByLevels();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipAdZoneAccessByLevelModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfMembershipAdZoneAccessByLevel_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfMembershipAdZoneAccessByLevel_SlaveID();
                    case "Slave": return GetInterfaceTypeOfMembershipAdZoneAccessByLevel_Slave();
                    case "SubscriberCountThreshold": return GetInterfaceTypeOfMembershipAdZoneAccessByLevel_SubscriberCountThreshold();
                    case "UniqueAdLimit": return GetInterfaceTypeOfMembershipAdZoneAccessByLevel_UniqueAdLimit();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipLevelModel)))
            {
                switch (property)
                {
                    case "RolesApplied": return GetInterfaceTypeOfMembershipLevel_RolesApplied();
                    case "MembershipID": return GetInterfaceTypeOfMembershipLevel_MembershipID();
                    case "Membership": return GetInterfaceTypeOfMembershipLevel_Membership();
                    case "MembershipAdZoneAccessByLevels": return GetInterfaceTypeOfMembershipLevel_MembershipAdZoneAccessByLevels();
                    case "TranslationKey": return GetInterfaceTypeOfMembershipLevel_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipRepeatTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfMembershipRepeatType_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfMembershipRepeatType_SlaveID();
                    case "Slave": return GetInterfaceTypeOfMembershipRepeatType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPaymentModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfPayment_StoreID();
                    case "Store": return GetInterfaceTypeOfPayment_Store();
                    case "BrandID": return GetInterfaceTypeOfPayment_BrandID();
                    case "Brand": return GetInterfaceTypeOfPayment_Brand();
                    case "Amount": return GetInterfaceTypeOfPayment_Amount();
                    case "AuthCode": return GetInterfaceTypeOfPayment_AuthCode();
                    case "ReferenceNo": return GetInterfaceTypeOfPayment_ReferenceNo();
                    case "TransactionNumber": return GetInterfaceTypeOfPayment_TransactionNumber();
                    case "StatusDate": return GetInterfaceTypeOfPayment_StatusDate();
                    case "Authorized": return GetInterfaceTypeOfPayment_Authorized();
                    case "AuthDate": return GetInterfaceTypeOfPayment_AuthDate();
                    case "Received": return GetInterfaceTypeOfPayment_Received();
                    case "ReceivedDate": return GetInterfaceTypeOfPayment_ReceivedDate();
                    case "Response": return GetInterfaceTypeOfPayment_Response();
                    case "ExternalCustomerID": return GetInterfaceTypeOfPayment_ExternalCustomerID();
                    case "ExternalPaymentID": return GetInterfaceTypeOfPayment_ExternalPaymentID();
                    case "PaymentData": return GetInterfaceTypeOfPayment_PaymentData();
                    case "CardTypeID": return GetInterfaceTypeOfPayment_CardTypeID();
                    case "CardMask": return GetInterfaceTypeOfPayment_CardMask();
                    case "CVV": return GetInterfaceTypeOfPayment_CVV();
                    case "Last4CardDigits": return GetInterfaceTypeOfPayment_Last4CardDigits();
                    case "ExpirationMonth": return GetInterfaceTypeOfPayment_ExpirationMonth();
                    case "ExpirationYear": return GetInterfaceTypeOfPayment_ExpirationYear();
                    case "CheckNumber": return GetInterfaceTypeOfPayment_CheckNumber();
                    case "RoutingNumberLast4": return GetInterfaceTypeOfPayment_RoutingNumberLast4();
                    case "AccountNumberLast4": return GetInterfaceTypeOfPayment_AccountNumberLast4();
                    case "BankName": return GetInterfaceTypeOfPayment_BankName();
                    case "TypeID": return GetInterfaceTypeOfPayment_TypeID();
                    case "Type": return GetInterfaceTypeOfPayment_Type();
                    case "StatusID": return GetInterfaceTypeOfPayment_StatusID();
                    case "Status": return GetInterfaceTypeOfPayment_Status();
                    case "BillingContactID": return GetInterfaceTypeOfPayment_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfPayment_BillingContact();
                    case "PaymentMethodID": return GetInterfaceTypeOfPayment_PaymentMethodID();
                    case "PaymentMethod": return GetInterfaceTypeOfPayment_PaymentMethod();
                    case "CurrencyID": return GetInterfaceTypeOfPayment_CurrencyID();
                    case "Currency": return GetInterfaceTypeOfPayment_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPaymentMethodModel)))
            {
                switch (property)
                {
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPaymentStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPaymentType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRepeatTypeModel)))
            {
                switch (property)
                {
                    case "RepeatableBillingPeriods": return GetInterfaceTypeOfRepeatType_RepeatableBillingPeriods();
                    case "InitialBonusBillingPeriods": return GetInterfaceTypeOfRepeatType_InitialBonusBillingPeriods();
                    case "TranslationKey": return GetInterfaceTypeOfRepeatType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoicePaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesInvoicePayment_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSalesInvoicePayment_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesInvoicePayment_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderPaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesOrderPayment_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSalesOrderPayment_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesOrderPayment_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnPaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesReturnPayment_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSalesReturnPayment_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesReturnPayment_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfSubscription_TypeID();
                    case "Type": return GetInterfaceTypeOfSubscription_Type();
                    case "StatusID": return GetInterfaceTypeOfSubscription_StatusID();
                    case "Status": return GetInterfaceTypeOfSubscription_Status();
                    case "MemberSince": return GetInterfaceTypeOfSubscription_MemberSince();
                    case "StartsOn": return GetInterfaceTypeOfSubscription_StartsOn();
                    case "EndsOn": return GetInterfaceTypeOfSubscription_EndsOn();
                    case "LastPaidDate": return GetInterfaceTypeOfSubscription_LastPaidDate();
                    case "BillingPeriodsTotal": return GetInterfaceTypeOfSubscription_BillingPeriodsTotal();
                    case "BillingPeriodsPaid": return GetInterfaceTypeOfSubscription_BillingPeriodsPaid();
                    case "Fee": return GetInterfaceTypeOfSubscription_Fee();
                    case "CreditUponUpgrade": return GetInterfaceTypeOfSubscription_CreditUponUpgrade();
                    case "AutoRenew": return GetInterfaceTypeOfSubscription_AutoRenew();
                    case "CanUpgrade": return GetInterfaceTypeOfSubscription_CanUpgrade();
                    case "Memo": return GetInterfaceTypeOfSubscription_Memo();
                    case "ProductMembershipLevelID": return GetInterfaceTypeOfSubscription_ProductMembershipLevelID();
                    case "ProductMembershipLevel": return GetInterfaceTypeOfSubscription_ProductMembershipLevel();
                    case "RepeatTypeID": return GetInterfaceTypeOfSubscription_RepeatTypeID();
                    case "RepeatType": return GetInterfaceTypeOfSubscription_RepeatType();
                    case "SalesInvoiceID": return GetInterfaceTypeOfSubscription_SalesInvoiceID();
                    case "SalesInvoice": return GetInterfaceTypeOfSubscription_SalesInvoice();
                    case "UserID": return GetInterfaceTypeOfSubscription_UserID();
                    case "User": return GetInterfaceTypeOfSubscription_User();
                    case "AccountID": return GetInterfaceTypeOfSubscription_AccountID();
                    case "Account": return GetInterfaceTypeOfSubscription_Account();
                    case "SubscriptionHistories": return GetInterfaceTypeOfSubscription_SubscriptionHistories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionHistoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSubscriptionHistory_MasterID();
                    case "Master": return GetInterfaceTypeOfSubscriptionHistory_Master();
                    case "SlaveID": return GetInterfaceTypeOfSubscriptionHistory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSubscriptionHistory_Slave();
                    case "PaymentDate": return GetInterfaceTypeOfSubscriptionHistory_PaymentDate();
                    case "PaymentSuccess": return GetInterfaceTypeOfSubscriptionHistory_PaymentSuccess();
                    case "Memo": return GetInterfaceTypeOfSubscriptionHistory_Memo();
                    case "BillingPeriodsPaid": return GetInterfaceTypeOfSubscriptionHistory_BillingPeriodsPaid();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSubscriptionStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionTypeModel)))
            {
                switch (property)
                {
                    case "ProductSubscriptionTypes": return GetInterfaceTypeOfSubscriptionType_ProductSubscriptionTypes();
                    case "TranslationKey": return GetInterfaceTypeOfSubscriptionType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IWalletModel)))
            {
                switch (property)
                {
                    case "CreditCardNumber": return GetInterfaceTypeOfWallet_CreditCardNumber();
                    case "AccountNumber": return GetInterfaceTypeOfWallet_AccountNumber();
                    case "RoutingNumber": return GetInterfaceTypeOfWallet_RoutingNumber();
                    case "BankName": return GetInterfaceTypeOfWallet_BankName();
                    case "ExpirationMonth": return GetInterfaceTypeOfWallet_ExpirationMonth();
                    case "ExpirationYear": return GetInterfaceTypeOfWallet_ExpirationYear();
                    case "Token": return GetInterfaceTypeOfWallet_Token();
                    case "CardType": return GetInterfaceTypeOfWallet_CardType();
                    case "CardHolderName": return GetInterfaceTypeOfWallet_CardHolderName();
                    case "UserID": return GetInterfaceTypeOfWallet_UserID();
                    case "User": return GetInterfaceTypeOfWallet_User();
                    case "CurrencyID": return GetInterfaceTypeOfWallet_CurrencyID();
                    case "Currency": return GetInterfaceTypeOfWallet_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Pricing
            if (type.GetInterfaces().Any(x => x == typeof(IPricePointModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPricePoint_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRoundingModel)))
            {
                switch (property)
                {
                    case "PricePointKey": return GetInterfaceTypeOfPriceRounding_PricePointKey();
                    case "ProductKey": return GetInterfaceTypeOfPriceRounding_ProductKey();
                    case "CurrencyKey": return GetInterfaceTypeOfPriceRounding_CurrencyKey();
                    case "UnitOfMeasure": return GetInterfaceTypeOfPriceRounding_UnitOfMeasure();
                    case "RoundHow": return GetInterfaceTypeOfPriceRounding_RoundHow();
                    case "RoundTo": return GetInterfaceTypeOfPriceRounding_RoundTo();
                    case "RoundingAmount": return GetInterfaceTypeOfPriceRounding_RoundingAmount();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleModel)))
            {
                switch (property)
                {
                    case "StartDate": return GetInterfaceTypeOfPriceRule_StartDate();
                    case "EndDate": return GetInterfaceTypeOfPriceRule_EndDate();
                    case "UnitOfMeasure": return GetInterfaceTypeOfPriceRule_UnitOfMeasure();
                    case "PriceAdjustment": return GetInterfaceTypeOfPriceRule_PriceAdjustment();
                    case "MinQuantity": return GetInterfaceTypeOfPriceRule_MinQuantity();
                    case "MaxQuantity": return GetInterfaceTypeOfPriceRule_MaxQuantity();
                    case "IsPercentage": return GetInterfaceTypeOfPriceRule_IsPercentage();
                    case "IsMarkup": return GetInterfaceTypeOfPriceRule_IsMarkup();
                    case "UsePriceBase": return GetInterfaceTypeOfPriceRule_UsePriceBase();
                    case "IsExclusive": return GetInterfaceTypeOfPriceRule_IsExclusive();
                    case "IsOnlyForAnonymousUsers": return GetInterfaceTypeOfPriceRule_IsOnlyForAnonymousUsers();
                    case "Priority": return GetInterfaceTypeOfPriceRule_Priority();
                    case "CurrencyID": return GetInterfaceTypeOfPriceRule_CurrencyID();
                    case "Currency": return GetInterfaceTypeOfPriceRule_Currency();
                    case "Products": return GetInterfaceTypeOfPriceRule_Products();
                    case "Brands": return GetInterfaceTypeOfPriceRule_Brands();
                    case "Stores": return GetInterfaceTypeOfPriceRule_Stores();
                    case "Accounts": return GetInterfaceTypeOfPriceRule_Accounts();
                    case "Vendors": return GetInterfaceTypeOfPriceRule_Vendors();
                    case "Manufacturers": return GetInterfaceTypeOfPriceRule_Manufacturers();
                    case "PriceRuleCountries": return GetInterfaceTypeOfPriceRule_PriceRuleCountries();
                    case "PriceRuleUserRoles": return GetInterfaceTypeOfPriceRule_PriceRuleUserRoles();
                    case "PriceRuleCategories": return GetInterfaceTypeOfPriceRule_PriceRuleCategories();
                    case "PriceRuleAccountTypes": return GetInterfaceTypeOfPriceRule_PriceRuleAccountTypes();
                    case "PriceRuleProductTypes": return GetInterfaceTypeOfPriceRule_PriceRuleProductTypes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleAccount_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleAccount_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleAccount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleAccountTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleAccountType_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleAccountType_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleAccountType_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleAccountType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleBrand_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleBrand_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleBrand_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleBrand_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleCategory_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleCategory_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleCategory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleCountryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleCountry_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleCountry_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleCountry_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleCountry_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleManufacturer_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleManufacturer_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleManufacturer_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleProduct_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleProduct_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleProduct_Slave();
                    case "OverridePrice": return GetInterfaceTypeOfPriceRuleProduct_OverridePrice();
                    case "OverrideBasePrice": return GetInterfaceTypeOfPriceRuleProduct_OverrideBasePrice();
                    case "OverrideSalePrice": return GetInterfaceTypeOfPriceRuleProduct_OverrideSalePrice();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleProductType_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleProductType_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleProductType_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleProductType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleStore_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleStore_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleStore_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleStore_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleUserRoleModel)))
            {
                switch (property)
                {
                    case "RoleName": return GetInterfaceTypeOfPriceRuleUserRole_RoleName();
                    case "PriceRuleID": return GetInterfaceTypeOfPriceRuleUserRole_PriceRuleID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPriceRuleVendor_MasterID();
                    case "Master": return GetInterfaceTypeOfPriceRuleVendor_Master();
                    case "SlaveID": return GetInterfaceTypeOfPriceRuleVendor_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPriceRuleVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Products
            if (type.GetInterfaces().Any(x => x == typeof(IFutureImportModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetInterfaceTypeOfFutureImport_StatusID();
                    case "Status": return GetInterfaceTypeOfFutureImport_Status();
                    case "StoreID": return GetInterfaceTypeOfFutureImport_StoreID();
                    case "Store": return GetInterfaceTypeOfFutureImport_Store();
                    case "FileName": return GetInterfaceTypeOfFutureImport_FileName();
                    case "RunImportAt": return GetInterfaceTypeOfFutureImport_RunImportAt();
                    case "Attempts": return GetInterfaceTypeOfFutureImport_Attempts();
                    case "HasError": return GetInterfaceTypeOfFutureImport_HasError();
                    case "VendorID": return GetInterfaceTypeOfFutureImport_VendorID();
                    case "Vendor": return GetInterfaceTypeOfFutureImport_Vendor();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfFutureImportStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetInterfaceTypeOfProduct_StatusID();
                    case "Status": return GetInterfaceTypeOfProduct_Status();
                    case "TypeID": return GetInterfaceTypeOfProduct_TypeID();
                    case "Type": return GetInterfaceTypeOfProduct_Type();
                    case "RequiresRoles": return GetInterfaceTypeOfProduct_RequiresRoles();
                    case "RequiresRolesList": return GetInterfaceTypeOfProduct_RequiresRolesList();
                    case "RequiresRolesAlt": return GetInterfaceTypeOfProduct_RequiresRolesAlt();
                    case "RequiresRolesListAlt": return GetInterfaceTypeOfProduct_RequiresRolesListAlt();
                    case "Weight": return GetInterfaceTypeOfProduct_Weight();
                    case "WeightUnitOfMeasure": return GetInterfaceTypeOfProduct_WeightUnitOfMeasure();
                    case "Width": return GetInterfaceTypeOfProduct_Width();
                    case "WidthUnitOfMeasure": return GetInterfaceTypeOfProduct_WidthUnitOfMeasure();
                    case "Depth": return GetInterfaceTypeOfProduct_Depth();
                    case "DepthUnitOfMeasure": return GetInterfaceTypeOfProduct_DepthUnitOfMeasure();
                    case "Height": return GetInterfaceTypeOfProduct_Height();
                    case "HeightUnitOfMeasure": return GetInterfaceTypeOfProduct_HeightUnitOfMeasure();
                    case "Images": return GetInterfaceTypeOfProduct_Images();
                    case "StoredFiles": return GetInterfaceTypeOfProduct_StoredFiles();
                    case "Brands": return GetInterfaceTypeOfProduct_Brands();
                    case "Stores": return GetInterfaceTypeOfProduct_Stores();
                    case "Accounts": return GetInterfaceTypeOfProduct_Accounts();
                    case "Vendors": return GetInterfaceTypeOfProduct_Vendors();
                    case "Manufacturers": return GetInterfaceTypeOfProduct_Manufacturers();
                    case "IsVisible": return GetInterfaceTypeOfProduct_IsVisible();
                    case "IsDiscontinued": return GetInterfaceTypeOfProduct_IsDiscontinued();
                    case "IsEligibleForReturn": return GetInterfaceTypeOfProduct_IsEligibleForReturn();
                    case "IsTaxable": return GetInterfaceTypeOfProduct_IsTaxable();
                    case "AllowBackOrder": return GetInterfaceTypeOfProduct_AllowBackOrder();
                    case "AllowPreSale": return GetInterfaceTypeOfProduct_AllowPreSale();
                    case "IsUnlimitedStock": return GetInterfaceTypeOfProduct_IsUnlimitedStock();
                    case "IsFreeShipping": return GetInterfaceTypeOfProduct_IsFreeShipping();
                    case "NothingToShip": return GetInterfaceTypeOfProduct_NothingToShip();
                    case "DropShipOnly": return GetInterfaceTypeOfProduct_DropShipOnly();
                    case "ShippingLeadTimeIsCalendarDays": return GetInterfaceTypeOfProduct_ShippingLeadTimeIsCalendarDays();
                    case "ShortDescription": return GetInterfaceTypeOfProduct_ShortDescription();
                    case "ManufacturerPartNumber": return GetInterfaceTypeOfProduct_ManufacturerPartNumber();
                    case "BrandName": return GetInterfaceTypeOfProduct_BrandName();
                    case "TaxCode": return GetInterfaceTypeOfProduct_TaxCode();
                    case "UnitOfMeasure": return GetInterfaceTypeOfProduct_UnitOfMeasure();
                    case "IndexSynonyms": return GetInterfaceTypeOfProduct_IndexSynonyms();
                    case "HandlingCharge": return GetInterfaceTypeOfProduct_HandlingCharge();
                    case "FlatShippingCharge": return GetInterfaceTypeOfProduct_FlatShippingCharge();
                    case "RestockingFeePercent": return GetInterfaceTypeOfProduct_RestockingFeePercent();
                    case "RestockingFeeAmount": return GetInterfaceTypeOfProduct_RestockingFeeAmount();
                    case "AvailableStartDate": return GetInterfaceTypeOfProduct_AvailableStartDate();
                    case "AvailableEndDate": return GetInterfaceTypeOfProduct_AvailableEndDate();
                    case "PreSellEndDate": return GetInterfaceTypeOfProduct_PreSellEndDate();
                    case "QuantityPerMasterPack": return GetInterfaceTypeOfProduct_QuantityPerMasterPack();
                    case "QuantityMasterPackPerLayer": return GetInterfaceTypeOfProduct_QuantityMasterPackPerLayer();
                    case "QuantityMasterPackLayersPerPallet": return GetInterfaceTypeOfProduct_QuantityMasterPackLayersPerPallet();
                    case "QuantityMasterPackPerPallet": return GetInterfaceTypeOfProduct_QuantityMasterPackPerPallet();
                    case "QuantityPerLayer": return GetInterfaceTypeOfProduct_QuantityPerLayer();
                    case "QuantityLayersPerPallet": return GetInterfaceTypeOfProduct_QuantityLayersPerPallet();
                    case "QuantityPerPallet": return GetInterfaceTypeOfProduct_QuantityPerPallet();
                    case "KitBaseQuantityPriceMultiplier": return GetInterfaceTypeOfProduct_KitBaseQuantityPriceMultiplier();
                    case "ShippingLeadTimeDays": return GetInterfaceTypeOfProduct_ShippingLeadTimeDays();
                    case "MinimumPurchaseQuantity": return GetInterfaceTypeOfProduct_MinimumPurchaseQuantity();
                    case "MinimumPurchaseQuantityIfPastPurchased": return GetInterfaceTypeOfProduct_MinimumPurchaseQuantityIfPastPurchased();
                    case "MaximumPurchaseQuantity": return GetInterfaceTypeOfProduct_MaximumPurchaseQuantity();
                    case "MaximumPurchaseQuantityIfPastPurchased": return GetInterfaceTypeOfProduct_MaximumPurchaseQuantityIfPastPurchased();
                    case "MaximumBackOrderPurchaseQuantity": return GetInterfaceTypeOfProduct_MaximumBackOrderPurchaseQuantity();
                    case "MaximumBackOrderPurchaseQuantityIfPastPurchased": return GetInterfaceTypeOfProduct_MaximumBackOrderPurchaseQuantityIfPastPurchased();
                    case "MaximumBackOrderPurchaseQuantityGlobal": return GetInterfaceTypeOfProduct_MaximumBackOrderPurchaseQuantityGlobal();
                    case "MaximumPrePurchaseQuantity": return GetInterfaceTypeOfProduct_MaximumPrePurchaseQuantity();
                    case "MaximumPrePurchaseQuantityIfPastPurchased": return GetInterfaceTypeOfProduct_MaximumPrePurchaseQuantityIfPastPurchased();
                    case "MaximumPrePurchaseQuantityGlobal": return GetInterfaceTypeOfProduct_MaximumPrePurchaseQuantityGlobal();
                    case "DocumentRequiredForPurchase": return GetInterfaceTypeOfProduct_DocumentRequiredForPurchase();
                    case "DocumentRequiredForPurchaseMissingWarningMessage": return GetInterfaceTypeOfProduct_DocumentRequiredForPurchaseMissingWarningMessage();
                    case "DocumentRequiredForPurchaseExpiredWarningMessage": return GetInterfaceTypeOfProduct_DocumentRequiredForPurchaseExpiredWarningMessage();
                    case "DocumentRequiredForPurchaseOverrideFee": return GetInterfaceTypeOfProduct_DocumentRequiredForPurchaseOverrideFee();
                    case "DocumentRequiredForPurchaseOverrideFeeIsPercent": return GetInterfaceTypeOfProduct_DocumentRequiredForPurchaseOverrideFeeIsPercent();
                    case "DocumentRequiredForPurchaseOverrideFeeWarningMessage": return GetInterfaceTypeOfProduct_DocumentRequiredForPurchaseOverrideFeeWarningMessage();
                    case "DocumentRequiredForPurchaseOverrideFeeAcceptedMessage": return GetInterfaceTypeOfProduct_DocumentRequiredForPurchaseOverrideFeeAcceptedMessage();
                    case "MustPurchaseInMultiplesOfAmount": return GetInterfaceTypeOfProduct_MustPurchaseInMultiplesOfAmount();
                    case "MustPurchaseInMultiplesOfAmountWarningMessage": return GetInterfaceTypeOfProduct_MustPurchaseInMultiplesOfAmountWarningMessage();
                    case "MustPurchaseInMultiplesOfAmountOverrideFee": return GetInterfaceTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFee();
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent": return GetInterfaceTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent();
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage();
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfProduct_MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage();
                    case "TotalPurchasedAmount": return GetInterfaceTypeOfProduct_TotalPurchasedAmount();
                    case "TotalPurchasedAmountCurrencyID": return GetInterfaceTypeOfProduct_TotalPurchasedAmountCurrencyID();
                    case "TotalPurchasedAmountCurrency": return GetInterfaceTypeOfProduct_TotalPurchasedAmountCurrency();
                    case "TotalPurchasedQuantity": return GetInterfaceTypeOfProduct_TotalPurchasedQuantity();
                    case "PackageID": return GetInterfaceTypeOfProduct_PackageID();
                    case "Package": return GetInterfaceTypeOfProduct_Package();
                    case "MasterPackID": return GetInterfaceTypeOfProduct_MasterPackID();
                    case "MasterPack": return GetInterfaceTypeOfProduct_MasterPack();
                    case "PalletID": return GetInterfaceTypeOfProduct_PalletID();
                    case "Pallet": return GetInterfaceTypeOfProduct_Pallet();
                    case "RestockingFeeAmountCurrencyID": return GetInterfaceTypeOfProduct_RestockingFeeAmountCurrencyID();
                    case "RestockingFeeAmountCurrency": return GetInterfaceTypeOfProduct_RestockingFeeAmountCurrency();
                    case "ProductAssociations": return GetInterfaceTypeOfProduct_ProductAssociations();
                    case "ProductsAssociatedWith": return GetInterfaceTypeOfProduct_ProductsAssociatedWith();
                    case "ProductCategories": return GetInterfaceTypeOfProduct_ProductCategories();
                    case "ProductMembershipLevels": return GetInterfaceTypeOfProduct_ProductMembershipLevels();
                    case "ProductDownloads": return GetInterfaceTypeOfProduct_ProductDownloads();
                    case "ProductShipCarrierMethods": return GetInterfaceTypeOfProduct_ProductShipCarrierMethods();
                    case "ProductSubscriptionTypes": return GetInterfaceTypeOfProduct_ProductSubscriptionTypes();
                    case "ProductRestrictions": return GetInterfaceTypeOfProduct_ProductRestrictions();
                    case "ProductNotifications": return GetInterfaceTypeOfProduct_ProductNotifications();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductAssociationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductAssociation_MasterID();
                    case "Master": return GetInterfaceTypeOfProductAssociation_Master();
                    case "SlaveID": return GetInterfaceTypeOfProductAssociation_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductAssociation_Slave();
                    case "Quantity": return GetInterfaceTypeOfProductAssociation_Quantity();
                    case "UnitOfMeasure": return GetInterfaceTypeOfProductAssociation_UnitOfMeasure();
                    case "StoreID": return GetInterfaceTypeOfProductAssociation_StoreID();
                    case "Store": return GetInterfaceTypeOfProductAssociation_Store();
                    case "BrandID": return GetInterfaceTypeOfProductAssociation_BrandID();
                    case "Brand": return GetInterfaceTypeOfProductAssociation_Brand();
                    case "TypeID": return GetInterfaceTypeOfProductAssociation_TypeID();
                    case "Type": return GetInterfaceTypeOfProductAssociation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfProductAssociationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductCategory_MasterID();
                    case "Master": return GetInterfaceTypeOfProductCategory_Master();
                    case "SlaveID": return GetInterfaceTypeOfProductCategory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductDownloadModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfProductDownload_TypeID();
                    case "Type": return GetInterfaceTypeOfProductDownload_Type();
                    case "IsAbsoluteUrl": return GetInterfaceTypeOfProductDownload_IsAbsoluteUrl();
                    case "AbsoluteUrl": return GetInterfaceTypeOfProductDownload_AbsoluteUrl();
                    case "RelativeUrl": return GetInterfaceTypeOfProductDownload_RelativeUrl();
                    case "ProductID": return GetInterfaceTypeOfProductDownload_ProductID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfProductDownloadType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfProductFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfProductFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfProductImage_TypeID();
                    case "Type": return GetInterfaceTypeOfProductImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfProductImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfProductImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfProductImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfProductImage_Copyright();
                    case "Location": return GetInterfaceTypeOfProductImage_Location();
                    case "Latitude": return GetInterfaceTypeOfProductImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfProductImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfProductImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfProductImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfProductImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfProductImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfProductImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfProductImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfProductImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfProductImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfProductImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfProductImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfProductImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfProductImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfProductImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfProductImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductInventoryLocationSectionModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductInventoryLocationSection_MasterID();
                    case "Master": return GetInterfaceTypeOfProductInventoryLocationSection_Master();
                    case "SlaveID": return GetInterfaceTypeOfProductInventoryLocationSection_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductInventoryLocationSection_Slave();
                    case "Quantity": return GetInterfaceTypeOfProductInventoryLocationSection_Quantity();
                    case "QuantityAllocated": return GetInterfaceTypeOfProductInventoryLocationSection_QuantityAllocated();
                    case "QuantityPreSold": return GetInterfaceTypeOfProductInventoryLocationSection_QuantityPreSold();
                    case "QuantityBroken": return GetInterfaceTypeOfProductInventoryLocationSection_QuantityBroken();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductMembershipLevelModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductMembershipLevel_MasterID();
                    case "Master": return GetInterfaceTypeOfProductMembershipLevel_Master();
                    case "SlaveID": return GetInterfaceTypeOfProductMembershipLevel_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductMembershipLevel_Slave();
                    case "MembershipRepeatTypeID": return GetInterfaceTypeOfProductMembershipLevel_MembershipRepeatTypeID();
                    case "MembershipRepeatType": return GetInterfaceTypeOfProductMembershipLevel_MembershipRepeatType();
                    case "Subscriptions": return GetInterfaceTypeOfProductMembershipLevel_Subscriptions();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductPricePointModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductPricePoint_MasterID();
                    case "Master": return GetInterfaceTypeOfProductPricePoint_Master();
                    case "SlaveID": return GetInterfaceTypeOfProductPricePoint_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductPricePoint_Slave();
                    case "StoreID": return GetInterfaceTypeOfProductPricePoint_StoreID();
                    case "Store": return GetInterfaceTypeOfProductPricePoint_Store();
                    case "BrandID": return GetInterfaceTypeOfProductPricePoint_BrandID();
                    case "Brand": return GetInterfaceTypeOfProductPricePoint_Brand();
                    case "Price": return GetInterfaceTypeOfProductPricePoint_Price();
                    case "PercentDiscount": return GetInterfaceTypeOfProductPricePoint_PercentDiscount();
                    case "MinQuantity": return GetInterfaceTypeOfProductPricePoint_MinQuantity();
                    case "MaxQuantity": return GetInterfaceTypeOfProductPricePoint_MaxQuantity();
                    case "UnitOfMeasure": return GetInterfaceTypeOfProductPricePoint_UnitOfMeasure();
                    case "From": return GetInterfaceTypeOfProductPricePoint_From();
                    case "To": return GetInterfaceTypeOfProductPricePoint_To();
                    case "PriceRoundingID": return GetInterfaceTypeOfProductPricePoint_PriceRoundingID();
                    case "PriceRounding": return GetInterfaceTypeOfProductPricePoint_PriceRounding();
                    case "CurrencyID": return GetInterfaceTypeOfProductPricePoint_CurrencyID();
                    case "Currency": return GetInterfaceTypeOfProductPricePoint_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductRestrictionModel)))
            {
                switch (property)
                {
                    case "ProductID": return GetInterfaceTypeOfProductRestriction_ProductID();
                    case "CanPurchaseInternationally": return GetInterfaceTypeOfProductRestriction_CanPurchaseInternationally();
                    case "CanPurchaseDomestically": return GetInterfaceTypeOfProductRestriction_CanPurchaseDomestically();
                    case "CanPurchaseIntraRegion": return GetInterfaceTypeOfProductRestriction_CanPurchaseIntraRegion();
                    case "CanShipInternationally": return GetInterfaceTypeOfProductRestriction_CanShipInternationally();
                    case "CanShipDomestically": return GetInterfaceTypeOfProductRestriction_CanShipDomestically();
                    case "CanShipIntraRegion": return GetInterfaceTypeOfProductRestriction_CanShipIntraRegion();
                    case "RestrictionsApplyToCity": return GetInterfaceTypeOfProductRestriction_RestrictionsApplyToCity();
                    case "RestrictionsApplyToPostalCode": return GetInterfaceTypeOfProductRestriction_RestrictionsApplyToPostalCode();
                    case "OverrideWithRoles": return GetInterfaceTypeOfProductRestriction_OverrideWithRoles();
                    case "OverrideWithAccountTypeID": return GetInterfaceTypeOfProductRestriction_OverrideWithAccountTypeID();
                    case "OverrideWithAccountType": return GetInterfaceTypeOfProductRestriction_OverrideWithAccountType();
                    case "RestrictionsApplyToCountryID": return GetInterfaceTypeOfProductRestriction_RestrictionsApplyToCountryID();
                    case "RestrictionsApplyToCountry": return GetInterfaceTypeOfProductRestriction_RestrictionsApplyToCountry();
                    case "RestrictionsApplyToRegionID": return GetInterfaceTypeOfProductRestriction_RestrictionsApplyToRegionID();
                    case "RestrictionsApplyToRegion": return GetInterfaceTypeOfProductRestriction_RestrictionsApplyToRegion();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductShipCarrierMethod_MasterID();
                    case "Master": return GetInterfaceTypeOfProductShipCarrierMethod_Master();
                    case "SlaveID": return GetInterfaceTypeOfProductShipCarrierMethod_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductShipCarrierMethod_Slave();
                    case "StoreID": return GetInterfaceTypeOfProductShipCarrierMethod_StoreID();
                    case "Store": return GetInterfaceTypeOfProductShipCarrierMethod_Store();
                    case "BrandID": return GetInterfaceTypeOfProductShipCarrierMethod_BrandID();
                    case "Brand": return GetInterfaceTypeOfProductShipCarrierMethod_Brand();
                    case "MinQuantity": return GetInterfaceTypeOfProductShipCarrierMethod_MinQuantity();
                    case "MaxQuantity": return GetInterfaceTypeOfProductShipCarrierMethod_MaxQuantity();
                    case "From": return GetInterfaceTypeOfProductShipCarrierMethod_From();
                    case "To": return GetInterfaceTypeOfProductShipCarrierMethod_To();
                    case "UnitOfMeasure": return GetInterfaceTypeOfProductShipCarrierMethod_UnitOfMeasure();
                    case "Price": return GetInterfaceTypeOfProductShipCarrierMethod_Price();
                    case "CurrencyID": return GetInterfaceTypeOfProductShipCarrierMethod_CurrencyID();
                    case "Currency": return GetInterfaceTypeOfProductShipCarrierMethod_Currency();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfProductStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductSubscriptionTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfProductSubscriptionType_MasterID();
                    case "Master": return GetInterfaceTypeOfProductSubscriptionType_Master();
                    case "SlaveID": return GetInterfaceTypeOfProductSubscriptionType_SlaveID();
                    case "Slave": return GetInterfaceTypeOfProductSubscriptionType_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfProductType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Purchasing
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetInterfaceTypeOfPurchaseOrder_DueDate();
                    case "SubtotalItems": return GetInterfaceTypeOfPurchaseOrder_SubtotalItems();
                    case "SubtotalShipping": return GetInterfaceTypeOfPurchaseOrder_SubtotalShipping();
                    case "SubtotalTaxes": return GetInterfaceTypeOfPurchaseOrder_SubtotalTaxes();
                    case "SubtotalFees": return GetInterfaceTypeOfPurchaseOrder_SubtotalFees();
                    case "SubtotalHandling": return GetInterfaceTypeOfPurchaseOrder_SubtotalHandling();
                    case "SubtotalDiscounts": return GetInterfaceTypeOfPurchaseOrder_SubtotalDiscounts();
                    case "Total": return GetInterfaceTypeOfPurchaseOrder_Total();
                    case "ShippingSameAsBilling": return GetInterfaceTypeOfPurchaseOrder_ShippingSameAsBilling();
                    case "BillingContactID": return GetInterfaceTypeOfPurchaseOrder_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfPurchaseOrder_BillingContact();
                    case "ShippingContactID": return GetInterfaceTypeOfPurchaseOrder_ShippingContactID();
                    case "ShippingContact": return GetInterfaceTypeOfPurchaseOrder_ShippingContact();
                    case "StatusID": return GetInterfaceTypeOfPurchaseOrder_StatusID();
                    case "Status": return GetInterfaceTypeOfPurchaseOrder_Status();
                    case "StateID": return GetInterfaceTypeOfPurchaseOrder_StateID();
                    case "State": return GetInterfaceTypeOfPurchaseOrder_State();
                    case "TypeID": return GetInterfaceTypeOfPurchaseOrder_TypeID();
                    case "Type": return GetInterfaceTypeOfPurchaseOrder_Type();
                    case "UserID": return GetInterfaceTypeOfPurchaseOrder_UserID();
                    case "User": return GetInterfaceTypeOfPurchaseOrder_User();
                    case "AccountID": return GetInterfaceTypeOfPurchaseOrder_AccountID();
                    case "Account": return GetInterfaceTypeOfPurchaseOrder_Account();
                    case "SalesItems": return GetInterfaceTypeOfPurchaseOrder_SalesItems();
                    case "Discounts": return GetInterfaceTypeOfPurchaseOrder_Discounts();
                    case "StoredFiles": return GetInterfaceTypeOfPurchaseOrder_StoredFiles();
                    case "Contacts": return GetInterfaceTypeOfPurchaseOrder_Contacts();
                    case "RateQuotes": return GetInterfaceTypeOfPurchaseOrder_RateQuotes();
                    case "Notes": return GetInterfaceTypeOfPurchaseOrder_Notes();
                    case "StoreID": return GetInterfaceTypeOfPurchaseOrder_StoreID();
                    case "Store": return GetInterfaceTypeOfPurchaseOrder_Store();
                    case "BrandID": return GetInterfaceTypeOfPurchaseOrder_BrandID();
                    case "Brand": return GetInterfaceTypeOfPurchaseOrder_Brand();
                    case "TrackingNumber": return GetInterfaceTypeOfPurchaseOrder_TrackingNumber();
                    case "ReleaseDate": return GetInterfaceTypeOfPurchaseOrder_ReleaseDate();
                    case "EstimatedReceiptDate": return GetInterfaceTypeOfPurchaseOrder_EstimatedReceiptDate();
                    case "ActualReceiptDate": return GetInterfaceTypeOfPurchaseOrder_ActualReceiptDate();
                    case "InventoryLocationID": return GetInterfaceTypeOfPurchaseOrder_InventoryLocationID();
                    case "InventoryLocation": return GetInterfaceTypeOfPurchaseOrder_InventoryLocation();
                    case "ShipCarrierID": return GetInterfaceTypeOfPurchaseOrder_ShipCarrierID();
                    case "ShipCarrier": return GetInterfaceTypeOfPurchaseOrder_ShipCarrier();
                    case "VendorID": return GetInterfaceTypeOfPurchaseOrder_VendorID();
                    case "Vendor": return GetInterfaceTypeOfPurchaseOrder_Vendor();
                    case "SalesGroupID": return GetInterfaceTypeOfPurchaseOrder_SalesGroupID();
                    case "SalesGroup": return GetInterfaceTypeOfPurchaseOrder_SalesGroup();
                    case "AssociatedSalesOrders": return GetInterfaceTypeOfPurchaseOrder_AssociatedSalesOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPurchaseOrderContact_MasterID();
                    case "Master": return GetInterfaceTypeOfPurchaseOrderContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfPurchaseOrderContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPurchaseOrderContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPurchaseOrderFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfPurchaseOrderFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPurchaseOrderFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfPurchaseOrderFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetInterfaceTypeOfPurchaseOrderItem_Sku();
                    case "UnitOfMeasure": return GetInterfaceTypeOfPurchaseOrderItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetInterfaceTypeOfPurchaseOrderItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetInterfaceTypeOfPurchaseOrderItem_Quantity();
                    case "QuantityBackOrdered": return GetInterfaceTypeOfPurchaseOrderItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetInterfaceTypeOfPurchaseOrderItem_QuantityPreSold();
                    case "TotalQuantity": return GetInterfaceTypeOfPurchaseOrderItem_TotalQuantity();
                    case "UnitCorePrice": return GetInterfaceTypeOfPurchaseOrderItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetInterfaceTypeOfPurchaseOrderItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetInterfaceTypeOfPurchaseOrderItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetInterfaceTypeOfPurchaseOrderItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetInterfaceTypeOfPurchaseOrderItem_MasterID();
                    case "ProductID": return GetInterfaceTypeOfPurchaseOrderItem_ProductID();
                    case "UserID": return GetInterfaceTypeOfPurchaseOrderItem_UserID();
                    case "User": return GetInterfaceTypeOfPurchaseOrderItem_User();
                    case "OriginalCurrencyID": return GetInterfaceTypeOfPurchaseOrderItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetInterfaceTypeOfPurchaseOrderItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetInterfaceTypeOfPurchaseOrderItem_SellingCurrencyID();
                    case "SellingCurrency": return GetInterfaceTypeOfPurchaseOrderItem_SellingCurrency();
                    case "Discounts": return GetInterfaceTypeOfPurchaseOrderItem_Discounts();
                    case "Targets": return GetInterfaceTypeOfPurchaseOrderItem_Targets();
                    case "Notes": return GetInterfaceTypeOfPurchaseOrderItem_Notes();
                    case "DateReceived": return GetInterfaceTypeOfPurchaseOrderItem_DateReceived();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetInterfaceTypeOfPurchaseOrderItemTarget_Quantity();
                    case "NothingToShip": return GetInterfaceTypeOfPurchaseOrderItemTarget_NothingToShip();
                    case "MasterID": return GetInterfaceTypeOfPurchaseOrderItemTarget_MasterID();
                    case "TypeID": return GetInterfaceTypeOfPurchaseOrderItemTarget_TypeID();
                    case "Type": return GetInterfaceTypeOfPurchaseOrderItemTarget_Type();
                    case "DestinationContactID": return GetInterfaceTypeOfPurchaseOrderItemTarget_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfPurchaseOrderItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetInterfaceTypeOfPurchaseOrderItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetInterfaceTypeOfPurchaseOrderItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetInterfaceTypeOfPurchaseOrderItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetInterfaceTypeOfPurchaseOrderItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetInterfaceTypeOfPurchaseOrderItemTarget_BrandProductID();
                    case "BrandProduct": return GetInterfaceTypeOfPurchaseOrderItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetInterfaceTypeOfPurchaseOrderItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetInterfaceTypeOfPurchaseOrderItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetInterfaceTypeOfPurchaseOrderItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetInterfaceTypeOfPurchaseOrderItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPurchaseOrderState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPurchaseOrderStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPurchaseOrderType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderPurchaseOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesOrderPurchaseOrder_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesOrderPurchaseOrder_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesOrderPurchaseOrder_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesOrderPurchaseOrder_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Quoting
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetInterfaceTypeOfSalesQuote_DueDate();
                    case "SubtotalItems": return GetInterfaceTypeOfSalesQuote_SubtotalItems();
                    case "SubtotalShipping": return GetInterfaceTypeOfSalesQuote_SubtotalShipping();
                    case "SubtotalTaxes": return GetInterfaceTypeOfSalesQuote_SubtotalTaxes();
                    case "SubtotalFees": return GetInterfaceTypeOfSalesQuote_SubtotalFees();
                    case "SubtotalHandling": return GetInterfaceTypeOfSalesQuote_SubtotalHandling();
                    case "SubtotalDiscounts": return GetInterfaceTypeOfSalesQuote_SubtotalDiscounts();
                    case "Total": return GetInterfaceTypeOfSalesQuote_Total();
                    case "ShippingSameAsBilling": return GetInterfaceTypeOfSalesQuote_ShippingSameAsBilling();
                    case "BillingContactID": return GetInterfaceTypeOfSalesQuote_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfSalesQuote_BillingContact();
                    case "ShippingContactID": return GetInterfaceTypeOfSalesQuote_ShippingContactID();
                    case "ShippingContact": return GetInterfaceTypeOfSalesQuote_ShippingContact();
                    case "StatusID": return GetInterfaceTypeOfSalesQuote_StatusID();
                    case "Status": return GetInterfaceTypeOfSalesQuote_Status();
                    case "StateID": return GetInterfaceTypeOfSalesQuote_StateID();
                    case "State": return GetInterfaceTypeOfSalesQuote_State();
                    case "TypeID": return GetInterfaceTypeOfSalesQuote_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesQuote_Type();
                    case "UserID": return GetInterfaceTypeOfSalesQuote_UserID();
                    case "User": return GetInterfaceTypeOfSalesQuote_User();
                    case "AccountID": return GetInterfaceTypeOfSalesQuote_AccountID();
                    case "Account": return GetInterfaceTypeOfSalesQuote_Account();
                    case "SalesItems": return GetInterfaceTypeOfSalesQuote_SalesItems();
                    case "Discounts": return GetInterfaceTypeOfSalesQuote_Discounts();
                    case "StoredFiles": return GetInterfaceTypeOfSalesQuote_StoredFiles();
                    case "Contacts": return GetInterfaceTypeOfSalesQuote_Contacts();
                    case "RateQuotes": return GetInterfaceTypeOfSalesQuote_RateQuotes();
                    case "Notes": return GetInterfaceTypeOfSalesQuote_Notes();
                    case "StoreID": return GetInterfaceTypeOfSalesQuote_StoreID();
                    case "Store": return GetInterfaceTypeOfSalesQuote_Store();
                    case "BrandID": return GetInterfaceTypeOfSalesQuote_BrandID();
                    case "Brand": return GetInterfaceTypeOfSalesQuote_Brand();
                    case "BalanceDue": return GetInterfaceTypeOfSalesQuote_BalanceDue();
                    case "ResponseAsVendorID": return GetInterfaceTypeOfSalesQuote_ResponseAsVendorID();
                    case "ResponseAsVendor": return GetInterfaceTypeOfSalesQuote_ResponseAsVendor();
                    case "ResponseAsStoreID": return GetInterfaceTypeOfSalesQuote_ResponseAsStoreID();
                    case "ResponseAsStore": return GetInterfaceTypeOfSalesQuote_ResponseAsStore();
                    case "SalesGroupAsMasterID": return GetInterfaceTypeOfSalesQuote_SalesGroupAsMasterID();
                    case "SalesGroupAsResponseID": return GetInterfaceTypeOfSalesQuote_SalesGroupAsResponseID();
                    case "AssociatedSalesOrders": return GetInterfaceTypeOfSalesQuote_AssociatedSalesOrders();
                    case "SalesQuoteCategories": return GetInterfaceTypeOfSalesQuote_SalesQuoteCategories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesQuoteCategory_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesQuoteCategory_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesQuoteCategory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesQuoteCategory_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesQuoteContact_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesQuoteContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesQuoteContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesQuoteContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesQuoteFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSalesQuoteFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesQuoteFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfSalesQuoteFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetInterfaceTypeOfSalesQuoteItem_Sku();
                    case "UnitOfMeasure": return GetInterfaceTypeOfSalesQuoteItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetInterfaceTypeOfSalesQuoteItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetInterfaceTypeOfSalesQuoteItem_Quantity();
                    case "QuantityBackOrdered": return GetInterfaceTypeOfSalesQuoteItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetInterfaceTypeOfSalesQuoteItem_QuantityPreSold();
                    case "TotalQuantity": return GetInterfaceTypeOfSalesQuoteItem_TotalQuantity();
                    case "UnitCorePrice": return GetInterfaceTypeOfSalesQuoteItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetInterfaceTypeOfSalesQuoteItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetInterfaceTypeOfSalesQuoteItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetInterfaceTypeOfSalesQuoteItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetInterfaceTypeOfSalesQuoteItem_MasterID();
                    case "ProductID": return GetInterfaceTypeOfSalesQuoteItem_ProductID();
                    case "UserID": return GetInterfaceTypeOfSalesQuoteItem_UserID();
                    case "User": return GetInterfaceTypeOfSalesQuoteItem_User();
                    case "OriginalCurrencyID": return GetInterfaceTypeOfSalesQuoteItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetInterfaceTypeOfSalesQuoteItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetInterfaceTypeOfSalesQuoteItem_SellingCurrencyID();
                    case "SellingCurrency": return GetInterfaceTypeOfSalesQuoteItem_SellingCurrency();
                    case "Discounts": return GetInterfaceTypeOfSalesQuoteItem_Discounts();
                    case "Targets": return GetInterfaceTypeOfSalesQuoteItem_Targets();
                    case "Notes": return GetInterfaceTypeOfSalesQuoteItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetInterfaceTypeOfSalesQuoteItemTarget_Quantity();
                    case "NothingToShip": return GetInterfaceTypeOfSalesQuoteItemTarget_NothingToShip();
                    case "MasterID": return GetInterfaceTypeOfSalesQuoteItemTarget_MasterID();
                    case "TypeID": return GetInterfaceTypeOfSalesQuoteItemTarget_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesQuoteItemTarget_Type();
                    case "DestinationContactID": return GetInterfaceTypeOfSalesQuoteItemTarget_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfSalesQuoteItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetInterfaceTypeOfSalesQuoteItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetInterfaceTypeOfSalesQuoteItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetInterfaceTypeOfSalesQuoteItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetInterfaceTypeOfSalesQuoteItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetInterfaceTypeOfSalesQuoteItemTarget_BrandProductID();
                    case "BrandProduct": return GetInterfaceTypeOfSalesQuoteItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetInterfaceTypeOfSalesQuoteItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetInterfaceTypeOfSalesQuoteItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetInterfaceTypeOfSalesQuoteItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetInterfaceTypeOfSalesQuoteItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteSalesOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesQuoteSalesOrder_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesQuoteSalesOrder_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesQuoteSalesOrder_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesQuoteSalesOrder_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesQuoteState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesQuoteStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesQuoteType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Reporting
            if (type.GetInterfaces().Any(x => x == typeof(IReportTypeModel)))
            {
                switch (property)
                {
                    case "Template": return GetInterfaceTypeOfReportType_Template();
                    case "TranslationKey": return GetInterfaceTypeOfReportType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Returning
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetInterfaceTypeOfSalesReturn_DueDate();
                    case "SubtotalItems": return GetInterfaceTypeOfSalesReturn_SubtotalItems();
                    case "SubtotalShipping": return GetInterfaceTypeOfSalesReturn_SubtotalShipping();
                    case "SubtotalTaxes": return GetInterfaceTypeOfSalesReturn_SubtotalTaxes();
                    case "SubtotalFees": return GetInterfaceTypeOfSalesReturn_SubtotalFees();
                    case "SubtotalHandling": return GetInterfaceTypeOfSalesReturn_SubtotalHandling();
                    case "SubtotalDiscounts": return GetInterfaceTypeOfSalesReturn_SubtotalDiscounts();
                    case "Total": return GetInterfaceTypeOfSalesReturn_Total();
                    case "ShippingSameAsBilling": return GetInterfaceTypeOfSalesReturn_ShippingSameAsBilling();
                    case "BillingContactID": return GetInterfaceTypeOfSalesReturn_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfSalesReturn_BillingContact();
                    case "ShippingContactID": return GetInterfaceTypeOfSalesReturn_ShippingContactID();
                    case "ShippingContact": return GetInterfaceTypeOfSalesReturn_ShippingContact();
                    case "StatusID": return GetInterfaceTypeOfSalesReturn_StatusID();
                    case "Status": return GetInterfaceTypeOfSalesReturn_Status();
                    case "StateID": return GetInterfaceTypeOfSalesReturn_StateID();
                    case "State": return GetInterfaceTypeOfSalesReturn_State();
                    case "TypeID": return GetInterfaceTypeOfSalesReturn_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesReturn_Type();
                    case "UserID": return GetInterfaceTypeOfSalesReturn_UserID();
                    case "User": return GetInterfaceTypeOfSalesReturn_User();
                    case "AccountID": return GetInterfaceTypeOfSalesReturn_AccountID();
                    case "Account": return GetInterfaceTypeOfSalesReturn_Account();
                    case "SalesItems": return GetInterfaceTypeOfSalesReturn_SalesItems();
                    case "Discounts": return GetInterfaceTypeOfSalesReturn_Discounts();
                    case "StoredFiles": return GetInterfaceTypeOfSalesReturn_StoredFiles();
                    case "Contacts": return GetInterfaceTypeOfSalesReturn_Contacts();
                    case "RateQuotes": return GetInterfaceTypeOfSalesReturn_RateQuotes();
                    case "Notes": return GetInterfaceTypeOfSalesReturn_Notes();
                    case "StoreID": return GetInterfaceTypeOfSalesReturn_StoreID();
                    case "Store": return GetInterfaceTypeOfSalesReturn_Store();
                    case "BrandID": return GetInterfaceTypeOfSalesReturn_BrandID();
                    case "Brand": return GetInterfaceTypeOfSalesReturn_Brand();
                    case "PurchaseOrderNumber": return GetInterfaceTypeOfSalesReturn_PurchaseOrderNumber();
                    case "TrackingNumber": return GetInterfaceTypeOfSalesReturn_TrackingNumber();
                    case "RefundTransactionID": return GetInterfaceTypeOfSalesReturn_RefundTransactionID();
                    case "TaxTransactionID": return GetInterfaceTypeOfSalesReturn_TaxTransactionID();
                    case "BalanceDue": return GetInterfaceTypeOfSalesReturn_BalanceDue();
                    case "RefundAmount": return GetInterfaceTypeOfSalesReturn_RefundAmount();
                    case "ReturnApprovedDate": return GetInterfaceTypeOfSalesReturn_ReturnApprovedDate();
                    case "ReturnCommitmentDate": return GetInterfaceTypeOfSalesReturn_ReturnCommitmentDate();
                    case "RequiredShipDate": return GetInterfaceTypeOfSalesReturn_RequiredShipDate();
                    case "RequestedShipDate": return GetInterfaceTypeOfSalesReturn_RequestedShipDate();
                    case "ActualShipDate": return GetInterfaceTypeOfSalesReturn_ActualShipDate();
                    case "SalesGroupID": return GetInterfaceTypeOfSalesReturn_SalesGroupID();
                    case "SalesGroup": return GetInterfaceTypeOfSalesReturn_SalesGroup();
                    case "SalesReturnPayments": return GetInterfaceTypeOfSalesReturn_SalesReturnPayments();
                    case "AssociatedSalesOrders": return GetInterfaceTypeOfSalesReturn_AssociatedSalesOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesReturnContact_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesReturnContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesReturnContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesReturnContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesReturnFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSalesReturnFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesReturnFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfSalesReturnFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetInterfaceTypeOfSalesReturnItem_Sku();
                    case "UnitOfMeasure": return GetInterfaceTypeOfSalesReturnItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetInterfaceTypeOfSalesReturnItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetInterfaceTypeOfSalesReturnItem_Quantity();
                    case "QuantityBackOrdered": return GetInterfaceTypeOfSalesReturnItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetInterfaceTypeOfSalesReturnItem_QuantityPreSold();
                    case "TotalQuantity": return GetInterfaceTypeOfSalesReturnItem_TotalQuantity();
                    case "UnitCorePrice": return GetInterfaceTypeOfSalesReturnItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetInterfaceTypeOfSalesReturnItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetInterfaceTypeOfSalesReturnItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetInterfaceTypeOfSalesReturnItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetInterfaceTypeOfSalesReturnItem_MasterID();
                    case "ProductID": return GetInterfaceTypeOfSalesReturnItem_ProductID();
                    case "UserID": return GetInterfaceTypeOfSalesReturnItem_UserID();
                    case "User": return GetInterfaceTypeOfSalesReturnItem_User();
                    case "OriginalCurrencyID": return GetInterfaceTypeOfSalesReturnItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetInterfaceTypeOfSalesReturnItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetInterfaceTypeOfSalesReturnItem_SellingCurrencyID();
                    case "SellingCurrency": return GetInterfaceTypeOfSalesReturnItem_SellingCurrency();
                    case "Discounts": return GetInterfaceTypeOfSalesReturnItem_Discounts();
                    case "Targets": return GetInterfaceTypeOfSalesReturnItem_Targets();
                    case "Notes": return GetInterfaceTypeOfSalesReturnItem_Notes();
                    case "RestockingFeeAmount": return GetInterfaceTypeOfSalesReturnItem_RestockingFeeAmount();
                    case "SalesReturnReasonID": return GetInterfaceTypeOfSalesReturnItem_SalesReturnReasonID();
                    case "SalesReturnReason": return GetInterfaceTypeOfSalesReturnItem_SalesReturnReason();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetInterfaceTypeOfSalesReturnItemTarget_Quantity();
                    case "NothingToShip": return GetInterfaceTypeOfSalesReturnItemTarget_NothingToShip();
                    case "MasterID": return GetInterfaceTypeOfSalesReturnItemTarget_MasterID();
                    case "TypeID": return GetInterfaceTypeOfSalesReturnItemTarget_TypeID();
                    case "Type": return GetInterfaceTypeOfSalesReturnItemTarget_Type();
                    case "DestinationContactID": return GetInterfaceTypeOfSalesReturnItemTarget_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfSalesReturnItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetInterfaceTypeOfSalesReturnItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetInterfaceTypeOfSalesReturnItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetInterfaceTypeOfSalesReturnItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetInterfaceTypeOfSalesReturnItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetInterfaceTypeOfSalesReturnItemTarget_BrandProductID();
                    case "BrandProduct": return GetInterfaceTypeOfSalesReturnItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetInterfaceTypeOfSalesReturnItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetInterfaceTypeOfSalesReturnItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetInterfaceTypeOfSalesReturnItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetInterfaceTypeOfSalesReturnItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnReasonModel)))
            {
                switch (property)
                {
                    case "IsRestockingFeeApplicable": return GetInterfaceTypeOfSalesReturnReason_IsRestockingFeeApplicable();
                    case "RestockingFeePercent": return GetInterfaceTypeOfSalesReturnReason_RestockingFeePercent();
                    case "RestockingFeeAmount": return GetInterfaceTypeOfSalesReturnReason_RestockingFeeAmount();
                    case "RestockingFeeAmountCurrencyID": return GetInterfaceTypeOfSalesReturnReason_RestockingFeeAmountCurrencyID();
                    case "RestockingFeeAmountCurrency": return GetInterfaceTypeOfSalesReturnReason_RestockingFeeAmountCurrency();
                    case "TranslationKey": return GetInterfaceTypeOfSalesReturnReason_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnSalesOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSalesReturnSalesOrder_MasterID();
                    case "Master": return GetInterfaceTypeOfSalesReturnSalesOrder_Master();
                    case "SlaveID": return GetInterfaceTypeOfSalesReturnSalesOrder_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSalesReturnSalesOrder_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesReturnState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesReturnStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesReturnType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Reviews
            if (type.GetInterfaces().Any(x => x == typeof(IReviewModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfReview_TypeID();
                    case "Type": return GetInterfaceTypeOfReview_Type();
                    case "Value": return GetInterfaceTypeOfReview_Value();
                    case "Comment": return GetInterfaceTypeOfReview_Comment();
                    case "Approved": return GetInterfaceTypeOfReview_Approved();
                    case "ApprovedDate": return GetInterfaceTypeOfReview_ApprovedDate();
                    case "Title": return GetInterfaceTypeOfReview_Title();
                    case "Location": return GetInterfaceTypeOfReview_Location();
                    case "SubmittedByUserID": return GetInterfaceTypeOfReview_SubmittedByUserID();
                    case "SubmittedByUser": return GetInterfaceTypeOfReview_SubmittedByUser();
                    case "ApprovedByUserID": return GetInterfaceTypeOfReview_ApprovedByUserID();
                    case "ApprovedByUser": return GetInterfaceTypeOfReview_ApprovedByUser();
                    case "CategoryID": return GetInterfaceTypeOfReview_CategoryID();
                    case "Category": return GetInterfaceTypeOfReview_Category();
                    case "ManufacturerID": return GetInterfaceTypeOfReview_ManufacturerID();
                    case "Manufacturer": return GetInterfaceTypeOfReview_Manufacturer();
                    case "ProductID": return GetInterfaceTypeOfReview_ProductID();
                    case "Product": return GetInterfaceTypeOfReview_Product();
                    case "StoreID": return GetInterfaceTypeOfReview_StoreID();
                    case "Store": return GetInterfaceTypeOfReview_Store();
                    case "UserID": return GetInterfaceTypeOfReview_UserID();
                    case "User": return GetInterfaceTypeOfReview_User();
                    case "VendorID": return GetInterfaceTypeOfReview_VendorID();
                    case "Vendor": return GetInterfaceTypeOfReview_Vendor();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfReviewType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Sales
            if (type.GetInterfaces().Any(x => x == typeof(ISalesGroupModel)))
            {
                switch (property)
                {
                    case "Notes": return GetInterfaceTypeOfSalesGroup_Notes();
                    case "AccountID": return GetInterfaceTypeOfSalesGroup_AccountID();
                    case "Account": return GetInterfaceTypeOfSalesGroup_Account();
                    case "BillingContactID": return GetInterfaceTypeOfSalesGroup_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfSalesGroup_BillingContact();
                    case "SalesQuoteResponses": return GetInterfaceTypeOfSalesGroup_SalesQuoteResponses();
                    case "SalesQuoteMasters": return GetInterfaceTypeOfSalesGroup_SalesQuoteMasters();
                    case "SubSalesOrders": return GetInterfaceTypeOfSalesGroup_SubSalesOrders();
                    case "SalesOrderMasters": return GetInterfaceTypeOfSalesGroup_SalesOrderMasters();
                    case "PurchaseOrders": return GetInterfaceTypeOfSalesGroup_PurchaseOrders();
                    case "SalesInvoices": return GetInterfaceTypeOfSalesGroup_SalesInvoices();
                    case "SalesReturns": return GetInterfaceTypeOfSalesGroup_SalesReturns();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSalesItemTargetType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Sampling
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetInterfaceTypeOfSampleRequest_DueDate();
                    case "SubtotalItems": return GetInterfaceTypeOfSampleRequest_SubtotalItems();
                    case "SubtotalShipping": return GetInterfaceTypeOfSampleRequest_SubtotalShipping();
                    case "SubtotalTaxes": return GetInterfaceTypeOfSampleRequest_SubtotalTaxes();
                    case "SubtotalFees": return GetInterfaceTypeOfSampleRequest_SubtotalFees();
                    case "SubtotalHandling": return GetInterfaceTypeOfSampleRequest_SubtotalHandling();
                    case "SubtotalDiscounts": return GetInterfaceTypeOfSampleRequest_SubtotalDiscounts();
                    case "Total": return GetInterfaceTypeOfSampleRequest_Total();
                    case "ShippingSameAsBilling": return GetInterfaceTypeOfSampleRequest_ShippingSameAsBilling();
                    case "BillingContactID": return GetInterfaceTypeOfSampleRequest_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfSampleRequest_BillingContact();
                    case "ShippingContactID": return GetInterfaceTypeOfSampleRequest_ShippingContactID();
                    case "ShippingContact": return GetInterfaceTypeOfSampleRequest_ShippingContact();
                    case "StatusID": return GetInterfaceTypeOfSampleRequest_StatusID();
                    case "Status": return GetInterfaceTypeOfSampleRequest_Status();
                    case "StateID": return GetInterfaceTypeOfSampleRequest_StateID();
                    case "State": return GetInterfaceTypeOfSampleRequest_State();
                    case "TypeID": return GetInterfaceTypeOfSampleRequest_TypeID();
                    case "Type": return GetInterfaceTypeOfSampleRequest_Type();
                    case "UserID": return GetInterfaceTypeOfSampleRequest_UserID();
                    case "User": return GetInterfaceTypeOfSampleRequest_User();
                    case "AccountID": return GetInterfaceTypeOfSampleRequest_AccountID();
                    case "Account": return GetInterfaceTypeOfSampleRequest_Account();
                    case "SalesItems": return GetInterfaceTypeOfSampleRequest_SalesItems();
                    case "Discounts": return GetInterfaceTypeOfSampleRequest_Discounts();
                    case "StoredFiles": return GetInterfaceTypeOfSampleRequest_StoredFiles();
                    case "Contacts": return GetInterfaceTypeOfSampleRequest_Contacts();
                    case "RateQuotes": return GetInterfaceTypeOfSampleRequest_RateQuotes();
                    case "Notes": return GetInterfaceTypeOfSampleRequest_Notes();
                    case "StoreID": return GetInterfaceTypeOfSampleRequest_StoreID();
                    case "Store": return GetInterfaceTypeOfSampleRequest_Store();
                    case "BrandID": return GetInterfaceTypeOfSampleRequest_BrandID();
                    case "Brand": return GetInterfaceTypeOfSampleRequest_Brand();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSampleRequestContact_MasterID();
                    case "Master": return GetInterfaceTypeOfSampleRequestContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfSampleRequestContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSampleRequestContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSampleRequestFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfSampleRequestFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSampleRequestFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfSampleRequestFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetInterfaceTypeOfSampleRequestItem_Sku();
                    case "UnitOfMeasure": return GetInterfaceTypeOfSampleRequestItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetInterfaceTypeOfSampleRequestItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetInterfaceTypeOfSampleRequestItem_Quantity();
                    case "QuantityBackOrdered": return GetInterfaceTypeOfSampleRequestItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetInterfaceTypeOfSampleRequestItem_QuantityPreSold();
                    case "TotalQuantity": return GetInterfaceTypeOfSampleRequestItem_TotalQuantity();
                    case "UnitCorePrice": return GetInterfaceTypeOfSampleRequestItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetInterfaceTypeOfSampleRequestItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetInterfaceTypeOfSampleRequestItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetInterfaceTypeOfSampleRequestItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetInterfaceTypeOfSampleRequestItem_MasterID();
                    case "ProductID": return GetInterfaceTypeOfSampleRequestItem_ProductID();
                    case "UserID": return GetInterfaceTypeOfSampleRequestItem_UserID();
                    case "User": return GetInterfaceTypeOfSampleRequestItem_User();
                    case "OriginalCurrencyID": return GetInterfaceTypeOfSampleRequestItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetInterfaceTypeOfSampleRequestItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetInterfaceTypeOfSampleRequestItem_SellingCurrencyID();
                    case "SellingCurrency": return GetInterfaceTypeOfSampleRequestItem_SellingCurrency();
                    case "Discounts": return GetInterfaceTypeOfSampleRequestItem_Discounts();
                    case "Targets": return GetInterfaceTypeOfSampleRequestItem_Targets();
                    case "Notes": return GetInterfaceTypeOfSampleRequestItem_Notes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetInterfaceTypeOfSampleRequestItemTarget_Quantity();
                    case "NothingToShip": return GetInterfaceTypeOfSampleRequestItemTarget_NothingToShip();
                    case "MasterID": return GetInterfaceTypeOfSampleRequestItemTarget_MasterID();
                    case "TypeID": return GetInterfaceTypeOfSampleRequestItemTarget_TypeID();
                    case "Type": return GetInterfaceTypeOfSampleRequestItemTarget_Type();
                    case "DestinationContactID": return GetInterfaceTypeOfSampleRequestItemTarget_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfSampleRequestItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetInterfaceTypeOfSampleRequestItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetInterfaceTypeOfSampleRequestItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetInterfaceTypeOfSampleRequestItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetInterfaceTypeOfSampleRequestItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetInterfaceTypeOfSampleRequestItemTarget_BrandProductID();
                    case "BrandProduct": return GetInterfaceTypeOfSampleRequestItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetInterfaceTypeOfSampleRequestItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetInterfaceTypeOfSampleRequestItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetInterfaceTypeOfSampleRequestItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetInterfaceTypeOfSampleRequestItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSampleRequestState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSampleRequestStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSampleRequestType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Scouting
            if (type.GetInterfaces().Any(x => x == typeof(IScoutModel)))
            {
                switch (property)
                {
                    case "YearMin": return GetInterfaceTypeOfScout_YearMin();
                    case "YearMax": return GetInterfaceTypeOfScout_YearMax();
                    case "PriceMin": return GetInterfaceTypeOfScout_PriceMin();
                    case "PriceMax": return GetInterfaceTypeOfScout_PriceMax();
                    case "HoursUsedMin": return GetInterfaceTypeOfScout_HoursUsedMin();
                    case "HoursUsedMax": return GetInterfaceTypeOfScout_HoursUsedMax();
                    case "DistanceUsedMin": return GetInterfaceTypeOfScout_DistanceUsedMin();
                    case "DistanceUsedMax": return GetInterfaceTypeOfScout_DistanceUsedMax();
                    case "DistanceUnitOfMeasure": return GetInterfaceTypeOfScout_DistanceUnitOfMeasure();
                    case "CreatedByUserID": return GetInterfaceTypeOfScout_CreatedByUserID();
                    case "CreatedByUser": return GetInterfaceTypeOfScout_CreatedByUser();
                    case "Categories": return GetInterfaceTypeOfScout_Categories();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IScoutCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfScoutCategory_MasterID();
                    case "Master": return GetInterfaceTypeOfScoutCategory_Master();
                    case "SlaveID": return GetInterfaceTypeOfScoutCategory_SlaveID();
                    case "Slave": return GetInterfaceTypeOfScoutCategory_Slave();
                    case "TypeID": return GetInterfaceTypeOfScoutCategory_TypeID();
                    case "Type": return GetInterfaceTypeOfScoutCategory_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfScoutCategoryType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Shipping
            if (type.GetInterfaces().Any(x => x == typeof(IPackageModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfPackage_TypeID();
                    case "Type": return GetInterfaceTypeOfPackage_Type();
                    case "Width": return GetInterfaceTypeOfPackage_Width();
                    case "WidthUnitOfMeasure": return GetInterfaceTypeOfPackage_WidthUnitOfMeasure();
                    case "Depth": return GetInterfaceTypeOfPackage_Depth();
                    case "DepthUnitOfMeasure": return GetInterfaceTypeOfPackage_DepthUnitOfMeasure();
                    case "Height": return GetInterfaceTypeOfPackage_Height();
                    case "HeightUnitOfMeasure": return GetInterfaceTypeOfPackage_HeightUnitOfMeasure();
                    case "Weight": return GetInterfaceTypeOfPackage_Weight();
                    case "WeightUnitOfMeasure": return GetInterfaceTypeOfPackage_WeightUnitOfMeasure();
                    case "DimensionalWeight": return GetInterfaceTypeOfPackage_DimensionalWeight();
                    case "DimensionalWeightUnitOfMeasure": return GetInterfaceTypeOfPackage_DimensionalWeightUnitOfMeasure();
                    case "IsCustom": return GetInterfaceTypeOfPackage_IsCustom();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPackageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRateQuoteModel)))
            {
                switch (property)
                {
                    case "EstimatedDeliveryDate": return GetInterfaceTypeOfRateQuote_EstimatedDeliveryDate();
                    case "TargetShippingDate": return GetInterfaceTypeOfRateQuote_TargetShippingDate();
                    case "Rate": return GetInterfaceTypeOfRateQuote_Rate();
                    case "CartHash": return GetInterfaceTypeOfRateQuote_CartHash();
                    case "RateTimestamp": return GetInterfaceTypeOfRateQuote_RateTimestamp();
                    case "Selected": return GetInterfaceTypeOfRateQuote_Selected();
                    case "ShipCarrierMethodID": return GetInterfaceTypeOfRateQuote_ShipCarrierMethodID();
                    case "ShipCarrierMethod": return GetInterfaceTypeOfRateQuote_ShipCarrierMethod();
                    case "CartID": return GetInterfaceTypeOfRateQuote_CartID();
                    case "SampleRequestID": return GetInterfaceTypeOfRateQuote_SampleRequestID();
                    case "SalesQuoteID": return GetInterfaceTypeOfRateQuote_SalesQuoteID();
                    case "SalesOrderID": return GetInterfaceTypeOfRateQuote_SalesOrderID();
                    case "PurchaseOrderID": return GetInterfaceTypeOfRateQuote_PurchaseOrderID();
                    case "SalesInvoiceID": return GetInterfaceTypeOfRateQuote_SalesInvoiceID();
                    case "SalesReturnID": return GetInterfaceTypeOfRateQuote_SalesReturnID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipCarrierModel)))
            {
                switch (property)
                {
                    case "ContactID": return GetInterfaceTypeOfShipCarrier_ContactID();
                    case "Contact": return GetInterfaceTypeOfShipCarrier_Contact();
                    case "PointOfContact": return GetInterfaceTypeOfShipCarrier_PointOfContact();
                    case "IsInbound": return GetInterfaceTypeOfShipCarrier_IsInbound();
                    case "IsOutbound": return GetInterfaceTypeOfShipCarrier_IsOutbound();
                    case "Username": return GetInterfaceTypeOfShipCarrier_Username();
                    case "Authentication": return GetInterfaceTypeOfShipCarrier_Authentication();
                    case "AccountNumber": return GetInterfaceTypeOfShipCarrier_AccountNumber();
                    case "SalesRep": return GetInterfaceTypeOfShipCarrier_SalesRep();
                    case "PickupTime": return GetInterfaceTypeOfShipCarrier_PickupTime();
                    case "ShipCarrierMethods": return GetInterfaceTypeOfShipCarrier_ShipCarrierMethods();
                    case "Shipments": return GetInterfaceTypeOfShipCarrier_Shipments();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "ShipCarrierID": return GetInterfaceTypeOfShipCarrierMethod_ShipCarrierID();
                    case "ShipCarrier": return GetInterfaceTypeOfShipCarrierMethod_ShipCarrier();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipmentModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfShipment_TypeID();
                    case "Type": return GetInterfaceTypeOfShipment_Type();
                    case "StatusID": return GetInterfaceTypeOfShipment_StatusID();
                    case "Status": return GetInterfaceTypeOfShipment_Status();
                    case "Reference1": return GetInterfaceTypeOfShipment_Reference1();
                    case "Reference2": return GetInterfaceTypeOfShipment_Reference2();
                    case "Reference3": return GetInterfaceTypeOfShipment_Reference3();
                    case "TrackingNumber": return GetInterfaceTypeOfShipment_TrackingNumber();
                    case "Destination": return GetInterfaceTypeOfShipment_Destination();
                    case "TargetShippingDate": return GetInterfaceTypeOfShipment_TargetShippingDate();
                    case "EstimatedDeliveryDate": return GetInterfaceTypeOfShipment_EstimatedDeliveryDate();
                    case "ShipDate": return GetInterfaceTypeOfShipment_ShipDate();
                    case "DateDelivered": return GetInterfaceTypeOfShipment_DateDelivered();
                    case "NegotiatedRate": return GetInterfaceTypeOfShipment_NegotiatedRate();
                    case "PublishedRate": return GetInterfaceTypeOfShipment_PublishedRate();
                    case "OriginContactID": return GetInterfaceTypeOfShipment_OriginContactID();
                    case "OriginContact": return GetInterfaceTypeOfShipment_OriginContact();
                    case "DestinationContactID": return GetInterfaceTypeOfShipment_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfShipment_DestinationContact();
                    case "InventoryLocationSectionID": return GetInterfaceTypeOfShipment_InventoryLocationSectionID();
                    case "InventoryLocationSection": return GetInterfaceTypeOfShipment_InventoryLocationSection();
                    case "ShipCarrierID": return GetInterfaceTypeOfShipment_ShipCarrierID();
                    case "ShipCarrier": return GetInterfaceTypeOfShipment_ShipCarrier();
                    case "ShipCarrierMethodID": return GetInterfaceTypeOfShipment_ShipCarrierMethodID();
                    case "ShipCarrierMethod": return GetInterfaceTypeOfShipment_ShipCarrierMethod();
                    case "VendorID": return GetInterfaceTypeOfShipment_VendorID();
                    case "Vendor": return GetInterfaceTypeOfShipment_Vendor();
                    case "ShipmentEvents": return GetInterfaceTypeOfShipment_ShipmentEvents();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipmentEventModel)))
            {
                switch (property)
                {
                    case "Note": return GetInterfaceTypeOfShipmentEvent_Note();
                    case "EventDate": return GetInterfaceTypeOfShipmentEvent_EventDate();
                    case "AddressID": return GetInterfaceTypeOfShipmentEvent_AddressID();
                    case "Address": return GetInterfaceTypeOfShipmentEvent_Address();
                    case "ShipmentID": return GetInterfaceTypeOfShipmentEvent_ShipmentID();
                    case "Shipment": return GetInterfaceTypeOfShipmentEvent_Shipment();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfShipmentStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfShipmentType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Shopping
            if (type.GetInterfaces().Any(x => x == typeof(ICartModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetInterfaceTypeOfCart_DueDate();
                    case "SubtotalItems": return GetInterfaceTypeOfCart_SubtotalItems();
                    case "SubtotalShipping": return GetInterfaceTypeOfCart_SubtotalShipping();
                    case "SubtotalTaxes": return GetInterfaceTypeOfCart_SubtotalTaxes();
                    case "SubtotalFees": return GetInterfaceTypeOfCart_SubtotalFees();
                    case "SubtotalHandling": return GetInterfaceTypeOfCart_SubtotalHandling();
                    case "SubtotalDiscounts": return GetInterfaceTypeOfCart_SubtotalDiscounts();
                    case "Total": return GetInterfaceTypeOfCart_Total();
                    case "ShippingSameAsBilling": return GetInterfaceTypeOfCart_ShippingSameAsBilling();
                    case "BillingContactID": return GetInterfaceTypeOfCart_BillingContactID();
                    case "BillingContact": return GetInterfaceTypeOfCart_BillingContact();
                    case "ShippingContactID": return GetInterfaceTypeOfCart_ShippingContactID();
                    case "ShippingContact": return GetInterfaceTypeOfCart_ShippingContact();
                    case "StatusID": return GetInterfaceTypeOfCart_StatusID();
                    case "Status": return GetInterfaceTypeOfCart_Status();
                    case "StateID": return GetInterfaceTypeOfCart_StateID();
                    case "State": return GetInterfaceTypeOfCart_State();
                    case "TypeID": return GetInterfaceTypeOfCart_TypeID();
                    case "Type": return GetInterfaceTypeOfCart_Type();
                    case "UserID": return GetInterfaceTypeOfCart_UserID();
                    case "User": return GetInterfaceTypeOfCart_User();
                    case "AccountID": return GetInterfaceTypeOfCart_AccountID();
                    case "Account": return GetInterfaceTypeOfCart_Account();
                    case "SalesItems": return GetInterfaceTypeOfCart_SalesItems();
                    case "Discounts": return GetInterfaceTypeOfCart_Discounts();
                    case "StoredFiles": return GetInterfaceTypeOfCart_StoredFiles();
                    case "Contacts": return GetInterfaceTypeOfCart_Contacts();
                    case "RateQuotes": return GetInterfaceTypeOfCart_RateQuotes();
                    case "Notes": return GetInterfaceTypeOfCart_Notes();
                    case "StoreID": return GetInterfaceTypeOfCart_StoreID();
                    case "Store": return GetInterfaceTypeOfCart_Store();
                    case "BrandID": return GetInterfaceTypeOfCart_BrandID();
                    case "Brand": return GetInterfaceTypeOfCart_Brand();
                    case "SessionID": return GetInterfaceTypeOfCart_SessionID();
                    case "SubtotalShippingModifier": return GetInterfaceTypeOfCart_SubtotalShippingModifier();
                    case "SubtotalShippingModifierMode": return GetInterfaceTypeOfCart_SubtotalShippingModifierMode();
                    case "SubtotalTaxesModifier": return GetInterfaceTypeOfCart_SubtotalTaxesModifier();
                    case "SubtotalTaxesModifierMode": return GetInterfaceTypeOfCart_SubtotalTaxesModifierMode();
                    case "SubtotalFeesModifier": return GetInterfaceTypeOfCart_SubtotalFeesModifier();
                    case "SubtotalFeesModifierMode": return GetInterfaceTypeOfCart_SubtotalFeesModifierMode();
                    case "SubtotalHandlingModifier": return GetInterfaceTypeOfCart_SubtotalHandlingModifier();
                    case "SubtotalHandlingModifierMode": return GetInterfaceTypeOfCart_SubtotalHandlingModifierMode();
                    case "SubtotalDiscountsModifier": return GetInterfaceTypeOfCart_SubtotalDiscountsModifier();
                    case "SubtotalDiscountsModifierMode": return GetInterfaceTypeOfCart_SubtotalDiscountsModifierMode();
                    case "RequestedShipDate": return GetInterfaceTypeOfCart_RequestedShipDate();
                    case "ShipmentID": return GetInterfaceTypeOfCart_ShipmentID();
                    case "Shipment": return GetInterfaceTypeOfCart_Shipment();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCartContact_MasterID();
                    case "Master": return GetInterfaceTypeOfCartContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfCartContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCartContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCartFile_MasterID();
                    case "SlaveID": return GetInterfaceTypeOfCartFile_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCartFile_Slave();
                    case "FileAccessTypeID": return GetInterfaceTypeOfCartFile_FileAccessTypeID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetInterfaceTypeOfCartItem_Sku();
                    case "UnitOfMeasure": return GetInterfaceTypeOfCartItem_UnitOfMeasure();
                    case "ForceUniqueLineItemKey": return GetInterfaceTypeOfCartItem_ForceUniqueLineItemKey();
                    case "Quantity": return GetInterfaceTypeOfCartItem_Quantity();
                    case "QuantityBackOrdered": return GetInterfaceTypeOfCartItem_QuantityBackOrdered();
                    case "QuantityPreSold": return GetInterfaceTypeOfCartItem_QuantityPreSold();
                    case "TotalQuantity": return GetInterfaceTypeOfCartItem_TotalQuantity();
                    case "UnitCorePrice": return GetInterfaceTypeOfCartItem_UnitCorePrice();
                    case "UnitSoldPrice": return GetInterfaceTypeOfCartItem_UnitSoldPrice();
                    case "UnitCorePriceInSellingCurrency": return GetInterfaceTypeOfCartItem_UnitCorePriceInSellingCurrency();
                    case "UnitSoldPriceInSellingCurrency": return GetInterfaceTypeOfCartItem_UnitSoldPriceInSellingCurrency();
                    case "MasterID": return GetInterfaceTypeOfCartItem_MasterID();
                    case "ProductID": return GetInterfaceTypeOfCartItem_ProductID();
                    case "UserID": return GetInterfaceTypeOfCartItem_UserID();
                    case "User": return GetInterfaceTypeOfCartItem_User();
                    case "OriginalCurrencyID": return GetInterfaceTypeOfCartItem_OriginalCurrencyID();
                    case "OriginalCurrency": return GetInterfaceTypeOfCartItem_OriginalCurrency();
                    case "SellingCurrencyID": return GetInterfaceTypeOfCartItem_SellingCurrencyID();
                    case "SellingCurrency": return GetInterfaceTypeOfCartItem_SellingCurrency();
                    case "Discounts": return GetInterfaceTypeOfCartItem_Discounts();
                    case "Targets": return GetInterfaceTypeOfCartItem_Targets();
                    case "Notes": return GetInterfaceTypeOfCartItem_Notes();
                    case "UnitSoldPriceModifier": return GetInterfaceTypeOfCartItem_UnitSoldPriceModifier();
                    case "UnitSoldPriceModifierMode": return GetInterfaceTypeOfCartItem_UnitSoldPriceModifierMode();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetInterfaceTypeOfCartItemTarget_Quantity();
                    case "NothingToShip": return GetInterfaceTypeOfCartItemTarget_NothingToShip();
                    case "MasterID": return GetInterfaceTypeOfCartItemTarget_MasterID();
                    case "TypeID": return GetInterfaceTypeOfCartItemTarget_TypeID();
                    case "Type": return GetInterfaceTypeOfCartItemTarget_Type();
                    case "DestinationContactID": return GetInterfaceTypeOfCartItemTarget_DestinationContactID();
                    case "DestinationContact": return GetInterfaceTypeOfCartItemTarget_DestinationContact();
                    case "OriginProductInventoryLocationSectionID": return GetInterfaceTypeOfCartItemTarget_OriginProductInventoryLocationSectionID();
                    case "OriginProductInventoryLocationSection": return GetInterfaceTypeOfCartItemTarget_OriginProductInventoryLocationSection();
                    case "OriginStoreProductID": return GetInterfaceTypeOfCartItemTarget_OriginStoreProductID();
                    case "OriginStoreProduct": return GetInterfaceTypeOfCartItemTarget_OriginStoreProduct();
                    case "BrandProductID": return GetInterfaceTypeOfCartItemTarget_BrandProductID();
                    case "BrandProduct": return GetInterfaceTypeOfCartItemTarget_BrandProduct();
                    case "OriginVendorProductID": return GetInterfaceTypeOfCartItemTarget_OriginVendorProductID();
                    case "OriginVendorProduct": return GetInterfaceTypeOfCartItemTarget_OriginVendorProduct();
                    case "SelectedRateQuoteID": return GetInterfaceTypeOfCartItemTarget_SelectedRateQuoteID();
                    case "SelectedRateQuote": return GetInterfaceTypeOfCartItemTarget_SelectedRateQuote();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCartState_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCartStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartTypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfCartType_StoreID();
                    case "Store": return GetInterfaceTypeOfCartType_Store();
                    case "BrandID": return GetInterfaceTypeOfCartType_BrandID();
                    case "Brand": return GetInterfaceTypeOfCartType_Brand();
                    case "CreatedByUserID": return GetInterfaceTypeOfCartType_CreatedByUserID();
                    case "CreatedByUser": return GetInterfaceTypeOfCartType_CreatedByUser();
                    case "TranslationKey": return GetInterfaceTypeOfCartType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Stores
            if (type.GetInterfaces().Any(x => x == typeof(ISiteDomainModel)))
            {
                switch (property)
                {
                    case "Brands": return GetInterfaceTypeOfSiteDomain_Brands();
                    case "HeaderContent": return GetInterfaceTypeOfSiteDomain_HeaderContent();
                    case "FooterContent": return GetInterfaceTypeOfSiteDomain_FooterContent();
                    case "SideBarContent": return GetInterfaceTypeOfSiteDomain_SideBarContent();
                    case "CatalogContent": return GetInterfaceTypeOfSiteDomain_CatalogContent();
                    case "Url": return GetInterfaceTypeOfSiteDomain_Url();
                    case "AlternateUrl1": return GetInterfaceTypeOfSiteDomain_AlternateUrl1();
                    case "AlternateUrl2": return GetInterfaceTypeOfSiteDomain_AlternateUrl2();
                    case "AlternateUrl3": return GetInterfaceTypeOfSiteDomain_AlternateUrl3();
                    case "SiteDomainSocialProviders": return GetInterfaceTypeOfSiteDomain_SiteDomainSocialProviders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISiteDomainSocialProviderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfSiteDomainSocialProvider_MasterID();
                    case "Master": return GetInterfaceTypeOfSiteDomainSocialProvider_Master();
                    case "SlaveID": return GetInterfaceTypeOfSiteDomainSocialProvider_SlaveID();
                    case "Slave": return GetInterfaceTypeOfSiteDomainSocialProvider_Slave();
                    case "Script": return GetInterfaceTypeOfSiteDomainSocialProvider_Script();
                    case "UrlValues": return GetInterfaceTypeOfSiteDomainSocialProvider_UrlValues();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISocialProviderModel)))
            {
                switch (property)
                {
                    case "Url": return GetInterfaceTypeOfSocialProvider_Url();
                    case "UrlFormat": return GetInterfaceTypeOfSocialProvider_UrlFormat();
                    case "SiteDomainSocialProviders": return GetInterfaceTypeOfSocialProvider_SiteDomainSocialProviders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfStore_TypeID();
                    case "Type": return GetInterfaceTypeOfStore_Type();
                    case "ContactID": return GetInterfaceTypeOfStore_ContactID();
                    case "Contact": return GetInterfaceTypeOfStore_Contact();
                    case "Notes": return GetInterfaceTypeOfStore_Notes();
                    case "Images": return GetInterfaceTypeOfStore_Images();
                    case "Reviews": return GetInterfaceTypeOfStore_Reviews();
                    case "MinimumOrderDollarAmount": return GetInterfaceTypeOfStore_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetInterfaceTypeOfStore_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetInterfaceTypeOfStore_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetInterfaceTypeOfStore_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetInterfaceTypeOfStore_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Accounts": return GetInterfaceTypeOfStore_Accounts();
                    case "Users": return GetInterfaceTypeOfStore_Users();
                    case "Vendors": return GetInterfaceTypeOfStore_Vendors();
                    case "Brands": return GetInterfaceTypeOfStore_Brands();
                    case "Manufacturers": return GetInterfaceTypeOfStore_Manufacturers();
                    case "Slogan": return GetInterfaceTypeOfStore_Slogan();
                    case "MissionStatement": return GetInterfaceTypeOfStore_MissionStatement();
                    case "About": return GetInterfaceTypeOfStore_About();
                    case "Overview": return GetInterfaceTypeOfStore_Overview();
                    case "ExternalUrl": return GetInterfaceTypeOfStore_ExternalUrl();
                    case "OperatingHoursTimeZoneId": return GetInterfaceTypeOfStore_OperatingHoursTimeZoneId();
                    case "OperatingHoursMondayStart": return GetInterfaceTypeOfStore_OperatingHoursMondayStart();
                    case "OperatingHoursMondayEnd": return GetInterfaceTypeOfStore_OperatingHoursMondayEnd();
                    case "OperatingHoursTuesdayStart": return GetInterfaceTypeOfStore_OperatingHoursTuesdayStart();
                    case "OperatingHoursTuesdayEnd": return GetInterfaceTypeOfStore_OperatingHoursTuesdayEnd();
                    case "OperatingHoursWednesdayStart": return GetInterfaceTypeOfStore_OperatingHoursWednesdayStart();
                    case "OperatingHoursWednesdayEnd": return GetInterfaceTypeOfStore_OperatingHoursWednesdayEnd();
                    case "OperatingHoursThursdayStart": return GetInterfaceTypeOfStore_OperatingHoursThursdayStart();
                    case "OperatingHoursThursdayEnd": return GetInterfaceTypeOfStore_OperatingHoursThursdayEnd();
                    case "OperatingHoursFridayStart": return GetInterfaceTypeOfStore_OperatingHoursFridayStart();
                    case "OperatingHoursFridayEnd": return GetInterfaceTypeOfStore_OperatingHoursFridayEnd();
                    case "OperatingHoursSaturdayStart": return GetInterfaceTypeOfStore_OperatingHoursSaturdayStart();
                    case "OperatingHoursSaturdayEnd": return GetInterfaceTypeOfStore_OperatingHoursSaturdayEnd();
                    case "OperatingHoursSundayStart": return GetInterfaceTypeOfStore_OperatingHoursSundayStart();
                    case "OperatingHoursSundayEnd": return GetInterfaceTypeOfStore_OperatingHoursSundayEnd();
                    case "OperatingHoursClosedStatement": return GetInterfaceTypeOfStore_OperatingHoursClosedStatement();
                    case "LanguageID": return GetInterfaceTypeOfStore_LanguageID();
                    case "Language": return GetInterfaceTypeOfStore_Language();
                    case "StoreBadges": return GetInterfaceTypeOfStore_StoreBadges();
                    case "StoreContacts": return GetInterfaceTypeOfStore_StoreContacts();
                    case "StoreInventoryLocations": return GetInterfaceTypeOfStore_StoreInventoryLocations();
                    case "StoreSubscriptions": return GetInterfaceTypeOfStore_StoreSubscriptions();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreAccount_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreAccount_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreAccount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreAccount_Slave();
                    case "HasAccessToStore": return GetInterfaceTypeOfStoreAccount_HasAccessToStore();
                    case "PricePointID": return GetInterfaceTypeOfStoreAccount_PricePointID();
                    case "PricePoint": return GetInterfaceTypeOfStoreAccount_PricePoint();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreBadgeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreBadge_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreBadge_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreBadge_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreBadge_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreContact_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreContact_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreContact_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreContact_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfStoreImage_TypeID();
                    case "Type": return GetInterfaceTypeOfStoreImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfStoreImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfStoreImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfStoreImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfStoreImage_Copyright();
                    case "Location": return GetInterfaceTypeOfStoreImage_Location();
                    case "Latitude": return GetInterfaceTypeOfStoreImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfStoreImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfStoreImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfStoreImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfStoreImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfStoreImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfStoreImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfStoreImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfStoreImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfStoreImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfStoreImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfStoreImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfStoreImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfStoreImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfStoreImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfStoreImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreInventoryLocationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreInventoryLocation_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreInventoryLocation_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreInventoryLocation_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreInventoryLocation_Slave();
                    case "TypeID": return GetInterfaceTypeOfStoreInventoryLocation_TypeID();
                    case "Type": return GetInterfaceTypeOfStoreInventoryLocation_Type();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfStoreInventoryLocationType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreManufacturer_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreManufacturer_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreManufacturer_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreProduct_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreProduct_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreProduct_Slave();
                    case "IsVisibleInStore": return GetInterfaceTypeOfStoreProduct_IsVisibleInStore();
                    case "PriceBase": return GetInterfaceTypeOfStoreProduct_PriceBase();
                    case "PriceMsrp": return GetInterfaceTypeOfStoreProduct_PriceMsrp();
                    case "PriceReduction": return GetInterfaceTypeOfStoreProduct_PriceReduction();
                    case "PriceSale": return GetInterfaceTypeOfStoreProduct_PriceSale();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreSubscriptionModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreSubscription_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreSubscription_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreSubscription_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreSubscription_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfStoreType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreUser_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreUser_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreUser_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreUser_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfStoreVendor_MasterID();
                    case "Master": return GetInterfaceTypeOfStoreVendor_Master();
                    case "SlaveID": return GetInterfaceTypeOfStoreVendor_SlaveID();
                    case "Slave": return GetInterfaceTypeOfStoreVendor_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region System
            if (type.GetInterfaces().Any(x => x == typeof(IImportExportMappingModel)))
            {
                switch (property)
                {
                    case "MappingJson": return GetInterfaceTypeOfImportExportMapping_MappingJson();
                    case "MappingJsonHash": return GetInterfaceTypeOfImportExportMapping_MappingJsonHash();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(INoteModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfNote_TypeID();
                    case "Type": return GetInterfaceTypeOfNote_Type();
                    case "Note1": return GetInterfaceTypeOfNote_Note1();
                    case "CreatedByUserID": return GetInterfaceTypeOfNote_CreatedByUserID();
                    case "CreatedByUser": return GetInterfaceTypeOfNote_CreatedByUser();
                    case "UpdatedByUserID": return GetInterfaceTypeOfNote_UpdatedByUserID();
                    case "UpdatedByUser": return GetInterfaceTypeOfNote_UpdatedByUser();
                    case "AccountID": return GetInterfaceTypeOfNote_AccountID();
                    case "UserID": return GetInterfaceTypeOfNote_UserID();
                    case "VendorID": return GetInterfaceTypeOfNote_VendorID();
                    case "ManufacturerID": return GetInterfaceTypeOfNote_ManufacturerID();
                    case "BrandID": return GetInterfaceTypeOfNote_BrandID();
                    case "StoreID": return GetInterfaceTypeOfNote_StoreID();
                    case "SalesGroupID": return GetInterfaceTypeOfNote_SalesGroupID();
                    case "PurchaseOrderID": return GetInterfaceTypeOfNote_PurchaseOrderID();
                    case "SalesOrderID": return GetInterfaceTypeOfNote_SalesOrderID();
                    case "SalesInvoiceID": return GetInterfaceTypeOfNote_SalesInvoiceID();
                    case "SalesQuoteID": return GetInterfaceTypeOfNote_SalesQuoteID();
                    case "SampleRequestID": return GetInterfaceTypeOfNote_SampleRequestID();
                    case "SalesReturnID": return GetInterfaceTypeOfNote_SalesReturnID();
                    case "CartID": return GetInterfaceTypeOfNote_CartID();
                    case "PurchaseOrderItemID": return GetInterfaceTypeOfNote_PurchaseOrderItemID();
                    case "SalesOrderItemID": return GetInterfaceTypeOfNote_SalesOrderItemID();
                    case "SalesInvoiceItemID": return GetInterfaceTypeOfNote_SalesInvoiceItemID();
                    case "SalesQuoteItemID": return GetInterfaceTypeOfNote_SalesQuoteItemID();
                    case "SampleRequestItemID": return GetInterfaceTypeOfNote_SampleRequestItemID();
                    case "SalesReturnItemID": return GetInterfaceTypeOfNote_SalesReturnItemID();
                    case "CartItemID": return GetInterfaceTypeOfNote_CartItemID();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(INoteTypeModel)))
            {
                switch (property)
                {
                    case "IsPublic": return GetInterfaceTypeOfNoteType_IsPublic();
                    case "IsCustomer": return GetInterfaceTypeOfNoteType_IsCustomer();
                    case "TranslationKey": return GetInterfaceTypeOfNoteType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRecordVersionModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfRecordVersion_StoreID();
                    case "Store": return GetInterfaceTypeOfRecordVersion_Store();
                    case "BrandID": return GetInterfaceTypeOfRecordVersion_BrandID();
                    case "Brand": return GetInterfaceTypeOfRecordVersion_Brand();
                    case "TypeID": return GetInterfaceTypeOfRecordVersion_TypeID();
                    case "Type": return GetInterfaceTypeOfRecordVersion_Type();
                    case "RecordID": return GetInterfaceTypeOfRecordVersion_RecordID();
                    case "OriginalPublishDate": return GetInterfaceTypeOfRecordVersion_OriginalPublishDate();
                    case "MostRecentPublishDate": return GetInterfaceTypeOfRecordVersion_MostRecentPublishDate();
                    case "IsDraft": return GetInterfaceTypeOfRecordVersion_IsDraft();
                    case "SerializedRecord": return GetInterfaceTypeOfRecordVersion_SerializedRecord();
                    case "PublishedByUserID": return GetInterfaceTypeOfRecordVersion_PublishedByUserID();
                    case "PublishedByUser": return GetInterfaceTypeOfRecordVersion_PublishedByUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfRecordVersionType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISettingModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfSetting_TypeID();
                    case "Type": return GetInterfaceTypeOfSetting_Type();
                    case "StoreID": return GetInterfaceTypeOfSetting_StoreID();
                    case "Store": return GetInterfaceTypeOfSetting_Store();
                    case "BrandID": return GetInterfaceTypeOfSetting_BrandID();
                    case "Brand": return GetInterfaceTypeOfSetting_Brand();
                    case "Value": return GetInterfaceTypeOfSetting_Value();
                    case "SettingGroupID": return GetInterfaceTypeOfSetting_SettingGroupID();
                    case "SettingGroup": return GetInterfaceTypeOfSetting_SettingGroup();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISettingGroupModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSettingGroup_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfSettingType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEventLogModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfEventLog_StoreID();
                    case "Store": return GetInterfaceTypeOfEventLog_Store();
                    case "BrandID": return GetInterfaceTypeOfEventLog_BrandID();
                    case "Brand": return GetInterfaceTypeOfEventLog_Brand();
                    case "DataID": return GetInterfaceTypeOfEventLog_DataID();
                    case "LogLevel": return GetInterfaceTypeOfEventLog_LogLevel();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Tax
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalTaxRateModel)))
            {
                switch (property)
                {
                    case "Provider": return GetInterfaceTypeOfHistoricalTaxRate_Provider();
                    case "CartHash": return GetInterfaceTypeOfHistoricalTaxRate_CartHash();
                    case "OnDate": return GetInterfaceTypeOfHistoricalTaxRate_OnDate();
                    case "CountryLevelRate": return GetInterfaceTypeOfHistoricalTaxRate_CountryLevelRate();
                    case "RegionLevelRate": return GetInterfaceTypeOfHistoricalTaxRate_RegionLevelRate();
                    case "CountyLevelRate": return GetInterfaceTypeOfHistoricalTaxRate_CountyLevelRate();
                    case "TotalAmount": return GetInterfaceTypeOfHistoricalTaxRate_TotalAmount();
                    case "TotalTaxable": return GetInterfaceTypeOfHistoricalTaxRate_TotalTaxable();
                    case "TotalTax": return GetInterfaceTypeOfHistoricalTaxRate_TotalTax();
                    case "TotalTaxCalculated": return GetInterfaceTypeOfHistoricalTaxRate_TotalTaxCalculated();
                    case "Rate": return GetInterfaceTypeOfHistoricalTaxRate_Rate();
                    case "SerializedRequest": return GetInterfaceTypeOfHistoricalTaxRate_SerializedRequest();
                    case "SerializedResponse": return GetInterfaceTypeOfHistoricalTaxRate_SerializedResponse();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITaxCountryModel)))
            {
                switch (property)
                {
                    case "Rate": return GetInterfaceTypeOfTaxCountry_Rate();
                    case "CountryID": return GetInterfaceTypeOfTaxCountry_CountryID();
                    case "Country": return GetInterfaceTypeOfTaxCountry_Country();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITaxRegionModel)))
            {
                switch (property)
                {
                    case "Rate": return GetInterfaceTypeOfTaxRegion_Rate();
                    case "RegionID": return GetInterfaceTypeOfTaxRegion_RegionID();
                    case "Region": return GetInterfaceTypeOfTaxRegion_Region();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Tracking
            if (type.GetInterfaces().Any(x => x == typeof(ICampaignModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfCampaign_TypeID();
                    case "Type": return GetInterfaceTypeOfCampaign_Type();
                    case "StatusID": return GetInterfaceTypeOfCampaign_StatusID();
                    case "Status": return GetInterfaceTypeOfCampaign_Status();
                    case "ProposedStart": return GetInterfaceTypeOfCampaign_ProposedStart();
                    case "ProposedEnd": return GetInterfaceTypeOfCampaign_ProposedEnd();
                    case "ActualStart": return GetInterfaceTypeOfCampaign_ActualStart();
                    case "ActualEnd": return GetInterfaceTypeOfCampaign_ActualEnd();
                    case "BudgetedCost": return GetInterfaceTypeOfCampaign_BudgetedCost();
                    case "OtherCost": return GetInterfaceTypeOfCampaign_OtherCost();
                    case "ExpectedRevenue": return GetInterfaceTypeOfCampaign_ExpectedRevenue();
                    case "TotalActualCost": return GetInterfaceTypeOfCampaign_TotalActualCost();
                    case "TotalCampaignActivityActualCost": return GetInterfaceTypeOfCampaign_TotalCampaignActivityActualCost();
                    case "ExchangeRate": return GetInterfaceTypeOfCampaign_ExchangeRate();
                    case "CodeName": return GetInterfaceTypeOfCampaign_CodeName();
                    case "PromotionCodeName": return GetInterfaceTypeOfCampaign_PromotionCodeName();
                    case "Message": return GetInterfaceTypeOfCampaign_Message();
                    case "Objective": return GetInterfaceTypeOfCampaign_Objective();
                    case "ExpectedResponse": return GetInterfaceTypeOfCampaign_ExpectedResponse();
                    case "UTCConversionTimeZoneCode": return GetInterfaceTypeOfCampaign_UTCConversionTimeZoneCode();
                    case "IsTemplate": return GetInterfaceTypeOfCampaign_IsTemplate();
                    case "CreatedByUserID": return GetInterfaceTypeOfCampaign_CreatedByUserID();
                    case "CreatedByUser": return GetInterfaceTypeOfCampaign_CreatedByUser();
                    case "CampaignAds": return GetInterfaceTypeOfCampaign_CampaignAds();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICampaignAdModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfCampaignAd_MasterID();
                    case "Master": return GetInterfaceTypeOfCampaignAd_Master();
                    case "SlaveID": return GetInterfaceTypeOfCampaignAd_SlaveID();
                    case "Slave": return GetInterfaceTypeOfCampaignAd_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfCampaignStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetInterfaceTypeOfCampaignType_StoreID();
                    case "Store": return GetInterfaceTypeOfCampaignType_Store();
                    case "BrandID": return GetInterfaceTypeOfCampaignType_BrandID();
                    case "Brand": return GetInterfaceTypeOfCampaignType_Brand();
                    case "TranslationKey": return GetInterfaceTypeOfCampaignType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEventModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfEvent_TypeID();
                    case "Type": return GetInterfaceTypeOfEvent_Type();
                    case "StatusID": return GetInterfaceTypeOfEvent_StatusID();
                    case "Status": return GetInterfaceTypeOfEvent_Status();
                    case "IPAddress": return GetInterfaceTypeOfEvent_IPAddress();
                    case "Score": return GetInterfaceTypeOfEvent_Score();
                    case "AddressID": return GetInterfaceTypeOfEvent_AddressID();
                    case "Address": return GetInterfaceTypeOfEvent_Address();
                    case "IPOrganizationID": return GetInterfaceTypeOfEvent_IPOrganizationID();
                    case "IPOrganization": return GetInterfaceTypeOfEvent_IPOrganization();
                    case "UserID": return GetInterfaceTypeOfEvent_UserID();
                    case "User": return GetInterfaceTypeOfEvent_User();
                    case "DidBounce": return GetInterfaceTypeOfEvent_DidBounce();
                    case "OperatingSystem": return GetInterfaceTypeOfEvent_OperatingSystem();
                    case "Browser": return GetInterfaceTypeOfEvent_Browser();
                    case "Language": return GetInterfaceTypeOfEvent_Language();
                    case "ContainsSocialProfile": return GetInterfaceTypeOfEvent_ContainsSocialProfile();
                    case "Delta": return GetInterfaceTypeOfEvent_Delta();
                    case "Duration": return GetInterfaceTypeOfEvent_Duration();
                    case "StartedOn": return GetInterfaceTypeOfEvent_StartedOn();
                    case "EndedOn": return GetInterfaceTypeOfEvent_EndedOn();
                    case "Time": return GetInterfaceTypeOfEvent_Time();
                    case "EntryPage": return GetInterfaceTypeOfEvent_EntryPage();
                    case "ExitPage": return GetInterfaceTypeOfEvent_ExitPage();
                    case "IsFirstTrigger": return GetInterfaceTypeOfEvent_IsFirstTrigger();
                    case "Flash": return GetInterfaceTypeOfEvent_Flash();
                    case "Keywords": return GetInterfaceTypeOfEvent_Keywords();
                    case "PartitionKey": return GetInterfaceTypeOfEvent_PartitionKey();
                    case "Referrer": return GetInterfaceTypeOfEvent_Referrer();
                    case "ReferringHost": return GetInterfaceTypeOfEvent_ReferringHost();
                    case "RowKey": return GetInterfaceTypeOfEvent_RowKey();
                    case "Source": return GetInterfaceTypeOfEvent_Source();
                    case "TotalTriggers": return GetInterfaceTypeOfEvent_TotalTriggers();
                    case "CampaignID": return GetInterfaceTypeOfEvent_CampaignID();
                    case "Campaign": return GetInterfaceTypeOfEvent_Campaign();
                    case "ContactID": return GetInterfaceTypeOfEvent_ContactID();
                    case "Contact": return GetInterfaceTypeOfEvent_Contact();
                    case "SiteDomainID": return GetInterfaceTypeOfEvent_SiteDomainID();
                    case "SiteDomain": return GetInterfaceTypeOfEvent_SiteDomain();
                    case "VisitorID": return GetInterfaceTypeOfEvent_VisitorID();
                    case "Visitor": return GetInterfaceTypeOfEvent_Visitor();
                    case "VisitID": return GetInterfaceTypeOfEvent_VisitID();
                    case "Visit": return GetInterfaceTypeOfEvent_Visit();
                    case "PageViewEvents": return GetInterfaceTypeOfEvent_PageViewEvents();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfEventStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfEventType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IIPOrganizationModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetInterfaceTypeOfIPOrganization_StatusID();
                    case "Status": return GetInterfaceTypeOfIPOrganization_Status();
                    case "IPAddress": return GetInterfaceTypeOfIPOrganization_IPAddress();
                    case "Score": return GetInterfaceTypeOfIPOrganization_Score();
                    case "VisitorKey": return GetInterfaceTypeOfIPOrganization_VisitorKey();
                    case "AddressID": return GetInterfaceTypeOfIPOrganization_AddressID();
                    case "Address": return GetInterfaceTypeOfIPOrganization_Address();
                    case "PrimaryUserID": return GetInterfaceTypeOfIPOrganization_PrimaryUserID();
                    case "PrimaryUser": return GetInterfaceTypeOfIPOrganization_PrimaryUser();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfIPOrganizationStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPageViewModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfPageView_TypeID();
                    case "Type": return GetInterfaceTypeOfPageView_Type();
                    case "StatusID": return GetInterfaceTypeOfPageView_StatusID();
                    case "Status": return GetInterfaceTypeOfPageView_Status();
                    case "IPAddress": return GetInterfaceTypeOfPageView_IPAddress();
                    case "Score": return GetInterfaceTypeOfPageView_Score();
                    case "AddressID": return GetInterfaceTypeOfPageView_AddressID();
                    case "Address": return GetInterfaceTypeOfPageView_Address();
                    case "IPOrganizationID": return GetInterfaceTypeOfPageView_IPOrganizationID();
                    case "IPOrganization": return GetInterfaceTypeOfPageView_IPOrganization();
                    case "UserID": return GetInterfaceTypeOfPageView_UserID();
                    case "User": return GetInterfaceTypeOfPageView_User();
                    case "DidBounce": return GetInterfaceTypeOfPageView_DidBounce();
                    case "OperatingSystem": return GetInterfaceTypeOfPageView_OperatingSystem();
                    case "Browser": return GetInterfaceTypeOfPageView_Browser();
                    case "Language": return GetInterfaceTypeOfPageView_Language();
                    case "ContainsSocialProfile": return GetInterfaceTypeOfPageView_ContainsSocialProfile();
                    case "Delta": return GetInterfaceTypeOfPageView_Delta();
                    case "Duration": return GetInterfaceTypeOfPageView_Duration();
                    case "StartedOn": return GetInterfaceTypeOfPageView_StartedOn();
                    case "EndedOn": return GetInterfaceTypeOfPageView_EndedOn();
                    case "Time": return GetInterfaceTypeOfPageView_Time();
                    case "EntryPage": return GetInterfaceTypeOfPageView_EntryPage();
                    case "ExitPage": return GetInterfaceTypeOfPageView_ExitPage();
                    case "IsFirstTrigger": return GetInterfaceTypeOfPageView_IsFirstTrigger();
                    case "Flash": return GetInterfaceTypeOfPageView_Flash();
                    case "Keywords": return GetInterfaceTypeOfPageView_Keywords();
                    case "PartitionKey": return GetInterfaceTypeOfPageView_PartitionKey();
                    case "Referrer": return GetInterfaceTypeOfPageView_Referrer();
                    case "ReferringHost": return GetInterfaceTypeOfPageView_ReferringHost();
                    case "RowKey": return GetInterfaceTypeOfPageView_RowKey();
                    case "Source": return GetInterfaceTypeOfPageView_Source();
                    case "TotalTriggers": return GetInterfaceTypeOfPageView_TotalTriggers();
                    case "CampaignID": return GetInterfaceTypeOfPageView_CampaignID();
                    case "Campaign": return GetInterfaceTypeOfPageView_Campaign();
                    case "ContactID": return GetInterfaceTypeOfPageView_ContactID();
                    case "Contact": return GetInterfaceTypeOfPageView_Contact();
                    case "SiteDomainID": return GetInterfaceTypeOfPageView_SiteDomainID();
                    case "SiteDomain": return GetInterfaceTypeOfPageView_SiteDomain();
                    case "VisitorID": return GetInterfaceTypeOfPageView_VisitorID();
                    case "Visitor": return GetInterfaceTypeOfPageView_Visitor();
                    case "Title": return GetInterfaceTypeOfPageView_Title();
                    case "URI": return GetInterfaceTypeOfPageView_URI();
                    case "ViewedOn": return GetInterfaceTypeOfPageView_ViewedOn();
                    case "VisitKey": return GetInterfaceTypeOfPageView_VisitKey();
                    case "CategoryID": return GetInterfaceTypeOfPageView_CategoryID();
                    case "Category": return GetInterfaceTypeOfPageView_Category();
                    case "ProductID": return GetInterfaceTypeOfPageView_ProductID();
                    case "Product": return GetInterfaceTypeOfPageView_Product();
                    case "PageViewEvents": return GetInterfaceTypeOfPageView_PageViewEvents();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPageViewEventModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfPageViewEvent_MasterID();
                    case "Master": return GetInterfaceTypeOfPageViewEvent_Master();
                    case "SlaveID": return GetInterfaceTypeOfPageViewEvent_SlaveID();
                    case "Slave": return GetInterfaceTypeOfPageViewEvent_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPageViewStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfPageViewType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVisitModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetInterfaceTypeOfVisit_StatusID();
                    case "Status": return GetInterfaceTypeOfVisit_Status();
                    case "IPAddress": return GetInterfaceTypeOfVisit_IPAddress();
                    case "Score": return GetInterfaceTypeOfVisit_Score();
                    case "AddressID": return GetInterfaceTypeOfVisit_AddressID();
                    case "Address": return GetInterfaceTypeOfVisit_Address();
                    case "IPOrganizationID": return GetInterfaceTypeOfVisit_IPOrganizationID();
                    case "IPOrganization": return GetInterfaceTypeOfVisit_IPOrganization();
                    case "UserID": return GetInterfaceTypeOfVisit_UserID();
                    case "User": return GetInterfaceTypeOfVisit_User();
                    case "DidBounce": return GetInterfaceTypeOfVisit_DidBounce();
                    case "OperatingSystem": return GetInterfaceTypeOfVisit_OperatingSystem();
                    case "Browser": return GetInterfaceTypeOfVisit_Browser();
                    case "Language": return GetInterfaceTypeOfVisit_Language();
                    case "ContainsSocialProfile": return GetInterfaceTypeOfVisit_ContainsSocialProfile();
                    case "Delta": return GetInterfaceTypeOfVisit_Delta();
                    case "Duration": return GetInterfaceTypeOfVisit_Duration();
                    case "StartedOn": return GetInterfaceTypeOfVisit_StartedOn();
                    case "EndedOn": return GetInterfaceTypeOfVisit_EndedOn();
                    case "Time": return GetInterfaceTypeOfVisit_Time();
                    case "EntryPage": return GetInterfaceTypeOfVisit_EntryPage();
                    case "ExitPage": return GetInterfaceTypeOfVisit_ExitPage();
                    case "IsFirstTrigger": return GetInterfaceTypeOfVisit_IsFirstTrigger();
                    case "Flash": return GetInterfaceTypeOfVisit_Flash();
                    case "Keywords": return GetInterfaceTypeOfVisit_Keywords();
                    case "PartitionKey": return GetInterfaceTypeOfVisit_PartitionKey();
                    case "Referrer": return GetInterfaceTypeOfVisit_Referrer();
                    case "ReferringHost": return GetInterfaceTypeOfVisit_ReferringHost();
                    case "RowKey": return GetInterfaceTypeOfVisit_RowKey();
                    case "Source": return GetInterfaceTypeOfVisit_Source();
                    case "TotalTriggers": return GetInterfaceTypeOfVisit_TotalTriggers();
                    case "CampaignID": return GetInterfaceTypeOfVisit_CampaignID();
                    case "Campaign": return GetInterfaceTypeOfVisit_Campaign();
                    case "ContactID": return GetInterfaceTypeOfVisit_ContactID();
                    case "Contact": return GetInterfaceTypeOfVisit_Contact();
                    case "SiteDomainID": return GetInterfaceTypeOfVisit_SiteDomainID();
                    case "SiteDomain": return GetInterfaceTypeOfVisit_SiteDomain();
                    case "VisitorID": return GetInterfaceTypeOfVisit_VisitorID();
                    case "Visitor": return GetInterfaceTypeOfVisit_Visitor();
                    case "Events": return GetInterfaceTypeOfVisit_Events();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVisitorModel)))
            {
                switch (property)
                {
                    case "IPAddress": return GetInterfaceTypeOfVisitor_IPAddress();
                    case "Score": return GetInterfaceTypeOfVisitor_Score();
                    case "AddressID": return GetInterfaceTypeOfVisitor_AddressID();
                    case "Address": return GetInterfaceTypeOfVisitor_Address();
                    case "IPOrganizationID": return GetInterfaceTypeOfVisitor_IPOrganizationID();
                    case "IPOrganization": return GetInterfaceTypeOfVisitor_IPOrganization();
                    case "UserID": return GetInterfaceTypeOfVisitor_UserID();
                    case "User": return GetInterfaceTypeOfVisitor_User();
                    case "Visits": return GetInterfaceTypeOfVisitor_Visits();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfVisitStatus_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Vendors
            if (type.GetInterfaces().Any(x => x == typeof(IVendorModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetInterfaceTypeOfVendor_TypeID();
                    case "Type": return GetInterfaceTypeOfVendor_Type();
                    case "ContactID": return GetInterfaceTypeOfVendor_ContactID();
                    case "Contact": return GetInterfaceTypeOfVendor_Contact();
                    case "Notes": return GetInterfaceTypeOfVendor_Notes();
                    case "Images": return GetInterfaceTypeOfVendor_Images();
                    case "MinimumOrderDollarAmount": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmount();
                    case "MinimumOrderDollarAmountAfter": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountAfter();
                    case "MinimumOrderDollarAmountWarningMessage": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFee": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountOverrideFee();
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountOverrideFeeIsPercent();
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountOverrideFeeWarningMessage();
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderQuantityAmount": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmount();
                    case "MinimumOrderQuantityAmountAfter": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountAfter();
                    case "MinimumOrderQuantityAmountWarningMessage": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFee": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountOverrideFee();
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountOverrideFeeIsPercent();
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountOverrideFeeWarningMessage();
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage();
                    case "MinimumOrderDollarAmountBufferProductID": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountBufferProductID();
                    case "MinimumOrderDollarAmountBufferProduct": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountBufferProduct();
                    case "MinimumOrderQuantityAmountBufferProductID": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountBufferProductID();
                    case "MinimumOrderQuantityAmountBufferProduct": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountBufferProduct();
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountBufferCategoryID();
                    case "MinimumOrderDollarAmountBufferCategory": return GetInterfaceTypeOfVendor_MinimumOrderDollarAmountBufferCategory();
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountBufferCategoryID();
                    case "MinimumOrderQuantityAmountBufferCategory": return GetInterfaceTypeOfVendor_MinimumOrderQuantityAmountBufferCategory();
                    case "MinimumForFreeShippingDollarAmount": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmount();
                    case "MinimumForFreeShippingDollarAmountAfter": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmountAfter();
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmountWarningMessage();
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingQuantityAmount": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmount();
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmountAfter();
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmountWarningMessage();
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage();
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmountBufferProductID();
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmountBufferProduct();
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferProductID();
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferProduct();
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmountBufferCategoryID();
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetInterfaceTypeOfVendor_MinimumForFreeShippingDollarAmountBufferCategory();
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferCategoryID();
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetInterfaceTypeOfVendor_MinimumForFreeShippingQuantityAmountBufferCategory();
                    case "Accounts": return GetInterfaceTypeOfVendor_Accounts();
                    case "Products": return GetInterfaceTypeOfVendor_Products();
                    case "Manufacturers": return GetInterfaceTypeOfVendor_Manufacturers();
                    case "Notes1": return GetInterfaceTypeOfVendor_Notes1();
                    case "AccountNumber": return GetInterfaceTypeOfVendor_AccountNumber();
                    case "Terms": return GetInterfaceTypeOfVendor_Terms();
                    case "TermNotes": return GetInterfaceTypeOfVendor_TermNotes();
                    case "SendMethod": return GetInterfaceTypeOfVendor_SendMethod();
                    case "EmailSubject": return GetInterfaceTypeOfVendor_EmailSubject();
                    case "ShipTo": return GetInterfaceTypeOfVendor_ShipTo();
                    case "ShipViaNotes": return GetInterfaceTypeOfVendor_ShipViaNotes();
                    case "SignBy": return GetInterfaceTypeOfVendor_SignBy();
                    case "AllowDropShip": return GetInterfaceTypeOfVendor_AllowDropShip();
                    case "DefaultDiscount": return GetInterfaceTypeOfVendor_DefaultDiscount();
                    case "RecommendedPurchaseOrderDollarAmount": return GetInterfaceTypeOfVendor_RecommendedPurchaseOrderDollarAmount();
                    case "UserName": return GetInterfaceTypeOfVendor_UserName();
                    case "PasswordHash": return GetInterfaceTypeOfVendor_PasswordHash();
                    case "SecurityToken": return GetInterfaceTypeOfVendor_SecurityToken();
                    case "MustResetPassword": return GetInterfaceTypeOfVendor_MustResetPassword();
                    case "Shipments": return GetInterfaceTypeOfVendor_Shipments();
                    case "PurchaseOrders": return GetInterfaceTypeOfVendor_PurchaseOrders();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfVendorAccount_MasterID();
                    case "Master": return GetInterfaceTypeOfVendorAccount_Master();
                    case "SlaveID": return GetInterfaceTypeOfVendorAccount_SlaveID();
                    case "Slave": return GetInterfaceTypeOfVendorAccount_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfVendorImage_MasterID();
                    case "TypeID": return GetInterfaceTypeOfVendorImage_TypeID();
                    case "Type": return GetInterfaceTypeOfVendorImage_Type();
                    case "SeoTitle": return GetInterfaceTypeOfVendorImage_SeoTitle();
                    case "Author": return GetInterfaceTypeOfVendorImage_Author();
                    case "MediaDate": return GetInterfaceTypeOfVendorImage_MediaDate();
                    case "Copyright": return GetInterfaceTypeOfVendorImage_Copyright();
                    case "Location": return GetInterfaceTypeOfVendorImage_Location();
                    case "Latitude": return GetInterfaceTypeOfVendorImage_Latitude();
                    case "Longitude": return GetInterfaceTypeOfVendorImage_Longitude();
                    case "IsPrimary": return GetInterfaceTypeOfVendorImage_IsPrimary();
                    case "OriginalWidth": return GetInterfaceTypeOfVendorImage_OriginalWidth();
                    case "OriginalHeight": return GetInterfaceTypeOfVendorImage_OriginalHeight();
                    case "OriginalFileFormat": return GetInterfaceTypeOfVendorImage_OriginalFileFormat();
                    case "OriginalFileName": return GetInterfaceTypeOfVendorImage_OriginalFileName();
                    case "OriginalIsStoredInDB": return GetInterfaceTypeOfVendorImage_OriginalIsStoredInDB();
                    case "OriginalBytes": return GetInterfaceTypeOfVendorImage_OriginalBytes();
                    case "ThumbnailWidth": return GetInterfaceTypeOfVendorImage_ThumbnailWidth();
                    case "ThumbnailHeight": return GetInterfaceTypeOfVendorImage_ThumbnailHeight();
                    case "ThumbnailFileFormat": return GetInterfaceTypeOfVendorImage_ThumbnailFileFormat();
                    case "ThumbnailFileName": return GetInterfaceTypeOfVendorImage_ThumbnailFileName();
                    case "ThumbnailIsStoredInDB": return GetInterfaceTypeOfVendorImage_ThumbnailIsStoredInDB();
                    case "ThumbnailBytes": return GetInterfaceTypeOfVendorImage_ThumbnailBytes();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfVendorImageType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfVendorManufacturer_MasterID();
                    case "Master": return GetInterfaceTypeOfVendorManufacturer_Master();
                    case "SlaveID": return GetInterfaceTypeOfVendorManufacturer_SlaveID();
                    case "Slave": return GetInterfaceTypeOfVendorManufacturer_Slave();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetInterfaceTypeOfVendorProduct_MasterID();
                    case "Master": return GetInterfaceTypeOfVendorProduct_Master();
                    case "SlaveID": return GetInterfaceTypeOfVendorProduct_SlaveID();
                    case "Slave": return GetInterfaceTypeOfVendorProduct_Slave();
                    case "Bin": return GetInterfaceTypeOfVendorProduct_Bin();
                    case "MinimumInventory": return GetInterfaceTypeOfVendorProduct_MinimumInventory();
                    case "MaximumInventory": return GetInterfaceTypeOfVendorProduct_MaximumInventory();
                    case "InventoryCount": return GetInterfaceTypeOfVendorProduct_InventoryCount();
                    case "CostMultiplier": return GetInterfaceTypeOfVendorProduct_CostMultiplier();
                    case "ListedPrice": return GetInterfaceTypeOfVendorProduct_ListedPrice();
                    case "ActualCost": return GetInterfaceTypeOfVendorProduct_ActualCost();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetInterfaceTypeOfVendorType_TranslationKey();
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            return (Type)typeof(ImportAssigners)
                .GetMethod($"GetTypeOf{type.Name}_{property}")
                .Invoke(null, new object[] { });
        }
    }
}
