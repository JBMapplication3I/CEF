// <autogenerated>
// <copyright file="ImportAssigners.02.GetProperty.cs" company="clarity-ventures.com">
// Copyright (c) 2018-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the import assigners class</summary>
// <summary>Implements the Import Assigners for dynamic mapping</summary>
// <remarks>This file was auto-generated by ImportAssigners.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
// ReSharper disable MemberCanBePrivate.Global, MissingXmlDoc, UnusedMember.Global, UnusedMember.Local
#pragma warning disable 618, 1591
namespace Clarity.Ecommerce.Providers.SalesQuoteImporter
{
    using System;
    using System.Linq;
    using Interfaces.Models;

    public static partial class ImportAssigners
    {
        public static object GetProperty(object @object, string property)
        {
            var type = @object.GetType();
            if (BaseProperties.Contains(property) && @object is IBaseModel asIBase)
            {
                switch (property)
                {
                    case "ID": return asIBase.ID;
                    case "CustomKey": return asIBase.CustomKey;
                    case "CreatedDate": return asIBase.CreatedDate;
                    case "UpdatedDate": return asIBase.UpdatedDate;
                    case "Active": return asIBase.Active;
                    case "Hash": return asIBase.Hash;
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (NameableBaseProperties.Contains(property) && @object is INameableBaseModel asINameableBase)
            {
                switch (property)
                {
                    case "Name": return asINameableBase.Name;
                    case "Description": return asINameableBase.Description;
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (HaveJsonAttributesBaseProperties.Contains(property) && @object is IHaveJsonAttributesBaseModel asIHaveJsonAttributesBase)
            {
                switch (property)
                {
                    case "JsonAttributes": return asIHaveJsonAttributesBase.JsonAttributes;
                    case "SerializableAttributes": return asIHaveJsonAttributesBase.SerializableAttributes;
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (TypableBaseProperties.Contains(property))
            {
                if (@object is ITypeModel asITypeModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return asITypeModel.DisplayName;
                        case "SortOrder": return asITypeModel.SortOrder;
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
                if (@object is IStatusModel asIStatusModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return asIStatusModel.DisplayName;
                        case "SortOrder": return asIStatusModel.SortOrder;
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
                if (@object is IStateModel asIStateModel)
                {
                    switch (property)
                    {
                        case "DisplayName": return asIStateModel.DisplayName;
                        case "SortOrder": return asIStateModel.SortOrder;
                        default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                    }
                }
            }
            if (HaveSeoBaseProperties.Contains(property) && @object is IHaveSeoBaseModel asIHaveSeoBase)
            {
                switch (property)
                {
                    case "SeoKeywords": return asIHaveSeoBase.SeoKeywords;
                    case "SeoUrl": return asIHaveSeoBase.SeoUrl;
                    case "SeoPageTitle": return asIHaveSeoBase.SeoPageTitle;
                    case "SeoDescription": return asIHaveSeoBase.SeoDescription;
                    case "SeoMetaData": return asIHaveSeoBase.SeoMetaData;
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #region Accounts
            if (type.GetInterfaces().Any(x => x == typeof(IAccountModel)))
            {
                switch (property)
                {
                    case "Images": return GetAccount_Images(@object);
                    case "StoredFiles": return GetAccount_StoredFiles(@object);
                    case "Brands": return GetAccount_Brands(@object);
                    case "Stores": return GetAccount_Stores(@object);
                    case "Products": return GetAccount_Products(@object);
                    case "Vendors": return GetAccount_Vendors(@object);
                    case "Users": return GetAccount_Users(@object);
                    case "Notes": return GetAccount_Notes(@object);
                    case "TypeID": return GetAccount_TypeID(@object);
                    case "Type": return GetAccount_Type(@object);
                    case "StatusID": return GetAccount_StatusID(@object);
                    case "Status": return GetAccount_Status(@object);
                    case "IsTaxable": return GetAccount_IsTaxable(@object);
                    case "TaxExemptionNo": return GetAccount_TaxExemptionNo(@object);
                    case "TaxEntityUseCode": return GetAccount_TaxEntityUseCode(@object);
                    case "IsOnHold": return GetAccount_IsOnHold(@object);
                    case "Credit": return GetAccount_Credit(@object);
                    case "Token": return GetAccount_Token(@object);
                    case "SageID": return GetAccount_SageID(@object);
                    case "CreditCurrencyID": return GetAccount_CreditCurrencyID(@object);
                    case "CreditCurrency": return GetAccount_CreditCurrency(@object);
                    case "AccountContacts": return GetAccount_AccountContacts(@object);
                    case "AccountCurrencies": return GetAccount_AccountCurrencies(@object);
                    case "AccountPricePoints": return GetAccount_AccountPricePoints(@object);
                    case "AccountAssociations": return GetAccount_AccountAssociations(@object);
                    case "AccountsAssociatedWith": return GetAccount_AccountsAssociatedWith(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountAssociationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountAssociation_MasterID(@object);
                    case "SlaveID": return GetAccountAssociation_SlaveID(@object);
                    case "Slave": return GetAccountAssociation_Slave(@object);
                    case "TypeID": return GetAccountAssociation_TypeID(@object);
                    case "Type": return GetAccountAssociation_Type(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAccountAssociationType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountContact_MasterID(@object);
                    case "SlaveID": return GetAccountContact_SlaveID(@object);
                    case "Slave": return GetAccountContact_Slave(@object);
                    case "IsPrimary": return GetAccountContact_IsPrimary(@object);
                    case "IsBilling": return GetAccountContact_IsBilling(@object);
                    case "TransmittedToERP": return GetAccountContact_TransmittedToERP(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountCurrency_MasterID(@object);
                    case "SlaveID": return GetAccountCurrency_SlaveID(@object);
                    case "Slave": return GetAccountCurrency_Slave(@object);
                    case "IsPrimary": return GetAccountCurrency_IsPrimary(@object);
                    case "CustomName": return GetAccountCurrency_CustomName(@object);
                    case "CustomTranslationKey": return GetAccountCurrency_CustomTranslationKey(@object);
                    case "OverrideUnicodeSymbolValue": return GetAccountCurrency_OverrideUnicodeSymbolValue(@object);
                    case "OverrideHtmlCharacterCode": return GetAccountCurrency_OverrideHtmlCharacterCode(@object);
                    case "OverrideRawCharacter": return GetAccountCurrency_OverrideRawCharacter(@object);
                    case "OverrideDecimalPlaceAccuracy": return GetAccountCurrency_OverrideDecimalPlaceAccuracy(@object);
                    case "OverrideUseSeparator": return GetAccountCurrency_OverrideUseSeparator(@object);
                    case "OverrideRawDecimalCharacter": return GetAccountCurrency_OverrideRawDecimalCharacter(@object);
                    case "OverrideHtmlDecimalCharacterCode": return GetAccountCurrency_OverrideHtmlDecimalCharacterCode(@object);
                    case "OverrideRawSeparatorCharacter": return GetAccountCurrency_OverrideRawSeparatorCharacter(@object);
                    case "OverrideHtmlSeparatorCharacterCode": return GetAccountCurrency_OverrideHtmlSeparatorCharacterCode(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountFile_MasterID(@object);
                    case "SlaveID": return GetAccountFile_SlaveID(@object);
                    case "Slave": return GetAccountFile_Slave(@object);
                    case "FileAccessTypeID": return GetAccountFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountImage_MasterID(@object);
                    case "TypeID": return GetAccountImage_TypeID(@object);
                    case "Type": return GetAccountImage_Type(@object);
                    case "SeoTitle": return GetAccountImage_SeoTitle(@object);
                    case "Author": return GetAccountImage_Author(@object);
                    case "MediaDate": return GetAccountImage_MediaDate(@object);
                    case "Copyright": return GetAccountImage_Copyright(@object);
                    case "Location": return GetAccountImage_Location(@object);
                    case "Latitude": return GetAccountImage_Latitude(@object);
                    case "Longitude": return GetAccountImage_Longitude(@object);
                    case "IsPrimary": return GetAccountImage_IsPrimary(@object);
                    case "OriginalWidth": return GetAccountImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetAccountImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetAccountImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetAccountImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetAccountImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetAccountImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetAccountImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetAccountImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetAccountImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetAccountImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetAccountImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetAccountImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAccountImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountPricePointModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountPricePoint_MasterID(@object);
                    case "SlaveID": return GetAccountPricePoint_SlaveID(@object);
                    case "Slave": return GetAccountPricePoint_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountProduct_MasterID(@object);
                    case "SlaveID": return GetAccountProduct_SlaveID(@object);
                    case "Slave": return GetAccountProduct_Slave(@object);
                    case "TypeID": return GetAccountProduct_TypeID(@object);
                    case "Type": return GetAccountProduct_Type(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAccountProductType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAccountStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetAccountType_StoreID(@object);
                    case "Store": return GetAccountType_Store(@object);
                    case "TranslationKey": return GetAccountType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAccountUsageBalanceModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAccountUsageBalance_MasterID(@object);
                    case "SlaveID": return GetAccountUsageBalance_SlaveID(@object);
                    case "Slave": return GetAccountUsageBalance_Slave(@object);
                    case "Quantity": return GetAccountUsageBalance_Quantity(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Advertising
            if (type.GetInterfaces().Any(x => x == typeof(IAdModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetAd_TypeID(@object);
                    case "Type": return GetAd_Type(@object);
                    case "StatusID": return GetAd_StatusID(@object);
                    case "Status": return GetAd_Status(@object);
                    case "Images": return GetAd_Images(@object);
                    case "Brands": return GetAd_Brands(@object);
                    case "Stores": return GetAd_Stores(@object);
                    case "Accounts": return GetAd_Accounts(@object);
                    case "TargetURL": return GetAd_TargetURL(@object);
                    case "Caption": return GetAd_Caption(@object);
                    case "StartDate": return GetAd_StartDate(@object);
                    case "EndDate": return GetAd_EndDate(@object);
                    case "ExpirationDate": return GetAd_ExpirationDate(@object);
                    case "Weight": return GetAd_Weight(@object);
                    case "ImpressionCounterID": return GetAd_ImpressionCounterID(@object);
                    case "ImpressionCounter": return GetAd_ImpressionCounter(@object);
                    case "ClickCounterID": return GetAd_ClickCounterID(@object);
                    case "ClickCounter": return GetAd_ClickCounter(@object);
                    case "AdZones": return GetAd_AdZones(@object);
                    case "CampaignAds": return GetAd_CampaignAds(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAdAccount_MasterID(@object);
                    case "SlaveID": return GetAdAccount_SlaveID(@object);
                    case "Slave": return GetAdAccount_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAdBrand_MasterID(@object);
                    case "SlaveID": return GetAdBrand_SlaveID(@object);
                    case "Slave": return GetAdBrand_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAdImage_MasterID(@object);
                    case "TypeID": return GetAdImage_TypeID(@object);
                    case "Type": return GetAdImage_Type(@object);
                    case "SeoTitle": return GetAdImage_SeoTitle(@object);
                    case "Author": return GetAdImage_Author(@object);
                    case "MediaDate": return GetAdImage_MediaDate(@object);
                    case "Copyright": return GetAdImage_Copyright(@object);
                    case "Location": return GetAdImage_Location(@object);
                    case "Latitude": return GetAdImage_Latitude(@object);
                    case "Longitude": return GetAdImage_Longitude(@object);
                    case "IsPrimary": return GetAdImage_IsPrimary(@object);
                    case "OriginalWidth": return GetAdImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetAdImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetAdImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetAdImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetAdImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetAdImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetAdImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetAdImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetAdImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetAdImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetAdImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetAdImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAdImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAdStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAdStore_MasterID(@object);
                    case "SlaveID": return GetAdStore_SlaveID(@object);
                    case "Slave": return GetAdStore_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAdType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdZoneModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAdZone_MasterID(@object);
                    case "SlaveID": return GetAdZone_SlaveID(@object);
                    case "Slave": return GetAdZone_Slave(@object);
                    case "ImpressionCounterID": return GetAdZone_ImpressionCounterID(@object);
                    case "ImpressionCounter": return GetAdZone_ImpressionCounter(@object);
                    case "ClickCounterID": return GetAdZone_ClickCounterID(@object);
                    case "ClickCounter": return GetAdZone_ClickCounter(@object);
                    case "AdZoneAccessID": return GetAdZone_AdZoneAccessID(@object);
                    case "AdZoneAccess": return GetAdZone_AdZoneAccess(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAdZoneAccessModel)))
            {
                switch (property)
                {
                    case "ImpressionCounterID": return GetAdZoneAccess_ImpressionCounterID(@object);
                    case "ImpressionCounter": return GetAdZoneAccess_ImpressionCounter(@object);
                    case "ClickCounterID": return GetAdZoneAccess_ClickCounterID(@object);
                    case "ClickCounter": return GetAdZoneAccess_ClickCounter(@object);
                    case "StartDate": return GetAdZoneAccess_StartDate(@object);
                    case "EndDate": return GetAdZoneAccess_EndDate(@object);
                    case "UniqueAdLimit": return GetAdZoneAccess_UniqueAdLimit(@object);
                    case "ImpressionLimit": return GetAdZoneAccess_ImpressionLimit(@object);
                    case "ClickLimit": return GetAdZoneAccess_ClickLimit(@object);
                    case "ZoneID": return GetAdZoneAccess_ZoneID(@object);
                    case "Zone": return GetAdZoneAccess_Zone(@object);
                    case "SubscriptionID": return GetAdZoneAccess_SubscriptionID(@object);
                    case "Subscription": return GetAdZoneAccess_Subscription(@object);
                    case "AdZones": return GetAdZoneAccess_AdZones(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IZoneModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetZone_TypeID(@object);
                    case "Type": return GetZone_Type(@object);
                    case "StatusID": return GetZone_StatusID(@object);
                    case "Status": return GetZone_Status(@object);
                    case "Width": return GetZone_Width(@object);
                    case "Height": return GetZone_Height(@object);
                    case "AdZones": return GetZone_AdZones(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetZoneStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetZoneType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Attributes
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeGroupModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAttributeGroup_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeTabModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetAttributeTab_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAttributeTypeModel)))
            {
                switch (property)
                {
                    case "GeneralAttributes": return GetAttributeType_GeneralAttributes(@object);
                    case "TranslationKey": return GetAttributeType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGeneralAttributeModel)))
            {
                switch (property)
                {
                    case "IsFilter": return GetGeneralAttribute_IsFilter(@object);
                    case "IsComparable": return GetGeneralAttribute_IsComparable(@object);
                    case "IsPredefined": return GetGeneralAttribute_IsPredefined(@object);
                    case "IsMarkup": return GetGeneralAttribute_IsMarkup(@object);
                    case "IsTab": return GetGeneralAttribute_IsTab(@object);
                    case "HideFromStorefront": return GetGeneralAttribute_HideFromStorefront(@object);
                    case "HideFromSuppliers": return GetGeneralAttribute_HideFromSuppliers(@object);
                    case "HideFromProductDetailView": return GetGeneralAttribute_HideFromProductDetailView(@object);
                    case "HideFromCatalogViews": return GetGeneralAttribute_HideFromCatalogViews(@object);
                    case "TypeID": return GetGeneralAttribute_TypeID(@object);
                    case "Type": return GetGeneralAttribute_Type(@object);
                    case "AttributeTabID": return GetGeneralAttribute_AttributeTabID(@object);
                    case "AttributeTab": return GetGeneralAttribute_AttributeTab(@object);
                    case "AttributeGroupID": return GetGeneralAttribute_AttributeGroupID(@object);
                    case "AttributeGroup": return GetGeneralAttribute_AttributeGroup(@object);
                    case "TranslationKey": return GetGeneralAttribute_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGeneralAttributePredefinedOptionModel)))
            {
                switch (property)
                {
                    case "Value": return GetGeneralAttributePredefinedOption_Value(@object);
                    case "UofM": return GetGeneralAttributePredefinedOption_UofM(@object);
                    case "AttributeID": return GetGeneralAttributePredefinedOption_AttributeID(@object);
                    case "Attribute": return GetGeneralAttributePredefinedOption_Attribute(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Badges
            if (type.GetInterfaces().Any(x => x == typeof(IBadgeModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetBadge_TypeID(@object);
                    case "Type": return GetBadge_Type(@object);
                    case "Images": return GetBadge_Images(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBadgeImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBadgeImage_MasterID(@object);
                    case "TypeID": return GetBadgeImage_TypeID(@object);
                    case "Type": return GetBadgeImage_Type(@object);
                    case "SeoTitle": return GetBadgeImage_SeoTitle(@object);
                    case "Author": return GetBadgeImage_Author(@object);
                    case "MediaDate": return GetBadgeImage_MediaDate(@object);
                    case "Copyright": return GetBadgeImage_Copyright(@object);
                    case "Location": return GetBadgeImage_Location(@object);
                    case "Latitude": return GetBadgeImage_Latitude(@object);
                    case "Longitude": return GetBadgeImage_Longitude(@object);
                    case "IsPrimary": return GetBadgeImage_IsPrimary(@object);
                    case "OriginalWidth": return GetBadgeImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetBadgeImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetBadgeImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetBadgeImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetBadgeImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetBadgeImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetBadgeImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetBadgeImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetBadgeImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetBadgeImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetBadgeImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetBadgeImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetBadgeImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetBadgeType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Brands
            if (type.GetInterfaces().Any(x => x == typeof(IBrandModel)))
            {
                switch (property)
                {
                    case "Notes": return GetBrand_Notes(@object);
                    case "Images": return GetBrand_Images(@object);
                    case "MinimumOrderDollarAmount": return GetBrand_MinimumOrderDollarAmount(@object);
                    case "MinimumOrderDollarAmountAfter": return GetBrand_MinimumOrderDollarAmountAfter(@object);
                    case "MinimumOrderDollarAmountWarningMessage": return GetBrand_MinimumOrderDollarAmountWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFee": return GetBrand_MinimumOrderDollarAmountOverrideFee(@object);
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetBrand_MinimumOrderDollarAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetBrand_MinimumOrderDollarAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetBrand_MinimumOrderDollarAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderQuantityAmount": return GetBrand_MinimumOrderQuantityAmount(@object);
                    case "MinimumOrderQuantityAmountAfter": return GetBrand_MinimumOrderQuantityAmountAfter(@object);
                    case "MinimumOrderQuantityAmountWarningMessage": return GetBrand_MinimumOrderQuantityAmountWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFee": return GetBrand_MinimumOrderQuantityAmountOverrideFee(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetBrand_MinimumOrderQuantityAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetBrand_MinimumOrderQuantityAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetBrand_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderDollarAmountBufferProductID": return GetBrand_MinimumOrderDollarAmountBufferProductID(@object);
                    case "MinimumOrderDollarAmountBufferProduct": return GetBrand_MinimumOrderDollarAmountBufferProduct(@object);
                    case "MinimumOrderQuantityAmountBufferProductID": return GetBrand_MinimumOrderQuantityAmountBufferProductID(@object);
                    case "MinimumOrderQuantityAmountBufferProduct": return GetBrand_MinimumOrderQuantityAmountBufferProduct(@object);
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetBrand_MinimumOrderDollarAmountBufferCategoryID(@object);
                    case "MinimumOrderDollarAmountBufferCategory": return GetBrand_MinimumOrderDollarAmountBufferCategory(@object);
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetBrand_MinimumOrderQuantityAmountBufferCategoryID(@object);
                    case "MinimumOrderQuantityAmountBufferCategory": return GetBrand_MinimumOrderQuantityAmountBufferCategory(@object);
                    case "MinimumForFreeShippingDollarAmount": return GetBrand_MinimumForFreeShippingDollarAmount(@object);
                    case "MinimumForFreeShippingDollarAmountAfter": return GetBrand_MinimumForFreeShippingDollarAmountAfter(@object);
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetBrand_MinimumForFreeShippingDollarAmountWarningMessage(@object);
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetBrand_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingQuantityAmount": return GetBrand_MinimumForFreeShippingQuantityAmount(@object);
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetBrand_MinimumForFreeShippingQuantityAmountAfter(@object);
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetBrand_MinimumForFreeShippingQuantityAmountWarningMessage(@object);
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetBrand_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetBrand_MinimumForFreeShippingDollarAmountBufferProductID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetBrand_MinimumForFreeShippingDollarAmountBufferProduct(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetBrand_MinimumForFreeShippingQuantityAmountBufferProductID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetBrand_MinimumForFreeShippingQuantityAmountBufferProduct(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetBrand_MinimumForFreeShippingDollarAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetBrand_MinimumForFreeShippingDollarAmountBufferCategory(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetBrand_MinimumForFreeShippingQuantityAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetBrand_MinimumForFreeShippingQuantityAmountBufferCategory(@object);
                    case "Accounts": return GetBrand_Accounts(@object);
                    case "Users": return GetBrand_Users(@object);
                    case "Categories": return GetBrand_Categories(@object);
                    case "Stores": return GetBrand_Stores(@object);
                    case "BrandCurrencies": return GetBrand_BrandCurrencies(@object);
                    case "BrandInventoryLocations": return GetBrand_BrandInventoryLocations(@object);
                    case "BrandLanguages": return GetBrand_BrandLanguages(@object);
                    case "BrandSiteDomains": return GetBrand_BrandSiteDomains(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandAccount_MasterID(@object);
                    case "SlaveID": return GetBrandAccount_SlaveID(@object);
                    case "Slave": return GetBrandAccount_Slave(@object);
                    case "HasAccessToBrand": return GetBrandAccount_HasAccessToBrand(@object);
                    case "PricePointID": return GetBrandAccount_PricePointID(@object);
                    case "PricePoint": return GetBrandAccount_PricePoint(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandCategory_MasterID(@object);
                    case "SlaveID": return GetBrandCategory_SlaveID(@object);
                    case "Slave": return GetBrandCategory_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandCurrency_MasterID(@object);
                    case "SlaveID": return GetBrandCurrency_SlaveID(@object);
                    case "Slave": return GetBrandCurrency_Slave(@object);
                    case "IsPrimary": return GetBrandCurrency_IsPrimary(@object);
                    case "CustomName": return GetBrandCurrency_CustomName(@object);
                    case "CustomTranslationKey": return GetBrandCurrency_CustomTranslationKey(@object);
                    case "OverrideUnicodeSymbolValue": return GetBrandCurrency_OverrideUnicodeSymbolValue(@object);
                    case "OverrideHtmlCharacterCode": return GetBrandCurrency_OverrideHtmlCharacterCode(@object);
                    case "OverrideRawCharacter": return GetBrandCurrency_OverrideRawCharacter(@object);
                    case "OverrideDecimalPlaceAccuracy": return GetBrandCurrency_OverrideDecimalPlaceAccuracy(@object);
                    case "OverrideUseSeparator": return GetBrandCurrency_OverrideUseSeparator(@object);
                    case "OverrideRawDecimalCharacter": return GetBrandCurrency_OverrideRawDecimalCharacter(@object);
                    case "OverrideHtmlDecimalCharacterCode": return GetBrandCurrency_OverrideHtmlDecimalCharacterCode(@object);
                    case "OverrideRawSeparatorCharacter": return GetBrandCurrency_OverrideRawSeparatorCharacter(@object);
                    case "OverrideHtmlSeparatorCharacterCode": return GetBrandCurrency_OverrideHtmlSeparatorCharacterCode(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandImage_MasterID(@object);
                    case "TypeID": return GetBrandImage_TypeID(@object);
                    case "Type": return GetBrandImage_Type(@object);
                    case "SeoTitle": return GetBrandImage_SeoTitle(@object);
                    case "Author": return GetBrandImage_Author(@object);
                    case "MediaDate": return GetBrandImage_MediaDate(@object);
                    case "Copyright": return GetBrandImage_Copyright(@object);
                    case "Location": return GetBrandImage_Location(@object);
                    case "Latitude": return GetBrandImage_Latitude(@object);
                    case "Longitude": return GetBrandImage_Longitude(@object);
                    case "IsPrimary": return GetBrandImage_IsPrimary(@object);
                    case "OriginalWidth": return GetBrandImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetBrandImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetBrandImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetBrandImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetBrandImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetBrandImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetBrandImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetBrandImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetBrandImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetBrandImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetBrandImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetBrandImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetBrandImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandInventoryLocationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandInventoryLocation_MasterID(@object);
                    case "SlaveID": return GetBrandInventoryLocation_SlaveID(@object);
                    case "Slave": return GetBrandInventoryLocation_Slave(@object);
                    case "TypeID": return GetBrandInventoryLocation_TypeID(@object);
                    case "Type": return GetBrandInventoryLocation_Type(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetBrandInventoryLocationType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandLanguage_MasterID(@object);
                    case "SlaveID": return GetBrandLanguage_SlaveID(@object);
                    case "Slave": return GetBrandLanguage_Slave(@object);
                    case "OverrideLocale": return GetBrandLanguage_OverrideLocale(@object);
                    case "OverrideUnicodeName": return GetBrandLanguage_OverrideUnicodeName(@object);
                    case "OverrideISO639_1_2002": return GetBrandLanguage_OverrideISO639_1_2002(@object);
                    case "OverrideISO639_2_1998": return GetBrandLanguage_OverrideISO639_2_1998(@object);
                    case "OverrideISO639_3_2007": return GetBrandLanguage_OverrideISO639_3_2007(@object);
                    case "OverrideISO639_5_2008": return GetBrandLanguage_OverrideISO639_5_2008(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandProduct_MasterID(@object);
                    case "SlaveID": return GetBrandProduct_SlaveID(@object);
                    case "Slave": return GetBrandProduct_Slave(@object);
                    case "IsVisibleInBrand": return GetBrandProduct_IsVisibleInBrand(@object);
                    case "PriceBase": return GetBrandProduct_PriceBase(@object);
                    case "PriceMsrp": return GetBrandProduct_PriceMsrp(@object);
                    case "PriceReduction": return GetBrandProduct_PriceReduction(@object);
                    case "PriceSale": return GetBrandProduct_PriceSale(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandSiteDomainModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandSiteDomain_MasterID(@object);
                    case "SlaveID": return GetBrandSiteDomain_SlaveID(@object);
                    case "Slave": return GetBrandSiteDomain_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandStore_MasterID(@object);
                    case "SlaveID": return GetBrandStore_SlaveID(@object);
                    case "Slave": return GetBrandStore_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IBrandUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetBrandUser_MasterID(@object);
                    case "SlaveID": return GetBrandUser_SlaveID(@object);
                    case "Slave": return GetBrandUser_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region CalendarEvents
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetCalendarEvent_TypeID(@object);
                    case "Type": return GetCalendarEvent_Type(@object);
                    case "StatusID": return GetCalendarEvent_StatusID(@object);
                    case "Status": return GetCalendarEvent_Status(@object);
                    case "ContactID": return GetCalendarEvent_ContactID(@object);
                    case "Contact": return GetCalendarEvent_Contact(@object);
                    case "Images": return GetCalendarEvent_Images(@object);
                    case "StoredFiles": return GetCalendarEvent_StoredFiles(@object);
                    case "Products": return GetCalendarEvent_Products(@object);
                    case "ShortDescription": return GetCalendarEvent_ShortDescription(@object);
                    case "EventDurationUnitOfMeasure": return GetCalendarEvent_EventDurationUnitOfMeasure(@object);
                    case "RecurrenceString": return GetCalendarEvent_RecurrenceString(@object);
                    case "StartDate": return GetCalendarEvent_StartDate(@object);
                    case "EndDate": return GetCalendarEvent_EndDate(@object);
                    case "EventDuration": return GetCalendarEvent_EventDuration(@object);
                    case "MaxAttendees": return GetCalendarEvent_MaxAttendees(@object);
                    case "GroupID": return GetCalendarEvent_GroupID(@object);
                    case "Group": return GetCalendarEvent_Group(@object);
                    case "CalendarEventDetails": return GetCalendarEvent_CalendarEventDetails(@object);
                    case "UserEventAttendances": return GetCalendarEvent_UserEventAttendances(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventDetailModel)))
            {
                switch (property)
                {
                    case "Day": return GetCalendarEventDetail_Day(@object);
                    case "StartTime": return GetCalendarEventDetail_StartTime(@object);
                    case "EndTime": return GetCalendarEventDetail_EndTime(@object);
                    case "Location": return GetCalendarEventDetail_Location(@object);
                    case "CalendarEventID": return GetCalendarEventDetail_CalendarEventID(@object);
                    case "CalendarEvent": return GetCalendarEventDetail_CalendarEvent(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCalendarEventFile_MasterID(@object);
                    case "SlaveID": return GetCalendarEventFile_SlaveID(@object);
                    case "Slave": return GetCalendarEventFile_Slave(@object);
                    case "FileAccessTypeID": return GetCalendarEventFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCalendarEventImage_MasterID(@object);
                    case "TypeID": return GetCalendarEventImage_TypeID(@object);
                    case "Type": return GetCalendarEventImage_Type(@object);
                    case "SeoTitle": return GetCalendarEventImage_SeoTitle(@object);
                    case "Author": return GetCalendarEventImage_Author(@object);
                    case "MediaDate": return GetCalendarEventImage_MediaDate(@object);
                    case "Copyright": return GetCalendarEventImage_Copyright(@object);
                    case "Location": return GetCalendarEventImage_Location(@object);
                    case "Latitude": return GetCalendarEventImage_Latitude(@object);
                    case "Longitude": return GetCalendarEventImage_Longitude(@object);
                    case "IsPrimary": return GetCalendarEventImage_IsPrimary(@object);
                    case "OriginalWidth": return GetCalendarEventImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetCalendarEventImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetCalendarEventImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetCalendarEventImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetCalendarEventImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetCalendarEventImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetCalendarEventImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetCalendarEventImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetCalendarEventImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetCalendarEventImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetCalendarEventImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetCalendarEventImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCalendarEventImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICalendarEventProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCalendarEventProduct_MasterID(@object);
                    case "SlaveID": return GetCalendarEventProduct_SlaveID(@object);
                    case "Slave": return GetCalendarEventProduct_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCalendarEventStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCalendarEventType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserEventAttendanceModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetUserEventAttendance_TypeID(@object);
                    case "Type": return GetUserEventAttendance_Type(@object);
                    case "MasterID": return GetUserEventAttendance_MasterID(@object);
                    case "SlaveID": return GetUserEventAttendance_SlaveID(@object);
                    case "Slave": return GetUserEventAttendance_Slave(@object);
                    case "HasAttended": return GetUserEventAttendance_HasAttended(@object);
                    case "Date": return GetUserEventAttendance_Date(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetUserEventAttendanceType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Categories
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryModel)))
            {
                switch (property)
                {
                    case "ParentID": return GetCategory_ParentID(@object);
                    case "Parent": return GetCategory_Parent(@object);
                    case "Children": return GetCategory_Children(@object);
                    case "MinimumOrderDollarAmount": return GetCategory_MinimumOrderDollarAmount(@object);
                    case "MinimumOrderDollarAmountAfter": return GetCategory_MinimumOrderDollarAmountAfter(@object);
                    case "MinimumOrderDollarAmountWarningMessage": return GetCategory_MinimumOrderDollarAmountWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFee": return GetCategory_MinimumOrderDollarAmountOverrideFee(@object);
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetCategory_MinimumOrderDollarAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetCategory_MinimumOrderDollarAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetCategory_MinimumOrderDollarAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderQuantityAmount": return GetCategory_MinimumOrderQuantityAmount(@object);
                    case "MinimumOrderQuantityAmountAfter": return GetCategory_MinimumOrderQuantityAmountAfter(@object);
                    case "MinimumOrderQuantityAmountWarningMessage": return GetCategory_MinimumOrderQuantityAmountWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFee": return GetCategory_MinimumOrderQuantityAmountOverrideFee(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetCategory_MinimumOrderQuantityAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetCategory_MinimumOrderQuantityAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetCategory_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderDollarAmountBufferProductID": return GetCategory_MinimumOrderDollarAmountBufferProductID(@object);
                    case "MinimumOrderDollarAmountBufferProduct": return GetCategory_MinimumOrderDollarAmountBufferProduct(@object);
                    case "MinimumOrderQuantityAmountBufferProductID": return GetCategory_MinimumOrderQuantityAmountBufferProductID(@object);
                    case "MinimumOrderQuantityAmountBufferProduct": return GetCategory_MinimumOrderQuantityAmountBufferProduct(@object);
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetCategory_MinimumOrderDollarAmountBufferCategoryID(@object);
                    case "MinimumOrderDollarAmountBufferCategory": return GetCategory_MinimumOrderDollarAmountBufferCategory(@object);
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetCategory_MinimumOrderQuantityAmountBufferCategoryID(@object);
                    case "MinimumOrderQuantityAmountBufferCategory": return GetCategory_MinimumOrderQuantityAmountBufferCategory(@object);
                    case "MinimumForFreeShippingDollarAmount": return GetCategory_MinimumForFreeShippingDollarAmount(@object);
                    case "MinimumForFreeShippingDollarAmountAfter": return GetCategory_MinimumForFreeShippingDollarAmountAfter(@object);
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetCategory_MinimumForFreeShippingDollarAmountWarningMessage(@object);
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetCategory_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingQuantityAmount": return GetCategory_MinimumForFreeShippingQuantityAmount(@object);
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetCategory_MinimumForFreeShippingQuantityAmountAfter(@object);
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetCategory_MinimumForFreeShippingQuantityAmountWarningMessage(@object);
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetCategory_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetCategory_MinimumForFreeShippingDollarAmountBufferProductID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetCategory_MinimumForFreeShippingDollarAmountBufferProduct(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetCategory_MinimumForFreeShippingQuantityAmountBufferProductID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetCategory_MinimumForFreeShippingQuantityAmountBufferProduct(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetCategory_MinimumForFreeShippingDollarAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetCategory_MinimumForFreeShippingDollarAmountBufferCategory(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetCategory_MinimumForFreeShippingQuantityAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetCategory_MinimumForFreeShippingQuantityAmountBufferCategory(@object);
                    case "TypeID": return GetCategory_TypeID(@object);
                    case "Type": return GetCategory_Type(@object);
                    case "Brands": return GetCategory_Brands(@object);
                    case "RequiresRoles": return GetCategory_RequiresRoles(@object);
                    case "RequiresRolesList": return GetCategory_RequiresRolesList(@object);
                    case "RequiresRolesAlt": return GetCategory_RequiresRolesAlt(@object);
                    case "RequiresRolesListAlt": return GetCategory_RequiresRolesListAlt(@object);
                    case "Reviews": return GetCategory_Reviews(@object);
                    case "Images": return GetCategory_Images(@object);
                    case "StoredFiles": return GetCategory_StoredFiles(@object);
                    case "IsVisible": return GetCategory_IsVisible(@object);
                    case "IncludeInMenu": return GetCategory_IncludeInMenu(@object);
                    case "HeaderContent": return GetCategory_HeaderContent(@object);
                    case "SidebarContent": return GetCategory_SidebarContent(@object);
                    case "FooterContent": return GetCategory_FooterContent(@object);
                    case "HandlingCharge": return GetCategory_HandlingCharge(@object);
                    case "RestockingFeePercent": return GetCategory_RestockingFeePercent(@object);
                    case "RestockingFeeAmount": return GetCategory_RestockingFeeAmount(@object);
                    case "RestockingFeeAmountCurrencyID": return GetCategory_RestockingFeeAmountCurrencyID(@object);
                    case "RestockingFeeAmountCurrency": return GetCategory_RestockingFeeAmountCurrency(@object);
                    case "ProductCategories": return GetCategory_ProductCategories(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCategoryFile_MasterID(@object);
                    case "SlaveID": return GetCategoryFile_SlaveID(@object);
                    case "Slave": return GetCategoryFile_Slave(@object);
                    case "FileAccessTypeID": return GetCategoryFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICategoryImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCategoryImage_MasterID(@object);
                    case "TypeID": return GetCategoryImage_TypeID(@object);
                    case "Type": return GetCategoryImage_Type(@object);
                    case "SeoTitle": return GetCategoryImage_SeoTitle(@object);
                    case "Author": return GetCategoryImage_Author(@object);
                    case "MediaDate": return GetCategoryImage_MediaDate(@object);
                    case "Copyright": return GetCategoryImage_Copyright(@object);
                    case "Location": return GetCategoryImage_Location(@object);
                    case "Latitude": return GetCategoryImage_Latitude(@object);
                    case "Longitude": return GetCategoryImage_Longitude(@object);
                    case "IsPrimary": return GetCategoryImage_IsPrimary(@object);
                    case "OriginalWidth": return GetCategoryImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetCategoryImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetCategoryImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetCategoryImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetCategoryImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetCategoryImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetCategoryImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetCategoryImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetCategoryImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetCategoryImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetCategoryImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetCategoryImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCategoryImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCategoryType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Contacts
            if (type.GetInterfaces().Any(x => x == typeof(IContactModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetContact_TypeID(@object);
                    case "Type": return GetContact_Type(@object);
                    case "Images": return GetContact_Images(@object);
                    case "FirstName": return GetContact_FirstName(@object);
                    case "MiddleName": return GetContact_MiddleName(@object);
                    case "LastName": return GetContact_LastName(@object);
                    case "FullName": return GetContact_FullName(@object);
                    case "Phone1": return GetContact_Phone1(@object);
                    case "Phone2": return GetContact_Phone2(@object);
                    case "Phone3": return GetContact_Phone3(@object);
                    case "Fax1": return GetContact_Fax1(@object);
                    case "Email1": return GetContact_Email1(@object);
                    case "Website1": return GetContact_Website1(@object);
                    case "AddressID": return GetContact_AddressID(@object);
                    case "Address": return GetContact_Address(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IContactImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetContactImage_MasterID(@object);
                    case "TypeID": return GetContactImage_TypeID(@object);
                    case "Type": return GetContactImage_Type(@object);
                    case "SeoTitle": return GetContactImage_SeoTitle(@object);
                    case "Author": return GetContactImage_Author(@object);
                    case "MediaDate": return GetContactImage_MediaDate(@object);
                    case "Copyright": return GetContactImage_Copyright(@object);
                    case "Location": return GetContactImage_Location(@object);
                    case "Latitude": return GetContactImage_Latitude(@object);
                    case "Longitude": return GetContactImage_Longitude(@object);
                    case "IsPrimary": return GetContactImage_IsPrimary(@object);
                    case "OriginalWidth": return GetContactImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetContactImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetContactImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetContactImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetContactImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetContactImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetContactImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetContactImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetContactImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetContactImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetContactImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetContactImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetContactImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetContactType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProfanityFilterModel)))
            {
                switch (property)
                {
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IReferralCodeModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetReferralCode_TypeID(@object);
                    case "Type": return GetReferralCode_Type(@object);
                    case "StatusID": return GetReferralCode_StatusID(@object);
                    case "Status": return GetReferralCode_Status(@object);
                    case "Code": return GetReferralCode_Code(@object);
                    case "UserID": return GetReferralCode_UserID(@object);
                    case "User": return GetReferralCode_User(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetReferralCodeStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetReferralCodeType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetUser_TypeID(@object);
                    case "Type": return GetUser_Type(@object);
                    case "StatusID": return GetUser_StatusID(@object);
                    case "Status": return GetUser_Status(@object);
                    case "ContactID": return GetUser_ContactID(@object);
                    case "Contact": return GetUser_Contact(@object);
                    case "Brands": return GetUser_Brands(@object);
                    case "Stores": return GetUser_Stores(@object);
                    case "Images": return GetUser_Images(@object);
                    case "StoredFiles": return GetUser_StoredFiles(@object);
                    case "UserName": return GetUser_UserName(@object);
                    case "SecurityStamp": return GetUser_SecurityStamp(@object);
                    case "PhoneNumber": return GetUser_PhoneNumber(@object);
                    case "LockoutEndDateUtc": return GetUser_LockoutEndDateUtc(@object);
                    case "IsApproved": return GetUser_IsApproved(@object);
                    case "RequirePasswordChangeOnNextLogin": return GetUser_RequirePasswordChangeOnNextLogin(@object);
                    case "AccountID": return GetUser_AccountID(@object);
                    case "Account": return GetUser_Account(@object);
                    case "PreferredStoreID": return GetUser_PreferredStoreID(@object);
                    case "PreferredStore": return GetUser_PreferredStore(@object);
                    case "CurrencyID": return GetUser_CurrencyID(@object);
                    case "Currency": return GetUser_Currency(@object);
                    case "LanguageID": return GetUser_LanguageID(@object);
                    case "Language": return GetUser_Language(@object);
                    case "UserOnlineStatusID": return GetUser_UserOnlineStatusID(@object);
                    case "UserOnlineStatus": return GetUser_UserOnlineStatus(@object);
                    case "FavoriteCategories": return GetUser_FavoriteCategories(@object);
                    case "FavoriteVendors": return GetUser_FavoriteVendors(@object);
                    case "FavoriteManufacturers": return GetUser_FavoriteManufacturers(@object);
                    case "FavoriteStores": return GetUser_FavoriteStores(@object);
                    case "ReferralCodes": return GetUser_ReferralCodes(@object);
                    case "UserProductTypes": return GetUser_UserProductTypes(@object);
                    case "EmailConfirmed": return GetUser_EmailConfirmed(@object);
                    case "PhoneNumberConfirmed": return GetUser_PhoneNumberConfirmed(@object);
                    case "TwoFactorEnabled": return GetUser_TwoFactorEnabled(@object);
                    case "LockoutEnabled": return GetUser_LockoutEnabled(@object);
                    case "AccessFailedCount": return GetUser_AccessFailedCount(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetUserFile_MasterID(@object);
                    case "SlaveID": return GetUserFile_SlaveID(@object);
                    case "Slave": return GetUserFile_Slave(@object);
                    case "FileAccessTypeID": return GetUserFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetUserImage_MasterID(@object);
                    case "TypeID": return GetUserImage_TypeID(@object);
                    case "Type": return GetUserImage_Type(@object);
                    case "SeoTitle": return GetUserImage_SeoTitle(@object);
                    case "Author": return GetUserImage_Author(@object);
                    case "MediaDate": return GetUserImage_MediaDate(@object);
                    case "Copyright": return GetUserImage_Copyright(@object);
                    case "Location": return GetUserImage_Location(@object);
                    case "Latitude": return GetUserImage_Latitude(@object);
                    case "Longitude": return GetUserImage_Longitude(@object);
                    case "IsPrimary": return GetUserImage_IsPrimary(@object);
                    case "OriginalWidth": return GetUserImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetUserImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetUserImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetUserImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetUserImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetUserImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetUserImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetUserImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetUserImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetUserImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetUserImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetUserImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetUserImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetUserOnlineStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUserProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetUserProductType_MasterID(@object);
                    case "SlaveID": return GetUserProductType_SlaveID(@object);
                    case "Slave": return GetUserProductType_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetUserStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetUserType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Counters
            if (type.GetInterfaces().Any(x => x == typeof(ICounterModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetCounter_TypeID(@object);
                    case "Type": return GetCounter_Type(@object);
                    case "Value": return GetCounter_Value(@object);
                    case "CounterLogs": return GetCounter_CounterLogs(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICounterLogModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetCounterLog_TypeID(@object);
                    case "Type": return GetCounterLog_Type(@object);
                    case "Value": return GetCounterLog_Value(@object);
                    case "CounterID": return GetCounterLog_CounterID(@object);
                    case "Counter": return GetCounterLog_Counter(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCounterLogType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCounterType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Currencies
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyModel)))
            {
                switch (property)
                {
                    case "Images": return GetCurrency_Images(@object);
                    case "ISO4217Alpha": return GetCurrency_ISO4217Alpha(@object);
                    case "ISO4217Numeric": return GetCurrency_ISO4217Numeric(@object);
                    case "UnicodeSymbolValue": return GetCurrency_UnicodeSymbolValue(@object);
                    case "HtmlCharacterCode": return GetCurrency_HtmlCharacterCode(@object);
                    case "RawCharacter": return GetCurrency_RawCharacter(@object);
                    case "DecimalPlaceAccuracy": return GetCurrency_DecimalPlaceAccuracy(@object);
                    case "UseSeparator": return GetCurrency_UseSeparator(@object);
                    case "RawDecimalCharacter": return GetCurrency_RawDecimalCharacter(@object);
                    case "HtmlDecimalCharacterCode": return GetCurrency_HtmlDecimalCharacterCode(@object);
                    case "RawSeparatorCharacter": return GetCurrency_RawSeparatorCharacter(@object);
                    case "HtmlSeparatorCharacterCode": return GetCurrency_HtmlSeparatorCharacterCode(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyConversionModel)))
            {
                switch (property)
                {
                    case "Rate": return GetCurrencyConversion_Rate(@object);
                    case "StartDate": return GetCurrencyConversion_StartDate(@object);
                    case "EndDate": return GetCurrencyConversion_EndDate(@object);
                    case "StartingCurrencyID": return GetCurrencyConversion_StartingCurrencyID(@object);
                    case "StartingCurrency": return GetCurrencyConversion_StartingCurrency(@object);
                    case "EndingCurrencyID": return GetCurrencyConversion_EndingCurrencyID(@object);
                    case "EndingCurrency": return GetCurrencyConversion_EndingCurrency(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICurrencyImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCurrencyImage_MasterID(@object);
                    case "TypeID": return GetCurrencyImage_TypeID(@object);
                    case "Type": return GetCurrencyImage_Type(@object);
                    case "SeoTitle": return GetCurrencyImage_SeoTitle(@object);
                    case "Author": return GetCurrencyImage_Author(@object);
                    case "MediaDate": return GetCurrencyImage_MediaDate(@object);
                    case "Copyright": return GetCurrencyImage_Copyright(@object);
                    case "Location": return GetCurrencyImage_Location(@object);
                    case "Latitude": return GetCurrencyImage_Latitude(@object);
                    case "Longitude": return GetCurrencyImage_Longitude(@object);
                    case "IsPrimary": return GetCurrencyImage_IsPrimary(@object);
                    case "OriginalWidth": return GetCurrencyImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetCurrencyImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetCurrencyImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetCurrencyImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetCurrencyImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetCurrencyImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetCurrencyImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetCurrencyImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetCurrencyImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetCurrencyImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetCurrencyImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetCurrencyImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCurrencyImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalCurrencyRateModel)))
            {
                switch (property)
                {
                    case "Rate": return GetHistoricalCurrencyRate_Rate(@object);
                    case "OnDate": return GetHistoricalCurrencyRate_OnDate(@object);
                    case "StartingCurrencyID": return GetHistoricalCurrencyRate_StartingCurrencyID(@object);
                    case "StartingCurrency": return GetHistoricalCurrencyRate_StartingCurrency(@object);
                    case "EndingCurrencyID": return GetHistoricalCurrencyRate_EndingCurrencyID(@object);
                    case "EndingCurrency": return GetHistoricalCurrencyRate_EndingCurrency(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Discounts
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedCartDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedCartDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedCartDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedCartDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedCartDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedCartItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedCartItemDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedCartItemDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedCartItemDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedCartItemDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountModel)))
            {
                switch (property)
                {
                    case "UsageLimitByUser": return GetDiscount_UsageLimitByUser(@object);
                    case "CanCombine": return GetDiscount_CanCombine(@object);
                    case "IsAutoApplied": return GetDiscount_IsAutoApplied(@object);
                    case "Value": return GetDiscount_Value(@object);
                    case "ThresholdAmount": return GetDiscount_ThresholdAmount(@object);
                    case "BuyXValue": return GetDiscount_BuyXValue(@object);
                    case "GetYValue": return GetDiscount_GetYValue(@object);
                    case "RoundingOperation": return GetDiscount_RoundingOperation(@object);
                    case "UsageLimit": return GetDiscount_UsageLimit(@object);
                    case "DiscountCompareOperator": return GetDiscount_DiscountCompareOperator(@object);
                    case "DiscountTypeID": return GetDiscount_DiscountTypeID(@object);
                    case "ValueType": return GetDiscount_ValueType(@object);
                    case "RoundingType": return GetDiscount_RoundingType(@object);
                    case "Priority": return GetDiscount_Priority(@object);
                    case "StartDate": return GetDiscount_StartDate(@object);
                    case "EndDate": return GetDiscount_EndDate(@object);
                    case "Products": return GetDiscount_Products(@object);
                    case "Brands": return GetDiscount_Brands(@object);
                    case "Stores": return GetDiscount_Stores(@object);
                    case "Accounts": return GetDiscount_Accounts(@object);
                    case "Users": return GetDiscount_Users(@object);
                    case "Vendors": return GetDiscount_Vendors(@object);
                    case "Manufacturers": return GetDiscount_Manufacturers(@object);
                    case "Codes": return GetDiscount_Codes(@object);
                    case "Countries": return GetDiscount_Countries(@object);
                    case "UserRoles": return GetDiscount_UserRoles(@object);
                    case "Categories": return GetDiscount_Categories(@object);
                    case "AccountTypes": return GetDiscount_AccountTypes(@object);
                    case "ProductTypes": return GetDiscount_ProductTypes(@object);
                    case "ShipCarrierMethods": return GetDiscount_ShipCarrierMethods(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountAccount_MasterID(@object);
                    case "SlaveID": return GetDiscountAccount_SlaveID(@object);
                    case "Slave": return GetDiscountAccount_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountAccountTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountAccountType_MasterID(@object);
                    case "SlaveID": return GetDiscountAccountType_SlaveID(@object);
                    case "Slave": return GetDiscountAccountType_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountBrand_MasterID(@object);
                    case "SlaveID": return GetDiscountBrand_SlaveID(@object);
                    case "Slave": return GetDiscountBrand_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountCategory_MasterID(@object);
                    case "SlaveID": return GetDiscountCategory_SlaveID(@object);
                    case "Slave": return GetDiscountCategory_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCodeModel)))
            {
                switch (property)
                {
                    case "Code": return GetDiscountCode_Code(@object);
                    case "DiscountID": return GetDiscountCode_DiscountID(@object);
                    case "UserID": return GetDiscountCode_UserID(@object);
                    case "User": return GetDiscountCode_User(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountCountryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountCountry_MasterID(@object);
                    case "SlaveID": return GetDiscountCountry_SlaveID(@object);
                    case "Slave": return GetDiscountCountry_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountManufacturer_MasterID(@object);
                    case "SlaveID": return GetDiscountManufacturer_SlaveID(@object);
                    case "Slave": return GetDiscountManufacturer_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountProduct_MasterID(@object);
                    case "SlaveID": return GetDiscountProduct_SlaveID(@object);
                    case "Slave": return GetDiscountProduct_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountProductType_MasterID(@object);
                    case "SlaveID": return GetDiscountProductType_SlaveID(@object);
                    case "Slave": return GetDiscountProductType_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountShipCarrierMethod_MasterID(@object);
                    case "SlaveID": return GetDiscountShipCarrierMethod_SlaveID(@object);
                    case "Slave": return GetDiscountShipCarrierMethod_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountStore_MasterID(@object);
                    case "SlaveID": return GetDiscountStore_SlaveID(@object);
                    case "Slave": return GetDiscountStore_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountUser_MasterID(@object);
                    case "SlaveID": return GetDiscountUser_SlaveID(@object);
                    case "Slave": return GetDiscountUser_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountUserRoleModel)))
            {
                switch (property)
                {
                    case "RoleName": return GetDiscountUserRole_RoleName(@object);
                    case "MasterID": return GetDiscountUserRole_MasterID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IDiscountVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetDiscountVendor_MasterID(@object);
                    case "SlaveID": return GetDiscountVendor_SlaveID(@object);
                    case "Slave": return GetDiscountVendor_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedPurchaseOrderDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedPurchaseOrderDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedPurchaseOrderDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedPurchaseOrderDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedPurchaseOrderDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedPurchaseOrderItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedPurchaseOrderItemDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedPurchaseOrderItemDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedPurchaseOrderItemDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedPurchaseOrderItemDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesInvoiceDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesInvoiceDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesInvoiceDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesInvoiceDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesInvoiceDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesInvoiceItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesInvoiceItemDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesInvoiceItemDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesInvoiceItemDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesInvoiceItemDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesOrderDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesOrderDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesOrderDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesOrderDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesOrderDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesOrderItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesOrderItemDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesOrderItemDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesOrderItemDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesOrderItemDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesQuoteDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesQuoteDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesQuoteDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesQuoteDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesQuoteDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesQuoteItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesQuoteItemDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesQuoteItemDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesQuoteItemDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesQuoteItemDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesReturnDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesReturnDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesReturnDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesReturnDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesReturnDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSalesReturnItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSalesReturnItemDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSalesReturnItemDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSalesReturnItemDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSalesReturnItemDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSampleRequestDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSampleRequestDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSampleRequestDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSampleRequestDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSampleRequestDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IAppliedSampleRequestItemDiscountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetAppliedSampleRequestItemDiscount_MasterID(@object);
                    case "SlaveID": return GetAppliedSampleRequestItemDiscount_SlaveID(@object);
                    case "Slave": return GetAppliedSampleRequestItemDiscount_Slave(@object);
                    case "DiscountTotal": return GetAppliedSampleRequestItemDiscount_DiscountTotal(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Favorites
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetFavoriteCategory_MasterID(@object);
                    case "SlaveID": return GetFavoriteCategory_SlaveID(@object);
                    case "Slave": return GetFavoriteCategory_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetFavoriteManufacturer_MasterID(@object);
                    case "SlaveID": return GetFavoriteManufacturer_SlaveID(@object);
                    case "Slave": return GetFavoriteManufacturer_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteShipCarrierModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetFavoriteShipCarrier_MasterID(@object);
                    case "SlaveID": return GetFavoriteShipCarrier_SlaveID(@object);
                    case "Slave": return GetFavoriteShipCarrier_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetFavoriteStore_MasterID(@object);
                    case "SlaveID": return GetFavoriteStore_SlaveID(@object);
                    case "Slave": return GetFavoriteStore_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IFavoriteVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetFavoriteVendor_MasterID(@object);
                    case "SlaveID": return GetFavoriteVendor_SlaveID(@object);
                    case "Slave": return GetFavoriteVendor_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Geography
            if (type.GetInterfaces().Any(x => x == typeof(IAddressModel)))
            {
                switch (property)
                {
                    case "Company": return GetAddress_Company(@object);
                    case "Street1": return GetAddress_Street1(@object);
                    case "Street2": return GetAddress_Street2(@object);
                    case "Street3": return GetAddress_Street3(@object);
                    case "City": return GetAddress_City(@object);
                    case "RegionCustom": return GetAddress_RegionCustom(@object);
                    case "CountryCustom": return GetAddress_CountryCustom(@object);
                    case "PostalCode": return GetAddress_PostalCode(@object);
                    case "Latitude": return GetAddress_Latitude(@object);
                    case "Longitude": return GetAddress_Longitude(@object);
                    case "CountryID": return GetAddress_CountryID(@object);
                    case "Country": return GetAddress_Country(@object);
                    case "RegionID": return GetAddress_RegionID(@object);
                    case "Region": return GetAddress_Region(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryModel)))
            {
                switch (property)
                {
                    case "Images": return GetCountry_Images(@object);
                    case "Languages": return GetCountry_Languages(@object);
                    case "Currencies": return GetCountry_Currencies(@object);
                    case "Code": return GetCountry_Code(@object);
                    case "ISO3166Alpha2": return GetCountry_ISO3166Alpha2(@object);
                    case "ISO3166Alpha3": return GetCountry_ISO3166Alpha3(@object);
                    case "ISO3166Numeric": return GetCountry_ISO3166Numeric(@object);
                    case "PhoneRegEx": return GetCountry_PhoneRegEx(@object);
                    case "PhonePrefix": return GetCountry_PhonePrefix(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCountryCurrency_MasterID(@object);
                    case "SlaveID": return GetCountryCurrency_SlaveID(@object);
                    case "Slave": return GetCountryCurrency_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCountryImage_MasterID(@object);
                    case "TypeID": return GetCountryImage_TypeID(@object);
                    case "Type": return GetCountryImage_Type(@object);
                    case "SeoTitle": return GetCountryImage_SeoTitle(@object);
                    case "Author": return GetCountryImage_Author(@object);
                    case "MediaDate": return GetCountryImage_MediaDate(@object);
                    case "Copyright": return GetCountryImage_Copyright(@object);
                    case "Location": return GetCountryImage_Location(@object);
                    case "Latitude": return GetCountryImage_Latitude(@object);
                    case "Longitude": return GetCountryImage_Longitude(@object);
                    case "IsPrimary": return GetCountryImage_IsPrimary(@object);
                    case "OriginalWidth": return GetCountryImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetCountryImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetCountryImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetCountryImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetCountryImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetCountryImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetCountryImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetCountryImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetCountryImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetCountryImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetCountryImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetCountryImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCountryImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICountryLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCountryLanguage_MasterID(@object);
                    case "SlaveID": return GetCountryLanguage_SlaveID(@object);
                    case "Slave": return GetCountryLanguage_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalAddressValidationModel)))
            {
                switch (property)
                {
                    case "AddressHash": return GetHistoricalAddressValidation_AddressHash(@object);
                    case "OnDate": return GetHistoricalAddressValidation_OnDate(@object);
                    case "IsValid": return GetHistoricalAddressValidation_IsValid(@object);
                    case "Provider": return GetHistoricalAddressValidation_Provider(@object);
                    case "SerializedRequest": return GetHistoricalAddressValidation_SerializedRequest(@object);
                    case "SerializedResponse": return GetHistoricalAddressValidation_SerializedResponse(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPhonePrefixLookupModel)))
            {
                switch (property)
                {
                    case "Prefix": return GetPhonePrefixLookup_Prefix(@object);
                    case "TimeZone": return GetPhonePrefixLookup_TimeZone(@object);
                    case "CityName": return GetPhonePrefixLookup_CityName(@object);
                    case "CountryID": return GetPhonePrefixLookup_CountryID(@object);
                    case "Country": return GetPhonePrefixLookup_Country(@object);
                    case "RegionID": return GetPhonePrefixLookup_RegionID(@object);
                    case "Region": return GetPhonePrefixLookup_Region(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionModel)))
            {
                switch (property)
                {
                    case "Images": return GetRegion_Images(@object);
                    case "Languages": return GetRegion_Languages(@object);
                    case "Currencies": return GetRegion_Currencies(@object);
                    case "Code": return GetRegion_Code(@object);
                    case "Taxes": return GetRegion_Taxes(@object);
                    case "CountryID": return GetRegion_CountryID(@object);
                    case "Country": return GetRegion_Country(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionCurrencyModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetRegionCurrency_MasterID(@object);
                    case "SlaveID": return GetRegionCurrency_SlaveID(@object);
                    case "Slave": return GetRegionCurrency_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetRegionImage_MasterID(@object);
                    case "TypeID": return GetRegionImage_TypeID(@object);
                    case "Type": return GetRegionImage_Type(@object);
                    case "SeoTitle": return GetRegionImage_SeoTitle(@object);
                    case "Author": return GetRegionImage_Author(@object);
                    case "MediaDate": return GetRegionImage_MediaDate(@object);
                    case "Copyright": return GetRegionImage_Copyright(@object);
                    case "Location": return GetRegionImage_Location(@object);
                    case "Latitude": return GetRegionImage_Latitude(@object);
                    case "Longitude": return GetRegionImage_Longitude(@object);
                    case "IsPrimary": return GetRegionImage_IsPrimary(@object);
                    case "OriginalWidth": return GetRegionImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetRegionImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetRegionImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetRegionImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetRegionImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetRegionImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetRegionImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetRegionImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetRegionImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetRegionImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetRegionImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetRegionImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetRegionImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRegionLanguageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetRegionLanguage_MasterID(@object);
                    case "SlaveID": return GetRegionLanguage_SlaveID(@object);
                    case "Slave": return GetRegionLanguage_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IZipCodeModel)))
            {
                switch (property)
                {
                    case "ZipCodeValue": return GetZipCode_ZipCodeValue(@object);
                    case "ZipType": return GetZipCode_ZipType(@object);
                    case "CityName": return GetZipCode_CityName(@object);
                    case "CityType": return GetZipCode_CityType(@object);
                    case "CountyName": return GetZipCode_CountyName(@object);
                    case "CountyFIPS": return GetZipCode_CountyFIPS(@object);
                    case "StateName": return GetZipCode_StateName(@object);
                    case "StateAbbreviation": return GetZipCode_StateAbbreviation(@object);
                    case "StateFIPS": return GetZipCode_StateFIPS(@object);
                    case "MSACode": return GetZipCode_MSACode(@object);
                    case "AreaCode": return GetZipCode_AreaCode(@object);
                    case "TimeZone": return GetZipCode_TimeZone(@object);
                    case "UTC": return GetZipCode_UTC(@object);
                    case "DST": return GetZipCode_DST(@object);
                    case "Latitude": return GetZipCode_Latitude(@object);
                    case "Longitude": return GetZipCode_Longitude(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Globalization
            if (type.GetInterfaces().Any(x => x == typeof(ILanguageModel)))
            {
                switch (property)
                {
                    case "Images": return GetLanguage_Images(@object);
                    case "Locale": return GetLanguage_Locale(@object);
                    case "UnicodeName": return GetLanguage_UnicodeName(@object);
                    case "ISO639_1_2002": return GetLanguage_ISO639_1_2002(@object);
                    case "ISO639_2_1998": return GetLanguage_ISO639_2_1998(@object);
                    case "ISO639_3_2007": return GetLanguage_ISO639_3_2007(@object);
                    case "ISO639_5_2008": return GetLanguage_ISO639_5_2008(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ILanguageImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetLanguageImage_MasterID(@object);
                    case "TypeID": return GetLanguageImage_TypeID(@object);
                    case "Type": return GetLanguageImage_Type(@object);
                    case "SeoTitle": return GetLanguageImage_SeoTitle(@object);
                    case "Author": return GetLanguageImage_Author(@object);
                    case "MediaDate": return GetLanguageImage_MediaDate(@object);
                    case "Copyright": return GetLanguageImage_Copyright(@object);
                    case "Location": return GetLanguageImage_Location(@object);
                    case "Latitude": return GetLanguageImage_Latitude(@object);
                    case "Longitude": return GetLanguageImage_Longitude(@object);
                    case "IsPrimary": return GetLanguageImage_IsPrimary(@object);
                    case "OriginalWidth": return GetLanguageImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetLanguageImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetLanguageImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetLanguageImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetLanguageImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetLanguageImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetLanguageImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetLanguageImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetLanguageImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetLanguageImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetLanguageImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetLanguageImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetLanguageImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUiKeyModel)))
            {
                switch (property)
                {
                    case "Type": return GetUiKey_Type(@object);
                    case "UiTranslations": return GetUiKey_UiTranslations(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IUiTranslationModel)))
            {
                switch (property)
                {
                    case "Locale": return GetUiTranslation_Locale(@object);
                    case "Value": return GetUiTranslation_Value(@object);
                    case "UiKeyID": return GetUiTranslation_UiKeyID(@object);
                    case "UiKey": return GetUiTranslation_UiKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Groups
            if (type.GetInterfaces().Any(x => x == typeof(IGroupModel)))
            {
                switch (property)
                {
                    case "ParentID": return GetGroup_ParentID(@object);
                    case "Parent": return GetGroup_Parent(@object);
                    case "Children": return GetGroup_Children(@object);
                    case "Users": return GetGroup_Users(@object);
                    case "TypeID": return GetGroup_TypeID(@object);
                    case "Type": return GetGroup_Type(@object);
                    case "StatusID": return GetGroup_StatusID(@object);
                    case "Status": return GetGroup_Status(@object);
                    case "GroupOwnerID": return GetGroup_GroupOwnerID(@object);
                    case "GroupOwner": return GetGroup_GroupOwner(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetGroupStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetGroupType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IGroupUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetGroupUser_MasterID(@object);
                    case "SlaveID": return GetGroupUser_SlaveID(@object);
                    case "Slave": return GetGroupUser_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Hangfire
            if (type.GetInterfaces().Any(x => x == typeof(IScheduledJobConfigurationModel)))
            {
                switch (property)
                {
                    case "NotificationTemplateID": return GetScheduledJobConfiguration_NotificationTemplateID(@object);
                    case "NotificationTemplate": return GetScheduledJobConfiguration_NotificationTemplate(@object);
                    case "ScheduledJobConfigurationSettings": return GetScheduledJobConfiguration_ScheduledJobConfigurationSettings(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IScheduledJobConfigurationSettingModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetScheduledJobConfigurationSetting_MasterID(@object);
                    case "SlaveID": return GetScheduledJobConfigurationSetting_SlaveID(@object);
                    case "Slave": return GetScheduledJobConfigurationSetting_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Inventory
            if (type.GetInterfaces().Any(x => x == typeof(IInventoryLocationModel)))
            {
                switch (property)
                {
                    case "ContactID": return GetInventoryLocation_ContactID(@object);
                    case "Contact": return GetInventoryLocation_Contact(@object);
                    case "Brands": return GetInventoryLocation_Brands(@object);
                    case "Stores": return GetInventoryLocation_Stores(@object);
                    case "Sections": return GetInventoryLocation_Sections(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IInventoryLocationSectionModel)))
            {
                switch (property)
                {
                    case "InventoryLocationID": return GetInventoryLocationSection_InventoryLocationID(@object);
                    case "InventoryLocation": return GetInventoryLocationSection_InventoryLocation(@object);
                    case "ProductInventoryLocationSections": return GetInventoryLocationSection_ProductInventoryLocationSections(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Invoicing
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetSalesInvoice_DueDate(@object);
                    case "SubtotalItems": return GetSalesInvoice_SubtotalItems(@object);
                    case "SubtotalShipping": return GetSalesInvoice_SubtotalShipping(@object);
                    case "SubtotalTaxes": return GetSalesInvoice_SubtotalTaxes(@object);
                    case "SubtotalFees": return GetSalesInvoice_SubtotalFees(@object);
                    case "SubtotalHandling": return GetSalesInvoice_SubtotalHandling(@object);
                    case "SubtotalDiscounts": return GetSalesInvoice_SubtotalDiscounts(@object);
                    case "Total": return GetSalesInvoice_Total(@object);
                    case "ShippingSameAsBilling": return GetSalesInvoice_ShippingSameAsBilling(@object);
                    case "BillingContactID": return GetSalesInvoice_BillingContactID(@object);
                    case "BillingContact": return GetSalesInvoice_BillingContact(@object);
                    case "ShippingContactID": return GetSalesInvoice_ShippingContactID(@object);
                    case "ShippingContact": return GetSalesInvoice_ShippingContact(@object);
                    case "StatusID": return GetSalesInvoice_StatusID(@object);
                    case "Status": return GetSalesInvoice_Status(@object);
                    case "StateID": return GetSalesInvoice_StateID(@object);
                    case "State": return GetSalesInvoice_State(@object);
                    case "TypeID": return GetSalesInvoice_TypeID(@object);
                    case "Type": return GetSalesInvoice_Type(@object);
                    case "UserID": return GetSalesInvoice_UserID(@object);
                    case "User": return GetSalesInvoice_User(@object);
                    case "AccountID": return GetSalesInvoice_AccountID(@object);
                    case "Account": return GetSalesInvoice_Account(@object);
                    case "SalesItems": return GetSalesInvoice_SalesItems(@object);
                    case "Discounts": return GetSalesInvoice_Discounts(@object);
                    case "StoredFiles": return GetSalesInvoice_StoredFiles(@object);
                    case "Contacts": return GetSalesInvoice_Contacts(@object);
                    case "RateQuotes": return GetSalesInvoice_RateQuotes(@object);
                    case "Notes": return GetSalesInvoice_Notes(@object);
                    case "StoreID": return GetSalesInvoice_StoreID(@object);
                    case "Store": return GetSalesInvoice_Store(@object);
                    case "BrandID": return GetSalesInvoice_BrandID(@object);
                    case "Brand": return GetSalesInvoice_Brand(@object);
                    case "BalanceDue": return GetSalesInvoice_BalanceDue(@object);
                    case "SalesGroupID": return GetSalesInvoice_SalesGroupID(@object);
                    case "SalesGroup": return GetSalesInvoice_SalesGroup(@object);
                    case "AssociatedSalesOrders": return GetSalesInvoice_AssociatedSalesOrders(@object);
                    case "SalesInvoicePayments": return GetSalesInvoice_SalesInvoicePayments(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesInvoiceContact_MasterID(@object);
                    case "SlaveID": return GetSalesInvoiceContact_SlaveID(@object);
                    case "Slave": return GetSalesInvoiceContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoiceFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesInvoiceFile_MasterID(@object);
                    case "SlaveID": return GetSalesInvoiceFile_SlaveID(@object);
                    case "Slave": return GetSalesInvoiceFile_Slave(@object);
                    case "FileAccessTypeID": return GetSalesInvoiceFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetSalesInvoiceItem_Sku(@object);
                    case "UnitOfMeasure": return GetSalesInvoiceItem_UnitOfMeasure(@object);
                    case "ForceUniqueLineItemKey": return GetSalesInvoiceItem_ForceUniqueLineItemKey(@object);
                    case "Quantity": return GetSalesInvoiceItem_Quantity(@object);
                    case "QuantityBackOrdered": return GetSalesInvoiceItem_QuantityBackOrdered(@object);
                    case "QuantityPreSold": return GetSalesInvoiceItem_QuantityPreSold(@object);
                    case "TotalQuantity": return GetSalesInvoiceItem_TotalQuantity(@object);
                    case "UnitCorePrice": return GetSalesInvoiceItem_UnitCorePrice(@object);
                    case "UnitSoldPrice": return GetSalesInvoiceItem_UnitSoldPrice(@object);
                    case "UnitCorePriceInSellingCurrency": return GetSalesInvoiceItem_UnitCorePriceInSellingCurrency(@object);
                    case "UnitSoldPriceInSellingCurrency": return GetSalesInvoiceItem_UnitSoldPriceInSellingCurrency(@object);
                    case "MasterID": return GetSalesInvoiceItem_MasterID(@object);
                    case "ProductID": return GetSalesInvoiceItem_ProductID(@object);
                    case "UserID": return GetSalesInvoiceItem_UserID(@object);
                    case "User": return GetSalesInvoiceItem_User(@object);
                    case "OriginalCurrencyID": return GetSalesInvoiceItem_OriginalCurrencyID(@object);
                    case "OriginalCurrency": return GetSalesInvoiceItem_OriginalCurrency(@object);
                    case "SellingCurrencyID": return GetSalesInvoiceItem_SellingCurrencyID(@object);
                    case "SellingCurrency": return GetSalesInvoiceItem_SellingCurrency(@object);
                    case "Discounts": return GetSalesInvoiceItem_Discounts(@object);
                    case "Targets": return GetSalesInvoiceItem_Targets(@object);
                    case "Notes": return GetSalesInvoiceItem_Notes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetSalesInvoiceItemTarget_Quantity(@object);
                    case "NothingToShip": return GetSalesInvoiceItemTarget_NothingToShip(@object);
                    case "MasterID": return GetSalesInvoiceItemTarget_MasterID(@object);
                    case "TypeID": return GetSalesInvoiceItemTarget_TypeID(@object);
                    case "Type": return GetSalesInvoiceItemTarget_Type(@object);
                    case "DestinationContactID": return GetSalesInvoiceItemTarget_DestinationContactID(@object);
                    case "DestinationContact": return GetSalesInvoiceItemTarget_DestinationContact(@object);
                    case "OriginProductInventoryLocationSectionID": return GetSalesInvoiceItemTarget_OriginProductInventoryLocationSectionID(@object);
                    case "OriginProductInventoryLocationSection": return GetSalesInvoiceItemTarget_OriginProductInventoryLocationSection(@object);
                    case "OriginStoreProductID": return GetSalesInvoiceItemTarget_OriginStoreProductID(@object);
                    case "OriginStoreProduct": return GetSalesInvoiceItemTarget_OriginStoreProduct(@object);
                    case "BrandProductID": return GetSalesInvoiceItemTarget_BrandProductID(@object);
                    case "BrandProduct": return GetSalesInvoiceItemTarget_BrandProduct(@object);
                    case "OriginVendorProductID": return GetSalesInvoiceItemTarget_OriginVendorProductID(@object);
                    case "OriginVendorProduct": return GetSalesInvoiceItemTarget_OriginVendorProduct(@object);
                    case "SelectedRateQuoteID": return GetSalesInvoiceItemTarget_SelectedRateQuoteID(@object);
                    case "SelectedRateQuote": return GetSalesInvoiceItemTarget_SelectedRateQuote(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesInvoiceState_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesInvoiceStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesInvoiceType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderSalesInvoiceModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesOrderSalesInvoice_MasterID(@object);
                    case "SlaveID": return GetSalesOrderSalesInvoice_SlaveID(@object);
                    case "Slave": return GetSalesOrderSalesInvoice_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Manufacturers
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetManufacturer_TypeID(@object);
                    case "Type": return GetManufacturer_Type(@object);
                    case "ContactID": return GetManufacturer_ContactID(@object);
                    case "Contact": return GetManufacturer_Contact(@object);
                    case "Notes": return GetManufacturer_Notes(@object);
                    case "Images": return GetManufacturer_Images(@object);
                    case "MinimumOrderDollarAmountWarningMessage": return GetManufacturer_MinimumOrderDollarAmountWarningMessage(@object);
                    case "MinimumOrderDollarAmount": return GetManufacturer_MinimumOrderDollarAmount(@object);
                    case "MinimumOrderDollarAmountAfter": return GetManufacturer_MinimumOrderDollarAmountAfter(@object);
                    case "MinimumOrderDollarAmountOverrideFee": return GetManufacturer_MinimumOrderDollarAmountOverrideFee(@object);
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetManufacturer_MinimumOrderDollarAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetManufacturer_MinimumOrderDollarAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetManufacturer_MinimumOrderDollarAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderQuantityAmount": return GetManufacturer_MinimumOrderQuantityAmount(@object);
                    case "MinimumOrderQuantityAmountAfter": return GetManufacturer_MinimumOrderQuantityAmountAfter(@object);
                    case "MinimumOrderQuantityAmountWarningMessage": return GetManufacturer_MinimumOrderQuantityAmountWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFee": return GetManufacturer_MinimumOrderQuantityAmountOverrideFee(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetManufacturer_MinimumOrderQuantityAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetManufacturer_MinimumOrderQuantityAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetManufacturer_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderDollarAmountBufferProductID": return GetManufacturer_MinimumOrderDollarAmountBufferProductID(@object);
                    case "MinimumOrderDollarAmountBufferProduct": return GetManufacturer_MinimumOrderDollarAmountBufferProduct(@object);
                    case "MinimumOrderQuantityAmountBufferProductID": return GetManufacturer_MinimumOrderQuantityAmountBufferProductID(@object);
                    case "MinimumOrderQuantityAmountBufferProduct": return GetManufacturer_MinimumOrderQuantityAmountBufferProduct(@object);
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetManufacturer_MinimumOrderDollarAmountBufferCategoryID(@object);
                    case "MinimumOrderDollarAmountBufferCategory": return GetManufacturer_MinimumOrderDollarAmountBufferCategory(@object);
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetManufacturer_MinimumOrderQuantityAmountBufferCategoryID(@object);
                    case "MinimumOrderQuantityAmountBufferCategory": return GetManufacturer_MinimumOrderQuantityAmountBufferCategory(@object);
                    case "MinimumForFreeShippingDollarAmount": return GetManufacturer_MinimumForFreeShippingDollarAmount(@object);
                    case "MinimumForFreeShippingDollarAmountAfter": return GetManufacturer_MinimumForFreeShippingDollarAmountAfter(@object);
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetManufacturer_MinimumForFreeShippingDollarAmountWarningMessage(@object);
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetManufacturer_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingQuantityAmount": return GetManufacturer_MinimumForFreeShippingQuantityAmount(@object);
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetManufacturer_MinimumForFreeShippingQuantityAmountAfter(@object);
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetManufacturer_MinimumForFreeShippingQuantityAmountWarningMessage(@object);
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetManufacturer_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetManufacturer_MinimumForFreeShippingDollarAmountBufferProductID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetManufacturer_MinimumForFreeShippingDollarAmountBufferProduct(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetManufacturer_MinimumForFreeShippingQuantityAmountBufferProductID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetManufacturer_MinimumForFreeShippingQuantityAmountBufferProduct(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetManufacturer_MinimumForFreeShippingDollarAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetManufacturer_MinimumForFreeShippingDollarAmountBufferCategory(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetManufacturer_MinimumForFreeShippingQuantityAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetManufacturer_MinimumForFreeShippingQuantityAmountBufferCategory(@object);
                    case "Products": return GetManufacturer_Products(@object);
                    case "Vendors": return GetManufacturer_Vendors(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetManufacturerImage_MasterID(@object);
                    case "TypeID": return GetManufacturerImage_TypeID(@object);
                    case "Type": return GetManufacturerImage_Type(@object);
                    case "SeoTitle": return GetManufacturerImage_SeoTitle(@object);
                    case "Author": return GetManufacturerImage_Author(@object);
                    case "MediaDate": return GetManufacturerImage_MediaDate(@object);
                    case "Copyright": return GetManufacturerImage_Copyright(@object);
                    case "Location": return GetManufacturerImage_Location(@object);
                    case "Latitude": return GetManufacturerImage_Latitude(@object);
                    case "Longitude": return GetManufacturerImage_Longitude(@object);
                    case "IsPrimary": return GetManufacturerImage_IsPrimary(@object);
                    case "OriginalWidth": return GetManufacturerImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetManufacturerImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetManufacturerImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetManufacturerImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetManufacturerImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetManufacturerImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetManufacturerImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetManufacturerImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetManufacturerImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetManufacturerImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetManufacturerImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetManufacturerImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetManufacturerImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IManufacturerProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetManufacturerProduct_MasterID(@object);
                    case "SlaveID": return GetManufacturerProduct_SlaveID(@object);
                    case "Slave": return GetManufacturerProduct_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetManufacturerType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Media
            if (type.GetInterfaces().Any(x => x == typeof(IStoredFileModel)))
            {
                switch (property)
                {
                    case "SeoTitle": return GetStoredFile_SeoTitle(@object);
                    case "Author": return GetStoredFile_Author(@object);
                    case "Copyright": return GetStoredFile_Copyright(@object);
                    case "FileFormat": return GetStoredFile_FileFormat(@object);
                    case "FileName": return GetStoredFile_FileName(@object);
                    case "IsStoredInDB": return GetStoredFile_IsStoredInDB(@object);
                    case "Bytes": return GetStoredFile_Bytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Messaging
            if (type.GetInterfaces().Any(x => x == typeof(IConversationModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetConversation_StoreID(@object);
                    case "Store": return GetConversation_Store(@object);
                    case "BrandID": return GetConversation_BrandID(@object);
                    case "Brand": return GetConversation_Brand(@object);
                    case "Users": return GetConversation_Users(@object);
                    case "HasEnded": return GetConversation_HasEnded(@object);
                    case "CopyUserWhenEnded": return GetConversation_CopyUserWhenEnded(@object);
                    case "Messages": return GetConversation_Messages(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IConversationUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetConversationUser_MasterID(@object);
                    case "SlaveID": return GetConversationUser_SlaveID(@object);
                    case "Slave": return GetConversationUser_Slave(@object);
                    case "LastHeartbeat": return GetConversationUser_LastHeartbeat(@object);
                    case "IsTyping": return GetConversationUser_IsTyping(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailQueueModel)))
            {
                switch (property)
                {
                    case "AddressesTo": return GetEmailQueue_AddressesTo(@object);
                    case "AddressesCc": return GetEmailQueue_AddressesCc(@object);
                    case "AddressesBcc": return GetEmailQueue_AddressesBcc(@object);
                    case "AddressFrom": return GetEmailQueue_AddressFrom(@object);
                    case "Subject": return GetEmailQueue_Subject(@object);
                    case "Body": return GetEmailQueue_Body(@object);
                    case "Attempts": return GetEmailQueue_Attempts(@object);
                    case "IsHtml": return GetEmailQueue_IsHtml(@object);
                    case "HasError": return GetEmailQueue_HasError(@object);
                    case "TypeID": return GetEmailQueue_TypeID(@object);
                    case "Type": return GetEmailQueue_Type(@object);
                    case "StatusID": return GetEmailQueue_StatusID(@object);
                    case "Status": return GetEmailQueue_Status(@object);
                    case "EmailTemplateID": return GetEmailQueue_EmailTemplateID(@object);
                    case "EmailTemplate": return GetEmailQueue_EmailTemplate(@object);
                    case "MessageRecipientID": return GetEmailQueue_MessageRecipientID(@object);
                    case "MessageRecipient": return GetEmailQueue_MessageRecipient(@object);
                    case "EmailQueueAttachments": return GetEmailQueue_EmailQueueAttachments(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailQueueAttachmentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetEmailQueueAttachment_MasterID(@object);
                    case "SlaveID": return GetEmailQueueAttachment_SlaveID(@object);
                    case "Slave": return GetEmailQueueAttachment_Slave(@object);
                    case "FileAccessTypeID": return GetEmailQueueAttachment_FileAccessTypeID(@object);
                    case "CreatedByUserID": return GetEmailQueueAttachment_CreatedByUserID(@object);
                    case "CreatedByUser": return GetEmailQueueAttachment_CreatedByUser(@object);
                    case "UpdatedByUserID": return GetEmailQueueAttachment_UpdatedByUserID(@object);
                    case "UpdatedByUser": return GetEmailQueueAttachment_UpdatedByUser(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetEmailStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEmailTemplateModel)))
            {
                switch (property)
                {
                    case "Subject": return GetEmailTemplate_Subject(@object);
                    case "Body": return GetEmailTemplate_Body(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetEmailType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetMessage_StoreID(@object);
                    case "Store": return GetMessage_Store(@object);
                    case "BrandID": return GetMessage_BrandID(@object);
                    case "Brand": return GetMessage_Brand(@object);
                    case "Subject": return GetMessage_Subject(@object);
                    case "Context": return GetMessage_Context(@object);
                    case "Body": return GetMessage_Body(@object);
                    case "IsReplyAllAllowed": return GetMessage_IsReplyAllAllowed(@object);
                    case "ConversationID": return GetMessage_ConversationID(@object);
                    case "Conversation": return GetMessage_Conversation(@object);
                    case "SentByUserID": return GetMessage_SentByUserID(@object);
                    case "SentByUser": return GetMessage_SentByUser(@object);
                    case "MessageRecipients": return GetMessage_MessageRecipients(@object);
                    case "MessageAttachments": return GetMessage_MessageAttachments(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageAttachmentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetMessageAttachment_MasterID(@object);
                    case "SlaveID": return GetMessageAttachment_SlaveID(@object);
                    case "Slave": return GetMessageAttachment_Slave(@object);
                    case "CreatedByUserID": return GetMessageAttachment_CreatedByUserID(@object);
                    case "CreatedByUser": return GetMessageAttachment_CreatedByUser(@object);
                    case "UpdatedByUserID": return GetMessageAttachment_UpdatedByUserID(@object);
                    case "UpdatedByUser": return GetMessageAttachment_UpdatedByUser(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMessageRecipientModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetMessageRecipient_MasterID(@object);
                    case "SlaveID": return GetMessageRecipient_SlaveID(@object);
                    case "Slave": return GetMessageRecipient_Slave(@object);
                    case "IsRead": return GetMessageRecipient_IsRead(@object);
                    case "ReadAt": return GetMessageRecipient_ReadAt(@object);
                    case "IsArchived": return GetMessageRecipient_IsArchived(@object);
                    case "ArchivedAt": return GetMessageRecipient_ArchivedAt(@object);
                    case "HasSentAnEmail": return GetMessageRecipient_HasSentAnEmail(@object);
                    case "EmailSentAt": return GetMessageRecipient_EmailSentAt(@object);
                    case "GroupID": return GetMessageRecipient_GroupID(@object);
                    case "Group": return GetMessageRecipient_Group(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductNotificationModel)))
            {
                switch (property)
                {
                    case "ProductID": return GetProductNotification_ProductID(@object);
                    case "Product": return GetProductNotification_Product(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Ordering
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetSalesOrder_DueDate(@object);
                    case "SubtotalItems": return GetSalesOrder_SubtotalItems(@object);
                    case "SubtotalShipping": return GetSalesOrder_SubtotalShipping(@object);
                    case "SubtotalTaxes": return GetSalesOrder_SubtotalTaxes(@object);
                    case "SubtotalFees": return GetSalesOrder_SubtotalFees(@object);
                    case "SubtotalHandling": return GetSalesOrder_SubtotalHandling(@object);
                    case "SubtotalDiscounts": return GetSalesOrder_SubtotalDiscounts(@object);
                    case "Total": return GetSalesOrder_Total(@object);
                    case "ShippingSameAsBilling": return GetSalesOrder_ShippingSameAsBilling(@object);
                    case "BillingContactID": return GetSalesOrder_BillingContactID(@object);
                    case "BillingContact": return GetSalesOrder_BillingContact(@object);
                    case "ShippingContactID": return GetSalesOrder_ShippingContactID(@object);
                    case "ShippingContact": return GetSalesOrder_ShippingContact(@object);
                    case "StatusID": return GetSalesOrder_StatusID(@object);
                    case "Status": return GetSalesOrder_Status(@object);
                    case "StateID": return GetSalesOrder_StateID(@object);
                    case "State": return GetSalesOrder_State(@object);
                    case "TypeID": return GetSalesOrder_TypeID(@object);
                    case "Type": return GetSalesOrder_Type(@object);
                    case "UserID": return GetSalesOrder_UserID(@object);
                    case "User": return GetSalesOrder_User(@object);
                    case "AccountID": return GetSalesOrder_AccountID(@object);
                    case "Account": return GetSalesOrder_Account(@object);
                    case "SalesItems": return GetSalesOrder_SalesItems(@object);
                    case "Discounts": return GetSalesOrder_Discounts(@object);
                    case "StoredFiles": return GetSalesOrder_StoredFiles(@object);
                    case "Contacts": return GetSalesOrder_Contacts(@object);
                    case "RateQuotes": return GetSalesOrder_RateQuotes(@object);
                    case "Notes": return GetSalesOrder_Notes(@object);
                    case "StoreID": return GetSalesOrder_StoreID(@object);
                    case "Store": return GetSalesOrder_Store(@object);
                    case "BrandID": return GetSalesOrder_BrandID(@object);
                    case "Brand": return GetSalesOrder_Brand(@object);
                    case "PurchaseOrderNumber": return GetSalesOrder_PurchaseOrderNumber(@object);
                    case "BalanceDue": return GetSalesOrder_BalanceDue(@object);
                    case "TrackingNumber": return GetSalesOrder_TrackingNumber(@object);
                    case "PaymentTransactionID": return GetSalesOrder_PaymentTransactionID(@object);
                    case "TaxTransactionID": return GetSalesOrder_TaxTransactionID(@object);
                    case "OrderApprovedDate": return GetSalesOrder_OrderApprovedDate(@object);
                    case "OrderCommitmentDate": return GetSalesOrder_OrderCommitmentDate(@object);
                    case "RequiredShipDate": return GetSalesOrder_RequiredShipDate(@object);
                    case "RequestedShipDate": return GetSalesOrder_RequestedShipDate(@object);
                    case "ActualShipDate": return GetSalesOrder_ActualShipDate(@object);
                    case "SalesGroupAsMasterID": return GetSalesOrder_SalesGroupAsMasterID(@object);
                    case "SalesGroupAsSubID": return GetSalesOrder_SalesGroupAsSubID(@object);
                    case "SalesOrderPayments": return GetSalesOrder_SalesOrderPayments(@object);
                    case "AssociatedSalesQuotes": return GetSalesOrder_AssociatedSalesQuotes(@object);
                    case "AssociatedSalesReturns": return GetSalesOrder_AssociatedSalesReturns(@object);
                    case "AssociatedSalesInvoices": return GetSalesOrder_AssociatedSalesInvoices(@object);
                    case "AssociatedPurchaseOrders": return GetSalesOrder_AssociatedPurchaseOrders(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesOrderContact_MasterID(@object);
                    case "SlaveID": return GetSalesOrderContact_SlaveID(@object);
                    case "Slave": return GetSalesOrderContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderEventModel)))
            {
                switch (property)
                {
                    case "OldStateID": return GetSalesOrderEvent_OldStateID(@object);
                    case "NewStateID": return GetSalesOrderEvent_NewStateID(@object);
                    case "OldStatusID": return GetSalesOrderEvent_OldStatusID(@object);
                    case "NewStatusID": return GetSalesOrderEvent_NewStatusID(@object);
                    case "OldTypeID": return GetSalesOrderEvent_OldTypeID(@object);
                    case "NewTypeID": return GetSalesOrderEvent_NewTypeID(@object);
                    case "OldBalanceDue": return GetSalesOrderEvent_OldBalanceDue(@object);
                    case "NewBalanceDue": return GetSalesOrderEvent_NewBalanceDue(@object);
                    case "OldHash": return GetSalesOrderEvent_OldHash(@object);
                    case "NewHash": return GetSalesOrderEvent_NewHash(@object);
                    case "OldRecordSerialized": return GetSalesOrderEvent_OldRecordSerialized(@object);
                    case "NewRecordSerialized": return GetSalesOrderEvent_NewRecordSerialized(@object);
                    case "SalesOrderID": return GetSalesOrderEvent_SalesOrderID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesOrderFile_MasterID(@object);
                    case "SlaveID": return GetSalesOrderFile_SlaveID(@object);
                    case "Slave": return GetSalesOrderFile_Slave(@object);
                    case "FileAccessTypeID": return GetSalesOrderFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetSalesOrderItem_Sku(@object);
                    case "UnitOfMeasure": return GetSalesOrderItem_UnitOfMeasure(@object);
                    case "ForceUniqueLineItemKey": return GetSalesOrderItem_ForceUniqueLineItemKey(@object);
                    case "Quantity": return GetSalesOrderItem_Quantity(@object);
                    case "QuantityBackOrdered": return GetSalesOrderItem_QuantityBackOrdered(@object);
                    case "QuantityPreSold": return GetSalesOrderItem_QuantityPreSold(@object);
                    case "TotalQuantity": return GetSalesOrderItem_TotalQuantity(@object);
                    case "UnitCorePrice": return GetSalesOrderItem_UnitCorePrice(@object);
                    case "UnitSoldPrice": return GetSalesOrderItem_UnitSoldPrice(@object);
                    case "UnitCorePriceInSellingCurrency": return GetSalesOrderItem_UnitCorePriceInSellingCurrency(@object);
                    case "UnitSoldPriceInSellingCurrency": return GetSalesOrderItem_UnitSoldPriceInSellingCurrency(@object);
                    case "MasterID": return GetSalesOrderItem_MasterID(@object);
                    case "ProductID": return GetSalesOrderItem_ProductID(@object);
                    case "UserID": return GetSalesOrderItem_UserID(@object);
                    case "User": return GetSalesOrderItem_User(@object);
                    case "OriginalCurrencyID": return GetSalesOrderItem_OriginalCurrencyID(@object);
                    case "OriginalCurrency": return GetSalesOrderItem_OriginalCurrency(@object);
                    case "SellingCurrencyID": return GetSalesOrderItem_SellingCurrencyID(@object);
                    case "SellingCurrency": return GetSalesOrderItem_SellingCurrency(@object);
                    case "Discounts": return GetSalesOrderItem_Discounts(@object);
                    case "Targets": return GetSalesOrderItem_Targets(@object);
                    case "Notes": return GetSalesOrderItem_Notes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetSalesOrderItemTarget_Quantity(@object);
                    case "NothingToShip": return GetSalesOrderItemTarget_NothingToShip(@object);
                    case "MasterID": return GetSalesOrderItemTarget_MasterID(@object);
                    case "TypeID": return GetSalesOrderItemTarget_TypeID(@object);
                    case "Type": return GetSalesOrderItemTarget_Type(@object);
                    case "DestinationContactID": return GetSalesOrderItemTarget_DestinationContactID(@object);
                    case "DestinationContact": return GetSalesOrderItemTarget_DestinationContact(@object);
                    case "OriginProductInventoryLocationSectionID": return GetSalesOrderItemTarget_OriginProductInventoryLocationSectionID(@object);
                    case "OriginProductInventoryLocationSection": return GetSalesOrderItemTarget_OriginProductInventoryLocationSection(@object);
                    case "OriginStoreProductID": return GetSalesOrderItemTarget_OriginStoreProductID(@object);
                    case "OriginStoreProduct": return GetSalesOrderItemTarget_OriginStoreProduct(@object);
                    case "BrandProductID": return GetSalesOrderItemTarget_BrandProductID(@object);
                    case "BrandProduct": return GetSalesOrderItemTarget_BrandProduct(@object);
                    case "OriginVendorProductID": return GetSalesOrderItemTarget_OriginVendorProductID(@object);
                    case "OriginVendorProduct": return GetSalesOrderItemTarget_OriginVendorProduct(@object);
                    case "SelectedRateQuoteID": return GetSalesOrderItemTarget_SelectedRateQuoteID(@object);
                    case "SelectedRateQuote": return GetSalesOrderItemTarget_SelectedRateQuote(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesOrderState_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesOrderStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesOrderType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Payments
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipModel)))
            {
                switch (property)
                {
                    case "IsContractual": return GetMembership_IsContractual(@object);
                    case "MembershipLevels": return GetMembership_MembershipLevels(@object);
                    case "MembershipRepeatTypes": return GetMembership_MembershipRepeatTypes(@object);
                    case "TranslationKey": return GetMembership_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipAdZoneAccessModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetMembershipAdZoneAccess_MasterID(@object);
                    case "SlaveID": return GetMembershipAdZoneAccess_SlaveID(@object);
                    case "Slave": return GetMembershipAdZoneAccess_Slave(@object);
                    case "MembershipAdZoneAccessByLevels": return GetMembershipAdZoneAccess_MembershipAdZoneAccessByLevels(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipAdZoneAccessByLevelModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetMembershipAdZoneAccessByLevel_MasterID(@object);
                    case "SlaveID": return GetMembershipAdZoneAccessByLevel_SlaveID(@object);
                    case "Slave": return GetMembershipAdZoneAccessByLevel_Slave(@object);
                    case "SubscriberCountThreshold": return GetMembershipAdZoneAccessByLevel_SubscriberCountThreshold(@object);
                    case "UniqueAdLimit": return GetMembershipAdZoneAccessByLevel_UniqueAdLimit(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipLevelModel)))
            {
                switch (property)
                {
                    case "RolesApplied": return GetMembershipLevel_RolesApplied(@object);
                    case "MembershipID": return GetMembershipLevel_MembershipID(@object);
                    case "Membership": return GetMembershipLevel_Membership(@object);
                    case "MembershipAdZoneAccessByLevels": return GetMembershipLevel_MembershipAdZoneAccessByLevels(@object);
                    case "TranslationKey": return GetMembershipLevel_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IMembershipRepeatTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetMembershipRepeatType_MasterID(@object);
                    case "SlaveID": return GetMembershipRepeatType_SlaveID(@object);
                    case "Slave": return GetMembershipRepeatType_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPaymentModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetPayment_StoreID(@object);
                    case "Store": return GetPayment_Store(@object);
                    case "BrandID": return GetPayment_BrandID(@object);
                    case "Brand": return GetPayment_Brand(@object);
                    case "Amount": return GetPayment_Amount(@object);
                    case "AuthCode": return GetPayment_AuthCode(@object);
                    case "ReferenceNo": return GetPayment_ReferenceNo(@object);
                    case "TransactionNumber": return GetPayment_TransactionNumber(@object);
                    case "StatusDate": return GetPayment_StatusDate(@object);
                    case "Authorized": return GetPayment_Authorized(@object);
                    case "AuthDate": return GetPayment_AuthDate(@object);
                    case "Received": return GetPayment_Received(@object);
                    case "ReceivedDate": return GetPayment_ReceivedDate(@object);
                    case "Response": return GetPayment_Response(@object);
                    case "ExternalCustomerID": return GetPayment_ExternalCustomerID(@object);
                    case "ExternalPaymentID": return GetPayment_ExternalPaymentID(@object);
                    case "PaymentData": return GetPayment_PaymentData(@object);
                    case "CardTypeID": return GetPayment_CardTypeID(@object);
                    case "CardMask": return GetPayment_CardMask(@object);
                    case "CVV": return GetPayment_CVV(@object);
                    case "Last4CardDigits": return GetPayment_Last4CardDigits(@object);
                    case "ExpirationMonth": return GetPayment_ExpirationMonth(@object);
                    case "ExpirationYear": return GetPayment_ExpirationYear(@object);
                    case "CheckNumber": return GetPayment_CheckNumber(@object);
                    case "RoutingNumberLast4": return GetPayment_RoutingNumberLast4(@object);
                    case "AccountNumberLast4": return GetPayment_AccountNumberLast4(@object);
                    case "BankName": return GetPayment_BankName(@object);
                    case "TypeID": return GetPayment_TypeID(@object);
                    case "Type": return GetPayment_Type(@object);
                    case "StatusID": return GetPayment_StatusID(@object);
                    case "Status": return GetPayment_Status(@object);
                    case "BillingContactID": return GetPayment_BillingContactID(@object);
                    case "BillingContact": return GetPayment_BillingContact(@object);
                    case "PaymentMethodID": return GetPayment_PaymentMethodID(@object);
                    case "PaymentMethod": return GetPayment_PaymentMethod(@object);
                    case "CurrencyID": return GetPayment_CurrencyID(@object);
                    case "Currency": return GetPayment_Currency(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPaymentMethodModel)))
            {
                switch (property)
                {
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPaymentStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPaymentType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRepeatTypeModel)))
            {
                switch (property)
                {
                    case "RepeatableBillingPeriods": return GetRepeatType_RepeatableBillingPeriods(@object);
                    case "InitialBonusBillingPeriods": return GetRepeatType_InitialBonusBillingPeriods(@object);
                    case "TranslationKey": return GetRepeatType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesInvoicePaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesInvoicePayment_MasterID(@object);
                    case "SlaveID": return GetSalesInvoicePayment_SlaveID(@object);
                    case "Slave": return GetSalesInvoicePayment_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderPaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesOrderPayment_MasterID(@object);
                    case "SlaveID": return GetSalesOrderPayment_SlaveID(@object);
                    case "Slave": return GetSalesOrderPayment_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnPaymentModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesReturnPayment_MasterID(@object);
                    case "SlaveID": return GetSalesReturnPayment_SlaveID(@object);
                    case "Slave": return GetSalesReturnPayment_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetSubscription_TypeID(@object);
                    case "Type": return GetSubscription_Type(@object);
                    case "StatusID": return GetSubscription_StatusID(@object);
                    case "Status": return GetSubscription_Status(@object);
                    case "MemberSince": return GetSubscription_MemberSince(@object);
                    case "StartsOn": return GetSubscription_StartsOn(@object);
                    case "EndsOn": return GetSubscription_EndsOn(@object);
                    case "LastPaidDate": return GetSubscription_LastPaidDate(@object);
                    case "BillingPeriodsTotal": return GetSubscription_BillingPeriodsTotal(@object);
                    case "BillingPeriodsPaid": return GetSubscription_BillingPeriodsPaid(@object);
                    case "Fee": return GetSubscription_Fee(@object);
                    case "CreditUponUpgrade": return GetSubscription_CreditUponUpgrade(@object);
                    case "AutoRenew": return GetSubscription_AutoRenew(@object);
                    case "CanUpgrade": return GetSubscription_CanUpgrade(@object);
                    case "Memo": return GetSubscription_Memo(@object);
                    case "ProductMembershipLevelID": return GetSubscription_ProductMembershipLevelID(@object);
                    case "ProductMembershipLevel": return GetSubscription_ProductMembershipLevel(@object);
                    case "RepeatTypeID": return GetSubscription_RepeatTypeID(@object);
                    case "RepeatType": return GetSubscription_RepeatType(@object);
                    case "SalesInvoiceID": return GetSubscription_SalesInvoiceID(@object);
                    case "SalesInvoice": return GetSubscription_SalesInvoice(@object);
                    case "UserID": return GetSubscription_UserID(@object);
                    case "User": return GetSubscription_User(@object);
                    case "AccountID": return GetSubscription_AccountID(@object);
                    case "Account": return GetSubscription_Account(@object);
                    case "SubscriptionHistories": return GetSubscription_SubscriptionHistories(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionHistoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSubscriptionHistory_MasterID(@object);
                    case "SlaveID": return GetSubscriptionHistory_SlaveID(@object);
                    case "Slave": return GetSubscriptionHistory_Slave(@object);
                    case "PaymentDate": return GetSubscriptionHistory_PaymentDate(@object);
                    case "PaymentSuccess": return GetSubscriptionHistory_PaymentSuccess(@object);
                    case "Memo": return GetSubscriptionHistory_Memo(@object);
                    case "BillingPeriodsPaid": return GetSubscriptionHistory_BillingPeriodsPaid(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSubscriptionStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISubscriptionTypeModel)))
            {
                switch (property)
                {
                    case "ProductSubscriptionTypes": return GetSubscriptionType_ProductSubscriptionTypes(@object);
                    case "TranslationKey": return GetSubscriptionType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IWalletModel)))
            {
                switch (property)
                {
                    case "CreditCardNumber": return GetWallet_CreditCardNumber(@object);
                    case "AccountNumber": return GetWallet_AccountNumber(@object);
                    case "RoutingNumber": return GetWallet_RoutingNumber(@object);
                    case "BankName": return GetWallet_BankName(@object);
                    case "ExpirationMonth": return GetWallet_ExpirationMonth(@object);
                    case "ExpirationYear": return GetWallet_ExpirationYear(@object);
                    case "Token": return GetWallet_Token(@object);
                    case "CardType": return GetWallet_CardType(@object);
                    case "CardHolderName": return GetWallet_CardHolderName(@object);
                    case "UserID": return GetWallet_UserID(@object);
                    case "User": return GetWallet_User(@object);
                    case "CurrencyID": return GetWallet_CurrencyID(@object);
                    case "Currency": return GetWallet_Currency(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Pricing
            if (type.GetInterfaces().Any(x => x == typeof(IPricePointModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPricePoint_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRoundingModel)))
            {
                switch (property)
                {
                    case "PricePointKey": return GetPriceRounding_PricePointKey(@object);
                    case "ProductKey": return GetPriceRounding_ProductKey(@object);
                    case "CurrencyKey": return GetPriceRounding_CurrencyKey(@object);
                    case "UnitOfMeasure": return GetPriceRounding_UnitOfMeasure(@object);
                    case "RoundHow": return GetPriceRounding_RoundHow(@object);
                    case "RoundTo": return GetPriceRounding_RoundTo(@object);
                    case "RoundingAmount": return GetPriceRounding_RoundingAmount(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleModel)))
            {
                switch (property)
                {
                    case "StartDate": return GetPriceRule_StartDate(@object);
                    case "EndDate": return GetPriceRule_EndDate(@object);
                    case "UnitOfMeasure": return GetPriceRule_UnitOfMeasure(@object);
                    case "PriceAdjustment": return GetPriceRule_PriceAdjustment(@object);
                    case "MinQuantity": return GetPriceRule_MinQuantity(@object);
                    case "MaxQuantity": return GetPriceRule_MaxQuantity(@object);
                    case "IsPercentage": return GetPriceRule_IsPercentage(@object);
                    case "IsMarkup": return GetPriceRule_IsMarkup(@object);
                    case "UsePriceBase": return GetPriceRule_UsePriceBase(@object);
                    case "IsExclusive": return GetPriceRule_IsExclusive(@object);
                    case "IsOnlyForAnonymousUsers": return GetPriceRule_IsOnlyForAnonymousUsers(@object);
                    case "Priority": return GetPriceRule_Priority(@object);
                    case "CurrencyID": return GetPriceRule_CurrencyID(@object);
                    case "Currency": return GetPriceRule_Currency(@object);
                    case "Products": return GetPriceRule_Products(@object);
                    case "Brands": return GetPriceRule_Brands(@object);
                    case "Stores": return GetPriceRule_Stores(@object);
                    case "Accounts": return GetPriceRule_Accounts(@object);
                    case "Vendors": return GetPriceRule_Vendors(@object);
                    case "Manufacturers": return GetPriceRule_Manufacturers(@object);
                    case "PriceRuleCountries": return GetPriceRule_PriceRuleCountries(@object);
                    case "PriceRuleUserRoles": return GetPriceRule_PriceRuleUserRoles(@object);
                    case "PriceRuleCategories": return GetPriceRule_PriceRuleCategories(@object);
                    case "PriceRuleAccountTypes": return GetPriceRule_PriceRuleAccountTypes(@object);
                    case "PriceRuleProductTypes": return GetPriceRule_PriceRuleProductTypes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleAccount_MasterID(@object);
                    case "SlaveID": return GetPriceRuleAccount_SlaveID(@object);
                    case "Slave": return GetPriceRuleAccount_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleAccountTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleAccountType_MasterID(@object);
                    case "SlaveID": return GetPriceRuleAccountType_SlaveID(@object);
                    case "Slave": return GetPriceRuleAccountType_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleBrandModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleBrand_MasterID(@object);
                    case "SlaveID": return GetPriceRuleBrand_SlaveID(@object);
                    case "Slave": return GetPriceRuleBrand_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleCategory_MasterID(@object);
                    case "SlaveID": return GetPriceRuleCategory_SlaveID(@object);
                    case "Slave": return GetPriceRuleCategory_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleCountryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleCountry_MasterID(@object);
                    case "SlaveID": return GetPriceRuleCountry_SlaveID(@object);
                    case "Slave": return GetPriceRuleCountry_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleManufacturer_MasterID(@object);
                    case "SlaveID": return GetPriceRuleManufacturer_SlaveID(@object);
                    case "Slave": return GetPriceRuleManufacturer_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleProduct_MasterID(@object);
                    case "SlaveID": return GetPriceRuleProduct_SlaveID(@object);
                    case "Slave": return GetPriceRuleProduct_Slave(@object);
                    case "OverridePrice": return GetPriceRuleProduct_OverridePrice(@object);
                    case "OverrideBasePrice": return GetPriceRuleProduct_OverrideBasePrice(@object);
                    case "OverrideSalePrice": return GetPriceRuleProduct_OverrideSalePrice(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleProductTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleProductType_MasterID(@object);
                    case "SlaveID": return GetPriceRuleProductType_SlaveID(@object);
                    case "Slave": return GetPriceRuleProductType_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleStoreModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleStore_MasterID(@object);
                    case "SlaveID": return GetPriceRuleStore_SlaveID(@object);
                    case "Slave": return GetPriceRuleStore_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleUserRoleModel)))
            {
                switch (property)
                {
                    case "RoleName": return GetPriceRuleUserRole_RoleName(@object);
                    case "PriceRuleID": return GetPriceRuleUserRole_PriceRuleID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPriceRuleVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPriceRuleVendor_MasterID(@object);
                    case "SlaveID": return GetPriceRuleVendor_SlaveID(@object);
                    case "Slave": return GetPriceRuleVendor_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Products
            if (type.GetInterfaces().Any(x => x == typeof(IFutureImportModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetFutureImport_StatusID(@object);
                    case "Status": return GetFutureImport_Status(@object);
                    case "StoreID": return GetFutureImport_StoreID(@object);
                    case "Store": return GetFutureImport_Store(@object);
                    case "FileName": return GetFutureImport_FileName(@object);
                    case "RunImportAt": return GetFutureImport_RunImportAt(@object);
                    case "Attempts": return GetFutureImport_Attempts(@object);
                    case "HasError": return GetFutureImport_HasError(@object);
                    case "VendorID": return GetFutureImport_VendorID(@object);
                    case "Vendor": return GetFutureImport_Vendor(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetFutureImportStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetProduct_StatusID(@object);
                    case "Status": return GetProduct_Status(@object);
                    case "TypeID": return GetProduct_TypeID(@object);
                    case "Type": return GetProduct_Type(@object);
                    case "RequiresRoles": return GetProduct_RequiresRoles(@object);
                    case "RequiresRolesList": return GetProduct_RequiresRolesList(@object);
                    case "RequiresRolesAlt": return GetProduct_RequiresRolesAlt(@object);
                    case "RequiresRolesListAlt": return GetProduct_RequiresRolesListAlt(@object);
                    case "Weight": return GetProduct_Weight(@object);
                    case "WeightUnitOfMeasure": return GetProduct_WeightUnitOfMeasure(@object);
                    case "Width": return GetProduct_Width(@object);
                    case "WidthUnitOfMeasure": return GetProduct_WidthUnitOfMeasure(@object);
                    case "Depth": return GetProduct_Depth(@object);
                    case "DepthUnitOfMeasure": return GetProduct_DepthUnitOfMeasure(@object);
                    case "Height": return GetProduct_Height(@object);
                    case "HeightUnitOfMeasure": return GetProduct_HeightUnitOfMeasure(@object);
                    case "Images": return GetProduct_Images(@object);
                    case "StoredFiles": return GetProduct_StoredFiles(@object);
                    case "Brands": return GetProduct_Brands(@object);
                    case "Stores": return GetProduct_Stores(@object);
                    case "Accounts": return GetProduct_Accounts(@object);
                    case "Vendors": return GetProduct_Vendors(@object);
                    case "Manufacturers": return GetProduct_Manufacturers(@object);
                    case "IsVisible": return GetProduct_IsVisible(@object);
                    case "IsDiscontinued": return GetProduct_IsDiscontinued(@object);
                    case "IsEligibleForReturn": return GetProduct_IsEligibleForReturn(@object);
                    case "IsTaxable": return GetProduct_IsTaxable(@object);
                    case "AllowBackOrder": return GetProduct_AllowBackOrder(@object);
                    case "AllowPreSale": return GetProduct_AllowPreSale(@object);
                    case "IsUnlimitedStock": return GetProduct_IsUnlimitedStock(@object);
                    case "IsFreeShipping": return GetProduct_IsFreeShipping(@object);
                    case "NothingToShip": return GetProduct_NothingToShip(@object);
                    case "DropShipOnly": return GetProduct_DropShipOnly(@object);
                    case "ShippingLeadTimeIsCalendarDays": return GetProduct_ShippingLeadTimeIsCalendarDays(@object);
                    case "ShortDescription": return GetProduct_ShortDescription(@object);
                    case "ManufacturerPartNumber": return GetProduct_ManufacturerPartNumber(@object);
                    case "BrandName": return GetProduct_BrandName(@object);
                    case "TaxCode": return GetProduct_TaxCode(@object);
                    case "UnitOfMeasure": return GetProduct_UnitOfMeasure(@object);
                    case "IndexSynonyms": return GetProduct_IndexSynonyms(@object);
                    case "HandlingCharge": return GetProduct_HandlingCharge(@object);
                    case "FlatShippingCharge": return GetProduct_FlatShippingCharge(@object);
                    case "RestockingFeePercent": return GetProduct_RestockingFeePercent(@object);
                    case "RestockingFeeAmount": return GetProduct_RestockingFeeAmount(@object);
                    case "AvailableStartDate": return GetProduct_AvailableStartDate(@object);
                    case "AvailableEndDate": return GetProduct_AvailableEndDate(@object);
                    case "PreSellEndDate": return GetProduct_PreSellEndDate(@object);
                    case "QuantityPerMasterPack": return GetProduct_QuantityPerMasterPack(@object);
                    case "QuantityMasterPackPerLayer": return GetProduct_QuantityMasterPackPerLayer(@object);
                    case "QuantityMasterPackLayersPerPallet": return GetProduct_QuantityMasterPackLayersPerPallet(@object);
                    case "QuantityMasterPackPerPallet": return GetProduct_QuantityMasterPackPerPallet(@object);
                    case "QuantityPerLayer": return GetProduct_QuantityPerLayer(@object);
                    case "QuantityLayersPerPallet": return GetProduct_QuantityLayersPerPallet(@object);
                    case "QuantityPerPallet": return GetProduct_QuantityPerPallet(@object);
                    case "KitBaseQuantityPriceMultiplier": return GetProduct_KitBaseQuantityPriceMultiplier(@object);
                    case "ShippingLeadTimeDays": return GetProduct_ShippingLeadTimeDays(@object);
                    case "MinimumPurchaseQuantity": return GetProduct_MinimumPurchaseQuantity(@object);
                    case "MinimumPurchaseQuantityIfPastPurchased": return GetProduct_MinimumPurchaseQuantityIfPastPurchased(@object);
                    case "MaximumPurchaseQuantity": return GetProduct_MaximumPurchaseQuantity(@object);
                    case "MaximumPurchaseQuantityIfPastPurchased": return GetProduct_MaximumPurchaseQuantityIfPastPurchased(@object);
                    case "MaximumBackOrderPurchaseQuantity": return GetProduct_MaximumBackOrderPurchaseQuantity(@object);
                    case "MaximumBackOrderPurchaseQuantityIfPastPurchased": return GetProduct_MaximumBackOrderPurchaseQuantityIfPastPurchased(@object);
                    case "MaximumBackOrderPurchaseQuantityGlobal": return GetProduct_MaximumBackOrderPurchaseQuantityGlobal(@object);
                    case "MaximumPrePurchaseQuantity": return GetProduct_MaximumPrePurchaseQuantity(@object);
                    case "MaximumPrePurchaseQuantityIfPastPurchased": return GetProduct_MaximumPrePurchaseQuantityIfPastPurchased(@object);
                    case "MaximumPrePurchaseQuantityGlobal": return GetProduct_MaximumPrePurchaseQuantityGlobal(@object);
                    case "DocumentRequiredForPurchase": return GetProduct_DocumentRequiredForPurchase(@object);
                    case "DocumentRequiredForPurchaseMissingWarningMessage": return GetProduct_DocumentRequiredForPurchaseMissingWarningMessage(@object);
                    case "DocumentRequiredForPurchaseExpiredWarningMessage": return GetProduct_DocumentRequiredForPurchaseExpiredWarningMessage(@object);
                    case "DocumentRequiredForPurchaseOverrideFee": return GetProduct_DocumentRequiredForPurchaseOverrideFee(@object);
                    case "DocumentRequiredForPurchaseOverrideFeeIsPercent": return GetProduct_DocumentRequiredForPurchaseOverrideFeeIsPercent(@object);
                    case "DocumentRequiredForPurchaseOverrideFeeWarningMessage": return GetProduct_DocumentRequiredForPurchaseOverrideFeeWarningMessage(@object);
                    case "DocumentRequiredForPurchaseOverrideFeeAcceptedMessage": return GetProduct_DocumentRequiredForPurchaseOverrideFeeAcceptedMessage(@object);
                    case "MustPurchaseInMultiplesOfAmount": return GetProduct_MustPurchaseInMultiplesOfAmount(@object);
                    case "MustPurchaseInMultiplesOfAmountWarningMessage": return GetProduct_MustPurchaseInMultiplesOfAmountWarningMessage(@object);
                    case "MustPurchaseInMultiplesOfAmountOverrideFee": return GetProduct_MustPurchaseInMultiplesOfAmountOverrideFee(@object);
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent": return GetProduct_MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent(@object);
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage": return GetProduct_MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage(@object);
                    case "MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage": return GetProduct_MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage(@object);
                    case "TotalPurchasedAmount": return GetProduct_TotalPurchasedAmount(@object);
                    case "TotalPurchasedAmountCurrencyID": return GetProduct_TotalPurchasedAmountCurrencyID(@object);
                    case "TotalPurchasedAmountCurrency": return GetProduct_TotalPurchasedAmountCurrency(@object);
                    case "TotalPurchasedQuantity": return GetProduct_TotalPurchasedQuantity(@object);
                    case "PackageID": return GetProduct_PackageID(@object);
                    case "Package": return GetProduct_Package(@object);
                    case "MasterPackID": return GetProduct_MasterPackID(@object);
                    case "MasterPack": return GetProduct_MasterPack(@object);
                    case "PalletID": return GetProduct_PalletID(@object);
                    case "Pallet": return GetProduct_Pallet(@object);
                    case "RestockingFeeAmountCurrencyID": return GetProduct_RestockingFeeAmountCurrencyID(@object);
                    case "RestockingFeeAmountCurrency": return GetProduct_RestockingFeeAmountCurrency(@object);
                    case "ProductAssociations": return GetProduct_ProductAssociations(@object);
                    case "ProductsAssociatedWith": return GetProduct_ProductsAssociatedWith(@object);
                    case "ProductCategories": return GetProduct_ProductCategories(@object);
                    case "ProductMembershipLevels": return GetProduct_ProductMembershipLevels(@object);
                    case "ProductDownloads": return GetProduct_ProductDownloads(@object);
                    case "ProductShipCarrierMethods": return GetProduct_ProductShipCarrierMethods(@object);
                    case "ProductSubscriptionTypes": return GetProduct_ProductSubscriptionTypes(@object);
                    case "ProductRestrictions": return GetProduct_ProductRestrictions(@object);
                    case "ProductNotifications": return GetProduct_ProductNotifications(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductAssociationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductAssociation_MasterID(@object);
                    case "SlaveID": return GetProductAssociation_SlaveID(@object);
                    case "Slave": return GetProductAssociation_Slave(@object);
                    case "Quantity": return GetProductAssociation_Quantity(@object);
                    case "UnitOfMeasure": return GetProductAssociation_UnitOfMeasure(@object);
                    case "StoreID": return GetProductAssociation_StoreID(@object);
                    case "Store": return GetProductAssociation_Store(@object);
                    case "BrandID": return GetProductAssociation_BrandID(@object);
                    case "Brand": return GetProductAssociation_Brand(@object);
                    case "TypeID": return GetProductAssociation_TypeID(@object);
                    case "Type": return GetProductAssociation_Type(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetProductAssociationType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductCategory_MasterID(@object);
                    case "SlaveID": return GetProductCategory_SlaveID(@object);
                    case "Slave": return GetProductCategory_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductDownloadModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetProductDownload_TypeID(@object);
                    case "Type": return GetProductDownload_Type(@object);
                    case "IsAbsoluteUrl": return GetProductDownload_IsAbsoluteUrl(@object);
                    case "AbsoluteUrl": return GetProductDownload_AbsoluteUrl(@object);
                    case "RelativeUrl": return GetProductDownload_RelativeUrl(@object);
                    case "ProductID": return GetProductDownload_ProductID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetProductDownloadType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductFile_MasterID(@object);
                    case "SlaveID": return GetProductFile_SlaveID(@object);
                    case "Slave": return GetProductFile_Slave(@object);
                    case "FileAccessTypeID": return GetProductFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductImage_MasterID(@object);
                    case "TypeID": return GetProductImage_TypeID(@object);
                    case "Type": return GetProductImage_Type(@object);
                    case "SeoTitle": return GetProductImage_SeoTitle(@object);
                    case "Author": return GetProductImage_Author(@object);
                    case "MediaDate": return GetProductImage_MediaDate(@object);
                    case "Copyright": return GetProductImage_Copyright(@object);
                    case "Location": return GetProductImage_Location(@object);
                    case "Latitude": return GetProductImage_Latitude(@object);
                    case "Longitude": return GetProductImage_Longitude(@object);
                    case "IsPrimary": return GetProductImage_IsPrimary(@object);
                    case "OriginalWidth": return GetProductImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetProductImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetProductImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetProductImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetProductImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetProductImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetProductImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetProductImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetProductImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetProductImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetProductImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetProductImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetProductImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductInventoryLocationSectionModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductInventoryLocationSection_MasterID(@object);
                    case "SlaveID": return GetProductInventoryLocationSection_SlaveID(@object);
                    case "Slave": return GetProductInventoryLocationSection_Slave(@object);
                    case "Quantity": return GetProductInventoryLocationSection_Quantity(@object);
                    case "QuantityAllocated": return GetProductInventoryLocationSection_QuantityAllocated(@object);
                    case "QuantityPreSold": return GetProductInventoryLocationSection_QuantityPreSold(@object);
                    case "QuantityBroken": return GetProductInventoryLocationSection_QuantityBroken(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductMembershipLevelModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductMembershipLevel_MasterID(@object);
                    case "SlaveID": return GetProductMembershipLevel_SlaveID(@object);
                    case "Slave": return GetProductMembershipLevel_Slave(@object);
                    case "MembershipRepeatTypeID": return GetProductMembershipLevel_MembershipRepeatTypeID(@object);
                    case "MembershipRepeatType": return GetProductMembershipLevel_MembershipRepeatType(@object);
                    case "Subscriptions": return GetProductMembershipLevel_Subscriptions(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductPricePointModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductPricePoint_MasterID(@object);
                    case "SlaveID": return GetProductPricePoint_SlaveID(@object);
                    case "Slave": return GetProductPricePoint_Slave(@object);
                    case "StoreID": return GetProductPricePoint_StoreID(@object);
                    case "Store": return GetProductPricePoint_Store(@object);
                    case "BrandID": return GetProductPricePoint_BrandID(@object);
                    case "Brand": return GetProductPricePoint_Brand(@object);
                    case "Price": return GetProductPricePoint_Price(@object);
                    case "PercentDiscount": return GetProductPricePoint_PercentDiscount(@object);
                    case "MinQuantity": return GetProductPricePoint_MinQuantity(@object);
                    case "MaxQuantity": return GetProductPricePoint_MaxQuantity(@object);
                    case "UnitOfMeasure": return GetProductPricePoint_UnitOfMeasure(@object);
                    case "From": return GetProductPricePoint_From(@object);
                    case "To": return GetProductPricePoint_To(@object);
                    case "PriceRoundingID": return GetProductPricePoint_PriceRoundingID(@object);
                    case "PriceRounding": return GetProductPricePoint_PriceRounding(@object);
                    case "CurrencyID": return GetProductPricePoint_CurrencyID(@object);
                    case "Currency": return GetProductPricePoint_Currency(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductRestrictionModel)))
            {
                switch (property)
                {
                    case "ProductID": return GetProductRestriction_ProductID(@object);
                    case "CanPurchaseInternationally": return GetProductRestriction_CanPurchaseInternationally(@object);
                    case "CanPurchaseDomestically": return GetProductRestriction_CanPurchaseDomestically(@object);
                    case "CanPurchaseIntraRegion": return GetProductRestriction_CanPurchaseIntraRegion(@object);
                    case "CanShipInternationally": return GetProductRestriction_CanShipInternationally(@object);
                    case "CanShipDomestically": return GetProductRestriction_CanShipDomestically(@object);
                    case "CanShipIntraRegion": return GetProductRestriction_CanShipIntraRegion(@object);
                    case "RestrictionsApplyToCity": return GetProductRestriction_RestrictionsApplyToCity(@object);
                    case "RestrictionsApplyToPostalCode": return GetProductRestriction_RestrictionsApplyToPostalCode(@object);
                    case "OverrideWithRoles": return GetProductRestriction_OverrideWithRoles(@object);
                    case "OverrideWithAccountTypeID": return GetProductRestriction_OverrideWithAccountTypeID(@object);
                    case "OverrideWithAccountType": return GetProductRestriction_OverrideWithAccountType(@object);
                    case "RestrictionsApplyToCountryID": return GetProductRestriction_RestrictionsApplyToCountryID(@object);
                    case "RestrictionsApplyToCountry": return GetProductRestriction_RestrictionsApplyToCountry(@object);
                    case "RestrictionsApplyToRegionID": return GetProductRestriction_RestrictionsApplyToRegionID(@object);
                    case "RestrictionsApplyToRegion": return GetProductRestriction_RestrictionsApplyToRegion(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductShipCarrierMethod_MasterID(@object);
                    case "SlaveID": return GetProductShipCarrierMethod_SlaveID(@object);
                    case "Slave": return GetProductShipCarrierMethod_Slave(@object);
                    case "StoreID": return GetProductShipCarrierMethod_StoreID(@object);
                    case "Store": return GetProductShipCarrierMethod_Store(@object);
                    case "BrandID": return GetProductShipCarrierMethod_BrandID(@object);
                    case "Brand": return GetProductShipCarrierMethod_Brand(@object);
                    case "MinQuantity": return GetProductShipCarrierMethod_MinQuantity(@object);
                    case "MaxQuantity": return GetProductShipCarrierMethod_MaxQuantity(@object);
                    case "From": return GetProductShipCarrierMethod_From(@object);
                    case "To": return GetProductShipCarrierMethod_To(@object);
                    case "UnitOfMeasure": return GetProductShipCarrierMethod_UnitOfMeasure(@object);
                    case "Price": return GetProductShipCarrierMethod_Price(@object);
                    case "CurrencyID": return GetProductShipCarrierMethod_CurrencyID(@object);
                    case "Currency": return GetProductShipCarrierMethod_Currency(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetProductStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IProductSubscriptionTypeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetProductSubscriptionType_MasterID(@object);
                    case "SlaveID": return GetProductSubscriptionType_SlaveID(@object);
                    case "Slave": return GetProductSubscriptionType_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetProductType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Purchasing
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetPurchaseOrder_DueDate(@object);
                    case "SubtotalItems": return GetPurchaseOrder_SubtotalItems(@object);
                    case "SubtotalShipping": return GetPurchaseOrder_SubtotalShipping(@object);
                    case "SubtotalTaxes": return GetPurchaseOrder_SubtotalTaxes(@object);
                    case "SubtotalFees": return GetPurchaseOrder_SubtotalFees(@object);
                    case "SubtotalHandling": return GetPurchaseOrder_SubtotalHandling(@object);
                    case "SubtotalDiscounts": return GetPurchaseOrder_SubtotalDiscounts(@object);
                    case "Total": return GetPurchaseOrder_Total(@object);
                    case "ShippingSameAsBilling": return GetPurchaseOrder_ShippingSameAsBilling(@object);
                    case "BillingContactID": return GetPurchaseOrder_BillingContactID(@object);
                    case "BillingContact": return GetPurchaseOrder_BillingContact(@object);
                    case "ShippingContactID": return GetPurchaseOrder_ShippingContactID(@object);
                    case "ShippingContact": return GetPurchaseOrder_ShippingContact(@object);
                    case "StatusID": return GetPurchaseOrder_StatusID(@object);
                    case "Status": return GetPurchaseOrder_Status(@object);
                    case "StateID": return GetPurchaseOrder_StateID(@object);
                    case "State": return GetPurchaseOrder_State(@object);
                    case "TypeID": return GetPurchaseOrder_TypeID(@object);
                    case "Type": return GetPurchaseOrder_Type(@object);
                    case "UserID": return GetPurchaseOrder_UserID(@object);
                    case "User": return GetPurchaseOrder_User(@object);
                    case "AccountID": return GetPurchaseOrder_AccountID(@object);
                    case "Account": return GetPurchaseOrder_Account(@object);
                    case "SalesItems": return GetPurchaseOrder_SalesItems(@object);
                    case "Discounts": return GetPurchaseOrder_Discounts(@object);
                    case "StoredFiles": return GetPurchaseOrder_StoredFiles(@object);
                    case "Contacts": return GetPurchaseOrder_Contacts(@object);
                    case "RateQuotes": return GetPurchaseOrder_RateQuotes(@object);
                    case "Notes": return GetPurchaseOrder_Notes(@object);
                    case "StoreID": return GetPurchaseOrder_StoreID(@object);
                    case "Store": return GetPurchaseOrder_Store(@object);
                    case "BrandID": return GetPurchaseOrder_BrandID(@object);
                    case "Brand": return GetPurchaseOrder_Brand(@object);
                    case "TrackingNumber": return GetPurchaseOrder_TrackingNumber(@object);
                    case "ReleaseDate": return GetPurchaseOrder_ReleaseDate(@object);
                    case "EstimatedReceiptDate": return GetPurchaseOrder_EstimatedReceiptDate(@object);
                    case "ActualReceiptDate": return GetPurchaseOrder_ActualReceiptDate(@object);
                    case "InventoryLocationID": return GetPurchaseOrder_InventoryLocationID(@object);
                    case "InventoryLocation": return GetPurchaseOrder_InventoryLocation(@object);
                    case "ShipCarrierID": return GetPurchaseOrder_ShipCarrierID(@object);
                    case "ShipCarrier": return GetPurchaseOrder_ShipCarrier(@object);
                    case "VendorID": return GetPurchaseOrder_VendorID(@object);
                    case "Vendor": return GetPurchaseOrder_Vendor(@object);
                    case "SalesGroupID": return GetPurchaseOrder_SalesGroupID(@object);
                    case "SalesGroup": return GetPurchaseOrder_SalesGroup(@object);
                    case "AssociatedSalesOrders": return GetPurchaseOrder_AssociatedSalesOrders(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPurchaseOrderContact_MasterID(@object);
                    case "SlaveID": return GetPurchaseOrderContact_SlaveID(@object);
                    case "Slave": return GetPurchaseOrderContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPurchaseOrderFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPurchaseOrderFile_MasterID(@object);
                    case "SlaveID": return GetPurchaseOrderFile_SlaveID(@object);
                    case "Slave": return GetPurchaseOrderFile_Slave(@object);
                    case "FileAccessTypeID": return GetPurchaseOrderFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetPurchaseOrderItem_Sku(@object);
                    case "UnitOfMeasure": return GetPurchaseOrderItem_UnitOfMeasure(@object);
                    case "ForceUniqueLineItemKey": return GetPurchaseOrderItem_ForceUniqueLineItemKey(@object);
                    case "Quantity": return GetPurchaseOrderItem_Quantity(@object);
                    case "QuantityBackOrdered": return GetPurchaseOrderItem_QuantityBackOrdered(@object);
                    case "QuantityPreSold": return GetPurchaseOrderItem_QuantityPreSold(@object);
                    case "TotalQuantity": return GetPurchaseOrderItem_TotalQuantity(@object);
                    case "UnitCorePrice": return GetPurchaseOrderItem_UnitCorePrice(@object);
                    case "UnitSoldPrice": return GetPurchaseOrderItem_UnitSoldPrice(@object);
                    case "UnitCorePriceInSellingCurrency": return GetPurchaseOrderItem_UnitCorePriceInSellingCurrency(@object);
                    case "UnitSoldPriceInSellingCurrency": return GetPurchaseOrderItem_UnitSoldPriceInSellingCurrency(@object);
                    case "MasterID": return GetPurchaseOrderItem_MasterID(@object);
                    case "ProductID": return GetPurchaseOrderItem_ProductID(@object);
                    case "UserID": return GetPurchaseOrderItem_UserID(@object);
                    case "User": return GetPurchaseOrderItem_User(@object);
                    case "OriginalCurrencyID": return GetPurchaseOrderItem_OriginalCurrencyID(@object);
                    case "OriginalCurrency": return GetPurchaseOrderItem_OriginalCurrency(@object);
                    case "SellingCurrencyID": return GetPurchaseOrderItem_SellingCurrencyID(@object);
                    case "SellingCurrency": return GetPurchaseOrderItem_SellingCurrency(@object);
                    case "Discounts": return GetPurchaseOrderItem_Discounts(@object);
                    case "Targets": return GetPurchaseOrderItem_Targets(@object);
                    case "Notes": return GetPurchaseOrderItem_Notes(@object);
                    case "DateReceived": return GetPurchaseOrderItem_DateReceived(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetPurchaseOrderItemTarget_Quantity(@object);
                    case "NothingToShip": return GetPurchaseOrderItemTarget_NothingToShip(@object);
                    case "MasterID": return GetPurchaseOrderItemTarget_MasterID(@object);
                    case "TypeID": return GetPurchaseOrderItemTarget_TypeID(@object);
                    case "Type": return GetPurchaseOrderItemTarget_Type(@object);
                    case "DestinationContactID": return GetPurchaseOrderItemTarget_DestinationContactID(@object);
                    case "DestinationContact": return GetPurchaseOrderItemTarget_DestinationContact(@object);
                    case "OriginProductInventoryLocationSectionID": return GetPurchaseOrderItemTarget_OriginProductInventoryLocationSectionID(@object);
                    case "OriginProductInventoryLocationSection": return GetPurchaseOrderItemTarget_OriginProductInventoryLocationSection(@object);
                    case "OriginStoreProductID": return GetPurchaseOrderItemTarget_OriginStoreProductID(@object);
                    case "OriginStoreProduct": return GetPurchaseOrderItemTarget_OriginStoreProduct(@object);
                    case "BrandProductID": return GetPurchaseOrderItemTarget_BrandProductID(@object);
                    case "BrandProduct": return GetPurchaseOrderItemTarget_BrandProduct(@object);
                    case "OriginVendorProductID": return GetPurchaseOrderItemTarget_OriginVendorProductID(@object);
                    case "OriginVendorProduct": return GetPurchaseOrderItemTarget_OriginVendorProduct(@object);
                    case "SelectedRateQuoteID": return GetPurchaseOrderItemTarget_SelectedRateQuoteID(@object);
                    case "SelectedRateQuote": return GetPurchaseOrderItemTarget_SelectedRateQuote(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPurchaseOrderState_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPurchaseOrderStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPurchaseOrderType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesOrderPurchaseOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesOrderPurchaseOrder_MasterID(@object);
                    case "SlaveID": return GetSalesOrderPurchaseOrder_SlaveID(@object);
                    case "Slave": return GetSalesOrderPurchaseOrder_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Quoting
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetSalesQuote_DueDate(@object);
                    case "SubtotalItems": return GetSalesQuote_SubtotalItems(@object);
                    case "SubtotalShipping": return GetSalesQuote_SubtotalShipping(@object);
                    case "SubtotalTaxes": return GetSalesQuote_SubtotalTaxes(@object);
                    case "SubtotalFees": return GetSalesQuote_SubtotalFees(@object);
                    case "SubtotalHandling": return GetSalesQuote_SubtotalHandling(@object);
                    case "SubtotalDiscounts": return GetSalesQuote_SubtotalDiscounts(@object);
                    case "Total": return GetSalesQuote_Total(@object);
                    case "ShippingSameAsBilling": return GetSalesQuote_ShippingSameAsBilling(@object);
                    case "BillingContactID": return GetSalesQuote_BillingContactID(@object);
                    case "BillingContact": return GetSalesQuote_BillingContact(@object);
                    case "ShippingContactID": return GetSalesQuote_ShippingContactID(@object);
                    case "ShippingContact": return GetSalesQuote_ShippingContact(@object);
                    case "StatusID": return GetSalesQuote_StatusID(@object);
                    case "Status": return GetSalesQuote_Status(@object);
                    case "StateID": return GetSalesQuote_StateID(@object);
                    case "State": return GetSalesQuote_State(@object);
                    case "TypeID": return GetSalesQuote_TypeID(@object);
                    case "Type": return GetSalesQuote_Type(@object);
                    case "UserID": return GetSalesQuote_UserID(@object);
                    case "User": return GetSalesQuote_User(@object);
                    case "AccountID": return GetSalesQuote_AccountID(@object);
                    case "Account": return GetSalesQuote_Account(@object);
                    case "SalesItems": return GetSalesQuote_SalesItems(@object);
                    case "Discounts": return GetSalesQuote_Discounts(@object);
                    case "StoredFiles": return GetSalesQuote_StoredFiles(@object);
                    case "Contacts": return GetSalesQuote_Contacts(@object);
                    case "RateQuotes": return GetSalesQuote_RateQuotes(@object);
                    case "Notes": return GetSalesQuote_Notes(@object);
                    case "StoreID": return GetSalesQuote_StoreID(@object);
                    case "Store": return GetSalesQuote_Store(@object);
                    case "BrandID": return GetSalesQuote_BrandID(@object);
                    case "Brand": return GetSalesQuote_Brand(@object);
                    case "BalanceDue": return GetSalesQuote_BalanceDue(@object);
                    case "ResponseAsVendorID": return GetSalesQuote_ResponseAsVendorID(@object);
                    case "ResponseAsVendor": return GetSalesQuote_ResponseAsVendor(@object);
                    case "ResponseAsStoreID": return GetSalesQuote_ResponseAsStoreID(@object);
                    case "ResponseAsStore": return GetSalesQuote_ResponseAsStore(@object);
                    case "SalesGroupAsMasterID": return GetSalesQuote_SalesGroupAsMasterID(@object);
                    case "SalesGroupAsResponseID": return GetSalesQuote_SalesGroupAsResponseID(@object);
                    case "AssociatedSalesOrders": return GetSalesQuote_AssociatedSalesOrders(@object);
                    case "SalesQuoteCategories": return GetSalesQuote_SalesQuoteCategories(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesQuoteCategory_MasterID(@object);
                    case "SlaveID": return GetSalesQuoteCategory_SlaveID(@object);
                    case "Slave": return GetSalesQuoteCategory_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesQuoteContact_MasterID(@object);
                    case "SlaveID": return GetSalesQuoteContact_SlaveID(@object);
                    case "Slave": return GetSalesQuoteContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesQuoteFile_MasterID(@object);
                    case "SlaveID": return GetSalesQuoteFile_SlaveID(@object);
                    case "Slave": return GetSalesQuoteFile_Slave(@object);
                    case "FileAccessTypeID": return GetSalesQuoteFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetSalesQuoteItem_Sku(@object);
                    case "UnitOfMeasure": return GetSalesQuoteItem_UnitOfMeasure(@object);
                    case "ForceUniqueLineItemKey": return GetSalesQuoteItem_ForceUniqueLineItemKey(@object);
                    case "Quantity": return GetSalesQuoteItem_Quantity(@object);
                    case "QuantityBackOrdered": return GetSalesQuoteItem_QuantityBackOrdered(@object);
                    case "QuantityPreSold": return GetSalesQuoteItem_QuantityPreSold(@object);
                    case "TotalQuantity": return GetSalesQuoteItem_TotalQuantity(@object);
                    case "UnitCorePrice": return GetSalesQuoteItem_UnitCorePrice(@object);
                    case "UnitSoldPrice": return GetSalesQuoteItem_UnitSoldPrice(@object);
                    case "UnitCorePriceInSellingCurrency": return GetSalesQuoteItem_UnitCorePriceInSellingCurrency(@object);
                    case "UnitSoldPriceInSellingCurrency": return GetSalesQuoteItem_UnitSoldPriceInSellingCurrency(@object);
                    case "MasterID": return GetSalesQuoteItem_MasterID(@object);
                    case "ProductID": return GetSalesQuoteItem_ProductID(@object);
                    case "UserID": return GetSalesQuoteItem_UserID(@object);
                    case "User": return GetSalesQuoteItem_User(@object);
                    case "OriginalCurrencyID": return GetSalesQuoteItem_OriginalCurrencyID(@object);
                    case "OriginalCurrency": return GetSalesQuoteItem_OriginalCurrency(@object);
                    case "SellingCurrencyID": return GetSalesQuoteItem_SellingCurrencyID(@object);
                    case "SellingCurrency": return GetSalesQuoteItem_SellingCurrency(@object);
                    case "Discounts": return GetSalesQuoteItem_Discounts(@object);
                    case "Targets": return GetSalesQuoteItem_Targets(@object);
                    case "Notes": return GetSalesQuoteItem_Notes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetSalesQuoteItemTarget_Quantity(@object);
                    case "NothingToShip": return GetSalesQuoteItemTarget_NothingToShip(@object);
                    case "MasterID": return GetSalesQuoteItemTarget_MasterID(@object);
                    case "TypeID": return GetSalesQuoteItemTarget_TypeID(@object);
                    case "Type": return GetSalesQuoteItemTarget_Type(@object);
                    case "DestinationContactID": return GetSalesQuoteItemTarget_DestinationContactID(@object);
                    case "DestinationContact": return GetSalesQuoteItemTarget_DestinationContact(@object);
                    case "OriginProductInventoryLocationSectionID": return GetSalesQuoteItemTarget_OriginProductInventoryLocationSectionID(@object);
                    case "OriginProductInventoryLocationSection": return GetSalesQuoteItemTarget_OriginProductInventoryLocationSection(@object);
                    case "OriginStoreProductID": return GetSalesQuoteItemTarget_OriginStoreProductID(@object);
                    case "OriginStoreProduct": return GetSalesQuoteItemTarget_OriginStoreProduct(@object);
                    case "BrandProductID": return GetSalesQuoteItemTarget_BrandProductID(@object);
                    case "BrandProduct": return GetSalesQuoteItemTarget_BrandProduct(@object);
                    case "OriginVendorProductID": return GetSalesQuoteItemTarget_OriginVendorProductID(@object);
                    case "OriginVendorProduct": return GetSalesQuoteItemTarget_OriginVendorProduct(@object);
                    case "SelectedRateQuoteID": return GetSalesQuoteItemTarget_SelectedRateQuoteID(@object);
                    case "SelectedRateQuote": return GetSalesQuoteItemTarget_SelectedRateQuote(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesQuoteSalesOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesQuoteSalesOrder_MasterID(@object);
                    case "SlaveID": return GetSalesQuoteSalesOrder_SlaveID(@object);
                    case "Slave": return GetSalesQuoteSalesOrder_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesQuoteState_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesQuoteStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesQuoteType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Reporting
            if (type.GetInterfaces().Any(x => x == typeof(IReportTypeModel)))
            {
                switch (property)
                {
                    case "Template": return GetReportType_Template(@object);
                    case "TranslationKey": return GetReportType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Returning
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetSalesReturn_DueDate(@object);
                    case "SubtotalItems": return GetSalesReturn_SubtotalItems(@object);
                    case "SubtotalShipping": return GetSalesReturn_SubtotalShipping(@object);
                    case "SubtotalTaxes": return GetSalesReturn_SubtotalTaxes(@object);
                    case "SubtotalFees": return GetSalesReturn_SubtotalFees(@object);
                    case "SubtotalHandling": return GetSalesReturn_SubtotalHandling(@object);
                    case "SubtotalDiscounts": return GetSalesReturn_SubtotalDiscounts(@object);
                    case "Total": return GetSalesReturn_Total(@object);
                    case "ShippingSameAsBilling": return GetSalesReturn_ShippingSameAsBilling(@object);
                    case "BillingContactID": return GetSalesReturn_BillingContactID(@object);
                    case "BillingContact": return GetSalesReturn_BillingContact(@object);
                    case "ShippingContactID": return GetSalesReturn_ShippingContactID(@object);
                    case "ShippingContact": return GetSalesReturn_ShippingContact(@object);
                    case "StatusID": return GetSalesReturn_StatusID(@object);
                    case "Status": return GetSalesReturn_Status(@object);
                    case "StateID": return GetSalesReturn_StateID(@object);
                    case "State": return GetSalesReturn_State(@object);
                    case "TypeID": return GetSalesReturn_TypeID(@object);
                    case "Type": return GetSalesReturn_Type(@object);
                    case "UserID": return GetSalesReturn_UserID(@object);
                    case "User": return GetSalesReturn_User(@object);
                    case "AccountID": return GetSalesReturn_AccountID(@object);
                    case "Account": return GetSalesReturn_Account(@object);
                    case "SalesItems": return GetSalesReturn_SalesItems(@object);
                    case "Discounts": return GetSalesReturn_Discounts(@object);
                    case "StoredFiles": return GetSalesReturn_StoredFiles(@object);
                    case "Contacts": return GetSalesReturn_Contacts(@object);
                    case "RateQuotes": return GetSalesReturn_RateQuotes(@object);
                    case "Notes": return GetSalesReturn_Notes(@object);
                    case "StoreID": return GetSalesReturn_StoreID(@object);
                    case "Store": return GetSalesReturn_Store(@object);
                    case "BrandID": return GetSalesReturn_BrandID(@object);
                    case "Brand": return GetSalesReturn_Brand(@object);
                    case "PurchaseOrderNumber": return GetSalesReturn_PurchaseOrderNumber(@object);
                    case "TrackingNumber": return GetSalesReturn_TrackingNumber(@object);
                    case "RefundTransactionID": return GetSalesReturn_RefundTransactionID(@object);
                    case "TaxTransactionID": return GetSalesReturn_TaxTransactionID(@object);
                    case "BalanceDue": return GetSalesReturn_BalanceDue(@object);
                    case "RefundAmount": return GetSalesReturn_RefundAmount(@object);
                    case "ReturnApprovedDate": return GetSalesReturn_ReturnApprovedDate(@object);
                    case "ReturnCommitmentDate": return GetSalesReturn_ReturnCommitmentDate(@object);
                    case "RequiredShipDate": return GetSalesReturn_RequiredShipDate(@object);
                    case "RequestedShipDate": return GetSalesReturn_RequestedShipDate(@object);
                    case "ActualShipDate": return GetSalesReturn_ActualShipDate(@object);
                    case "SalesGroupID": return GetSalesReturn_SalesGroupID(@object);
                    case "SalesGroup": return GetSalesReturn_SalesGroup(@object);
                    case "SalesReturnPayments": return GetSalesReturn_SalesReturnPayments(@object);
                    case "AssociatedSalesOrders": return GetSalesReturn_AssociatedSalesOrders(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesReturnContact_MasterID(@object);
                    case "SlaveID": return GetSalesReturnContact_SlaveID(@object);
                    case "Slave": return GetSalesReturnContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesReturnFile_MasterID(@object);
                    case "SlaveID": return GetSalesReturnFile_SlaveID(@object);
                    case "Slave": return GetSalesReturnFile_Slave(@object);
                    case "FileAccessTypeID": return GetSalesReturnFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetSalesReturnItem_Sku(@object);
                    case "UnitOfMeasure": return GetSalesReturnItem_UnitOfMeasure(@object);
                    case "ForceUniqueLineItemKey": return GetSalesReturnItem_ForceUniqueLineItemKey(@object);
                    case "Quantity": return GetSalesReturnItem_Quantity(@object);
                    case "QuantityBackOrdered": return GetSalesReturnItem_QuantityBackOrdered(@object);
                    case "QuantityPreSold": return GetSalesReturnItem_QuantityPreSold(@object);
                    case "TotalQuantity": return GetSalesReturnItem_TotalQuantity(@object);
                    case "UnitCorePrice": return GetSalesReturnItem_UnitCorePrice(@object);
                    case "UnitSoldPrice": return GetSalesReturnItem_UnitSoldPrice(@object);
                    case "UnitCorePriceInSellingCurrency": return GetSalesReturnItem_UnitCorePriceInSellingCurrency(@object);
                    case "UnitSoldPriceInSellingCurrency": return GetSalesReturnItem_UnitSoldPriceInSellingCurrency(@object);
                    case "MasterID": return GetSalesReturnItem_MasterID(@object);
                    case "ProductID": return GetSalesReturnItem_ProductID(@object);
                    case "UserID": return GetSalesReturnItem_UserID(@object);
                    case "User": return GetSalesReturnItem_User(@object);
                    case "OriginalCurrencyID": return GetSalesReturnItem_OriginalCurrencyID(@object);
                    case "OriginalCurrency": return GetSalesReturnItem_OriginalCurrency(@object);
                    case "SellingCurrencyID": return GetSalesReturnItem_SellingCurrencyID(@object);
                    case "SellingCurrency": return GetSalesReturnItem_SellingCurrency(@object);
                    case "Discounts": return GetSalesReturnItem_Discounts(@object);
                    case "Targets": return GetSalesReturnItem_Targets(@object);
                    case "Notes": return GetSalesReturnItem_Notes(@object);
                    case "RestockingFeeAmount": return GetSalesReturnItem_RestockingFeeAmount(@object);
                    case "SalesReturnReasonID": return GetSalesReturnItem_SalesReturnReasonID(@object);
                    case "SalesReturnReason": return GetSalesReturnItem_SalesReturnReason(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetSalesReturnItemTarget_Quantity(@object);
                    case "NothingToShip": return GetSalesReturnItemTarget_NothingToShip(@object);
                    case "MasterID": return GetSalesReturnItemTarget_MasterID(@object);
                    case "TypeID": return GetSalesReturnItemTarget_TypeID(@object);
                    case "Type": return GetSalesReturnItemTarget_Type(@object);
                    case "DestinationContactID": return GetSalesReturnItemTarget_DestinationContactID(@object);
                    case "DestinationContact": return GetSalesReturnItemTarget_DestinationContact(@object);
                    case "OriginProductInventoryLocationSectionID": return GetSalesReturnItemTarget_OriginProductInventoryLocationSectionID(@object);
                    case "OriginProductInventoryLocationSection": return GetSalesReturnItemTarget_OriginProductInventoryLocationSection(@object);
                    case "OriginStoreProductID": return GetSalesReturnItemTarget_OriginStoreProductID(@object);
                    case "OriginStoreProduct": return GetSalesReturnItemTarget_OriginStoreProduct(@object);
                    case "BrandProductID": return GetSalesReturnItemTarget_BrandProductID(@object);
                    case "BrandProduct": return GetSalesReturnItemTarget_BrandProduct(@object);
                    case "OriginVendorProductID": return GetSalesReturnItemTarget_OriginVendorProductID(@object);
                    case "OriginVendorProduct": return GetSalesReturnItemTarget_OriginVendorProduct(@object);
                    case "SelectedRateQuoteID": return GetSalesReturnItemTarget_SelectedRateQuoteID(@object);
                    case "SelectedRateQuote": return GetSalesReturnItemTarget_SelectedRateQuote(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnReasonModel)))
            {
                switch (property)
                {
                    case "IsRestockingFeeApplicable": return GetSalesReturnReason_IsRestockingFeeApplicable(@object);
                    case "RestockingFeePercent": return GetSalesReturnReason_RestockingFeePercent(@object);
                    case "RestockingFeeAmount": return GetSalesReturnReason_RestockingFeeAmount(@object);
                    case "RestockingFeeAmountCurrencyID": return GetSalesReturnReason_RestockingFeeAmountCurrencyID(@object);
                    case "RestockingFeeAmountCurrency": return GetSalesReturnReason_RestockingFeeAmountCurrency(@object);
                    case "TranslationKey": return GetSalesReturnReason_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesReturnSalesOrderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSalesReturnSalesOrder_MasterID(@object);
                    case "SlaveID": return GetSalesReturnSalesOrder_SlaveID(@object);
                    case "Slave": return GetSalesReturnSalesOrder_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesReturnState_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesReturnStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesReturnType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Reviews
            if (type.GetInterfaces().Any(x => x == typeof(IReviewModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetReview_TypeID(@object);
                    case "Type": return GetReview_Type(@object);
                    case "Value": return GetReview_Value(@object);
                    case "Comment": return GetReview_Comment(@object);
                    case "Approved": return GetReview_Approved(@object);
                    case "ApprovedDate": return GetReview_ApprovedDate(@object);
                    case "Title": return GetReview_Title(@object);
                    case "Location": return GetReview_Location(@object);
                    case "SubmittedByUserID": return GetReview_SubmittedByUserID(@object);
                    case "SubmittedByUser": return GetReview_SubmittedByUser(@object);
                    case "ApprovedByUserID": return GetReview_ApprovedByUserID(@object);
                    case "ApprovedByUser": return GetReview_ApprovedByUser(@object);
                    case "CategoryID": return GetReview_CategoryID(@object);
                    case "Category": return GetReview_Category(@object);
                    case "ManufacturerID": return GetReview_ManufacturerID(@object);
                    case "Manufacturer": return GetReview_Manufacturer(@object);
                    case "ProductID": return GetReview_ProductID(@object);
                    case "Product": return GetReview_Product(@object);
                    case "StoreID": return GetReview_StoreID(@object);
                    case "Store": return GetReview_Store(@object);
                    case "UserID": return GetReview_UserID(@object);
                    case "User": return GetReview_User(@object);
                    case "VendorID": return GetReview_VendorID(@object);
                    case "Vendor": return GetReview_Vendor(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetReviewType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Sales
            if (type.GetInterfaces().Any(x => x == typeof(ISalesGroupModel)))
            {
                switch (property)
                {
                    case "Notes": return GetSalesGroup_Notes(@object);
                    case "AccountID": return GetSalesGroup_AccountID(@object);
                    case "Account": return GetSalesGroup_Account(@object);
                    case "BillingContactID": return GetSalesGroup_BillingContactID(@object);
                    case "BillingContact": return GetSalesGroup_BillingContact(@object);
                    case "SalesQuoteResponses": return GetSalesGroup_SalesQuoteResponses(@object);
                    case "SalesQuoteMasters": return GetSalesGroup_SalesQuoteMasters(@object);
                    case "SubSalesOrders": return GetSalesGroup_SubSalesOrders(@object);
                    case "SalesOrderMasters": return GetSalesGroup_SalesOrderMasters(@object);
                    case "PurchaseOrders": return GetSalesGroup_PurchaseOrders(@object);
                    case "SalesInvoices": return GetSalesGroup_SalesInvoices(@object);
                    case "SalesReturns": return GetSalesGroup_SalesReturns(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSalesItemTargetType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Sampling
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetSampleRequest_DueDate(@object);
                    case "SubtotalItems": return GetSampleRequest_SubtotalItems(@object);
                    case "SubtotalShipping": return GetSampleRequest_SubtotalShipping(@object);
                    case "SubtotalTaxes": return GetSampleRequest_SubtotalTaxes(@object);
                    case "SubtotalFees": return GetSampleRequest_SubtotalFees(@object);
                    case "SubtotalHandling": return GetSampleRequest_SubtotalHandling(@object);
                    case "SubtotalDiscounts": return GetSampleRequest_SubtotalDiscounts(@object);
                    case "Total": return GetSampleRequest_Total(@object);
                    case "ShippingSameAsBilling": return GetSampleRequest_ShippingSameAsBilling(@object);
                    case "BillingContactID": return GetSampleRequest_BillingContactID(@object);
                    case "BillingContact": return GetSampleRequest_BillingContact(@object);
                    case "ShippingContactID": return GetSampleRequest_ShippingContactID(@object);
                    case "ShippingContact": return GetSampleRequest_ShippingContact(@object);
                    case "StatusID": return GetSampleRequest_StatusID(@object);
                    case "Status": return GetSampleRequest_Status(@object);
                    case "StateID": return GetSampleRequest_StateID(@object);
                    case "State": return GetSampleRequest_State(@object);
                    case "TypeID": return GetSampleRequest_TypeID(@object);
                    case "Type": return GetSampleRequest_Type(@object);
                    case "UserID": return GetSampleRequest_UserID(@object);
                    case "User": return GetSampleRequest_User(@object);
                    case "AccountID": return GetSampleRequest_AccountID(@object);
                    case "Account": return GetSampleRequest_Account(@object);
                    case "SalesItems": return GetSampleRequest_SalesItems(@object);
                    case "Discounts": return GetSampleRequest_Discounts(@object);
                    case "StoredFiles": return GetSampleRequest_StoredFiles(@object);
                    case "Contacts": return GetSampleRequest_Contacts(@object);
                    case "RateQuotes": return GetSampleRequest_RateQuotes(@object);
                    case "Notes": return GetSampleRequest_Notes(@object);
                    case "StoreID": return GetSampleRequest_StoreID(@object);
                    case "Store": return GetSampleRequest_Store(@object);
                    case "BrandID": return GetSampleRequest_BrandID(@object);
                    case "Brand": return GetSampleRequest_Brand(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSampleRequestContact_MasterID(@object);
                    case "SlaveID": return GetSampleRequestContact_SlaveID(@object);
                    case "Slave": return GetSampleRequestContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISampleRequestFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSampleRequestFile_MasterID(@object);
                    case "SlaveID": return GetSampleRequestFile_SlaveID(@object);
                    case "Slave": return GetSampleRequestFile_Slave(@object);
                    case "FileAccessTypeID": return GetSampleRequestFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetSampleRequestItem_Sku(@object);
                    case "UnitOfMeasure": return GetSampleRequestItem_UnitOfMeasure(@object);
                    case "ForceUniqueLineItemKey": return GetSampleRequestItem_ForceUniqueLineItemKey(@object);
                    case "Quantity": return GetSampleRequestItem_Quantity(@object);
                    case "QuantityBackOrdered": return GetSampleRequestItem_QuantityBackOrdered(@object);
                    case "QuantityPreSold": return GetSampleRequestItem_QuantityPreSold(@object);
                    case "TotalQuantity": return GetSampleRequestItem_TotalQuantity(@object);
                    case "UnitCorePrice": return GetSampleRequestItem_UnitCorePrice(@object);
                    case "UnitSoldPrice": return GetSampleRequestItem_UnitSoldPrice(@object);
                    case "UnitCorePriceInSellingCurrency": return GetSampleRequestItem_UnitCorePriceInSellingCurrency(@object);
                    case "UnitSoldPriceInSellingCurrency": return GetSampleRequestItem_UnitSoldPriceInSellingCurrency(@object);
                    case "MasterID": return GetSampleRequestItem_MasterID(@object);
                    case "ProductID": return GetSampleRequestItem_ProductID(@object);
                    case "UserID": return GetSampleRequestItem_UserID(@object);
                    case "User": return GetSampleRequestItem_User(@object);
                    case "OriginalCurrencyID": return GetSampleRequestItem_OriginalCurrencyID(@object);
                    case "OriginalCurrency": return GetSampleRequestItem_OriginalCurrency(@object);
                    case "SellingCurrencyID": return GetSampleRequestItem_SellingCurrencyID(@object);
                    case "SellingCurrency": return GetSampleRequestItem_SellingCurrency(@object);
                    case "Discounts": return GetSampleRequestItem_Discounts(@object);
                    case "Targets": return GetSampleRequestItem_Targets(@object);
                    case "Notes": return GetSampleRequestItem_Notes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetSampleRequestItemTarget_Quantity(@object);
                    case "NothingToShip": return GetSampleRequestItemTarget_NothingToShip(@object);
                    case "MasterID": return GetSampleRequestItemTarget_MasterID(@object);
                    case "TypeID": return GetSampleRequestItemTarget_TypeID(@object);
                    case "Type": return GetSampleRequestItemTarget_Type(@object);
                    case "DestinationContactID": return GetSampleRequestItemTarget_DestinationContactID(@object);
                    case "DestinationContact": return GetSampleRequestItemTarget_DestinationContact(@object);
                    case "OriginProductInventoryLocationSectionID": return GetSampleRequestItemTarget_OriginProductInventoryLocationSectionID(@object);
                    case "OriginProductInventoryLocationSection": return GetSampleRequestItemTarget_OriginProductInventoryLocationSection(@object);
                    case "OriginStoreProductID": return GetSampleRequestItemTarget_OriginStoreProductID(@object);
                    case "OriginStoreProduct": return GetSampleRequestItemTarget_OriginStoreProduct(@object);
                    case "BrandProductID": return GetSampleRequestItemTarget_BrandProductID(@object);
                    case "BrandProduct": return GetSampleRequestItemTarget_BrandProduct(@object);
                    case "OriginVendorProductID": return GetSampleRequestItemTarget_OriginVendorProductID(@object);
                    case "OriginVendorProduct": return GetSampleRequestItemTarget_OriginVendorProduct(@object);
                    case "SelectedRateQuoteID": return GetSampleRequestItemTarget_SelectedRateQuoteID(@object);
                    case "SelectedRateQuote": return GetSampleRequestItemTarget_SelectedRateQuote(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSampleRequestState_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSampleRequestStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSampleRequestType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Scouting
            if (type.GetInterfaces().Any(x => x == typeof(IScoutModel)))
            {
                switch (property)
                {
                    case "YearMin": return GetScout_YearMin(@object);
                    case "YearMax": return GetScout_YearMax(@object);
                    case "PriceMin": return GetScout_PriceMin(@object);
                    case "PriceMax": return GetScout_PriceMax(@object);
                    case "HoursUsedMin": return GetScout_HoursUsedMin(@object);
                    case "HoursUsedMax": return GetScout_HoursUsedMax(@object);
                    case "DistanceUsedMin": return GetScout_DistanceUsedMin(@object);
                    case "DistanceUsedMax": return GetScout_DistanceUsedMax(@object);
                    case "DistanceUnitOfMeasure": return GetScout_DistanceUnitOfMeasure(@object);
                    case "CreatedByUserID": return GetScout_CreatedByUserID(@object);
                    case "CreatedByUser": return GetScout_CreatedByUser(@object);
                    case "Categories": return GetScout_Categories(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IScoutCategoryModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetScoutCategory_MasterID(@object);
                    case "SlaveID": return GetScoutCategory_SlaveID(@object);
                    case "Slave": return GetScoutCategory_Slave(@object);
                    case "TypeID": return GetScoutCategory_TypeID(@object);
                    case "Type": return GetScoutCategory_Type(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetScoutCategoryType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Shipping
            if (type.GetInterfaces().Any(x => x == typeof(IPackageModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetPackage_TypeID(@object);
                    case "Type": return GetPackage_Type(@object);
                    case "Width": return GetPackage_Width(@object);
                    case "WidthUnitOfMeasure": return GetPackage_WidthUnitOfMeasure(@object);
                    case "Depth": return GetPackage_Depth(@object);
                    case "DepthUnitOfMeasure": return GetPackage_DepthUnitOfMeasure(@object);
                    case "Height": return GetPackage_Height(@object);
                    case "HeightUnitOfMeasure": return GetPackage_HeightUnitOfMeasure(@object);
                    case "Weight": return GetPackage_Weight(@object);
                    case "WeightUnitOfMeasure": return GetPackage_WeightUnitOfMeasure(@object);
                    case "DimensionalWeight": return GetPackage_DimensionalWeight(@object);
                    case "DimensionalWeightUnitOfMeasure": return GetPackage_DimensionalWeightUnitOfMeasure(@object);
                    case "IsCustom": return GetPackage_IsCustom(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPackageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRateQuoteModel)))
            {
                switch (property)
                {
                    case "EstimatedDeliveryDate": return GetRateQuote_EstimatedDeliveryDate(@object);
                    case "TargetShippingDate": return GetRateQuote_TargetShippingDate(@object);
                    case "Rate": return GetRateQuote_Rate(@object);
                    case "CartHash": return GetRateQuote_CartHash(@object);
                    case "RateTimestamp": return GetRateQuote_RateTimestamp(@object);
                    case "Selected": return GetRateQuote_Selected(@object);
                    case "ShipCarrierMethodID": return GetRateQuote_ShipCarrierMethodID(@object);
                    case "ShipCarrierMethod": return GetRateQuote_ShipCarrierMethod(@object);
                    case "CartID": return GetRateQuote_CartID(@object);
                    case "SampleRequestID": return GetRateQuote_SampleRequestID(@object);
                    case "SalesQuoteID": return GetRateQuote_SalesQuoteID(@object);
                    case "SalesOrderID": return GetRateQuote_SalesOrderID(@object);
                    case "PurchaseOrderID": return GetRateQuote_PurchaseOrderID(@object);
                    case "SalesInvoiceID": return GetRateQuote_SalesInvoiceID(@object);
                    case "SalesReturnID": return GetRateQuote_SalesReturnID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipCarrierModel)))
            {
                switch (property)
                {
                    case "ContactID": return GetShipCarrier_ContactID(@object);
                    case "Contact": return GetShipCarrier_Contact(@object);
                    case "PointOfContact": return GetShipCarrier_PointOfContact(@object);
                    case "IsInbound": return GetShipCarrier_IsInbound(@object);
                    case "IsOutbound": return GetShipCarrier_IsOutbound(@object);
                    case "Username": return GetShipCarrier_Username(@object);
                    case "Authentication": return GetShipCarrier_Authentication(@object);
                    case "AccountNumber": return GetShipCarrier_AccountNumber(@object);
                    case "SalesRep": return GetShipCarrier_SalesRep(@object);
                    case "PickupTime": return GetShipCarrier_PickupTime(@object);
                    case "ShipCarrierMethods": return GetShipCarrier_ShipCarrierMethods(@object);
                    case "Shipments": return GetShipCarrier_Shipments(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipCarrierMethodModel)))
            {
                switch (property)
                {
                    case "ShipCarrierID": return GetShipCarrierMethod_ShipCarrierID(@object);
                    case "ShipCarrier": return GetShipCarrierMethod_ShipCarrier(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipmentModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetShipment_TypeID(@object);
                    case "Type": return GetShipment_Type(@object);
                    case "StatusID": return GetShipment_StatusID(@object);
                    case "Status": return GetShipment_Status(@object);
                    case "Reference1": return GetShipment_Reference1(@object);
                    case "Reference2": return GetShipment_Reference2(@object);
                    case "Reference3": return GetShipment_Reference3(@object);
                    case "TrackingNumber": return GetShipment_TrackingNumber(@object);
                    case "Destination": return GetShipment_Destination(@object);
                    case "TargetShippingDate": return GetShipment_TargetShippingDate(@object);
                    case "EstimatedDeliveryDate": return GetShipment_EstimatedDeliveryDate(@object);
                    case "ShipDate": return GetShipment_ShipDate(@object);
                    case "DateDelivered": return GetShipment_DateDelivered(@object);
                    case "NegotiatedRate": return GetShipment_NegotiatedRate(@object);
                    case "PublishedRate": return GetShipment_PublishedRate(@object);
                    case "OriginContactID": return GetShipment_OriginContactID(@object);
                    case "OriginContact": return GetShipment_OriginContact(@object);
                    case "DestinationContactID": return GetShipment_DestinationContactID(@object);
                    case "DestinationContact": return GetShipment_DestinationContact(@object);
                    case "InventoryLocationSectionID": return GetShipment_InventoryLocationSectionID(@object);
                    case "InventoryLocationSection": return GetShipment_InventoryLocationSection(@object);
                    case "ShipCarrierID": return GetShipment_ShipCarrierID(@object);
                    case "ShipCarrier": return GetShipment_ShipCarrier(@object);
                    case "ShipCarrierMethodID": return GetShipment_ShipCarrierMethodID(@object);
                    case "ShipCarrierMethod": return GetShipment_ShipCarrierMethod(@object);
                    case "VendorID": return GetShipment_VendorID(@object);
                    case "Vendor": return GetShipment_Vendor(@object);
                    case "ShipmentEvents": return GetShipment_ShipmentEvents(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IShipmentEventModel)))
            {
                switch (property)
                {
                    case "Note": return GetShipmentEvent_Note(@object);
                    case "EventDate": return GetShipmentEvent_EventDate(@object);
                    case "AddressID": return GetShipmentEvent_AddressID(@object);
                    case "Address": return GetShipmentEvent_Address(@object);
                    case "ShipmentID": return GetShipmentEvent_ShipmentID(@object);
                    case "Shipment": return GetShipmentEvent_Shipment(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetShipmentStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetShipmentType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Shopping
            if (type.GetInterfaces().Any(x => x == typeof(ICartModel)))
            {
                switch (property)
                {
                    case "DueDate": return GetCart_DueDate(@object);
                    case "SubtotalItems": return GetCart_SubtotalItems(@object);
                    case "SubtotalShipping": return GetCart_SubtotalShipping(@object);
                    case "SubtotalTaxes": return GetCart_SubtotalTaxes(@object);
                    case "SubtotalFees": return GetCart_SubtotalFees(@object);
                    case "SubtotalHandling": return GetCart_SubtotalHandling(@object);
                    case "SubtotalDiscounts": return GetCart_SubtotalDiscounts(@object);
                    case "Total": return GetCart_Total(@object);
                    case "ShippingSameAsBilling": return GetCart_ShippingSameAsBilling(@object);
                    case "BillingContactID": return GetCart_BillingContactID(@object);
                    case "BillingContact": return GetCart_BillingContact(@object);
                    case "ShippingContactID": return GetCart_ShippingContactID(@object);
                    case "ShippingContact": return GetCart_ShippingContact(@object);
                    case "StatusID": return GetCart_StatusID(@object);
                    case "Status": return GetCart_Status(@object);
                    case "StateID": return GetCart_StateID(@object);
                    case "State": return GetCart_State(@object);
                    case "TypeID": return GetCart_TypeID(@object);
                    case "Type": return GetCart_Type(@object);
                    case "UserID": return GetCart_UserID(@object);
                    case "User": return GetCart_User(@object);
                    case "AccountID": return GetCart_AccountID(@object);
                    case "Account": return GetCart_Account(@object);
                    case "SalesItems": return GetCart_SalesItems(@object);
                    case "Discounts": return GetCart_Discounts(@object);
                    case "StoredFiles": return GetCart_StoredFiles(@object);
                    case "Contacts": return GetCart_Contacts(@object);
                    case "RateQuotes": return GetCart_RateQuotes(@object);
                    case "Notes": return GetCart_Notes(@object);
                    case "StoreID": return GetCart_StoreID(@object);
                    case "Store": return GetCart_Store(@object);
                    case "BrandID": return GetCart_BrandID(@object);
                    case "Brand": return GetCart_Brand(@object);
                    case "SessionID": return GetCart_SessionID(@object);
                    case "SubtotalShippingModifier": return GetCart_SubtotalShippingModifier(@object);
                    case "SubtotalShippingModifierMode": return GetCart_SubtotalShippingModifierMode(@object);
                    case "SubtotalTaxesModifier": return GetCart_SubtotalTaxesModifier(@object);
                    case "SubtotalTaxesModifierMode": return GetCart_SubtotalTaxesModifierMode(@object);
                    case "SubtotalFeesModifier": return GetCart_SubtotalFeesModifier(@object);
                    case "SubtotalFeesModifierMode": return GetCart_SubtotalFeesModifierMode(@object);
                    case "SubtotalHandlingModifier": return GetCart_SubtotalHandlingModifier(@object);
                    case "SubtotalHandlingModifierMode": return GetCart_SubtotalHandlingModifierMode(@object);
                    case "SubtotalDiscountsModifier": return GetCart_SubtotalDiscountsModifier(@object);
                    case "SubtotalDiscountsModifierMode": return GetCart_SubtotalDiscountsModifierMode(@object);
                    case "RequestedShipDate": return GetCart_RequestedShipDate(@object);
                    case "ShipmentID": return GetCart_ShipmentID(@object);
                    case "Shipment": return GetCart_Shipment(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCartContact_MasterID(@object);
                    case "SlaveID": return GetCartContact_SlaveID(@object);
                    case "Slave": return GetCartContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartFileModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCartFile_MasterID(@object);
                    case "SlaveID": return GetCartFile_SlaveID(@object);
                    case "Slave": return GetCartFile_Slave(@object);
                    case "FileAccessTypeID": return GetCartFile_FileAccessTypeID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemBaseModel)))
            {
                switch (property)
                {
                    case "Sku": return GetCartItem_Sku(@object);
                    case "UnitOfMeasure": return GetCartItem_UnitOfMeasure(@object);
                    case "ForceUniqueLineItemKey": return GetCartItem_ForceUniqueLineItemKey(@object);
                    case "Quantity": return GetCartItem_Quantity(@object);
                    case "QuantityBackOrdered": return GetCartItem_QuantityBackOrdered(@object);
                    case "QuantityPreSold": return GetCartItem_QuantityPreSold(@object);
                    case "TotalQuantity": return GetCartItem_TotalQuantity(@object);
                    case "UnitCorePrice": return GetCartItem_UnitCorePrice(@object);
                    case "UnitSoldPrice": return GetCartItem_UnitSoldPrice(@object);
                    case "UnitCorePriceInSellingCurrency": return GetCartItem_UnitCorePriceInSellingCurrency(@object);
                    case "UnitSoldPriceInSellingCurrency": return GetCartItem_UnitSoldPriceInSellingCurrency(@object);
                    case "MasterID": return GetCartItem_MasterID(@object);
                    case "ProductID": return GetCartItem_ProductID(@object);
                    case "UserID": return GetCartItem_UserID(@object);
                    case "User": return GetCartItem_User(@object);
                    case "OriginalCurrencyID": return GetCartItem_OriginalCurrencyID(@object);
                    case "OriginalCurrency": return GetCartItem_OriginalCurrency(@object);
                    case "SellingCurrencyID": return GetCartItem_SellingCurrencyID(@object);
                    case "SellingCurrency": return GetCartItem_SellingCurrency(@object);
                    case "Discounts": return GetCartItem_Discounts(@object);
                    case "Targets": return GetCartItem_Targets(@object);
                    case "Notes": return GetCartItem_Notes(@object);
                    case "UnitSoldPriceModifier": return GetCartItem_UnitSoldPriceModifier(@object);
                    case "UnitSoldPriceModifierMode": return GetCartItem_UnitSoldPriceModifierMode(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISalesItemTargetBaseModel)))
            {
                switch (property)
                {
                    case "Quantity": return GetCartItemTarget_Quantity(@object);
                    case "NothingToShip": return GetCartItemTarget_NothingToShip(@object);
                    case "MasterID": return GetCartItemTarget_MasterID(@object);
                    case "TypeID": return GetCartItemTarget_TypeID(@object);
                    case "Type": return GetCartItemTarget_Type(@object);
                    case "DestinationContactID": return GetCartItemTarget_DestinationContactID(@object);
                    case "DestinationContact": return GetCartItemTarget_DestinationContact(@object);
                    case "OriginProductInventoryLocationSectionID": return GetCartItemTarget_OriginProductInventoryLocationSectionID(@object);
                    case "OriginProductInventoryLocationSection": return GetCartItemTarget_OriginProductInventoryLocationSection(@object);
                    case "OriginStoreProductID": return GetCartItemTarget_OriginStoreProductID(@object);
                    case "OriginStoreProduct": return GetCartItemTarget_OriginStoreProduct(@object);
                    case "BrandProductID": return GetCartItemTarget_BrandProductID(@object);
                    case "BrandProduct": return GetCartItemTarget_BrandProduct(@object);
                    case "OriginVendorProductID": return GetCartItemTarget_OriginVendorProductID(@object);
                    case "OriginVendorProduct": return GetCartItemTarget_OriginVendorProduct(@object);
                    case "SelectedRateQuoteID": return GetCartItemTarget_SelectedRateQuoteID(@object);
                    case "SelectedRateQuote": return GetCartItemTarget_SelectedRateQuote(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStateModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCartState_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCartStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICartTypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetCartType_StoreID(@object);
                    case "Store": return GetCartType_Store(@object);
                    case "BrandID": return GetCartType_BrandID(@object);
                    case "Brand": return GetCartType_Brand(@object);
                    case "CreatedByUserID": return GetCartType_CreatedByUserID(@object);
                    case "CreatedByUser": return GetCartType_CreatedByUser(@object);
                    case "TranslationKey": return GetCartType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Stores
            if (type.GetInterfaces().Any(x => x == typeof(ISiteDomainModel)))
            {
                switch (property)
                {
                    case "Brands": return GetSiteDomain_Brands(@object);
                    case "HeaderContent": return GetSiteDomain_HeaderContent(@object);
                    case "FooterContent": return GetSiteDomain_FooterContent(@object);
                    case "SideBarContent": return GetSiteDomain_SideBarContent(@object);
                    case "CatalogContent": return GetSiteDomain_CatalogContent(@object);
                    case "Url": return GetSiteDomain_Url(@object);
                    case "AlternateUrl1": return GetSiteDomain_AlternateUrl1(@object);
                    case "AlternateUrl2": return GetSiteDomain_AlternateUrl2(@object);
                    case "AlternateUrl3": return GetSiteDomain_AlternateUrl3(@object);
                    case "SiteDomainSocialProviders": return GetSiteDomain_SiteDomainSocialProviders(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISiteDomainSocialProviderModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetSiteDomainSocialProvider_MasterID(@object);
                    case "SlaveID": return GetSiteDomainSocialProvider_SlaveID(@object);
                    case "Slave": return GetSiteDomainSocialProvider_Slave(@object);
                    case "Script": return GetSiteDomainSocialProvider_Script(@object);
                    case "UrlValues": return GetSiteDomainSocialProvider_UrlValues(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISocialProviderModel)))
            {
                switch (property)
                {
                    case "Url": return GetSocialProvider_Url(@object);
                    case "UrlFormat": return GetSocialProvider_UrlFormat(@object);
                    case "SiteDomainSocialProviders": return GetSocialProvider_SiteDomainSocialProviders(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetStore_TypeID(@object);
                    case "Type": return GetStore_Type(@object);
                    case "ContactID": return GetStore_ContactID(@object);
                    case "Contact": return GetStore_Contact(@object);
                    case "Notes": return GetStore_Notes(@object);
                    case "Images": return GetStore_Images(@object);
                    case "Reviews": return GetStore_Reviews(@object);
                    case "MinimumOrderDollarAmount": return GetStore_MinimumOrderDollarAmount(@object);
                    case "MinimumOrderDollarAmountAfter": return GetStore_MinimumOrderDollarAmountAfter(@object);
                    case "MinimumOrderDollarAmountWarningMessage": return GetStore_MinimumOrderDollarAmountWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFee": return GetStore_MinimumOrderDollarAmountOverrideFee(@object);
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetStore_MinimumOrderDollarAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetStore_MinimumOrderDollarAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetStore_MinimumOrderDollarAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderQuantityAmount": return GetStore_MinimumOrderQuantityAmount(@object);
                    case "MinimumOrderQuantityAmountAfter": return GetStore_MinimumOrderQuantityAmountAfter(@object);
                    case "MinimumOrderQuantityAmountWarningMessage": return GetStore_MinimumOrderQuantityAmountWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFee": return GetStore_MinimumOrderQuantityAmountOverrideFee(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetStore_MinimumOrderQuantityAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetStore_MinimumOrderQuantityAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetStore_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderDollarAmountBufferProductID": return GetStore_MinimumOrderDollarAmountBufferProductID(@object);
                    case "MinimumOrderDollarAmountBufferProduct": return GetStore_MinimumOrderDollarAmountBufferProduct(@object);
                    case "MinimumOrderQuantityAmountBufferProductID": return GetStore_MinimumOrderQuantityAmountBufferProductID(@object);
                    case "MinimumOrderQuantityAmountBufferProduct": return GetStore_MinimumOrderQuantityAmountBufferProduct(@object);
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetStore_MinimumOrderDollarAmountBufferCategoryID(@object);
                    case "MinimumOrderDollarAmountBufferCategory": return GetStore_MinimumOrderDollarAmountBufferCategory(@object);
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetStore_MinimumOrderQuantityAmountBufferCategoryID(@object);
                    case "MinimumOrderQuantityAmountBufferCategory": return GetStore_MinimumOrderQuantityAmountBufferCategory(@object);
                    case "MinimumForFreeShippingDollarAmount": return GetStore_MinimumForFreeShippingDollarAmount(@object);
                    case "MinimumForFreeShippingDollarAmountAfter": return GetStore_MinimumForFreeShippingDollarAmountAfter(@object);
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetStore_MinimumForFreeShippingDollarAmountWarningMessage(@object);
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetStore_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingQuantityAmount": return GetStore_MinimumForFreeShippingQuantityAmount(@object);
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetStore_MinimumForFreeShippingQuantityAmountAfter(@object);
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetStore_MinimumForFreeShippingQuantityAmountWarningMessage(@object);
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetStore_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetStore_MinimumForFreeShippingDollarAmountBufferProductID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetStore_MinimumForFreeShippingDollarAmountBufferProduct(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetStore_MinimumForFreeShippingQuantityAmountBufferProductID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetStore_MinimumForFreeShippingQuantityAmountBufferProduct(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetStore_MinimumForFreeShippingDollarAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetStore_MinimumForFreeShippingDollarAmountBufferCategory(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetStore_MinimumForFreeShippingQuantityAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetStore_MinimumForFreeShippingQuantityAmountBufferCategory(@object);
                    case "Accounts": return GetStore_Accounts(@object);
                    case "Users": return GetStore_Users(@object);
                    case "Vendors": return GetStore_Vendors(@object);
                    case "Brands": return GetStore_Brands(@object);
                    case "Manufacturers": return GetStore_Manufacturers(@object);
                    case "Slogan": return GetStore_Slogan(@object);
                    case "MissionStatement": return GetStore_MissionStatement(@object);
                    case "About": return GetStore_About(@object);
                    case "Overview": return GetStore_Overview(@object);
                    case "ExternalUrl": return GetStore_ExternalUrl(@object);
                    case "OperatingHoursTimeZoneId": return GetStore_OperatingHoursTimeZoneId(@object);
                    case "OperatingHoursMondayStart": return GetStore_OperatingHoursMondayStart(@object);
                    case "OperatingHoursMondayEnd": return GetStore_OperatingHoursMondayEnd(@object);
                    case "OperatingHoursTuesdayStart": return GetStore_OperatingHoursTuesdayStart(@object);
                    case "OperatingHoursTuesdayEnd": return GetStore_OperatingHoursTuesdayEnd(@object);
                    case "OperatingHoursWednesdayStart": return GetStore_OperatingHoursWednesdayStart(@object);
                    case "OperatingHoursWednesdayEnd": return GetStore_OperatingHoursWednesdayEnd(@object);
                    case "OperatingHoursThursdayStart": return GetStore_OperatingHoursThursdayStart(@object);
                    case "OperatingHoursThursdayEnd": return GetStore_OperatingHoursThursdayEnd(@object);
                    case "OperatingHoursFridayStart": return GetStore_OperatingHoursFridayStart(@object);
                    case "OperatingHoursFridayEnd": return GetStore_OperatingHoursFridayEnd(@object);
                    case "OperatingHoursSaturdayStart": return GetStore_OperatingHoursSaturdayStart(@object);
                    case "OperatingHoursSaturdayEnd": return GetStore_OperatingHoursSaturdayEnd(@object);
                    case "OperatingHoursSundayStart": return GetStore_OperatingHoursSundayStart(@object);
                    case "OperatingHoursSundayEnd": return GetStore_OperatingHoursSundayEnd(@object);
                    case "OperatingHoursClosedStatement": return GetStore_OperatingHoursClosedStatement(@object);
                    case "LanguageID": return GetStore_LanguageID(@object);
                    case "Language": return GetStore_Language(@object);
                    case "StoreBadges": return GetStore_StoreBadges(@object);
                    case "StoreContacts": return GetStore_StoreContacts(@object);
                    case "StoreInventoryLocations": return GetStore_StoreInventoryLocations(@object);
                    case "StoreSubscriptions": return GetStore_StoreSubscriptions(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreAccount_MasterID(@object);
                    case "SlaveID": return GetStoreAccount_SlaveID(@object);
                    case "Slave": return GetStoreAccount_Slave(@object);
                    case "HasAccessToStore": return GetStoreAccount_HasAccessToStore(@object);
                    case "PricePointID": return GetStoreAccount_PricePointID(@object);
                    case "PricePoint": return GetStoreAccount_PricePoint(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreBadgeModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreBadge_MasterID(@object);
                    case "SlaveID": return GetStoreBadge_SlaveID(@object);
                    case "Slave": return GetStoreBadge_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreContactModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreContact_MasterID(@object);
                    case "SlaveID": return GetStoreContact_SlaveID(@object);
                    case "Slave": return GetStoreContact_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreImage_MasterID(@object);
                    case "TypeID": return GetStoreImage_TypeID(@object);
                    case "Type": return GetStoreImage_Type(@object);
                    case "SeoTitle": return GetStoreImage_SeoTitle(@object);
                    case "Author": return GetStoreImage_Author(@object);
                    case "MediaDate": return GetStoreImage_MediaDate(@object);
                    case "Copyright": return GetStoreImage_Copyright(@object);
                    case "Location": return GetStoreImage_Location(@object);
                    case "Latitude": return GetStoreImage_Latitude(@object);
                    case "Longitude": return GetStoreImage_Longitude(@object);
                    case "IsPrimary": return GetStoreImage_IsPrimary(@object);
                    case "OriginalWidth": return GetStoreImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetStoreImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetStoreImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetStoreImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetStoreImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetStoreImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetStoreImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetStoreImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetStoreImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetStoreImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetStoreImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetStoreImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetStoreImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreInventoryLocationModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreInventoryLocation_MasterID(@object);
                    case "SlaveID": return GetStoreInventoryLocation_SlaveID(@object);
                    case "Slave": return GetStoreInventoryLocation_Slave(@object);
                    case "TypeID": return GetStoreInventoryLocation_TypeID(@object);
                    case "Type": return GetStoreInventoryLocation_Type(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetStoreInventoryLocationType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreManufacturer_MasterID(@object);
                    case "SlaveID": return GetStoreManufacturer_SlaveID(@object);
                    case "Slave": return GetStoreManufacturer_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreProduct_MasterID(@object);
                    case "SlaveID": return GetStoreProduct_SlaveID(@object);
                    case "Slave": return GetStoreProduct_Slave(@object);
                    case "IsVisibleInStore": return GetStoreProduct_IsVisibleInStore(@object);
                    case "PriceBase": return GetStoreProduct_PriceBase(@object);
                    case "PriceMsrp": return GetStoreProduct_PriceMsrp(@object);
                    case "PriceReduction": return GetStoreProduct_PriceReduction(@object);
                    case "PriceSale": return GetStoreProduct_PriceSale(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreSubscriptionModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreSubscription_MasterID(@object);
                    case "SlaveID": return GetStoreSubscription_SlaveID(@object);
                    case "Slave": return GetStoreSubscription_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetStoreType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreUserModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreUser_MasterID(@object);
                    case "SlaveID": return GetStoreUser_SlaveID(@object);
                    case "Slave": return GetStoreUser_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStoreVendorModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetStoreVendor_MasterID(@object);
                    case "SlaveID": return GetStoreVendor_SlaveID(@object);
                    case "Slave": return GetStoreVendor_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region System
            if (type.GetInterfaces().Any(x => x == typeof(IImportExportMappingModel)))
            {
                switch (property)
                {
                    case "MappingJson": return GetImportExportMapping_MappingJson(@object);
                    case "MappingJsonHash": return GetImportExportMapping_MappingJsonHash(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(INoteModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetNote_TypeID(@object);
                    case "Type": return GetNote_Type(@object);
                    case "Note1": return GetNote_Note1(@object);
                    case "CreatedByUserID": return GetNote_CreatedByUserID(@object);
                    case "CreatedByUser": return GetNote_CreatedByUser(@object);
                    case "UpdatedByUserID": return GetNote_UpdatedByUserID(@object);
                    case "UpdatedByUser": return GetNote_UpdatedByUser(@object);
                    case "AccountID": return GetNote_AccountID(@object);
                    case "UserID": return GetNote_UserID(@object);
                    case "VendorID": return GetNote_VendorID(@object);
                    case "ManufacturerID": return GetNote_ManufacturerID(@object);
                    case "BrandID": return GetNote_BrandID(@object);
                    case "StoreID": return GetNote_StoreID(@object);
                    case "SalesGroupID": return GetNote_SalesGroupID(@object);
                    case "PurchaseOrderID": return GetNote_PurchaseOrderID(@object);
                    case "SalesOrderID": return GetNote_SalesOrderID(@object);
                    case "SalesInvoiceID": return GetNote_SalesInvoiceID(@object);
                    case "SalesQuoteID": return GetNote_SalesQuoteID(@object);
                    case "SampleRequestID": return GetNote_SampleRequestID(@object);
                    case "SalesReturnID": return GetNote_SalesReturnID(@object);
                    case "CartID": return GetNote_CartID(@object);
                    case "PurchaseOrderItemID": return GetNote_PurchaseOrderItemID(@object);
                    case "SalesOrderItemID": return GetNote_SalesOrderItemID(@object);
                    case "SalesInvoiceItemID": return GetNote_SalesInvoiceItemID(@object);
                    case "SalesQuoteItemID": return GetNote_SalesQuoteItemID(@object);
                    case "SampleRequestItemID": return GetNote_SampleRequestItemID(@object);
                    case "SalesReturnItemID": return GetNote_SalesReturnItemID(@object);
                    case "CartItemID": return GetNote_CartItemID(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(INoteTypeModel)))
            {
                switch (property)
                {
                    case "IsPublic": return GetNoteType_IsPublic(@object);
                    case "IsCustomer": return GetNoteType_IsCustomer(@object);
                    case "TranslationKey": return GetNoteType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IRecordVersionModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetRecordVersion_StoreID(@object);
                    case "Store": return GetRecordVersion_Store(@object);
                    case "BrandID": return GetRecordVersion_BrandID(@object);
                    case "Brand": return GetRecordVersion_Brand(@object);
                    case "TypeID": return GetRecordVersion_TypeID(@object);
                    case "Type": return GetRecordVersion_Type(@object);
                    case "RecordID": return GetRecordVersion_RecordID(@object);
                    case "OriginalPublishDate": return GetRecordVersion_OriginalPublishDate(@object);
                    case "MostRecentPublishDate": return GetRecordVersion_MostRecentPublishDate(@object);
                    case "IsDraft": return GetRecordVersion_IsDraft(@object);
                    case "SerializedRecord": return GetRecordVersion_SerializedRecord(@object);
                    case "PublishedByUserID": return GetRecordVersion_PublishedByUserID(@object);
                    case "PublishedByUser": return GetRecordVersion_PublishedByUser(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetRecordVersionType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISettingModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetSetting_TypeID(@object);
                    case "Type": return GetSetting_Type(@object);
                    case "StoreID": return GetSetting_StoreID(@object);
                    case "Store": return GetSetting_Store(@object);
                    case "BrandID": return GetSetting_BrandID(@object);
                    case "Brand": return GetSetting_Brand(@object);
                    case "Value": return GetSetting_Value(@object);
                    case "SettingGroupID": return GetSetting_SettingGroupID(@object);
                    case "SettingGroup": return GetSetting_SettingGroup(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ISettingGroupModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSettingGroup_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetSettingType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEventLogModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetEventLog_StoreID(@object);
                    case "Store": return GetEventLog_Store(@object);
                    case "BrandID": return GetEventLog_BrandID(@object);
                    case "Brand": return GetEventLog_Brand(@object);
                    case "DataID": return GetEventLog_DataID(@object);
                    case "LogLevel": return GetEventLog_LogLevel(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Tax
            if (type.GetInterfaces().Any(x => x == typeof(IHistoricalTaxRateModel)))
            {
                switch (property)
                {
                    case "Provider": return GetHistoricalTaxRate_Provider(@object);
                    case "CartHash": return GetHistoricalTaxRate_CartHash(@object);
                    case "OnDate": return GetHistoricalTaxRate_OnDate(@object);
                    case "CountryLevelRate": return GetHistoricalTaxRate_CountryLevelRate(@object);
                    case "RegionLevelRate": return GetHistoricalTaxRate_RegionLevelRate(@object);
                    case "CountyLevelRate": return GetHistoricalTaxRate_CountyLevelRate(@object);
                    case "TotalAmount": return GetHistoricalTaxRate_TotalAmount(@object);
                    case "TotalTaxable": return GetHistoricalTaxRate_TotalTaxable(@object);
                    case "TotalTax": return GetHistoricalTaxRate_TotalTax(@object);
                    case "TotalTaxCalculated": return GetHistoricalTaxRate_TotalTaxCalculated(@object);
                    case "Rate": return GetHistoricalTaxRate_Rate(@object);
                    case "SerializedRequest": return GetHistoricalTaxRate_SerializedRequest(@object);
                    case "SerializedResponse": return GetHistoricalTaxRate_SerializedResponse(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITaxCountryModel)))
            {
                switch (property)
                {
                    case "Rate": return GetTaxCountry_Rate(@object);
                    case "CountryID": return GetTaxCountry_CountryID(@object);
                    case "Country": return GetTaxCountry_Country(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITaxRegionModel)))
            {
                switch (property)
                {
                    case "Rate": return GetTaxRegion_Rate(@object);
                    case "RegionID": return GetTaxRegion_RegionID(@object);
                    case "Region": return GetTaxRegion_Region(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Tracking
            if (type.GetInterfaces().Any(x => x == typeof(ICampaignModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetCampaign_TypeID(@object);
                    case "Type": return GetCampaign_Type(@object);
                    case "StatusID": return GetCampaign_StatusID(@object);
                    case "Status": return GetCampaign_Status(@object);
                    case "ProposedStart": return GetCampaign_ProposedStart(@object);
                    case "ProposedEnd": return GetCampaign_ProposedEnd(@object);
                    case "ActualStart": return GetCampaign_ActualStart(@object);
                    case "ActualEnd": return GetCampaign_ActualEnd(@object);
                    case "BudgetedCost": return GetCampaign_BudgetedCost(@object);
                    case "OtherCost": return GetCampaign_OtherCost(@object);
                    case "ExpectedRevenue": return GetCampaign_ExpectedRevenue(@object);
                    case "TotalActualCost": return GetCampaign_TotalActualCost(@object);
                    case "TotalCampaignActivityActualCost": return GetCampaign_TotalCampaignActivityActualCost(@object);
                    case "ExchangeRate": return GetCampaign_ExchangeRate(@object);
                    case "CodeName": return GetCampaign_CodeName(@object);
                    case "PromotionCodeName": return GetCampaign_PromotionCodeName(@object);
                    case "Message": return GetCampaign_Message(@object);
                    case "Objective": return GetCampaign_Objective(@object);
                    case "ExpectedResponse": return GetCampaign_ExpectedResponse(@object);
                    case "UTCConversionTimeZoneCode": return GetCampaign_UTCConversionTimeZoneCode(@object);
                    case "IsTemplate": return GetCampaign_IsTemplate(@object);
                    case "CreatedByUserID": return GetCampaign_CreatedByUserID(@object);
                    case "CreatedByUser": return GetCampaign_CreatedByUser(@object);
                    case "CampaignAds": return GetCampaign_CampaignAds(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ICampaignAdModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetCampaignAd_MasterID(@object);
                    case "SlaveID": return GetCampaignAd_SlaveID(@object);
                    case "Slave": return GetCampaignAd_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetCampaignStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "StoreID": return GetCampaignType_StoreID(@object);
                    case "Store": return GetCampaignType_Store(@object);
                    case "BrandID": return GetCampaignType_BrandID(@object);
                    case "Brand": return GetCampaignType_Brand(@object);
                    case "TranslationKey": return GetCampaignType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IEventModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetEvent_TypeID(@object);
                    case "Type": return GetEvent_Type(@object);
                    case "StatusID": return GetEvent_StatusID(@object);
                    case "Status": return GetEvent_Status(@object);
                    case "IPAddress": return GetEvent_IPAddress(@object);
                    case "Score": return GetEvent_Score(@object);
                    case "AddressID": return GetEvent_AddressID(@object);
                    case "Address": return GetEvent_Address(@object);
                    case "IPOrganizationID": return GetEvent_IPOrganizationID(@object);
                    case "IPOrganization": return GetEvent_IPOrganization(@object);
                    case "UserID": return GetEvent_UserID(@object);
                    case "User": return GetEvent_User(@object);
                    case "DidBounce": return GetEvent_DidBounce(@object);
                    case "OperatingSystem": return GetEvent_OperatingSystem(@object);
                    case "Browser": return GetEvent_Browser(@object);
                    case "Language": return GetEvent_Language(@object);
                    case "ContainsSocialProfile": return GetEvent_ContainsSocialProfile(@object);
                    case "Delta": return GetEvent_Delta(@object);
                    case "Duration": return GetEvent_Duration(@object);
                    case "StartedOn": return GetEvent_StartedOn(@object);
                    case "EndedOn": return GetEvent_EndedOn(@object);
                    case "Time": return GetEvent_Time(@object);
                    case "EntryPage": return GetEvent_EntryPage(@object);
                    case "ExitPage": return GetEvent_ExitPage(@object);
                    case "IsFirstTrigger": return GetEvent_IsFirstTrigger(@object);
                    case "Flash": return GetEvent_Flash(@object);
                    case "Keywords": return GetEvent_Keywords(@object);
                    case "PartitionKey": return GetEvent_PartitionKey(@object);
                    case "Referrer": return GetEvent_Referrer(@object);
                    case "ReferringHost": return GetEvent_ReferringHost(@object);
                    case "RowKey": return GetEvent_RowKey(@object);
                    case "Source": return GetEvent_Source(@object);
                    case "TotalTriggers": return GetEvent_TotalTriggers(@object);
                    case "CampaignID": return GetEvent_CampaignID(@object);
                    case "Campaign": return GetEvent_Campaign(@object);
                    case "ContactID": return GetEvent_ContactID(@object);
                    case "Contact": return GetEvent_Contact(@object);
                    case "SiteDomainID": return GetEvent_SiteDomainID(@object);
                    case "SiteDomain": return GetEvent_SiteDomain(@object);
                    case "VisitorID": return GetEvent_VisitorID(@object);
                    case "Visitor": return GetEvent_Visitor(@object);
                    case "VisitID": return GetEvent_VisitID(@object);
                    case "Visit": return GetEvent_Visit(@object);
                    case "PageViewEvents": return GetEvent_PageViewEvents(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetEventStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetEventType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IIPOrganizationModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetIPOrganization_StatusID(@object);
                    case "Status": return GetIPOrganization_Status(@object);
                    case "IPAddress": return GetIPOrganization_IPAddress(@object);
                    case "Score": return GetIPOrganization_Score(@object);
                    case "VisitorKey": return GetIPOrganization_VisitorKey(@object);
                    case "AddressID": return GetIPOrganization_AddressID(@object);
                    case "Address": return GetIPOrganization_Address(@object);
                    case "PrimaryUserID": return GetIPOrganization_PrimaryUserID(@object);
                    case "PrimaryUser": return GetIPOrganization_PrimaryUser(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetIPOrganizationStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPageViewModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetPageView_TypeID(@object);
                    case "Type": return GetPageView_Type(@object);
                    case "StatusID": return GetPageView_StatusID(@object);
                    case "Status": return GetPageView_Status(@object);
                    case "IPAddress": return GetPageView_IPAddress(@object);
                    case "Score": return GetPageView_Score(@object);
                    case "AddressID": return GetPageView_AddressID(@object);
                    case "Address": return GetPageView_Address(@object);
                    case "IPOrganizationID": return GetPageView_IPOrganizationID(@object);
                    case "IPOrganization": return GetPageView_IPOrganization(@object);
                    case "UserID": return GetPageView_UserID(@object);
                    case "User": return GetPageView_User(@object);
                    case "DidBounce": return GetPageView_DidBounce(@object);
                    case "OperatingSystem": return GetPageView_OperatingSystem(@object);
                    case "Browser": return GetPageView_Browser(@object);
                    case "Language": return GetPageView_Language(@object);
                    case "ContainsSocialProfile": return GetPageView_ContainsSocialProfile(@object);
                    case "Delta": return GetPageView_Delta(@object);
                    case "Duration": return GetPageView_Duration(@object);
                    case "StartedOn": return GetPageView_StartedOn(@object);
                    case "EndedOn": return GetPageView_EndedOn(@object);
                    case "Time": return GetPageView_Time(@object);
                    case "EntryPage": return GetPageView_EntryPage(@object);
                    case "ExitPage": return GetPageView_ExitPage(@object);
                    case "IsFirstTrigger": return GetPageView_IsFirstTrigger(@object);
                    case "Flash": return GetPageView_Flash(@object);
                    case "Keywords": return GetPageView_Keywords(@object);
                    case "PartitionKey": return GetPageView_PartitionKey(@object);
                    case "Referrer": return GetPageView_Referrer(@object);
                    case "ReferringHost": return GetPageView_ReferringHost(@object);
                    case "RowKey": return GetPageView_RowKey(@object);
                    case "Source": return GetPageView_Source(@object);
                    case "TotalTriggers": return GetPageView_TotalTriggers(@object);
                    case "CampaignID": return GetPageView_CampaignID(@object);
                    case "Campaign": return GetPageView_Campaign(@object);
                    case "ContactID": return GetPageView_ContactID(@object);
                    case "Contact": return GetPageView_Contact(@object);
                    case "SiteDomainID": return GetPageView_SiteDomainID(@object);
                    case "SiteDomain": return GetPageView_SiteDomain(@object);
                    case "VisitorID": return GetPageView_VisitorID(@object);
                    case "Visitor": return GetPageView_Visitor(@object);
                    case "Title": return GetPageView_Title(@object);
                    case "URI": return GetPageView_URI(@object);
                    case "ViewedOn": return GetPageView_ViewedOn(@object);
                    case "VisitKey": return GetPageView_VisitKey(@object);
                    case "CategoryID": return GetPageView_CategoryID(@object);
                    case "Category": return GetPageView_Category(@object);
                    case "ProductID": return GetPageView_ProductID(@object);
                    case "Product": return GetPageView_Product(@object);
                    case "PageViewEvents": return GetPageView_PageViewEvents(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IPageViewEventModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetPageViewEvent_MasterID(@object);
                    case "SlaveID": return GetPageViewEvent_SlaveID(@object);
                    case "Slave": return GetPageViewEvent_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPageViewStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetPageViewType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVisitModel)))
            {
                switch (property)
                {
                    case "StatusID": return GetVisit_StatusID(@object);
                    case "Status": return GetVisit_Status(@object);
                    case "IPAddress": return GetVisit_IPAddress(@object);
                    case "Score": return GetVisit_Score(@object);
                    case "AddressID": return GetVisit_AddressID(@object);
                    case "Address": return GetVisit_Address(@object);
                    case "IPOrganizationID": return GetVisit_IPOrganizationID(@object);
                    case "IPOrganization": return GetVisit_IPOrganization(@object);
                    case "UserID": return GetVisit_UserID(@object);
                    case "User": return GetVisit_User(@object);
                    case "DidBounce": return GetVisit_DidBounce(@object);
                    case "OperatingSystem": return GetVisit_OperatingSystem(@object);
                    case "Browser": return GetVisit_Browser(@object);
                    case "Language": return GetVisit_Language(@object);
                    case "ContainsSocialProfile": return GetVisit_ContainsSocialProfile(@object);
                    case "Delta": return GetVisit_Delta(@object);
                    case "Duration": return GetVisit_Duration(@object);
                    case "StartedOn": return GetVisit_StartedOn(@object);
                    case "EndedOn": return GetVisit_EndedOn(@object);
                    case "Time": return GetVisit_Time(@object);
                    case "EntryPage": return GetVisit_EntryPage(@object);
                    case "ExitPage": return GetVisit_ExitPage(@object);
                    case "IsFirstTrigger": return GetVisit_IsFirstTrigger(@object);
                    case "Flash": return GetVisit_Flash(@object);
                    case "Keywords": return GetVisit_Keywords(@object);
                    case "PartitionKey": return GetVisit_PartitionKey(@object);
                    case "Referrer": return GetVisit_Referrer(@object);
                    case "ReferringHost": return GetVisit_ReferringHost(@object);
                    case "RowKey": return GetVisit_RowKey(@object);
                    case "Source": return GetVisit_Source(@object);
                    case "TotalTriggers": return GetVisit_TotalTriggers(@object);
                    case "CampaignID": return GetVisit_CampaignID(@object);
                    case "Campaign": return GetVisit_Campaign(@object);
                    case "ContactID": return GetVisit_ContactID(@object);
                    case "Contact": return GetVisit_Contact(@object);
                    case "SiteDomainID": return GetVisit_SiteDomainID(@object);
                    case "SiteDomain": return GetVisit_SiteDomain(@object);
                    case "VisitorID": return GetVisit_VisitorID(@object);
                    case "Visitor": return GetVisit_Visitor(@object);
                    case "Events": return GetVisit_Events(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVisitorModel)))
            {
                switch (property)
                {
                    case "IPAddress": return GetVisitor_IPAddress(@object);
                    case "Score": return GetVisitor_Score(@object);
                    case "AddressID": return GetVisitor_AddressID(@object);
                    case "Address": return GetVisitor_Address(@object);
                    case "IPOrganizationID": return GetVisitor_IPOrganizationID(@object);
                    case "IPOrganization": return GetVisitor_IPOrganization(@object);
                    case "UserID": return GetVisitor_UserID(@object);
                    case "User": return GetVisitor_User(@object);
                    case "Visits": return GetVisitor_Visits(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IStatusModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetVisitStatus_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            #region Vendors
            if (type.GetInterfaces().Any(x => x == typeof(IVendorModel)))
            {
                switch (property)
                {
                    case "TypeID": return GetVendor_TypeID(@object);
                    case "Type": return GetVendor_Type(@object);
                    case "ContactID": return GetVendor_ContactID(@object);
                    case "Contact": return GetVendor_Contact(@object);
                    case "Notes": return GetVendor_Notes(@object);
                    case "Images": return GetVendor_Images(@object);
                    case "MinimumOrderDollarAmount": return GetVendor_MinimumOrderDollarAmount(@object);
                    case "MinimumOrderDollarAmountAfter": return GetVendor_MinimumOrderDollarAmountAfter(@object);
                    case "MinimumOrderDollarAmountWarningMessage": return GetVendor_MinimumOrderDollarAmountWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFee": return GetVendor_MinimumOrderDollarAmountOverrideFee(@object);
                    case "MinimumOrderDollarAmountOverrideFeeIsPercent": return GetVendor_MinimumOrderDollarAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderDollarAmountOverrideFeeWarningMessage": return GetVendor_MinimumOrderDollarAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderDollarAmountOverrideFeeAcceptedMessage": return GetVendor_MinimumOrderDollarAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderQuantityAmount": return GetVendor_MinimumOrderQuantityAmount(@object);
                    case "MinimumOrderQuantityAmountAfter": return GetVendor_MinimumOrderQuantityAmountAfter(@object);
                    case "MinimumOrderQuantityAmountWarningMessage": return GetVendor_MinimumOrderQuantityAmountWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFee": return GetVendor_MinimumOrderQuantityAmountOverrideFee(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeIsPercent": return GetVendor_MinimumOrderQuantityAmountOverrideFeeIsPercent(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeWarningMessage": return GetVendor_MinimumOrderQuantityAmountOverrideFeeWarningMessage(@object);
                    case "MinimumOrderQuantityAmountOverrideFeeAcceptedMessage": return GetVendor_MinimumOrderQuantityAmountOverrideFeeAcceptedMessage(@object);
                    case "MinimumOrderDollarAmountBufferProductID": return GetVendor_MinimumOrderDollarAmountBufferProductID(@object);
                    case "MinimumOrderDollarAmountBufferProduct": return GetVendor_MinimumOrderDollarAmountBufferProduct(@object);
                    case "MinimumOrderQuantityAmountBufferProductID": return GetVendor_MinimumOrderQuantityAmountBufferProductID(@object);
                    case "MinimumOrderQuantityAmountBufferProduct": return GetVendor_MinimumOrderQuantityAmountBufferProduct(@object);
                    case "MinimumOrderDollarAmountBufferCategoryID": return GetVendor_MinimumOrderDollarAmountBufferCategoryID(@object);
                    case "MinimumOrderDollarAmountBufferCategory": return GetVendor_MinimumOrderDollarAmountBufferCategory(@object);
                    case "MinimumOrderQuantityAmountBufferCategoryID": return GetVendor_MinimumOrderQuantityAmountBufferCategoryID(@object);
                    case "MinimumOrderQuantityAmountBufferCategory": return GetVendor_MinimumOrderQuantityAmountBufferCategory(@object);
                    case "MinimumForFreeShippingDollarAmount": return GetVendor_MinimumForFreeShippingDollarAmount(@object);
                    case "MinimumForFreeShippingDollarAmountAfter": return GetVendor_MinimumForFreeShippingDollarAmountAfter(@object);
                    case "MinimumForFreeShippingDollarAmountWarningMessage": return GetVendor_MinimumForFreeShippingDollarAmountWarningMessage(@object);
                    case "MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage": return GetVendor_MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingQuantityAmount": return GetVendor_MinimumForFreeShippingQuantityAmount(@object);
                    case "MinimumForFreeShippingQuantityAmountAfter": return GetVendor_MinimumForFreeShippingQuantityAmountAfter(@object);
                    case "MinimumForFreeShippingQuantityAmountWarningMessage": return GetVendor_MinimumForFreeShippingQuantityAmountWarningMessage(@object);
                    case "MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage": return GetVendor_MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProductID": return GetVendor_MinimumForFreeShippingDollarAmountBufferProductID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferProduct": return GetVendor_MinimumForFreeShippingDollarAmountBufferProduct(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProductID": return GetVendor_MinimumForFreeShippingQuantityAmountBufferProductID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferProduct": return GetVendor_MinimumForFreeShippingQuantityAmountBufferProduct(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategoryID": return GetVendor_MinimumForFreeShippingDollarAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingDollarAmountBufferCategory": return GetVendor_MinimumForFreeShippingDollarAmountBufferCategory(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategoryID": return GetVendor_MinimumForFreeShippingQuantityAmountBufferCategoryID(@object);
                    case "MinimumForFreeShippingQuantityAmountBufferCategory": return GetVendor_MinimumForFreeShippingQuantityAmountBufferCategory(@object);
                    case "Accounts": return GetVendor_Accounts(@object);
                    case "Products": return GetVendor_Products(@object);
                    case "Manufacturers": return GetVendor_Manufacturers(@object);
                    case "Notes1": return GetVendor_Notes1(@object);
                    case "AccountNumber": return GetVendor_AccountNumber(@object);
                    case "Terms": return GetVendor_Terms(@object);
                    case "TermNotes": return GetVendor_TermNotes(@object);
                    case "SendMethod": return GetVendor_SendMethod(@object);
                    case "EmailSubject": return GetVendor_EmailSubject(@object);
                    case "ShipTo": return GetVendor_ShipTo(@object);
                    case "ShipViaNotes": return GetVendor_ShipViaNotes(@object);
                    case "SignBy": return GetVendor_SignBy(@object);
                    case "AllowDropShip": return GetVendor_AllowDropShip(@object);
                    case "DefaultDiscount": return GetVendor_DefaultDiscount(@object);
                    case "RecommendedPurchaseOrderDollarAmount": return GetVendor_RecommendedPurchaseOrderDollarAmount(@object);
                    case "UserName": return GetVendor_UserName(@object);
                    case "PasswordHash": return GetVendor_PasswordHash(@object);
                    case "SecurityToken": return GetVendor_SecurityToken(@object);
                    case "MustResetPassword": return GetVendor_MustResetPassword(@object);
                    case "Shipments": return GetVendor_Shipments(@object);
                    case "PurchaseOrders": return GetVendor_PurchaseOrders(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorAccountModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetVendorAccount_MasterID(@object);
                    case "SlaveID": return GetVendorAccount_SlaveID(@object);
                    case "Slave": return GetVendorAccount_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorImageModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetVendorImage_MasterID(@object);
                    case "TypeID": return GetVendorImage_TypeID(@object);
                    case "Type": return GetVendorImage_Type(@object);
                    case "SeoTitle": return GetVendorImage_SeoTitle(@object);
                    case "Author": return GetVendorImage_Author(@object);
                    case "MediaDate": return GetVendorImage_MediaDate(@object);
                    case "Copyright": return GetVendorImage_Copyright(@object);
                    case "Location": return GetVendorImage_Location(@object);
                    case "Latitude": return GetVendorImage_Latitude(@object);
                    case "Longitude": return GetVendorImage_Longitude(@object);
                    case "IsPrimary": return GetVendorImage_IsPrimary(@object);
                    case "OriginalWidth": return GetVendorImage_OriginalWidth(@object);
                    case "OriginalHeight": return GetVendorImage_OriginalHeight(@object);
                    case "OriginalFileFormat": return GetVendorImage_OriginalFileFormat(@object);
                    case "OriginalFileName": return GetVendorImage_OriginalFileName(@object);
                    case "OriginalIsStoredInDB": return GetVendorImage_OriginalIsStoredInDB(@object);
                    case "OriginalBytes": return GetVendorImage_OriginalBytes(@object);
                    case "ThumbnailWidth": return GetVendorImage_ThumbnailWidth(@object);
                    case "ThumbnailHeight": return GetVendorImage_ThumbnailHeight(@object);
                    case "ThumbnailFileFormat": return GetVendorImage_ThumbnailFileFormat(@object);
                    case "ThumbnailFileName": return GetVendorImage_ThumbnailFileName(@object);
                    case "ThumbnailIsStoredInDB": return GetVendorImage_ThumbnailIsStoredInDB(@object);
                    case "ThumbnailBytes": return GetVendorImage_ThumbnailBytes(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetVendorImageType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorManufacturerModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetVendorManufacturer_MasterID(@object);
                    case "SlaveID": return GetVendorManufacturer_SlaveID(@object);
                    case "Slave": return GetVendorManufacturer_Slave(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(IVendorProductModel)))
            {
                switch (property)
                {
                    case "MasterID": return GetVendorProduct_MasterID(@object);
                    case "SlaveID": return GetVendorProduct_SlaveID(@object);
                    case "Slave": return GetVendorProduct_Slave(@object);
                    case "Bin": return GetVendorProduct_Bin(@object);
                    case "MinimumInventory": return GetVendorProduct_MinimumInventory(@object);
                    case "MaximumInventory": return GetVendorProduct_MaximumInventory(@object);
                    case "InventoryCount": return GetVendorProduct_InventoryCount(@object);
                    case "CostMultiplier": return GetVendorProduct_CostMultiplier(@object);
                    case "ListedPrice": return GetVendorProduct_ListedPrice(@object);
                    case "ActualCost": return GetVendorProduct_ActualCost(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            if (type.GetInterfaces().Any(x => x == typeof(ITypeModel)))
            {
                switch (property)
                {
                    case "TranslationKey": return GetVendorType_TranslationKey(@object);
                    default: throw new ArgumentException($"Unknown property '{property}' for {type.Name}");
                }
            }
            #endregion
            return typeof(ImportAssigners)
                .GetMethod($"Get{@object.GetType().Name}_{property}")
                .Invoke(null, new [] { @object });
        }
    }
}
