<#@ assembly name="System.Core"
#><#@ assembly name="System.Web.dll"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="Clarity.Ecommerce.JSConfigs"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="ServiceStack"
#><#@ import namespace="ServiceStack.CodeGenerator.TypeScript"
#><#@ import namespace="ServiceStack.CodeGenerator.TypeScript.XmlDocumentationReader"
#><#+
void GenerateAppSettingsMetadataFileJS()
{
var properties = typeof(CEFConfigDictionary)
.GetProperties(BindingFlags.Public | BindingFlags.Static)
.Where(x => x.HasAttribute<AppSettingsKeyAttribute>())
.ToArray();
var processedProperties = new List<PropertyInfo>();
var index = 0;
#>/**
 * @auto-generated
 * @file Metadata.Schemas.AppSettings.js
 * @author Copyright (c) 2020-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
 * @desc The AppSettings keys, values and descriptions.
 * @remarks This file was auto-generated by Metadata.tt in
 * 08.Clarity.Ecommerce.APIReference\
 */
angular.module("appSettingsExport", []).constant("appSettingsExport", {
properties: [
<#+ foreach (var property in properties) { #>
{
Index: <#= ++index #>,
Name: "<#= property.Name #>",
<#+
try {
var paramDocs = XmlDocumentationReader.XMLFromProperty(property); #>
ParamDocs: {
<#+		if (paramDocs != null && paramDocs["summary"] != null) { #>
Summary: "<#= paramDocs["summary"].InnerText.Trim().Replace("\r\n", "\\\r\n").Replace("\"", "&quot;").Replace("            ", "") #>",
<#+		} #>
<#+		if (paramDocs != null && paramDocs["remarks"] != null) { #>
Remarks: "<#= paramDocs["remarks"].InnerText.Trim().Replace("\r\n", "\\\r\n").Replace("\"", "&quot;").Replace("            ", "") #>",
<#+		} #>
<#+		if (paramDocs != null && paramDocs["example"] != null) { #>
Example: "<#= paramDocs["example"].InnerText.Trim().Replace("\r\n", "\\\r\n").Replace("\"", "&quot;").Replace("            ", "") #>",
<#+		} #>
},
<#+ } catch { /* Do Nothing */ } #>
PropertyType: "<#= property.PropertyType #>",
CustomAttributes: [
<#+ foreach (var attr in property.CustomAttributes.Where(x => x.AttributeType.Name != "NullableAttribute")) { #>
{
DisplayName: "<#= HelpFunctions.SplitCamelCase(attr.AttributeType.Name.Replace("Attribute", "")) #>",
ConstructorArguments: [
<#+		foreach (var arg in attr.ConstructorArguments) { #>
<#+			if (arg.ToString().Contains("[")) { #>
"<#= arg.ToString().Replace("\"", "\\\"") #>",
<#+			} else if (arg.ToString().Contains(".CheckoutModes)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains(".PaymentProviderMode)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains(".PaymentProcessMode)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains(".HostLookupWhichUrl)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains(".HostLookupMethod)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(String)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(Boolean)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(Int64)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(Int32)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(Byte)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(Decimal)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(Double)")) { #>
"<#= arg #>",
<#+			} else if (arg.ToString().Contains("(Type)")) { #>
"<#= arg #>",
<#+			} else { #>
<#= arg.ToString().Replace("\\", "\\\\") #>,
<#+			} #>
<#+		} #>
]
},
<#+ } #>
],
},
<#+
} // END foreach (var routeType in namespaceRoutes)
#>
]
});
<#+
} // End Function GenerateAppSettingsMetadataFile
#>