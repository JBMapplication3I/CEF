<#@ assembly name="System.Core"
#><#@ assembly name="System.Web.dll"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="ServiceStack"
#><#@ import namespace="ServiceStack.CodeGenerator.TypeScript"
#><#+
void GenerateMetadataFile(IGrouping<string, Type> namespaceRoutes)
{
var namespaceKey = namespaceRoutes.Key.Replace("Clarity.Ecommerce.Service.", "");
var processedTypes = new List<Type>();
#><!--
// <auto-generated>
// <copyright file="Metadata.Schemas.<#= namespaceKey #>.html" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Now.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>The ServiceStack API written out as API Documentation</summary>
// <remarks>This file was auto-generated by Metadata.tt in 08.Clarity.Ecommerce.APIReference\</remarks>
// </auto-generated>
-->
<!-- ReSharper disable Html.IdDuplication -->
<div class="row">
<h1 class="col-sm-12"><#= namespaceKey #> API Reference</h1>
<div class="col-sm-12">
<p>
Each ServiceStack Route will be listed with it's Return Type, which Verbs (aka Methods) are allowed to be used with it,
the url path for the endpoint, notes entered by the developer in the code, a summary of the purpose of the endpoint,
the data that the endpoint can take in (parameters) as well as the return type's properties (if an object model) and an
example of how to call it in TypeScript.
</p>
</div>
</div>
<div class="panel-group" id="accordion1" role="tablist" aria-multiselectable="true">
<#+ foreach (var routeType in namespaceRoutes.OrderBy(x => x.Name))
{
var routes = new Dictionary<string, Dictionary<Type, List<RouteAttribute>>>();
foreach (var attribute in routeType.GetCustomAttributes(typeof(RouteAttribute)))
{
var route = (RouteAttribute)attribute;
var processedRoutePathParams = new List<string>();
var processedRouteBodyParams = new List<string>();
var pathHierarchy = route.Path.TrimStart('/').Split('/');
var root = pathHierarchy[0];
if (!routes.ContainsKey(root)) { routes.Add(root, new Dictionary<Type, List<RouteAttribute>>()); }
if (!routes[root].ContainsKey(routeType)) { routes[root].Add(routeType, new List<RouteAttribute>()); } else { continue; /* Already processed it (probably inherited) */ }
routes[root][routeType].Add(route);
var ireturn = routeType.GetInterface("IReturn`1");
if (ireturn == null) { ireturn = routeType.GetInterface(typeof(IReturnVoid).Name); }
var returnType = ireturn == null ? null : ireturn.IsGenericType ? ireturn.GetGenericArguments()[0] : ireturn;
if (returnType != null && !processedTypes.Contains(returnType)) {
processedTypes.Add(returnType);
}
var returnTypeString = returnType == null ? null : returnType.Name;
if (returnType != null) { returnTypeString = HelpFunctions.ProcessType(returnType); }
if (returnTypeString == null) {
returnTypeString = "<span class=\"red\">No Return Type! Please ask a Dev to add an IReturn&lt;T&gt; to the endpoint!</span>";
}
if (route.Verbs == null) { route.Verbs = "No Verbs"; }
var summaryString = route.Summary;
if (string.IsNullOrWhiteSpace(summaryString)) {
summaryString = "<span class=\"red\">No Summary! Please ask a Dev to add a Summary value to the [Route] attribute!</span>";
}
var doReturnTypeLink = !returnTypeString.StartsWith("<span") && !HelpFunctions.IsSimpleType(returnTypeString); #>
<div class="panel panel-default">
<div class="panel-heading" role="tab" id="heading<#= routeType.Name.Replace("[]", "Array") #>">
<div class="panel-title">
<a role="button" data-toggle="collapse" data-parent="#accordion1" href="#collapse<#= routeType.Name.Replace("[]", "Array") #>" aria-expanded="true" aria-controls="collapse<#= routeType.Name.Replace("[]", "Array") #>" style="width:100%">
<h4><#= routeType.Name.Replace("[]", "Array") #></h4>
</a>
</div> <!-- <div class="panel-title"> -->
</div> <!-- <div class="panel-heading" role="tab" id="heading<#= routeType.Name.Replace("[]", "Array") #>"> -->
<div id="collapse<#= routeType.Name.Replace("[]", "Array") #>" class="panel-collapse collapse" role="tabpanel" aria-labelledby="heading<#= routeType.Name.Replace("[]", "Array") #>">
<div class="panel-body">
<div class="routeData">
<span class="verbs get " ng-if="'<#= route.Verbs #>'.indexOf('GET') >= 0">GET</span>
<span class="verbs post" ng-if="'<#= route.Verbs #>'.indexOf('POST') >= 0">POST</span>
<span class="verbs put" ng-if="'<#= route.Verbs #>'.indexOf('PUT') >= 0">PUT</span>
<span class="verbs patch" ng-if="'<#= route.Verbs #>'.indexOf('PATCH') >= 0">PATCH</span>
<span class="verbs delete" ng-if="'<#= route.Verbs #>'.indexOf('DELETE') >= 0">DELETE</span> |
Returns: <span class="returnType">
<#+		 if (doReturnTypeLink) { #>
<a style="cursor: pointer;"
ng-click="scrollTo('model<#= returnTypeString.Replace("List", "").Replace("&lt;", "").Replace("&gt;", "").Replace("<", "").Replace(">", "")#>')">
<#= returnTypeString #>
</a>
<#+		 } else { #>
<#= returnTypeString #>
<#+		 } #>
</span> |
Path: <a target="_blank" href="/DesktopModules/ClarityEcommerce/API<#= (route.Path ?? "No Path").Replace("{", "").Replace("}", "") #>"><#= route.Path ?? "No Path" #></a>
</div> <!-- <div class="routeData"> -->
<p><#= summaryString #></p>
<#+		 if (!string.IsNullOrWhiteSpace(route.Notes)) { #>
<p><#= route.Notes #></p>
<#+		 } #>
<h3>Takes In the following parameters</h3>
<table class="table">
<thead>
<tr>
<th>Name</th>
<th>Data Type</th>
<th>Parameter Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<#+		 foreach (var property in routeType.GetProperties()
.Where(p => (p.HasAttribute<ApiMemberAttribute>() || p.CanRead && p.CanWrite)
	&& !p.HasAttribute<JsonIgnoreAttribute>()
	&& !p.HasAttribute<IgnoreDataMemberAttribute>()
	&& p.Name != "noCache"))
{
ApiMemberAttribute docAttr = property.GetCustomAttribute<ApiMemberAttribute>();
var propertyReturnType = property.GetMethod.ReturnType;
if (propertyReturnType != null && !processedTypes.Contains(propertyReturnType)) {
processedTypes.Add(propertyReturnType);
}
if (docAttr == null) {
var param = (property.Name ?? "<span class=\"red\">Not Set!</span>")
+ ": " + (HelpFunctions.CSharpToTypeScriptType(propertyReturnType) ?? "<span class=\"red\">Not Set!</span>");
if (!processedRouteBodyParams.Contains(param)) {
processedRouteBodyParams.Add(param);
}
var doModelLink = false;
if (propertyReturnType != null && !HelpFunctions.IsSimpleType(propertyReturnType)) {
doModelLink = true;
} #>
<tr>
<td><#= property.Name ?? "<span class=\"red\">Not Set!</span>" #></td>
<td>
<#+				 if (doModelLink) { #>
<a target="_self" style="cursor: pointer;"
ng-click="scrollTo('model<#= HelpFunctions.ProcessType(propertyReturnType).Replace("List", "").Replace("&lt;", "").Replace("&gt;", "").Replace("<", "").Replace(">", "")#>')">
<#= HelpFunctions.ProcessType(propertyReturnType).Replace("<", "&lt;").Replace(">", "&gt;") #>
</a>
<#+				 } else { #>
<#= propertyReturnType == null ? "<span class=\"red\">Not Set!</span>" : HelpFunctions.ProcessType(propertyReturnType)/*.Replace("<", "&lt;").Replace(">", "&gt;")*/ #>
<#+				 } #>
</td>
<td><span class="red">Not Set!</span></td>
<td><span class="red">Not Set!</span></td>
<td><span class="red">No ApiMember attribute! Please ask a Dev to add an [ApiMember] attribute</span></td>
</tr>
<#+			 } else {
var param = (docAttr.Name ?? "<span class=\"red\">Not Set!</span>")
+ ": " + (HelpFunctions.CSharpToTypeScriptType(docAttr.DataType ?? "<span class=\"red\">Not Set!</span>"));
if (docAttr.ParameterType == "path") {
if (!processedRoutePathParams.Contains(param)) {
processedRoutePathParams.Add(param);
}
} else {
if (!processedRouteBodyParams.Contains(param)) {
processedRouteBodyParams.Add(param);
}
}
var doModelLink = false;
if (docAttr.DataType != null && !HelpFunctions.IsSimpleType(docAttr.DataType)) {
doModelLink = true;
} #>
<tr>
<td><#= docAttr.Name ?? "<span class=\"red\">Not Set!</span>" #></td>
<td>
<#+				 if (doModelLink) { #>
<a target="_self"
ng-click="scrollTo('model<#= HelpFunctions.ProcessType(docAttr.DataType).Replace("List", "").Replace("<", "").Replace(">", "") #>')">
<#= docAttr.DataType == null ? "<span class=\"red\">Not Set!</span>" : docAttr.DataType.Replace("<", "&lt;").Replace(">", "&gt;") #>
</a>
<#+				 } else { #>
<#= docAttr.DataType == null ? "<span class=\"red\">Not Set!</span>" : docAttr.DataType.Replace("<", "&lt;").Replace(">", "&gt;") #>
<#+				 } #>
</td>
<td><#= docAttr.ParameterType ?? "<span class=\"red\">Not Set!</span>" #></td>
<td><#= docAttr.IsRequired ? "Yes" : "No" #></td>
<td><#= docAttr.Description ?? "<span class=\"red\">Not Set!</span>" #></td>
</tr>
<#+			 }
} // END foreach (var property in routeType.GetProperties()... #>
</tbody>
</table>
<h4>Example</h4>
<pre class="line-numbers language-typescript" data-start="1"><code class="language-typescript"><#+
var fullParams = "";
if (processedRoutePathParams.Any()) {
fullParams += processedRoutePathParams.Aggregate((c, n) => c + ", " + n).Replace("<", "&lt;").Replace(">", "&gt;");
}
if (processedRouteBodyParams.Any()) {
if (fullParams != "") { fullParams += ", "; }
fullParams += "{\r\n	";
fullParams += processedRouteBodyParams.Aggregate((c, n) => c + ",\r\n	" + n).Replace("<", "&lt;").Replace(">", "&gt;");
fullParams += "\r\n}";
}
#>this.$cef.service.<#= HelpFunctions.LowerFirstCharacter(namespaceKey) #>.<#= routeType.Name.Replace("[]", "Array") #>(<#= fullParams #>).success(results => {
this.something = results;
});</code></pre>
</div> <!-- <div class="panel-body"> -->
</div> <!-- <div id="collapse<#= routeType.Name.Replace("[]", "Array") #>" class="panel-collapse collapse" role="tabpanel" aria-labelledby="heading<#= routeType.Name.Replace("[]", "Array") #>"> -->
</div> <!-- <div class="panel panel-default"> -->
<#+	 } // END foreach (var attribute in routeType.GetCustomAttributes(typeof(RouteAttribute)))
} // END foreach (var routeType in namespaceRoutes)
var reprocessedTypes = new List<Type>();
foreach (var reprocess in processedTypes.Where(x => !HelpFunctions.IsSimpleType(x)).OrderBy(x => x.Name)) {
if (HelpFunctions.ProcessType(reprocess) == "void") { continue; }
if (reprocess.IsGenericType) {
var arguments = reprocess.GetGenericArguments();
foreach(var argument in arguments) {
if (!reprocessedTypes.Contains(argument)) {
reprocessedTypes.Add(argument);
}
}
} else {
if (!reprocessedTypes.Contains(reprocess)) {
reprocessedTypes.Add(reprocess);
}
}
} // END foreach (reprocess in processedTypes.Where(x => !HelpFunctions.IsSimpleType(x)).OrderBy(x => x.Name)) #>
</div> <!-- <div class="panel-group" id="accordion1" role="tablist" aria-multiselectable="true"> -->
<div class="row">
<div class="col-sm-12">
<h2>Notable Models</h2>
</div>
</div>
<div class="panel-group" id="accordion2" role="tablist" aria-multiselectable="true">
<#+ foreach (Type typeToDisplay in reprocessedTypes.Where(x => !HelpFunctions.IsSimpleType(x)).OrderBy(x => x.Name)) {
string typeName = HelpFunctions.ProcessType(typeToDisplay).Replace("<", "").Replace(">", "");
if (typeName == "Nullable`1[]") { continue; }
#>
<div class="panel panel-default" id="model<#= typeName.Replace("[]", "Array") #>">
<div class="panel-heading" role="tab" id="heading<#= typeName.Replace("[]", "Array") #>">
<div class="panel-title">
<a role="button" data-toggle="collapse" data-parent="#accordion2" href="#collapse<#= typeName.Replace("[]", "Array") #>" aria-expanded="true" aria-controls="collapse<#= typeName.Replace("[]", "Array") #>" style="width:100%">
<h4><#= HelpFunctions.ProcessType(typeToDisplay) #></h4>
</a>
</div> <!-- <div class="panel-title"> -->
</div> <!-- <div class="panel-heading" role="tab" id="heading<#= typeName.Replace("[]", "Array") #>"> -->
<div id="collapse<#= typeName.Replace("[]", "Array") #>" class="panel-collapse collapse" role="tabpanel" aria-labelledby="heading<#= typeName.Replace("[]", "Array") #>">
<div class="panel-body">
<#+
foreach (var property in typeToDisplay.GetProperties()
.Where(p => p.HasAttribute<ApiMemberAttribute>() || (p.CanRead && p.CanWrite))
.OrderBy(x => HelpFunctions.ProcessType(x.GetMethod.ReturnType))
.ThenBy(x => x.Name))
{ #>
<#= HelpFunctions.ProcessType(property.GetMethod.ReturnType) #> <#= property.Name #><br/>
<#+	 } // END foreach (var property in typeToDisplay.GetProperties()...
#>
</div> <!-- <div class="panel-body"> -->
</div> <!-- <div id="collapse<#= typeName.Replace("[]", "Array") #>" class="panel-collapse collapse" role="tabpanel" aria-labelledby="heading<#= typeName.Replace("[]", "Array") #>"> -->
</div> <!-- <div class="panel panel-default" id="model<#= typeName.Replace("[]", "Array") #>"> -->
<#+ } // END foreach (typeToDisplay in reprocessedTypes.Where(x => !HelpFunctions.IsSimpleType(x)).OrderBy(x => x.Name)) #>
</div> <!-- <div class="panel-group" id="accordion2" role="tablist" aria-multiselectable="true"> -->
<#+
} // End Function GenerateInterfaceFile #>