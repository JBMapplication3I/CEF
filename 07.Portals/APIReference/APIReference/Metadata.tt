﻿<#@ template debug="true" hostspecific="True" language="C#"
#><#@ output extension=".txt"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.Runtime.Serialization"
#><#@ assembly name="System.Web.dll"
#><#@ assembly name="$(UserProfile)\.nuget\packages\hangfire.core\1.7.27\lib\net46\Hangfire.Core.dll"
#><#@ assembly name="$(UserProfile)\.nuget\packages\newtonsoft.json\13.0.1\lib\net45\Newtonsoft.Json.dll"
#><#@ assembly name="$(SolutionDir)00.Core\00.Clarity.Ecommerce.Core\bin\Debug\net472\Clarity.Ecommerce.Core.dll"
#><#@ assembly name="$(SolutionDir)00.Core\00.Clarity.Ecommerce.RegistryLoader\bin\Debug\net472\Clarity.Ecommerce.RegistryLoader.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\ServiceStack.Interfaces.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\ServiceStack.Client.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\ServiceStack.Text.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\PayPalMerchantSDK.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\PayPalCoreSDK.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\Clarity.Ecommerce.Utilities.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\Clarity.Ecommerce.Models.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\Clarity.Ecommerce.Workflow.dll"
#><#@ assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\Clarity.Ecommerce.Service.dll"
#><#@ assembly name="$(SolutionDir)Plugins\Braintree.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.ServiceStack.CodeGenerator.TypeScript\bin\Debug\net472\ServiceStack.CodeGenerator.TypeScript.dll"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Runtime.Serialization"
#><#@ import namespace="Clarity.Ecommerce"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Newtonsoft.Json"
#><#@ import namespace="ServiceStack"
#><#@ import namespace="ServiceStack.CodeGenerator.TypeScript"
#><#@ include file="Metadata.routes.ttinclude"
#><#@ include file="Metadata.appSettings.html.ttinclude"
#><#@ include file="Metadata.appSettings.js.ttinclude"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#
// Parse the ServiceStack Routes
////var manager = TemplateFileManager.Create(this);
List<Type> routeTypes = AppDomain.CurrentDomain.GetAssemblies()
	.Where(a => a.FullName.StartsWith("Clarity.Ecommerce.Service"))
	.SelectMany(a => a.GetTypes()
		.Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(RouteAttribute))))
	.ToList();
// Load Custom Plugins (CEF Providers that have services in them)
var pluginsLocation = Clarity.Ecommerce.Globals.CEFRootPath + @"..\Plugins";
int schemaCounterLimit = 100;
int routeCounterLimit = 20_000;
int modelCounterLimit = 20_000;
if (Directory.Exists(pluginsLocation))
{
List<Assembly> assembliesToAdd = Directory.GetFiles(pluginsLocation, "Clarity*.dll").Select(Assembly.LoadFrom).ToList();
try {
IEnumerable<Type> additionalProviderRoutes = assembliesToAdd
.SelectMany(a => a.GetTypes()
.Where(t => t.CustomAttributes.Any(attr => attr.AttributeType == typeof(RouteAttribute))));
routeTypes.AddRange(additionalProviderRoutes);
} catch (System.Reflection.ReflectionTypeLoadException ex) { #>
// Exception occurred
<#= ex.Message #>
<#= ex.LoaderExceptions.Select(x => x.Message).Aggregate((c, n) => c + "\r\n" + n) #>
<#}
}
#><!--
// <auto-generated>
// <copyright file="Metadata.aspx" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>The ServiceStack API written out as API Documentation</summary>
// <remarks>This file was auto-generated by Metadata.tt in 08.Clarity.Ecommerce.APIReference\</remarks>
// </auto-generated>
-->
<!DOCTYPE html>
<head>
<title>Clarity Ecommerce API Reference (Metadata)</title>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" />
<link rel="stylesheet" href="css/Metadata.min.css" />
<link rel="stylesheet" href="css/prism.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-animate.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-loader.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-sanitize.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.8/angular-touch.js"></script>
<script src="https://angular-ui.github.io/bootstrap/ui-bootstrap-tpls-2.5.0.min.js"></script>
<script src="js/utopia.min.js"></script>
<script src="js/components.min.js"></script>
<script src="js/prism.min.js"></script>
<script src="Metadata.Schemas.AppSettings.js"></script>
<script src="js/Metadata.min.js"></script>
<script>
function highlightCode() {
Prism.highlightAll();
//if ($('code')) { Prism.highlightElement($('code')); }
};
/* Loads a language, including all dependencies
 * @param {string} lang the language to load
 * @type {Promise} the promise which resolves as soon as everything is loaded
 */
function loadLanguage (lang)
{
// At first we need to fetch all dependencies for the main language
// Note: we need to do this, even if the main language already is loaded (just to be sure...)
// We load an array of all dependencies and call recursively this function on each entry
// dependencies is now an (possibly empty) array of loading-promises
var dependencies = getDependenciesOfLanguage(lang).map(loadLanguage);
// We create a promise, which will resolve, as soon as all dependencies are loaded.
// They need to be fully loaded because the main language may extend them.
return Promise.all(dependencies).then(function () {
// If the main language itself isn't already loaded, load it now
// and return the newly created promise (we chain the promises).
// If the language is already loaded, just do nothing - the next .then()
// will immediately be called
if (!Prism.languages[lang]) {
return new Promise(function (resolve) {
$u.script('components/prism-' + lang + '.js', resolve);
});
}
});
}

/* Returns all dependencies (as identifiers) of a specific language
 * @param {string} lang
 * @returns {string[]} the list of dependencies. Empty if the language has none.
 */
function getDependenciesOfLanguage (lang)
{
if (!components.languages[lang] || !components.languages[lang].require)
{
return [];
}
return ($u.type(components.languages[lang].require) === "array")
? components.languages[lang].require
: [components.languages[lang].require];
}

(function() {
var /*form = $('form'), code = $('code', form),*/ languages = components.languages;
setTimeout(1000*2, loadLanguage('typescript').then(highlightCode));
})();
</script>
</head>
<body ng-app="docApp">
<div class="page-content wrapper" ng-controller="DocumentationController">
<div class="left-nav">
<div id="sidebar-wrapper">
<ul class="sidebar-nav">
<li class="sidebar-brand"><a>API Reference</a></li>
<li class="article-selector"
ng-class="{'current-article': currentArticle == 'appSettings' }">
<a ng-click="setArticle('appSettings')">App Settings</a>
</li>
<#
IEnumerable<IGrouping<string, Type>> schemas = routeTypes
.OrderBy(x => ((Type)x).GetCustomAttributes<RouteAttribute>().OrderByDescending(y => y.Priority).First().Path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries).First())
.ThenBy(x => x.Name)
.GroupBy(x => ((Type)x).GetCustomAttributes<RouteAttribute>().OrderByDescending(y => y.Priority).First().Path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries).First());
var schemaCounter = 0;
foreach (IGrouping<string, Type> schema in schemas) {
string schemaKey = schema.Key.Replace("Clarity.Ecommerce.Service.", ""); #>
<li class="article-selector"
ng-class="{'current-article': currentArticle == '<#= schemaKey #>' }">
<a ng-click="setArticle('<#= schemaKey #>')"><#= schemaKey #></a>
</li>
<#if (++schemaCounter > schemaCounterLimit) { break; }
}#>
</ul>
</div>
</div>
<div class="page-article page-content-wrapper">
<div class="container-fluid">
<div class="row">
<div class="col-xs-12" ng-include="currentArticleTemplatePath" onload="highlightAll()">
</div>
<div class="col-xs-12 footer">
<footer>
<p><b>Copyright (c) 2016-<#= DateTime.Now.Year #> clarity-ventures.com. All rights reserved.</b></p>
</footer>
</div>
</div>
</div>
</div>
</div>
</body><#
SaveOutput("Metadata", "aspx", true);
schemaCounter = 0;
var reprocessedTypes = new List<Type>();
foreach (IGrouping<string, System.Type> schema in schemas)
{
	var schemaName = schema.Key.Replace("Clarity.Ecommerce.Service.", "");
	var processedTypes = new List<Type>();
	////manager.StartNewFile(schema.Key.Replace("Clarity.Ecommerce.Service.", "") + ".html", folderName: "Schemas");
#><!--
* <auto-generated>
* <copyright file="Metadata.Schemas.<#= schemaName #>.html" company="clarity-ventures.com">
* Copyright (c) 2016-<#= DateTime.Now.Year #> clarity-ventures.com. All rights reserved.
* </copyright>
* <summary>The ServiceStack API written out as API Documentation.</summary>
* <remarks>This file was auto-generated by Metadata.tt in the 08.Clarity.Ecommerce.APIReference project.</remarks>
* </auto-generated>
-->
<!-- ReSharper disable Html.IdDuplication -->
<div class="row mb-3">
<h1 class="col-sm-12"><#= schemaName #> API Reference</h1>
<div class="col-sm-12">
Each ServiceStack Route will be listed with it's Return Type, which Verbs (aka Methods) are allowed to be used with it,
the url path for the endpoint, notes entered by the developer in the code, a summary of the purpose of the endpoint,
the data that the endpoint can take in (parameters) as well as the Return Type's properties (if an object model) and an
example of how to call it in TypeScript.
</div>
</div>
<uib-accordion close-others="false">
<#	foreach (var routeType in schema)
	{
		var routes = new Dictionary<string, Dictionary<Type, List<RouteAttribute>>>();
		var routeCounter = 0;
		foreach (var attribute in routeType.GetCustomAttributes(typeof(RouteAttribute)))
		{
			var route = (RouteAttribute)attribute;
			var processedRoutePathParams = new List<string>();
			var processedRouteBodyParams = new List<string>() { "noCache" };
			var pathHierarchy = route.Path.TrimStart('/').Split('/');
			var root = pathHierarchy[0];
			if (!routes.ContainsKey(root))
			{
				routes.Add(root, new Dictionary<Type, List<RouteAttribute>>());
			}
			if (!routes[root].ContainsKey(routeType))
			{
				routes[root].Add(routeType, new List<RouteAttribute>());
			}
			else
			{
				// Already processed it (probably inherited)
				continue;
			}
			routes[root][routeType].Add(route);
			var ireturn = routeType.GetInterface("IReturn`1");
			if (ireturn == null) { ireturn = routeType.GetInterface(typeof(IReturnVoid).Name); }
			var returnType = ireturn == null
				? null
				: ireturn.IsGenericType
					? ireturn.GetGenericArguments()[0]
					: ireturn;
			if (returnType != null && !processedTypes.Contains(returnType))
			{
				processedTypes.Add(returnType);
			}
			var returnTypeString = returnType == null ? null : returnType.Name;
			if (returnType != null)
			{
				returnTypeString = HelpFunctions.ProcessType(returnType);
			}
			if (returnTypeString == null)
			{
				returnTypeString = "<span class=\"red\">No Return Type! Please ask a Dev to add an IReturn&lt;T&gt; to the endpoint!</span>";
			}
			if (route.Verbs == null) { route.Verbs = "No Verbs"; }
			var summaryString = route.Summary;
			if (string.IsNullOrWhiteSpace(summaryString))
			{
				summaryString = "<span class=\"red\">No Summary! Please ask a Dev to add a Summary value to the [Route] attribute!</span>";
			}
			var doReturnTypeLink = !returnTypeString.StartsWith("<span") && !HelpFunctions.IsSimpleType(returnTypeString); #>
<div uib-accordion-group class="panel panel-default" is-open="status.isOpen['acc<#= routeType.Name #>']">
<uib-accordion-heading><h4 class="w-100" ng-click="highlightElement('#example<#= routeType.Name #>')"><#= routeType.Name #></h4></uib-accordion-heading>
<div>
<div class="routeData">
<#			if (route.Verbs.IndexOf("GET") != -1) { #>
<span class="verbs get">GET</span>
<#			} #>
<#			if (route.Verbs.IndexOf("POST") != -1) { #>
<span class="verbs post">POST</span>
<#			} #>
<#			if (route.Verbs.IndexOf("PUT") != -1) { #>
<span class="verbs put">PUT</span>
<#			} #>
<#			if (route.Verbs.IndexOf("PATCH") != -1) { #>
<span class="verbs patch">PATCH</span>
<#			} #>
<#			if (route.Verbs.IndexOf("DELETE") != -1) { #>
<span class="verbs delete">DELETE</span>
<#			} #>
| Returns:
<#			if (doReturnTypeLink) { #>
<span class="returnType"><a class="modelLink" ng-click="scrollTo('model<#= HelpFunctions.Strip(returnTypeString, "List", "&lt;", "&gt;", "<", ">", "[", "]")
				#>')"><#= HelpFunctions.AsMarkup(returnTypeString) #></a></span>
<#			} else { #>
<span class="returnType"><#= returnTypeString #></span>
<#			} #>
| Path: <a target="_blank" href="/DesktopModules/ClarityEcommerce/API<#= HelpFunctions.Strip(route.Path ?? "No Path", "{", "}") #>"><#= route.Path ?? "No Path" #></a>
</div>
<p><#= summaryString #></p>
<#			if (!string.IsNullOrWhiteSpace(route.Notes)) { #>
<p><#= route.Notes #></p>
<#			} #>
<h3>Takes in the following parameters</h3>
<table class="table">
<thead>
<tr>
<th>Name</th>
<th>Data Type</th>
<th>Parameter Type</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<#			foreach (var property in routeType.GetProperties()
				.Where(p => p.Name != "noCache" && (p.HasAttribute<ApiMemberAttribute>() || (p.CanRead && p.CanWrite))))
			{
				ApiMemberAttribute docAttr = property.GetCustomAttribute<ApiMemberAttribute>();
				var propertyReturnType = property.GetMethod.ReturnType;
				if (propertyReturnType != null && !processedTypes.Contains(propertyReturnType)) {
					processedTypes.Add(propertyReturnType);
				}
				if (docAttr == null) {
					var param = (property.Name ?? "<span class=\"red\">Not Set!</span>")
						+ ": " + (HelpFunctions.CSharpToTypeScriptType(propertyReturnType) ?? "<span class=\"red\">Not Set!</span>");
					if (!processedRouteBodyParams.Contains(param)) {
						processedRouteBodyParams.Add(param);
					}
					var doModelLink = propertyReturnType != null && !HelpFunctions.IsSimpleType(propertyReturnType); #>
<tr>
<td><#= property.Name ?? "<span class=\"red\">Not Set!</span>" #></td>
<#					if (doModelLink) { #>
<td><a class="modelLink" ng-click="scrollTo('model<#= HelpFunctions.Strip(HelpFunctions.ProcessType(propertyReturnType), "List", "&lt;", "&gt;", "<", ">", "[", "]")
						#>')"><#= HelpFunctions.AsMarkup(HelpFunctions.ProcessType(propertyReturnType)) #></a></td>
<#					} else { #>
<td><#= propertyReturnType == null ? "<span class=\"red\">Not Set!</span>" : HelpFunctions.ProcessType(propertyReturnType) #></td>
<#					} #>
<td><span class="red">Not Set!</span></td>
<td><span class="red">Not Set!</span></td>
<td><span class="red">No ApiMember attribute! Please ask a Dev to add an [ApiMember] attribute</span></td>
</tr>
<#				} else {
					var param = (docAttr.Name ?? "<span class=\"red\">Not Set!</span>")
						+ ": " + (HelpFunctions.CSharpToTypeScriptType(docAttr.DataType ?? "<span class=\"red\">Not Set!</span>"));
					if (docAttr.ParameterType == "path") {
						if (!processedRoutePathParams.Contains(param)) {
							processedRoutePathParams.Add(param);
						}
					} else if (!processedRouteBodyParams.Contains(param)) {
						processedRouteBodyParams.Add(param);
					}
					var doModelLink = false;
					if (docAttr.DataType != null && !HelpFunctions.IsSimpleType(docAttr.DataType)) {
						doModelLink = true;
					} #>
<tr>
<td><#= docAttr.Name ?? "<span class=\"red\">Not Set!</span>" #></td>
<#					if (doModelLink) { #>
<td><a class="modelLink" ng-click="scrollTo('model<#= HelpFunctions.Strip(HelpFunctions.ProcessType(docAttr.DataType), "List", "&lt;", "&gt;", "<", ">", "[", "]")
						#>')"><#= docAttr.DataType == null ? "<span class=\"red\">Not Set!</span>" : HelpFunctions.AsMarkup(docAttr.DataType) #></a></td>
<#					} else { #>
<td><#= docAttr.DataType == null ? "<span class=\"red\">Not Set!</span>" : HelpFunctions.AsMarkup(docAttr.DataType) #></td>
<#					} #>
<td><#= docAttr.ParameterType ?? "<span class=\"red\">Not Set!</span>" #></td>
<td><#= docAttr.IsRequired ? "Yes" : "No" #></td>
<td><#= docAttr.Description ?? "<span class=\"red\">Not Set!</span>" #></td>
</tr>
<#				} // else
			} // END foreach (var property in routeType.GetProperties()...
#>
</tbody>
</table>
<#			// Set up examples
			var fullParams = "";
			var prefixVarLines = "";
			var argCounter = 0;
			if (processedRoutePathParams.Any()) {
				foreach(var pathParam in processedRoutePathParams) {
					var split = pathParam.Split(':');
					var name = split[0].Trim();
					name = name.ToLower() == "id" ? "id" : HelpFunctions.LowerFirstCharacter(name);
					var type = split[1].Trim();
					prefixVarLines += "var " + name + ": " + HelpFunctions.AsMarkup(type) + " = this.someValue" + ++argCounter + ";\r\n";
					fullParams += (fullParams != "" ? ", " : "") + name;
				}
			}
			if (processedRouteBodyParams.Any(x => x != "noCache")) {
				prefixVarLines += "var dto = &lt;api." + routeType.Name + "Dto&gt;{\r\n";
				foreach (var dtoParam in processedRouteBodyParams.Where(x => x != "noCache")) {
					var split = dtoParam.Split(':');
					var name = split[0].Trim();
					var type = split[1].Trim();
					prefixVarLines += "\t" + name + ": this.someValue" + ++argCounter + ", // " + HelpFunctions.AsMarkup(type) + " \r\n";
				}
				prefixVarLines += "};\r\n";
				if (fullParams != "") { fullParams += ", "; }
				fullParams += "dto";
			} #>
<h4>TypeScript Example</h4>
<pre class="line-numbers language-typescript mb-0" data-start="1" id="example<#= routeType.Name #>"><code class="language-typescript"<#
#>><#= prefixVarLines #>this.cvApi.<#= HelpFunctions.LowerFirstCharacter(schemaName) #>.<#= routeType.Name #>(<#= fullParams #>).then(r => {
	if (!r || !r.data) {
		// Error State
		return;
	}
	this.something = r.data;
}).catch(reason => console.error(reason));</code></pre>
</div><!--uib-accordion-group-body-->
</div><!--uib-accordion-group-->
<#		} // END foreach (var attribute in routeType.GetCustomAttributes(typeof(RouteAttribute)))
		foreach (var reprocess in processedTypes.Where(x => !HelpFunctions.IsSimpleType(x)).OrderBy(x => x.Name))
		{
			if (HelpFunctions.ProcessType(reprocess) == "void") { continue; }
			if (reprocess.IsGenericType) {
				reprocessedTypes.AddRange(reprocess.GetGenericArguments());
			} else {
				reprocessedTypes.Add(reprocess);
			} // if (reprocess.IsGenericType)
		} // foreach (var reprocess in processedTypes.Where(x => !HelpFunctions.IsSimpleType(x)).OrderBy(x => x.Name))
		if (++routeCounter > routeCounterLimit) { break; }
	} // END foreach (var routeType in schema)
	if (++schemaCounter > schemaCounterLimit) { break; } #>
</uib-accordion>
<#	SaveOutput("Metadata.Schemas." + schema.Key.Replace("Clarity.Ecommerce.Service.", ""), "html", true);
} // foreach (IGrouping<string, System.Type> schema in schemas)
#>
<# reprocessedTypes = reprocessedTypes.Distinct().ToList();
var skips = new string[]
{
	"byte",
	"byte[]",
	"decimal",
	"Dictionary&lt;int,List`1&gt;",
	"Dictionary&lt;string,Object&gt;",
	"Dictionary&lt;string,object&gt;",
	"Dictionary&lt;string,string&gt;",
	"Double",
	"double",
	"long",
	"Grouping[]",
	"Guid",
	"int[]",
	"int?[]",
	"KeyValuePair&lt;CategoryModel,List`1&gt;",
	"List&lt;CartModel&gt;",
	"List&lt;int&gt;",
	"List&lt;ProductImageNewModel&gt;",
	"List&lt;RateQuoteModel&gt;",
	"List&lt;SalesItemBaseModel&gt;",
	"List&lt;SalesItemBaseModel`2&gt;",
	"List&lt;StoreInventoryLocationsMatrixModel&gt;",
	"List&lt;UserEventAttendanceModel&gt;",
	"List&lt;UserTypingStatus&gt;",
	"Nullable`1[]",
	"object",
	"RoleForUserModel[]",
	"RoleUserModel[]",
	"SalesOrderModel[]",
	"string[]",
	"Sort[]",
};
var modelCounter = 0;
foreach (Type typeToDisplay in reprocessedTypes.Where(x => !HelpFunctions.IsSimpleType(x)).OrderBy(x => x.Name))
{
	string typeName = HelpFunctions.Strip(HelpFunctions.ProcessType(typeToDisplay), "<", ">");
	if (skips.Contains(typeName)) { continue; }
	////manager.StartNewFile(typeName + ".html", folderName: "Models");
#>
<div class="panel-group" id="accordion2" role="tablist" aria-multiselectable="true">
<div class="panel panel-default" id="model<#= typeName #>">
<div class="panel-heading" role="tab" id="heading<#= typeName #>">
<div class="panel-title">
<a role="button" class="w-100" data-toggle="collapse" data-parent="#accordion2" href="#collapse<#= typeName #>" aria-expanded="true" aria-controls="collapse<#= typeName #>">
<h4><#= HelpFunctions.ProcessType(typeToDisplay) #></h4>
</a>
</div>
</div>
<div id="collapse<#= typeName #>" class="panel-collapse collapse" role="tabpanel" aria-labelledby="heading<#= typeName #>">
<div class="panel-body">
<#	foreach (var property in typeToDisplay.GetProperties()
		.Where(p => p.HasAttribute<ApiMemberAttribute>() || (p.CanRead && p.CanWrite))
		.OrderBy(x => HelpFunctions.ProcessType(x.GetMethod.ReturnType))
		.ThenBy(x => x.Name))
	{ #>
<#= HelpFunctions.ProcessType(property.GetMethod.ReturnType) #> <#= property.Name #><br/>
<#	} #>
</div>
</div>
</div>
</div>
<#	SaveOutput("Metadata.Models." + typeName, "html", true);
	if (++modelCounter > modelCounterLimit) { break; }
}
////manager.StartNewFile("AppSettings.html", folderName: "Schemas");
GenerateAppSettingsMetadataFileHtml();
SaveOutput("Metadata.Schemas.AppSettings", "html", true);
////manager.StartNewFile("AppSettings.js", folderName: "Schemas");
GenerateAppSettingsMetadataFileJS();
SaveOutput("Metadata.Schemas.AppSettings", "js", true);
////manager.Process();
DeleteOldOutputs();
#>