<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".tstxt" #><#@
assembly name="System" #><#@
assembly name="System.Core" #><#@
assembly name="System.Runtime.Serialization" #><#@
assembly name="System.Web.dll" #><#@
assembly name="$(UserProfile)\.nuget\packages\newtonsoft.json\13.0.1\lib\net45\Newtonsoft.Json.dll" #><#@
assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll" #><#@
assembly name="$(SolutionDir)packages\ServiceStack.Interfaces.4.5.14\lib\portable-wp80+sl5+net45+win8+wpa81+monotouch+monoandroid+xamarin.ios10\ServiceStack.Interfaces.dll" #><#@
assembly name="$(SolutionDir)packages\ServiceStack.Text.Signed.4.5.14\lib\net45\ServiceStack.Text.dll" #><#@
assembly name="$(SolutionDir)00.Core\00.Clarity.Ecommerce.RegistryLoader\bin\Debug\net472\Clarity.Ecommerce.RegistryLoader.dll" #><#@
assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll" #><#@
assembly name="$(SolutionDir)02.Interfaces\02.Clarity.Ecommerce.Interfaces.Models\bin\Debug\net472\Clarity.Ecommerce.Interfaces.Models.dll" #><#@
assembly name="$(SolutionDir)03.ModelsAndMapping\03.Clarity.Ecommerce.Models\bin\Debug\net472\Clarity.Ecommerce.Models.dll" #><#@
assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\Clarity.Ecommerce.Service.dll" #><#@
assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll" #><#@
assembly name="$(SolutionDir)11.T4\11.T4.ServiceStack.CodeGenerator.TypeScript\bin\Debug\net472\ServiceStack.CodeGenerator.TypeScript.dll" #><#@
import namespace="System.Collections.Generic" #><#@
import namespace="System.ComponentModel.DataAnnotations" #><#@
import namespace="System.ComponentModel.DataAnnotations.Schema" #><#@
import namespace="System.Data.Entity" #><#@
import namespace="System.Linq" #><#@
import namespace="System.Reflection" #><#@
import namespace="System.Runtime.InteropServices" #><#@
import namespace="System.Runtime.Serialization" #><#@
import namespace="Clarity.Ecommerce.DataModel" #><#@
import namespace="Clarity.Ecommerce.Interfaces.DataModel" #><#@
import namespace="CodeGenerator" #><#@
import namespace="Newtonsoft.Json" #><#@
import namespace="ServiceStack" #><#@
import namespace="ServiceStack.CodeGenerator.TypeScript" #><#@
include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude" #><#@
include file="associators.ui.ttinclude" #><#@
include file="associators.ts.ttinclude" #><#
List<IGrouping<string, Type>> tableClasses = AppDomain.CurrentDomain.GetAssemblies()
	.Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
	.SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
	.OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
	.GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema)
	.ToList();
List<string> processedNames = new List<string> { "Status", "State", "Type", "RoleUser", "Report" };
List<string> fileNames = new List<string>();
foreach (IGrouping<string, Type> group in tableClasses)
{
	foreach (Type table in group)
	{
		TypeDeterminer td = new TypeDeterminer(table);
		if (td.IsExcludedFromT4 || processedNames.Contains(table.Name))
		{
			continue;
		}
		processedNames.Add(table.Name);
		string tableName = HelpFunctions.LowerFirstCharacter(
			HelpFunctions.PluralizeName(
				table.Name.Replace("Clarity.Ecommerce.DataModel.", "")));
		foreach (PropertyInfo property in table.GetProperties()
											.Where(p => p.CanRead
												&& !p.HasAttribute<NotMappedAttribute>()
												&& !p.HasAttribute<DontMapOutEverAttribute>()
												&& !p.HasAttribute<DontMapInEverAttribute>()
												&& p.Name != "noCache"))
		{
			if (property.PropertyType.Name != "ICollection`1"
				|| property.Name == "Claims"
				|| property.Name == "Logins"
				|| property.Name == "Roles")
			{
				continue;
			}
			string fileName = tableName + ".to." + property.Name;
			GenerateAssociatorsUserInterfaceFile(table, td, group.Key, property, tableClasses);
			SaveOutputNoDot(fileName, ".html", true);
			GenerateAssociatorTypeScriptFile(table, td, group.Key, property, tableClasses);
			SaveOutputNoDot(fileName, ".ts", true);
			fileNames.Add(fileName);
		}
	}
}
foreach (string fileName in fileNames) { #>
/// <reference path="<#= fileName #>.ts" />
<#
}
SaveOutputNoDot("_references", ".ts", true);
DeleteOldOutputs();
#>