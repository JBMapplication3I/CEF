<#@ assembly name="System.Core" #><#@
assembly name="System.Web.dll" #><#@
import namespace="System" #><#@
import namespace="System.Collections.Generic" #><#@
import namespace="System.Linq" #><#@
import namespace="System.Reflection" #><#@
import namespace="System.Runtime.InteropServices" #><#@
import namespace="ServiceStack" #><#@
import namespace="ServiceStack.CodeGenerator.TypeScript" #><#+
void GenerateAssociatorsUserInterfaceFile(Type theType, TypeDeterminer td, string schema, PropertyInfo property, IEnumerable<IGrouping<string, Type>> tableClasses)
{
	string lowerFirst = HelpFunctions.LowerFirstCharacter(theType.Name);
	string splitName = HelpFunctions.SplitCamelCase(theType.Name);
	string controllerName = "asCtrl";
	Type otherType = property.PropertyType.GetGenericArguments()[0];
	Type associatedType = otherType.GetInterface("IAmARelationshipTable`2");
	if (associatedType == null)
	{
		return;
	}
	string[] otherTypePropertiesToSkip = new[] {
		"ID", "CustomKey", "CreatedDate", "UpdatedDate", "Active", "Hash", "JsonAttributes", "SerializableAttributes",
		"MasterID", "Master", "SlaveID", "Slave",
	};
	associatedType = associatedType.GetGenericArguments()[1];
	string associatedTypeModelName = HelpFunctions.SwapToModelType(associatedType.Name);
	bool first = true;
	List<string> processed = new List<string>();
#><!--
<auto-generated>
<copyright file="framework/admin/widgets/associations/_T4/<#= lowerFirst #>.to.<#= property.Name #>.html" company="clarity-ventures.com">
Copyright (c) 2020-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
</copyright>
<summary>Associator for <#= splitName #> to <#= property.Name #> UI.</summary>
<remarks>This file was auto-generated by associators.tt in the UI project</remarks>
</auto-generated>
-->
<div class="row" ng-form="<#= controllerName #>.forms.<#= property.Name #>">
	<div class="col-sm-12">
		<!--<h3 class="mb-3" data-translate="Associator for <#= splitName #> to <#= property.Name #>"></h3>-->
		<h3 class="mb-3" data-translate="ui.admin.common.<#= associatedType.Name #>.Plural"></h3>
		<p ng-if="!<#= controllerName #>.record.ID"
			data-translate="ui.admin.associators.errors.YouMustSaveTheRecordFirst">
		</p>
	</div>
	<div class="col-sm-8">
		<h4 data-translate="ui.admin.common.<#= associatedType.Name #>.SelectToAdd"></h4>
		<div cef-server-side-paging-header
			paging="<#= controllerName #>.paging"
			disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID">
		</div>
		<div class="table-responsive">
			<table class="table table-striped table-hover table-condensed mb-3">
				<thead>
					<tr>
						<th class="w-5" data-translate="ui.admin.common.Number.Symbol"></th>
						<th class="w-35" data-translate="ui.admin.common.Key"></th>
						<th class="w-60" data-translate="ui.admin.common.Name"></th>
						<th style="width:43px;"></th>
					</tr>
				</thead>
				<tbody>
					<tr ng-show="!<#= controllerName #>.paging.filteredCount">
						<td colspan="4" data-translate="ui.admin.common.NoResultsFound"></td>
					</tr>
					<tr ng-repeat="x in <#= controllerName #>.paging.filteredData[<#= controllerName #>.paging.currentPage]">
						<td><label class="font-weight-normal form-control-static" ng-bind="x.ID"></label></td>
						<td><label class="font-weight-normal form-control-static" ng-bind="x.CustomKey"></label></td>
<#+				if (associatedType.Name == "User") { #>
						<td><label class="font-weight-normal form-control-static" ng-bind="x.UserName"></label></td>
<#+				} else { #>
						<td><label class="font-weight-normal form-control-static" ng-bind="x.Name"></label></td>
<#+				} #>
						<td>
							<button type="button" class="btn btn-success"
								id="btnAdd_<#= lowerFirst + "To" + property.Name #>_{{$index}}"
								name="btnAdd_<#= lowerFirst + "To" + property.Name #>_{{$index}}"
								translate-attr="{ title: 'ui.admin.common.Add', 'aria-label': 'ui.admin.common.Add' }"
								ng-disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID"
								ng-click="<#= controllerName #>.add(x.ID)">
								<i class="far fa-plus"></i>
								<span class="sr-only" data-translate="ui.admin.common.Add"></span>
							</button>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
	<div class="col-sm-4">
		<h4 data-translate="ui.admin.common.Added"></h4>
		<div cef-server-side-paging-header
			paging="<#= controllerName #>.assigned"
			disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID"
			narrow="true">
		</div>
		<div class="table-responsive">
			<table class="table table-striped table-hover table-condensed mb-3">
				<thead>
					<tr>
						<th data-translate="ui.admin.common.<#= associatedType.Name #>"></th>
<#+				first = true; #>
<#+				processed = new List<string>(); #>
<#+				foreach (PropertyInfo p in otherType.GetProperties()
					.Where(p => !otherTypePropertiesToSkip.Contains(p.Name)
							&& !processed.Contains(p.Name)
							&& p.CanRead
							&& !p.HasAttribute<NotMappedAttribute>()
							&& !p.HasAttribute<DontMapOutEverAttribute>()
							&& !p.HasAttribute<DontMapInEverAttribute>()
							&& p.Name != "noCache")) { #>
<#+					if (first) { first = false; #>
						<!-- <#= otherType.Name #> Properties -->
<#+					} #>
<#+					if (processed.Contains(p.Name + "ID")) { continue; } #>
						<th><#= HelpFunctions.SplitCamelCase(p.Name.EndsWith("ID") ? p.Name.Substring(0, p.Name.Length - 2) : p.Name) #></th>
<#+					processed.Add(p.Name); #>
<#+				} #>
						<th style="width:43px;"></th>
					</tr>
				</thead>
				<tbody style="min-height:200px;">
					<tr ng-if="!<#= controllerName #>.assigned.filteredCount">
						<td colspan="20" data-translate="ui.admin.controls.sales.modals.editALineItemModal.NoResultsFound"></td>
					</tr>
					<tr ng-repeat="x in <#= controllerName #>.assigned.filteredData[<#= controllerName #>.assigned.currentPage]">
						<td>
							<label class="font-weight-normal form-control-static"
<#+				if (associatedType.Name == "User") { #>
								uib-tooltip="{{x.SlaveID + ' ' + (x.SlaveKey || x.Slave.CustomKey) + ' ' + (x.SlaveUserName || x.Slave.UserName)}}"
								tooltip-placement="auto top-left"
								ng-bind="x.SlaveUserName || x.Slave.UserName">
<#+				} else if (associatedType.GetProperties().Any(x => x.Name == "Name")) { #>
								uib-tooltip="{{x.SlaveID + ' ' + (x.SlaveKey || x.Slave.CustomKey) + ' ' + (x.SlaveName || x.Slave.Name)}}"
								tooltip-placement="auto top-left"
								ng-bind="x.SlaveName || x.Slave.Name">
<#+				} else { #>
								uib-tooltip="{{x.SlaveID + ' ' + (x.SlaveKey || x.Slave.CustomKey)}}"
								tooltip-placement="auto top-left"
								ng-bind="x.SlaveKey || x.Slave.CustomKey">
<#+				} #>
							</label>
						</td>
<#+				first = true; #>
<#+				processed = new List<string>(); #>
<#+				foreach (PropertyInfo p in otherType.GetProperties()
						.Where(p => !otherTypePropertiesToSkip.Contains(p.Name)
								&& !processed.Contains(p.Name)
								&& p.CanRead
								&& !p.HasAttribute<NotMappedAttribute>()
								&& !p.HasAttribute<DontMapOutEverAttribute>()
								&& !p.HasAttribute<DontMapInEverAttribute>()
								&& p.Name != "noCache")) { #>
<#+					if (first) { first = false; #>
						<!-- <#= otherType.Name #> Properties -->
<#+					} #>
						<td>
<#+					if (processed.Contains(p.Name + "ID")) { continue; } #>
<#+					if (p.PropertyType == typeof(bool) || p.PropertyType == typeof(bool?)) { #>
							<toggle-form-group
								class="w-100"
								key="<#= p.Name #>"
								ng-model="x.<#= p.Name #>"
								tog-on-key="ui.admin.common.Yes" tog-on-style="btn-primary"
								tog-off-key="ui.admin.common.No" tog-off-style="btn-danger"
								ng-disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID"
								ng-required="false">
							</toggle-form-group>
<#+					} else if ((p.PropertyType == typeof(int?) || p.PropertyType == typeof(int)) && p.Name.EndsWith("ID")) { #>
<#+						string altName = p.Name.Substring(0, p.Name.Length - 2);
						PropertyInfo altProperty = otherType.GetProperties().SingleOrDefault(x => x.Name == altName); #>
							<select-form-group
								class="w-100"
								key="<#= p.Name #>"
								ng-model="x.<#= p.Name #>"
								selections="<#= controllerName #>.<#= HelpFunctions.LowerFirstCharacter(HelpFunctions.PluralizeName(altProperty == null ? "Bad" : altProperty.PropertyType.Name)) #>"
								include-null="<#= p.PropertyType == typeof(int?) ? "true" : "false" #>" null-key="ui.admin.common.Select"
								ng-disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID"
								ng-required="<#= p.PropertyType == typeof(int) ? "true" : "false" #>">
							</select-form-group>
<#+					} else if (p.PropertyType == typeof(int?) || p.PropertyType == typeof(int)) { #>
							<number-input-form-group
								class="w-100"
								key="<#= p.Name #>"
								ng-model="x.<#= p.Name #>"
								step="1"
								min="0"
								precision="0"
								ng-required="<#= p.PropertyType == typeof(int?) ? "true" : "false" #>">
							</number-input-form-group>
<#+					} else if (p.PropertyType == typeof(decimal?) || p.PropertyType == typeof(decimal)) { #>
							<number-input-form-group
								class="w-100"
								key="<#= p.Name #>"
								ng-model="x.<#= p.Name #>"
								step="0.00001"
								min="0"
								precision="5"
								ng-disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID"
								ng-required="<#= p.PropertyType == typeof(decimal?) ? "true" : "false" #>">
							</number-input-form-group>
<#+					} else if (p.PropertyType == typeof(string)) { #>
							<text-input-form-group
								class="w-100"
								key="<#= p.Name #>"
								ng-model="x.<#= p.Name #>"
								ng-disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID"
								ng-required="false">
							</text-input-form-group>
<#+					} else { #>
							TODO: Input for '<#= p.Name #>'
<#+					} #>
<#+					processed.Add(p.Name); #>
						</td>
<#+					 #>
<#+				} #>
						<td>
							<button type="button" class="btn btn-danger"
								id="btnRemove_<#= lowerFirst + "To" + property.Name #>_{{$index}}"
								name="btnRemove_<#= lowerFirst + "To" + property.Name #>_{{$index}}"
								translate-attr="{ title: 'ui.admin.common.Remove', 'aria-label': 'ui.admin.common.Remove' }"
								ng-disabled="<#= controllerName #>.viewState.running || !<#= controllerName #>.record || !<#= controllerName #>.record.ID"
								ng-click="<#= controllerName #>.remove(x)">
								<i class="far fa-times"></i>
								<span class="sr-only" data-translate="ui.admin.common.Remove"></span>
							</button>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>
<#+
} // End Function GenerateAssociatorsUserInterfaceFile
#>