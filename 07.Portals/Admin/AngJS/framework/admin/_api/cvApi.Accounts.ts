/**
 * @file framework/admin/_api/cvApi.Accounts.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new account.
	 * @see {@link AccountModel}
	 * @public
	 */
	export interface CreateAccountDto extends AccountModel {
	}
	/**
	 * Use to create a new account association.
	 * @see {@link AccountAssociationModel}
	 * @public
	 */
	export interface CreateAccountAssociationDto extends AccountAssociationModel {
	}
	/**
	 * Use to create a new account association type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAccountAssociationTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new account contact.
	 * @see {@link AccountContactModel}
	 * @public
	 */
	export interface CreateAccountContactDto extends AccountContactModel {
	}
	/**
	 * Use to create a new account currency.
	 * @see {@link AccountCurrencyModel}
	 * @public
	 */
	export interface CreateAccountCurrencyDto extends AccountCurrencyModel {
	}
	/**
	 * Use to create a new account file.
	 * @see {@link AccountFileModel}
	 * @public
	 */
	export interface CreateAccountFileDto extends AccountFileModel {
	}
	/**
	 * Use to create a new account image.
	 * @see {@link AccountImageModel}
	 * @public
	 */
	export interface CreateAccountImageDto extends AccountImageModel {
	}
	/**
	 * Use to create a new account image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAccountImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new account price point.
	 * @see {@link AccountPricePointModel}
	 * @public
	 */
	export interface CreateAccountPricePointDto extends AccountPricePointModel {
	}
	/**
	 * Use to create a new account product.
	 * @see {@link AccountProductModel}
	 * @public
	 */
	export interface CreateAccountProductDto extends AccountProductModel {
	}
	/**
	 * Use to create a new account product type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAccountProductTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new account status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateAccountStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new account type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAccountTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new account usage balance.
	 * @see {@link AccountUsageBalanceModel}
	 * @public
	 */
	export interface CreateAccountUsageBalanceDto extends AccountUsageBalanceModel {
	}
	/**
	 * Use to create a new contractor.
	 * @see {@link ContractorModel}
	 * @public
	 */
	export interface CreateContractorDto extends ContractorModel {
	}
	/**
	 * Use to create a new service area.
	 * @see {@link ServiceAreaModel}
	 * @public
	 */
	export interface CreateServiceAreaDto extends ServiceAreaModel {
	}
	/**
	 * Use to get a list of account associations
	 * @see {@link AccountAssociationSearchModel}
	 * @public
	 */
	export interface GetAccountAssociationsDto extends AccountAssociationSearchModel {
	}
	/**
	 * Use to get a list of account association types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAccountAssociationTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of account contacts
	 * @see {@link AccountContactSearchModel}
	 * @public
	 */
	export interface GetAccountContactsDto extends AccountContactSearchModel {
	}
	/**
	 * Use to get a list of account currencies
	 * @see {@link AccountCurrencySearchModel}
	 * @public
	 */
	export interface GetAccountCurrenciesDto extends AccountCurrencySearchModel {
	}
	/**
	 * Use to get a list of account files
	 * @see {@link AccountFileSearchModel}
	 * @public
	 */
	export interface GetAccountFilesDto extends AccountFileSearchModel {
	}
	/**
	 * Use to get a list of account images
	 * @see {@link AccountImageSearchModel}
	 * @public
	 */
	export interface GetAccountImagesDto extends AccountImageSearchModel {
	}
	/**
	 * Use to get a list of account image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAccountImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of account price points
	 * @see {@link AccountPricePointSearchModel}
	 * @public
	 */
	export interface GetAccountPricePointsDto extends AccountPricePointSearchModel {
	}
	/**
	 * Use to get a list of account products
	 * @see {@link AccountProductSearchModel}
	 * @public
	 */
	export interface GetAccountProductsDto extends AccountProductSearchModel {
	}
	/**
	 * Use to get a list of account product types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAccountProductTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of accounts
	 * @see {@link AccountSearchModel}
	 * @public
	 */
	export interface GetAccountsDto extends AccountSearchModel {
	}
	/**
	 * Use to get a list of account statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetAccountStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of account types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAccountTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of account usage balances
	 * @see {@link AccountUsageBalanceSearchModel}
	 * @public
	 */
	export interface GetAccountUsageBalancesDto extends AccountUsageBalanceSearchModel {
	}
	/**
	 * Use to get a list of contractors
	 * @see {@link ContractorSearchModel}
	 * @public
	 */
	export interface GetContractorsDto extends ContractorSearchModel {
	}
	/**
	 * Use to get a list of service areas
	 * @see {@link ServiceAreaSearchModel}
	 * @public
	 */
	export interface GetServiceAreasDto extends ServiceAreaSearchModel {
	}
	/**
	 * Use to update an existing account.
	 * @see {@link AccountModel}
	 * @public
	 */
	export interface UpdateAccountDto extends AccountModel {
	}
	/**
	 * Use to update an existing account association.
	 * @see {@link AccountAssociationModel}
	 * @public
	 */
	export interface UpdateAccountAssociationDto extends AccountAssociationModel {
	}
	/**
	 * Use to update an existing account association type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAccountAssociationTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing account contact.
	 * @see {@link AccountContactModel}
	 * @public
	 */
	export interface UpdateAccountContactDto extends AccountContactModel {
	}
	/**
	 * Use to update an existing account currency.
	 * @see {@link AccountCurrencyModel}
	 * @public
	 */
	export interface UpdateAccountCurrencyDto extends AccountCurrencyModel {
	}
	/**
	 * Use to update an existing account file.
	 * @see {@link AccountFileModel}
	 * @public
	 */
	export interface UpdateAccountFileDto extends AccountFileModel {
	}
	/**
	 * Use to update an existing account image.
	 * @see {@link AccountImageModel}
	 * @public
	 */
	export interface UpdateAccountImageDto extends AccountImageModel {
	}
	/**
	 * Use to update an existing account image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAccountImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing account price point.
	 * @see {@link AccountPricePointModel}
	 * @public
	 */
	export interface UpdateAccountPricePointDto extends AccountPricePointModel {
	}
	/**
	 * Use to update an existing account product.
	 * @see {@link AccountProductModel}
	 * @public
	 */
	export interface UpdateAccountProductDto extends AccountProductModel {
	}
	/**
	 * Use to update an existing account product type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAccountProductTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing account status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateAccountStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing account type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAccountTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing account usage balance.
	 * @see {@link AccountUsageBalanceModel}
	 * @public
	 */
	export interface UpdateAccountUsageBalanceDto extends AccountUsageBalanceModel {
	}
	/**
	 * Use to update an existing contractor.
	 * @see {@link ContractorModel}
	 * @public
	 */
	export interface UpdateContractorDto extends ContractorModel {
	}
	/**
	 * Use to update an existing service area.
	 * @see {@link ServiceAreaModel}
	 * @public
	 */
	export interface UpdateServiceAreaDto extends ServiceAreaModel {
	}

	export class Accounts extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all account association calls.
		 * @param {@link cef.admin.api.ClearAccountAssociationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountAssociationCache
		 * @path <API Root>/Accounts/AccountAssociation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountAssociationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountAssociation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account association type calls.
		 * @param {@link cef.admin.api.ClearAccountAssociationTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountAssociationTypeCache
		 * @path <API Root>/Accounts/AccountAssociationType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountAssociationTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountAssociationType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account calls.
		 * @param {@link cef.admin.api.ClearAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountCache
		 * @path <API Root>/Accounts/Account/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "Account", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account contact calls.
		 * @param {@link cef.admin.api.ClearAccountContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountContactCache
		 * @path <API Root>/Accounts/AccountContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account currency calls.
		 * @param {@link cef.admin.api.ClearAccountCurrencyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountCurrencyCache
		 * @path <API Root>/Accounts/AccountCurrency/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountCurrencyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountCurrency", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account file calls.
		 * @param {@link cef.admin.api.ClearAccountFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountFileCache
		 * @path <API Root>/Accounts/AccountFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account image calls.
		 * @param {@link cef.admin.api.ClearAccountImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountImageCache
		 * @path <API Root>/Accounts/AccountImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account image type calls.
		 * @param {@link cef.admin.api.ClearAccountImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountImageTypeCache
		 * @path <API Root>/Accounts/AccountImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account price point calls.
		 * @param {@link cef.admin.api.ClearAccountPricePointCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountPricePointCache
		 * @path <API Root>/Accounts/AccountPricePoint/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountPricePointCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountPricePoint", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account product calls.
		 * @param {@link cef.admin.api.ClearAccountProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountProductCache
		 * @path <API Root>/Accounts/AccountProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account product type calls.
		 * @param {@link cef.admin.api.ClearAccountProductTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountProductTypeCache
		 * @path <API Root>/Accounts/AccountProductType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountProductTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountProductType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account status calls.
		 * @param {@link cef.admin.api.ClearAccountStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountStatusCache
		 * @path <API Root>/Accounts/AccountStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account type calls.
		 * @param {@link cef.admin.api.ClearAccountTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountTypeCache
		 * @path <API Root>/Accounts/AccountType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all account usage balance calls.
		 * @param {@link cef.admin.api.ClearAccountUsageBalanceCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAccountUsageBalanceCache
		 * @path <API Root>/Accounts/AccountUsageBalance/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAccountUsageBalanceCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalance", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all contractor calls.
		 * @param {@link cef.admin.api.ClearContractorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearContractorCache
		 * @path <API Root>/Accounts/Contractor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearContractorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "Contractor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all service area calls.
		 * @param {@link cef.admin.api.ClearServiceAreaCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearServiceAreaCache
		 * @path <API Root>/Accounts/ServiceArea/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearServiceAreaCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Accounts", "ServiceArea", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new account.
		 * @param {@link cef.admin.api.CreateAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccount
		 * @path <API Root>/Accounts/Account/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccount = (routeParams?: CreateAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "Account", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account association.
		 * @param {@link cef.admin.api.CreateAccountAssociationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountAssociation
		 * @path <API Root>/Accounts/AccountAssociation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountAssociation = (routeParams?: CreateAccountAssociationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountAssociation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account association type.
		 * @param {@link cef.admin.api.CreateAccountAssociationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountAssociationType
		 * @path <API Root>/Accounts/AccountAssociationType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountAssociationType = (routeParams?: CreateAccountAssociationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountAssociationType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account contact.
		 * @param {@link cef.admin.api.CreateAccountContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountContact
		 * @path <API Root>/Accounts/AccountContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountContact = (routeParams?: CreateAccountContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account currency.
		 * @param {@link cef.admin.api.CreateAccountCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountCurrency
		 * @path <API Root>/Accounts/AccountCurrency/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountCurrency = (routeParams?: CreateAccountCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountCurrency", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account file.
		 * @param {@link cef.admin.api.CreateAccountFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountFile
		 * @path <API Root>/Accounts/AccountFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountFile = (routeParams?: CreateAccountFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account image.
		 * @param {@link cef.admin.api.CreateAccountImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountImage
		 * @path <API Root>/Accounts/AccountImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountImage = (routeParams?: CreateAccountImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account image type.
		 * @param {@link cef.admin.api.CreateAccountImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountImageType
		 * @path <API Root>/Accounts/AccountImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountImageType = (routeParams?: CreateAccountImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account price point.
		 * @param {@link cef.admin.api.CreateAccountPricePointDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountPricePoint
		 * @path <API Root>/Accounts/AccountPricePoint/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountPricePoint = (routeParams?: CreateAccountPricePointDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountPricePoint", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account product.
		 * @param {@link cef.admin.api.CreateAccountProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountProduct
		 * @path <API Root>/Accounts/AccountProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountProduct = (routeParams?: CreateAccountProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account product type.
		 * @param {@link cef.admin.api.CreateAccountProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountProductType
		 * @path <API Root>/Accounts/AccountProductType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountProductType = (routeParams?: CreateAccountProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountProductType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account status.
		 * @param {@link cef.admin.api.CreateAccountStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountStatus
		 * @path <API Root>/Accounts/AccountStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountStatus = (routeParams?: CreateAccountStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account type.
		 * @param {@link cef.admin.api.CreateAccountTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountType
		 * @path <API Root>/Accounts/AccountType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountType = (routeParams?: CreateAccountTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account usage balance.
		 * @param {@link cef.admin.api.CreateAccountUsageBalanceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountUsageBalance
		 * @path <API Root>/Accounts/AccountUsageBalance/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountUsageBalance = (routeParams?: CreateAccountUsageBalanceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalance", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new contractor.
		 * @param {@link cef.admin.api.CreateContractorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateContractor
		 * @path <API Root>/Accounts/Contractor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateContractor = (routeParams?: CreateContractorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "Contractor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new service area.
		 * @param {@link cef.admin.api.CreateServiceAreaDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateServiceArea
		 * @path <API Root>/Accounts/ServiceArea/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateServiceArea = (routeParams?: CreateServiceAreaDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "ServiceArea", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific account association from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountAssociationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountAssociationByID
		 * @path <API Root>/Accounts/AccountAssociation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountAssociationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountAssociation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account association type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountAssociationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountAssociationTypeByID
		 * @path <API Root>/Accounts/AccountAssociationType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountAssociationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountAssociationType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountByID
		 * @path <API Root>/Accounts/Account/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "Account", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountContactByID
		 * @path <API Root>/Accounts/AccountContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account currency from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountCurrencyByID
		 * @path <API Root>/Accounts/AccountCurrency/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountCurrency", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountFileByID
		 * @path <API Root>/Accounts/AccountFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountImageByID
		 * @path <API Root>/Accounts/AccountImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountImageTypeByID
		 * @path <API Root>/Accounts/AccountImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account price point from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountPricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountPricePointByID
		 * @path <API Root>/Accounts/AccountPricePoint/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountPricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountPricePoint", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountProductByID
		 * @path <API Root>/Accounts/AccountProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account product type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountProductTypeByID
		 * @path <API Root>/Accounts/AccountProductType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountProductType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountStatusByID
		 * @path <API Root>/Accounts/AccountStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountTypeByID
		 * @path <API Root>/Accounts/AccountType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific account usage balance from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAccountUsageBalanceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAccountUsageBalanceByID
		 * @path <API Root>/Accounts/AccountUsageBalance/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAccountUsageBalanceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalance", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific contractor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateContractorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateContractorByID
		 * @path <API Root>/Accounts/Contractor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateContractorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "Contractor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific service area from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateServiceAreaByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateServiceAreaByID
		 * @path <API Root>/Accounts/ServiceArea/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateServiceAreaByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "ServiceArea", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific account association from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountAssociationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountAssociationByID
		 * @path <API Root>/Accounts/AccountAssociation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountAssociationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountAssociation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account association type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountAssociationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountAssociationTypeByID
		 * @path <API Root>/Accounts/AccountAssociationType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountAssociationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountAssociationType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountByID
		 * @path <API Root>/Accounts/Account/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "Account", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountContactByID
		 * @path <API Root>/Accounts/AccountContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account currency from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountCurrencyByID
		 * @path <API Root>/Accounts/AccountCurrency/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountCurrency", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountFileByID
		 * @path <API Root>/Accounts/AccountFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountImageByID
		 * @path <API Root>/Accounts/AccountImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountImageTypeByID
		 * @path <API Root>/Accounts/AccountImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account price point from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountPricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountPricePointByID
		 * @path <API Root>/Accounts/AccountPricePoint/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountPricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountPricePoint", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountProductByID
		 * @path <API Root>/Accounts/AccountProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account product type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountProductTypeByID
		 * @path <API Root>/Accounts/AccountProductType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountProductType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountStatusByID
		 * @path <API Root>/Accounts/AccountStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountTypeByID
		 * @path <API Root>/Accounts/AccountType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific account usage balance from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAccountUsageBalanceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountUsageBalanceByID
		 * @path <API Root>/Accounts/AccountUsageBalance/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountUsageBalanceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalance", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific contractor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteContractorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteContractorByID
		 * @path <API Root>/Accounts/Contractor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteContractorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "Contractor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific service area from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteServiceAreaByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteServiceAreaByID
		 * @path <API Root>/Accounts/ServiceArea/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteServiceAreaByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "ServiceArea", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific account association
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountAssociationByID
		 * @path <API Root>/Accounts/AccountAssociation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountAssociationModel>}
		 * @public
		 */
		GetAccountAssociationByID = (id: number) => this.$http<AccountAssociationModel>({
			url: [this.rootUrl, "Accounts", "AccountAssociation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account associations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountAssociations
		 * @path <API Root>/Accounts/AccountAssociations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountAssociationPagedResults>}
		 * @public
		 */
		GetAccountAssociations = (routeParams?: GetAccountAssociationsDto) => this.$http<AccountAssociationPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountAssociations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account association type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountAssociationTypeByID
		 * @path <API Root>/Accounts/AccountAssociationType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAccountAssociationTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Accounts", "AccountAssociationType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account association types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountAssociationTypes
		 * @path <API Root>/Accounts/AccountAssociationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountAssociationTypePagedResults>}
		 * @public
		 */
		GetAccountAssociationTypes = (routeParams?: GetAccountAssociationTypesDto) => this.$http<AccountAssociationTypePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountAssociationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountByID
		 * @path <API Root>/Accounts/Account/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountModel>}
		 * @public
		 */
		GetAccountByID = (id: number) => this.$http<AccountModel>({
			url: [this.rootUrl, "Accounts", "Account", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific account contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountContactByID
		 * @path <API Root>/Accounts/AccountContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountContactModel>}
		 * @public
		 */
		GetAccountContactByID = (id: number) => this.$http<AccountContactModel>({
			url: [this.rootUrl, "Accounts", "AccountContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountContacts
		 * @path <API Root>/Accounts/AccountContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountContactPagedResults>}
		 * @public
		 */
		GetAccountContacts = (routeParams?: GetAccountContactsDto) => this.$http<AccountContactPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of account currencies
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountCurrencies
		 * @path <API Root>/Accounts/AccountCurrencies
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountCurrencyPagedResults>}
		 * @public
		 */
		GetAccountCurrencies = (routeParams?: GetAccountCurrenciesDto) => this.$http<AccountCurrencyPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountCurrencies"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account currency
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountCurrencyByID
		 * @path <API Root>/Accounts/AccountCurrency/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountCurrencyModel>}
		 * @public
		 */
		GetAccountCurrencyByID = (id: number) => this.$http<AccountCurrencyModel>({
			url: [this.rootUrl, "Accounts", "AccountCurrency", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific account file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountFileByID
		 * @path <API Root>/Accounts/AccountFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountFileModel>}
		 * @public
		 */
		GetAccountFileByID = (id: number) => this.$http<AccountFileModel>({
			url: [this.rootUrl, "Accounts", "AccountFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountFiles
		 * @path <API Root>/Accounts/AccountFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountFilePagedResults>}
		 * @public
		 */
		GetAccountFiles = (routeParams?: GetAccountFilesDto) => this.$http<AccountFilePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountImageByID
		 * @path <API Root>/Accounts/AccountImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountImageModel>}
		 * @public
		 */
		GetAccountImageByID = (id: number) => this.$http<AccountImageModel>({
			url: [this.rootUrl, "Accounts", "AccountImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountImages
		 * @path <API Root>/Accounts/AccountImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountImagePagedResults>}
		 * @public
		 */
		GetAccountImages = (routeParams?: GetAccountImagesDto) => this.$http<AccountImagePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountImageTypeByID
		 * @path <API Root>/Accounts/AccountImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAccountImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Accounts", "AccountImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountImageTypes
		 * @path <API Root>/Accounts/AccountImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountImageTypePagedResults>}
		 * @public
		 */
		GetAccountImageTypes = (routeParams?: GetAccountImageTypesDto) => this.$http<AccountImageTypePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account price point
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountPricePointByID
		 * @path <API Root>/Accounts/AccountPricePoint/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountPricePointModel>}
		 * @public
		 */
		GetAccountPricePointByID = (id: number) => this.$http<AccountPricePointModel>({
			url: [this.rootUrl, "Accounts", "AccountPricePoint", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account price points
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountPricePoints
		 * @path <API Root>/Accounts/AccountPricePoints
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountPricePointPagedResults>}
		 * @public
		 */
		GetAccountPricePoints = (routeParams?: GetAccountPricePointsDto) => this.$http<AccountPricePointPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountPricePoints"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountProductByID
		 * @path <API Root>/Accounts/AccountProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountProductModel>}
		 * @public
		 */
		GetAccountProductByID = (id: number) => this.$http<AccountProductModel>({
			url: [this.rootUrl, "Accounts", "AccountProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountProducts
		 * @path <API Root>/Accounts/AccountProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountProductPagedResults>}
		 * @public
		 */
		GetAccountProducts = (routeParams?: GetAccountProductsDto) => this.$http<AccountProductPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account product type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountProductTypeByID
		 * @path <API Root>/Accounts/AccountProductType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAccountProductTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Accounts", "AccountProductType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account product types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountProductTypes
		 * @path <API Root>/Accounts/AccountProductTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountProductTypePagedResults>}
		 * @public
		 */
		GetAccountProductTypes = (routeParams?: GetAccountProductTypesDto) => this.$http<AccountProductTypePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountProductTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccounts
		 * @path <API Root>/Accounts/Accounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountPagedResults>}
		 * @public
		 */
		GetAccounts = (routeParams?: GetAccountsDto) => this.$http<AccountPagedResults>({
			url: [this.rootUrl, "Accounts", "Accounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountStatusByID
		 * @path <API Root>/Accounts/AccountStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetAccountStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Accounts", "AccountStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountStatuses
		 * @path <API Root>/Accounts/AccountStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountStatusPagedResults>}
		 * @public
		 */
		GetAccountStatuses = (routeParams?: GetAccountStatusesDto) => this.$http<AccountStatusPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountTypeByID
		 * @path <API Root>/Accounts/AccountType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAccountTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Accounts", "AccountType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountTypes
		 * @path <API Root>/Accounts/AccountTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountTypePagedResults>}
		 * @public
		 */
		GetAccountTypes = (routeParams?: GetAccountTypesDto) => this.$http<AccountTypePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account usage balance
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountUsageBalanceByID
		 * @path <API Root>/Accounts/AccountUsageBalance/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountUsageBalanceModel>}
		 * @public
		 */
		GetAccountUsageBalanceByID = (id: number) => this.$http<AccountUsageBalanceModel>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalance", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of account usage balances
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountUsageBalances
		 * @path <API Root>/Accounts/AccountUsageBalances
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountUsageBalancePagedResults>}
		 * @public
		 */
		GetAccountUsageBalances = (routeParams?: GetAccountUsageBalancesDto) => this.$http<AccountUsageBalancePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalances"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific contractor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContractorByID
		 * @path <API Root>/Accounts/Contractor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContractorModel>}
		 * @public
		 */
		GetContractorByID = (id: number) => this.$http<ContractorModel>({
			url: [this.rootUrl, "Accounts", "Contractor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of contractors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContractors
		 * @path <API Root>/Accounts/Contractors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContractorPagedResults>}
		 * @public
		 */
		GetContractors = (routeParams?: GetContractorsDto) => this.$http<ContractorPagedResults>({
			url: [this.rootUrl, "Accounts", "Contractors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get account for the current user logged in
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccount
		 * @path <API Root>/Accounts/CurrentAccount
		 * @verb GET
		 * @returns {ng.IHttpPromise<AccountModel>}
		 * @public
		 */
		GetCurrentAccount = () => this.$http<AccountModel>({
			url: [this.rootUrl, "Accounts", "CurrentAccount"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific service area
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetServiceAreaByID
		 * @path <API Root>/Accounts/ServiceArea/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ServiceAreaModel>}
		 * @public
		 */
		GetServiceAreaByID = (id: number) => this.$http<ServiceAreaModel>({
			url: [this.rootUrl, "Accounts", "ServiceArea", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of service areas
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetServiceAreas
		 * @path <API Root>/Accounts/ServiceAreas
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ServiceAreaPagedResults>}
		 * @public
		 */
		GetServiceAreas = (routeParams?: GetServiceAreasDto) => this.$http<ServiceAreaPagedResults>({
			url: [this.rootUrl, "Accounts", "ServiceAreas"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @param {@link cef.admin.api.MarkAccountContactAsDefaultBillingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsDefaultBilling
		 * @path <API Root>/Accounts/AccountContact/MarkAsDefaultBilling/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkAccountContactAsDefaultBilling = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "MarkAsDefaultBilling", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * @param {@link cef.admin.api.MarkAccountContactAsNeitherBillingNorShippingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsNeitherBillingNorShipping
		 * @path <API Root>/Accounts/AccountContact/MarkAsNotBillingOrShipping/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkAccountContactAsNeitherBillingNorShipping = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "MarkAsNotBillingOrShipping", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * @param {@link cef.admin.api.MarkAccountContactAsPrimaryShippingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsPrimaryShipping
		 * @path <API Root>/Accounts/AccountContact/MarkAsPrimaryShipping/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkAccountContactAsPrimaryShipping = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "MarkAsPrimaryShipping", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account association from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountAssociationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountAssociationByID
		 * @path <API Root>/Accounts/AccountAssociation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountAssociationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountAssociation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account association type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountAssociationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountAssociationTypeByID
		 * @path <API Root>/Accounts/AccountAssociationType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountAssociationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountAssociationType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountByID
		 * @path <API Root>/Accounts/Account/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "Account", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountContactByID
		 * @path <API Root>/Accounts/AccountContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account currency from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountCurrencyByID
		 * @path <API Root>/Accounts/AccountCurrency/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountCurrency", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountFileByID
		 * @path <API Root>/Accounts/AccountFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountImageByID
		 * @path <API Root>/Accounts/AccountImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountImageTypeByID
		 * @path <API Root>/Accounts/AccountImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account price point from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountPricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountPricePointByID
		 * @path <API Root>/Accounts/AccountPricePoint/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountPricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountPricePoint", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountProductByID
		 * @path <API Root>/Accounts/AccountProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account product type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountProductTypeByID
		 * @path <API Root>/Accounts/AccountProductType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountProductType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountStatusByID
		 * @path <API Root>/Accounts/AccountStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountTypeByID
		 * @path <API Root>/Accounts/AccountType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific account usage balance from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAccountUsageBalanceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAccountUsageBalanceByID
		 * @path <API Root>/Accounts/AccountUsageBalance/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAccountUsageBalanceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalance", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific contractor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateContractorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateContractorByID
		 * @path <API Root>/Accounts/Contractor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateContractorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "Contractor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific service area from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateServiceAreaByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateServiceAreaByID
		 * @path <API Root>/Accounts/ServiceArea/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateServiceAreaByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "ServiceArea", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing account.
		 * @param {@link cef.admin.api.UpdateAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccount
		 * @path <API Root>/Accounts/Account/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccount = (routeParams?: UpdateAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "Account", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account association.
		 * @param {@link cef.admin.api.UpdateAccountAssociationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountAssociation
		 * @path <API Root>/Accounts/AccountAssociation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountAssociation = (routeParams?: UpdateAccountAssociationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountAssociation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account association type.
		 * @param {@link cef.admin.api.UpdateAccountAssociationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountAssociationType
		 * @path <API Root>/Accounts/AccountAssociationType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountAssociationType = (routeParams?: UpdateAccountAssociationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountAssociationType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account contact.
		 * @param {@link cef.admin.api.UpdateAccountContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountContact
		 * @path <API Root>/Accounts/AccountContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountContact = (routeParams?: UpdateAccountContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account currency.
		 * @param {@link cef.admin.api.UpdateAccountCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountCurrency
		 * @path <API Root>/Accounts/AccountCurrency/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountCurrency = (routeParams?: UpdateAccountCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountCurrency", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account file.
		 * @param {@link cef.admin.api.UpdateAccountFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountFile
		 * @path <API Root>/Accounts/AccountFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountFile = (routeParams?: UpdateAccountFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account image.
		 * @param {@link cef.admin.api.UpdateAccountImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountImage
		 * @path <API Root>/Accounts/AccountImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountImage = (routeParams?: UpdateAccountImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account image type.
		 * @param {@link cef.admin.api.UpdateAccountImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountImageType
		 * @path <API Root>/Accounts/AccountImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountImageType = (routeParams?: UpdateAccountImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account price point.
		 * @param {@link cef.admin.api.UpdateAccountPricePointDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountPricePoint
		 * @path <API Root>/Accounts/AccountPricePoint/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountPricePoint = (routeParams?: UpdateAccountPricePointDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountPricePoint", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account product.
		 * @param {@link cef.admin.api.UpdateAccountProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountProduct
		 * @path <API Root>/Accounts/AccountProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountProduct = (routeParams?: UpdateAccountProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account product type.
		 * @param {@link cef.admin.api.UpdateAccountProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountProductType
		 * @path <API Root>/Accounts/AccountProductType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountProductType = (routeParams?: UpdateAccountProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountProductType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account status.
		 * @param {@link cef.admin.api.UpdateAccountStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountStatus
		 * @path <API Root>/Accounts/AccountStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountStatus = (routeParams?: UpdateAccountStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account type.
		 * @param {@link cef.admin.api.UpdateAccountTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountType
		 * @path <API Root>/Accounts/AccountType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountType = (routeParams?: UpdateAccountTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing account usage balance.
		 * @param {@link cef.admin.api.UpdateAccountUsageBalanceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountUsageBalance
		 * @path <API Root>/Accounts/AccountUsageBalance/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountUsageBalance = (routeParams?: UpdateAccountUsageBalanceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountUsageBalance", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing contractor.
		 * @param {@link cef.admin.api.UpdateContractorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateContractor
		 * @path <API Root>/Accounts/Contractor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateContractor = (routeParams?: UpdateContractorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "Contractor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing service area.
		 * @param {@link cef.admin.api.UpdateServiceAreaDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateServiceArea
		 * @path <API Root>/Accounts/ServiceArea/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateServiceArea = (routeParams?: UpdateServiceAreaDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "ServiceArea", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
