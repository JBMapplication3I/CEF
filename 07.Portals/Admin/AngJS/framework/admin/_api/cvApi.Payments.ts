/**
 * @file framework/admin/_api/cvApi.Payments.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new membership.
	 * @see {@link MembershipModel}
	 * @public
	 */
	export interface CreateMembershipDto extends MembershipModel {
	}
	/**
	 * Use to create a new membership ad zone access.
	 * @see {@link MembershipAdZoneAccessModel}
	 * @public
	 */
	export interface CreateMembershipAdZoneAccessDto extends MembershipAdZoneAccessModel {
	}
	/**
	 * Use to create a new membership ad zone access by level.
	 * @see {@link MembershipAdZoneAccessByLevelModel}
	 * @public
	 */
	export interface CreateMembershipAdZoneAccessByLevelDto extends MembershipAdZoneAccessByLevelModel {
	}
	/**
	 * Use to create a new membership level.
	 * @see {@link MembershipLevelModel}
	 * @public
	 */
	export interface CreateMembershipLevelDto extends MembershipLevelModel {
	}
	/**
	 * Use to create a new membership repeat type.
	 * @see {@link MembershipRepeatTypeModel}
	 * @public
	 */
	export interface CreateMembershipRepeatTypeDto extends MembershipRepeatTypeModel {
	}
	/**
	 * Use to create a new payment.
	 * @see {@link PaymentModel}
	 * @public
	 */
	export interface CreatePaymentDto extends PaymentModel {
	}
	/**
	 * Use to create a new payment method.
	 * @see {@link PaymentMethodModel}
	 * @public
	 */
	export interface CreatePaymentMethodDto extends PaymentMethodModel {
	}
	/**
	 * Use to create a new payment status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreatePaymentStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new payment type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreatePaymentTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new repeat type.
	 * @see {@link RepeatTypeModel}
	 * @public
	 */
	export interface CreateRepeatTypeDto extends RepeatTypeModel {
	}
	/**
	 * Use to create a new sales invoice payment.
	 * @see {@link SalesInvoicePaymentModel}
	 * @public
	 */
	export interface CreateSalesInvoicePaymentDto extends SalesInvoicePaymentModel {
	}
	/**
	 * Use to create a new sales order payment.
	 * @see {@link SalesOrderPaymentModel}
	 * @public
	 */
	export interface CreateSalesOrderPaymentDto extends SalesOrderPaymentModel {
	}
	/**
	 * Use to create a new sales return payment.
	 * @see {@link SalesReturnPaymentModel}
	 * @public
	 */
	export interface CreateSalesReturnPaymentDto extends SalesReturnPaymentModel {
	}
	/**
	 * Use to create a new subscription.
	 * @see {@link SubscriptionModel}
	 * @public
	 */
	export interface CreateSubscriptionDto extends SubscriptionModel {
	}
	/**
	 * Use to create a new subscription history.
	 * @see {@link SubscriptionHistoryModel}
	 * @public
	 */
	export interface CreateSubscriptionHistoryDto extends SubscriptionHistoryModel {
	}
	/**
	 * Use to create a new subscription status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateSubscriptionStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new subscription type.
	 * @see {@link SubscriptionTypeModel}
	 * @public
	 */
	export interface CreateSubscriptionTypeDto extends SubscriptionTypeModel {
	}
	/**
	 * Use to create a new subscription type repeat type.
	 * @see {@link SubscriptionTypeRepeatTypeModel}
	 * @public
	 */
	export interface CreateSubscriptionTypeRepeatTypeDto extends SubscriptionTypeRepeatTypeModel {
	}
	/**
	 * Use to add an entry to the current user's wallet
	 * @see {@link WalletModel}
	 * @public
	 */
	export interface CreateUserWalletEntryAsCSRDto extends WalletModel {
	}
	/**
	 * Use to create a new wallet.
	 * @see {@link WalletModel}
	 * @public
	 */
	export interface CreateWalletDto extends WalletModel {
	}
	/**
	 * Use to get a list of membership ad zone access by levels
	 * @see {@link MembershipAdZoneAccessByLevelSearchModel}
	 * @public
	 */
	export interface GetMembershipAdZoneAccessByLevelsDto extends MembershipAdZoneAccessByLevelSearchModel {
	}
	/**
	 * Use to get a list of membership ad zone accesses
	 * @see {@link MembershipAdZoneAccessSearchModel}
	 * @public
	 */
	export interface GetMembershipAdZoneAccessesDto extends MembershipAdZoneAccessSearchModel {
	}
	/**
	 * Use to get a list of membership levels
	 * @see {@link MembershipLevelSearchModel}
	 * @public
	 */
	export interface GetMembershipLevelsDto extends MembershipLevelSearchModel {
	}
	/**
	 * Use to get a list of membership repeat types
	 * @see {@link MembershipRepeatTypeSearchModel}
	 * @public
	 */
	export interface GetMembershipRepeatTypesDto extends MembershipRepeatTypeSearchModel {
	}
	/**
	 * Use to get a list of memberships
	 * @see {@link MembershipSearchModel}
	 * @public
	 */
	export interface GetMembershipsDto extends MembershipSearchModel {
	}
	/**
	 * Use to get a list of payment methods
	 * @see {@link PaymentMethodSearchModel}
	 * @public
	 */
	export interface GetPaymentMethodsDto extends PaymentMethodSearchModel {
	}
	/**
	 * Use to get a list of payments
	 * @see {@link PaymentSearchModel}
	 * @public
	 */
	export interface GetPaymentsDto extends PaymentSearchModel {
	}
	/**
	 * Use to get a list of payment statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetPaymentStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of payment types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetPaymentTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of repeat types
	 * @see {@link RepeatTypeSearchModel}
	 * @public
	 */
	export interface GetRepeatTypesDto extends RepeatTypeSearchModel {
	}
	/**
	 * Use to get a list of sales invoice payments
	 * @see {@link SalesInvoicePaymentSearchModel}
	 * @public
	 */
	export interface GetSalesInvoicePaymentsDto extends SalesInvoicePaymentSearchModel {
	}
	/**
	 * Use to get a list of sales order payments
	 * @see {@link SalesOrderPaymentSearchModel}
	 * @public
	 */
	export interface GetSalesOrderPaymentsDto extends SalesOrderPaymentSearchModel {
	}
	/**
	 * Use to get a list of sales return payments
	 * @see {@link SalesReturnPaymentSearchModel}
	 * @public
	 */
	export interface GetSalesReturnPaymentsDto extends SalesReturnPaymentSearchModel {
	}
	/**
	 * Use to get a list of subscription histories
	 * @see {@link SubscriptionHistorySearchModel}
	 * @public
	 */
	export interface GetSubscriptionHistoriesDto extends SubscriptionHistorySearchModel {
	}
	/**
	 * Use to get a list of subscriptions
	 * @see {@link SubscriptionSearchModel}
	 * @public
	 */
	export interface GetSubscriptionsDto extends SubscriptionSearchModel {
	}
	/**
	 * Use to get a list of subscription statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSubscriptionStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of subscription type repeat types
	 * @see {@link SubscriptionTypeRepeatTypeSearchModel}
	 * @public
	 */
	export interface GetSubscriptionTypeRepeatTypesDto extends SubscriptionTypeRepeatTypeSearchModel {
	}
	/**
	 * Use to get a list of subscription types
	 * @see {@link SubscriptionTypeSearchModel}
	 * @public
	 */
	export interface GetSubscriptionTypesDto extends SubscriptionTypeSearchModel {
	}
	/**
	 * Use to get a list of wallets
	 * @see {@link WalletSearchModel}
	 * @public
	 */
	export interface GetWalletsDto extends WalletSearchModel {
	}
	/**
	 * Use to update an existing membership.
	 * @see {@link MembershipModel}
	 * @public
	 */
	export interface UpdateMembershipDto extends MembershipModel {
	}
	/**
	 * Use to update an existing membership ad zone access.
	 * @see {@link MembershipAdZoneAccessModel}
	 * @public
	 */
	export interface UpdateMembershipAdZoneAccessDto extends MembershipAdZoneAccessModel {
	}
	/**
	 * Use to update an existing membership ad zone access by level.
	 * @see {@link MembershipAdZoneAccessByLevelModel}
	 * @public
	 */
	export interface UpdateMembershipAdZoneAccessByLevelDto extends MembershipAdZoneAccessByLevelModel {
	}
	/**
	 * Use to update an existing membership level.
	 * @see {@link MembershipLevelModel}
	 * @public
	 */
	export interface UpdateMembershipLevelDto extends MembershipLevelModel {
	}
	/**
	 * Use to update an existing membership repeat type.
	 * @see {@link MembershipRepeatTypeModel}
	 * @public
	 */
	export interface UpdateMembershipRepeatTypeDto extends MembershipRepeatTypeModel {
	}
	/**
	 * Use to update an existing payment.
	 * @see {@link PaymentModel}
	 * @public
	 */
	export interface UpdatePaymentDto extends PaymentModel {
	}
	/**
	 * Use to update an existing payment method.
	 * @see {@link PaymentMethodModel}
	 * @public
	 */
	export interface UpdatePaymentMethodDto extends PaymentMethodModel {
	}
	/**
	 * Use to update an existing payment status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdatePaymentStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing payment type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdatePaymentTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing repeat type.
	 * @see {@link RepeatTypeModel}
	 * @public
	 */
	export interface UpdateRepeatTypeDto extends RepeatTypeModel {
	}
	/**
	 * Use to update an existing sales invoice payment.
	 * @see {@link SalesInvoicePaymentModel}
	 * @public
	 */
	export interface UpdateSalesInvoicePaymentDto extends SalesInvoicePaymentModel {
	}
	/**
	 * Use to update an existing sales order payment.
	 * @see {@link SalesOrderPaymentModel}
	 * @public
	 */
	export interface UpdateSalesOrderPaymentDto extends SalesOrderPaymentModel {
	}
	/**
	 * Use to update an existing sales return payment.
	 * @see {@link SalesReturnPaymentModel}
	 * @public
	 */
	export interface UpdateSalesReturnPaymentDto extends SalesReturnPaymentModel {
	}
	/**
	 * Use to update an existing subscription.
	 * @see {@link SubscriptionModel}
	 * @public
	 */
	export interface UpdateSubscriptionDto extends SubscriptionModel {
	}
	/**
	 * Use to update an existing subscription history.
	 * @see {@link SubscriptionHistoryModel}
	 * @public
	 */
	export interface UpdateSubscriptionHistoryDto extends SubscriptionHistoryModel {
	}
	/**
	 * Use to update an existing subscription status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateSubscriptionStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing subscription type.
	 * @see {@link SubscriptionTypeModel}
	 * @public
	 */
	export interface UpdateSubscriptionTypeDto extends SubscriptionTypeModel {
	}
	/**
	 * Use to update an existing subscription type repeat type.
	 * @see {@link SubscriptionTypeRepeatTypeModel}
	 * @public
	 */
	export interface UpdateSubscriptionTypeRepeatTypeDto extends SubscriptionTypeRepeatTypeModel {
	}
	/**
	 * Use to update an entry in the current user's wallet
	 * @see {@link WalletModel}
	 * @public
	 */
	export interface UpdateUserWalletEntryAsCSRDto extends WalletModel {
	}
	/**
	 * Use to update an existing wallet.
	 * @see {@link WalletModel}
	 * @public
	 */
	export interface UpdateWalletDto extends WalletModel {
	}

	export class Payments extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all membership ad zone access by level calls.
		 * @param {@link cef.admin.api.ClearMembershipAdZoneAccessByLevelCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMembershipAdZoneAccessByLevelCache
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevel/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMembershipAdZoneAccessByLevelCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevel", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all membership ad zone access calls.
		 * @param {@link cef.admin.api.ClearMembershipAdZoneAccessCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMembershipAdZoneAccessCache
		 * @path <API Root>/Payments/MembershipAdZoneAccess/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMembershipAdZoneAccessCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccess", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all membership calls.
		 * @param {@link cef.admin.api.ClearMembershipCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMembershipCache
		 * @path <API Root>/Payments/Membership/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMembershipCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "Membership", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all membership level calls.
		 * @param {@link cef.admin.api.ClearMembershipLevelCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMembershipLevelCache
		 * @path <API Root>/Payments/MembershipLevel/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMembershipLevelCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "MembershipLevel", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all membership repeat type calls.
		 * @param {@link cef.admin.api.ClearMembershipRepeatTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMembershipRepeatTypeCache
		 * @path <API Root>/Payments/MembershipRepeatType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMembershipRepeatTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "MembershipRepeatType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all payment calls.
		 * @param {@link cef.admin.api.ClearPaymentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPaymentCache
		 * @path <API Root>/Payments/Payment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPaymentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "Payment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all payment method calls.
		 * @param {@link cef.admin.api.ClearPaymentMethodCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPaymentMethodCache
		 * @path <API Root>/Payments/PaymentMethod/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPaymentMethodCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "PaymentMethod", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all payment status calls.
		 * @param {@link cef.admin.api.ClearPaymentStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPaymentStatusCache
		 * @path <API Root>/Payments/PaymentStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPaymentStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "PaymentStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all payment type calls.
		 * @param {@link cef.admin.api.ClearPaymentTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPaymentTypeCache
		 * @path <API Root>/Payments/PaymentType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPaymentTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "PaymentType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all repeat type calls.
		 * @param {@link cef.admin.api.ClearRepeatTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRepeatTypeCache
		 * @path <API Root>/Payments/RepeatType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRepeatTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "RepeatType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice payment calls.
		 * @param {@link cef.admin.api.ClearSalesInvoicePaymentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoicePaymentCache
		 * @path <API Root>/Payments/SalesInvoicePayment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoicePaymentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order payment calls.
		 * @param {@link cef.admin.api.ClearSalesOrderPaymentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderPaymentCache
		 * @path <API Root>/Payments/SalesOrderPayment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderPaymentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "SalesOrderPayment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return payment calls.
		 * @param {@link cef.admin.api.ClearSalesReturnPaymentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnPaymentCache
		 * @path <API Root>/Payments/SalesReturnPayment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnPaymentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "SalesReturnPayment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all subscription calls.
		 * @param {@link cef.admin.api.ClearSubscriptionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSubscriptionCache
		 * @path <API Root>/Payments/Subscription/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSubscriptionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "Subscription", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all subscription history calls.
		 * @param {@link cef.admin.api.ClearSubscriptionHistoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSubscriptionHistoryCache
		 * @path <API Root>/Payments/SubscriptionHistory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSubscriptionHistoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "SubscriptionHistory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all subscription status calls.
		 * @param {@link cef.admin.api.ClearSubscriptionStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSubscriptionStatusCache
		 * @path <API Root>/Payments/SubscriptionStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSubscriptionStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "SubscriptionStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all subscription type calls.
		 * @param {@link cef.admin.api.ClearSubscriptionTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSubscriptionTypeCache
		 * @path <API Root>/Payments/SubscriptionType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSubscriptionTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "SubscriptionType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all subscription type repeat type calls.
		 * @param {@link cef.admin.api.ClearSubscriptionTypeRepeatTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSubscriptionTypeRepeatTypeCache
		 * @path <API Root>/Payments/SubscriptionTypeRepeatType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSubscriptionTypeRepeatTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all wallet calls.
		 * @param {@link cef.admin.api.ClearWalletCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearWalletCache
		 * @path <API Root>/Payments/Wallet/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearWalletCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Payments", "Wallet", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new membership.
		 * @param {@link cef.admin.api.CreateMembershipDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMembership
		 * @path <API Root>/Payments/Membership/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMembership = (routeParams?: CreateMembershipDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Membership", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new membership ad zone access.
		 * @param {@link cef.admin.api.CreateMembershipAdZoneAccessDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMembershipAdZoneAccess
		 * @path <API Root>/Payments/MembershipAdZoneAccess/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMembershipAdZoneAccess = (routeParams?: CreateMembershipAdZoneAccessDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccess", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new membership ad zone access by level.
		 * @param {@link cef.admin.api.CreateMembershipAdZoneAccessByLevelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMembershipAdZoneAccessByLevel
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevel/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMembershipAdZoneAccessByLevel = (routeParams?: CreateMembershipAdZoneAccessByLevelDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevel", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new membership level.
		 * @param {@link cef.admin.api.CreateMembershipLevelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMembershipLevel
		 * @path <API Root>/Payments/MembershipLevel/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMembershipLevel = (routeParams?: CreateMembershipLevelDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipLevel", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new membership repeat type.
		 * @param {@link cef.admin.api.CreateMembershipRepeatTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMembershipRepeatType
		 * @path <API Root>/Payments/MembershipRepeatType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMembershipRepeatType = (routeParams?: CreateMembershipRepeatTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipRepeatType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new payment.
		 * @param {@link cef.admin.api.CreatePaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePayment
		 * @path <API Root>/Payments/Payment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePayment = (routeParams?: CreatePaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Payment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new payment method.
		 * @param {@link cef.admin.api.CreatePaymentMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePaymentMethod
		 * @path <API Root>/Payments/PaymentMethod/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePaymentMethod = (routeParams?: CreatePaymentMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "PaymentMethod", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new payment status.
		 * @param {@link cef.admin.api.CreatePaymentStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePaymentStatus
		 * @path <API Root>/Payments/PaymentStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePaymentStatus = (routeParams?: CreatePaymentStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "PaymentStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new payment type.
		 * @param {@link cef.admin.api.CreatePaymentTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePaymentType
		 * @path <API Root>/Payments/PaymentType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePaymentType = (routeParams?: CreatePaymentTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "PaymentType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new repeat type.
		 * @param {@link cef.admin.api.CreateRepeatTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRepeatType
		 * @path <API Root>/Payments/RepeatType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRepeatType = (routeParams?: CreateRepeatTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "RepeatType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice payment.
		 * @param {@link cef.admin.api.CreateSalesInvoicePaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoicePayment
		 * @path <API Root>/Payments/SalesInvoicePayment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoicePayment = (routeParams?: CreateSalesInvoicePaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order payment.
		 * @param {@link cef.admin.api.CreateSalesOrderPaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderPayment
		 * @path <API Root>/Payments/SalesOrderPayment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderPayment = (routeParams?: CreateSalesOrderPaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SalesOrderPayment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return payment.
		 * @param {@link cef.admin.api.CreateSalesReturnPaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnPayment
		 * @path <API Root>/Payments/SalesReturnPayment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnPayment = (routeParams?: CreateSalesReturnPaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SalesReturnPayment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new subscription.
		 * @param {@link cef.admin.api.CreateSubscriptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSubscription
		 * @path <API Root>/Payments/Subscription/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSubscription = (routeParams?: CreateSubscriptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Subscription", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new subscription history.
		 * @param {@link cef.admin.api.CreateSubscriptionHistoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSubscriptionHistory
		 * @path <API Root>/Payments/SubscriptionHistory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSubscriptionHistory = (routeParams?: CreateSubscriptionHistoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionHistory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new subscription status.
		 * @param {@link cef.admin.api.CreateSubscriptionStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSubscriptionStatus
		 * @path <API Root>/Payments/SubscriptionStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSubscriptionStatus = (routeParams?: CreateSubscriptionStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new subscription type.
		 * @param {@link cef.admin.api.CreateSubscriptionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSubscriptionType
		 * @path <API Root>/Payments/SubscriptionType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSubscriptionType = (routeParams?: CreateSubscriptionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new subscription type repeat type.
		 * @param {@link cef.admin.api.CreateSubscriptionTypeRepeatTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSubscriptionTypeRepeatType
		 * @path <API Root>/Payments/SubscriptionTypeRepeatType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSubscriptionTypeRepeatType = (routeParams?: CreateSubscriptionTypeRepeatTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to add an entry to the current user's wallet
		 * @param {@link cef.admin.api.CreateUserWalletEntryAsCSRDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserWalletEntryAsCSR
		 * @path <API Root>/Payments/Wallet/User/{UserID}/Entry/Create
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<WalletModel>>}
		 * @public
		 */
		CreateUserWalletEntryAsCSR = (userID: number, routeParams?: CreateUserWalletEntryAsCSRDto) => this.$http<CEFActionResponseT<WalletModel>>({
			url: [this.rootUrl, "Payments", "Wallet", "User", userID, "Entry", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new wallet.
		 * @param {@link cef.admin.api.CreateWalletDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateWallet
		 * @path <API Root>/Payments/Wallet/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateWallet = (routeParams?: CreateWalletDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Wallet", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific membership ad zone access from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMembershipAdZoneAccessByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMembershipAdZoneAccessByID
		 * @path <API Root>/Payments/MembershipAdZoneAccess/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMembershipAdZoneAccessByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccess", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific membership ad zone access by level from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMembershipAdZoneAccessByLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMembershipAdZoneAccessByLevelByID
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevel/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMembershipAdZoneAccessByLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevel", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific membership from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMembershipByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMembershipByID
		 * @path <API Root>/Payments/Membership/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMembershipByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Membership", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific membership level from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMembershipLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMembershipLevelByID
		 * @path <API Root>/Payments/MembershipLevel/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMembershipLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipLevel", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific membership repeat type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMembershipRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMembershipRepeatTypeByID
		 * @path <API Root>/Payments/MembershipRepeatType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMembershipRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipRepeatType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific payment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePaymentByID
		 * @path <API Root>/Payments/Payment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Payment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific payment method from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePaymentMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePaymentMethodByID
		 * @path <API Root>/Payments/PaymentMethod/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePaymentMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentMethod", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific payment status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePaymentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePaymentStatusByID
		 * @path <API Root>/Payments/PaymentStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePaymentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific payment type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePaymentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePaymentTypeByID
		 * @path <API Root>/Payments/PaymentType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePaymentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific repeat type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRepeatTypeByID
		 * @path <API Root>/Payments/RepeatType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "RepeatType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice payment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoicePaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoicePaymentByID
		 * @path <API Root>/Payments/SalesInvoicePayment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoicePaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order payment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderPaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderPaymentByID
		 * @path <API Root>/Payments/SalesOrderPayment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderPaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesOrderPayment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return payment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnPaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnPaymentByID
		 * @path <API Root>/Payments/SalesReturnPayment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnPaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesReturnPayment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific subscription from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSubscriptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSubscriptionByID
		 * @path <API Root>/Payments/Subscription/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSubscriptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Subscription", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific subscription history from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSubscriptionHistoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSubscriptionHistoryByID
		 * @path <API Root>/Payments/SubscriptionHistory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSubscriptionHistoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionHistory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific subscription status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSubscriptionStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSubscriptionStatusByID
		 * @path <API Root>/Payments/SubscriptionStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSubscriptionStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific subscription type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSubscriptionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSubscriptionTypeByID
		 * @path <API Root>/Payments/SubscriptionType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSubscriptionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific subscription type repeat type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSubscriptionTypeRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSubscriptionTypeRepeatTypeByID
		 * @path <API Root>/Payments/SubscriptionTypeRepeatType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSubscriptionTypeRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to deactivate a specific entry in the current user's wallet
		 * @param {@link cef.admin.api.DeactivateUserWalletEntryAsCSRDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserWalletEntryAsCSR
		 * @path <API Root>/Payments/Wallet/User/{UserID}/Entry/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserWalletEntryAsCSR = (userID: number, id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Wallet", "User", userID, "Entry", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific wallet from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateWalletByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateWalletByID
		 * @path <API Root>/Payments/Wallet/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateWalletByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Wallet", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific membership ad zone access from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMembershipAdZoneAccessByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMembershipAdZoneAccessByID
		 * @path <API Root>/Payments/MembershipAdZoneAccess/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMembershipAdZoneAccessByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccess", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific membership ad zone access by level from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMembershipAdZoneAccessByLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMembershipAdZoneAccessByLevelByID
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevel/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMembershipAdZoneAccessByLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevel", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific membership from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMembershipByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMembershipByID
		 * @path <API Root>/Payments/Membership/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMembershipByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Membership", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific membership level from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMembershipLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMembershipLevelByID
		 * @path <API Root>/Payments/MembershipLevel/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMembershipLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipLevel", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific membership repeat type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMembershipRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMembershipRepeatTypeByID
		 * @path <API Root>/Payments/MembershipRepeatType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMembershipRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipRepeatType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific payment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePaymentByID
		 * @path <API Root>/Payments/Payment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Payment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific payment method from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePaymentMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePaymentMethodByID
		 * @path <API Root>/Payments/PaymentMethod/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePaymentMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentMethod", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific payment status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePaymentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePaymentStatusByID
		 * @path <API Root>/Payments/PaymentStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePaymentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific payment type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePaymentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePaymentTypeByID
		 * @path <API Root>/Payments/PaymentType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePaymentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific repeat type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRepeatTypeByID
		 * @path <API Root>/Payments/RepeatType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "RepeatType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice payment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoicePaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoicePaymentByID
		 * @path <API Root>/Payments/SalesInvoicePayment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoicePaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order payment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderPaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderPaymentByID
		 * @path <API Root>/Payments/SalesOrderPayment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderPaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesOrderPayment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return payment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnPaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnPaymentByID
		 * @path <API Root>/Payments/SalesReturnPayment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnPaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesReturnPayment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific subscription from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSubscriptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSubscriptionByID
		 * @path <API Root>/Payments/Subscription/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSubscriptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Subscription", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific subscription history from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSubscriptionHistoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSubscriptionHistoryByID
		 * @path <API Root>/Payments/SubscriptionHistory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSubscriptionHistoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionHistory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific subscription status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSubscriptionStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSubscriptionStatusByID
		 * @path <API Root>/Payments/SubscriptionStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSubscriptionStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific subscription type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSubscriptionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSubscriptionTypeByID
		 * @path <API Root>/Payments/SubscriptionType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSubscriptionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific subscription type repeat type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSubscriptionTypeRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSubscriptionTypeRepeatTypeByID
		 * @path <API Root>/Payments/SubscriptionTypeRepeatType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSubscriptionTypeRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific wallet from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteWalletByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteWalletByID
		 * @path <API Root>/Payments/Wallet/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteWalletByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Wallet", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific membership ad zone access
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipAdZoneAccessByID
		 * @path <API Root>/Payments/MembershipAdZoneAccess/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipAdZoneAccessModel>}
		 * @public
		 */
		GetMembershipAdZoneAccessByID = (id: number) => this.$http<MembershipAdZoneAccessModel>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccess", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific membership ad zone access by level
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipAdZoneAccessByLevelByID
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevel/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipAdZoneAccessByLevelModel>}
		 * @public
		 */
		GetMembershipAdZoneAccessByLevelByID = (id: number) => this.$http<MembershipAdZoneAccessByLevelModel>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevel", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of membership ad zone access by levels
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipAdZoneAccessByLevels
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevels
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipAdZoneAccessByLevelPagedResults>}
		 * @public
		 */
		GetMembershipAdZoneAccessByLevels = (routeParams?: GetMembershipAdZoneAccessByLevelsDto) => this.$http<MembershipAdZoneAccessByLevelPagedResults>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevels"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of membership ad zone accesses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipAdZoneAccesses
		 * @path <API Root>/Payments/MembershipAdZoneAccesses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipAdZoneAccessPagedResults>}
		 * @public
		 */
		GetMembershipAdZoneAccesses = (routeParams?: GetMembershipAdZoneAccessesDto) => this.$http<MembershipAdZoneAccessPagedResults>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccesses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific membership
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipByID
		 * @path <API Root>/Payments/Membership/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipModel>}
		 * @public
		 */
		GetMembershipByID = (id: number) => this.$http<MembershipModel>({
			url: [this.rootUrl, "Payments", "Membership", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific membership level
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipLevelByID
		 * @path <API Root>/Payments/MembershipLevel/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipLevelModel>}
		 * @public
		 */
		GetMembershipLevelByID = (id: number) => this.$http<MembershipLevelModel>({
			url: [this.rootUrl, "Payments", "MembershipLevel", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of membership levels
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipLevels
		 * @path <API Root>/Payments/MembershipLevels
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipLevelPagedResults>}
		 * @public
		 */
		GetMembershipLevels = (routeParams?: GetMembershipLevelsDto) => this.$http<MembershipLevelPagedResults>({
			url: [this.rootUrl, "Payments", "MembershipLevels"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific membership repeat type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipRepeatTypeByID
		 * @path <API Root>/Payments/MembershipRepeatType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipRepeatTypeModel>}
		 * @public
		 */
		GetMembershipRepeatTypeByID = (id: number) => this.$http<MembershipRepeatTypeModel>({
			url: [this.rootUrl, "Payments", "MembershipRepeatType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of membership repeat types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMembershipRepeatTypes
		 * @path <API Root>/Payments/MembershipRepeatTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipRepeatTypePagedResults>}
		 * @public
		 */
		GetMembershipRepeatTypes = (routeParams?: GetMembershipRepeatTypesDto) => this.$http<MembershipRepeatTypePagedResults>({
			url: [this.rootUrl, "Payments", "MembershipRepeatTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of memberships
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMemberships
		 * @path <API Root>/Payments/Memberships
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MembershipPagedResults>}
		 * @public
		 */
		GetMemberships = (routeParams?: GetMembershipsDto) => this.$http<MembershipPagedResults>({
			url: [this.rootUrl, "Payments", "Memberships"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific payment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPaymentByID
		 * @path <API Root>/Payments/Payment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PaymentModel>}
		 * @public
		 */
		GetPaymentByID = (id: number) => this.$http<PaymentModel>({
			url: [this.rootUrl, "Payments", "Payment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific payment method
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPaymentMethodByID
		 * @path <API Root>/Payments/PaymentMethod/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PaymentMethodModel>}
		 * @public
		 */
		GetPaymentMethodByID = (id: number) => this.$http<PaymentMethodModel>({
			url: [this.rootUrl, "Payments", "PaymentMethod", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of payment methods
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPaymentMethods
		 * @path <API Root>/Payments/PaymentMethods
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PaymentMethodPagedResults>}
		 * @public
		 */
		GetPaymentMethods = (routeParams?: GetPaymentMethodsDto) => this.$http<PaymentMethodPagedResults>({
			url: [this.rootUrl, "Payments", "PaymentMethods"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of payments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPayments
		 * @path <API Root>/Payments/Payments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PaymentPagedResults>}
		 * @public
		 */
		GetPayments = (routeParams?: GetPaymentsDto) => this.$http<PaymentPagedResults>({
			url: [this.rootUrl, "Payments", "Payments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific payment status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPaymentStatusByID
		 * @path <API Root>/Payments/PaymentStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetPaymentStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Payments", "PaymentStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of payment statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPaymentStatuses
		 * @path <API Root>/Payments/PaymentStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PaymentStatusPagedResults>}
		 * @public
		 */
		GetPaymentStatuses = (routeParams?: GetPaymentStatusesDto) => this.$http<PaymentStatusPagedResults>({
			url: [this.rootUrl, "Payments", "PaymentStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific payment type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPaymentTypeByID
		 * @path <API Root>/Payments/PaymentType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetPaymentTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Payments", "PaymentType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of payment types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPaymentTypes
		 * @path <API Root>/Payments/PaymentTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PaymentTypePagedResults>}
		 * @public
		 */
		GetPaymentTypes = (routeParams?: GetPaymentTypesDto) => this.$http<PaymentTypePagedResults>({
			url: [this.rootUrl, "Payments", "PaymentTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific repeat type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRepeatTypeByID
		 * @path <API Root>/Payments/RepeatType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RepeatTypeModel>}
		 * @public
		 */
		GetRepeatTypeByID = (id: number) => this.$http<RepeatTypeModel>({
			url: [this.rootUrl, "Payments", "RepeatType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of repeat types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRepeatTypes
		 * @path <API Root>/Payments/RepeatTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RepeatTypePagedResults>}
		 * @public
		 */
		GetRepeatTypes = (routeParams?: GetRepeatTypesDto) => this.$http<RepeatTypePagedResults>({
			url: [this.rootUrl, "Payments", "RepeatTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice payment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoicePaymentByID
		 * @path <API Root>/Payments/SalesInvoicePayment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoicePaymentModel>}
		 * @public
		 */
		GetSalesInvoicePaymentByID = (id: number) => this.$http<SalesInvoicePaymentModel>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice payments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoicePayments
		 * @path <API Root>/Payments/SalesInvoicePayments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoicePaymentPagedResults>}
		 * @public
		 */
		GetSalesInvoicePayments = (routeParams?: GetSalesInvoicePaymentsDto) => this.$http<SalesInvoicePaymentPagedResults>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order payment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderPaymentByID
		 * @path <API Root>/Payments/SalesOrderPayment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderPaymentModel>}
		 * @public
		 */
		GetSalesOrderPaymentByID = (id: number) => this.$http<SalesOrderPaymentModel>({
			url: [this.rootUrl, "Payments", "SalesOrderPayment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order payments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderPayments
		 * @path <API Root>/Payments/SalesOrderPayments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderPaymentPagedResults>}
		 * @public
		 */
		GetSalesOrderPayments = (routeParams?: GetSalesOrderPaymentsDto) => this.$http<SalesOrderPaymentPagedResults>({
			url: [this.rootUrl, "Payments", "SalesOrderPayments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return payment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnPaymentByID
		 * @path <API Root>/Payments/SalesReturnPayment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnPaymentModel>}
		 * @public
		 */
		GetSalesReturnPaymentByID = (id: number) => this.$http<SalesReturnPaymentModel>({
			url: [this.rootUrl, "Payments", "SalesReturnPayment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return payments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnPayments
		 * @path <API Root>/Payments/SalesReturnPayments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnPaymentPagedResults>}
		 * @public
		 */
		GetSalesReturnPayments = (routeParams?: GetSalesReturnPaymentsDto) => this.$http<SalesReturnPaymentPagedResults>({
			url: [this.rootUrl, "Payments", "SalesReturnPayments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific subscription
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionByID
		 * @path <API Root>/Payments/Subscription/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionModel>}
		 * @public
		 */
		GetSubscriptionByID = (id: number) => this.$http<SubscriptionModel>({
			url: [this.rootUrl, "Payments", "Subscription", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of subscription histories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionHistories
		 * @path <API Root>/Payments/SubscriptionHistories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionHistoryPagedResults>}
		 * @public
		 */
		GetSubscriptionHistories = (routeParams?: GetSubscriptionHistoriesDto) => this.$http<SubscriptionHistoryPagedResults>({
			url: [this.rootUrl, "Payments", "SubscriptionHistories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific subscription history
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionHistoryByID
		 * @path <API Root>/Payments/SubscriptionHistory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionHistoryModel>}
		 * @public
		 */
		GetSubscriptionHistoryByID = (id: number) => this.$http<SubscriptionHistoryModel>({
			url: [this.rootUrl, "Payments", "SubscriptionHistory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of subscriptions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptions
		 * @path <API Root>/Payments/Subscriptions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionPagedResults>}
		 * @public
		 */
		GetSubscriptions = (routeParams?: GetSubscriptionsDto) => this.$http<SubscriptionPagedResults>({
			url: [this.rootUrl, "Payments", "Subscriptions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific subscription status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionStatusByID
		 * @path <API Root>/Payments/SubscriptionStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSubscriptionStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Payments", "SubscriptionStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of subscription statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionStatuses
		 * @path <API Root>/Payments/SubscriptionStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionStatusPagedResults>}
		 * @public
		 */
		GetSubscriptionStatuses = (routeParams?: GetSubscriptionStatusesDto) => this.$http<SubscriptionStatusPagedResults>({
			url: [this.rootUrl, "Payments", "SubscriptionStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific subscription type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionTypeByID
		 * @path <API Root>/Payments/SubscriptionType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionTypeModel>}
		 * @public
		 */
		GetSubscriptionTypeByID = (id: number) => this.$http<SubscriptionTypeModel>({
			url: [this.rootUrl, "Payments", "SubscriptionType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific subscription type repeat type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionTypeRepeatTypeByID
		 * @path <API Root>/Payments/SubscriptionTypeRepeatType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionTypeRepeatTypeModel>}
		 * @public
		 */
		GetSubscriptionTypeRepeatTypeByID = (id: number) => this.$http<SubscriptionTypeRepeatTypeModel>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of subscription type repeat types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionTypeRepeatTypes
		 * @path <API Root>/Payments/SubscriptionTypeRepeatTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionTypeRepeatTypePagedResults>}
		 * @public
		 */
		GetSubscriptionTypeRepeatTypes = (routeParams?: GetSubscriptionTypeRepeatTypesDto) => this.$http<SubscriptionTypeRepeatTypePagedResults>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of subscription types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSubscriptionTypes
		 * @path <API Root>/Payments/SubscriptionTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SubscriptionTypePagedResults>}
		 * @public
		 */
		GetSubscriptionTypes = (routeParams?: GetSubscriptionTypesDto) => this.$http<SubscriptionTypePagedResults>({
			url: [this.rootUrl, "Payments", "SubscriptionTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the wallet entry store for a specific user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserWallet
		 * @path <API Root>/Payments/Wallet/User/ID/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<WalletModel>>>}
		 * @public
		 */
		GetUserWallet = (id: number) => this.$http<CEFActionResponseT<Array<WalletModel>>>({
			url: [this.rootUrl, "Payments", "Wallet", "User", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the wallet for the current user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserWalletAsCSR
		 * @path <API Root>/Payments/Wallet/User/{UserID}/List
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<WalletModel>>>}
		 * @public
		 */
		GetUserWalletAsCSR = (userID: number) => this.$http<CEFActionResponseT<Array<WalletModel>>>({
			url: [this.rootUrl, "Payments", "Wallet", "User", userID, "List"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get an entry from the current user's wallet
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserWalletEntryByIDAsCSR
		 * @path <API Root>/Payments/Wallet/User/{UserID}/Entry/ByID/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<WalletModel>>}
		 * @public
		 */
		GetUserWalletEntryByIDAsCSR = (userID: number, id: number) => this.$http<CEFActionResponseT<WalletModel>>({
			url: [this.rootUrl, "Payments", "Wallet", "User", userID, "Entry", "ByID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific wallet
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetWalletByID
		 * @path <API Root>/Payments/Wallet/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<WalletModel>}
		 * @public
		 */
		GetWalletByID = (id: number) => this.$http<WalletModel>({
			url: [this.rootUrl, "Payments", "Wallet", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of wallets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetWallets
		 * @path <API Root>/Payments/Wallets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<WalletPagedResults>}
		 * @public
		 */
		GetWallets = (routeParams?: GetWalletsDto) => this.$http<WalletPagedResults>({
			url: [this.rootUrl, "Payments", "Wallets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific membership ad zone access from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMembershipAdZoneAccessByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMembershipAdZoneAccessByID
		 * @path <API Root>/Payments/MembershipAdZoneAccess/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMembershipAdZoneAccessByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccess", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific membership ad zone access by level from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMembershipAdZoneAccessByLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMembershipAdZoneAccessByLevelByID
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevel/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMembershipAdZoneAccessByLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevel", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific membership from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMembershipByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMembershipByID
		 * @path <API Root>/Payments/Membership/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMembershipByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Membership", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific membership level from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMembershipLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMembershipLevelByID
		 * @path <API Root>/Payments/MembershipLevel/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMembershipLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipLevel", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific membership repeat type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMembershipRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMembershipRepeatTypeByID
		 * @path <API Root>/Payments/MembershipRepeatType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMembershipRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "MembershipRepeatType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific payment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePaymentByID
		 * @path <API Root>/Payments/Payment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Payment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific payment method from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePaymentMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePaymentMethodByID
		 * @path <API Root>/Payments/PaymentMethod/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePaymentMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentMethod", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific payment status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePaymentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePaymentStatusByID
		 * @path <API Root>/Payments/PaymentStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePaymentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific payment type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePaymentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePaymentTypeByID
		 * @path <API Root>/Payments/PaymentType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePaymentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "PaymentType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific repeat type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRepeatTypeByID
		 * @path <API Root>/Payments/RepeatType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "RepeatType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice payment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoicePaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoicePaymentByID
		 * @path <API Root>/Payments/SalesInvoicePayment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoicePaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order payment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderPaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderPaymentByID
		 * @path <API Root>/Payments/SalesOrderPayment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderPaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesOrderPayment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return payment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnPaymentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnPaymentByID
		 * @path <API Root>/Payments/SalesReturnPayment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnPaymentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SalesReturnPayment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific subscription from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSubscriptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSubscriptionByID
		 * @path <API Root>/Payments/Subscription/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSubscriptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Subscription", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific subscription history from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSubscriptionHistoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSubscriptionHistoryByID
		 * @path <API Root>/Payments/SubscriptionHistory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSubscriptionHistoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionHistory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific subscription status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSubscriptionStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSubscriptionStatusByID
		 * @path <API Root>/Payments/SubscriptionStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSubscriptionStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific subscription type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSubscriptionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSubscriptionTypeByID
		 * @path <API Root>/Payments/SubscriptionType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSubscriptionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific subscription type repeat type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSubscriptionTypeRepeatTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSubscriptionTypeRepeatTypeByID
		 * @path <API Root>/Payments/SubscriptionTypeRepeatType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSubscriptionTypeRepeatTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific wallet from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateWalletByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateWalletByID
		 * @path <API Root>/Payments/Wallet/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateWalletByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Payments", "Wallet", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing membership.
		 * @param {@link cef.admin.api.UpdateMembershipDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMembership
		 * @path <API Root>/Payments/Membership/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMembership = (routeParams?: UpdateMembershipDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Membership", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing membership ad zone access.
		 * @param {@link cef.admin.api.UpdateMembershipAdZoneAccessDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMembershipAdZoneAccess
		 * @path <API Root>/Payments/MembershipAdZoneAccess/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMembershipAdZoneAccess = (routeParams?: UpdateMembershipAdZoneAccessDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccess", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing membership ad zone access by level.
		 * @param {@link cef.admin.api.UpdateMembershipAdZoneAccessByLevelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMembershipAdZoneAccessByLevel
		 * @path <API Root>/Payments/MembershipAdZoneAccessByLevel/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMembershipAdZoneAccessByLevel = (routeParams?: UpdateMembershipAdZoneAccessByLevelDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipAdZoneAccessByLevel", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing membership level.
		 * @param {@link cef.admin.api.UpdateMembershipLevelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMembershipLevel
		 * @path <API Root>/Payments/MembershipLevel/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMembershipLevel = (routeParams?: UpdateMembershipLevelDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipLevel", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing membership repeat type.
		 * @param {@link cef.admin.api.UpdateMembershipRepeatTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMembershipRepeatType
		 * @path <API Root>/Payments/MembershipRepeatType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMembershipRepeatType = (routeParams?: UpdateMembershipRepeatTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "MembershipRepeatType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing payment.
		 * @param {@link cef.admin.api.UpdatePaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePayment
		 * @path <API Root>/Payments/Payment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePayment = (routeParams?: UpdatePaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Payment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing payment method.
		 * @param {@link cef.admin.api.UpdatePaymentMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePaymentMethod
		 * @path <API Root>/Payments/PaymentMethod/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePaymentMethod = (routeParams?: UpdatePaymentMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "PaymentMethod", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing payment status.
		 * @param {@link cef.admin.api.UpdatePaymentStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePaymentStatus
		 * @path <API Root>/Payments/PaymentStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePaymentStatus = (routeParams?: UpdatePaymentStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "PaymentStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing payment type.
		 * @param {@link cef.admin.api.UpdatePaymentTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePaymentType
		 * @path <API Root>/Payments/PaymentType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePaymentType = (routeParams?: UpdatePaymentTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "PaymentType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing repeat type.
		 * @param {@link cef.admin.api.UpdateRepeatTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRepeatType
		 * @path <API Root>/Payments/RepeatType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRepeatType = (routeParams?: UpdateRepeatTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "RepeatType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice payment.
		 * @param {@link cef.admin.api.UpdateSalesInvoicePaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoicePayment
		 * @path <API Root>/Payments/SalesInvoicePayment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoicePayment = (routeParams?: UpdateSalesInvoicePaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SalesInvoicePayment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order payment.
		 * @param {@link cef.admin.api.UpdateSalesOrderPaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderPayment
		 * @path <API Root>/Payments/SalesOrderPayment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderPayment = (routeParams?: UpdateSalesOrderPaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SalesOrderPayment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return payment.
		 * @param {@link cef.admin.api.UpdateSalesReturnPaymentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnPayment
		 * @path <API Root>/Payments/SalesReturnPayment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnPayment = (routeParams?: UpdateSalesReturnPaymentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SalesReturnPayment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing subscription.
		 * @param {@link cef.admin.api.UpdateSubscriptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSubscription
		 * @path <API Root>/Payments/Subscription/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSubscription = (routeParams?: UpdateSubscriptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Subscription", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing subscription history.
		 * @param {@link cef.admin.api.UpdateSubscriptionHistoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSubscriptionHistory
		 * @path <API Root>/Payments/SubscriptionHistory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSubscriptionHistory = (routeParams?: UpdateSubscriptionHistoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionHistory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing subscription status.
		 * @param {@link cef.admin.api.UpdateSubscriptionStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSubscriptionStatus
		 * @path <API Root>/Payments/SubscriptionStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSubscriptionStatus = (routeParams?: UpdateSubscriptionStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing subscription type.
		 * @param {@link cef.admin.api.UpdateSubscriptionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSubscriptionType
		 * @path <API Root>/Payments/SubscriptionType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSubscriptionType = (routeParams?: UpdateSubscriptionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing subscription type repeat type.
		 * @param {@link cef.admin.api.UpdateSubscriptionTypeRepeatTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSubscriptionTypeRepeatType
		 * @path <API Root>/Payments/SubscriptionTypeRepeatType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSubscriptionTypeRepeatType = (routeParams?: UpdateSubscriptionTypeRepeatTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "SubscriptionTypeRepeatType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an entry in the current user's wallet
		 * @param {@link cef.admin.api.UpdateUserWalletEntryAsCSRDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserWalletEntryAsCSR
		 * @path <API Root>/Payments/Wallet/User/{UserID}/Entry/Update
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponseT<WalletModel>>}
		 * @public
		 */
		UpdateUserWalletEntryAsCSR = (userID: number, routeParams?: UpdateUserWalletEntryAsCSRDto) => this.$http<CEFActionResponseT<WalletModel>>({
			url: [this.rootUrl, "Payments", "Wallet", "User", userID, "Entry", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing wallet.
		 * @param {@link cef.admin.api.UpdateWalletDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateWallet
		 * @path <API Root>/Payments/Wallet/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateWallet = (routeParams?: UpdateWalletDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Payments", "Wallet", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
