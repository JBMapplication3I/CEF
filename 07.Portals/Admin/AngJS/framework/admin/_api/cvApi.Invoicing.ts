/**
 * @file framework/admin/_api/cvApi.Invoicing.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStateExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStatusExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceTypeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to create a new sales invoice.
	 * @see {@link SalesInvoiceModel}
	 * @public
	 */
	export interface CreateSalesInvoiceDto extends SalesInvoiceModel {
	}
	/**
	 * Use to create a new sales invoice contact.
	 * @see {@link SalesInvoiceContactModel}
	 * @public
	 */
	export interface CreateSalesInvoiceContactDto extends SalesInvoiceContactModel {
	}
	/**
	 * Use to create a new sales invoice event.
	 * @see {@link SalesInvoiceEventModel}
	 * @public
	 */
	export interface CreateSalesInvoiceEventDto extends SalesInvoiceEventModel {
	}
	/**
	 * Use to create a new sales invoice event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesInvoiceEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new sales invoice file.
	 * @see {@link SalesInvoiceFileModel}
	 * @public
	 */
	export interface CreateSalesInvoiceFileDto extends SalesInvoiceFileModel {
	}
	/**
	 * Use to create a new sales invoice item.
	 * @see {@link SalesItemBaseModel<AppliedSalesInvoiceItemDiscountModel>}
	 * @public
	 */
	export interface CreateSalesInvoiceItemDto extends SalesItemBaseModel<AppliedSalesInvoiceItemDiscountModel> {
	}
	/**
	 * Use to create a new sales invoice item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface CreateSalesInvoiceItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to create a new sales invoice state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface CreateSalesInvoiceStateDto extends StateModel {
	}
	/**
	 * Use to create a new sales invoice status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateSalesInvoiceStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new sales invoice type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesInvoiceTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new sales order sales invoice.
	 * @see {@link SalesOrderSalesInvoiceModel}
	 * @public
	 */
	export interface CreateSalesOrderSalesInvoiceDto extends SalesOrderSalesInvoiceModel {
	}
	/**
	 * Use to get a list of sales invoice contacts
	 * @see {@link SalesInvoiceContactSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceContactsDto extends SalesInvoiceContactSearchModel {
	}
	/**
	 * Use to get a list of sales invoice events
	 * @see {@link SalesInvoiceEventSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceEventsDto extends SalesInvoiceEventSearchModel {
	}
	/**
	 * Use to get a list of sales invoice event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of sales invoice files
	 * @see {@link SalesInvoiceFileSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceFilesDto extends SalesInvoiceFileSearchModel {
	}
	/**
	 * Use to get a list of sales invoice items
	 * @see {@link SalesItemBaseSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceItemsDto extends SalesItemBaseSearchModel {
	}
	/**
	 * Use to get a list of sales invoice item targets
	 * @see {@link SalesItemTargetBaseSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceItemTargetsDto extends SalesItemTargetBaseSearchModel {
	}
	/**
	 * Use to get a list of sales invoices
	 * @see {@link SalesInvoiceSearchModel}
	 * @public
	 */
	export interface GetSalesInvoicesDto extends SalesInvoiceSearchModel {
	}
	/**
	 * Use to get a list of sales invoice states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of sales invoice statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of sales invoice types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of sales order sales invoices
	 * @see {@link SalesOrderSalesInvoiceSearchModel}
	 * @public
	 */
	export interface GetSalesOrderSalesInvoicesDto extends SalesOrderSalesInvoiceSearchModel {
	}
	/**
	 * Use to update an existing sales invoice.
	 * @see {@link SalesInvoiceModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceDto extends SalesInvoiceModel {
	}
	/**
	 * Use to update an existing sales invoice contact.
	 * @see {@link SalesInvoiceContactModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceContactDto extends SalesInvoiceContactModel {
	}
	/**
	 * Use to update an existing sales invoice event.
	 * @see {@link SalesInvoiceEventModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceEventDto extends SalesInvoiceEventModel {
	}
	/**
	 * Use to update an existing sales invoice event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing sales invoice file.
	 * @see {@link SalesInvoiceFileModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceFileDto extends SalesInvoiceFileModel {
	}
	/**
	 * Use to update an existing sales invoice item.
	 * @see {@link SalesItemBaseModel<AppliedSalesInvoiceItemDiscountModel>}
	 * @public
	 */
	export interface UpdateSalesInvoiceItemDto extends SalesItemBaseModel<AppliedSalesInvoiceItemDiscountModel> {
	}
	/**
	 * Use to update an existing sales invoice item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to update an existing sales invoice state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceStateDto extends StateModel {
	}
	/**
	 * Use to update an existing sales invoice status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing sales invoice type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesInvoiceTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing sales order sales invoice.
	 * @see {@link SalesOrderSalesInvoiceModel}
	 * @public
	 */
	export interface UpdateSalesOrderSalesInvoiceDto extends SalesOrderSalesInvoiceModel {
	}

	export class Invoicing extends ServiceStackRoute {
		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByDisplayName
		 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStateExistsByDisplayName = (routeParams?: CheckSalesInvoiceStateExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByKey
		 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStateExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByName
		 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStateExistsByName = (routeParams?: CheckSalesInvoiceStateExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByDisplayName
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStatusExistsByDisplayName = (routeParams?: CheckSalesInvoiceStatusExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByKey
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStatusExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByName
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStatusExistsByName = (routeParams?: CheckSalesInvoiceStatusExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByDisplayName
		 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceTypeExistsByDisplayName = (routeParams?: CheckSalesInvoiceTypeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByKey
		 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceTypeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByName
		 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceTypeExistsByName = (routeParams?: CheckSalesInvoiceTypeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all sales invoice calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceCache
		 * @path <API Root>/Invoicing/SalesInvoice/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice contact calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceContactCache
		 * @path <API Root>/Invoicing/SalesInvoiceContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice event calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceEventCache
		 * @path <API Root>/Invoicing/SalesInvoiceEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice event type calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceEventTypeCache
		 * @path <API Root>/Invoicing/SalesInvoiceEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice file calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceFileCache
		 * @path <API Root>/Invoicing/SalesInvoiceFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice item calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceItemCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceItemCache
		 * @path <API Root>/Invoicing/SalesInvoiceItem/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceItemCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItem", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice item target calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceItemTargetCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceItemTargetCache
		 * @path <API Root>/Invoicing/SalesInvoiceItemTarget/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceItemTargetCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTarget", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice state calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceStateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceStateCache
		 * @path <API Root>/Invoicing/SalesInvoiceState/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceStateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice status calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceStatusCache
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales invoice type calls.
		 * @param {@link cef.admin.api.ClearSalesInvoiceTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesInvoiceTypeCache
		 * @path <API Root>/Invoicing/SalesInvoiceType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesInvoiceTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order sales invoice calls.
		 * @param {@link cef.admin.api.ClearSalesOrderSalesInvoiceCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderSalesInvoiceCache
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoice/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderSalesInvoiceCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoice", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new sales invoice.
		 * @param {@link cef.admin.api.CreateSalesInvoiceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoice
		 * @path <API Root>/Invoicing/SalesInvoice/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoice = (routeParams?: CreateSalesInvoiceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice contact.
		 * @param {@link cef.admin.api.CreateSalesInvoiceContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceContact
		 * @path <API Root>/Invoicing/SalesInvoiceContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceContact = (routeParams?: CreateSalesInvoiceContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice event.
		 * @param {@link cef.admin.api.CreateSalesInvoiceEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceEvent
		 * @path <API Root>/Invoicing/SalesInvoiceEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceEvent = (routeParams?: CreateSalesInvoiceEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice event type.
		 * @param {@link cef.admin.api.CreateSalesInvoiceEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceEventType
		 * @path <API Root>/Invoicing/SalesInvoiceEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceEventType = (routeParams?: CreateSalesInvoiceEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice file.
		 * @param {@link cef.admin.api.CreateSalesInvoiceFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceFile
		 * @path <API Root>/Invoicing/SalesInvoiceFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceFile = (routeParams?: CreateSalesInvoiceFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice item.
		 * @param {@link cef.admin.api.CreateSalesInvoiceItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceItem
		 * @path <API Root>/Invoicing/SalesInvoiceItem/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceItem = (routeParams?: CreateSalesInvoiceItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItem", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice item target.
		 * @param {@link cef.admin.api.CreateSalesInvoiceItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceItemTarget
		 * @path <API Root>/Invoicing/SalesInvoiceItemTarget/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceItemTarget = (routeParams?: CreateSalesInvoiceItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTarget", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice state.
		 * @param {@link cef.admin.api.CreateSalesInvoiceStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceState
		 * @path <API Root>/Invoicing/SalesInvoiceState/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceState = (routeParams?: CreateSalesInvoiceStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice status.
		 * @param {@link cef.admin.api.CreateSalesInvoiceStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceStatus
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceStatus = (routeParams?: CreateSalesInvoiceStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales invoice type.
		 * @param {@link cef.admin.api.CreateSalesInvoiceTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesInvoiceType
		 * @path <API Root>/Invoicing/SalesInvoiceType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesInvoiceType = (routeParams?: CreateSalesInvoiceTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order sales invoice.
		 * @param {@link cef.admin.api.CreateSalesOrderSalesInvoiceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderSalesInvoice
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoice/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderSalesInvoice = (routeParams?: CreateSalesOrderSalesInvoiceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoice", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific sales invoice from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesInvoice/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceContactByID
		 * @path <API Root>/Invoicing/SalesInvoiceContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceEventByID
		 * @path <API Root>/Invoicing/SalesInvoiceEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceEventTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceFileByID
		 * @path <API Root>/Invoicing/SalesInvoiceFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice item from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceItemByID
		 * @path <API Root>/Invoicing/SalesInvoiceItem/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItem", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice item target from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceItemTargetByID
		 * @path <API Root>/Invoicing/SalesInvoiceItemTarget/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTarget", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice state from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceStateByID
		 * @path <API Root>/Invoicing/SalesInvoiceState/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceStatusByID
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales invoice type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesInvoiceTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesInvoiceTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesInvoiceTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order sales invoice from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderSalesInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoice/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderSalesInvoiceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoice", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific sales invoice from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesInvoice/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceContactByID
		 * @path <API Root>/Invoicing/SalesInvoiceContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceEventByID
		 * @path <API Root>/Invoicing/SalesInvoiceEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceEventTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceFileByID
		 * @path <API Root>/Invoicing/SalesInvoiceFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice item from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceItemByID
		 * @path <API Root>/Invoicing/SalesInvoiceItem/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItem", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice item target from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceItemTargetByID
		 * @path <API Root>/Invoicing/SalesInvoiceItemTarget/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTarget", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice state from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceStateByID
		 * @path <API Root>/Invoicing/SalesInvoiceState/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceStatusByID
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales invoice type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesInvoiceTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesInvoiceTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesInvoiceTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order sales invoice from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderSalesInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoice/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderSalesInvoiceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoice", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific sales invoice
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesInvoice/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceModel>}
		 * @public
		 */
		GetSalesInvoiceByID = (id: number) => this.$http<SalesInvoiceModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sales invoice contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceContactByID
		 * @path <API Root>/Invoicing/SalesInvoiceContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceContactModel>}
		 * @public
		 */
		GetSalesInvoiceContactByID = (id: number) => this.$http<SalesInvoiceContactModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceContacts
		 * @path <API Root>/Invoicing/SalesInvoiceContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceContactPagedResults>}
		 * @public
		 */
		GetSalesInvoiceContacts = (routeParams?: GetSalesInvoiceContactsDto) => this.$http<SalesInvoiceContactPagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceEventByID
		 * @path <API Root>/Invoicing/SalesInvoiceEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceEventModel>}
		 * @public
		 */
		GetSalesInvoiceEventByID = (id: number) => this.$http<SalesInvoiceEventModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceEvents
		 * @path <API Root>/Invoicing/SalesInvoiceEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceEventPagedResults>}
		 * @public
		 */
		GetSalesInvoiceEvents = (routeParams?: GetSalesInvoiceEventsDto) => this.$http<SalesInvoiceEventPagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceEventTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesInvoiceEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceEventTypes
		 * @path <API Root>/Invoicing/SalesInvoiceEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceEventTypePagedResults>}
		 * @public
		 */
		GetSalesInvoiceEventTypes = (routeParams?: GetSalesInvoiceEventTypesDto) => this.$http<SalesInvoiceEventTypePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceFileByID
		 * @path <API Root>/Invoicing/SalesInvoiceFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceFileModel>}
		 * @public
		 */
		GetSalesInvoiceFileByID = (id: number) => this.$http<SalesInvoiceFileModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceFiles
		 * @path <API Root>/Invoicing/SalesInvoiceFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceFilePagedResults>}
		 * @public
		 */
		GetSalesInvoiceFiles = (routeParams?: GetSalesInvoiceFilesDto) => this.$http<SalesInvoiceFilePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice item
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceItemByID
		 * @path <API Root>/Invoicing/SalesInvoiceItem/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedSalesInvoiceItemDiscountModel>>}
		 * @public
		 */
		GetSalesInvoiceItemByID = (id: number) => this.$http<SalesItemBaseModel<AppliedSalesInvoiceItemDiscountModel>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItem", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice items
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceItems
		 * @path <API Root>/Invoicing/SalesInvoiceItems
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceItemPagedResults>}
		 * @public
		 */
		GetSalesInvoiceItems = (routeParams?: GetSalesInvoiceItemsDto) => this.$http<SalesInvoiceItemPagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItems"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice item target
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceItemTargetByID
		 * @path <API Root>/Invoicing/SalesInvoiceItemTarget/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetBaseModel>}
		 * @public
		 */
		GetSalesInvoiceItemTargetByID = (id: number) => this.$http<SalesItemTargetBaseModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTarget", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice item targets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceItemTargets
		 * @path <API Root>/Invoicing/SalesInvoiceItemTargets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceItemTargetPagedResults>}
		 * @public
		 */
		GetSalesInvoiceItemTargets = (routeParams?: GetSalesInvoiceItemTargetsDto) => this.$http<SalesInvoiceItemTargetPagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTargets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of sales invoices
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoices
		 * @path <API Root>/Invoicing/SalesInvoices
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoicePagedResults>}
		 * @public
		 */
		GetSalesInvoices = (routeParams?: GetSalesInvoicesDto) => this.$http<SalesInvoicePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoices"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStateByID
		 * @path <API Root>/Invoicing/SalesInvoiceState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetSalesInvoiceStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStates
		 * @path <API Root>/Invoicing/SalesInvoiceStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceStatePagedResults>}
		 * @public
		 */
		GetSalesInvoiceStates = (routeParams?: GetSalesInvoiceStatesDto) => this.$http<SalesInvoiceStatePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStatusByID
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSalesInvoiceStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStatuses
		 * @path <API Root>/Invoicing/SalesInvoiceStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceStatusPagedResults>}
		 * @public
		 */
		GetSalesInvoiceStatuses = (routeParams?: GetSalesInvoiceStatusesDto) => this.$http<SalesInvoiceStatusPagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesInvoiceTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceTypes
		 * @path <API Root>/Invoicing/SalesInvoiceTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceTypePagedResults>}
		 * @public
		 */
		GetSalesInvoiceTypes = (routeParams?: GetSalesInvoiceTypesDto) => this.$http<SalesInvoiceTypePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order sales invoice
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoice/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderSalesInvoiceModel>}
		 * @public
		 */
		GetSalesOrderSalesInvoiceByID = (id: number) => this.$http<SalesOrderSalesInvoiceModel>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoice", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order sales invoices
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderSalesInvoices
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoices
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderSalesInvoicePagedResults>}
		 * @public
		 */
		GetSalesOrderSalesInvoices = (routeParams?: GetSalesOrderSalesInvoicesDto) => this.$http<SalesOrderSalesInvoicePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoices"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific sales invoice from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesInvoice/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceContactByID
		 * @path <API Root>/Invoicing/SalesInvoiceContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceEventByID
		 * @path <API Root>/Invoicing/SalesInvoiceEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceEventTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceFileByID
		 * @path <API Root>/Invoicing/SalesInvoiceFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice item from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceItemByID
		 * @path <API Root>/Invoicing/SalesInvoiceItem/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItem", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice item target from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceItemTargetByID
		 * @path <API Root>/Invoicing/SalesInvoiceItemTarget/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTarget", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice state from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceStateByID
		 * @path <API Root>/Invoicing/SalesInvoiceState/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceStatusByID
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales invoice type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesInvoiceTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesInvoiceTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesInvoiceTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order sales invoice from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderSalesInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoice/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderSalesInvoiceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoice", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing sales invoice.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoice
		 * @path <API Root>/Invoicing/SalesInvoice/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoice = (routeParams?: UpdateSalesInvoiceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice contact.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceContact
		 * @path <API Root>/Invoicing/SalesInvoiceContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceContact = (routeParams?: UpdateSalesInvoiceContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice event.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceEvent
		 * @path <API Root>/Invoicing/SalesInvoiceEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceEvent = (routeParams?: UpdateSalesInvoiceEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice event type.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceEventType
		 * @path <API Root>/Invoicing/SalesInvoiceEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceEventType = (routeParams?: UpdateSalesInvoiceEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice file.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceFile
		 * @path <API Root>/Invoicing/SalesInvoiceFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceFile = (routeParams?: UpdateSalesInvoiceFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice item.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceItem
		 * @path <API Root>/Invoicing/SalesInvoiceItem/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceItem = (routeParams?: UpdateSalesInvoiceItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItem", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice item target.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceItemTarget
		 * @path <API Root>/Invoicing/SalesInvoiceItemTarget/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceItemTarget = (routeParams?: UpdateSalesInvoiceItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceItemTarget", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice state.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceState
		 * @path <API Root>/Invoicing/SalesInvoiceState/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceState = (routeParams?: UpdateSalesInvoiceStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice status.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceStatus
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceStatus = (routeParams?: UpdateSalesInvoiceStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales invoice type.
		 * @param {@link cef.admin.api.UpdateSalesInvoiceTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesInvoiceType
		 * @path <API Root>/Invoicing/SalesInvoiceType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesInvoiceType = (routeParams?: UpdateSalesInvoiceTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order sales invoice.
		 * @param {@link cef.admin.api.UpdateSalesOrderSalesInvoiceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderSalesInvoice
		 * @path <API Root>/Invoicing/SalesOrderSalesInvoice/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderSalesInvoice = (routeParams?: UpdateSalesOrderSalesInvoiceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Invoicing", "SalesOrderSalesInvoice", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
