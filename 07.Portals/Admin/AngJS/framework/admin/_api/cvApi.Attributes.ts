/**
 * @file framework/admin/_api/cvApi.Attributes.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new attribute group.
	 * @see {@link AttributeGroupModel}
	 * @public
	 */
	export interface CreateAttributeGroupDto extends AttributeGroupModel {
	}
	/**
	 * Use to create a new attribute tab.
	 * @see {@link AttributeTabModel}
	 * @public
	 */
	export interface CreateAttributeTabDto extends AttributeTabModel {
	}
	/**
	 * Use to create a new attribute type.
	 * @see {@link AttributeTypeModel}
	 * @public
	 */
	export interface CreateAttributeTypeDto extends AttributeTypeModel {
	}
	/**
	 * Use to create a new general attribute.
	 * @see {@link GeneralAttributeModel}
	 * @public
	 */
	export interface CreateGeneralAttributeDto extends GeneralAttributeModel {
	}
	/**
	 * Use to create a new general attribute predefined option.
	 * @see {@link GeneralAttributePredefinedOptionModel}
	 * @public
	 */
	export interface CreateGeneralAttributePredefinedOptionDto extends GeneralAttributePredefinedOptionModel {
	}
	/**
	 * Use to get a list of attribute groups
	 * @see {@link AttributeGroupSearchModel}
	 * @public
	 */
	export interface GetAttributeGroupsDto extends AttributeGroupSearchModel {
	}
	/**
	 * Use to get a list of attribute tabs
	 * @see {@link AttributeTabSearchModel}
	 * @public
	 */
	export interface GetAttributeTabsDto extends AttributeTabSearchModel {
	}
	/**
	 * Use to get a list of attribute types
	 * @see {@link AttributeTypeSearchModel}
	 * @public
	 */
	export interface GetAttributeTypesDto extends AttributeTypeSearchModel {
	}
	/**
	 * Use to get a list of general attribute predefined options
	 * @see {@link GeneralAttributePredefinedOptionSearchModel}
	 * @public
	 */
	export interface GetGeneralAttributePredefinedOptionsDto extends GeneralAttributePredefinedOptionSearchModel {
	}
	/**
	 * Use to get a list of general attributes
	 * @see {@link GeneralAttributeSearchModel}
	 * @public
	 */
	export interface GetGeneralAttributesDto extends GeneralAttributeSearchModel {
	}
	/**
	 * Use to update an existing attribute group.
	 * @see {@link AttributeGroupModel}
	 * @public
	 */
	export interface UpdateAttributeGroupDto extends AttributeGroupModel {
	}
	/**
	 * Use to update an existing attribute tab.
	 * @see {@link AttributeTabModel}
	 * @public
	 */
	export interface UpdateAttributeTabDto extends AttributeTabModel {
	}
	/**
	 * Use to update an existing attribute type.
	 * @see {@link AttributeTypeModel}
	 * @public
	 */
	export interface UpdateAttributeTypeDto extends AttributeTypeModel {
	}
	/**
	 * Use to update an existing general attribute.
	 * @see {@link GeneralAttributeModel}
	 * @public
	 */
	export interface UpdateGeneralAttributeDto extends GeneralAttributeModel {
	}
	/**
	 * Use to update an existing general attribute predefined option.
	 * @see {@link GeneralAttributePredefinedOptionModel}
	 * @public
	 */
	export interface UpdateGeneralAttributePredefinedOptionDto extends GeneralAttributePredefinedOptionModel {
	}

	export class Attributes extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all attribute group calls.
		 * @param {@link cef.admin.api.ClearAttributeGroupCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAttributeGroupCache
		 * @path <API Root>/Attributes/AttributeGroup/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAttributeGroupCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Attributes", "AttributeGroup", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all attribute tab calls.
		 * @param {@link cef.admin.api.ClearAttributeTabCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAttributeTabCache
		 * @path <API Root>/Attributes/AttributeTab/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAttributeTabCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Attributes", "AttributeTab", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all attribute type calls.
		 * @param {@link cef.admin.api.ClearAttributeTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAttributeTypeCache
		 * @path <API Root>/Attributes/AttributeType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAttributeTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Attributes", "AttributeType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all general attribute calls.
		 * @param {@link cef.admin.api.ClearGeneralAttributeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearGeneralAttributeCache
		 * @path <API Root>/Attributes/GeneralAttribute/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearGeneralAttributeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all general attribute predefined option calls.
		 * @param {@link cef.admin.api.ClearGeneralAttributePredefinedOptionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearGeneralAttributePredefinedOptionCache
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOption/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearGeneralAttributePredefinedOptionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOption", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new attribute group.
		 * @param {@link cef.admin.api.CreateAttributeGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAttributeGroup
		 * @path <API Root>/Attributes/AttributeGroup/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAttributeGroup = (routeParams?: CreateAttributeGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "AttributeGroup", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new attribute tab.
		 * @param {@link cef.admin.api.CreateAttributeTabDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAttributeTab
		 * @path <API Root>/Attributes/AttributeTab/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAttributeTab = (routeParams?: CreateAttributeTabDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "AttributeTab", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new attribute type.
		 * @param {@link cef.admin.api.CreateAttributeTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAttributeType
		 * @path <API Root>/Attributes/AttributeType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAttributeType = (routeParams?: CreateAttributeTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "AttributeType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new general attribute.
		 * @param {@link cef.admin.api.CreateGeneralAttributeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateGeneralAttribute
		 * @path <API Root>/Attributes/GeneralAttribute/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateGeneralAttribute = (routeParams?: CreateGeneralAttributeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new general attribute predefined option.
		 * @param {@link cef.admin.api.CreateGeneralAttributePredefinedOptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateGeneralAttributePredefinedOption
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOption/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateGeneralAttributePredefinedOption = (routeParams?: CreateGeneralAttributePredefinedOptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOption", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific attribute group from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAttributeGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAttributeGroupByID
		 * @path <API Root>/Attributes/AttributeGroup/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAttributeGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeGroup", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific attribute tab from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAttributeTabByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAttributeTabByID
		 * @path <API Root>/Attributes/AttributeTab/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAttributeTabByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeTab", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific attribute type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAttributeTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAttributeTypeByID
		 * @path <API Root>/Attributes/AttributeType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAttributeTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific general attribute from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateGeneralAttributeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateGeneralAttributeByID
		 * @path <API Root>/Attributes/GeneralAttribute/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateGeneralAttributeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific general attribute predefined option from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateGeneralAttributePredefinedOptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateGeneralAttributePredefinedOptionByID
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOption/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateGeneralAttributePredefinedOptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOption", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific attribute group from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAttributeGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAttributeGroupByID
		 * @path <API Root>/Attributes/AttributeGroup/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAttributeGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeGroup", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific attribute tab from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAttributeTabByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAttributeTabByID
		 * @path <API Root>/Attributes/AttributeTab/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAttributeTabByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeTab", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific attribute type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAttributeTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAttributeTypeByID
		 * @path <API Root>/Attributes/AttributeType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAttributeTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific general attribute from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteGeneralAttributeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteGeneralAttributeByID
		 * @path <API Root>/Attributes/GeneralAttribute/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteGeneralAttributeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific general attribute predefined option from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteGeneralAttributePredefinedOptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteGeneralAttributePredefinedOptionByID
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOption/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteGeneralAttributePredefinedOptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOption", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific attribute group
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeGroupByID
		 * @path <API Root>/Attributes/AttributeGroup/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeGroupModel>}
		 * @public
		 */
		GetAttributeGroupByID = (id: number) => this.$http<AttributeGroupModel>({
			url: [this.rootUrl, "Attributes", "AttributeGroup", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of attribute groups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeGroups
		 * @path <API Root>/Attributes/AttributeGroups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeGroupPagedResults>}
		 * @public
		 */
		GetAttributeGroups = (routeParams?: GetAttributeGroupsDto) => this.$http<AttributeGroupPagedResults>({
			url: [this.rootUrl, "Attributes", "AttributeGroups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific attribute tab
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeTabByID
		 * @path <API Root>/Attributes/AttributeTab/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeTabModel>}
		 * @public
		 */
		GetAttributeTabByID = (id: number) => this.$http<AttributeTabModel>({
			url: [this.rootUrl, "Attributes", "AttributeTab", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of attribute tabs
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeTabs
		 * @path <API Root>/Attributes/AttributeTabs
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeTabPagedResults>}
		 * @public
		 */
		GetAttributeTabs = (routeParams?: GetAttributeTabsDto) => this.$http<AttributeTabPagedResults>({
			url: [this.rootUrl, "Attributes", "AttributeTabs"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific attribute type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeTypeByID
		 * @path <API Root>/Attributes/AttributeType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeTypeModel>}
		 * @public
		 */
		GetAttributeTypeByID = (id: number) => this.$http<AttributeTypeModel>({
			url: [this.rootUrl, "Attributes", "AttributeType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of attribute types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeTypes
		 * @path <API Root>/Attributes/AttributeTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeTypePagedResults>}
		 * @public
		 */
		GetAttributeTypes = (routeParams?: GetAttributeTypesDto) => this.$http<AttributeTypePagedResults>({
			url: [this.rootUrl, "Attributes", "AttributeTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific general attribute
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGeneralAttributeByID
		 * @path <API Root>/Attributes/GeneralAttribute/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GeneralAttributeModel>}
		 * @public
		 */
		GetGeneralAttributeByID = (id: number) => this.$http<GeneralAttributeModel>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific general attribute predefined option
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGeneralAttributePredefinedOptionByID
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOption/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GeneralAttributePredefinedOptionModel>}
		 * @public
		 */
		GetGeneralAttributePredefinedOptionByID = (id: number) => this.$http<GeneralAttributePredefinedOptionModel>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOption", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of general attribute predefined options
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGeneralAttributePredefinedOptions
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOptions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GeneralAttributePredefinedOptionPagedResults>}
		 * @public
		 */
		GetGeneralAttributePredefinedOptions = (routeParams?: GetGeneralAttributePredefinedOptionsDto) => this.$http<GeneralAttributePredefinedOptionPagedResults>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOptions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of general attributes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGeneralAttributes
		 * @path <API Root>/Attributes/GeneralAttributes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GeneralAttributePagedResults>}
		 * @public
		 */
		GetGeneralAttributes = (routeParams?: GetGeneralAttributesDto) => this.$http<GeneralAttributePagedResults>({
			url: [this.rootUrl, "Attributes", "GeneralAttributes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific attribute group from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAttributeGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAttributeGroupByID
		 * @path <API Root>/Attributes/AttributeGroup/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAttributeGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeGroup", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific attribute tab from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAttributeTabByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAttributeTabByID
		 * @path <API Root>/Attributes/AttributeTab/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAttributeTabByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeTab", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific attribute type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAttributeTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAttributeTypeByID
		 * @path <API Root>/Attributes/AttributeType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAttributeTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "AttributeType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific general attribute from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateGeneralAttributeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateGeneralAttributeByID
		 * @path <API Root>/Attributes/GeneralAttribute/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateGeneralAttributeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific general attribute predefined option from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateGeneralAttributePredefinedOptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateGeneralAttributePredefinedOptionByID
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOption/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateGeneralAttributePredefinedOptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOption", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing attribute group.
		 * @param {@link cef.admin.api.UpdateAttributeGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAttributeGroup
		 * @path <API Root>/Attributes/AttributeGroup/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAttributeGroup = (routeParams?: UpdateAttributeGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "AttributeGroup", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing attribute tab.
		 * @param {@link cef.admin.api.UpdateAttributeTabDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAttributeTab
		 * @path <API Root>/Attributes/AttributeTab/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAttributeTab = (routeParams?: UpdateAttributeTabDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "AttributeTab", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing attribute type.
		 * @param {@link cef.admin.api.UpdateAttributeTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAttributeType
		 * @path <API Root>/Attributes/AttributeType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAttributeType = (routeParams?: UpdateAttributeTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "AttributeType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing general attribute.
		 * @param {@link cef.admin.api.UpdateGeneralAttributeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateGeneralAttribute
		 * @path <API Root>/Attributes/GeneralAttribute/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateGeneralAttribute = (routeParams?: UpdateGeneralAttributeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing general attribute predefined option.
		 * @param {@link cef.admin.api.UpdateGeneralAttributePredefinedOptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateGeneralAttributePredefinedOption
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOption/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateGeneralAttributePredefinedOption = (routeParams?: UpdateGeneralAttributePredefinedOptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOption", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
