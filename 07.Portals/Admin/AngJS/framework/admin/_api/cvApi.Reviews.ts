/**
 * @file framework/admin/_api/cvApi.Reviews.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Approve a review
	 * @see {@link ImplementsIDOnBodyBase}
	 * @public
	 */
	export interface ApproveReviewDto extends ImplementsIDOnBodyBase {
	}
	/**
	 * Use to create a new review.
	 * @see {@link ReviewModel}
	 * @public
	 */
	export interface CreateReviewDto extends ReviewModel {
	}
	/**
	 * Use to create a new review type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateReviewTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of reviews
	 * @see {@link ReviewSearchModel}
	 * @public
	 */
	export interface GetReviewsDto extends ReviewSearchModel {
	}
	/**
	 * Use to get a list of review types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetReviewTypesDto extends TypeSearchModel {
	}
	/**
	 * Unapprove a review
	 * @see {@link ImplementsIDOnBodyBase}
	 * @public
	 */
	export interface UnapproveReviewDto extends ImplementsIDOnBodyBase {
	}
	/**
	 * Use to update an existing review.
	 * @see {@link ReviewModel}
	 * @public
	 */
	export interface UpdateReviewDto extends ReviewModel {
	}
	/**
	 * Use to update an existing review type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateReviewTypeDto extends TypeModel {
	}

	export class Reviews extends ServiceStackRoute {
		/**
		 * Approve a review
		 * @param {@link cef.admin.api.ApproveReviewDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ApproveReview
		 * @path <API Root>/Reviews/Review/Approve
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ApproveReview = (routeParams?: ApproveReviewDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "Review", "Approve"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Empties the server-side data cache for all review calls.
		 * @param {@link cef.admin.api.ClearReviewCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearReviewCache
		 * @path <API Root>/Reviews/Review/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearReviewCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Reviews", "Review", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all review type calls.
		 * @param {@link cef.admin.api.ClearReviewTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearReviewTypeCache
		 * @path <API Root>/Reviews/ReviewType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearReviewTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Reviews", "ReviewType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new review.
		 * @param {@link cef.admin.api.CreateReviewDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateReview
		 * @path <API Root>/Reviews/Review/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateReview = (routeParams?: CreateReviewDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Reviews", "Review", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new review type.
		 * @param {@link cef.admin.api.CreateReviewTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateReviewType
		 * @path <API Root>/Reviews/ReviewType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateReviewType = (routeParams?: CreateReviewTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Reviews", "ReviewType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific review from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateReviewByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateReviewByID
		 * @path <API Root>/Reviews/Review/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateReviewByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "Review", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific review type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateReviewTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateReviewTypeByID
		 * @path <API Root>/Reviews/ReviewType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateReviewTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "ReviewType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific review from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteReviewByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteReviewByID
		 * @path <API Root>/Reviews/Review/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteReviewByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "Review", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific review type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteReviewTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteReviewTypeByID
		 * @path <API Root>/Reviews/ReviewType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteReviewTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "ReviewType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific review
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReviewByID
		 * @path <API Root>/Reviews/Review/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ReviewModel>}
		 * @public
		 */
		GetReviewByID = (id: number) => this.$http<ReviewModel>({
			url: [this.rootUrl, "Reviews", "Review", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of reviews
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReviews
		 * @path <API Root>/Reviews/Reviews
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ReviewPagedResults>}
		 * @public
		 */
		GetReviews = (routeParams?: GetReviewsDto) => this.$http<ReviewPagedResults>({
			url: [this.rootUrl, "Reviews", "Reviews"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific review type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReviewTypeByID
		 * @path <API Root>/Reviews/ReviewType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetReviewTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Reviews", "ReviewType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of review types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReviewTypes
		 * @path <API Root>/Reviews/ReviewTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ReviewTypePagedResults>}
		 * @public
		 */
		GetReviewTypes = (routeParams?: GetReviewTypesDto) => this.$http<ReviewTypePagedResults>({
			url: [this.rootUrl, "Reviews", "ReviewTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific review from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateReviewByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateReviewByID
		 * @path <API Root>/Reviews/Review/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateReviewByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "Review", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific review type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateReviewTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateReviewTypeByID
		 * @path <API Root>/Reviews/ReviewType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateReviewTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "ReviewType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Unapprove a review
		 * @param {@link cef.admin.api.UnapproveReviewDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UnapproveReview
		 * @path <API Root>/Reviews/Review/Unapprove
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UnapproveReview = (routeParams?: UnapproveReviewDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Reviews", "Review", "Unapprove"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Use to update an existing review.
		 * @param {@link cef.admin.api.UpdateReviewDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateReview
		 * @path <API Root>/Reviews/Review/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateReview = (routeParams?: UpdateReviewDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Reviews", "Review", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing review type.
		 * @param {@link cef.admin.api.UpdateReviewTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateReviewType
		 * @path <API Root>/Reviews/ReviewType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateReviewType = (routeParams?: UpdateReviewTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Reviews", "ReviewType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
