/**
 * @file framework/admin/_api/cvApi.Returning.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStateExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStatusExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesReturnTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesReturnTypeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to create a new sales return.
	 * @see {@link SalesReturnModel}
	 * @public
	 */
	export interface CreateSalesReturnDto extends SalesReturnModel {
	}
	/**
	 * Use to create a new sales return contact.
	 * @see {@link SalesReturnContactModel}
	 * @public
	 */
	export interface CreateSalesReturnContactDto extends SalesReturnContactModel {
	}
	/**
	 * Use to create a new sales return event.
	 * @see {@link SalesReturnEventModel}
	 * @public
	 */
	export interface CreateSalesReturnEventDto extends SalesReturnEventModel {
	}
	/**
	 * Use to create a new sales return event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesReturnEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new sales return file.
	 * @see {@link SalesReturnFileModel}
	 * @public
	 */
	export interface CreateSalesReturnFileDto extends SalesReturnFileModel {
	}
	/**
	 * Use to create a new sales return item.
	 * @see {@link SalesItemBaseModel<AppliedSalesReturnItemDiscountModel>}
	 * @public
	 */
	export interface CreateSalesReturnItemDto extends SalesItemBaseModel<AppliedSalesReturnItemDiscountModel> {
	}
	/**
	 * Use to create a new sales return item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface CreateSalesReturnItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to create a new sales return reason.
	 * @see {@link SalesReturnReasonModel}
	 * @public
	 */
	export interface CreateSalesReturnReasonDto extends SalesReturnReasonModel {
	}
	/**
	 * Use to create a new sales return sales order.
	 * @see {@link SalesReturnSalesOrderModel}
	 * @public
	 */
	export interface CreateSalesReturnSalesOrderDto extends SalesReturnSalesOrderModel {
	}
	/**
	 * Use to create a new sales return state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface CreateSalesReturnStateDto extends StateModel {
	}
	/**
	 * Use to create a new sales return status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateSalesReturnStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new sales return type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesReturnTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of sales return contacts
	 * @see {@link SalesReturnContactSearchModel}
	 * @public
	 */
	export interface GetSalesReturnContactsDto extends SalesReturnContactSearchModel {
	}
	/**
	 * Use to get a list of sales return events
	 * @see {@link SalesReturnEventSearchModel}
	 * @public
	 */
	export interface GetSalesReturnEventsDto extends SalesReturnEventSearchModel {
	}
	/**
	 * Use to get a list of sales return event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesReturnEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of sales return files
	 * @see {@link SalesReturnFileSearchModel}
	 * @public
	 */
	export interface GetSalesReturnFilesDto extends SalesReturnFileSearchModel {
	}
	/**
	 * Use to get a list of sales return items
	 * @see {@link SalesItemBaseSearchModel}
	 * @public
	 */
	export interface GetSalesReturnItemsDto extends SalesItemBaseSearchModel {
	}
	/**
	 * Use to get a list of sales return item targets
	 * @see {@link SalesItemTargetBaseSearchModel}
	 * @public
	 */
	export interface GetSalesReturnItemTargetsDto extends SalesItemTargetBaseSearchModel {
	}
	/**
	 * Use to get a list of sales return reasons
	 * @see {@link SalesReturnReasonSearchModel}
	 * @public
	 */
	export interface GetSalesReturnReasonsDto extends SalesReturnReasonSearchModel {
	}
	/**
	 * Use to get a list of sales returns
	 * @see {@link SalesReturnSearchModel}
	 * @public
	 */
	export interface GetSalesReturnsDto extends SalesReturnSearchModel {
	}
	/**
	 * Use to get a list of sales return sales orders
	 * @see {@link SalesReturnSalesOrderSearchModel}
	 * @public
	 */
	export interface GetSalesReturnSalesOrdersDto extends SalesReturnSalesOrderSearchModel {
	}
	/**
	 * Use to get a list of sales return states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetSalesReturnStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of sales return statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSalesReturnStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of sales return types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesReturnTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing sales return.
	 * @see {@link SalesReturnModel}
	 * @public
	 */
	export interface UpdateSalesReturnDto extends SalesReturnModel {
	}
	/**
	 * Use to update an existing sales return contact.
	 * @see {@link SalesReturnContactModel}
	 * @public
	 */
	export interface UpdateSalesReturnContactDto extends SalesReturnContactModel {
	}
	/**
	 * Use to update an existing sales return event.
	 * @see {@link SalesReturnEventModel}
	 * @public
	 */
	export interface UpdateSalesReturnEventDto extends SalesReturnEventModel {
	}
	/**
	 * Use to update an existing sales return event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesReturnEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing sales return file.
	 * @see {@link SalesReturnFileModel}
	 * @public
	 */
	export interface UpdateSalesReturnFileDto extends SalesReturnFileModel {
	}
	/**
	 * Use to update an existing sales return item.
	 * @see {@link SalesItemBaseModel<AppliedSalesReturnItemDiscountModel>}
	 * @public
	 */
	export interface UpdateSalesReturnItemDto extends SalesItemBaseModel<AppliedSalesReturnItemDiscountModel> {
	}
	/**
	 * Use to update an existing sales return item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface UpdateSalesReturnItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to update an existing sales return reason.
	 * @see {@link SalesReturnReasonModel}
	 * @public
	 */
	export interface UpdateSalesReturnReasonDto extends SalesReturnReasonModel {
	}
	/**
	 * Use to update an existing sales return sales order.
	 * @see {@link SalesReturnSalesOrderModel}
	 * @public
	 */
	export interface UpdateSalesReturnSalesOrderDto extends SalesReturnSalesOrderModel {
	}
	/**
	 * Use to update an existing sales return state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface UpdateSalesReturnStateDto extends StateModel {
	}
	/**
	 * Use to update an existing sales return status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateSalesReturnStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing sales return type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesReturnTypeDto extends TypeModel {
	}

	export class Returning extends ServiceStackRoute {
		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByDisplayName
		 * @path <API Root>/Returning/SalesReturnState/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStateExistsByDisplayName = (routeParams?: CheckSalesReturnStateExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByKey
		 * @path <API Root>/Returning/SalesReturnState/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStateExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByName
		 * @path <API Root>/Returning/SalesReturnState/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStateExistsByName = (routeParams?: CheckSalesReturnStateExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByDisplayName
		 * @path <API Root>/Returning/SalesReturnStatus/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStatusExistsByDisplayName = (routeParams?: CheckSalesReturnStatusExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByKey
		 * @path <API Root>/Returning/SalesReturnStatus/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStatusExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByName
		 * @path <API Root>/Returning/SalesReturnStatus/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStatusExistsByName = (routeParams?: CheckSalesReturnStatusExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByDisplayName
		 * @path <API Root>/Returning/SalesReturnType/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnTypeExistsByDisplayName = (routeParams?: CheckSalesReturnTypeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByKey
		 * @path <API Root>/Returning/SalesReturnType/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnTypeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByName
		 * @path <API Root>/Returning/SalesReturnType/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnTypeExistsByName = (routeParams?: CheckSalesReturnTypeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all sales return calls.
		 * @param {@link cef.admin.api.ClearSalesReturnCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnCache
		 * @path <API Root>/Returning/SalesReturn/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturn", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return contact calls.
		 * @param {@link cef.admin.api.ClearSalesReturnContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnContactCache
		 * @path <API Root>/Returning/SalesReturnContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return event calls.
		 * @param {@link cef.admin.api.ClearSalesReturnEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnEventCache
		 * @path <API Root>/Returning/SalesReturnEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return event type calls.
		 * @param {@link cef.admin.api.ClearSalesReturnEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnEventTypeCache
		 * @path <API Root>/Returning/SalesReturnEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return file calls.
		 * @param {@link cef.admin.api.ClearSalesReturnFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnFileCache
		 * @path <API Root>/Returning/SalesReturnFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return item calls.
		 * @param {@link cef.admin.api.ClearSalesReturnItemCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnItemCache
		 * @path <API Root>/Returning/SalesReturnItem/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnItemCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnItem", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return item target calls.
		 * @param {@link cef.admin.api.ClearSalesReturnItemTargetCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnItemTargetCache
		 * @path <API Root>/Returning/SalesReturnItemTarget/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnItemTargetCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTarget", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return reason calls.
		 * @param {@link cef.admin.api.ClearSalesReturnReasonCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnReasonCache
		 * @path <API Root>/Returning/SalesReturnReason/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnReasonCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnReason", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return sales order calls.
		 * @param {@link cef.admin.api.ClearSalesReturnSalesOrderCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnSalesOrderCache
		 * @path <API Root>/Returning/SalesReturnSalesOrder/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnSalesOrderCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrder", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return state calls.
		 * @param {@link cef.admin.api.ClearSalesReturnStateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnStateCache
		 * @path <API Root>/Returning/SalesReturnState/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnStateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return status calls.
		 * @param {@link cef.admin.api.ClearSalesReturnStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnStatusCache
		 * @path <API Root>/Returning/SalesReturnStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales return type calls.
		 * @param {@link cef.admin.api.ClearSalesReturnTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesReturnTypeCache
		 * @path <API Root>/Returning/SalesReturnType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesReturnTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new sales return.
		 * @param {@link cef.admin.api.CreateSalesReturnDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturn
		 * @path <API Root>/Returning/SalesReturn/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturn = (routeParams?: CreateSalesReturnDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturn", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return contact.
		 * @param {@link cef.admin.api.CreateSalesReturnContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnContact
		 * @path <API Root>/Returning/SalesReturnContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnContact = (routeParams?: CreateSalesReturnContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return event.
		 * @param {@link cef.admin.api.CreateSalesReturnEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnEvent
		 * @path <API Root>/Returning/SalesReturnEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnEvent = (routeParams?: CreateSalesReturnEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return event type.
		 * @param {@link cef.admin.api.CreateSalesReturnEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnEventType
		 * @path <API Root>/Returning/SalesReturnEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnEventType = (routeParams?: CreateSalesReturnEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return file.
		 * @param {@link cef.admin.api.CreateSalesReturnFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnFile
		 * @path <API Root>/Returning/SalesReturnFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnFile = (routeParams?: CreateSalesReturnFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return item.
		 * @param {@link cef.admin.api.CreateSalesReturnItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnItem
		 * @path <API Root>/Returning/SalesReturnItem/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnItem = (routeParams?: CreateSalesReturnItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnItem", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return item target.
		 * @param {@link cef.admin.api.CreateSalesReturnItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnItemTarget
		 * @path <API Root>/Returning/SalesReturnItemTarget/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnItemTarget = (routeParams?: CreateSalesReturnItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTarget", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return reason.
		 * @param {@link cef.admin.api.CreateSalesReturnReasonDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnReason
		 * @path <API Root>/Returning/SalesReturnReason/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnReason = (routeParams?: CreateSalesReturnReasonDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnReason", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return sales order.
		 * @param {@link cef.admin.api.CreateSalesReturnSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnSalesOrder
		 * @path <API Root>/Returning/SalesReturnSalesOrder/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnSalesOrder = (routeParams?: CreateSalesReturnSalesOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrder", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return state.
		 * @param {@link cef.admin.api.CreateSalesReturnStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnState
		 * @path <API Root>/Returning/SalesReturnState/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnState = (routeParams?: CreateSalesReturnStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return status.
		 * @param {@link cef.admin.api.CreateSalesReturnStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnStatus
		 * @path <API Root>/Returning/SalesReturnStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnStatus = (routeParams?: CreateSalesReturnStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales return type.
		 * @param {@link cef.admin.api.CreateSalesReturnTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesReturnType
		 * @path <API Root>/Returning/SalesReturnType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnType = (routeParams?: CreateSalesReturnTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific sales return from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnByID
		 * @path <API Root>/Returning/SalesReturn/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturn", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnContactByID
		 * @path <API Root>/Returning/SalesReturnContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnEventByID
		 * @path <API Root>/Returning/SalesReturnEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnEventTypeByID
		 * @path <API Root>/Returning/SalesReturnEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnFileByID
		 * @path <API Root>/Returning/SalesReturnFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return item from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnItemByID
		 * @path <API Root>/Returning/SalesReturnItem/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnItem", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return item target from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnItemTargetByID
		 * @path <API Root>/Returning/SalesReturnItemTarget/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTarget", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return reason from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnReasonByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnReasonByID
		 * @path <API Root>/Returning/SalesReturnReason/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnReasonByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnReason", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return sales order from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnSalesOrderByID
		 * @path <API Root>/Returning/SalesReturnSalesOrder/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrder", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return state from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnStateByID
		 * @path <API Root>/Returning/SalesReturnState/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnStatusByID
		 * @path <API Root>/Returning/SalesReturnStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales return type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesReturnTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesReturnTypeByID
		 * @path <API Root>/Returning/SalesReturnType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesReturnTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific sales return from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnByID
		 * @path <API Root>/Returning/SalesReturn/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturn", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnContactByID
		 * @path <API Root>/Returning/SalesReturnContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnEventByID
		 * @path <API Root>/Returning/SalesReturnEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnEventTypeByID
		 * @path <API Root>/Returning/SalesReturnEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnFileByID
		 * @path <API Root>/Returning/SalesReturnFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return item from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnItemByID
		 * @path <API Root>/Returning/SalesReturnItem/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnItem", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return item target from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnItemTargetByID
		 * @path <API Root>/Returning/SalesReturnItemTarget/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTarget", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return reason from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnReasonByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnReasonByID
		 * @path <API Root>/Returning/SalesReturnReason/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnReasonByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnReason", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return sales order from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnSalesOrderByID
		 * @path <API Root>/Returning/SalesReturnSalesOrder/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrder", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return state from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnStateByID
		 * @path <API Root>/Returning/SalesReturnState/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnStatusByID
		 * @path <API Root>/Returning/SalesReturnStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales return type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesReturnTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesReturnTypeByID
		 * @path <API Root>/Returning/SalesReturnType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesReturnTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific sales return
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnByID
		 * @path <API Root>/Returning/SalesReturn/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnModel>}
		 * @public
		 */
		GetSalesReturnByID = (id: number) => this.$http<SalesReturnModel>({
			url: [this.rootUrl, "Returning", "SalesReturn", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sales return contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnContactByID
		 * @path <API Root>/Returning/SalesReturnContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnContactModel>}
		 * @public
		 */
		GetSalesReturnContactByID = (id: number) => this.$http<SalesReturnContactModel>({
			url: [this.rootUrl, "Returning", "SalesReturnContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnContacts
		 * @path <API Root>/Returning/SalesReturnContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnContactPagedResults>}
		 * @public
		 */
		GetSalesReturnContacts = (routeParams?: GetSalesReturnContactsDto) => this.$http<SalesReturnContactPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnEventByID
		 * @path <API Root>/Returning/SalesReturnEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnEventModel>}
		 * @public
		 */
		GetSalesReturnEventByID = (id: number) => this.$http<SalesReturnEventModel>({
			url: [this.rootUrl, "Returning", "SalesReturnEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnEvents
		 * @path <API Root>/Returning/SalesReturnEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnEventPagedResults>}
		 * @public
		 */
		GetSalesReturnEvents = (routeParams?: GetSalesReturnEventsDto) => this.$http<SalesReturnEventPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnEventTypeByID
		 * @path <API Root>/Returning/SalesReturnEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesReturnEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Returning", "SalesReturnEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnEventTypes
		 * @path <API Root>/Returning/SalesReturnEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnEventTypePagedResults>}
		 * @public
		 */
		GetSalesReturnEventTypes = (routeParams?: GetSalesReturnEventTypesDto) => this.$http<SalesReturnEventTypePagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnFileByID
		 * @path <API Root>/Returning/SalesReturnFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnFileModel>}
		 * @public
		 */
		GetSalesReturnFileByID = (id: number) => this.$http<SalesReturnFileModel>({
			url: [this.rootUrl, "Returning", "SalesReturnFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnFiles
		 * @path <API Root>/Returning/SalesReturnFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnFilePagedResults>}
		 * @public
		 */
		GetSalesReturnFiles = (routeParams?: GetSalesReturnFilesDto) => this.$http<SalesReturnFilePagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return item
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnItemByID
		 * @path <API Root>/Returning/SalesReturnItem/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedSalesReturnItemDiscountModel>>}
		 * @public
		 */
		GetSalesReturnItemByID = (id: number) => this.$http<SalesItemBaseModel<AppliedSalesReturnItemDiscountModel>>({
			url: [this.rootUrl, "Returning", "SalesReturnItem", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return items
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnItems
		 * @path <API Root>/Returning/SalesReturnItems
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnItemPagedResults>}
		 * @public
		 */
		GetSalesReturnItems = (routeParams?: GetSalesReturnItemsDto) => this.$http<SalesReturnItemPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnItems"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return item target
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnItemTargetByID
		 * @path <API Root>/Returning/SalesReturnItemTarget/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetBaseModel>}
		 * @public
		 */
		GetSalesReturnItemTargetByID = (id: number) => this.$http<SalesItemTargetBaseModel>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTarget", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return item targets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnItemTargets
		 * @path <API Root>/Returning/SalesReturnItemTargets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnItemTargetPagedResults>}
		 * @public
		 */
		GetSalesReturnItemTargets = (routeParams?: GetSalesReturnItemTargetsDto) => this.$http<SalesReturnItemTargetPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTargets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return reason
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnReasonByID
		 * @path <API Root>/Returning/SalesReturnReason/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnReasonModel>}
		 * @public
		 */
		GetSalesReturnReasonByID = (id: number) => this.$http<SalesReturnReasonModel>({
			url: [this.rootUrl, "Returning", "SalesReturnReason", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return reasons
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnReasons
		 * @path <API Root>/Returning/SalesReturnReasons
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnReasonPagedResults>}
		 * @public
		 */
		GetSalesReturnReasons = (routeParams?: GetSalesReturnReasonsDto) => this.$http<SalesReturnReasonPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnReasons"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of sales returns
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturns
		 * @path <API Root>/Returning/SalesReturns
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnPagedResults>}
		 * @public
		 */
		GetSalesReturns = (routeParams?: GetSalesReturnsDto) => this.$http<SalesReturnPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturns"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return sales order
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnSalesOrderByID
		 * @path <API Root>/Returning/SalesReturnSalesOrder/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnSalesOrderModel>}
		 * @public
		 */
		GetSalesReturnSalesOrderByID = (id: number) => this.$http<SalesReturnSalesOrderModel>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrder", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return sales orders
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnSalesOrders
		 * @path <API Root>/Returning/SalesReturnSalesOrders
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnSalesOrderPagedResults>}
		 * @public
		 */
		GetSalesReturnSalesOrders = (routeParams?: GetSalesReturnSalesOrdersDto) => this.$http<SalesReturnSalesOrderPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrders"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStateByID
		 * @path <API Root>/Returning/SalesReturnState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetSalesReturnStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStates
		 * @path <API Root>/Returning/SalesReturnStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnStatePagedResults>}
		 * @public
		 */
		GetSalesReturnStates = (routeParams?: GetSalesReturnStatesDto) => this.$http<SalesReturnStatePagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStatusByID
		 * @path <API Root>/Returning/SalesReturnStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSalesReturnStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStatuses
		 * @path <API Root>/Returning/SalesReturnStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnStatusPagedResults>}
		 * @public
		 */
		GetSalesReturnStatuses = (routeParams?: GetSalesReturnStatusesDto) => this.$http<SalesReturnStatusPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnTypeByID
		 * @path <API Root>/Returning/SalesReturnType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesReturnTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnTypes
		 * @path <API Root>/Returning/SalesReturnTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnTypePagedResults>}
		 * @public
		 */
		GetSalesReturnTypes = (routeParams?: GetSalesReturnTypesDto) => this.$http<SalesReturnTypePagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific sales return from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnByID
		 * @path <API Root>/Returning/SalesReturn/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturn", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnContactByID
		 * @path <API Root>/Returning/SalesReturnContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnEventByID
		 * @path <API Root>/Returning/SalesReturnEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnEventTypeByID
		 * @path <API Root>/Returning/SalesReturnEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnFileByID
		 * @path <API Root>/Returning/SalesReturnFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return item from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnItemByID
		 * @path <API Root>/Returning/SalesReturnItem/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnItem", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return item target from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnItemTargetByID
		 * @path <API Root>/Returning/SalesReturnItemTarget/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTarget", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return reason from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnReasonByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnReasonByID
		 * @path <API Root>/Returning/SalesReturnReason/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnReasonByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnReason", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return sales order from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnSalesOrderByID
		 * @path <API Root>/Returning/SalesReturnSalesOrder/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrder", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return state from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnStateByID
		 * @path <API Root>/Returning/SalesReturnState/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnStatusByID
		 * @path <API Root>/Returning/SalesReturnStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales return type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesReturnTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesReturnTypeByID
		 * @path <API Root>/Returning/SalesReturnType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesReturnTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing sales return.
		 * @param {@link cef.admin.api.UpdateSalesReturnDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturn
		 * @path <API Root>/Returning/SalesReturn/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturn = (routeParams?: UpdateSalesReturnDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturn", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return contact.
		 * @param {@link cef.admin.api.UpdateSalesReturnContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnContact
		 * @path <API Root>/Returning/SalesReturnContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnContact = (routeParams?: UpdateSalesReturnContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return event.
		 * @param {@link cef.admin.api.UpdateSalesReturnEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnEvent
		 * @path <API Root>/Returning/SalesReturnEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnEvent = (routeParams?: UpdateSalesReturnEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return event type.
		 * @param {@link cef.admin.api.UpdateSalesReturnEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnEventType
		 * @path <API Root>/Returning/SalesReturnEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnEventType = (routeParams?: UpdateSalesReturnEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return file.
		 * @param {@link cef.admin.api.UpdateSalesReturnFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnFile
		 * @path <API Root>/Returning/SalesReturnFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnFile = (routeParams?: UpdateSalesReturnFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return item.
		 * @param {@link cef.admin.api.UpdateSalesReturnItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnItem
		 * @path <API Root>/Returning/SalesReturnItem/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnItem = (routeParams?: UpdateSalesReturnItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnItem", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return item target.
		 * @param {@link cef.admin.api.UpdateSalesReturnItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnItemTarget
		 * @path <API Root>/Returning/SalesReturnItemTarget/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnItemTarget = (routeParams?: UpdateSalesReturnItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnItemTarget", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return reason.
		 * @param {@link cef.admin.api.UpdateSalesReturnReasonDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnReason
		 * @path <API Root>/Returning/SalesReturnReason/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnReason = (routeParams?: UpdateSalesReturnReasonDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnReason", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return sales order.
		 * @param {@link cef.admin.api.UpdateSalesReturnSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnSalesOrder
		 * @path <API Root>/Returning/SalesReturnSalesOrder/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnSalesOrder = (routeParams?: UpdateSalesReturnSalesOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnSalesOrder", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return state.
		 * @param {@link cef.admin.api.UpdateSalesReturnStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnState
		 * @path <API Root>/Returning/SalesReturnState/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnState = (routeParams?: UpdateSalesReturnStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return status.
		 * @param {@link cef.admin.api.UpdateSalesReturnStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnStatus
		 * @path <API Root>/Returning/SalesReturnStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnStatus = (routeParams?: UpdateSalesReturnStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales return type.
		 * @param {@link cef.admin.api.UpdateSalesReturnTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesReturnType
		 * @path <API Root>/Returning/SalesReturnType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnType = (routeParams?: UpdateSalesReturnTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
