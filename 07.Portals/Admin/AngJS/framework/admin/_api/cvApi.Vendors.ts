/**
 * @file framework/admin/_api/cvApi.Vendors.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new vendor.
	 * @see {@link VendorModel}
	 * @public
	 */
	export interface CreateVendorDto extends VendorModel {
	}
	/**
	 * Use to create a new vendor account.
	 * @see {@link VendorAccountModel}
	 * @public
	 */
	export interface CreateVendorAccountDto extends VendorAccountModel {
	}
	/**
	 * Use to create a new vendor image.
	 * @see {@link VendorImageModel}
	 * @public
	 */
	export interface CreateVendorImageDto extends VendorImageModel {
	}
	/**
	 * Use to create a new vendor image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateVendorImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new vendor manufacturer.
	 * @see {@link VendorManufacturerModel}
	 * @public
	 */
	export interface CreateVendorManufacturerDto extends VendorManufacturerModel {
	}
	/**
	 * Use to create a new vendor product.
	 * @see {@link VendorProductModel}
	 * @public
	 */
	export interface CreateVendorProductDto extends VendorProductModel {
	}
	/**
	 * Use to create a new vendor type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateVendorTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of vendor accounts
	 * @see {@link VendorAccountSearchModel}
	 * @public
	 */
	export interface GetVendorAccountsDto extends VendorAccountSearchModel {
	}
	/**
	 * Use to get a list of vendor images
	 * @see {@link VendorImageSearchModel}
	 * @public
	 */
	export interface GetVendorImagesDto extends VendorImageSearchModel {
	}
	/**
	 * Use to get a list of vendor image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetVendorImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of vendor manufacturers
	 * @see {@link VendorManufacturerSearchModel}
	 * @public
	 */
	export interface GetVendorManufacturersDto extends VendorManufacturerSearchModel {
	}
	/**
	 * Use to get a list of vendor products
	 * @see {@link VendorProductSearchModel}
	 * @public
	 */
	export interface GetVendorProductsDto extends VendorProductSearchModel {
	}
	/**
	 * Use to get a list of vendors
	 * @see {@link VendorSearchModel}
	 * @public
	 */
	export interface GetVendorsDto extends VendorSearchModel {
	}
	/**
	 * Use to get a list of vendor types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetVendorTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing vendor.
	 * @see {@link VendorModel}
	 * @public
	 */
	export interface UpdateVendorDto extends VendorModel {
	}
	/**
	 * Use to update an existing vendor account.
	 * @see {@link VendorAccountModel}
	 * @public
	 */
	export interface UpdateVendorAccountDto extends VendorAccountModel {
	}
	/**
	 * Use to update an existing vendor image.
	 * @see {@link VendorImageModel}
	 * @public
	 */
	export interface UpdateVendorImageDto extends VendorImageModel {
	}
	/**
	 * Use to update an existing vendor image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateVendorImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing vendor manufacturer.
	 * @see {@link VendorManufacturerModel}
	 * @public
	 */
	export interface UpdateVendorManufacturerDto extends VendorManufacturerModel {
	}
	/**
	 * Use to update an existing vendor product.
	 * @see {@link VendorProductModel}
	 * @public
	 */
	export interface UpdateVendorProductDto extends VendorProductModel {
	}
	/**
	 * Use to update an existing vendor type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateVendorTypeDto extends TypeModel {
	}

	export class Vendors extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all vendor account calls.
		 * @param {@link cef.admin.api.ClearVendorAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVendorAccountCache
		 * @path <API Root>/Vendors/VendorAccount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVendorAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Vendors", "VendorAccount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all vendor calls.
		 * @param {@link cef.admin.api.ClearVendorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVendorCache
		 * @path <API Root>/Vendors/Vendor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVendorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Vendors", "Vendor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all vendor image calls.
		 * @param {@link cef.admin.api.ClearVendorImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVendorImageCache
		 * @path <API Root>/Vendors/VendorImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVendorImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Vendors", "VendorImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all vendor image type calls.
		 * @param {@link cef.admin.api.ClearVendorImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVendorImageTypeCache
		 * @path <API Root>/Vendors/VendorImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVendorImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Vendors", "VendorImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all vendor manufacturer calls.
		 * @param {@link cef.admin.api.ClearVendorManufacturerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVendorManufacturerCache
		 * @path <API Root>/Vendors/VendorManufacturer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVendorManufacturerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Vendors", "VendorManufacturer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all vendor product calls.
		 * @param {@link cef.admin.api.ClearVendorProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVendorProductCache
		 * @path <API Root>/Vendors/VendorProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVendorProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Vendors", "VendorProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all vendor type calls.
		 * @param {@link cef.admin.api.ClearVendorTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVendorTypeCache
		 * @path <API Root>/Vendors/VendorType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVendorTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Vendors", "VendorType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new vendor.
		 * @param {@link cef.admin.api.CreateVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVendor
		 * @path <API Root>/Vendors/Vendor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVendor = (routeParams?: CreateVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "Vendor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new vendor account.
		 * @param {@link cef.admin.api.CreateVendorAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVendorAccount
		 * @path <API Root>/Vendors/VendorAccount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVendorAccount = (routeParams?: CreateVendorAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorAccount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new vendor image.
		 * @param {@link cef.admin.api.CreateVendorImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVendorImage
		 * @path <API Root>/Vendors/VendorImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVendorImage = (routeParams?: CreateVendorImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new vendor image type.
		 * @param {@link cef.admin.api.CreateVendorImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVendorImageType
		 * @path <API Root>/Vendors/VendorImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVendorImageType = (routeParams?: CreateVendorImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new vendor manufacturer.
		 * @param {@link cef.admin.api.CreateVendorManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVendorManufacturer
		 * @path <API Root>/Vendors/VendorManufacturer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVendorManufacturer = (routeParams?: CreateVendorManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorManufacturer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new vendor product.
		 * @param {@link cef.admin.api.CreateVendorProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVendorProduct
		 * @path <API Root>/Vendors/VendorProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVendorProduct = (routeParams?: CreateVendorProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new vendor type.
		 * @param {@link cef.admin.api.CreateVendorTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVendorType
		 * @path <API Root>/Vendors/VendorType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVendorType = (routeParams?: CreateVendorTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific vendor account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVendorAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVendorAccountByID
		 * @path <API Root>/Vendors/VendorAccount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVendorAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorAccount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific vendor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVendorByID
		 * @path <API Root>/Vendors/Vendor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "Vendor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific vendor image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVendorImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVendorImageByID
		 * @path <API Root>/Vendors/VendorImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVendorImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific vendor image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVendorImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVendorImageTypeByID
		 * @path <API Root>/Vendors/VendorImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVendorImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific vendor manufacturer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVendorManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVendorManufacturerByID
		 * @path <API Root>/Vendors/VendorManufacturer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVendorManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorManufacturer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific vendor product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVendorProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVendorProductByID
		 * @path <API Root>/Vendors/VendorProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVendorProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific vendor type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVendorTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVendorTypeByID
		 * @path <API Root>/Vendors/VendorType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVendorTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific vendor account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVendorAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVendorAccountByID
		 * @path <API Root>/Vendors/VendorAccount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVendorAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorAccount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific vendor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVendorByID
		 * @path <API Root>/Vendors/Vendor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "Vendor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific vendor image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVendorImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVendorImageByID
		 * @path <API Root>/Vendors/VendorImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVendorImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific vendor image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVendorImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVendorImageTypeByID
		 * @path <API Root>/Vendors/VendorImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVendorImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific vendor manufacturer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVendorManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVendorManufacturerByID
		 * @path <API Root>/Vendors/VendorManufacturer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVendorManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorManufacturer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific vendor product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVendorProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVendorProductByID
		 * @path <API Root>/Vendors/VendorProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVendorProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific vendor type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVendorTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVendorTypeByID
		 * @path <API Root>/Vendors/VendorType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVendorTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific vendor account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorAccountByID
		 * @path <API Root>/Vendors/VendorAccount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorAccountModel>}
		 * @public
		 */
		GetVendorAccountByID = (id: number) => this.$http<VendorAccountModel>({
			url: [this.rootUrl, "Vendors", "VendorAccount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of vendor accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorAccounts
		 * @path <API Root>/Vendors/VendorAccounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorAccountPagedResults>}
		 * @public
		 */
		GetVendorAccounts = (routeParams?: GetVendorAccountsDto) => this.$http<VendorAccountPagedResults>({
			url: [this.rootUrl, "Vendors", "VendorAccounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific vendor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorByID
		 * @path <API Root>/Vendors/Vendor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorModel>}
		 * @public
		 */
		GetVendorByID = (id: number) => this.$http<VendorModel>({
			url: [this.rootUrl, "Vendors", "Vendor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific vendor image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorImageByID
		 * @path <API Root>/Vendors/VendorImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorImageModel>}
		 * @public
		 */
		GetVendorImageByID = (id: number) => this.$http<VendorImageModel>({
			url: [this.rootUrl, "Vendors", "VendorImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of vendor images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorImages
		 * @path <API Root>/Vendors/VendorImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorImagePagedResults>}
		 * @public
		 */
		GetVendorImages = (routeParams?: GetVendorImagesDto) => this.$http<VendorImagePagedResults>({
			url: [this.rootUrl, "Vendors", "VendorImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific vendor image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorImageTypeByID
		 * @path <API Root>/Vendors/VendorImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetVendorImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Vendors", "VendorImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of vendor image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorImageTypes
		 * @path <API Root>/Vendors/VendorImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorImageTypePagedResults>}
		 * @public
		 */
		GetVendorImageTypes = (routeParams?: GetVendorImageTypesDto) => this.$http<VendorImageTypePagedResults>({
			url: [this.rootUrl, "Vendors", "VendorImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific vendor manufacturer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorManufacturerByID
		 * @path <API Root>/Vendors/VendorManufacturer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorManufacturerModel>}
		 * @public
		 */
		GetVendorManufacturerByID = (id: number) => this.$http<VendorManufacturerModel>({
			url: [this.rootUrl, "Vendors", "VendorManufacturer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of vendor manufacturers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorManufacturers
		 * @path <API Root>/Vendors/VendorManufacturers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorManufacturerPagedResults>}
		 * @public
		 */
		GetVendorManufacturers = (routeParams?: GetVendorManufacturersDto) => this.$http<VendorManufacturerPagedResults>({
			url: [this.rootUrl, "Vendors", "VendorManufacturers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific vendor product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorProductByID
		 * @path <API Root>/Vendors/VendorProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorProductModel>}
		 * @public
		 */
		GetVendorProductByID = (id: number) => this.$http<VendorProductModel>({
			url: [this.rootUrl, "Vendors", "VendorProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of vendor products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorProducts
		 * @path <API Root>/Vendors/VendorProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorProductPagedResults>}
		 * @public
		 */
		GetVendorProducts = (routeParams?: GetVendorProductsDto) => this.$http<VendorProductPagedResults>({
			url: [this.rootUrl, "Vendors", "VendorProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of vendors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendors
		 * @path <API Root>/Vendors/Vendors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorPagedResults>}
		 * @public
		 */
		GetVendors = (routeParams?: GetVendorsDto) => this.$http<VendorPagedResults>({
			url: [this.rootUrl, "Vendors", "Vendors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific vendor type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorTypeByID
		 * @path <API Root>/Vendors/VendorType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetVendorTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Vendors", "VendorType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of vendor types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorTypes
		 * @path <API Root>/Vendors/VendorTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorTypePagedResults>}
		 * @public
		 */
		GetVendorTypes = (routeParams?: GetVendorTypesDto) => this.$http<VendorTypePagedResults>({
			url: [this.rootUrl, "Vendors", "VendorTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific vendor account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVendorAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVendorAccountByID
		 * @path <API Root>/Vendors/VendorAccount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVendorAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorAccount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific vendor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVendorByID
		 * @path <API Root>/Vendors/Vendor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "Vendor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific vendor image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVendorImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVendorImageByID
		 * @path <API Root>/Vendors/VendorImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVendorImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific vendor image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVendorImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVendorImageTypeByID
		 * @path <API Root>/Vendors/VendorImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVendorImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific vendor manufacturer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVendorManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVendorManufacturerByID
		 * @path <API Root>/Vendors/VendorManufacturer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVendorManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorManufacturer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific vendor product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVendorProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVendorProductByID
		 * @path <API Root>/Vendors/VendorProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVendorProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific vendor type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVendorTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVendorTypeByID
		 * @path <API Root>/Vendors/VendorType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVendorTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Vendors", "VendorType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing vendor.
		 * @param {@link cef.admin.api.UpdateVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVendor
		 * @path <API Root>/Vendors/Vendor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVendor = (routeParams?: UpdateVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "Vendor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing vendor account.
		 * @param {@link cef.admin.api.UpdateVendorAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVendorAccount
		 * @path <API Root>/Vendors/VendorAccount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVendorAccount = (routeParams?: UpdateVendorAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorAccount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing vendor image.
		 * @param {@link cef.admin.api.UpdateVendorImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVendorImage
		 * @path <API Root>/Vendors/VendorImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVendorImage = (routeParams?: UpdateVendorImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing vendor image type.
		 * @param {@link cef.admin.api.UpdateVendorImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVendorImageType
		 * @path <API Root>/Vendors/VendorImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVendorImageType = (routeParams?: UpdateVendorImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing vendor manufacturer.
		 * @param {@link cef.admin.api.UpdateVendorManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVendorManufacturer
		 * @path <API Root>/Vendors/VendorManufacturer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVendorManufacturer = (routeParams?: UpdateVendorManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorManufacturer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing vendor product.
		 * @param {@link cef.admin.api.UpdateVendorProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVendorProduct
		 * @path <API Root>/Vendors/VendorProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVendorProduct = (routeParams?: UpdateVendorProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing vendor type.
		 * @param {@link cef.admin.api.UpdateVendorTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVendorType
		 * @path <API Root>/Vendors/VendorType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVendorType = (routeParams?: UpdateVendorTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Vendors", "VendorType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
