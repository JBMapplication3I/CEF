/**
 * @file framework/admin/_api/cvApi.Tax.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new historical tax rate.
	 * @see {@link HistoricalTaxRateModel}
	 * @public
	 */
	export interface CreateHistoricalTaxRateDto extends HistoricalTaxRateModel {
	}
	/**
	 * Use to create a new tax country.
	 * @see {@link TaxCountryModel}
	 * @public
	 */
	export interface CreateTaxCountryDto extends TaxCountryModel {
	}
	/**
	 * Use to create a new tax district.
	 * @see {@link TaxDistrictModel}
	 * @public
	 */
	export interface CreateTaxDistrictDto extends TaxDistrictModel {
	}
	/**
	 * Use to create a new tax region.
	 * @see {@link TaxRegionModel}
	 * @public
	 */
	export interface CreateTaxRegionDto extends TaxRegionModel {
	}
	/**
	 * Use to get a list of historical tax rates
	 * @see {@link HistoricalTaxRateSearchModel}
	 * @public
	 */
	export interface GetHistoricalTaxRatesDto extends HistoricalTaxRateSearchModel {
	}
	/**
	 * Use to get a list of tax countries
	 * @see {@link TaxCountrySearchModel}
	 * @public
	 */
	export interface GetTaxCountriesDto extends TaxCountrySearchModel {
	}
	/**
	 * Use to get a list of tax districts
	 * @see {@link TaxDistrictSearchModel}
	 * @public
	 */
	export interface GetTaxDistrictsDto extends TaxDistrictSearchModel {
	}
	/**
	 * Use to get a list of tax regions
	 * @see {@link TaxRegionSearchModel}
	 * @public
	 */
	export interface GetTaxRegionsDto extends TaxRegionSearchModel {
	}
	/**
	 * Use to update an existing historical tax rate.
	 * @see {@link HistoricalTaxRateModel}
	 * @public
	 */
	export interface UpdateHistoricalTaxRateDto extends HistoricalTaxRateModel {
	}
	/**
	 * Use to update an existing tax country.
	 * @see {@link TaxCountryModel}
	 * @public
	 */
	export interface UpdateTaxCountryDto extends TaxCountryModel {
	}
	/**
	 * Use to update an existing tax district.
	 * @see {@link TaxDistrictModel}
	 * @public
	 */
	export interface UpdateTaxDistrictDto extends TaxDistrictModel {
	}
	/**
	 * Use to update an existing tax region.
	 * @see {@link TaxRegionModel}
	 * @public
	 */
	export interface UpdateTaxRegionDto extends TaxRegionModel {
	}

	export class Tax extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all historical tax rate calls.
		 * @param {@link cef.admin.api.ClearHistoricalTaxRateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearHistoricalTaxRateCache
		 * @path <API Root>/Tax/HistoricalTaxRate/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearHistoricalTaxRateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRate", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all tax country calls.
		 * @param {@link cef.admin.api.ClearTaxCountryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearTaxCountryCache
		 * @path <API Root>/Tax/TaxCountry/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearTaxCountryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tax", "TaxCountry", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all tax district calls.
		 * @param {@link cef.admin.api.ClearTaxDistrictCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearTaxDistrictCache
		 * @path <API Root>/Tax/TaxDistrict/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearTaxDistrictCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tax", "TaxDistrict", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all tax region calls.
		 * @param {@link cef.admin.api.ClearTaxRegionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearTaxRegionCache
		 * @path <API Root>/Tax/TaxRegion/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearTaxRegionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tax", "TaxRegion", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new historical tax rate.
		 * @param {@link cef.admin.api.CreateHistoricalTaxRateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateHistoricalTaxRate
		 * @path <API Root>/Tax/HistoricalTaxRate/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateHistoricalTaxRate = (routeParams?: CreateHistoricalTaxRateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRate", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new tax country.
		 * @param {@link cef.admin.api.CreateTaxCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateTaxCountry
		 * @path <API Root>/Tax/TaxCountry/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateTaxCountry = (routeParams?: CreateTaxCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "TaxCountry", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new tax district.
		 * @param {@link cef.admin.api.CreateTaxDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateTaxDistrict
		 * @path <API Root>/Tax/TaxDistrict/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateTaxDistrict = (routeParams?: CreateTaxDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "TaxDistrict", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new tax region.
		 * @param {@link cef.admin.api.CreateTaxRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateTaxRegion
		 * @path <API Root>/Tax/TaxRegion/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateTaxRegion = (routeParams?: CreateTaxRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "TaxRegion", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific historical tax rate from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateHistoricalTaxRateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateHistoricalTaxRateByID
		 * @path <API Root>/Tax/HistoricalTaxRate/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateHistoricalTaxRateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRate", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific tax country from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateTaxCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateTaxCountryByID
		 * @path <API Root>/Tax/TaxCountry/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateTaxCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxCountry", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific tax district from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateTaxDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateTaxDistrictByID
		 * @path <API Root>/Tax/TaxDistrict/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateTaxDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxDistrict", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific tax region from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateTaxRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateTaxRegionByID
		 * @path <API Root>/Tax/TaxRegion/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateTaxRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxRegion", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific historical tax rate from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteHistoricalTaxRateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteHistoricalTaxRateByID
		 * @path <API Root>/Tax/HistoricalTaxRate/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteHistoricalTaxRateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRate", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific tax country from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteTaxCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteTaxCountryByID
		 * @path <API Root>/Tax/TaxCountry/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteTaxCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxCountry", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific tax district from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteTaxDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteTaxDistrictByID
		 * @path <API Root>/Tax/TaxDistrict/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteTaxDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxDistrict", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific tax region from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteTaxRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteTaxRegionByID
		 * @path <API Root>/Tax/TaxRegion/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteTaxRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxRegion", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific historical tax rate
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetHistoricalTaxRateByID
		 * @path <API Root>/Tax/HistoricalTaxRate/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<HistoricalTaxRateModel>}
		 * @public
		 */
		GetHistoricalTaxRateByID = (id: number) => this.$http<HistoricalTaxRateModel>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRate", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of historical tax rates
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetHistoricalTaxRates
		 * @path <API Root>/Tax/HistoricalTaxRates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<HistoricalTaxRatePagedResults>}
		 * @public
		 */
		GetHistoricalTaxRates = (routeParams?: GetHistoricalTaxRatesDto) => this.$http<HistoricalTaxRatePagedResults>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of tax countries
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetTaxCountries
		 * @path <API Root>/Tax/TaxCountries
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TaxCountryPagedResults>}
		 * @public
		 */
		GetTaxCountries = (routeParams?: GetTaxCountriesDto) => this.$http<TaxCountryPagedResults>({
			url: [this.rootUrl, "Tax", "TaxCountries"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific tax country
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetTaxCountryByID
		 * @path <API Root>/Tax/TaxCountry/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TaxCountryModel>}
		 * @public
		 */
		GetTaxCountryByID = (id: number) => this.$http<TaxCountryModel>({
			url: [this.rootUrl, "Tax", "TaxCountry", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific tax district
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetTaxDistrictByID
		 * @path <API Root>/Tax/TaxDistrict/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TaxDistrictModel>}
		 * @public
		 */
		GetTaxDistrictByID = (id: number) => this.$http<TaxDistrictModel>({
			url: [this.rootUrl, "Tax", "TaxDistrict", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of tax districts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetTaxDistricts
		 * @path <API Root>/Tax/TaxDistricts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TaxDistrictPagedResults>}
		 * @public
		 */
		GetTaxDistricts = (routeParams?: GetTaxDistrictsDto) => this.$http<TaxDistrictPagedResults>({
			url: [this.rootUrl, "Tax", "TaxDistricts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific tax region
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetTaxRegionByID
		 * @path <API Root>/Tax/TaxRegion/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TaxRegionModel>}
		 * @public
		 */
		GetTaxRegionByID = (id: number) => this.$http<TaxRegionModel>({
			url: [this.rootUrl, "Tax", "TaxRegion", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of tax regions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetTaxRegions
		 * @path <API Root>/Tax/TaxRegions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TaxRegionPagedResults>}
		 * @public
		 */
		GetTaxRegions = (routeParams?: GetTaxRegionsDto) => this.$http<TaxRegionPagedResults>({
			url: [this.rootUrl, "Tax", "TaxRegions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific historical tax rate from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateHistoricalTaxRateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateHistoricalTaxRateByID
		 * @path <API Root>/Tax/HistoricalTaxRate/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateHistoricalTaxRateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRate", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific tax country from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateTaxCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateTaxCountryByID
		 * @path <API Root>/Tax/TaxCountry/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateTaxCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxCountry", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific tax district from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateTaxDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateTaxDistrictByID
		 * @path <API Root>/Tax/TaxDistrict/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateTaxDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxDistrict", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific tax region from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateTaxRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateTaxRegionByID
		 * @path <API Root>/Tax/TaxRegion/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateTaxRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TaxRegion", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Test the connection to the tax provider
		 * @generatedByCSharpType Clarity.Ecommerce.Framework.Taxing.TestConnection
		 * @path <API Root>/Tax/TestConnection
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		TestConnection = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tax", "TestConnection"].join("/"),
			method: "GET",
		});

		/**
		 * Use to update an existing historical tax rate.
		 * @param {@link cef.admin.api.UpdateHistoricalTaxRateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateHistoricalTaxRate
		 * @path <API Root>/Tax/HistoricalTaxRate/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateHistoricalTaxRate = (routeParams?: UpdateHistoricalTaxRateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "HistoricalTaxRate", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing tax country.
		 * @param {@link cef.admin.api.UpdateTaxCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateTaxCountry
		 * @path <API Root>/Tax/TaxCountry/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateTaxCountry = (routeParams?: UpdateTaxCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "TaxCountry", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing tax district.
		 * @param {@link cef.admin.api.UpdateTaxDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateTaxDistrict
		 * @path <API Root>/Tax/TaxDistrict/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateTaxDistrict = (routeParams?: UpdateTaxDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "TaxDistrict", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing tax region.
		 * @param {@link cef.admin.api.UpdateTaxRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateTaxRegion
		 * @path <API Root>/Tax/TaxRegion/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateTaxRegion = (routeParams?: UpdateTaxRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tax", "TaxRegion", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
