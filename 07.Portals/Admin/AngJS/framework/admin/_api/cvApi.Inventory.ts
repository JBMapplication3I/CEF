/**
 * @file framework/admin/_api/cvApi.Inventory.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new inventory location.
	 * @see {@link InventoryLocationModel}
	 * @public
	 */
	export interface CreateInventoryLocationDto extends InventoryLocationModel {
	}
	/**
	 * Use to create a new inventory location region.
	 * @see {@link InventoryLocationRegionModel}
	 * @public
	 */
	export interface CreateInventoryLocationRegionDto extends InventoryLocationRegionModel {
	}
	/**
	 * Use to create a new inventory location section.
	 * @see {@link InventoryLocationSectionModel}
	 * @public
	 */
	export interface CreateInventoryLocationSectionDto extends InventoryLocationSectionModel {
	}
	/**
	 * Use to create a new inventory location user.
	 * @see {@link InventoryLocationUserModel}
	 * @public
	 */
	export interface CreateInventoryLocationUserDto extends InventoryLocationUserModel {
	}
	/**
	 * Use to get a list of inventory location regions
	 * @see {@link InventoryLocationRegionSearchModel}
	 * @public
	 */
	export interface GetInventoryLocationRegionsDto extends InventoryLocationRegionSearchModel {
	}
	/**
	 * Get InventoryLocationRegions by InventoryLocation ID
	 * @see {@link InventoryLocationRegionSearchModel}
	 * @public
	 */
	export interface GetInventoryLocationRegionsByInventoryLocationIDDto extends InventoryLocationRegionSearchModel {
	}
	/**
	 * Use to get a list of inventory locations
	 * @see {@link InventoryLocationSearchModel}
	 * @public
	 */
	export interface GetInventoryLocationsDto extends InventoryLocationSearchModel {
	}
	/**
	 * Use to get a list of inventory location sections
	 * @see {@link InventoryLocationSectionSearchModel}
	 * @public
	 */
	export interface GetInventoryLocationSectionsDto extends InventoryLocationSectionSearchModel {
	}
	/**
	 * Use to get a list of inventory location users
	 * @see {@link InventoryLocationUserSearchModel}
	 * @public
	 */
	export interface GetInventoryLocationUsersDto extends InventoryLocationUserSearchModel {
	}
	/**
	 * Use to update an existing inventory location.
	 * @see {@link InventoryLocationModel}
	 * @public
	 */
	export interface UpdateInventoryLocationDto extends InventoryLocationModel {
	}
	/**
	 * Use to update an existing inventory location region.
	 * @see {@link InventoryLocationRegionModel}
	 * @public
	 */
	export interface UpdateInventoryLocationRegionDto extends InventoryLocationRegionModel {
	}
	/**
	 * Use to update an existing inventory location section.
	 * @see {@link InventoryLocationSectionModel}
	 * @public
	 */
	export interface UpdateInventoryLocationSectionDto extends InventoryLocationSectionModel {
	}
	/**
	 * Use to update an existing inventory location user.
	 * @see {@link InventoryLocationUserModel}
	 * @public
	 */
	export interface UpdateInventoryLocationUserDto extends InventoryLocationUserModel {
	}

	export class Inventory extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all inventory location calls.
		 * @param {@link cef.admin.api.ClearInventoryLocationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearInventoryLocationCache
		 * @path <API Root>/Inventory/InventoryLocation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearInventoryLocationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all inventory location region calls.
		 * @param {@link cef.admin.api.ClearInventoryLocationRegionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearInventoryLocationRegionCache
		 * @path <API Root>/Inventory/InventoryLocationRegion/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearInventoryLocationRegionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegion", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all inventory location section calls.
		 * @param {@link cef.admin.api.ClearInventoryLocationSectionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearInventoryLocationSectionCache
		 * @path <API Root>/Inventory/InventoryLocationSection/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearInventoryLocationSectionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSection", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all inventory location user calls.
		 * @param {@link cef.admin.api.ClearInventoryLocationUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearInventoryLocationUserCache
		 * @path <API Root>/Inventory/InventoryLocationUser/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearInventoryLocationUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUser", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new inventory location.
		 * @param {@link cef.admin.api.CreateInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateInventoryLocation
		 * @path <API Root>/Inventory/InventoryLocation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateInventoryLocation = (routeParams?: CreateInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new inventory location region.
		 * @param {@link cef.admin.api.CreateInventoryLocationRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateInventoryLocationRegion
		 * @path <API Root>/Inventory/InventoryLocationRegion/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateInventoryLocationRegion = (routeParams?: CreateInventoryLocationRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegion", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new inventory location section.
		 * @param {@link cef.admin.api.CreateInventoryLocationSectionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateInventoryLocationSection
		 * @path <API Root>/Inventory/InventoryLocationSection/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateInventoryLocationSection = (routeParams?: CreateInventoryLocationSectionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSection", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new inventory location user.
		 * @param {@link cef.admin.api.CreateInventoryLocationUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateInventoryLocationUser
		 * @path <API Root>/Inventory/InventoryLocationUser/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateInventoryLocationUser = (routeParams?: CreateInventoryLocationUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUser", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific inventory location from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateInventoryLocationByID
		 * @path <API Root>/Inventory/InventoryLocation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific inventory location region from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateInventoryLocationRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateInventoryLocationRegionByID
		 * @path <API Root>/Inventory/InventoryLocationRegion/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateInventoryLocationRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegion", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific inventory location section from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateInventoryLocationSectionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateInventoryLocationSectionByID
		 * @path <API Root>/Inventory/InventoryLocationSection/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateInventoryLocationSectionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSection", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific inventory location user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateInventoryLocationUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateInventoryLocationUserByID
		 * @path <API Root>/Inventory/InventoryLocationUser/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateInventoryLocationUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUser", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific inventory location from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteInventoryLocationByID
		 * @path <API Root>/Inventory/InventoryLocation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific inventory location region from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteInventoryLocationRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteInventoryLocationRegionByID
		 * @path <API Root>/Inventory/InventoryLocationRegion/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteInventoryLocationRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegion", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific inventory location section from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteInventoryLocationSectionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteInventoryLocationSectionByID
		 * @path <API Root>/Inventory/InventoryLocationSection/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteInventoryLocationSectionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSection", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific inventory location user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteInventoryLocationUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteInventoryLocationUserByID
		 * @path <API Root>/Inventory/InventoryLocationUser/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteInventoryLocationUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUser", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific inventory location
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationByID
		 * @path <API Root>/Inventory/InventoryLocation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationModel>}
		 * @public
		 */
		GetInventoryLocationByID = (id: number) => this.$http<InventoryLocationModel>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific inventory location region
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationRegionByID
		 * @path <API Root>/Inventory/InventoryLocationRegion/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationRegionModel>}
		 * @public
		 */
		GetInventoryLocationRegionByID = (id: number) => this.$http<InventoryLocationRegionModel>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegion", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of inventory location regions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationRegions
		 * @path <API Root>/Inventory/InventoryLocationRegions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationRegionPagedResults>}
		 * @public
		 */
		GetInventoryLocationRegions = (routeParams?: GetInventoryLocationRegionsDto) => this.$http<InventoryLocationRegionPagedResults>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get InventoryLocationRegions by InventoryLocation ID
		 * @param {@link cef.admin.api.GetInventoryLocationRegionsByInventoryLocationIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationRegionsByInventoryLocationID
		 * @path <API Root>/Inventory/InventoryLocation/Regions/ByInventoryLocationID
		 * @verb POST
		 * @returns {ng.IHttpPromise<InventoryLocationRegionPagedResults>}
		 * @public
		 */
		GetInventoryLocationRegionsByInventoryLocationID = (routeParams?: GetInventoryLocationRegionsByInventoryLocationIDDto) => this.$http<InventoryLocationRegionPagedResults>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "Regions", "ByInventoryLocationID"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a list of inventory locations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocations
		 * @path <API Root>/Inventory/InventoryLocations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationPagedResults>}
		 * @public
		 */
		GetInventoryLocations = (routeParams?: GetInventoryLocationsDto) => this.$http<InventoryLocationPagedResults>({
			url: [this.rootUrl, "Inventory", "InventoryLocations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific inventory location section
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationSectionByID
		 * @path <API Root>/Inventory/InventoryLocationSection/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationSectionModel>}
		 * @public
		 */
		GetInventoryLocationSectionByID = (id: number) => this.$http<InventoryLocationSectionModel>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSection", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of inventory location sections
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationSections
		 * @path <API Root>/Inventory/InventoryLocationSections
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationSectionPagedResults>}
		 * @public
		 */
		GetInventoryLocationSections = (routeParams?: GetInventoryLocationSectionsDto) => this.$http<InventoryLocationSectionPagedResults>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSections"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific inventory location user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationUserByID
		 * @path <API Root>/Inventory/InventoryLocationUser/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationUserModel>}
		 * @public
		 */
		GetInventoryLocationUserByID = (id: number) => this.$http<InventoryLocationUserModel>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUser", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of inventory location users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetInventoryLocationUsers
		 * @path <API Root>/Inventory/InventoryLocationUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<InventoryLocationUserPagedResults>}
		 * @public
		 */
		GetInventoryLocationUsers = (routeParams?: GetInventoryLocationUsersDto) => this.$http<InventoryLocationUserPagedResults>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific inventory location from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateInventoryLocationByID
		 * @path <API Root>/Inventory/InventoryLocation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific inventory location region from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateInventoryLocationRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateInventoryLocationRegionByID
		 * @path <API Root>/Inventory/InventoryLocationRegion/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateInventoryLocationRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegion", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific inventory location section from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateInventoryLocationSectionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateInventoryLocationSectionByID
		 * @path <API Root>/Inventory/InventoryLocationSection/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateInventoryLocationSectionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSection", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific inventory location user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateInventoryLocationUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateInventoryLocationUserByID
		 * @path <API Root>/Inventory/InventoryLocationUser/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateInventoryLocationUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUser", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing inventory location.
		 * @param {@link cef.admin.api.UpdateInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateInventoryLocation
		 * @path <API Root>/Inventory/InventoryLocation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateInventoryLocation = (routeParams?: UpdateInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing inventory location region.
		 * @param {@link cef.admin.api.UpdateInventoryLocationRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateInventoryLocationRegion
		 * @path <API Root>/Inventory/InventoryLocationRegion/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateInventoryLocationRegion = (routeParams?: UpdateInventoryLocationRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocationRegion", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing inventory location section.
		 * @param {@link cef.admin.api.UpdateInventoryLocationSectionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateInventoryLocationSection
		 * @path <API Root>/Inventory/InventoryLocationSection/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateInventoryLocationSection = (routeParams?: UpdateInventoryLocationSectionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocationSection", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing inventory location user.
		 * @param {@link cef.admin.api.UpdateInventoryLocationUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateInventoryLocationUser
		 * @path <API Root>/Inventory/InventoryLocationUser/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateInventoryLocationUser = (routeParams?: UpdateInventoryLocationUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Inventory", "InventoryLocationUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
