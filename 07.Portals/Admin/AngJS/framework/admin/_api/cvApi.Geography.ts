/**
 * @file framework/admin/_api/cvApi.Geography.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Check if this Code exists and return the id if it does (null if it does not)
	 * @public
	 */
	export interface CheckCountryExistsByCodeDto {
		/** The Country Code to look up */
		Code: string;
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckCountryExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Code exists and return the id if it does (null if it does not)
	 * @public
	 */
	export interface CheckRegionExistsByCodeDto {
		Code: string;
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckRegionExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to create a new address.
	 * @see {@link AddressModel}
	 * @public
	 */
	export interface CreateAddressDto extends AddressModel {
	}
	/**
	 * Use to add an address in the address book
	 * @see {@link AccountContactModel}
	 * @public
	 */
	export interface CreateAddressInBookDto extends AccountContactModel {
	}
	/**
	 * Use to create a new country.
	 * @see {@link CountryModel}
	 * @public
	 */
	export interface CreateCountryDto extends CountryModel {
	}
	/**
	 * Use to create a new country currency.
	 * @see {@link CountryCurrencyModel}
	 * @public
	 */
	export interface CreateCountryCurrencyDto extends CountryCurrencyModel {
	}
	/**
	 * Use to create a new country image.
	 * @see {@link CountryImageModel}
	 * @public
	 */
	export interface CreateCountryImageDto extends CountryImageModel {
	}
	/**
	 * Use to create a new country image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCountryImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new country language.
	 * @see {@link CountryLanguageModel}
	 * @public
	 */
	export interface CreateCountryLanguageDto extends CountryLanguageModel {
	}
	/**
	 * Use to create a new district.
	 * @see {@link DistrictModel}
	 * @public
	 */
	export interface CreateDistrictDto extends DistrictModel {
	}
	/**
	 * Use to create a new district currency.
	 * @see {@link DistrictCurrencyModel}
	 * @public
	 */
	export interface CreateDistrictCurrencyDto extends DistrictCurrencyModel {
	}
	/**
	 * Use to create a new district image.
	 * @see {@link DistrictImageModel}
	 * @public
	 */
	export interface CreateDistrictImageDto extends DistrictImageModel {
	}
	/**
	 * Use to create a new district image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateDistrictImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new district language.
	 * @see {@link DistrictLanguageModel}
	 * @public
	 */
	export interface CreateDistrictLanguageDto extends DistrictLanguageModel {
	}
	/**
	 * Use to create a new historical address validation.
	 * @see {@link HistoricalAddressValidationModel}
	 * @public
	 */
	export interface CreateHistoricalAddressValidationDto extends HistoricalAddressValidationModel {
	}
	/**
	 * Use to create a new phone prefix lookup.
	 * @see {@link PhonePrefixLookupModel}
	 * @public
	 */
	export interface CreatePhonePrefixLookupDto extends PhonePrefixLookupModel {
	}
	/**
	 * Use to create a new region.
	 * @see {@link RegionModel}
	 * @public
	 */
	export interface CreateRegionDto extends RegionModel {
	}
	/**
	 * Use to create a new region currency.
	 * @see {@link RegionCurrencyModel}
	 * @public
	 */
	export interface CreateRegionCurrencyDto extends RegionCurrencyModel {
	}
	/**
	 * Use to create a new region image.
	 * @see {@link RegionImageModel}
	 * @public
	 */
	export interface CreateRegionImageDto extends RegionImageModel {
	}
	/**
	 * Use to create a new region image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateRegionImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new region language.
	 * @see {@link RegionLanguageModel}
	 * @public
	 */
	export interface CreateRegionLanguageDto extends RegionLanguageModel {
	}
	/**
	 * Use to create a new zip code.
	 * @see {@link ZipCodeModel}
	 * @public
	 */
	export interface CreateZipCodeDto extends ZipCodeModel {
	}
	/**
	 * Use to get a list of addresses
	 * @see {@link AddressSearchModel}
	 * @public
	 */
	export interface GetAddressesDto extends AddressSearchModel {
	}
	/**
	 * Use to get a list of countries
	 * @see {@link CountrySearchModel}
	 * @public
	 */
	export interface GetCountriesDto extends CountrySearchModel {
	}
	/**
	 * Use to get a list of country currencies
	 * @see {@link CountryCurrencySearchModel}
	 * @public
	 */
	export interface GetCountryCurrenciesDto extends CountryCurrencySearchModel {
	}
	/**
	 * Use to get a list of country images
	 * @see {@link CountryImageSearchModel}
	 * @public
	 */
	export interface GetCountryImagesDto extends CountryImageSearchModel {
	}
	/**
	 * Use to get a list of country image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCountryImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of country languages
	 * @see {@link CountryLanguageSearchModel}
	 * @public
	 */
	export interface GetCountryLanguagesDto extends CountryLanguageSearchModel {
	}
	/**
	 * Use to get a list of district currencies
	 * @see {@link DistrictCurrencySearchModel}
	 * @public
	 */
	export interface GetDistrictCurrenciesDto extends DistrictCurrencySearchModel {
	}
	/**
	 * Use to get a list of district images
	 * @see {@link DistrictImageSearchModel}
	 * @public
	 */
	export interface GetDistrictImagesDto extends DistrictImageSearchModel {
	}
	/**
	 * Use to get a list of district image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetDistrictImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of district languages
	 * @see {@link DistrictLanguageSearchModel}
	 * @public
	 */
	export interface GetDistrictLanguagesDto extends DistrictLanguageSearchModel {
	}
	/**
	 * Use to get a list of districts
	 * @see {@link DistrictSearchModel}
	 * @public
	 */
	export interface GetDistrictsDto extends DistrictSearchModel {
	}
	/**
	 * Use to get a list of historical address validations
	 * @see {@link HistoricalAddressValidationSearchModel}
	 * @public
	 */
	export interface GetHistoricalAddressValidationsDto extends HistoricalAddressValidationSearchModel {
	}
	/**
	 * Use to get a list of phone prefix lookups
	 * @see {@link PhonePrefixLookupSearchModel}
	 * @public
	 */
	export interface GetPhonePrefixLookupsDto extends PhonePrefixLookupSearchModel {
	}
	/**
	 * Use to get a list of region currencies
	 * @see {@link RegionCurrencySearchModel}
	 * @public
	 */
	export interface GetRegionCurrenciesDto extends RegionCurrencySearchModel {
	}
	/**
	 * Use to get a list of region images
	 * @see {@link RegionImageSearchModel}
	 * @public
	 */
	export interface GetRegionImagesDto extends RegionImageSearchModel {
	}
	/**
	 * Use to get a list of region image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetRegionImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of region languages
	 * @see {@link RegionLanguageSearchModel}
	 * @public
	 */
	export interface GetRegionLanguagesDto extends RegionLanguageSearchModel {
	}
	/**
	 * Use to get a list of regions
	 * @see {@link RegionSearchModel}
	 * @public
	 */
	export interface GetRegionsDto extends RegionSearchModel {
	}
	/**
	 * Use to get a list of zip codes
	 * @see {@link ZipCodeSearchModel}
	 * @public
	 */
	export interface GetZipCodesDto extends ZipCodeSearchModel {
	}
	/**
	 * Validates if the region is in a restricted region.
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface RestrictedRegionCheckDto extends ImplementsNameBase {
		CountryID: number;
		Code: string;
		RegionID: number;
	}
	/**
	 * Use to get geographical data from the phone number
	 * @public
	 */
	export interface ReversePhonePrefixToCityRegionCountryDto {
		/** The prefix, will be limited to 5 characters ignoring any symbols or spaces. */
		Prefix: string;
	}
	/**
	 * Use to update an existing address.
	 * @see {@link AddressModel}
	 * @public
	 */
	export interface UpdateAddressDto extends AddressModel {
	}
	/**
	 * Use to update an existing country.
	 * @see {@link CountryModel}
	 * @public
	 */
	export interface UpdateCountryDto extends CountryModel {
	}
	/**
	 * Use to update an existing country currency.
	 * @see {@link CountryCurrencyModel}
	 * @public
	 */
	export interface UpdateCountryCurrencyDto extends CountryCurrencyModel {
	}
	/**
	 * Use to update an existing country image.
	 * @see {@link CountryImageModel}
	 * @public
	 */
	export interface UpdateCountryImageDto extends CountryImageModel {
	}
	/**
	 * Use to update an existing country image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCountryImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing country language.
	 * @see {@link CountryLanguageModel}
	 * @public
	 */
	export interface UpdateCountryLanguageDto extends CountryLanguageModel {
	}
	/**
	 * Use to update an existing district.
	 * @see {@link DistrictModel}
	 * @public
	 */
	export interface UpdateDistrictDto extends DistrictModel {
	}
	/**
	 * Use to update an existing district currency.
	 * @see {@link DistrictCurrencyModel}
	 * @public
	 */
	export interface UpdateDistrictCurrencyDto extends DistrictCurrencyModel {
	}
	/**
	 * Use to update an existing district image.
	 * @see {@link DistrictImageModel}
	 * @public
	 */
	export interface UpdateDistrictImageDto extends DistrictImageModel {
	}
	/**
	 * Use to update an existing district image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateDistrictImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing district language.
	 * @see {@link DistrictLanguageModel}
	 * @public
	 */
	export interface UpdateDistrictLanguageDto extends DistrictLanguageModel {
	}
	/**
	 * Use to update an existing historical address validation.
	 * @see {@link HistoricalAddressValidationModel}
	 * @public
	 */
	export interface UpdateHistoricalAddressValidationDto extends HistoricalAddressValidationModel {
	}
	/**
	 * Use to update an existing phone prefix lookup.
	 * @see {@link PhonePrefixLookupModel}
	 * @public
	 */
	export interface UpdatePhonePrefixLookupDto extends PhonePrefixLookupModel {
	}
	/**
	 * Use to update an existing region.
	 * @see {@link RegionModel}
	 * @public
	 */
	export interface UpdateRegionDto extends RegionModel {
	}
	/**
	 * Use to update an existing region currency.
	 * @see {@link RegionCurrencyModel}
	 * @public
	 */
	export interface UpdateRegionCurrencyDto extends RegionCurrencyModel {
	}
	/**
	 * Use to update an existing region image.
	 * @see {@link RegionImageModel}
	 * @public
	 */
	export interface UpdateRegionImageDto extends RegionImageModel {
	}
	/**
	 * Use to update an existing region image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateRegionImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing region language.
	 * @see {@link RegionLanguageModel}
	 * @public
	 */
	export interface UpdateRegionLanguageDto extends RegionLanguageModel {
	}
	/**
	 * Use to update an existing zip code.
	 * @see {@link ZipCodeModel}
	 * @public
	 */
	export interface UpdateZipCodeDto extends ZipCodeModel {
	}

	export class Geography extends ServiceStackRoute {
		/**
		 * Check if this Code exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByCode
		 * @path <API Root>/Geography/Country/Exists/Code
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCountryExistsByCode = (routeParams: CheckCountryExistsByCodeDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Country", "Exists", "Code"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByKey
		 * @path <API Root>/Geography/Country/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCountryExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Country", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByName
		 * @path <API Root>/Geography/Country/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCountryExistsByName = (routeParams?: CheckCountryExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Country", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Code exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByCode
		 * @path <API Root>/Geography/Region/Exists/Code
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckRegionExistsByCode = (routeParams: CheckRegionExistsByCodeDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Region", "Exists", "Code"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByKey
		 * @path <API Root>/Geography/Region/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckRegionExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Region", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByName
		 * @path <API Root>/Geography/Region/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckRegionExistsByName = (routeParams?: CheckRegionExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Region", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all address calls.
		 * @param {@link cef.admin.api.ClearAddressCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAddressCache
		 * @path <API Root>/Geography/Address/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAddressCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "Address", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all country calls.
		 * @param {@link cef.admin.api.ClearCountryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCountryCache
		 * @path <API Root>/Geography/Country/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCountryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "Country", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all country currency calls.
		 * @param {@link cef.admin.api.ClearCountryCurrencyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCountryCurrencyCache
		 * @path <API Root>/Geography/CountryCurrency/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCountryCurrencyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "CountryCurrency", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all country image calls.
		 * @param {@link cef.admin.api.ClearCountryImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCountryImageCache
		 * @path <API Root>/Geography/CountryImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCountryImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "CountryImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all country image type calls.
		 * @param {@link cef.admin.api.ClearCountryImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCountryImageTypeCache
		 * @path <API Root>/Geography/CountryImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCountryImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "CountryImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all country language calls.
		 * @param {@link cef.admin.api.ClearCountryLanguageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCountryLanguageCache
		 * @path <API Root>/Geography/CountryLanguage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCountryLanguageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "CountryLanguage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all district calls.
		 * @param {@link cef.admin.api.ClearDistrictCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDistrictCache
		 * @path <API Root>/Geography/District/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDistrictCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "District", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all district currency calls.
		 * @param {@link cef.admin.api.ClearDistrictCurrencyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDistrictCurrencyCache
		 * @path <API Root>/Geography/DistrictCurrency/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDistrictCurrencyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "DistrictCurrency", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all district image calls.
		 * @param {@link cef.admin.api.ClearDistrictImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDistrictImageCache
		 * @path <API Root>/Geography/DistrictImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDistrictImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "DistrictImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all district image type calls.
		 * @param {@link cef.admin.api.ClearDistrictImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDistrictImageTypeCache
		 * @path <API Root>/Geography/DistrictImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDistrictImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "DistrictImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all district language calls.
		 * @param {@link cef.admin.api.ClearDistrictLanguageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDistrictLanguageCache
		 * @path <API Root>/Geography/DistrictLanguage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDistrictLanguageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "DistrictLanguage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all historical address validation calls.
		 * @param {@link cef.admin.api.ClearHistoricalAddressValidationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearHistoricalAddressValidationCache
		 * @path <API Root>/Geography/HistoricalAddressValidation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearHistoricalAddressValidationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all phone prefix lookup calls.
		 * @param {@link cef.admin.api.ClearPhonePrefixLookupCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPhonePrefixLookupCache
		 * @path <API Root>/Geography/PhonePrefixLookup/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPhonePrefixLookupCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookup", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all region calls.
		 * @param {@link cef.admin.api.ClearRegionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRegionCache
		 * @path <API Root>/Geography/Region/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRegionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "Region", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all region currency calls.
		 * @param {@link cef.admin.api.ClearRegionCurrencyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRegionCurrencyCache
		 * @path <API Root>/Geography/RegionCurrency/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRegionCurrencyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "RegionCurrency", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all region image calls.
		 * @param {@link cef.admin.api.ClearRegionImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRegionImageCache
		 * @path <API Root>/Geography/RegionImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRegionImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "RegionImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all region image type calls.
		 * @param {@link cef.admin.api.ClearRegionImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRegionImageTypeCache
		 * @path <API Root>/Geography/RegionImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRegionImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "RegionImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all region language calls.
		 * @param {@link cef.admin.api.ClearRegionLanguageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRegionLanguageCache
		 * @path <API Root>/Geography/RegionLanguage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRegionLanguageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "RegionLanguage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all zip code calls.
		 * @param {@link cef.admin.api.ClearZipCodeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearZipCodeCache
		 * @path <API Root>/Geography/ZipCode/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearZipCodeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Geography", "ZipCode", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new address.
		 * @param {@link cef.admin.api.CreateAddressDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAddress
		 * @path <API Root>/Geography/Address/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAddress = (routeParams?: CreateAddressDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "Address", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to add an address in the address book
		 * @param {@link cef.admin.api.CreateAddressInBookDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAddressInBook
		 * @path <API Root>/Geography/AddressBook/Create
		 * @verb POST
		 * @returns {ng.IHttpPromise<AccountContactModel>}
		 * @public
		 */
		CreateAddressInBook = (routeParams?: CreateAddressInBookDto) => this.$http<AccountContactModel>({
			url: [this.rootUrl, "Geography", "AddressBook", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new country.
		 * @param {@link cef.admin.api.CreateCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCountry
		 * @path <API Root>/Geography/Country/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCountry = (routeParams?: CreateCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "Country", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new country currency.
		 * @param {@link cef.admin.api.CreateCountryCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCountryCurrency
		 * @path <API Root>/Geography/CountryCurrency/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCountryCurrency = (routeParams?: CreateCountryCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryCurrency", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new country image.
		 * @param {@link cef.admin.api.CreateCountryImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCountryImage
		 * @path <API Root>/Geography/CountryImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCountryImage = (routeParams?: CreateCountryImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new country image type.
		 * @param {@link cef.admin.api.CreateCountryImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCountryImageType
		 * @path <API Root>/Geography/CountryImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCountryImageType = (routeParams?: CreateCountryImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new country language.
		 * @param {@link cef.admin.api.CreateCountryLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCountryLanguage
		 * @path <API Root>/Geography/CountryLanguage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCountryLanguage = (routeParams?: CreateCountryLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryLanguage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new district.
		 * @param {@link cef.admin.api.CreateDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDistrict
		 * @path <API Root>/Geography/District/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDistrict = (routeParams?: CreateDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "District", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new district currency.
		 * @param {@link cef.admin.api.CreateDistrictCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDistrictCurrency
		 * @path <API Root>/Geography/DistrictCurrency/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDistrictCurrency = (routeParams?: CreateDistrictCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictCurrency", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new district image.
		 * @param {@link cef.admin.api.CreateDistrictImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDistrictImage
		 * @path <API Root>/Geography/DistrictImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDistrictImage = (routeParams?: CreateDistrictImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new district image type.
		 * @param {@link cef.admin.api.CreateDistrictImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDistrictImageType
		 * @path <API Root>/Geography/DistrictImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDistrictImageType = (routeParams?: CreateDistrictImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new district language.
		 * @param {@link cef.admin.api.CreateDistrictLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDistrictLanguage
		 * @path <API Root>/Geography/DistrictLanguage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDistrictLanguage = (routeParams?: CreateDistrictLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictLanguage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new historical address validation.
		 * @param {@link cef.admin.api.CreateHistoricalAddressValidationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateHistoricalAddressValidation
		 * @path <API Root>/Geography/HistoricalAddressValidation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateHistoricalAddressValidation = (routeParams?: CreateHistoricalAddressValidationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new phone prefix lookup.
		 * @param {@link cef.admin.api.CreatePhonePrefixLookupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePhonePrefixLookup
		 * @path <API Root>/Geography/PhonePrefixLookup/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePhonePrefixLookup = (routeParams?: CreatePhonePrefixLookupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookup", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new region.
		 * @param {@link cef.admin.api.CreateRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRegion
		 * @path <API Root>/Geography/Region/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRegion = (routeParams?: CreateRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "Region", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new region currency.
		 * @param {@link cef.admin.api.CreateRegionCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRegionCurrency
		 * @path <API Root>/Geography/RegionCurrency/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRegionCurrency = (routeParams?: CreateRegionCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionCurrency", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new region image.
		 * @param {@link cef.admin.api.CreateRegionImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRegionImage
		 * @path <API Root>/Geography/RegionImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRegionImage = (routeParams?: CreateRegionImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new region image type.
		 * @param {@link cef.admin.api.CreateRegionImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRegionImageType
		 * @path <API Root>/Geography/RegionImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRegionImageType = (routeParams?: CreateRegionImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new region language.
		 * @param {@link cef.admin.api.CreateRegionLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRegionLanguage
		 * @path <API Root>/Geography/RegionLanguage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRegionLanguage = (routeParams?: CreateRegionLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionLanguage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new zip code.
		 * @param {@link cef.admin.api.CreateZipCodeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateZipCode
		 * @path <API Root>/Geography/ZipCode/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateZipCode = (routeParams?: CreateZipCodeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "ZipCode", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific address from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAddressByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAddressByID
		 * @path <API Root>/Geography/Address/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAddressByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Address", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific country from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCountryByID
		 * @path <API Root>/Geography/Country/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Country", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific country currency from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCountryCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCountryCurrencyByID
		 * @path <API Root>/Geography/CountryCurrency/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCountryCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryCurrency", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific country image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCountryImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCountryImageByID
		 * @path <API Root>/Geography/CountryImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCountryImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific country image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCountryImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCountryImageTypeByID
		 * @path <API Root>/Geography/CountryImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCountryImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific country language from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCountryLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCountryLanguageByID
		 * @path <API Root>/Geography/CountryLanguage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCountryLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryLanguage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific district from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDistrictByID
		 * @path <API Root>/Geography/District/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "District", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific district currency from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDistrictCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDistrictCurrencyByID
		 * @path <API Root>/Geography/DistrictCurrency/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDistrictCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictCurrency", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific district image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDistrictImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDistrictImageByID
		 * @path <API Root>/Geography/DistrictImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDistrictImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific district image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDistrictImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDistrictImageTypeByID
		 * @path <API Root>/Geography/DistrictImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDistrictImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific district language from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDistrictLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDistrictLanguageByID
		 * @path <API Root>/Geography/DistrictLanguage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDistrictLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictLanguage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific historical address validation from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateHistoricalAddressValidationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateHistoricalAddressValidationByID
		 * @path <API Root>/Geography/HistoricalAddressValidation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateHistoricalAddressValidationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific phone prefix lookup from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePhonePrefixLookupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePhonePrefixLookupByID
		 * @path <API Root>/Geography/PhonePrefixLookup/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePhonePrefixLookupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookup", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific region from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRegionByID
		 * @path <API Root>/Geography/Region/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Region", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific region currency from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRegionCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRegionCurrencyByID
		 * @path <API Root>/Geography/RegionCurrency/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRegionCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionCurrency", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific region image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRegionImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRegionImageByID
		 * @path <API Root>/Geography/RegionImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRegionImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific region image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRegionImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRegionImageTypeByID
		 * @path <API Root>/Geography/RegionImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRegionImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific region language from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRegionLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRegionLanguageByID
		 * @path <API Root>/Geography/RegionLanguage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRegionLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionLanguage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific zip code from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateZipCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateZipCodeByID
		 * @path <API Root>/Geography/ZipCode/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateZipCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "ZipCode", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific address from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAddressByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAddressByID
		 * @path <API Root>/Geography/Address/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAddressByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Address", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific country from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCountryByID
		 * @path <API Root>/Geography/Country/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Country", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific country currency from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCountryCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCountryCurrencyByID
		 * @path <API Root>/Geography/CountryCurrency/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCountryCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryCurrency", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific country image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCountryImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCountryImageByID
		 * @path <API Root>/Geography/CountryImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCountryImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific country image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCountryImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCountryImageTypeByID
		 * @path <API Root>/Geography/CountryImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCountryImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific country language from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCountryLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCountryLanguageByID
		 * @path <API Root>/Geography/CountryLanguage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCountryLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryLanguage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific district from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDistrictByID
		 * @path <API Root>/Geography/District/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "District", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific district currency from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDistrictCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDistrictCurrencyByID
		 * @path <API Root>/Geography/DistrictCurrency/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDistrictCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictCurrency", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific district image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDistrictImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDistrictImageByID
		 * @path <API Root>/Geography/DistrictImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDistrictImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific district image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDistrictImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDistrictImageTypeByID
		 * @path <API Root>/Geography/DistrictImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDistrictImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific district language from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDistrictLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDistrictLanguageByID
		 * @path <API Root>/Geography/DistrictLanguage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDistrictLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictLanguage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific historical address validation from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteHistoricalAddressValidationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteHistoricalAddressValidationByID
		 * @path <API Root>/Geography/HistoricalAddressValidation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteHistoricalAddressValidationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific phone prefix lookup from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePhonePrefixLookupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePhonePrefixLookupByID
		 * @path <API Root>/Geography/PhonePrefixLookup/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePhonePrefixLookupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookup", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific region from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRegionByID
		 * @path <API Root>/Geography/Region/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Region", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific region currency from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRegionCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRegionCurrencyByID
		 * @path <API Root>/Geography/RegionCurrency/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRegionCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionCurrency", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific region image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRegionImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRegionImageByID
		 * @path <API Root>/Geography/RegionImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRegionImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific region image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRegionImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRegionImageTypeByID
		 * @path <API Root>/Geography/RegionImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRegionImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific region language from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRegionLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRegionLanguageByID
		 * @path <API Root>/Geography/RegionLanguage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRegionLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionLanguage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific zip code from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteZipCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteZipCodeByID
		 * @path <API Root>/Geography/ZipCode/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteZipCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "ZipCode", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use get the address book for a specific account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAddressBookAsAdmin
		 * @path <API Root>/Geography/AddressBookAsAdmin/{AccountID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AccountContactModel>>}
		 * @public
		 */
		GetAddressBookAsAdmin = (accountID: number) => this.$http<Array<AccountContactModel>>({
			url: [this.rootUrl, "Geography", "AddressBookAsAdmin", accountID].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific address
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAddressByID
		 * @path <API Root>/Geography/Address/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AddressModel>}
		 * @public
		 */
		GetAddressByID = (id: number) => this.$http<AddressModel>({
			url: [this.rootUrl, "Geography", "Address", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of addresses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAddresses
		 * @path <API Root>/Geography/Addresses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AddressPagedResults>}
		 * @public
		 */
		GetAddresses = (routeParams?: GetAddressesDto) => this.$http<AddressPagedResults>({
			url: [this.rootUrl, "Geography", "Addresses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of countries
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountries
		 * @path <API Root>/Geography/Countries
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryPagedResults>}
		 * @public
		 */
		GetCountries = (routeParams?: GetCountriesDto) => this.$http<CountryPagedResults>({
			url: [this.rootUrl, "Geography", "Countries"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific country
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryByID
		 * @path <API Root>/Geography/Country/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryModel>}
		 * @public
		 */
		GetCountryByID = (id: number) => this.$http<CountryModel>({
			url: [this.rootUrl, "Geography", "Country", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of country currencies
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryCurrencies
		 * @path <API Root>/Geography/CountryCurrencies
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryCurrencyPagedResults>}
		 * @public
		 */
		GetCountryCurrencies = (routeParams?: GetCountryCurrenciesDto) => this.$http<CountryCurrencyPagedResults>({
			url: [this.rootUrl, "Geography", "CountryCurrencies"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific country currency
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryCurrencyByID
		 * @path <API Root>/Geography/CountryCurrency/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryCurrencyModel>}
		 * @public
		 */
		GetCountryCurrencyByID = (id: number) => this.$http<CountryCurrencyModel>({
			url: [this.rootUrl, "Geography", "CountryCurrency", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific country image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryImageByID
		 * @path <API Root>/Geography/CountryImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryImageModel>}
		 * @public
		 */
		GetCountryImageByID = (id: number) => this.$http<CountryImageModel>({
			url: [this.rootUrl, "Geography", "CountryImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of country images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryImages
		 * @path <API Root>/Geography/CountryImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryImagePagedResults>}
		 * @public
		 */
		GetCountryImages = (routeParams?: GetCountryImagesDto) => this.$http<CountryImagePagedResults>({
			url: [this.rootUrl, "Geography", "CountryImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific country image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryImageTypeByID
		 * @path <API Root>/Geography/CountryImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCountryImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Geography", "CountryImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of country image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryImageTypes
		 * @path <API Root>/Geography/CountryImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryImageTypePagedResults>}
		 * @public
		 */
		GetCountryImageTypes = (routeParams?: GetCountryImageTypesDto) => this.$http<CountryImageTypePagedResults>({
			url: [this.rootUrl, "Geography", "CountryImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific country language
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryLanguageByID
		 * @path <API Root>/Geography/CountryLanguage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryLanguageModel>}
		 * @public
		 */
		GetCountryLanguageByID = (id: number) => this.$http<CountryLanguageModel>({
			url: [this.rootUrl, "Geography", "CountryLanguage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of country languages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryLanguages
		 * @path <API Root>/Geography/CountryLanguages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryLanguagePagedResults>}
		 * @public
		 */
		GetCountryLanguages = (routeParams?: GetCountryLanguagesDto) => this.$http<CountryLanguagePagedResults>({
			url: [this.rootUrl, "Geography", "CountryLanguages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific district
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictByID
		 * @path <API Root>/Geography/District/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictModel>}
		 * @public
		 */
		GetDistrictByID = (id: number) => this.$http<DistrictModel>({
			url: [this.rootUrl, "Geography", "District", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of district currencies
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictCurrencies
		 * @path <API Root>/Geography/DistrictCurrencies
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictCurrencyPagedResults>}
		 * @public
		 */
		GetDistrictCurrencies = (routeParams?: GetDistrictCurrenciesDto) => this.$http<DistrictCurrencyPagedResults>({
			url: [this.rootUrl, "Geography", "DistrictCurrencies"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific district currency
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictCurrencyByID
		 * @path <API Root>/Geography/DistrictCurrency/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictCurrencyModel>}
		 * @public
		 */
		GetDistrictCurrencyByID = (id: number) => this.$http<DistrictCurrencyModel>({
			url: [this.rootUrl, "Geography", "DistrictCurrency", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific district image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictImageByID
		 * @path <API Root>/Geography/DistrictImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictImageModel>}
		 * @public
		 */
		GetDistrictImageByID = (id: number) => this.$http<DistrictImageModel>({
			url: [this.rootUrl, "Geography", "DistrictImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of district images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictImages
		 * @path <API Root>/Geography/DistrictImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictImagePagedResults>}
		 * @public
		 */
		GetDistrictImages = (routeParams?: GetDistrictImagesDto) => this.$http<DistrictImagePagedResults>({
			url: [this.rootUrl, "Geography", "DistrictImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific district image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictImageTypeByID
		 * @path <API Root>/Geography/DistrictImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetDistrictImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Geography", "DistrictImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of district image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictImageTypes
		 * @path <API Root>/Geography/DistrictImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictImageTypePagedResults>}
		 * @public
		 */
		GetDistrictImageTypes = (routeParams?: GetDistrictImageTypesDto) => this.$http<DistrictImageTypePagedResults>({
			url: [this.rootUrl, "Geography", "DistrictImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific district language
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictLanguageByID
		 * @path <API Root>/Geography/DistrictLanguage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictLanguageModel>}
		 * @public
		 */
		GetDistrictLanguageByID = (id: number) => this.$http<DistrictLanguageModel>({
			url: [this.rootUrl, "Geography", "DistrictLanguage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of district languages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictLanguages
		 * @path <API Root>/Geography/DistrictLanguages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictLanguagePagedResults>}
		 * @public
		 */
		GetDistrictLanguages = (routeParams?: GetDistrictLanguagesDto) => this.$http<DistrictLanguagePagedResults>({
			url: [this.rootUrl, "Geography", "DistrictLanguages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of districts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistricts
		 * @path <API Root>/Geography/Districts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictPagedResults>}
		 * @public
		 */
		GetDistricts = (routeParams?: GetDistrictsDto) => this.$http<DistrictPagedResults>({
			url: [this.rootUrl, "Geography", "Districts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific historical address validation
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetHistoricalAddressValidationByID
		 * @path <API Root>/Geography/HistoricalAddressValidation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<HistoricalAddressValidationModel>}
		 * @public
		 */
		GetHistoricalAddressValidationByID = (id: number) => this.$http<HistoricalAddressValidationModel>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of historical address validations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetHistoricalAddressValidations
		 * @path <API Root>/Geography/HistoricalAddressValidations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<HistoricalAddressValidationPagedResults>}
		 * @public
		 */
		GetHistoricalAddressValidations = (routeParams?: GetHistoricalAddressValidationsDto) => this.$http<HistoricalAddressValidationPagedResults>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific phone prefix lookup
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPhonePrefixLookupByID
		 * @path <API Root>/Geography/PhonePrefixLookup/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PhonePrefixLookupModel>}
		 * @public
		 */
		GetPhonePrefixLookupByID = (id: number) => this.$http<PhonePrefixLookupModel>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookup", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of phone prefix lookups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPhonePrefixLookups
		 * @path <API Root>/Geography/PhonePrefixLookups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PhonePrefixLookupPagedResults>}
		 * @public
		 */
		GetPhonePrefixLookups = (routeParams?: GetPhonePrefixLookupsDto) => this.$http<PhonePrefixLookupPagedResults>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific region
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionByID
		 * @path <API Root>/Geography/Region/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionModel>}
		 * @public
		 */
		GetRegionByID = (id: number) => this.$http<RegionModel>({
			url: [this.rootUrl, "Geography", "Region", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of region currencies
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionCurrencies
		 * @path <API Root>/Geography/RegionCurrencies
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionCurrencyPagedResults>}
		 * @public
		 */
		GetRegionCurrencies = (routeParams?: GetRegionCurrenciesDto) => this.$http<RegionCurrencyPagedResults>({
			url: [this.rootUrl, "Geography", "RegionCurrencies"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific region currency
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionCurrencyByID
		 * @path <API Root>/Geography/RegionCurrency/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionCurrencyModel>}
		 * @public
		 */
		GetRegionCurrencyByID = (id: number) => this.$http<RegionCurrencyModel>({
			url: [this.rootUrl, "Geography", "RegionCurrency", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific region image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionImageByID
		 * @path <API Root>/Geography/RegionImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionImageModel>}
		 * @public
		 */
		GetRegionImageByID = (id: number) => this.$http<RegionImageModel>({
			url: [this.rootUrl, "Geography", "RegionImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of region images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionImages
		 * @path <API Root>/Geography/RegionImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionImagePagedResults>}
		 * @public
		 */
		GetRegionImages = (routeParams?: GetRegionImagesDto) => this.$http<RegionImagePagedResults>({
			url: [this.rootUrl, "Geography", "RegionImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific region image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionImageTypeByID
		 * @path <API Root>/Geography/RegionImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetRegionImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Geography", "RegionImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of region image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionImageTypes
		 * @path <API Root>/Geography/RegionImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionImageTypePagedResults>}
		 * @public
		 */
		GetRegionImageTypes = (routeParams?: GetRegionImageTypesDto) => this.$http<RegionImageTypePagedResults>({
			url: [this.rootUrl, "Geography", "RegionImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific region language
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionLanguageByID
		 * @path <API Root>/Geography/RegionLanguage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionLanguageModel>}
		 * @public
		 */
		GetRegionLanguageByID = (id: number) => this.$http<RegionLanguageModel>({
			url: [this.rootUrl, "Geography", "RegionLanguage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of region languages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionLanguages
		 * @path <API Root>/Geography/RegionLanguages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionLanguagePagedResults>}
		 * @public
		 */
		GetRegionLanguages = (routeParams?: GetRegionLanguagesDto) => this.$http<RegionLanguagePagedResults>({
			url: [this.rootUrl, "Geography", "RegionLanguages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of regions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegions
		 * @path <API Root>/Geography/Regions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionPagedResults>}
		 * @public
		 */
		GetRegions = (routeParams?: GetRegionsDto) => this.$http<RegionPagedResults>({
			url: [this.rootUrl, "Geography", "Regions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of the world's time zones
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetTimeZonesList
		 * @path <API Root>/Geography/TimeZonesList
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<TimeZoneInfo>>}
		 * @public
		 */
		GetTimeZonesList = () => this.$http<Array<TimeZoneInfo>>({
			url: [this.rootUrl, "Geography", "TimeZonesList"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific zip code
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZipCodeByID
		 * @path <API Root>/Geography/ZipCode/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ZipCodeModel>}
		 * @public
		 */
		GetZipCodeByID = (id: number) => this.$http<ZipCodeModel>({
			url: [this.rootUrl, "Geography", "ZipCode", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of zip codes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZipCodes
		 * @path <API Root>/Geography/ZipCodes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ZipCodePagedResults>}
		 * @public
		 */
		GetZipCodes = (routeParams?: GetZipCodesDto) => this.$http<ZipCodePagedResults>({
			url: [this.rootUrl, "Geography", "ZipCodes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific address from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAddressByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAddressByID
		 * @path <API Root>/Geography/Address/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAddressByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Address", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific country from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCountryByID
		 * @path <API Root>/Geography/Country/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Country", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific country currency from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCountryCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCountryCurrencyByID
		 * @path <API Root>/Geography/CountryCurrency/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCountryCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryCurrency", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific country image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCountryImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCountryImageByID
		 * @path <API Root>/Geography/CountryImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCountryImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific country image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCountryImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCountryImageTypeByID
		 * @path <API Root>/Geography/CountryImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCountryImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific country language from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCountryLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCountryLanguageByID
		 * @path <API Root>/Geography/CountryLanguage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCountryLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "CountryLanguage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific district from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDistrictByID
		 * @path <API Root>/Geography/District/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "District", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific district currency from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDistrictCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDistrictCurrencyByID
		 * @path <API Root>/Geography/DistrictCurrency/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDistrictCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictCurrency", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific district image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDistrictImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDistrictImageByID
		 * @path <API Root>/Geography/DistrictImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDistrictImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific district image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDistrictImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDistrictImageTypeByID
		 * @path <API Root>/Geography/DistrictImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDistrictImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific district language from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDistrictLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDistrictLanguageByID
		 * @path <API Root>/Geography/DistrictLanguage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDistrictLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "DistrictLanguage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific historical address validation from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateHistoricalAddressValidationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateHistoricalAddressValidationByID
		 * @path <API Root>/Geography/HistoricalAddressValidation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateHistoricalAddressValidationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific phone prefix lookup from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePhonePrefixLookupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePhonePrefixLookupByID
		 * @path <API Root>/Geography/PhonePrefixLookup/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePhonePrefixLookupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookup", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific region from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRegionByID
		 * @path <API Root>/Geography/Region/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Region", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific region currency from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRegionCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRegionCurrencyByID
		 * @path <API Root>/Geography/RegionCurrency/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRegionCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionCurrency", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific region image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRegionImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRegionImageByID
		 * @path <API Root>/Geography/RegionImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRegionImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific region image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRegionImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRegionImageTypeByID
		 * @path <API Root>/Geography/RegionImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRegionImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific region language from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRegionLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRegionLanguageByID
		 * @path <API Root>/Geography/RegionLanguage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRegionLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "RegionLanguage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific zip code from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateZipCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateZipCodeByID
		 * @path <API Root>/Geography/ZipCode/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateZipCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "ZipCode", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Validates if the region is in a restricted region.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RestrictedRegionCheck
		 * @path <API Root>/Geography/Region/RestrictedRegionCheck
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RestrictedRegionCheck = (routeParams: RestrictedRegionCheckDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Region", "RestrictedRegionCheck"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get geographical data from the phone number
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReversePhonePrefixToCityRegionCountry
		 * @path <API Root>/Geography/PhonePrefixLookups/ReversePhonePrefixToCityRegionCountry
		 * @verb GET
		 * @returns {ng.IHttpPromise<PhonePrefixLookupPagedResults>}
		 * @public
		 */
		ReversePhonePrefixToCityRegionCountry = (routeParams: ReversePhonePrefixToCityRegionCountryDto) => this.$http<PhonePrefixLookupPagedResults>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookups", "ReversePhonePrefixToCityRegionCountry"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to update an existing address.
		 * @param {@link cef.admin.api.UpdateAddressDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAddress
		 * @path <API Root>/Geography/Address/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAddress = (routeParams?: UpdateAddressDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "Address", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing country.
		 * @param {@link cef.admin.api.UpdateCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCountry
		 * @path <API Root>/Geography/Country/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCountry = (routeParams?: UpdateCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "Country", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing country currency.
		 * @param {@link cef.admin.api.UpdateCountryCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCountryCurrency
		 * @path <API Root>/Geography/CountryCurrency/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCountryCurrency = (routeParams?: UpdateCountryCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryCurrency", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing country image.
		 * @param {@link cef.admin.api.UpdateCountryImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCountryImage
		 * @path <API Root>/Geography/CountryImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCountryImage = (routeParams?: UpdateCountryImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing country image type.
		 * @param {@link cef.admin.api.UpdateCountryImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCountryImageType
		 * @path <API Root>/Geography/CountryImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCountryImageType = (routeParams?: UpdateCountryImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing country language.
		 * @param {@link cef.admin.api.UpdateCountryLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCountryLanguage
		 * @path <API Root>/Geography/CountryLanguage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCountryLanguage = (routeParams?: UpdateCountryLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "CountryLanguage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing district.
		 * @param {@link cef.admin.api.UpdateDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDistrict
		 * @path <API Root>/Geography/District/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDistrict = (routeParams?: UpdateDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "District", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing district currency.
		 * @param {@link cef.admin.api.UpdateDistrictCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDistrictCurrency
		 * @path <API Root>/Geography/DistrictCurrency/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDistrictCurrency = (routeParams?: UpdateDistrictCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictCurrency", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing district image.
		 * @param {@link cef.admin.api.UpdateDistrictImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDistrictImage
		 * @path <API Root>/Geography/DistrictImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDistrictImage = (routeParams?: UpdateDistrictImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing district image type.
		 * @param {@link cef.admin.api.UpdateDistrictImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDistrictImageType
		 * @path <API Root>/Geography/DistrictImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDistrictImageType = (routeParams?: UpdateDistrictImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing district language.
		 * @param {@link cef.admin.api.UpdateDistrictLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDistrictLanguage
		 * @path <API Root>/Geography/DistrictLanguage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDistrictLanguage = (routeParams?: UpdateDistrictLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "DistrictLanguage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing historical address validation.
		 * @param {@link cef.admin.api.UpdateHistoricalAddressValidationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateHistoricalAddressValidation
		 * @path <API Root>/Geography/HistoricalAddressValidation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateHistoricalAddressValidation = (routeParams?: UpdateHistoricalAddressValidationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "HistoricalAddressValidation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing phone prefix lookup.
		 * @param {@link cef.admin.api.UpdatePhonePrefixLookupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePhonePrefixLookup
		 * @path <API Root>/Geography/PhonePrefixLookup/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePhonePrefixLookup = (routeParams?: UpdatePhonePrefixLookupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookup", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing region.
		 * @param {@link cef.admin.api.UpdateRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRegion
		 * @path <API Root>/Geography/Region/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRegion = (routeParams?: UpdateRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "Region", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing region currency.
		 * @param {@link cef.admin.api.UpdateRegionCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRegionCurrency
		 * @path <API Root>/Geography/RegionCurrency/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRegionCurrency = (routeParams?: UpdateRegionCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionCurrency", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing region image.
		 * @param {@link cef.admin.api.UpdateRegionImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRegionImage
		 * @path <API Root>/Geography/RegionImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRegionImage = (routeParams?: UpdateRegionImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing region image type.
		 * @param {@link cef.admin.api.UpdateRegionImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRegionImageType
		 * @path <API Root>/Geography/RegionImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRegionImageType = (routeParams?: UpdateRegionImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing region language.
		 * @param {@link cef.admin.api.UpdateRegionLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRegionLanguage
		 * @path <API Root>/Geography/RegionLanguage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRegionLanguage = (routeParams?: UpdateRegionLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "RegionLanguage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing zip code.
		 * @param {@link cef.admin.api.UpdateZipCodeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateZipCode
		 * @path <API Root>/Geography/ZipCode/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateZipCode = (routeParams?: UpdateZipCodeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Geography", "ZipCode", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
