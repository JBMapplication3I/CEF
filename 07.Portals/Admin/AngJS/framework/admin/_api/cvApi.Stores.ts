/**
 * @file framework/admin/_api/cvApi.Stores.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new site domain.
	 * @see {@link SiteDomainModel}
	 * @public
	 */
	export interface CreateSiteDomainDto extends SiteDomainModel {
	}
	/**
	 * Use to create a new site domain social provider.
	 * @see {@link SiteDomainSocialProviderModel}
	 * @public
	 */
	export interface CreateSiteDomainSocialProviderDto extends SiteDomainSocialProviderModel {
	}
	/**
	 * Use to create a new social provider.
	 * @see {@link SocialProviderModel}
	 * @public
	 */
	export interface CreateSocialProviderDto extends SocialProviderModel {
	}
	/**
	 * Use to create a new store.
	 * @see {@link StoreModel}
	 * @public
	 */
	export interface CreateStoreDto extends StoreModel {
	}
	/**
	 * Use to create a new store account.
	 * @see {@link StoreAccountModel}
	 * @public
	 */
	export interface CreateStoreAccountDto extends StoreAccountModel {
	}
	/**
	 * Use to create a new store badge.
	 * @see {@link StoreBadgeModel}
	 * @public
	 */
	export interface CreateStoreBadgeDto extends StoreBadgeModel {
	}
	/**
	 * Use to create a new store category.
	 * @see {@link StoreCategoryModel}
	 * @public
	 */
	export interface CreateStoreCategoryDto extends StoreCategoryModel {
	}
	/**
	 * Use to create a new store contact.
	 * @see {@link StoreContactModel}
	 * @public
	 */
	export interface CreateStoreContactDto extends StoreContactModel {
	}
	/**
	 * Use to create a new store country.
	 * @see {@link StoreCountryModel}
	 * @public
	 */
	export interface CreateStoreCountryDto extends StoreCountryModel {
	}
	/**
	 * Use to create a new store district.
	 * @see {@link StoreDistrictModel}
	 * @public
	 */
	export interface CreateStoreDistrictDto extends StoreDistrictModel {
	}
	/**
	 * Use to create a new store image.
	 * @see {@link StoreImageModel}
	 * @public
	 */
	export interface CreateStoreImageDto extends StoreImageModel {
	}
	/**
	 * Use to create a new store image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateStoreImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new store inventory location.
	 * @see {@link StoreInventoryLocationModel}
	 * @public
	 */
	export interface CreateStoreInventoryLocationDto extends StoreInventoryLocationModel {
	}
	/**
	 * Use to create a new store inventory location type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateStoreInventoryLocationTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new store manufacturer.
	 * @see {@link StoreManufacturerModel}
	 * @public
	 */
	export interface CreateStoreManufacturerDto extends StoreManufacturerModel {
	}
	/**
	 * Use to create a new store product.
	 * @see {@link StoreProductModel}
	 * @public
	 */
	export interface CreateStoreProductDto extends StoreProductModel {
	}
	/**
	 * Use to create a new store region.
	 * @see {@link StoreRegionModel}
	 * @public
	 */
	export interface CreateStoreRegionDto extends StoreRegionModel {
	}
	/**
	 * Use to create a new store subscription.
	 * @see {@link StoreSubscriptionModel}
	 * @public
	 */
	export interface CreateStoreSubscriptionDto extends StoreSubscriptionModel {
	}
	/**
	 * Use to create a new store type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateStoreTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new store user.
	 * @see {@link StoreUserModel}
	 * @public
	 */
	export interface CreateStoreUserDto extends StoreUserModel {
	}
	/**
	 * Use to create a new store vendor.
	 * @see {@link StoreVendorModel}
	 * @public
	 */
	export interface CreateStoreVendorDto extends StoreVendorModel {
	}
	/**
	 * Use to get a list of site domains
	 * @see {@link SiteDomainSearchModel}
	 * @public
	 */
	export interface GetSiteDomainsDto extends SiteDomainSearchModel {
	}
	/**
	 * Use to get a list of site domain social providers
	 * @see {@link SiteDomainSocialProviderSearchModel}
	 * @public
	 */
	export interface GetSiteDomainSocialProvidersDto extends SiteDomainSocialProviderSearchModel {
	}
	/**
	 * Use to get a list of social providers
	 * @see {@link SocialProviderSearchModel}
	 * @public
	 */
	export interface GetSocialProvidersDto extends SocialProviderSearchModel {
	}
	/**
	 * Use to get a list of store accounts
	 * @see {@link StoreAccountSearchModel}
	 * @public
	 */
	export interface GetStoreAccountsDto extends StoreAccountSearchModel {
	}
	/**
	 * Use to get a list of store badges
	 * @see {@link StoreBadgeSearchModel}
	 * @public
	 */
	export interface GetStoreBadgesDto extends StoreBadgeSearchModel {
	}
	/**
	 * Use to get a list of store categories
	 * @see {@link StoreCategorySearchModel}
	 * @public
	 */
	export interface GetStoreCategoriesDto extends StoreCategorySearchModel {
	}
	/**
	 * Use to get a list of store contacts
	 * @see {@link StoreContactSearchModel}
	 * @public
	 */
	export interface GetStoreContactsDto extends StoreContactSearchModel {
	}
	/**
	 * Use to get a list of store countries
	 * @see {@link StoreCountrySearchModel}
	 * @public
	 */
	export interface GetStoreCountriesDto extends StoreCountrySearchModel {
	}
	/**
	 * Use to get a list of store districts
	 * @see {@link StoreDistrictSearchModel}
	 * @public
	 */
	export interface GetStoreDistrictsDto extends StoreDistrictSearchModel {
	}
	/**
	 * Use to get a list of store images
	 * @see {@link StoreImageSearchModel}
	 * @public
	 */
	export interface GetStoreImagesDto extends StoreImageSearchModel {
	}
	/**
	 * Use to get a list of store image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetStoreImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of store inventory locations
	 * @see {@link StoreInventoryLocationSearchModel}
	 * @public
	 */
	export interface GetStoreInventoryLocationsDto extends StoreInventoryLocationSearchModel {
	}
	/**
	 * Use to get a list of store inventory location types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetStoreInventoryLocationTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of store manufacturers
	 * @see {@link StoreManufacturerSearchModel}
	 * @public
	 */
	export interface GetStoreManufacturersDto extends StoreManufacturerSearchModel {
	}
	/**
	 * Use to get a list of store products
	 * @see {@link StoreProductSearchModel}
	 * @public
	 */
	export interface GetStoreProductsDto extends StoreProductSearchModel {
	}
	/**
	 * Use to get a list of store regions
	 * @see {@link StoreRegionSearchModel}
	 * @public
	 */
	export interface GetStoreRegionsDto extends StoreRegionSearchModel {
	}
	/**
	 * Get store regions by store ID
	 * @see {@link StoreRegionSearchModel}
	 * @public
	 */
	export interface GetStoreRegionsByStoreIDDto extends StoreRegionSearchModel {
	}
	/**
	 * Use to get a list of stores
	 * @see {@link StoreSearchModel}
	 * @public
	 */
	export interface GetStoresDto extends StoreSearchModel {
	}
	/**
	 * Use to get a list of store subscriptions
	 * @see {@link StoreSubscriptionSearchModel}
	 * @public
	 */
	export interface GetStoreSubscriptionsDto extends StoreSubscriptionSearchModel {
	}
	/**
	 * Use to get a list of store types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetStoreTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of store users
	 * @see {@link StoreUserSearchModel}
	 * @public
	 */
	export interface GetStoreUsersDto extends StoreUserSearchModel {
	}
	/**
	 * Use to get a list of store vendors
	 * @see {@link StoreVendorSearchModel}
	 * @public
	 */
	export interface GetStoreVendorsDto extends StoreVendorSearchModel {
	}
	/**
	 * Use to update an existing site domain.
	 * @see {@link SiteDomainModel}
	 * @public
	 */
	export interface UpdateSiteDomainDto extends SiteDomainModel {
	}
	/**
	 * Use to update an existing site domain social provider.
	 * @see {@link SiteDomainSocialProviderModel}
	 * @public
	 */
	export interface UpdateSiteDomainSocialProviderDto extends SiteDomainSocialProviderModel {
	}
	/**
	 * Use to update an existing social provider.
	 * @see {@link SocialProviderModel}
	 * @public
	 */
	export interface UpdateSocialProviderDto extends SocialProviderModel {
	}
	/**
	 * Use to update an existing store.
	 * @see {@link StoreModel}
	 * @public
	 */
	export interface UpdateStoreDto extends StoreModel {
	}
	/**
	 * Use to update an existing store account.
	 * @see {@link StoreAccountModel}
	 * @public
	 */
	export interface UpdateStoreAccountDto extends StoreAccountModel {
	}
	/**
	 * Use to update an existing store badge.
	 * @see {@link StoreBadgeModel}
	 * @public
	 */
	export interface UpdateStoreBadgeDto extends StoreBadgeModel {
	}
	/**
	 * Use to update an existing store category.
	 * @see {@link StoreCategoryModel}
	 * @public
	 */
	export interface UpdateStoreCategoryDto extends StoreCategoryModel {
	}
	/**
	 * Use to update an existing store contact.
	 * @see {@link StoreContactModel}
	 * @public
	 */
	export interface UpdateStoreContactDto extends StoreContactModel {
	}
	/**
	 * Use to update an existing store country.
	 * @see {@link StoreCountryModel}
	 * @public
	 */
	export interface UpdateStoreCountryDto extends StoreCountryModel {
	}
	/**
	 * Use to update an existing store district.
	 * @see {@link StoreDistrictModel}
	 * @public
	 */
	export interface UpdateStoreDistrictDto extends StoreDistrictModel {
	}
	/**
	 * Use to update an existing store image.
	 * @see {@link StoreImageModel}
	 * @public
	 */
	export interface UpdateStoreImageDto extends StoreImageModel {
	}
	/**
	 * Use to update an existing store image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateStoreImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing store inventory location.
	 * @see {@link StoreInventoryLocationModel}
	 * @public
	 */
	export interface UpdateStoreInventoryLocationDto extends StoreInventoryLocationModel {
	}
	/**
	 * Use to update an existing store inventory location type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateStoreInventoryLocationTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing store manufacturer.
	 * @see {@link StoreManufacturerModel}
	 * @public
	 */
	export interface UpdateStoreManufacturerDto extends StoreManufacturerModel {
	}
	/**
	 * Use to update an existing store product.
	 * @see {@link StoreProductModel}
	 * @public
	 */
	export interface UpdateStoreProductDto extends StoreProductModel {
	}
	/**
	 * Use to update an existing store region.
	 * @see {@link StoreRegionModel}
	 * @public
	 */
	export interface UpdateStoreRegionDto extends StoreRegionModel {
	}
	/**
	 * Use to update an existing store subscription.
	 * @see {@link StoreSubscriptionModel}
	 * @public
	 */
	export interface UpdateStoreSubscriptionDto extends StoreSubscriptionModel {
	}
	/**
	 * Use to update an existing store type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateStoreTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing store user.
	 * @see {@link StoreUserModel}
	 * @public
	 */
	export interface UpdateStoreUserDto extends StoreUserModel {
	}
	/**
	 * Use to update an existing store vendor.
	 * @see {@link StoreVendorModel}
	 * @public
	 */
	export interface UpdateStoreVendorDto extends StoreVendorModel {
	}
	/**
	 * Use to create a new or update an existing store product (as needed).
	 * @see {@link StoreProductModel}
	 * @public
	 */
	export interface UpsertStoreProductDto extends StoreProductModel {
	}

	export class Stores extends ServiceStackRoute {
		/**
		 * Use to get a specific store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminGetStoreFull
		 * @path <API Root>/Stores/Store/Full/ID/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<StoreModel>}
		 * @public
		 */
		AdminGetStoreFull = (id: number) => this.$http<StoreModel>({
			url: [this.rootUrl, "Stores", "Store", "Full", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Empties the server-side data cache for all site domain calls.
		 * @param {@link cef.admin.api.ClearSiteDomainCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSiteDomainCache
		 * @path <API Root>/Stores/SiteDomain/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSiteDomainCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "SiteDomain", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all site domain social provider calls.
		 * @param {@link cef.admin.api.ClearSiteDomainSocialProviderCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSiteDomainSocialProviderCache
		 * @path <API Root>/Stores/SiteDomainSocialProvider/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSiteDomainSocialProviderCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProvider", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all social provider calls.
		 * @param {@link cef.admin.api.ClearSocialProviderCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSocialProviderCache
		 * @path <API Root>/Stores/SocialProvider/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSocialProviderCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "SocialProvider", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store account calls.
		 * @param {@link cef.admin.api.ClearStoreAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreAccountCache
		 * @path <API Root>/Stores/StoreAccount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreAccount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store badge calls.
		 * @param {@link cef.admin.api.ClearStoreBadgeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreBadgeCache
		 * @path <API Root>/Stores/StoreBadge/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreBadgeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreBadge", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store calls.
		 * @param {@link cef.admin.api.ClearStoreCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreCache
		 * @path <API Root>/Stores/Store/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "Store", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store category calls.
		 * @param {@link cef.admin.api.ClearStoreCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreCategoryCache
		 * @path <API Root>/Stores/StoreCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store contact calls.
		 * @param {@link cef.admin.api.ClearStoreContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreContactCache
		 * @path <API Root>/Stores/StoreContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store country calls.
		 * @param {@link cef.admin.api.ClearStoreCountryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreCountryCache
		 * @path <API Root>/Stores/StoreCountry/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreCountryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreCountry", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store district calls.
		 * @param {@link cef.admin.api.ClearStoreDistrictCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreDistrictCache
		 * @path <API Root>/Stores/StoreDistrict/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreDistrictCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreDistrict", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store image calls.
		 * @param {@link cef.admin.api.ClearStoreImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreImageCache
		 * @path <API Root>/Stores/StoreImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store image type calls.
		 * @param {@link cef.admin.api.ClearStoreImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreImageTypeCache
		 * @path <API Root>/Stores/StoreImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store inventory location calls.
		 * @param {@link cef.admin.api.ClearStoreInventoryLocationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreInventoryLocationCache
		 * @path <API Root>/Stores/StoreInventoryLocation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreInventoryLocationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store inventory location type calls.
		 * @param {@link cef.admin.api.ClearStoreInventoryLocationTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreInventoryLocationTypeCache
		 * @path <API Root>/Stores/StoreInventoryLocationType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreInventoryLocationTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store manufacturer calls.
		 * @param {@link cef.admin.api.ClearStoreManufacturerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreManufacturerCache
		 * @path <API Root>/Stores/StoreManufacturer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreManufacturerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreManufacturer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store product calls.
		 * @param {@link cef.admin.api.ClearStoreProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreProductCache
		 * @path <API Root>/Stores/StoreProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store region calls.
		 * @param {@link cef.admin.api.ClearStoreRegionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreRegionCache
		 * @path <API Root>/Stores/StoreRegion/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreRegionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreRegion", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store subscription calls.
		 * @param {@link cef.admin.api.ClearStoreSubscriptionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreSubscriptionCache
		 * @path <API Root>/Stores/StoreSubscription/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreSubscriptionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreSubscription", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store type calls.
		 * @param {@link cef.admin.api.ClearStoreTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreTypeCache
		 * @path <API Root>/Stores/StoreType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store user calls.
		 * @param {@link cef.admin.api.ClearStoreUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreUserCache
		 * @path <API Root>/Stores/StoreUser/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreUser", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store vendor calls.
		 * @param {@link cef.admin.api.ClearStoreVendorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreVendorCache
		 * @path <API Root>/Stores/StoreVendor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreVendorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Stores", "StoreVendor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to clone a specific store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CloneStore
		 * @path <API Root>/Stores/Store/Clone/ID/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<StoreModel>>}
		 * @public
		 */
		CloneStore = (id: number) => this.$http<CEFActionResponseT<StoreModel>>({
			url: [this.rootUrl, "Stores", "Store", "Clone", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to create a new site domain.
		 * @param {@link cef.admin.api.CreateSiteDomainDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSiteDomain
		 * @path <API Root>/Stores/SiteDomain/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSiteDomain = (routeParams?: CreateSiteDomainDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "SiteDomain", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new site domain social provider.
		 * @param {@link cef.admin.api.CreateSiteDomainSocialProviderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSiteDomainSocialProvider
		 * @path <API Root>/Stores/SiteDomainSocialProvider/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSiteDomainSocialProvider = (routeParams?: CreateSiteDomainSocialProviderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProvider", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new social provider.
		 * @param {@link cef.admin.api.CreateSocialProviderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSocialProvider
		 * @path <API Root>/Stores/SocialProvider/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSocialProvider = (routeParams?: CreateSocialProviderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "SocialProvider", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store.
		 * @param {@link cef.admin.api.CreateStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStore
		 * @path <API Root>/Stores/Store/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStore = (routeParams?: CreateStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "Store", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store account.
		 * @param {@link cef.admin.api.CreateStoreAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreAccount
		 * @path <API Root>/Stores/StoreAccount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreAccount = (routeParams?: CreateStoreAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreAccount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store badge.
		 * @param {@link cef.admin.api.CreateStoreBadgeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreBadge
		 * @path <API Root>/Stores/StoreBadge/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreBadge = (routeParams?: CreateStoreBadgeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreBadge", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store category.
		 * @param {@link cef.admin.api.CreateStoreCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreCategory
		 * @path <API Root>/Stores/StoreCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreCategory = (routeParams?: CreateStoreCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store contact.
		 * @param {@link cef.admin.api.CreateStoreContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreContact
		 * @path <API Root>/Stores/StoreContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreContact = (routeParams?: CreateStoreContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store country.
		 * @param {@link cef.admin.api.CreateStoreCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreCountry
		 * @path <API Root>/Stores/StoreCountry/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreCountry = (routeParams?: CreateStoreCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreCountry", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store district.
		 * @param {@link cef.admin.api.CreateStoreDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreDistrict
		 * @path <API Root>/Stores/StoreDistrict/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreDistrict = (routeParams?: CreateStoreDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreDistrict", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store image.
		 * @param {@link cef.admin.api.CreateStoreImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreImage
		 * @path <API Root>/Stores/StoreImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreImage = (routeParams?: CreateStoreImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store image type.
		 * @param {@link cef.admin.api.CreateStoreImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreImageType
		 * @path <API Root>/Stores/StoreImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreImageType = (routeParams?: CreateStoreImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store inventory location.
		 * @param {@link cef.admin.api.CreateStoreInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreInventoryLocation
		 * @path <API Root>/Stores/StoreInventoryLocation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreInventoryLocation = (routeParams?: CreateStoreInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store inventory location type.
		 * @param {@link cef.admin.api.CreateStoreInventoryLocationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreInventoryLocationType
		 * @path <API Root>/Stores/StoreInventoryLocationType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreInventoryLocationType = (routeParams?: CreateStoreInventoryLocationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store manufacturer.
		 * @param {@link cef.admin.api.CreateStoreManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreManufacturer
		 * @path <API Root>/Stores/StoreManufacturer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreManufacturer = (routeParams?: CreateStoreManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreManufacturer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store product.
		 * @param {@link cef.admin.api.CreateStoreProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreProduct
		 * @path <API Root>/Stores/StoreProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreProduct = (routeParams?: CreateStoreProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store region.
		 * @param {@link cef.admin.api.CreateStoreRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreRegion
		 * @path <API Root>/Stores/StoreRegion/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreRegion = (routeParams?: CreateStoreRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreRegion", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store subscription.
		 * @param {@link cef.admin.api.CreateStoreSubscriptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreSubscription
		 * @path <API Root>/Stores/StoreSubscription/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreSubscription = (routeParams?: CreateStoreSubscriptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreSubscription", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store type.
		 * @param {@link cef.admin.api.CreateStoreTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreType
		 * @path <API Root>/Stores/StoreType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreType = (routeParams?: CreateStoreTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store user.
		 * @param {@link cef.admin.api.CreateStoreUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreUser
		 * @path <API Root>/Stores/StoreUser/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreUser = (routeParams?: CreateStoreUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreUser", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store vendor.
		 * @param {@link cef.admin.api.CreateStoreVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreVendor
		 * @path <API Root>/Stores/StoreVendor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreVendor = (routeParams?: CreateStoreVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreVendor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific site domain from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSiteDomainByID
		 * @path <API Root>/Stores/SiteDomain/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SiteDomain", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific site domain social provider from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSiteDomainSocialProviderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSiteDomainSocialProviderByID
		 * @path <API Root>/Stores/SiteDomainSocialProvider/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSiteDomainSocialProviderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProvider", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific social provider from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSocialProviderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSocialProviderByID
		 * @path <API Root>/Stores/SocialProvider/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSocialProviderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SocialProvider", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreAccountByID
		 * @path <API Root>/Stores/StoreAccount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreAccount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store badge from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreBadgeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreBadgeByID
		 * @path <API Root>/Stores/StoreBadge/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreBadgeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreBadge", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreByID
		 * @path <API Root>/Stores/Store/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "Store", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreCategoryByID
		 * @path <API Root>/Stores/StoreCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreContactByID
		 * @path <API Root>/Stores/StoreContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store country from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreCountryByID
		 * @path <API Root>/Stores/StoreCountry/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreCountry", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store district from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreDistrictByID
		 * @path <API Root>/Stores/StoreDistrict/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreDistrict", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreImageByID
		 * @path <API Root>/Stores/StoreImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreImageTypeByID
		 * @path <API Root>/Stores/StoreImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store inventory location from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreInventoryLocationByID
		 * @path <API Root>/Stores/StoreInventoryLocation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store inventory location type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreInventoryLocationTypeByID
		 * @path <API Root>/Stores/StoreInventoryLocationType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store manufacturer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreManufacturerByID
		 * @path <API Root>/Stores/StoreManufacturer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreManufacturer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreProductByID
		 * @path <API Root>/Stores/StoreProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store region from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreRegionByID
		 * @path <API Root>/Stores/StoreRegion/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreRegion", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store subscription from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreSubscriptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreSubscriptionByID
		 * @path <API Root>/Stores/StoreSubscription/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreSubscriptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreSubscription", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreTypeByID
		 * @path <API Root>/Stores/StoreType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreUserByID
		 * @path <API Root>/Stores/StoreUser/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreUser", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store vendor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreVendorByID
		 * @path <API Root>/Stores/StoreVendor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreVendor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific site domain from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSiteDomainByID
		 * @path <API Root>/Stores/SiteDomain/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SiteDomain", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific site domain social provider from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSiteDomainSocialProviderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSiteDomainSocialProviderByID
		 * @path <API Root>/Stores/SiteDomainSocialProvider/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSiteDomainSocialProviderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProvider", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific social provider from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSocialProviderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSocialProviderByID
		 * @path <API Root>/Stores/SocialProvider/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSocialProviderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SocialProvider", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreAccountByID
		 * @path <API Root>/Stores/StoreAccount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreAccount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store badge from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreBadgeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreBadgeByID
		 * @path <API Root>/Stores/StoreBadge/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreBadgeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreBadge", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreByID
		 * @path <API Root>/Stores/Store/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "Store", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreCategoryByID
		 * @path <API Root>/Stores/StoreCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreContactByID
		 * @path <API Root>/Stores/StoreContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store country from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreCountryByID
		 * @path <API Root>/Stores/StoreCountry/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreCountry", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store district from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreDistrictByID
		 * @path <API Root>/Stores/StoreDistrict/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreDistrict", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreImageByID
		 * @path <API Root>/Stores/StoreImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreImageTypeByID
		 * @path <API Root>/Stores/StoreImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store inventory location from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreInventoryLocationByID
		 * @path <API Root>/Stores/StoreInventoryLocation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store inventory location type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreInventoryLocationTypeByID
		 * @path <API Root>/Stores/StoreInventoryLocationType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store manufacturer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreManufacturerByID
		 * @path <API Root>/Stores/StoreManufacturer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreManufacturer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreProductByID
		 * @path <API Root>/Stores/StoreProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store region from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreRegionByID
		 * @path <API Root>/Stores/StoreRegion/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreRegion", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store subscription from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreSubscriptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreSubscriptionByID
		 * @path <API Root>/Stores/StoreSubscription/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreSubscriptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreSubscription", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreTypeByID
		 * @path <API Root>/Stores/StoreType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreUserByID
		 * @path <API Root>/Stores/StoreUser/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreUser", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store vendor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreVendorByID
		 * @path <API Root>/Stores/StoreVendor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreVendor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific site domain
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomainByID
		 * @path <API Root>/Stores/SiteDomain/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SiteDomainModel>}
		 * @public
		 */
		GetSiteDomainByID = (id: number) => this.$http<SiteDomainModel>({
			url: [this.rootUrl, "Stores", "SiteDomain", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of site domains
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomains
		 * @path <API Root>/Stores/SiteDomains
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SiteDomainPagedResults>}
		 * @public
		 */
		GetSiteDomains = (routeParams?: GetSiteDomainsDto) => this.$http<SiteDomainPagedResults>({
			url: [this.rootUrl, "Stores", "SiteDomains"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific site domain social provider
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomainSocialProviderByID
		 * @path <API Root>/Stores/SiteDomainSocialProvider/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SiteDomainSocialProviderModel>}
		 * @public
		 */
		GetSiteDomainSocialProviderByID = (id: number) => this.$http<SiteDomainSocialProviderModel>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProvider", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of site domain social providers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomainSocialProviders
		 * @path <API Root>/Stores/SiteDomainSocialProviders
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SiteDomainSocialProviderPagedResults>}
		 * @public
		 */
		GetSiteDomainSocialProviders = (routeParams?: GetSiteDomainSocialProvidersDto) => this.$http<SiteDomainSocialProviderPagedResults>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProviders"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific social provider
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSocialProviderByID
		 * @path <API Root>/Stores/SocialProvider/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SocialProviderModel>}
		 * @public
		 */
		GetSocialProviderByID = (id: number) => this.$http<SocialProviderModel>({
			url: [this.rootUrl, "Stores", "SocialProvider", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of social providers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSocialProviders
		 * @path <API Root>/Stores/SocialProviders
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SocialProviderPagedResults>}
		 * @public
		 */
		GetSocialProviders = (routeParams?: GetSocialProvidersDto) => this.$http<SocialProviderPagedResults>({
			url: [this.rootUrl, "Stores", "SocialProviders"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreAccountByID
		 * @path <API Root>/Stores/StoreAccount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreAccountModel>}
		 * @public
		 */
		GetStoreAccountByID = (id: number) => this.$http<StoreAccountModel>({
			url: [this.rootUrl, "Stores", "StoreAccount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreAccounts
		 * @path <API Root>/Stores/StoreAccounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreAccountPagedResults>}
		 * @public
		 */
		GetStoreAccounts = (routeParams?: GetStoreAccountsDto) => this.$http<StoreAccountPagedResults>({
			url: [this.rootUrl, "Stores", "StoreAccounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store badge
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreBadgeByID
		 * @path <API Root>/Stores/StoreBadge/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreBadgeModel>}
		 * @public
		 */
		GetStoreBadgeByID = (id: number) => this.$http<StoreBadgeModel>({
			url: [this.rootUrl, "Stores", "StoreBadge", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store badges
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreBadges
		 * @path <API Root>/Stores/StoreBadges
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreBadgePagedResults>}
		 * @public
		 */
		GetStoreBadges = (routeParams?: GetStoreBadgesDto) => this.$http<StoreBadgePagedResults>({
			url: [this.rootUrl, "Stores", "StoreBadges"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreByID
		 * @path <API Root>/Stores/Store/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreModel>}
		 * @public
		 */
		GetStoreByID = (id: number) => this.$http<StoreModel>({
			url: [this.rootUrl, "Stores", "Store", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreCategories
		 * @path <API Root>/Stores/StoreCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreCategoryPagedResults>}
		 * @public
		 */
		GetStoreCategories = (routeParams?: GetStoreCategoriesDto) => this.$http<StoreCategoryPagedResults>({
			url: [this.rootUrl, "Stores", "StoreCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreCategoryByID
		 * @path <API Root>/Stores/StoreCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreCategoryModel>}
		 * @public
		 */
		GetStoreCategoryByID = (id: number) => this.$http<StoreCategoryModel>({
			url: [this.rootUrl, "Stores", "StoreCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific store contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreContactByID
		 * @path <API Root>/Stores/StoreContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreContactModel>}
		 * @public
		 */
		GetStoreContactByID = (id: number) => this.$http<StoreContactModel>({
			url: [this.rootUrl, "Stores", "StoreContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreContacts
		 * @path <API Root>/Stores/StoreContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreContactPagedResults>}
		 * @public
		 */
		GetStoreContacts = (routeParams?: GetStoreContactsDto) => this.$http<StoreContactPagedResults>({
			url: [this.rootUrl, "Stores", "StoreContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of store countries
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreCountries
		 * @path <API Root>/Stores/StoreCountries
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreCountryPagedResults>}
		 * @public
		 */
		GetStoreCountries = (routeParams?: GetStoreCountriesDto) => this.$http<StoreCountryPagedResults>({
			url: [this.rootUrl, "Stores", "StoreCountries"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store country
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreCountryByID
		 * @path <API Root>/Stores/StoreCountry/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreCountryModel>}
		 * @public
		 */
		GetStoreCountryByID = (id: number) => this.$http<StoreCountryModel>({
			url: [this.rootUrl, "Stores", "StoreCountry", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific store district
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreDistrictByID
		 * @path <API Root>/Stores/StoreDistrict/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreDistrictModel>}
		 * @public
		 */
		GetStoreDistrictByID = (id: number) => this.$http<StoreDistrictModel>({
			url: [this.rootUrl, "Stores", "StoreDistrict", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store districts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreDistricts
		 * @path <API Root>/Stores/StoreDistricts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreDistrictPagedResults>}
		 * @public
		 */
		GetStoreDistricts = (routeParams?: GetStoreDistrictsDto) => this.$http<StoreDistrictPagedResults>({
			url: [this.rootUrl, "Stores", "StoreDistricts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreImageByID
		 * @path <API Root>/Stores/StoreImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreImageModel>}
		 * @public
		 */
		GetStoreImageByID = (id: number) => this.$http<StoreImageModel>({
			url: [this.rootUrl, "Stores", "StoreImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreImages
		 * @path <API Root>/Stores/StoreImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreImagePagedResults>}
		 * @public
		 */
		GetStoreImages = (routeParams?: GetStoreImagesDto) => this.$http<StoreImagePagedResults>({
			url: [this.rootUrl, "Stores", "StoreImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreImageTypeByID
		 * @path <API Root>/Stores/StoreImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetStoreImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Stores", "StoreImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreImageTypes
		 * @path <API Root>/Stores/StoreImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreImageTypePagedResults>}
		 * @public
		 */
		GetStoreImageTypes = (routeParams?: GetStoreImageTypesDto) => this.$http<StoreImageTypePagedResults>({
			url: [this.rootUrl, "Stores", "StoreImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store inventory location
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationByID
		 * @path <API Root>/Stores/StoreInventoryLocation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreInventoryLocationModel>}
		 * @public
		 */
		GetStoreInventoryLocationByID = (id: number) => this.$http<StoreInventoryLocationModel>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store inventory locations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocations
		 * @path <API Root>/Stores/StoreInventoryLocations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreInventoryLocationPagedResults>}
		 * @public
		 */
		GetStoreInventoryLocations = (routeParams?: GetStoreInventoryLocationsDto) => this.$http<StoreInventoryLocationPagedResults>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the store that the current user has administrative rights to (limited to store admins)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationsMatrix
		 * @path <API Root>/Stores/InventoryLocationsMatrix
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<StoreInventoryLocationsMatrixModel>>>}
		 * @public
		 */
		GetStoreInventoryLocationsMatrix = () => this.$http<CEFActionResponseT<Array<StoreInventoryLocationsMatrixModel>>>({
			url: [this.rootUrl, "Stores", "InventoryLocationsMatrix"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific store inventory location type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationTypeByID
		 * @path <API Root>/Stores/StoreInventoryLocationType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetStoreInventoryLocationTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store inventory location types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationTypes
		 * @path <API Root>/Stores/StoreInventoryLocationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreInventoryLocationTypePagedResults>}
		 * @public
		 */
		GetStoreInventoryLocationTypes = (routeParams?: GetStoreInventoryLocationTypesDto) => this.$http<StoreInventoryLocationTypePagedResults>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store manufacturer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreManufacturerByID
		 * @path <API Root>/Stores/StoreManufacturer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreManufacturerModel>}
		 * @public
		 */
		GetStoreManufacturerByID = (id: number) => this.$http<StoreManufacturerModel>({
			url: [this.rootUrl, "Stores", "StoreManufacturer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store manufacturers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreManufacturers
		 * @path <API Root>/Stores/StoreManufacturers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreManufacturerPagedResults>}
		 * @public
		 */
		GetStoreManufacturers = (routeParams?: GetStoreManufacturersDto) => this.$http<StoreManufacturerPagedResults>({
			url: [this.rootUrl, "Stores", "StoreManufacturers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreProductByID
		 * @path <API Root>/Stores/StoreProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreProductModel>}
		 * @public
		 */
		GetStoreProductByID = (id: number) => this.$http<StoreProductModel>({
			url: [this.rootUrl, "Stores", "StoreProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreProducts
		 * @path <API Root>/Stores/StoreProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreProductPagedResults>}
		 * @public
		 */
		GetStoreProducts = (routeParams?: GetStoreProductsDto) => this.$http<StoreProductPagedResults>({
			url: [this.rootUrl, "Stores", "StoreProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store region
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreRegionByID
		 * @path <API Root>/Stores/StoreRegion/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreRegionModel>}
		 * @public
		 */
		GetStoreRegionByID = (id: number) => this.$http<StoreRegionModel>({
			url: [this.rootUrl, "Stores", "StoreRegion", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store regions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreRegions
		 * @path <API Root>/Stores/StoreRegions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreRegionPagedResults>}
		 * @public
		 */
		GetStoreRegions = (routeParams?: GetStoreRegionsDto) => this.$http<StoreRegionPagedResults>({
			url: [this.rootUrl, "Stores", "StoreRegions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get store regions by store ID
		 * @param {@link cef.admin.api.GetStoreRegionsByStoreIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreRegionsByStoreID
		 * @path <API Root>/Stores/StoreRegions/ByStoreID
		 * @verb POST
		 * @returns {ng.IHttpPromise<StoreRegionPagedResults>}
		 * @public
		 */
		GetStoreRegionsByStoreID = (routeParams?: GetStoreRegionsByStoreIDDto) => this.$http<StoreRegionPagedResults>({
			url: [this.rootUrl, "Stores", "StoreRegions", "ByStoreID"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a list of stores
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStores
		 * @path <API Root>/Stores/Stores
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StorePagedResults>}
		 * @public
		 */
		GetStores = (routeParams?: GetStoresDto) => this.$http<StorePagedResults>({
			url: [this.rootUrl, "Stores", "Stores"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store subscription
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreSubscriptionByID
		 * @path <API Root>/Stores/StoreSubscription/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreSubscriptionModel>}
		 * @public
		 */
		GetStoreSubscriptionByID = (id: number) => this.$http<StoreSubscriptionModel>({
			url: [this.rootUrl, "Stores", "StoreSubscription", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store subscriptions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreSubscriptions
		 * @path <API Root>/Stores/StoreSubscriptions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreSubscriptionPagedResults>}
		 * @public
		 */
		GetStoreSubscriptions = (routeParams?: GetStoreSubscriptionsDto) => this.$http<StoreSubscriptionPagedResults>({
			url: [this.rootUrl, "Stores", "StoreSubscriptions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreTypeByID
		 * @path <API Root>/Stores/StoreType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetStoreTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Stores", "StoreType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreTypes
		 * @path <API Root>/Stores/StoreTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreTypePagedResults>}
		 * @public
		 */
		GetStoreTypes = (routeParams?: GetStoreTypesDto) => this.$http<StoreTypePagedResults>({
			url: [this.rootUrl, "Stores", "StoreTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreUserByID
		 * @path <API Root>/Stores/StoreUser/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreUserModel>}
		 * @public
		 */
		GetStoreUserByID = (id: number) => this.$http<StoreUserModel>({
			url: [this.rootUrl, "Stores", "StoreUser", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreUsers
		 * @path <API Root>/Stores/StoreUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreUserPagedResults>}
		 * @public
		 */
		GetStoreUsers = (routeParams?: GetStoreUsersDto) => this.$http<StoreUserPagedResults>({
			url: [this.rootUrl, "Stores", "StoreUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store vendor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreVendorByID
		 * @path <API Root>/Stores/StoreVendor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreVendorModel>}
		 * @public
		 */
		GetStoreVendorByID = (id: number) => this.$http<StoreVendorModel>({
			url: [this.rootUrl, "Stores", "StoreVendor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store vendors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreVendors
		 * @path <API Root>/Stores/StoreVendors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreVendorPagedResults>}
		 * @public
		 */
		GetStoreVendors = (routeParams?: GetStoreVendorsDto) => this.$http<StoreVendorPagedResults>({
			url: [this.rootUrl, "Stores", "StoreVendors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific site domain from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSiteDomainByID
		 * @path <API Root>/Stores/SiteDomain/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SiteDomain", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific site domain social provider from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSiteDomainSocialProviderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSiteDomainSocialProviderByID
		 * @path <API Root>/Stores/SiteDomainSocialProvider/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSiteDomainSocialProviderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProvider", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific social provider from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSocialProviderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSocialProviderByID
		 * @path <API Root>/Stores/SocialProvider/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSocialProviderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "SocialProvider", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreAccountByID
		 * @path <API Root>/Stores/StoreAccount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreAccount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store badge from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreBadgeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreBadgeByID
		 * @path <API Root>/Stores/StoreBadge/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreBadgeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreBadge", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreByID
		 * @path <API Root>/Stores/Store/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "Store", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreCategoryByID
		 * @path <API Root>/Stores/StoreCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreContactByID
		 * @path <API Root>/Stores/StoreContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store country from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreCountryByID
		 * @path <API Root>/Stores/StoreCountry/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreCountry", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store district from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreDistrictByID
		 * @path <API Root>/Stores/StoreDistrict/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreDistrict", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreImageByID
		 * @path <API Root>/Stores/StoreImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreImageTypeByID
		 * @path <API Root>/Stores/StoreImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store inventory location from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreInventoryLocationByID
		 * @path <API Root>/Stores/StoreInventoryLocation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store inventory location type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreInventoryLocationTypeByID
		 * @path <API Root>/Stores/StoreInventoryLocationType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store manufacturer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreManufacturerByID
		 * @path <API Root>/Stores/StoreManufacturer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreManufacturer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreProductByID
		 * @path <API Root>/Stores/StoreProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store region from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreRegionByID
		 * @path <API Root>/Stores/StoreRegion/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreRegion", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store subscription from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreSubscriptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreSubscriptionByID
		 * @path <API Root>/Stores/StoreSubscription/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreSubscriptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreSubscription", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreTypeByID
		 * @path <API Root>/Stores/StoreType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreUserByID
		 * @path <API Root>/Stores/StoreUser/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreUser", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store vendor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreVendorByID
		 * @path <API Root>/Stores/StoreVendor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Stores", "StoreVendor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing site domain.
		 * @param {@link cef.admin.api.UpdateSiteDomainDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSiteDomain
		 * @path <API Root>/Stores/SiteDomain/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSiteDomain = (routeParams?: UpdateSiteDomainDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "SiteDomain", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing site domain social provider.
		 * @param {@link cef.admin.api.UpdateSiteDomainSocialProviderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSiteDomainSocialProvider
		 * @path <API Root>/Stores/SiteDomainSocialProvider/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSiteDomainSocialProvider = (routeParams?: UpdateSiteDomainSocialProviderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "SiteDomainSocialProvider", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing social provider.
		 * @param {@link cef.admin.api.UpdateSocialProviderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSocialProvider
		 * @path <API Root>/Stores/SocialProvider/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSocialProvider = (routeParams?: UpdateSocialProviderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "SocialProvider", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store.
		 * @param {@link cef.admin.api.UpdateStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStore
		 * @path <API Root>/Stores/Store/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStore = (routeParams?: UpdateStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "Store", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store account.
		 * @param {@link cef.admin.api.UpdateStoreAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreAccount
		 * @path <API Root>/Stores/StoreAccount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreAccount = (routeParams?: UpdateStoreAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreAccount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store badge.
		 * @param {@link cef.admin.api.UpdateStoreBadgeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreBadge
		 * @path <API Root>/Stores/StoreBadge/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreBadge = (routeParams?: UpdateStoreBadgeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreBadge", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store category.
		 * @param {@link cef.admin.api.UpdateStoreCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreCategory
		 * @path <API Root>/Stores/StoreCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreCategory = (routeParams?: UpdateStoreCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store contact.
		 * @param {@link cef.admin.api.UpdateStoreContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreContact
		 * @path <API Root>/Stores/StoreContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreContact = (routeParams?: UpdateStoreContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store country.
		 * @param {@link cef.admin.api.UpdateStoreCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreCountry
		 * @path <API Root>/Stores/StoreCountry/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreCountry = (routeParams?: UpdateStoreCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreCountry", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store district.
		 * @param {@link cef.admin.api.UpdateStoreDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreDistrict
		 * @path <API Root>/Stores/StoreDistrict/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreDistrict = (routeParams?: UpdateStoreDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreDistrict", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store image.
		 * @param {@link cef.admin.api.UpdateStoreImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreImage
		 * @path <API Root>/Stores/StoreImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreImage = (routeParams?: UpdateStoreImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store image type.
		 * @param {@link cef.admin.api.UpdateStoreImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreImageType
		 * @path <API Root>/Stores/StoreImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreImageType = (routeParams?: UpdateStoreImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store inventory location.
		 * @param {@link cef.admin.api.UpdateStoreInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreInventoryLocation
		 * @path <API Root>/Stores/StoreInventoryLocation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreInventoryLocation = (routeParams?: UpdateStoreInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store inventory location type.
		 * @param {@link cef.admin.api.UpdateStoreInventoryLocationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreInventoryLocationType
		 * @path <API Root>/Stores/StoreInventoryLocationType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreInventoryLocationType = (routeParams?: UpdateStoreInventoryLocationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store manufacturer.
		 * @param {@link cef.admin.api.UpdateStoreManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreManufacturer
		 * @path <API Root>/Stores/StoreManufacturer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreManufacturer = (routeParams?: UpdateStoreManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreManufacturer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store product.
		 * @param {@link cef.admin.api.UpdateStoreProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreProduct
		 * @path <API Root>/Stores/StoreProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreProduct = (routeParams?: UpdateStoreProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store region.
		 * @param {@link cef.admin.api.UpdateStoreRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreRegion
		 * @path <API Root>/Stores/StoreRegion/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreRegion = (routeParams?: UpdateStoreRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreRegion", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store subscription.
		 * @param {@link cef.admin.api.UpdateStoreSubscriptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreSubscription
		 * @path <API Root>/Stores/StoreSubscription/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreSubscription = (routeParams?: UpdateStoreSubscriptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreSubscription", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store type.
		 * @param {@link cef.admin.api.UpdateStoreTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreType
		 * @path <API Root>/Stores/StoreType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreType = (routeParams?: UpdateStoreTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store user.
		 * @param {@link cef.admin.api.UpdateStoreUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreUser
		 * @path <API Root>/Stores/StoreUser/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreUser = (routeParams?: UpdateStoreUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store vendor.
		 * @param {@link cef.admin.api.UpdateStoreVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreVendor
		 * @path <API Root>/Stores/StoreVendor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreVendor = (routeParams?: UpdateStoreVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreVendor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to create a new or update an existing store product (as needed).
		 * @param {@link cef.admin.api.UpsertStoreProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertStoreProduct
		 * @path <API Root>/Stores/StoreProduct/Upsert
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpsertStoreProduct = (routeParams?: UpsertStoreProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Stores", "StoreProduct", "Upsert"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
