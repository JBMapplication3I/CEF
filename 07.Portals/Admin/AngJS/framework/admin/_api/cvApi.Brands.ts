/**
 * @file framework/admin/_api/cvApi.Brands.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new brand.
	 * @see {@link BrandModel}
	 * @public
	 */
	export interface CreateBrandDto extends BrandModel {
	}
	/**
	 * Use to create a new brand account.
	 * @see {@link BrandAccountModel}
	 * @public
	 */
	export interface CreateBrandAccountDto extends BrandAccountModel {
	}
	/**
	 * Use to create a new brand category.
	 * @see {@link BrandCategoryModel}
	 * @public
	 */
	export interface CreateBrandCategoryDto extends BrandCategoryModel {
	}
	/**
	 * Use to create a new brand currency.
	 * @see {@link BrandCurrencyModel}
	 * @public
	 */
	export interface CreateBrandCurrencyDto extends BrandCurrencyModel {
	}
	/**
	 * Use to create a new brand franchise.
	 * @see {@link BrandFranchiseModel}
	 * @public
	 */
	export interface CreateBrandFranchiseDto extends BrandFranchiseModel {
	}
	/**
	 * Use to create a new brand image.
	 * @see {@link BrandImageModel}
	 * @public
	 */
	export interface CreateBrandImageDto extends BrandImageModel {
	}
	/**
	 * Use to create a new brand image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateBrandImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new brand inventory location.
	 * @see {@link BrandInventoryLocationModel}
	 * @public
	 */
	export interface CreateBrandInventoryLocationDto extends BrandInventoryLocationModel {
	}
	/**
	 * Use to create a new brand inventory location type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateBrandInventoryLocationTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new brand language.
	 * @see {@link BrandLanguageModel}
	 * @public
	 */
	export interface CreateBrandLanguageDto extends BrandLanguageModel {
	}
	/**
	 * Use to create a new brand manufacturer.
	 * @see {@link BrandManufacturerModel}
	 * @public
	 */
	export interface CreateBrandManufacturerDto extends BrandManufacturerModel {
	}
	/**
	 * Use to create a new brand product.
	 * @see {@link BrandProductModel}
	 * @public
	 */
	export interface CreateBrandProductDto extends BrandProductModel {
	}
	/**
	 * Use to create a new brand site domain.
	 * @see {@link BrandSiteDomainModel}
	 * @public
	 */
	export interface CreateBrandSiteDomainDto extends BrandSiteDomainModel {
	}
	/**
	 * Use to create a new brand store.
	 * @see {@link BrandStoreModel}
	 * @public
	 */
	export interface CreateBrandStoreDto extends BrandStoreModel {
	}
	/**
	 * Use to create a new brand user.
	 * @see {@link BrandUserModel}
	 * @public
	 */
	export interface CreateBrandUserDto extends BrandUserModel {
	}
	/**
	 * Use to create a new brand vendor.
	 * @see {@link BrandVendorModel}
	 * @public
	 */
	export interface CreateBrandVendorDto extends BrandVendorModel {
	}
	/**
	 * Use to get a list of brand accounts
	 * @see {@link BrandAccountSearchModel}
	 * @public
	 */
	export interface GetBrandAccountsDto extends BrandAccountSearchModel {
	}
	/**
	 * Use to get a list of brand categories
	 * @see {@link BrandCategorySearchModel}
	 * @public
	 */
	export interface GetBrandCategoriesDto extends BrandCategorySearchModel {
	}
	/**
	 * Use to get a list of brand currencies
	 * @see {@link BrandCurrencySearchModel}
	 * @public
	 */
	export interface GetBrandCurrenciesDto extends BrandCurrencySearchModel {
	}
	/**
	 * Use to get a list of brand franchises
	 * @see {@link BrandFranchiseSearchModel}
	 * @public
	 */
	export interface GetBrandFranchisesDto extends BrandFranchiseSearchModel {
	}
	/**
	 * Use to get a list of brand images
	 * @see {@link BrandImageSearchModel}
	 * @public
	 */
	export interface GetBrandImagesDto extends BrandImageSearchModel {
	}
	/**
	 * Use to get a list of brand image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetBrandImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of brand inventory locations
	 * @see {@link BrandInventoryLocationSearchModel}
	 * @public
	 */
	export interface GetBrandInventoryLocationsDto extends BrandInventoryLocationSearchModel {
	}
	/**
	 * Use to get a list of brand inventory location types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetBrandInventoryLocationTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of brand languages
	 * @see {@link BrandLanguageSearchModel}
	 * @public
	 */
	export interface GetBrandLanguagesDto extends BrandLanguageSearchModel {
	}
	/**
	 * Use to get a list of brand manufacturers
	 * @see {@link BrandManufacturerSearchModel}
	 * @public
	 */
	export interface GetBrandManufacturersDto extends BrandManufacturerSearchModel {
	}
	/**
	 * Use to get a list of brand products
	 * @see {@link BrandProductSearchModel}
	 * @public
	 */
	export interface GetBrandProductsDto extends BrandProductSearchModel {
	}
	/**
	 * Use to get a list of brands
	 * @see {@link BrandSearchModel}
	 * @public
	 */
	export interface GetBrandsDto extends BrandSearchModel {
	}
	/**
	 * Use to get a list of brand site domains
	 * @see {@link BrandSiteDomainSearchModel}
	 * @public
	 */
	export interface GetBrandSiteDomainsDto extends BrandSiteDomainSearchModel {
	}
	/**
	 * Use to get a list of brand stores
	 * @see {@link BrandStoreSearchModel}
	 * @public
	 */
	export interface GetBrandStoresDto extends BrandStoreSearchModel {
	}
	/**
	 * Use to get a list of brand users
	 * @see {@link BrandUserSearchModel}
	 * @public
	 */
	export interface GetBrandUsersDto extends BrandUserSearchModel {
	}
	/**
	 * Use to get a list of brand vendors
	 * @see {@link BrandVendorSearchModel}
	 * @public
	 */
	export interface GetBrandVendorsDto extends BrandVendorSearchModel {
	}
	/**
	 * Use to update an existing brand.
	 * @see {@link BrandModel}
	 * @public
	 */
	export interface UpdateBrandDto extends BrandModel {
	}
	/**
	 * Use to update an existing brand account.
	 * @see {@link BrandAccountModel}
	 * @public
	 */
	export interface UpdateBrandAccountDto extends BrandAccountModel {
	}
	/**
	 * Use to update an existing brand category.
	 * @see {@link BrandCategoryModel}
	 * @public
	 */
	export interface UpdateBrandCategoryDto extends BrandCategoryModel {
	}
	/**
	 * Use to update an existing brand currency.
	 * @see {@link BrandCurrencyModel}
	 * @public
	 */
	export interface UpdateBrandCurrencyDto extends BrandCurrencyModel {
	}
	/**
	 * Use to update an existing brand franchise.
	 * @see {@link BrandFranchiseModel}
	 * @public
	 */
	export interface UpdateBrandFranchiseDto extends BrandFranchiseModel {
	}
	/**
	 * Use to update an existing brand image.
	 * @see {@link BrandImageModel}
	 * @public
	 */
	export interface UpdateBrandImageDto extends BrandImageModel {
	}
	/**
	 * Use to update an existing brand image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateBrandImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing brand inventory location.
	 * @see {@link BrandInventoryLocationModel}
	 * @public
	 */
	export interface UpdateBrandInventoryLocationDto extends BrandInventoryLocationModel {
	}
	/**
	 * Use to update an existing brand inventory location type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateBrandInventoryLocationTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing brand language.
	 * @see {@link BrandLanguageModel}
	 * @public
	 */
	export interface UpdateBrandLanguageDto extends BrandLanguageModel {
	}
	/**
	 * Use to update an existing brand manufacturer.
	 * @see {@link BrandManufacturerModel}
	 * @public
	 */
	export interface UpdateBrandManufacturerDto extends BrandManufacturerModel {
	}
	/**
	 * Use to update an existing brand product.
	 * @see {@link BrandProductModel}
	 * @public
	 */
	export interface UpdateBrandProductDto extends BrandProductModel {
	}
	/**
	 * Use to update an existing brand site domain.
	 * @see {@link BrandSiteDomainModel}
	 * @public
	 */
	export interface UpdateBrandSiteDomainDto extends BrandSiteDomainModel {
	}
	/**
	 * Use to update an existing brand store.
	 * @see {@link BrandStoreModel}
	 * @public
	 */
	export interface UpdateBrandStoreDto extends BrandStoreModel {
	}
	/**
	 * Use to update an existing brand user.
	 * @see {@link BrandUserModel}
	 * @public
	 */
	export interface UpdateBrandUserDto extends BrandUserModel {
	}
	/**
	 * Use to update an existing brand vendor.
	 * @see {@link BrandVendorModel}
	 * @public
	 */
	export interface UpdateBrandVendorDto extends BrandVendorModel {
	}
	/**
	 * Use to create a new or update an existing brand product (as needed).
	 * @see {@link BrandProductModel}
	 * @public
	 */
	export interface UpsertBrandProductDto extends BrandProductModel {
	}

	export class Brands extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all brand account calls.
		 * @param {@link cef.admin.api.ClearBrandAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandAccountCache
		 * @path <API Root>/Brands/BrandAccount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandAccount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand calls.
		 * @param {@link cef.admin.api.ClearBrandCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandCache
		 * @path <API Root>/Brands/Brand/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "Brand", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand category calls.
		 * @param {@link cef.admin.api.ClearBrandCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandCategoryCache
		 * @path <API Root>/Brands/BrandCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand currency calls.
		 * @param {@link cef.admin.api.ClearBrandCurrencyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandCurrencyCache
		 * @path <API Root>/Brands/BrandCurrency/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandCurrencyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandCurrency", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand franchise calls.
		 * @param {@link cef.admin.api.ClearBrandFranchiseCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandFranchiseCache
		 * @path <API Root>/Brands/BrandFranchise/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandFranchiseCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandFranchise", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand image calls.
		 * @param {@link cef.admin.api.ClearBrandImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandImageCache
		 * @path <API Root>/Brands/BrandImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand image type calls.
		 * @param {@link cef.admin.api.ClearBrandImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandImageTypeCache
		 * @path <API Root>/Brands/BrandImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand inventory location calls.
		 * @param {@link cef.admin.api.ClearBrandInventoryLocationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandInventoryLocationCache
		 * @path <API Root>/Brands/BrandInventoryLocation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandInventoryLocationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand inventory location type calls.
		 * @param {@link cef.admin.api.ClearBrandInventoryLocationTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandInventoryLocationTypeCache
		 * @path <API Root>/Brands/BrandInventoryLocationType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandInventoryLocationTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand language calls.
		 * @param {@link cef.admin.api.ClearBrandLanguageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandLanguageCache
		 * @path <API Root>/Brands/BrandLanguage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandLanguageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandLanguage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand manufacturer calls.
		 * @param {@link cef.admin.api.ClearBrandManufacturerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandManufacturerCache
		 * @path <API Root>/Brands/BrandManufacturer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandManufacturerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandManufacturer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand product calls.
		 * @param {@link cef.admin.api.ClearBrandProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandProductCache
		 * @path <API Root>/Brands/BrandProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand site domain calls.
		 * @param {@link cef.admin.api.ClearBrandSiteDomainCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandSiteDomainCache
		 * @path <API Root>/Brands/BrandSiteDomain/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandSiteDomainCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandSiteDomain", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand store calls.
		 * @param {@link cef.admin.api.ClearBrandStoreCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandStoreCache
		 * @path <API Root>/Brands/BrandStore/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandStoreCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandStore", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand user calls.
		 * @param {@link cef.admin.api.ClearBrandUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandUserCache
		 * @path <API Root>/Brands/BrandUser/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandUser", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand vendor calls.
		 * @param {@link cef.admin.api.ClearBrandVendorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandVendorCache
		 * @path <API Root>/Brands/BrandVendor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandVendorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Brands", "BrandVendor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new brand.
		 * @param {@link cef.admin.api.CreateBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrand
		 * @path <API Root>/Brands/Brand/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrand = (routeParams?: CreateBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "Brand", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand account.
		 * @param {@link cef.admin.api.CreateBrandAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandAccount
		 * @path <API Root>/Brands/BrandAccount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandAccount = (routeParams?: CreateBrandAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandAccount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand category.
		 * @param {@link cef.admin.api.CreateBrandCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandCategory
		 * @path <API Root>/Brands/BrandCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandCategory = (routeParams?: CreateBrandCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand currency.
		 * @param {@link cef.admin.api.CreateBrandCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandCurrency
		 * @path <API Root>/Brands/BrandCurrency/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandCurrency = (routeParams?: CreateBrandCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandCurrency", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand franchise.
		 * @param {@link cef.admin.api.CreateBrandFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandFranchise
		 * @path <API Root>/Brands/BrandFranchise/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandFranchise = (routeParams?: CreateBrandFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandFranchise", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand image.
		 * @param {@link cef.admin.api.CreateBrandImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandImage
		 * @path <API Root>/Brands/BrandImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandImage = (routeParams?: CreateBrandImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand image type.
		 * @param {@link cef.admin.api.CreateBrandImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandImageType
		 * @path <API Root>/Brands/BrandImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandImageType = (routeParams?: CreateBrandImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand inventory location.
		 * @param {@link cef.admin.api.CreateBrandInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandInventoryLocation
		 * @path <API Root>/Brands/BrandInventoryLocation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandInventoryLocation = (routeParams?: CreateBrandInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand inventory location type.
		 * @param {@link cef.admin.api.CreateBrandInventoryLocationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandInventoryLocationType
		 * @path <API Root>/Brands/BrandInventoryLocationType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandInventoryLocationType = (routeParams?: CreateBrandInventoryLocationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand language.
		 * @param {@link cef.admin.api.CreateBrandLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandLanguage
		 * @path <API Root>/Brands/BrandLanguage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandLanguage = (routeParams?: CreateBrandLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandLanguage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand manufacturer.
		 * @param {@link cef.admin.api.CreateBrandManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandManufacturer
		 * @path <API Root>/Brands/BrandManufacturer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandManufacturer = (routeParams?: CreateBrandManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandManufacturer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand product.
		 * @param {@link cef.admin.api.CreateBrandProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandProduct
		 * @path <API Root>/Brands/BrandProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandProduct = (routeParams?: CreateBrandProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand site domain.
		 * @param {@link cef.admin.api.CreateBrandSiteDomainDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandSiteDomain
		 * @path <API Root>/Brands/BrandSiteDomain/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandSiteDomain = (routeParams?: CreateBrandSiteDomainDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandSiteDomain", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand store.
		 * @param {@link cef.admin.api.CreateBrandStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandStore
		 * @path <API Root>/Brands/BrandStore/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandStore = (routeParams?: CreateBrandStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandStore", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand user.
		 * @param {@link cef.admin.api.CreateBrandUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandUser
		 * @path <API Root>/Brands/BrandUser/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandUser = (routeParams?: CreateBrandUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandUser", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand vendor.
		 * @param {@link cef.admin.api.CreateBrandVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandVendor
		 * @path <API Root>/Brands/BrandVendor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandVendor = (routeParams?: CreateBrandVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandVendor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific brand account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandAccountByID
		 * @path <API Root>/Brands/BrandAccount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandAccount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandByID
		 * @path <API Root>/Brands/Brand/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "Brand", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandCategoryByID
		 * @path <API Root>/Brands/BrandCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand currency from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandCurrencyByID
		 * @path <API Root>/Brands/BrandCurrency/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandCurrency", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand franchise from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandFranchiseByID
		 * @path <API Root>/Brands/BrandFranchise/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandFranchise", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandImageByID
		 * @path <API Root>/Brands/BrandImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandImageTypeByID
		 * @path <API Root>/Brands/BrandImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand inventory location from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandInventoryLocationByID
		 * @path <API Root>/Brands/BrandInventoryLocation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand inventory location type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandInventoryLocationTypeByID
		 * @path <API Root>/Brands/BrandInventoryLocationType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand language from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandLanguageByID
		 * @path <API Root>/Brands/BrandLanguage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandLanguage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand manufacturer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandManufacturerByID
		 * @path <API Root>/Brands/BrandManufacturer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandManufacturer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandProductByID
		 * @path <API Root>/Brands/BrandProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand site domain from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandSiteDomainByID
		 * @path <API Root>/Brands/BrandSiteDomain/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandSiteDomain", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand store from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandStoreByID
		 * @path <API Root>/Brands/BrandStore/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandStore", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandUserByID
		 * @path <API Root>/Brands/BrandUser/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandUser", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand vendor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandVendorByID
		 * @path <API Root>/Brands/BrandVendor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandVendor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific brand account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandAccountByID
		 * @path <API Root>/Brands/BrandAccount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandAccount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandByID
		 * @path <API Root>/Brands/Brand/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "Brand", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandCategoryByID
		 * @path <API Root>/Brands/BrandCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand currency from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandCurrencyByID
		 * @path <API Root>/Brands/BrandCurrency/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandCurrency", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand franchise from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandFranchiseByID
		 * @path <API Root>/Brands/BrandFranchise/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandFranchise", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandImageByID
		 * @path <API Root>/Brands/BrandImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandImageTypeByID
		 * @path <API Root>/Brands/BrandImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand inventory location from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandInventoryLocationByID
		 * @path <API Root>/Brands/BrandInventoryLocation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand inventory location type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandInventoryLocationTypeByID
		 * @path <API Root>/Brands/BrandInventoryLocationType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand language from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandLanguageByID
		 * @path <API Root>/Brands/BrandLanguage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandLanguage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand manufacturer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandManufacturerByID
		 * @path <API Root>/Brands/BrandManufacturer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandManufacturer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandProductByID
		 * @path <API Root>/Brands/BrandProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand site domain from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandSiteDomainByID
		 * @path <API Root>/Brands/BrandSiteDomain/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandSiteDomain", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand store from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandStoreByID
		 * @path <API Root>/Brands/BrandStore/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandStore", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandUserByID
		 * @path <API Root>/Brands/BrandUser/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandUser", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand vendor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandVendorByID
		 * @path <API Root>/Brands/BrandVendor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandVendor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific brand account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandAccountByID
		 * @path <API Root>/Brands/BrandAccount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandAccountModel>}
		 * @public
		 */
		GetBrandAccountByID = (id: number) => this.$http<BrandAccountModel>({
			url: [this.rootUrl, "Brands", "BrandAccount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandAccounts
		 * @path <API Root>/Brands/BrandAccounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandAccountPagedResults>}
		 * @public
		 */
		GetBrandAccounts = (routeParams?: GetBrandAccountsDto) => this.$http<BrandAccountPagedResults>({
			url: [this.rootUrl, "Brands", "BrandAccounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandByID
		 * @path <API Root>/Brands/Brand/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandModel>}
		 * @public
		 */
		GetBrandByID = (id: number) => this.$http<BrandModel>({
			url: [this.rootUrl, "Brands", "Brand", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandCategories
		 * @path <API Root>/Brands/BrandCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandCategoryPagedResults>}
		 * @public
		 */
		GetBrandCategories = (routeParams?: GetBrandCategoriesDto) => this.$http<BrandCategoryPagedResults>({
			url: [this.rootUrl, "Brands", "BrandCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandCategoryByID
		 * @path <API Root>/Brands/BrandCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandCategoryModel>}
		 * @public
		 */
		GetBrandCategoryByID = (id: number) => this.$http<BrandCategoryModel>({
			url: [this.rootUrl, "Brands", "BrandCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand currencies
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandCurrencies
		 * @path <API Root>/Brands/BrandCurrencies
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandCurrencyPagedResults>}
		 * @public
		 */
		GetBrandCurrencies = (routeParams?: GetBrandCurrenciesDto) => this.$http<BrandCurrencyPagedResults>({
			url: [this.rootUrl, "Brands", "BrandCurrencies"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand currency
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandCurrencyByID
		 * @path <API Root>/Brands/BrandCurrency/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandCurrencyModel>}
		 * @public
		 */
		GetBrandCurrencyByID = (id: number) => this.$http<BrandCurrencyModel>({
			url: [this.rootUrl, "Brands", "BrandCurrency", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific brand franchise
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandFranchiseByID
		 * @path <API Root>/Brands/BrandFranchise/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandFranchiseModel>}
		 * @public
		 */
		GetBrandFranchiseByID = (id: number) => this.$http<BrandFranchiseModel>({
			url: [this.rootUrl, "Brands", "BrandFranchise", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand franchises
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandFranchises
		 * @path <API Root>/Brands/BrandFranchises
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandFranchisePagedResults>}
		 * @public
		 */
		GetBrandFranchises = (routeParams?: GetBrandFranchisesDto) => this.$http<BrandFranchisePagedResults>({
			url: [this.rootUrl, "Brands", "BrandFranchises"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandImageByID
		 * @path <API Root>/Brands/BrandImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandImageModel>}
		 * @public
		 */
		GetBrandImageByID = (id: number) => this.$http<BrandImageModel>({
			url: [this.rootUrl, "Brands", "BrandImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandImages
		 * @path <API Root>/Brands/BrandImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandImagePagedResults>}
		 * @public
		 */
		GetBrandImages = (routeParams?: GetBrandImagesDto) => this.$http<BrandImagePagedResults>({
			url: [this.rootUrl, "Brands", "BrandImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandImageTypeByID
		 * @path <API Root>/Brands/BrandImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetBrandImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Brands", "BrandImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandImageTypes
		 * @path <API Root>/Brands/BrandImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandImageTypePagedResults>}
		 * @public
		 */
		GetBrandImageTypes = (routeParams?: GetBrandImageTypesDto) => this.$http<BrandImageTypePagedResults>({
			url: [this.rootUrl, "Brands", "BrandImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand inventory location
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandInventoryLocationByID
		 * @path <API Root>/Brands/BrandInventoryLocation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandInventoryLocationModel>}
		 * @public
		 */
		GetBrandInventoryLocationByID = (id: number) => this.$http<BrandInventoryLocationModel>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand inventory locations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandInventoryLocations
		 * @path <API Root>/Brands/BrandInventoryLocations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandInventoryLocationPagedResults>}
		 * @public
		 */
		GetBrandInventoryLocations = (routeParams?: GetBrandInventoryLocationsDto) => this.$http<BrandInventoryLocationPagedResults>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand inventory location type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandInventoryLocationTypeByID
		 * @path <API Root>/Brands/BrandInventoryLocationType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetBrandInventoryLocationTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand inventory location types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandInventoryLocationTypes
		 * @path <API Root>/Brands/BrandInventoryLocationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandInventoryLocationTypePagedResults>}
		 * @public
		 */
		GetBrandInventoryLocationTypes = (routeParams?: GetBrandInventoryLocationTypesDto) => this.$http<BrandInventoryLocationTypePagedResults>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand language
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandLanguageByID
		 * @path <API Root>/Brands/BrandLanguage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandLanguageModel>}
		 * @public
		 */
		GetBrandLanguageByID = (id: number) => this.$http<BrandLanguageModel>({
			url: [this.rootUrl, "Brands", "BrandLanguage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand languages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandLanguages
		 * @path <API Root>/Brands/BrandLanguages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandLanguagePagedResults>}
		 * @public
		 */
		GetBrandLanguages = (routeParams?: GetBrandLanguagesDto) => this.$http<BrandLanguagePagedResults>({
			url: [this.rootUrl, "Brands", "BrandLanguages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand manufacturer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandManufacturerByID
		 * @path <API Root>/Brands/BrandManufacturer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandManufacturerModel>}
		 * @public
		 */
		GetBrandManufacturerByID = (id: number) => this.$http<BrandManufacturerModel>({
			url: [this.rootUrl, "Brands", "BrandManufacturer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand manufacturers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandManufacturers
		 * @path <API Root>/Brands/BrandManufacturers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandManufacturerPagedResults>}
		 * @public
		 */
		GetBrandManufacturers = (routeParams?: GetBrandManufacturersDto) => this.$http<BrandManufacturerPagedResults>({
			url: [this.rootUrl, "Brands", "BrandManufacturers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandProductByID
		 * @path <API Root>/Brands/BrandProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandProductModel>}
		 * @public
		 */
		GetBrandProductByID = (id: number) => this.$http<BrandProductModel>({
			url: [this.rootUrl, "Brands", "BrandProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandProducts
		 * @path <API Root>/Brands/BrandProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandProductPagedResults>}
		 * @public
		 */
		GetBrandProducts = (routeParams?: GetBrandProductsDto) => this.$http<BrandProductPagedResults>({
			url: [this.rootUrl, "Brands", "BrandProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of brands
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrands
		 * @path <API Root>/Brands/Brands
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandPagedResults>}
		 * @public
		 */
		GetBrands = (routeParams?: GetBrandsDto) => this.$http<BrandPagedResults>({
			url: [this.rootUrl, "Brands", "Brands"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand site domain
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandSiteDomainByID
		 * @path <API Root>/Brands/BrandSiteDomain/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandSiteDomainModel>}
		 * @public
		 */
		GetBrandSiteDomainByID = (id: number) => this.$http<BrandSiteDomainModel>({
			url: [this.rootUrl, "Brands", "BrandSiteDomain", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand site domains
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandSiteDomains
		 * @path <API Root>/Brands/BrandSiteDomains
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandSiteDomainPagedResults>}
		 * @public
		 */
		GetBrandSiteDomains = (routeParams?: GetBrandSiteDomainsDto) => this.$http<BrandSiteDomainPagedResults>({
			url: [this.rootUrl, "Brands", "BrandSiteDomains"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandStoreByID
		 * @path <API Root>/Brands/BrandStore/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandStoreModel>}
		 * @public
		 */
		GetBrandStoreByID = (id: number) => this.$http<BrandStoreModel>({
			url: [this.rootUrl, "Brands", "BrandStore", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand stores
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandStores
		 * @path <API Root>/Brands/BrandStores
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandStorePagedResults>}
		 * @public
		 */
		GetBrandStores = (routeParams?: GetBrandStoresDto) => this.$http<BrandStorePagedResults>({
			url: [this.rootUrl, "Brands", "BrandStores"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandUserByID
		 * @path <API Root>/Brands/BrandUser/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandUserModel>}
		 * @public
		 */
		GetBrandUserByID = (id: number) => this.$http<BrandUserModel>({
			url: [this.rootUrl, "Brands", "BrandUser", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandUsers
		 * @path <API Root>/Brands/BrandUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandUserPagedResults>}
		 * @public
		 */
		GetBrandUsers = (routeParams?: GetBrandUsersDto) => this.$http<BrandUserPagedResults>({
			url: [this.rootUrl, "Brands", "BrandUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand vendor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandVendorByID
		 * @path <API Root>/Brands/BrandVendor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandVendorModel>}
		 * @public
		 */
		GetBrandVendorByID = (id: number) => this.$http<BrandVendorModel>({
			url: [this.rootUrl, "Brands", "BrandVendor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand vendors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandVendors
		 * @path <API Root>/Brands/BrandVendors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandVendorPagedResults>}
		 * @public
		 */
		GetBrandVendors = (routeParams?: GetBrandVendorsDto) => this.$http<BrandVendorPagedResults>({
			url: [this.rootUrl, "Brands", "BrandVendors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the current brand based on url, sub-domain or sub-folder
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentBrand
		 * @path <API Root>/Brands/Brand/Current
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<BrandModel>>}
		 * @public
		 */
		GetCurrentBrand = () => this.$http<CEFActionResponseT<BrandModel>>({
			url: [this.rootUrl, "Brands", "Brand", "Current"].join("/"),
			method: "GET",
		});

		/**
		 * Reactivate a specific brand account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandAccountByID
		 * @path <API Root>/Brands/BrandAccount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandAccount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandByID
		 * @path <API Root>/Brands/Brand/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "Brand", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandCategoryByID
		 * @path <API Root>/Brands/BrandCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand currency from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandCurrencyByID
		 * @path <API Root>/Brands/BrandCurrency/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandCurrency", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand franchise from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandFranchiseByID
		 * @path <API Root>/Brands/BrandFranchise/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandFranchise", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandImageByID
		 * @path <API Root>/Brands/BrandImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandImageTypeByID
		 * @path <API Root>/Brands/BrandImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand inventory location from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandInventoryLocationByID
		 * @path <API Root>/Brands/BrandInventoryLocation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand inventory location type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandInventoryLocationTypeByID
		 * @path <API Root>/Brands/BrandInventoryLocationType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand language from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandLanguageByID
		 * @path <API Root>/Brands/BrandLanguage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandLanguage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand manufacturer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandManufacturerByID
		 * @path <API Root>/Brands/BrandManufacturer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandManufacturer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandProductByID
		 * @path <API Root>/Brands/BrandProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand site domain from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandSiteDomainByID
		 * @path <API Root>/Brands/BrandSiteDomain/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandSiteDomain", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand store from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandStoreByID
		 * @path <API Root>/Brands/BrandStore/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandStore", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandUserByID
		 * @path <API Root>/Brands/BrandUser/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandUser", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand vendor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandVendorByID
		 * @path <API Root>/Brands/BrandVendor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Brands", "BrandVendor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing brand.
		 * @param {@link cef.admin.api.UpdateBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrand
		 * @path <API Root>/Brands/Brand/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrand = (routeParams?: UpdateBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "Brand", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand account.
		 * @param {@link cef.admin.api.UpdateBrandAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandAccount
		 * @path <API Root>/Brands/BrandAccount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandAccount = (routeParams?: UpdateBrandAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandAccount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand category.
		 * @param {@link cef.admin.api.UpdateBrandCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandCategory
		 * @path <API Root>/Brands/BrandCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandCategory = (routeParams?: UpdateBrandCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand currency.
		 * @param {@link cef.admin.api.UpdateBrandCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandCurrency
		 * @path <API Root>/Brands/BrandCurrency/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandCurrency = (routeParams?: UpdateBrandCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandCurrency", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand franchise.
		 * @param {@link cef.admin.api.UpdateBrandFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandFranchise
		 * @path <API Root>/Brands/BrandFranchise/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandFranchise = (routeParams?: UpdateBrandFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandFranchise", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand image.
		 * @param {@link cef.admin.api.UpdateBrandImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandImage
		 * @path <API Root>/Brands/BrandImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandImage = (routeParams?: UpdateBrandImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand image type.
		 * @param {@link cef.admin.api.UpdateBrandImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandImageType
		 * @path <API Root>/Brands/BrandImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandImageType = (routeParams?: UpdateBrandImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand inventory location.
		 * @param {@link cef.admin.api.UpdateBrandInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandInventoryLocation
		 * @path <API Root>/Brands/BrandInventoryLocation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandInventoryLocation = (routeParams?: UpdateBrandInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand inventory location type.
		 * @param {@link cef.admin.api.UpdateBrandInventoryLocationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandInventoryLocationType
		 * @path <API Root>/Brands/BrandInventoryLocationType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandInventoryLocationType = (routeParams?: UpdateBrandInventoryLocationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandInventoryLocationType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand language.
		 * @param {@link cef.admin.api.UpdateBrandLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandLanguage
		 * @path <API Root>/Brands/BrandLanguage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandLanguage = (routeParams?: UpdateBrandLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandLanguage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand manufacturer.
		 * @param {@link cef.admin.api.UpdateBrandManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandManufacturer
		 * @path <API Root>/Brands/BrandManufacturer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandManufacturer = (routeParams?: UpdateBrandManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandManufacturer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand product.
		 * @param {@link cef.admin.api.UpdateBrandProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandProduct
		 * @path <API Root>/Brands/BrandProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandProduct = (routeParams?: UpdateBrandProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand site domain.
		 * @param {@link cef.admin.api.UpdateBrandSiteDomainDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandSiteDomain
		 * @path <API Root>/Brands/BrandSiteDomain/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandSiteDomain = (routeParams?: UpdateBrandSiteDomainDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandSiteDomain", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand store.
		 * @param {@link cef.admin.api.UpdateBrandStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandStore
		 * @path <API Root>/Brands/BrandStore/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandStore = (routeParams?: UpdateBrandStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandStore", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand user.
		 * @param {@link cef.admin.api.UpdateBrandUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandUser
		 * @path <API Root>/Brands/BrandUser/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandUser = (routeParams?: UpdateBrandUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand vendor.
		 * @param {@link cef.admin.api.UpdateBrandVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandVendor
		 * @path <API Root>/Brands/BrandVendor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandVendor = (routeParams?: UpdateBrandVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandVendor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to create a new or update an existing brand product (as needed).
		 * @param {@link cef.admin.api.UpsertBrandProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertBrandProduct
		 * @path <API Root>/Brands/BrandProduct/Upsert
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpsertBrandProduct = (routeParams?: UpsertBrandProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Brands", "BrandProduct", "Upsert"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
