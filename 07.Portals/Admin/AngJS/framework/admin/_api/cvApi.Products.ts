/**
 * @file framework/admin/_api/cvApi.Products.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new future import.
	 * @see {@link FutureImportModel}
	 * @public
	 */
	export interface CreateFutureImportDto extends FutureImportModel {
	}
	/**
	 * Use to create a new future import status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateFutureImportStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new product.
	 * @see {@link ProductModel}
	 * @public
	 */
	export interface CreateProductDto extends ProductModel {
	}
	/**
	 * Use to create a new product association.
	 * @see {@link ProductAssociationModel}
	 * @public
	 */
	export interface CreateProductAssociationDto extends ProductAssociationModel {
	}
	/**
	 * Use to create a new product association type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateProductAssociationTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new product category.
	 * @see {@link ProductCategoryModel}
	 * @public
	 */
	export interface CreateProductCategoryDto extends ProductCategoryModel {
	}
	/**
	 * Use to create a new product download.
	 * @see {@link ProductDownloadModel}
	 * @public
	 */
	export interface CreateProductDownloadDto extends ProductDownloadModel {
	}
	/**
	 * Use to create a new product download type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateProductDownloadTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new product file.
	 * @see {@link ProductFileModel}
	 * @public
	 */
	export interface CreateProductFileDto extends ProductFileModel {
	}
	/**
	 * Use to create a new product image.
	 * @see {@link ProductImageModel}
	 * @public
	 */
	export interface CreateProductImageDto extends ProductImageModel {
	}
	/**
	 * Use to create a new product image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateProductImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new product inventory location section.
	 * @see {@link ProductInventoryLocationSectionModel}
	 * @public
	 */
	export interface CreateProductInventoryLocationSectionDto extends ProductInventoryLocationSectionModel {
	}
	/**
	 * Use to create a new product membership level.
	 * @see {@link ProductMembershipLevelModel}
	 * @public
	 */
	export interface CreateProductMembershipLevelDto extends ProductMembershipLevelModel {
	}
	/**
	 * Use to create a new product price point.
	 * @see {@link ProductPricePointModel}
	 * @public
	 */
	export interface CreateProductPricePointDto extends ProductPricePointModel {
	}
	/**
	 * Use to create a new product restriction.
	 * @see {@link ProductRestrictionModel}
	 * @public
	 */
	export interface CreateProductRestrictionDto extends ProductRestrictionModel {
	}
	/**
	 * Use to create a new product ship carrier method.
	 * @see {@link ProductShipCarrierMethodModel}
	 * @public
	 */
	export interface CreateProductShipCarrierMethodDto extends ProductShipCarrierMethodModel {
	}
	/**
	 * Use to create a new product status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateProductStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new product subscription type.
	 * @see {@link ProductSubscriptionTypeModel}
	 * @public
	 */
	export interface CreateProductSubscriptionTypeDto extends ProductSubscriptionTypeModel {
	}
	/**
	 * Use to create a new product type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateProductTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of future imports
	 * @see {@link FutureImportSearchModel}
	 * @public
	 */
	export interface GetFutureImportsDto extends FutureImportSearchModel {
	}
	/**
	 * Use to get a list of future import statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetFutureImportStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of product associations
	 * @see {@link ProductAssociationSearchModel}
	 * @public
	 */
	export interface GetProductAssociationsDto extends ProductAssociationSearchModel {
	}
	/**
	 * Use to get a list of product association types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductAssociationTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a specific product
	 * @see {@link ImplementsIDBase}
	 * @public
	 */
	export interface GetProductByIDDto extends ImplementsIDBase {
		/** The store the user has selected if present */
		StoreID?: number;
		/** The brand the user has selected if present */
		BrandID?: number;
		/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
		IsVendorAdmin?: boolean;
		/** The identifier of the vendor which is logged in. This can only be set by the server. */
		VendorAdminID?: number;
		/** The identifier of the preview version to load. */
		PreviewID?: number;
	}
	/**
	 * Use to get a list of product categories
	 * @see {@link ProductCategorySearchModel}
	 * @public
	 */
	export interface GetProductCategoriesDto extends ProductCategorySearchModel {
	}
	/**
	 * Use to get a list of product downloads
	 * @see {@link ProductDownloadSearchModel}
	 * @public
	 */
	export interface GetProductDownloadsDto extends ProductDownloadSearchModel {
	}
	/**
	 * Use to get a list of product download types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductDownloadTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of product files
	 * @see {@link ProductFileSearchModel}
	 * @public
	 */
	export interface GetProductFilesDto extends ProductFileSearchModel {
	}
	/**
	 * Use to get a list of product images
	 * @see {@link ProductImageSearchModel}
	 * @public
	 */
	export interface GetProductImagesDto extends ProductImageSearchModel {
	}
	/**
	 * Use to get a list of product image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of product inventory location sections
	 * @see {@link ProductInventoryLocationSectionSearchModel}
	 * @public
	 */
	export interface GetProductInventoryLocationSectionsDto extends ProductInventoryLocationSectionSearchModel {
	}
	/**
	 * Use to get a list of product membership levels
	 * @see {@link ProductMembershipLevelSearchModel}
	 * @public
	 */
	export interface GetProductMembershipLevelsDto extends ProductMembershipLevelSearchModel {
	}
	/**
	 * Use to get a list of product price points
	 * @see {@link ProductPricePointSearchModel}
	 * @public
	 */
	export interface GetProductPricePointsDto extends ProductPricePointSearchModel {
	}
	/**
	 * Use to get a list of product restrictions
	 * @see {@link ProductRestrictionSearchModel}
	 * @public
	 */
	export interface GetProductRestrictionsDto extends ProductRestrictionSearchModel {
	}
	/**
	 * Use to get a list of products
	 * @see {@link ProductSearchModel}
	 * @public
	 */
	export interface GetProductsDto extends ProductSearchModel {
	}
	/**
	 * Use to get a list of product ship carrier methods
	 * @see {@link ProductShipCarrierMethodSearchModel}
	 * @public
	 */
	export interface GetProductShipCarrierMethodsDto extends ProductShipCarrierMethodSearchModel {
	}
	/**
	 * Use to get a list of product statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetProductStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of product subscription types
	 * @see {@link ProductSubscriptionTypeSearchModel}
	 * @public
	 */
	export interface GetProductSubscriptionTypesDto extends ProductSubscriptionTypeSearchModel {
	}
	/**
	 * Use to get a list of product types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductTypesDto extends TypeSearchModel {
	}
	/**
	 * Import a list of products from a Excel Spreadsheet
	 * @public
	 */
	export interface ImportProductKeywordsFromExcelDto {
		/** File name to be imported */
		FileName: string;
	}
	/**
	 * Import a list of products from a Excel Spreadsheet
	 * @public
	 */
	export interface ImportProductsFromExcelDto {
		/** File name to be imported */
		FileName: string;
	}
	/**
	 * Use to update an existing future import.
	 * @see {@link FutureImportModel}
	 * @public
	 */
	export interface UpdateFutureImportDto extends FutureImportModel {
	}
	/**
	 * Use to update an existing future import status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateFutureImportStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing product.
	 * @see {@link ProductModel}
	 * @public
	 */
	export interface UpdateProductDto extends ProductModel {
	}
	/**
	 * Use to update an existing product association.
	 * @see {@link ProductAssociationModel}
	 * @public
	 */
	export interface UpdateProductAssociationDto extends ProductAssociationModel {
	}
	/**
	 * Use to update an existing product association type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateProductAssociationTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing product category.
	 * @see {@link ProductCategoryModel}
	 * @public
	 */
	export interface UpdateProductCategoryDto extends ProductCategoryModel {
	}
	/**
	 * Use to update an existing product download.
	 * @see {@link ProductDownloadModel}
	 * @public
	 */
	export interface UpdateProductDownloadDto extends ProductDownloadModel {
	}
	/**
	 * Use to update an existing product download type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateProductDownloadTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing product file.
	 * @see {@link ProductFileModel}
	 * @public
	 */
	export interface UpdateProductFileDto extends ProductFileModel {
	}
	/**
	 * Use to update an existing product image.
	 * @see {@link ProductImageModel}
	 * @public
	 */
	export interface UpdateProductImageDto extends ProductImageModel {
	}
	/**
	 * Use to update an existing product image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateProductImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing product inventory location section.
	 * @see {@link ProductInventoryLocationSectionModel}
	 * @public
	 */
	export interface UpdateProductInventoryLocationSectionDto extends ProductInventoryLocationSectionModel {
	}
	/**
	 * Use to update an existing product membership level.
	 * @see {@link ProductMembershipLevelModel}
	 * @public
	 */
	export interface UpdateProductMembershipLevelDto extends ProductMembershipLevelModel {
	}
	/**
	 * Use to update an existing product price point.
	 * @see {@link ProductPricePointModel}
	 * @public
	 */
	export interface UpdateProductPricePointDto extends ProductPricePointModel {
	}
	/**
	 * Use to update an existing product restriction.
	 * @see {@link ProductRestrictionModel}
	 * @public
	 */
	export interface UpdateProductRestrictionDto extends ProductRestrictionModel {
	}
	/**
	 * Use to update an existing product ship carrier method.
	 * @see {@link ProductShipCarrierMethodModel}
	 * @public
	 */
	export interface UpdateProductShipCarrierMethodDto extends ProductShipCarrierMethodModel {
	}
	/**
	 * Use to update an existing product status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateProductStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing product subscription type.
	 * @see {@link ProductSubscriptionTypeModel}
	 * @public
	 */
	export interface UpdateProductSubscriptionTypeDto extends ProductSubscriptionTypeModel {
	}
	/**
	 * Use to update an existing product type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateProductTypeDto extends TypeModel {
	}

	export class Products extends ServiceStackRoute {
		/**
		 * Get Full Product By ID
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminGetProductFull
		 * @path <API Root>/Products/Product/Full/ID/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<ProductModel>}
		 * @public
		 */
		AdminGetProductFull = (id: number) => this.$http<ProductModel>({
			url: [this.rootUrl, "Products", "Product", "Full", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Empties the server-side data cache for all future import calls.
		 * @param {@link cef.admin.api.ClearFutureImportCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFutureImportCache
		 * @path <API Root>/Products/FutureImport/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFutureImportCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "FutureImport", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all future import status calls.
		 * @param {@link cef.admin.api.ClearFutureImportStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFutureImportStatusCache
		 * @path <API Root>/Products/FutureImportStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFutureImportStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "FutureImportStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product association calls.
		 * @param {@link cef.admin.api.ClearProductAssociationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductAssociationCache
		 * @path <API Root>/Products/ProductAssociation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductAssociationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductAssociation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product association type calls.
		 * @param {@link cef.admin.api.ClearProductAssociationTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductAssociationTypeCache
		 * @path <API Root>/Products/ProductAssociationType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductAssociationTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductAssociationType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product calls.
		 * @param {@link cef.admin.api.ClearProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductCache
		 * @path <API Root>/Products/Product/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "Product", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product category calls.
		 * @param {@link cef.admin.api.ClearProductCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductCategoryCache
		 * @path <API Root>/Products/ProductCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product download calls.
		 * @param {@link cef.admin.api.ClearProductDownloadCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductDownloadCache
		 * @path <API Root>/Products/ProductDownload/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductDownloadCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductDownload", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product download type calls.
		 * @param {@link cef.admin.api.ClearProductDownloadTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductDownloadTypeCache
		 * @path <API Root>/Products/ProductDownloadType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductDownloadTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductDownloadType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product file calls.
		 * @param {@link cef.admin.api.ClearProductFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductFileCache
		 * @path <API Root>/Products/ProductFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product image calls.
		 * @param {@link cef.admin.api.ClearProductImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductImageCache
		 * @path <API Root>/Products/ProductImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product image type calls.
		 * @param {@link cef.admin.api.ClearProductImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductImageTypeCache
		 * @path <API Root>/Products/ProductImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product inventory location section calls.
		 * @param {@link cef.admin.api.ClearProductInventoryLocationSectionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductInventoryLocationSectionCache
		 * @path <API Root>/Products/ProductInventoryLocationSection/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductInventoryLocationSectionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSection", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product membership level calls.
		 * @param {@link cef.admin.api.ClearProductMembershipLevelCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductMembershipLevelCache
		 * @path <API Root>/Products/ProductMembershipLevel/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductMembershipLevelCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductMembershipLevel", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product price point calls.
		 * @param {@link cef.admin.api.ClearProductPricePointCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductPricePointCache
		 * @path <API Root>/Products/ProductPricePoint/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductPricePointCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductPricePoint", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product restriction calls.
		 * @param {@link cef.admin.api.ClearProductRestrictionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductRestrictionCache
		 * @path <API Root>/Products/ProductRestriction/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductRestrictionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductRestriction", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product ship carrier method calls.
		 * @param {@link cef.admin.api.ClearProductShipCarrierMethodCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductShipCarrierMethodCache
		 * @path <API Root>/Products/ProductShipCarrierMethod/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductShipCarrierMethodCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethod", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product status calls.
		 * @param {@link cef.admin.api.ClearProductStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductStatusCache
		 * @path <API Root>/Products/ProductStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product subscription type calls.
		 * @param {@link cef.admin.api.ClearProductSubscriptionTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductSubscriptionTypeCache
		 * @path <API Root>/Products/ProductSubscriptionType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductSubscriptionTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductSubscriptionType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product type calls.
		 * @param {@link cef.admin.api.ClearProductTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductTypeCache
		 * @path <API Root>/Products/ProductType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "ProductType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new future import.
		 * @param {@link cef.admin.api.CreateFutureImportDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFutureImport
		 * @path <API Root>/Products/FutureImport/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFutureImport = (routeParams?: CreateFutureImportDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "FutureImport", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new future import status.
		 * @param {@link cef.admin.api.CreateFutureImportStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFutureImportStatus
		 * @path <API Root>/Products/FutureImportStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFutureImportStatus = (routeParams?: CreateFutureImportStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "FutureImportStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product.
		 * @param {@link cef.admin.api.CreateProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProduct
		 * @path <API Root>/Products/Product/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProduct = (routeParams?: CreateProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "Product", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product association.
		 * @param {@link cef.admin.api.CreateProductAssociationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductAssociation
		 * @path <API Root>/Products/ProductAssociation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductAssociation = (routeParams?: CreateProductAssociationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductAssociation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product association type.
		 * @param {@link cef.admin.api.CreateProductAssociationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductAssociationType
		 * @path <API Root>/Products/ProductAssociationType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductAssociationType = (routeParams?: CreateProductAssociationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductAssociationType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product category.
		 * @param {@link cef.admin.api.CreateProductCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductCategory
		 * @path <API Root>/Products/ProductCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductCategory = (routeParams?: CreateProductCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product download.
		 * @param {@link cef.admin.api.CreateProductDownloadDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductDownload
		 * @path <API Root>/Products/ProductDownload/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductDownload = (routeParams?: CreateProductDownloadDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductDownload", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product download type.
		 * @param {@link cef.admin.api.CreateProductDownloadTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductDownloadType
		 * @path <API Root>/Products/ProductDownloadType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductDownloadType = (routeParams?: CreateProductDownloadTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductDownloadType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product file.
		 * @param {@link cef.admin.api.CreateProductFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductFile
		 * @path <API Root>/Products/ProductFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductFile = (routeParams?: CreateProductFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product image.
		 * @param {@link cef.admin.api.CreateProductImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductImage
		 * @path <API Root>/Products/ProductImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductImage = (routeParams?: CreateProductImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product image type.
		 * @param {@link cef.admin.api.CreateProductImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductImageType
		 * @path <API Root>/Products/ProductImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductImageType = (routeParams?: CreateProductImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product inventory location section.
		 * @param {@link cef.admin.api.CreateProductInventoryLocationSectionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductInventoryLocationSection
		 * @path <API Root>/Products/ProductInventoryLocationSection/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductInventoryLocationSection = (routeParams?: CreateProductInventoryLocationSectionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSection", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product membership level.
		 * @param {@link cef.admin.api.CreateProductMembershipLevelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductMembershipLevel
		 * @path <API Root>/Products/ProductMembershipLevel/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductMembershipLevel = (routeParams?: CreateProductMembershipLevelDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductMembershipLevel", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product price point.
		 * @param {@link cef.admin.api.CreateProductPricePointDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductPricePoint
		 * @path <API Root>/Products/ProductPricePoint/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductPricePoint = (routeParams?: CreateProductPricePointDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductPricePoint", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product restriction.
		 * @param {@link cef.admin.api.CreateProductRestrictionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductRestriction
		 * @path <API Root>/Products/ProductRestriction/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductRestriction = (routeParams?: CreateProductRestrictionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductRestriction", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product ship carrier method.
		 * @param {@link cef.admin.api.CreateProductShipCarrierMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductShipCarrierMethod
		 * @path <API Root>/Products/ProductShipCarrierMethod/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductShipCarrierMethod = (routeParams?: CreateProductShipCarrierMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethod", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product status.
		 * @param {@link cef.admin.api.CreateProductStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductStatus
		 * @path <API Root>/Products/ProductStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductStatus = (routeParams?: CreateProductStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product subscription type.
		 * @param {@link cef.admin.api.CreateProductSubscriptionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductSubscriptionType
		 * @path <API Root>/Products/ProductSubscriptionType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductSubscriptionType = (routeParams?: CreateProductSubscriptionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductSubscriptionType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product type.
		 * @param {@link cef.admin.api.CreateProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductType
		 * @path <API Root>/Products/ProductType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductType = (routeParams?: CreateProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific future import from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFutureImportByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFutureImportByID
		 * @path <API Root>/Products/FutureImport/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFutureImportByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "FutureImport", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific future import status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFutureImportStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFutureImportStatusByID
		 * @path <API Root>/Products/FutureImportStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFutureImportStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "FutureImportStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product association from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductAssociationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductAssociationByID
		 * @path <API Root>/Products/ProductAssociation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductAssociationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductAssociation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product association type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductAssociationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductAssociationTypeByID
		 * @path <API Root>/Products/ProductAssociationType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductAssociationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductAssociationType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductByID
		 * @path <API Root>/Products/Product/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "Product", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductCategoryByID
		 * @path <API Root>/Products/ProductCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product download from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductDownloadByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductDownloadByID
		 * @path <API Root>/Products/ProductDownload/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductDownloadByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductDownload", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product download type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductDownloadTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductDownloadTypeByID
		 * @path <API Root>/Products/ProductDownloadType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductDownloadTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductDownloadType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductFileByID
		 * @path <API Root>/Products/ProductFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductImageByID
		 * @path <API Root>/Products/ProductImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductImageTypeByID
		 * @path <API Root>/Products/ProductImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product inventory location section from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductInventoryLocationSectionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductInventoryLocationSectionByID
		 * @path <API Root>/Products/ProductInventoryLocationSection/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductInventoryLocationSectionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSection", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product membership level from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductMembershipLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductMembershipLevelByID
		 * @path <API Root>/Products/ProductMembershipLevel/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductMembershipLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductMembershipLevel", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product price point from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductPricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductPricePointByID
		 * @path <API Root>/Products/ProductPricePoint/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductPricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductPricePoint", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product restriction from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductRestrictionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductRestrictionByID
		 * @path <API Root>/Products/ProductRestriction/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductRestrictionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductRestriction", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product ship carrier method from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductShipCarrierMethodByID
		 * @path <API Root>/Products/ProductShipCarrierMethod/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethod", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductStatusByID
		 * @path <API Root>/Products/ProductStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product subscription type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductSubscriptionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductSubscriptionTypeByID
		 * @path <API Root>/Products/ProductSubscriptionType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductSubscriptionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductSubscriptionType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductTypeByID
		 * @path <API Root>/Products/ProductType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific future import from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFutureImportByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFutureImportByID
		 * @path <API Root>/Products/FutureImport/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFutureImportByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "FutureImport", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific future import status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFutureImportStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFutureImportStatusByID
		 * @path <API Root>/Products/FutureImportStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFutureImportStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "FutureImportStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product association from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductAssociationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductAssociationByID
		 * @path <API Root>/Products/ProductAssociation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductAssociationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductAssociation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product association type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductAssociationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductAssociationTypeByID
		 * @path <API Root>/Products/ProductAssociationType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductAssociationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductAssociationType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductByID
		 * @path <API Root>/Products/Product/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "Product", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductCategoryByID
		 * @path <API Root>/Products/ProductCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product download from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductDownloadByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductDownloadByID
		 * @path <API Root>/Products/ProductDownload/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductDownloadByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductDownload", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product download type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductDownloadTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductDownloadTypeByID
		 * @path <API Root>/Products/ProductDownloadType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductDownloadTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductDownloadType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductFileByID
		 * @path <API Root>/Products/ProductFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductImageByID
		 * @path <API Root>/Products/ProductImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductImageTypeByID
		 * @path <API Root>/Products/ProductImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product inventory location section from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductInventoryLocationSectionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductInventoryLocationSectionByID
		 * @path <API Root>/Products/ProductInventoryLocationSection/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductInventoryLocationSectionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSection", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product membership level from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductMembershipLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductMembershipLevelByID
		 * @path <API Root>/Products/ProductMembershipLevel/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductMembershipLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductMembershipLevel", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product price point from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductPricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductPricePointByID
		 * @path <API Root>/Products/ProductPricePoint/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductPricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductPricePoint", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product restriction from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductRestrictionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductRestrictionByID
		 * @path <API Root>/Products/ProductRestriction/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductRestrictionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductRestriction", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product ship carrier method from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductShipCarrierMethodByID
		 * @path <API Root>/Products/ProductShipCarrierMethod/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethod", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductStatusByID
		 * @path <API Root>/Products/ProductStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product subscription type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductSubscriptionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductSubscriptionTypeByID
		 * @path <API Root>/Products/ProductSubscriptionType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductSubscriptionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductSubscriptionType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductTypeByID
		 * @path <API Root>/Products/ProductType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific future import
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFutureImportByID
		 * @path <API Root>/Products/FutureImport/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FutureImportModel>}
		 * @public
		 */
		GetFutureImportByID = (id: number) => this.$http<FutureImportModel>({
			url: [this.rootUrl, "Products", "FutureImport", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of future imports
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFutureImports
		 * @path <API Root>/Products/FutureImports
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FutureImportPagedResults>}
		 * @public
		 */
		GetFutureImports = (routeParams?: GetFutureImportsDto) => this.$http<FutureImportPagedResults>({
			url: [this.rootUrl, "Products", "FutureImports"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific future import status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFutureImportStatusByID
		 * @path <API Root>/Products/FutureImportStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetFutureImportStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Products", "FutureImportStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of future import statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFutureImportStatuses
		 * @path <API Root>/Products/FutureImportStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FutureImportStatusPagedResults>}
		 * @public
		 */
		GetFutureImportStatuses = (routeParams?: GetFutureImportStatusesDto) => this.$http<FutureImportStatusPagedResults>({
			url: [this.rootUrl, "Products", "FutureImportStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product association
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductAssociationByID
		 * @path <API Root>/Products/ProductAssociation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductAssociationModel>}
		 * @public
		 */
		GetProductAssociationByID = (id: number) => this.$http<ProductAssociationModel>({
			url: [this.rootUrl, "Products", "ProductAssociation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product associations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductAssociations
		 * @path <API Root>/Products/ProductAssociations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductAssociationPagedResults>}
		 * @public
		 */
		GetProductAssociations = (routeParams?: GetProductAssociationsDto) => this.$http<ProductAssociationPagedResults>({
			url: [this.rootUrl, "Products", "ProductAssociations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product association type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductAssociationTypeByID
		 * @path <API Root>/Products/ProductAssociationType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetProductAssociationTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Products", "ProductAssociationType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product association types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductAssociationTypes
		 * @path <API Root>/Products/ProductAssociationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductAssociationTypePagedResults>}
		 * @public
		 */
		GetProductAssociationTypes = (routeParams?: GetProductAssociationTypesDto) => this.$http<ProductAssociationTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductAssociationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductByID
		 * @path <API Root>/Products/Product/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductModel>}
		 * @public
		 */
		GetProductByID = (id: number, routeParams?: GetProductByIDDto) => this.$http<ProductModel>({
			url: [this.rootUrl, "Products", "Product", "ID", id].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of product categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductCategories
		 * @path <API Root>/Products/ProductCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductCategoryPagedResults>}
		 * @public
		 */
		GetProductCategories = (routeParams?: GetProductCategoriesDto) => this.$http<ProductCategoryPagedResults>({
			url: [this.rootUrl, "Products", "ProductCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductCategoryByID
		 * @path <API Root>/Products/ProductCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductCategoryModel>}
		 * @public
		 */
		GetProductCategoryByID = (id: number) => this.$http<ProductCategoryModel>({
			url: [this.rootUrl, "Products", "ProductCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific product download
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductDownloadByID
		 * @path <API Root>/Products/ProductDownload/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductDownloadModel>}
		 * @public
		 */
		GetProductDownloadByID = (id: number) => this.$http<ProductDownloadModel>({
			url: [this.rootUrl, "Products", "ProductDownload", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product downloads
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductDownloads
		 * @path <API Root>/Products/ProductDownloads
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductDownloadPagedResults>}
		 * @public
		 */
		GetProductDownloads = (routeParams?: GetProductDownloadsDto) => this.$http<ProductDownloadPagedResults>({
			url: [this.rootUrl, "Products", "ProductDownloads"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product download type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductDownloadTypeByID
		 * @path <API Root>/Products/ProductDownloadType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetProductDownloadTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Products", "ProductDownloadType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product download types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductDownloadTypes
		 * @path <API Root>/Products/ProductDownloadTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductDownloadTypePagedResults>}
		 * @public
		 */
		GetProductDownloadTypes = (routeParams?: GetProductDownloadTypesDto) => this.$http<ProductDownloadTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductDownloadTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductFileByID
		 * @path <API Root>/Products/ProductFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductFileModel>}
		 * @public
		 */
		GetProductFileByID = (id: number) => this.$http<ProductFileModel>({
			url: [this.rootUrl, "Products", "ProductFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductFiles
		 * @path <API Root>/Products/ProductFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductFilePagedResults>}
		 * @public
		 */
		GetProductFiles = (routeParams?: GetProductFilesDto) => this.$http<ProductFilePagedResults>({
			url: [this.rootUrl, "Products", "ProductFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductImageByID
		 * @path <API Root>/Products/ProductImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductImageModel>}
		 * @public
		 */
		GetProductImageByID = (id: number) => this.$http<ProductImageModel>({
			url: [this.rootUrl, "Products", "ProductImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductImages
		 * @path <API Root>/Products/ProductImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductImagePagedResults>}
		 * @public
		 */
		GetProductImages = (routeParams?: GetProductImagesDto) => this.$http<ProductImagePagedResults>({
			url: [this.rootUrl, "Products", "ProductImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductImageTypeByID
		 * @path <API Root>/Products/ProductImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetProductImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Products", "ProductImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductImageTypes
		 * @path <API Root>/Products/ProductImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductImageTypePagedResults>}
		 * @public
		 */
		GetProductImageTypes = (routeParams?: GetProductImageTypesDto) => this.$http<ProductImageTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product inventory location section
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductInventoryLocationSectionByID
		 * @path <API Root>/Products/ProductInventoryLocationSection/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductInventoryLocationSectionModel>}
		 * @public
		 */
		GetProductInventoryLocationSectionByID = (id: number) => this.$http<ProductInventoryLocationSectionModel>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSection", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product inventory location sections
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductInventoryLocationSections
		 * @path <API Root>/Products/ProductInventoryLocationSections
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductInventoryLocationSectionPagedResults>}
		 * @public
		 */
		GetProductInventoryLocationSections = (routeParams?: GetProductInventoryLocationSectionsDto) => this.$http<ProductInventoryLocationSectionPagedResults>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSections"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product membership level
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductMembershipLevelByID
		 * @path <API Root>/Products/ProductMembershipLevel/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductMembershipLevelModel>}
		 * @public
		 */
		GetProductMembershipLevelByID = (id: number) => this.$http<ProductMembershipLevelModel>({
			url: [this.rootUrl, "Products", "ProductMembershipLevel", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product membership levels
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductMembershipLevels
		 * @path <API Root>/Products/ProductMembershipLevels
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductMembershipLevelPagedResults>}
		 * @public
		 */
		GetProductMembershipLevels = (routeParams?: GetProductMembershipLevelsDto) => this.$http<ProductMembershipLevelPagedResults>({
			url: [this.rootUrl, "Products", "ProductMembershipLevels"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product price point
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductPricePointByID
		 * @path <API Root>/Products/ProductPricePoint/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductPricePointModel>}
		 * @public
		 */
		GetProductPricePointByID = (id: number) => this.$http<ProductPricePointModel>({
			url: [this.rootUrl, "Products", "ProductPricePoint", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product price points
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductPricePoints
		 * @path <API Root>/Products/ProductPricePoints
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductPricePointPagedResults>}
		 * @public
		 */
		GetProductPricePoints = (routeParams?: GetProductPricePointsDto) => this.$http<ProductPricePointPagedResults>({
			url: [this.rootUrl, "Products", "ProductPricePoints"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product restriction
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductRestrictionByID
		 * @path <API Root>/Products/ProductRestriction/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductRestrictionModel>}
		 * @public
		 */
		GetProductRestrictionByID = (id: number) => this.$http<ProductRestrictionModel>({
			url: [this.rootUrl, "Products", "ProductRestriction", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product restrictions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductRestrictions
		 * @path <API Root>/Products/ProductRestrictions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductRestrictionPagedResults>}
		 * @public
		 */
		GetProductRestrictions = (routeParams?: GetProductRestrictionsDto) => this.$http<ProductRestrictionPagedResults>({
			url: [this.rootUrl, "Products", "ProductRestrictions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProducts
		 * @path <API Root>/Products/Products
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductPagedResults>}
		 * @public
		 */
		GetProducts = (routeParams?: GetProductsDto) => this.$http<ProductPagedResults>({
			url: [this.rootUrl, "Products", "Products"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to export all products in the system
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductsAsExcelDoc
		 * @path <API Root>/Products/ExportToExcel
		 * @verb GET
		 * @returns {ng.IHttpPromise<DownloadFileResult>}
		 * @public
		 */
		GetProductsAsExcelDoc = () => this.$http<DownloadFileResult>({
			url: [this.rootUrl, "Products", "ExportToExcel"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific product ship carrier method
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductShipCarrierMethodByID
		 * @path <API Root>/Products/ProductShipCarrierMethod/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductShipCarrierMethodModel>}
		 * @public
		 */
		GetProductShipCarrierMethodByID = (id: number) => this.$http<ProductShipCarrierMethodModel>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethod", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product ship carrier methods
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductShipCarrierMethods
		 * @path <API Root>/Products/ProductShipCarrierMethods
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductShipCarrierMethodPagedResults>}
		 * @public
		 */
		GetProductShipCarrierMethods = (routeParams?: GetProductShipCarrierMethodsDto) => this.$http<ProductShipCarrierMethodPagedResults>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethods"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get the product site map without replacing it
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductSiteMapContent
		 * @path <API Root>/Products/SiteMap
		 * @verb GET
		 * @returns {ng.IHttpPromise<DownloadFileResult>}
		 * @public
		 */
		GetProductSiteMapContent = () => this.$http<DownloadFileResult>({
			url: [this.rootUrl, "Products", "SiteMap"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific product status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductStatusByID
		 * @path <API Root>/Products/ProductStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetProductStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Products", "ProductStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductStatuses
		 * @path <API Root>/Products/ProductStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductStatusPagedResults>}
		 * @public
		 */
		GetProductStatuses = (routeParams?: GetProductStatusesDto) => this.$http<ProductStatusPagedResults>({
			url: [this.rootUrl, "Products", "ProductStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product subscription type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductSubscriptionTypeByID
		 * @path <API Root>/Products/ProductSubscriptionType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductSubscriptionTypeModel>}
		 * @public
		 */
		GetProductSubscriptionTypeByID = (id: number) => this.$http<ProductSubscriptionTypeModel>({
			url: [this.rootUrl, "Products", "ProductSubscriptionType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product subscription types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductSubscriptionTypes
		 * @path <API Root>/Products/ProductSubscriptionTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductSubscriptionTypePagedResults>}
		 * @public
		 */
		GetProductSubscriptionTypes = (routeParams?: GetProductSubscriptionTypesDto) => this.$http<ProductSubscriptionTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductSubscriptionTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductTypeByID
		 * @path <API Root>/Products/ProductType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetProductTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Products", "ProductType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductTypes
		 * @path <API Root>/Products/ProductTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductTypePagedResults>}
		 * @public
		 */
		GetProductTypes = (routeParams?: GetProductTypesDto) => this.$http<ProductTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Import a list of products from a Excel Spreadsheet
		 * @param {@link cef.admin.api.ImportProductKeywordsFromExcelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ImportProductKeywordsFromExcel
		 * @path <API Root>/Products/ImportFromExcel
		 * @verb POST
		 * @returns {ng.IHttpPromise<ImportResponse>}
		 * @public
		 */
		ImportProductKeywordsFromExcel = (routeParams: ImportProductKeywordsFromExcelDto) => this.$http<ImportResponse>({
			url: [this.rootUrl, "Products", "ImportKeywordsFromExcel"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Import a list of products from a Excel Spreadsheet
		 * @param {@link cef.admin.api.ImportProductsFromExcelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ImportProductsFromExcel
		 * @path <API Root>/Products/ImportFromExcel
		 * @verb POST
		 * @returns {ng.IHttpPromise<ImportResponse>}
		 * @public
		 */
		ImportProductsFromExcel = (routeParams: ImportProductsFromExcelDto) => this.$http<ImportResponse>({
			url: [this.rootUrl, "Products", "ImportFromExcel"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Reactivate a specific future import from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFutureImportByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFutureImportByID
		 * @path <API Root>/Products/FutureImport/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFutureImportByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "FutureImport", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific future import status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFutureImportStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFutureImportStatusByID
		 * @path <API Root>/Products/FutureImportStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFutureImportStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "FutureImportStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product association from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductAssociationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductAssociationByID
		 * @path <API Root>/Products/ProductAssociation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductAssociationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductAssociation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product association type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductAssociationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductAssociationTypeByID
		 * @path <API Root>/Products/ProductAssociationType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductAssociationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductAssociationType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductByID
		 * @path <API Root>/Products/Product/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "Product", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductCategoryByID
		 * @path <API Root>/Products/ProductCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product download from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductDownloadByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductDownloadByID
		 * @path <API Root>/Products/ProductDownload/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductDownloadByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductDownload", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product download type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductDownloadTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductDownloadTypeByID
		 * @path <API Root>/Products/ProductDownloadType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductDownloadTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductDownloadType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductFileByID
		 * @path <API Root>/Products/ProductFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductImageByID
		 * @path <API Root>/Products/ProductImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductImageTypeByID
		 * @path <API Root>/Products/ProductImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product inventory location section from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductInventoryLocationSectionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductInventoryLocationSectionByID
		 * @path <API Root>/Products/ProductInventoryLocationSection/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductInventoryLocationSectionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSection", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product membership level from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductMembershipLevelByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductMembershipLevelByID
		 * @path <API Root>/Products/ProductMembershipLevel/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductMembershipLevelByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductMembershipLevel", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product price point from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductPricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductPricePointByID
		 * @path <API Root>/Products/ProductPricePoint/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductPricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductPricePoint", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product restriction from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductRestrictionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductRestrictionByID
		 * @path <API Root>/Products/ProductRestriction/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductRestrictionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductRestriction", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product ship carrier method from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductShipCarrierMethodByID
		 * @path <API Root>/Products/ProductShipCarrierMethod/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethod", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductStatusByID
		 * @path <API Root>/Products/ProductStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product subscription type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductSubscriptionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductSubscriptionTypeByID
		 * @path <API Root>/Products/ProductSubscriptionType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductSubscriptionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductSubscriptionType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductTypeByID
		 * @path <API Root>/Products/ProductType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "ProductType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Generates a new product site map and then replaces the existing one per the DropPath value from the web config
		 * @param {@link cef.admin.api.RegenerateProductSiteMapDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RegenerateProductSiteMap
		 * @path <API Root>/Products/SiteMap/Regenerate
		 * @verb POST
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		RegenerateProductSiteMap = () => this.$http<boolean>({
			url: [this.rootUrl, "Products", "SiteMap", "Regenerate"].join("/"),
			method: "POST",
		});

		/**
		 * Use to update an existing future import.
		 * @param {@link cef.admin.api.UpdateFutureImportDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFutureImport
		 * @path <API Root>/Products/FutureImport/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFutureImport = (routeParams?: UpdateFutureImportDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "FutureImport", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing future import status.
		 * @param {@link cef.admin.api.UpdateFutureImportStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFutureImportStatus
		 * @path <API Root>/Products/FutureImportStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFutureImportStatus = (routeParams?: UpdateFutureImportStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "FutureImportStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product.
		 * @param {@link cef.admin.api.UpdateProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProduct
		 * @path <API Root>/Products/Product/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProduct = (routeParams?: UpdateProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "Product", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product association.
		 * @param {@link cef.admin.api.UpdateProductAssociationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductAssociation
		 * @path <API Root>/Products/ProductAssociation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductAssociation = (routeParams?: UpdateProductAssociationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductAssociation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product association type.
		 * @param {@link cef.admin.api.UpdateProductAssociationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductAssociationType
		 * @path <API Root>/Products/ProductAssociationType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductAssociationType = (routeParams?: UpdateProductAssociationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductAssociationType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product category.
		 * @param {@link cef.admin.api.UpdateProductCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductCategory
		 * @path <API Root>/Products/ProductCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductCategory = (routeParams?: UpdateProductCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product download.
		 * @param {@link cef.admin.api.UpdateProductDownloadDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductDownload
		 * @path <API Root>/Products/ProductDownload/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductDownload = (routeParams?: UpdateProductDownloadDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductDownload", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product download type.
		 * @param {@link cef.admin.api.UpdateProductDownloadTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductDownloadType
		 * @path <API Root>/Products/ProductDownloadType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductDownloadType = (routeParams?: UpdateProductDownloadTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductDownloadType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product file.
		 * @param {@link cef.admin.api.UpdateProductFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductFile
		 * @path <API Root>/Products/ProductFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductFile = (routeParams?: UpdateProductFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product image.
		 * @param {@link cef.admin.api.UpdateProductImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductImage
		 * @path <API Root>/Products/ProductImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductImage = (routeParams?: UpdateProductImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product image type.
		 * @param {@link cef.admin.api.UpdateProductImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductImageType
		 * @path <API Root>/Products/ProductImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductImageType = (routeParams?: UpdateProductImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product inventory location section.
		 * @param {@link cef.admin.api.UpdateProductInventoryLocationSectionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductInventoryLocationSection
		 * @path <API Root>/Products/ProductInventoryLocationSection/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductInventoryLocationSection = (routeParams?: UpdateProductInventoryLocationSectionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSection", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product membership level.
		 * @param {@link cef.admin.api.UpdateProductMembershipLevelDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductMembershipLevel
		 * @path <API Root>/Products/ProductMembershipLevel/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductMembershipLevel = (routeParams?: UpdateProductMembershipLevelDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductMembershipLevel", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product price point.
		 * @param {@link cef.admin.api.UpdateProductPricePointDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductPricePoint
		 * @path <API Root>/Products/ProductPricePoint/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductPricePoint = (routeParams?: UpdateProductPricePointDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductPricePoint", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product restriction.
		 * @param {@link cef.admin.api.UpdateProductRestrictionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductRestriction
		 * @path <API Root>/Products/ProductRestriction/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductRestriction = (routeParams?: UpdateProductRestrictionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductRestriction", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product ship carrier method.
		 * @param {@link cef.admin.api.UpdateProductShipCarrierMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductShipCarrierMethod
		 * @path <API Root>/Products/ProductShipCarrierMethod/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductShipCarrierMethod = (routeParams?: UpdateProductShipCarrierMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductShipCarrierMethod", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product status.
		 * @param {@link cef.admin.api.UpdateProductStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductStatus
		 * @path <API Root>/Products/ProductStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductStatus = (routeParams?: UpdateProductStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product subscription type.
		 * @param {@link cef.admin.api.UpdateProductSubscriptionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductSubscriptionType
		 * @path <API Root>/Products/ProductSubscriptionType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductSubscriptionType = (routeParams?: UpdateProductSubscriptionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductSubscriptionType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product type.
		 * @param {@link cef.admin.api.UpdateProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductType
		 * @path <API Root>/Products/ProductType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductType = (routeParams?: UpdateProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Products", "ProductType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
