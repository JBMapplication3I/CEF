/**
 * @file framework/admin/_api/cvApi.Purchasing.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new purchase order.
	 * @see {@link PurchaseOrderModel}
	 * @public
	 */
	export interface CreatePurchaseOrderDto extends PurchaseOrderModel {
	}
	/**
	 * Use to create a new purchase order contact.
	 * @see {@link PurchaseOrderContactModel}
	 * @public
	 */
	export interface CreatePurchaseOrderContactDto extends PurchaseOrderContactModel {
	}
	/**
	 * Use to create a new purchase order event.
	 * @see {@link PurchaseOrderEventModel}
	 * @public
	 */
	export interface CreatePurchaseOrderEventDto extends PurchaseOrderEventModel {
	}
	/**
	 * Use to create a new purchase order event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreatePurchaseOrderEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new purchase order file.
	 * @see {@link PurchaseOrderFileModel}
	 * @public
	 */
	export interface CreatePurchaseOrderFileDto extends PurchaseOrderFileModel {
	}
	/**
	 * Use to create a new purchase order item.
	 * @see {@link SalesItemBaseModel<AppliedPurchaseOrderItemDiscountModel>}
	 * @public
	 */
	export interface CreatePurchaseOrderItemDto extends SalesItemBaseModel<AppliedPurchaseOrderItemDiscountModel> {
	}
	/**
	 * Use to create a new purchase order item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface CreatePurchaseOrderItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to create a new purchase order state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface CreatePurchaseOrderStateDto extends StateModel {
	}
	/**
	 * Use to create a new purchase order status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreatePurchaseOrderStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new purchase order type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreatePurchaseOrderTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new sales order purchase order.
	 * @see {@link SalesOrderPurchaseOrderModel}
	 * @public
	 */
	export interface CreateSalesOrderPurchaseOrderDto extends SalesOrderPurchaseOrderModel {
	}
	/**
	 * Use to get a list of purchase order contacts
	 * @see {@link PurchaseOrderContactSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderContactsDto extends PurchaseOrderContactSearchModel {
	}
	/**
	 * Use to get a list of purchase order events
	 * @see {@link PurchaseOrderEventSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderEventsDto extends PurchaseOrderEventSearchModel {
	}
	/**
	 * Use to get a list of purchase order event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of purchase order files
	 * @see {@link PurchaseOrderFileSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderFilesDto extends PurchaseOrderFileSearchModel {
	}
	/**
	 * Use to get a list of purchase order items
	 * @see {@link SalesItemBaseSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderItemsDto extends SalesItemBaseSearchModel {
	}
	/**
	 * Use to get a list of purchase order item targets
	 * @see {@link SalesItemTargetBaseSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderItemTargetsDto extends SalesItemTargetBaseSearchModel {
	}
	/**
	 * Use to get a list of purchase orders
	 * @see {@link PurchaseOrderSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrdersDto extends PurchaseOrderSearchModel {
	}
	/**
	 * Use to get a list of purchase order states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of purchase order statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of purchase order types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetPurchaseOrderTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of sales order purchase orders
	 * @see {@link SalesOrderPurchaseOrderSearchModel}
	 * @public
	 */
	export interface GetSalesOrderPurchaseOrdersDto extends SalesOrderPurchaseOrderSearchModel {
	}
	/**
	 * Use to update an existing purchase order.
	 * @see {@link PurchaseOrderModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderDto extends PurchaseOrderModel {
	}
	/**
	 * Use to update an existing purchase order contact.
	 * @see {@link PurchaseOrderContactModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderContactDto extends PurchaseOrderContactModel {
	}
	/**
	 * Use to update an existing purchase order event.
	 * @see {@link PurchaseOrderEventModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderEventDto extends PurchaseOrderEventModel {
	}
	/**
	 * Use to update an existing purchase order event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing purchase order file.
	 * @see {@link PurchaseOrderFileModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderFileDto extends PurchaseOrderFileModel {
	}
	/**
	 * Use to update an existing purchase order item.
	 * @see {@link SalesItemBaseModel<AppliedPurchaseOrderItemDiscountModel>}
	 * @public
	 */
	export interface UpdatePurchaseOrderItemDto extends SalesItemBaseModel<AppliedPurchaseOrderItemDiscountModel> {
	}
	/**
	 * Use to update an existing purchase order item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to update an existing purchase order state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderStateDto extends StateModel {
	}
	/**
	 * Use to update an existing purchase order status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing purchase order type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdatePurchaseOrderTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing sales order purchase order.
	 * @see {@link SalesOrderPurchaseOrderModel}
	 * @public
	 */
	export interface UpdateSalesOrderPurchaseOrderDto extends SalesOrderPurchaseOrderModel {
	}

	export class Purchasing extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all purchase order calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderCache
		 * @path <API Root>/Purchasing/PurchaseOrder/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrder", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order contact calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderContactCache
		 * @path <API Root>/Purchasing/PurchaseOrderContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order event calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderEventCache
		 * @path <API Root>/Purchasing/PurchaseOrderEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order event type calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderEventTypeCache
		 * @path <API Root>/Purchasing/PurchaseOrderEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order file calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderFileCache
		 * @path <API Root>/Purchasing/PurchaseOrderFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order item calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderItemCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderItemCache
		 * @path <API Root>/Purchasing/PurchaseOrderItem/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderItemCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItem", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order item target calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderItemTargetCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderItemTargetCache
		 * @path <API Root>/Purchasing/PurchaseOrderItemTarget/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderItemTargetCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTarget", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order state calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderStateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderStateCache
		 * @path <API Root>/Purchasing/PurchaseOrderState/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderStateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderState", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order status calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderStatusCache
		 * @path <API Root>/Purchasing/PurchaseOrderStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all purchase order type calls.
		 * @param {@link cef.admin.api.ClearPurchaseOrderTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPurchaseOrderTypeCache
		 * @path <API Root>/Purchasing/PurchaseOrderType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPurchaseOrderTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order purchase order calls.
		 * @param {@link cef.admin.api.ClearSalesOrderPurchaseOrderCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderPurchaseOrderCache
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrder/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderPurchaseOrderCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrder", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new purchase order.
		 * @param {@link cef.admin.api.CreatePurchaseOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrder
		 * @path <API Root>/Purchasing/PurchaseOrder/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrder = (routeParams?: CreatePurchaseOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrder", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order contact.
		 * @param {@link cef.admin.api.CreatePurchaseOrderContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderContact
		 * @path <API Root>/Purchasing/PurchaseOrderContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderContact = (routeParams?: CreatePurchaseOrderContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order event.
		 * @param {@link cef.admin.api.CreatePurchaseOrderEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderEvent
		 * @path <API Root>/Purchasing/PurchaseOrderEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderEvent = (routeParams?: CreatePurchaseOrderEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order event type.
		 * @param {@link cef.admin.api.CreatePurchaseOrderEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderEventType
		 * @path <API Root>/Purchasing/PurchaseOrderEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderEventType = (routeParams?: CreatePurchaseOrderEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order file.
		 * @param {@link cef.admin.api.CreatePurchaseOrderFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderFile
		 * @path <API Root>/Purchasing/PurchaseOrderFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderFile = (routeParams?: CreatePurchaseOrderFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order item.
		 * @param {@link cef.admin.api.CreatePurchaseOrderItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderItem
		 * @path <API Root>/Purchasing/PurchaseOrderItem/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderItem = (routeParams?: CreatePurchaseOrderItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItem", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order item target.
		 * @param {@link cef.admin.api.CreatePurchaseOrderItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderItemTarget
		 * @path <API Root>/Purchasing/PurchaseOrderItemTarget/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderItemTarget = (routeParams?: CreatePurchaseOrderItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTarget", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order state.
		 * @param {@link cef.admin.api.CreatePurchaseOrderStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderState
		 * @path <API Root>/Purchasing/PurchaseOrderState/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderState = (routeParams?: CreatePurchaseOrderStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderState", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order status.
		 * @param {@link cef.admin.api.CreatePurchaseOrderStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderStatus
		 * @path <API Root>/Purchasing/PurchaseOrderStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderStatus = (routeParams?: CreatePurchaseOrderStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new purchase order type.
		 * @param {@link cef.admin.api.CreatePurchaseOrderTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePurchaseOrderType
		 * @path <API Root>/Purchasing/PurchaseOrderType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePurchaseOrderType = (routeParams?: CreatePurchaseOrderTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order purchase order.
		 * @param {@link cef.admin.api.CreateSalesOrderPurchaseOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderPurchaseOrder
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrder/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderPurchaseOrder = (routeParams?: CreateSalesOrderPurchaseOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrder", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific purchase order from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderByID
		 * @path <API Root>/Purchasing/PurchaseOrder/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrder", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderContactByID
		 * @path <API Root>/Purchasing/PurchaseOrderContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderEventByID
		 * @path <API Root>/Purchasing/PurchaseOrderEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderEventTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderFileByID
		 * @path <API Root>/Purchasing/PurchaseOrderFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order item from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderItemByID
		 * @path <API Root>/Purchasing/PurchaseOrderItem/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItem", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order item target from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderItemTargetByID
		 * @path <API Root>/Purchasing/PurchaseOrderItemTarget/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTarget", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order state from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderStateByID
		 * @path <API Root>/Purchasing/PurchaseOrderState/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderState", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderStatusByID
		 * @path <API Root>/Purchasing/PurchaseOrderStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific purchase order type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePurchaseOrderTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePurchaseOrderTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePurchaseOrderTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order purchase order from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderPurchaseOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderPurchaseOrderByID
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrder/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderPurchaseOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrder", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific purchase order from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderByID
		 * @path <API Root>/Purchasing/PurchaseOrder/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrder", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderContactByID
		 * @path <API Root>/Purchasing/PurchaseOrderContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderEventByID
		 * @path <API Root>/Purchasing/PurchaseOrderEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderEventTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderFileByID
		 * @path <API Root>/Purchasing/PurchaseOrderFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order item from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderItemByID
		 * @path <API Root>/Purchasing/PurchaseOrderItem/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItem", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order item target from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderItemTargetByID
		 * @path <API Root>/Purchasing/PurchaseOrderItemTarget/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTarget", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order state from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderStateByID
		 * @path <API Root>/Purchasing/PurchaseOrderState/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderState", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderStatusByID
		 * @path <API Root>/Purchasing/PurchaseOrderStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific purchase order type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePurchaseOrderTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePurchaseOrderTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePurchaseOrderTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order purchase order from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderPurchaseOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderPurchaseOrderByID
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrder/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderPurchaseOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrder", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific purchase order
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderByID
		 * @path <API Root>/Purchasing/PurchaseOrder/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderModel>}
		 * @public
		 */
		GetPurchaseOrderByID = (id: number) => this.$http<PurchaseOrderModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrder", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific purchase order contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderContactByID
		 * @path <API Root>/Purchasing/PurchaseOrderContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderContactModel>}
		 * @public
		 */
		GetPurchaseOrderContactByID = (id: number) => this.$http<PurchaseOrderContactModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderContacts
		 * @path <API Root>/Purchasing/PurchaseOrderContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderContactPagedResults>}
		 * @public
		 */
		GetPurchaseOrderContacts = (routeParams?: GetPurchaseOrderContactsDto) => this.$http<PurchaseOrderContactPagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderEventByID
		 * @path <API Root>/Purchasing/PurchaseOrderEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderEventModel>}
		 * @public
		 */
		GetPurchaseOrderEventByID = (id: number) => this.$http<PurchaseOrderEventModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderEvents
		 * @path <API Root>/Purchasing/PurchaseOrderEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderEventPagedResults>}
		 * @public
		 */
		GetPurchaseOrderEvents = (routeParams?: GetPurchaseOrderEventsDto) => this.$http<PurchaseOrderEventPagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderEventTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetPurchaseOrderEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderEventTypes
		 * @path <API Root>/Purchasing/PurchaseOrderEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderEventTypePagedResults>}
		 * @public
		 */
		GetPurchaseOrderEventTypes = (routeParams?: GetPurchaseOrderEventTypesDto) => this.$http<PurchaseOrderEventTypePagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderFileByID
		 * @path <API Root>/Purchasing/PurchaseOrderFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderFileModel>}
		 * @public
		 */
		GetPurchaseOrderFileByID = (id: number) => this.$http<PurchaseOrderFileModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderFiles
		 * @path <API Root>/Purchasing/PurchaseOrderFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderFilePagedResults>}
		 * @public
		 */
		GetPurchaseOrderFiles = (routeParams?: GetPurchaseOrderFilesDto) => this.$http<PurchaseOrderFilePagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order item
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderItemByID
		 * @path <API Root>/Purchasing/PurchaseOrderItem/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedPurchaseOrderItemDiscountModel>>}
		 * @public
		 */
		GetPurchaseOrderItemByID = (id: number) => this.$http<SalesItemBaseModel<AppliedPurchaseOrderItemDiscountModel>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItem", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order items
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderItems
		 * @path <API Root>/Purchasing/PurchaseOrderItems
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderItemPagedResults>}
		 * @public
		 */
		GetPurchaseOrderItems = (routeParams?: GetPurchaseOrderItemsDto) => this.$http<PurchaseOrderItemPagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItems"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order item target
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderItemTargetByID
		 * @path <API Root>/Purchasing/PurchaseOrderItemTarget/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetBaseModel>}
		 * @public
		 */
		GetPurchaseOrderItemTargetByID = (id: number) => this.$http<SalesItemTargetBaseModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTarget", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order item targets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderItemTargets
		 * @path <API Root>/Purchasing/PurchaseOrderItemTargets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderItemTargetPagedResults>}
		 * @public
		 */
		GetPurchaseOrderItemTargets = (routeParams?: GetPurchaseOrderItemTargetsDto) => this.$http<PurchaseOrderItemTargetPagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTargets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of purchase orders
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrders
		 * @path <API Root>/Purchasing/PurchaseOrders
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderPagedResults>}
		 * @public
		 */
		GetPurchaseOrders = (routeParams?: GetPurchaseOrdersDto) => this.$http<PurchaseOrderPagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrders"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderStateByID
		 * @path <API Root>/Purchasing/PurchaseOrderState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetPurchaseOrderStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderStates
		 * @path <API Root>/Purchasing/PurchaseOrderStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderStatePagedResults>}
		 * @public
		 */
		GetPurchaseOrderStates = (routeParams?: GetPurchaseOrderStatesDto) => this.$http<PurchaseOrderStatePagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderStatusByID
		 * @path <API Root>/Purchasing/PurchaseOrderStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetPurchaseOrderStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderStatuses
		 * @path <API Root>/Purchasing/PurchaseOrderStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderStatusPagedResults>}
		 * @public
		 */
		GetPurchaseOrderStatuses = (routeParams?: GetPurchaseOrderStatusesDto) => this.$http<PurchaseOrderStatusPagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific purchase order type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetPurchaseOrderTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of purchase order types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPurchaseOrderTypes
		 * @path <API Root>/Purchasing/PurchaseOrderTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PurchaseOrderTypePagedResults>}
		 * @public
		 */
		GetPurchaseOrderTypes = (routeParams?: GetPurchaseOrderTypesDto) => this.$http<PurchaseOrderTypePagedResults>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order purchase order
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderPurchaseOrderByID
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrder/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderPurchaseOrderModel>}
		 * @public
		 */
		GetSalesOrderPurchaseOrderByID = (id: number) => this.$http<SalesOrderPurchaseOrderModel>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrder", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order purchase orders
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderPurchaseOrders
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrders
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderPurchaseOrderPagedResults>}
		 * @public
		 */
		GetSalesOrderPurchaseOrders = (routeParams?: GetSalesOrderPurchaseOrdersDto) => this.$http<SalesOrderPurchaseOrderPagedResults>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrders"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific purchase order from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderByID
		 * @path <API Root>/Purchasing/PurchaseOrder/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrder", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderContactByID
		 * @path <API Root>/Purchasing/PurchaseOrderContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderEventByID
		 * @path <API Root>/Purchasing/PurchaseOrderEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderEventTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderFileByID
		 * @path <API Root>/Purchasing/PurchaseOrderFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order item from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderItemByID
		 * @path <API Root>/Purchasing/PurchaseOrderItem/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItem", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order item target from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderItemTargetByID
		 * @path <API Root>/Purchasing/PurchaseOrderItemTarget/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTarget", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order state from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderStateByID
		 * @path <API Root>/Purchasing/PurchaseOrderState/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderState", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderStatusByID
		 * @path <API Root>/Purchasing/PurchaseOrderStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific purchase order type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePurchaseOrderTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePurchaseOrderTypeByID
		 * @path <API Root>/Purchasing/PurchaseOrderType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePurchaseOrderTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order purchase order from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderPurchaseOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderPurchaseOrderByID
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrder/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderPurchaseOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrder", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing purchase order.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrder
		 * @path <API Root>/Purchasing/PurchaseOrder/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrder = (routeParams?: UpdatePurchaseOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrder", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order contact.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderContact
		 * @path <API Root>/Purchasing/PurchaseOrderContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderContact = (routeParams?: UpdatePurchaseOrderContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order event.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderEvent
		 * @path <API Root>/Purchasing/PurchaseOrderEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderEvent = (routeParams?: UpdatePurchaseOrderEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order event type.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderEventType
		 * @path <API Root>/Purchasing/PurchaseOrderEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderEventType = (routeParams?: UpdatePurchaseOrderEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order file.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderFile
		 * @path <API Root>/Purchasing/PurchaseOrderFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderFile = (routeParams?: UpdatePurchaseOrderFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order item.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderItem
		 * @path <API Root>/Purchasing/PurchaseOrderItem/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderItem = (routeParams?: UpdatePurchaseOrderItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItem", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order item target.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderItemTarget
		 * @path <API Root>/Purchasing/PurchaseOrderItemTarget/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderItemTarget = (routeParams?: UpdatePurchaseOrderItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderItemTarget", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order state.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderState
		 * @path <API Root>/Purchasing/PurchaseOrderState/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderState = (routeParams?: UpdatePurchaseOrderStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderState", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order status.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderStatus
		 * @path <API Root>/Purchasing/PurchaseOrderStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderStatus = (routeParams?: UpdatePurchaseOrderStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing purchase order type.
		 * @param {@link cef.admin.api.UpdatePurchaseOrderTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePurchaseOrderType
		 * @path <API Root>/Purchasing/PurchaseOrderType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePurchaseOrderType = (routeParams?: UpdatePurchaseOrderTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "PurchaseOrderType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order purchase order.
		 * @param {@link cef.admin.api.UpdateSalesOrderPurchaseOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderPurchaseOrder
		 * @path <API Root>/Purchasing/SalesOrderPurchaseOrder/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderPurchaseOrder = (routeParams?: UpdateSalesOrderPurchaseOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Purchasing", "SalesOrderPurchaseOrder", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
