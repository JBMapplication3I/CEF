/**
 * @file framework/admin/_api/cvApi.Shopping.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to add and validate a discount code to the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
	 * @public
	 */
	export interface AdminAddCartDiscountForUserDto {
		/** The identifier for the record to call. */
		CartID: number;
		/** Discount Code */
		Code: string;
	}
	/**
	 * Use to add an item to the specified session cart for the current user (Shopping, Quote, Samples)
	 * @see {@link ImplementsCartLookupForAdminBase}
	 * @public
	 */
	export interface AdminAddCartItemForUserDto extends ImplementsCartLookupForAdminBase {
		/** The ID of the cart to add to */
		CartID: number;
		/** The ID of the product to add */
		ProductID: number;
		/** The quantity of the product to add */
		Quantity: number;
		/** Cart Item Serializable JSON Attributes */
		SerializableAttributes?: SerializableAttributesDictionary;
		/** Shipment to add to item */
		Targets?: Array<SalesItemTargetBaseModel>;
		/** [Optional] */
		ForceUniqueLineItemKey?: string;
	}
	/**
	 * Use to add multiple items to the specified session cart for the current user (Shopping, Quote, Samples)
	 * @see {@link ImplementsIDOnBodyForAdminBase}
	 * @public
	 */
	export interface AdminAddCartItemsForUserDto extends ImplementsIDOnBodyForAdminBase {
		/** Cart items to add */
		Items: Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>;
	}
	/**
	 * Use to clear a specific session cart for the current user (Shopping, Quote, Samples)
	 * @see {@link ImplementsIDOnBodyForAdminBase}
	 * @public
	 */
	export interface AdminClearCartForUserDto extends ImplementsIDOnBodyForAdminBase {
	}
	/**
	 * Use to clear the selected shipping rate for the specified cart.
	 * @public
	 */
	export interface AdminClearCartShippingRateQuoteForUserDto {
		CartID: number;
	}
	/**
	 * Use to access all items in the specified session cart for the current user (Shopping, Quote, Samples)
	 * @see {@link ImplementsIDForAdminBase}
	 * @public
	 */
	export interface AdminGetCartItemsForUserDto extends ImplementsIDForAdminBase {
	}
	/**
	 * Get the shipping contact on the current user's session cart (Shopping, Quote, Samples)
	 * @public
	 */
	export interface AdminGetCartShippingContactForUserDto {
		/** The Cart ID (requires admin to set) */
		CartID: number;
	}
	/**
	 * Gets the Cart data by Cart ID under the context of the User ID. Admins Only
	 * @see {@link ImplementsIDOnBodyForAdminBase}
	 * @public
	 */
	export interface AdminGetUserCartByIDDto extends ImplementsIDOnBodyForAdminBase {
	}
	/**
	 * Use to remove an Cart Discount Code from the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
	 * @see {@link ImplementsIDOnBodyForAdminBase}
	 * @public
	 */
	export interface AdminRemoveCartDiscountForUserDto extends ImplementsIDOnBodyForAdminBase {
		/** Applied Cart Discount ID */
		AppliedCartDiscountID: number;
	}
	/**
	 * Removes a Discount from an item in the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
	 * @see {@link ImplementsIDOnBodyForAdminBase}
	 * @public
	 */
	export interface AdminRemoveCartItemDiscountForUserDto extends ImplementsIDOnBodyForAdminBase {
		AppliedCartItemDiscountID: number;
	}
	/**
	 * Set the billing contact on the current user's session cart (Shopping, Quote, Samples)
	 * @public
	 */
	export interface AdminSetCartBillingContactForUserDto {
		/** The Cart ID (requires admin to set) */
		CartID: number;
		/** The billing contact */
		BillingContact?: ContactModel;
	}
	/**
	 * Set the shipping contact on the current user's session cart (Shopping, Quote, Samples)
	 * @public
	 */
	export interface AdminSetCartShippingContactForUserDto {
		/** The Cart ID (requires admin to set) */
		CartID: number;
		/** The shipping contact */
		ShippingContact?: ContactModel;
	}
	/**
	 * Use to update the target user's session cart (Shopping, Quote, Samples) attributes. Admins Only
	 * @see {@link ImplementsIDForAdminBase}
	 * @public
	 */
	export interface AdminUpdateCartAttributesForUserDto extends ImplementsIDForAdminBase {
		Attributes: SerializableAttributesDictionary;
	}
	/**
	 * Updates only the Quantity value for the item, overrides any previous value, not trying to adjust by offset. Returns the value supplied unless it needed to be modified for purchasing or stock limits.
	 * @public
	 */
	export interface AdminUpdateCartItemQuantityForUserDto {
		/** The identifier of the cart item to change the quantity value on. */
		CartItemID: number;
		/** The new Quantity value to set (actual number, not an offset). */
		Quantity: number;
		/** The new Quantity Back-Ordered value to set (actual number, not an offset). */
		QuantityBackOrdered: number;
		/** The new Quantity Pre-Sold value to set (actual number, not an offset). */
		QuantityPreSold: number;
	}
	/**
	 * Use to update multiple items in the specified session cart for the cart of the target user
	 * @see {@link ImplementsIDForAdminBase}
	 * @public
	 */
	export interface AdminUpdateCartItemsForUserDto extends ImplementsIDForAdminBase {
		/** Cart items to update */
		Items: Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>;
	}
	/**
	 * Modifies a cart with updated data. Admins Only
	 * @see {@link CartModel}
	 * @public
	 */
	export interface AdminUpdateUserCartDto extends CartModel {
	}
	/**
	 * Creates a Cart and assigns it to the User. Admins Only. Returns the ID of the cart (created or existing) wrapped in a CEFActionResponse
	 * @public
	 */
	export interface AdminUpsertCartForUserDto {
		/** The identifier for the record to call. */
		ID: number;
		/** The optional cart model to use. */
		Cart: CartModel;
	}
	/**
	 * Use to get shipping rates for the current cart.
	 * @public
	 */
	export interface ApplyCartShippingRateQuoteDto {
		/** The Identifier of the Cart. */
		ID: number;
		/** The Key of the rate quote to select. Send null to un-assign the current rate quote. */
		RateQuoteID?: number;
		/** The requested ship by date from the Customer. */
		RequestedShipDate?: Date;
	}
	/**
	 * Clears the caches for Hard and Soft Stops, use after editing the data in the Store, Product, etc.
	 * @public
	 */
	export interface ClearHardSoftStopsCachesDto {
		/** Optionally, provide key pattern to specifically clear. If not set, all the Hard/Soft Stops caches are cleared. */
		Pattern?: string;
	}
	/**
	 * Use to create a new cart.
	 * @see {@link CartModel}
	 * @public
	 */
	export interface CreateCartDto extends CartModel {
	}
	/**
	 * Use to create a new cart contact.
	 * @see {@link CartContactModel}
	 * @public
	 */
	export interface CreateCartContactDto extends CartContactModel {
	}
	/**
	 * Use to create a new cart event.
	 * @see {@link CartEventModel}
	 * @public
	 */
	export interface CreateCartEventDto extends CartEventModel {
	}
	/**
	 * Use to create a new cart event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCartEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new cart file.
	 * @see {@link CartFileModel}
	 * @public
	 */
	export interface CreateCartFileDto extends CartFileModel {
	}
	/**
	 * Use to create a new cart item.
	 * @see {@link SalesItemBaseModel<AppliedCartItemDiscountModel>}
	 * @public
	 */
	export interface CreateCartItemDto extends SalesItemBaseModel<AppliedCartItemDiscountModel> {
	}
	/**
	 * Use to create a new cart item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface CreateCartItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to create a new cart state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface CreateCartStateDto extends StateModel {
	}
	/**
	 * Use to create a new cart status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateCartStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new cart type.
	 * @see {@link CartTypeModel}
	 * @public
	 */
	export interface CreateCartTypeDto extends CartTypeModel {
	}
	/**
	 * Use to get a list of cart contacts
	 * @see {@link CartContactSearchModel}
	 * @public
	 */
	export interface GetCartContactsDto extends CartContactSearchModel {
	}
	/**
	 * Use to get a list of cart events
	 * @see {@link CartEventSearchModel}
	 * @public
	 */
	export interface GetCartEventsDto extends CartEventSearchModel {
	}
	/**
	 * Use to get a list of cart event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCartEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of cart files
	 * @see {@link CartFileSearchModel}
	 * @public
	 */
	export interface GetCartFilesDto extends CartFileSearchModel {
	}
	/**
	 * Use to get a list of cart items
	 * @see {@link SalesItemBaseSearchModel}
	 * @public
	 */
	export interface GetCartItemsDto extends SalesItemBaseSearchModel {
	}
	/**
	 * Use to get a list of cart item targets
	 * @see {@link SalesItemTargetBaseSearchModel}
	 * @public
	 */
	export interface GetCartItemTargetsDto extends SalesItemTargetBaseSearchModel {
	}
	/**
	 * Use to get a list of carts
	 * @see {@link CartSearchModel}
	 * @public
	 */
	export interface GetCartsDto extends CartSearchModel {
	}
	/**
	 * Use to get shipping rates for the specified cart.
	 * @public
	 */
	export interface GetCartShippingRateQuotesDto {
		/** The identifier for the record to call. */
		ID: number;
		/** Adding the Expedited flag will activate the fee and change to target ship by with expedited timeline. */
		Expedited: boolean;
	}
	/**
	 * Use to get a list of cart states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetCartStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of cart statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetCartStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of cart types
	 * @see {@link CartTypeSearchModel}
	 * @public
	 */
	export interface GetCartTypesDto extends CartTypeSearchModel {
	}
	/**
	 * Use to update an existing cart.
	 * @see {@link CartModel}
	 * @public
	 */
	export interface UpdateCartDto extends CartModel {
	}
	/**
	 * Use to update an existing cart contact.
	 * @see {@link CartContactModel}
	 * @public
	 */
	export interface UpdateCartContactDto extends CartContactModel {
	}
	/**
	 * Use to update an existing cart event.
	 * @see {@link CartEventModel}
	 * @public
	 */
	export interface UpdateCartEventDto extends CartEventModel {
	}
	/**
	 * Use to update an existing cart event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCartEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing cart file.
	 * @see {@link CartFileModel}
	 * @public
	 */
	export interface UpdateCartFileDto extends CartFileModel {
	}
	/**
	 * Use to update an existing cart item.
	 * @see {@link SalesItemBaseModel<AppliedCartItemDiscountModel>}
	 * @public
	 */
	export interface UpdateCartItemDto extends SalesItemBaseModel<AppliedCartItemDiscountModel> {
	}
	/**
	 * Use to update an existing cart item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface UpdateCartItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to update an existing cart state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface UpdateCartStateDto extends StateModel {
	}
	/**
	 * Use to update an existing cart status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateCartStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing cart type.
	 * @see {@link CartTypeModel}
	 * @public
	 */
	export interface UpdateCartTypeDto extends CartTypeModel {
	}

	export class Shopping extends ServiceStackRoute {
		/**
		 * Use to add and validate a discount code to the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
		 * @param {@link cef.admin.api.AdminAddCartDiscountForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminAddCartDiscountForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/AddDiscount
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminAddCartDiscountForUser = (routeParams: AdminAddCartDiscountForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "AddDiscount"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Use to add an item to the specified session cart for the current user (Shopping, Quote, Samples)
		 * @param {@link cef.admin.api.AdminAddCartItemForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminAddCartItemForUser
		 * @path <API Root>/Shopping/AdminForUser/Item/Add
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		AdminAddCartItemForUser = (routeParams: AdminAddCartItemForUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Item", "Add"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to add multiple items to the specified session cart for the current user (Shopping, Quote, Samples)
		 * @param {@link cef.admin.api.AdminAddCartItemsForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminAddCartItemsForUser
		 * @path <API Root>/Shopping/AdminForUser/Items/Add
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<number>>>}
		 * @public
		 */
		AdminAddCartItemsForUser = (routeParams: AdminAddCartItemsForUserDto) => this.$http<CEFActionResponseT<Array<number>>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Items", "Add"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to clear a specific session cart for the current user (Shopping, Quote, Samples)
		 * @param {@link cef.admin.api.AdminClearCartForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminClearCartForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/Clear
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminClearCartForUser = (routeParams?: AdminClearCartForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "Clear"].join("/"),
			method: "DELETE",
			data: routeParams
		});

		/**
		 * Use to clear the selected shipping rate for the specified cart.
		 * @param {@link cef.admin.api.AdminClearCartShippingRateQuoteForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminClearCartShippingRateQuoteForUser
		 * @path <API Root>/Shopping/AdminForUser/ShippingRateQuotes/Clear
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminClearCartShippingRateQuoteForUser = (routeParams: AdminClearCartShippingRateQuoteForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "ShippingRateQuotes", "Clear"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to access all items in the specified session cart for the current user (Shopping, Quote, Samples)
		 * @param {@link cef.admin.api.AdminGetCartItemsForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminGetCartItemsForUser
		 * @path <API Root>/Shopping/AdminForUser/Items/{ID}/UserID/{UserID}/AccountID/{AccountID}
		 * @verb POST
		 * @returns {ng.IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>>}
		 * @public
		 */
		AdminGetCartItemsForUser = (id: number, userID: number, accountID: number, routeParams?: AdminGetCartItemsForUserDto) => this.$http<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Items", id, "UserID", userID, "AccountID", accountID].join("/"),
			method: "POST",
		});

		/**
		 * Gets the list of carts the user has created. Admins Only
		 * @param {@link cef.admin.api.AdminGetCartsForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminGetCartsForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/GetCartsForUserID/{UserID}
		 * @verb POST
		 * @returns {ng.IHttpPromise<Array<CartModel>>}
		 * @public
		 */
		AdminGetCartsForUser = (userID: number) => this.$http<Array<CartModel>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "GetCartsForUserID", userID].join("/"),
			method: "POST",
		});

		/**
		 * Get the shipping contact on the current user's session cart (Shopping, Quote, Samples)
		 * @param {@link cef.admin.api.AdminGetCartShippingContactForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminGetCartShippingContactForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/GetShippingContact
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<ContactModel>>}
		 * @public
		 */
		AdminGetCartShippingContactForUser = (routeParams: AdminGetCartShippingContactForUserDto) => this.$http<CEFActionResponseT<ContactModel>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "GetShippingContact"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Gets the Cart data by Cart ID under the context of the User ID. Admins Only
		 * @param {@link cef.admin.api.AdminGetUserCartByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminGetUserCartByID
		 * @path <API Root>/Shopping/AdminForUser/Cart/GetUserCart
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<CartModel>>}
		 * @public
		 */
		AdminGetUserCartByID = (routeParams?: AdminGetUserCartByIDDto) => this.$http<CEFActionResponseT<CartModel>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "GetUserCart"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to remove an Cart Discount Code from the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
		 * @param {@link cef.admin.api.AdminRemoveCartDiscountForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminRemoveCartDiscountForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/RemoveDiscount
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminRemoveCartDiscountForUser = (routeParams: AdminRemoveCartDiscountForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "RemoveDiscount"].join("/"),
			method: "DELETE",
			data: routeParams
		});

		/**
		 * Use to deactivate a specific cart item by it's identifier (regardless of cart type name or session vs static cart type)
		 * @param {@link cef.admin.api.AdminRemoveCartItemByIDForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminRemoveCartItemByIDForUser
		 * @path <API Root>/Shopping/AdminForUser/Item/Remove/ByID/{ID}
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		AdminRemoveCartItemByIDForUser = (id: number) => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Item", "Remove", "ByID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a Discount from an item in the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
		 * @param {@link cef.admin.api.AdminRemoveCartItemDiscountForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminRemoveCartItemDiscountForUser
		 * @path <API Root>/Shopping/AdminForUser/Item/Discount/Remove
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminRemoveCartItemDiscountForUser = (routeParams: AdminRemoveCartItemDiscountForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Item", "Discount", "Remove"].join("/"),
			method: "DELETE",
			data: routeParams
		});

		/**
		 * Set the billing contact on the current user's session cart (Shopping, Quote, Samples)
		 * @param {@link cef.admin.api.AdminSetCartBillingContactForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminSetCartBillingContactForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/SetBillingContact
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminSetCartBillingContactForUser = (routeParams: AdminSetCartBillingContactForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "SetBillingContact"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Set the shipping contact on the current user's session cart (Shopping, Quote, Samples)
		 * @param {@link cef.admin.api.AdminSetCartShippingContactForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminSetCartShippingContactForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/SetShippingContact
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminSetCartShippingContactForUser = (routeParams: AdminSetCartShippingContactForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "SetShippingContact"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Use to update the target user's session cart (Shopping, Quote, Samples) attributes. Admins Only
		 * @param {@link cef.admin.api.AdminUpdateCartAttributesForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminUpdateCartAttributesForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/UpdateAttributes
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminUpdateCartAttributesForUser = (routeParams: AdminUpdateCartAttributesForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "UpdateAttributes"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Updates only the Quantity value for the item, overrides any previous value, not trying to adjust by offset. Returns the value supplied unless it needed to be modified for purchasing or stock limits.
		 * @param {@link cef.admin.api.AdminUpdateCartItemQuantityForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminUpdateCartItemQuantityForUser
		 * @path <API Root>/Shopping/AdminForUser/Item/UpdateQuantity
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		AdminUpdateCartItemQuantityForUser = (routeParams: AdminUpdateCartItemQuantityForUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Item", "UpdateQuantity"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update multiple items in the specified session cart for the cart of the target user
		 * @param {@link cef.admin.api.AdminUpdateCartItemsForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminUpdateCartItemsForUser
		 * @path <API Root>/Shopping/AdminForUser/Items/Update
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminUpdateCartItemsForUser = (routeParams: AdminUpdateCartItemsForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Items", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Modifies a cart with updated data. Admins Only
		 * @param {@link cef.admin.api.AdminUpdateUserCartDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminUpdateUserCart
		 * @path <API Root>/Shopping/AdminForUser/Cart/UpdateUserCart
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AdminUpdateUserCart = (routeParams?: AdminUpdateUserCartDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "UpdateUserCart"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Creates a Cart and assigns it to the User. Admins Only. Returns the ID of the cart (created or existing) wrapped in a CEFActionResponse
		 * @param {@link cef.admin.api.AdminUpsertCartForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AdminUpsertCartForUser
		 * @path <API Root>/Shopping/AdminForUser/Cart/UpsertCartForUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		AdminUpsertCartForUser = (routeParams: AdminUpsertCartForUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "UpsertCartForUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get shipping rates for the current cart.
		 * @param {@link cef.admin.api.ApplyCartShippingRateQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ApplyCartShippingRateQuote
		 * @path <API Root>/Shopping/Cart/ShippingRateQuotes/Apply
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ApplyCartShippingRateQuote = (routeParams: ApplyCartShippingRateQuoteDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "Cart", "ShippingRateQuotes", "Apply"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Empties the server-side data cache for all cart calls.
		 * @param {@link cef.admin.api.ClearCartCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartCache
		 * @path <API Root>/Shopping/Cart/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "Cart", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart contact calls.
		 * @param {@link cef.admin.api.ClearCartContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartContactCache
		 * @path <API Root>/Shopping/CartContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart event calls.
		 * @param {@link cef.admin.api.ClearCartEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartEventCache
		 * @path <API Root>/Shopping/CartEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart event type calls.
		 * @param {@link cef.admin.api.ClearCartEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartEventTypeCache
		 * @path <API Root>/Shopping/CartEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart file calls.
		 * @param {@link cef.admin.api.ClearCartFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartFileCache
		 * @path <API Root>/Shopping/CartFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart item calls.
		 * @param {@link cef.admin.api.ClearCartItemCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartItemCache
		 * @path <API Root>/Shopping/CartItem/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartItemCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartItem", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart item target calls.
		 * @param {@link cef.admin.api.ClearCartItemTargetCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartItemTargetCache
		 * @path <API Root>/Shopping/CartItemTarget/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartItemTargetCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartItemTarget", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart state calls.
		 * @param {@link cef.admin.api.ClearCartStateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartStateCache
		 * @path <API Root>/Shopping/CartState/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartStateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartState", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart status calls.
		 * @param {@link cef.admin.api.ClearCartStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartStatusCache
		 * @path <API Root>/Shopping/CartStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all cart type calls.
		 * @param {@link cef.admin.api.ClearCartTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCartTypeCache
		 * @path <API Root>/Shopping/CartType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCartTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shopping", "CartType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Clears the caches for Hard and Soft Stops, use after editing the data in the Store, Product, etc.
		 * @param {@link cef.admin.api.ClearHardSoftStopsCachesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearHardSoftStopsCaches
		 * @path <API Root>/Shopping/AdminForUser/Cart/ClearHardSoftStopsCaches
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ClearHardSoftStopsCaches = (routeParams?: ClearHardSoftStopsCachesDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "Cart", "ClearHardSoftStopsCaches"].join("/"),
			method: "DELETE",
			data: routeParams
		});

		/**
		 * Use to create a new cart.
		 * @param {@link cef.admin.api.CreateCartDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCart
		 * @path <API Root>/Shopping/Cart/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCart = (routeParams?: CreateCartDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "Cart", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart contact.
		 * @param {@link cef.admin.api.CreateCartContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartContact
		 * @path <API Root>/Shopping/CartContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartContact = (routeParams?: CreateCartContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart event.
		 * @param {@link cef.admin.api.CreateCartEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartEvent
		 * @path <API Root>/Shopping/CartEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartEvent = (routeParams?: CreateCartEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart event type.
		 * @param {@link cef.admin.api.CreateCartEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartEventType
		 * @path <API Root>/Shopping/CartEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartEventType = (routeParams?: CreateCartEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart file.
		 * @param {@link cef.admin.api.CreateCartFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartFile
		 * @path <API Root>/Shopping/CartFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartFile = (routeParams?: CreateCartFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart item.
		 * @param {@link cef.admin.api.CreateCartItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartItem
		 * @path <API Root>/Shopping/CartItem/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartItem = (routeParams?: CreateCartItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartItem", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart item target.
		 * @param {@link cef.admin.api.CreateCartItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartItemTarget
		 * @path <API Root>/Shopping/CartItemTarget/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartItemTarget = (routeParams?: CreateCartItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartItemTarget", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart state.
		 * @param {@link cef.admin.api.CreateCartStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartState
		 * @path <API Root>/Shopping/CartState/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartState = (routeParams?: CreateCartStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartState", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart status.
		 * @param {@link cef.admin.api.CreateCartStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartStatus
		 * @path <API Root>/Shopping/CartStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartStatus = (routeParams?: CreateCartStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new cart type.
		 * @param {@link cef.admin.api.CreateCartTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartType
		 * @path <API Root>/Shopping/CartType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCartType = (routeParams?: CreateCartTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific cart from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartByID
		 * @path <API Root>/Shopping/Cart/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "Cart", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartContactByID
		 * @path <API Root>/Shopping/CartContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartEventByID
		 * @path <API Root>/Shopping/CartEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartEventTypeByID
		 * @path <API Root>/Shopping/CartEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartFileByID
		 * @path <API Root>/Shopping/CartFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart item from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartItemByID
		 * @path <API Root>/Shopping/CartItem/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartItem", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart item target from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartItemTargetByID
		 * @path <API Root>/Shopping/CartItemTarget/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartItemTarget", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart state from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartStateByID
		 * @path <API Root>/Shopping/CartState/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartState", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartStatusByID
		 * @path <API Root>/Shopping/CartStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific cart type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCartTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCartTypeByID
		 * @path <API Root>/Shopping/CartType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCartTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific cart from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartByID
		 * @path <API Root>/Shopping/Cart/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "Cart", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartContactByID
		 * @path <API Root>/Shopping/CartContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartEventByID
		 * @path <API Root>/Shopping/CartEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartEventTypeByID
		 * @path <API Root>/Shopping/CartEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartFileByID
		 * @path <API Root>/Shopping/CartFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart item from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartItemByID
		 * @path <API Root>/Shopping/CartItem/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartItem", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart item target from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartItemTargetByID
		 * @path <API Root>/Shopping/CartItemTarget/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartItemTarget", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart state from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartStateByID
		 * @path <API Root>/Shopping/CartState/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartState", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartStatusByID
		 * @path <API Root>/Shopping/CartStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific cart type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCartTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartTypeByID
		 * @path <API Root>/Shopping/CartType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCartTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific cart
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartByID
		 * @path <API Root>/Shopping/Cart/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartModel>}
		 * @public
		 */
		GetCartByID = (id: number) => this.$http<CartModel>({
			url: [this.rootUrl, "Shopping", "Cart", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific cart contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartContactByID
		 * @path <API Root>/Shopping/CartContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartContactModel>}
		 * @public
		 */
		GetCartContactByID = (id: number) => this.$http<CartContactModel>({
			url: [this.rootUrl, "Shopping", "CartContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartContacts
		 * @path <API Root>/Shopping/CartContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartContactPagedResults>}
		 * @public
		 */
		GetCartContacts = (routeParams?: GetCartContactsDto) => this.$http<CartContactPagedResults>({
			url: [this.rootUrl, "Shopping", "CartContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific cart event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartEventByID
		 * @path <API Root>/Shopping/CartEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartEventModel>}
		 * @public
		 */
		GetCartEventByID = (id: number) => this.$http<CartEventModel>({
			url: [this.rootUrl, "Shopping", "CartEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartEvents
		 * @path <API Root>/Shopping/CartEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartEventPagedResults>}
		 * @public
		 */
		GetCartEvents = (routeParams?: GetCartEventsDto) => this.$http<CartEventPagedResults>({
			url: [this.rootUrl, "Shopping", "CartEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific cart event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartEventTypeByID
		 * @path <API Root>/Shopping/CartEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCartEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Shopping", "CartEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartEventTypes
		 * @path <API Root>/Shopping/CartEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartEventTypePagedResults>}
		 * @public
		 */
		GetCartEventTypes = (routeParams?: GetCartEventTypesDto) => this.$http<CartEventTypePagedResults>({
			url: [this.rootUrl, "Shopping", "CartEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific cart file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartFileByID
		 * @path <API Root>/Shopping/CartFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartFileModel>}
		 * @public
		 */
		GetCartFileByID = (id: number) => this.$http<CartFileModel>({
			url: [this.rootUrl, "Shopping", "CartFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartFiles
		 * @path <API Root>/Shopping/CartFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartFilePagedResults>}
		 * @public
		 */
		GetCartFiles = (routeParams?: GetCartFilesDto) => this.$http<CartFilePagedResults>({
			url: [this.rootUrl, "Shopping", "CartFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific cart item
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartItemByID
		 * @path <API Root>/Shopping/CartItem/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedCartItemDiscountModel>>}
		 * @public
		 */
		GetCartItemByID = (id: number) => this.$http<SalesItemBaseModel<AppliedCartItemDiscountModel>>({
			url: [this.rootUrl, "Shopping", "CartItem", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart items
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartItems
		 * @path <API Root>/Shopping/CartItems
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartItemPagedResults>}
		 * @public
		 */
		GetCartItems = (routeParams?: GetCartItemsDto) => this.$http<CartItemPagedResults>({
			url: [this.rootUrl, "Shopping", "CartItems"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific cart item target
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartItemTargetByID
		 * @path <API Root>/Shopping/CartItemTarget/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetBaseModel>}
		 * @public
		 */
		GetCartItemTargetByID = (id: number) => this.$http<SalesItemTargetBaseModel>({
			url: [this.rootUrl, "Shopping", "CartItemTarget", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart item targets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartItemTargets
		 * @path <API Root>/Shopping/CartItemTargets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartItemTargetPagedResults>}
		 * @public
		 */
		GetCartItemTargets = (routeParams?: GetCartItemTargetsDto) => this.$http<CartItemTargetPagedResults>({
			url: [this.rootUrl, "Shopping", "CartItemTargets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of carts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCarts
		 * @path <API Root>/Shopping/Carts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartPagedResults>}
		 * @public
		 */
		GetCarts = (routeParams?: GetCartsDto) => this.$http<CartPagedResults>({
			url: [this.rootUrl, "Shopping", "Carts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get shipping rates for the specified cart.
		 * @param {@link cef.admin.api.GetCartShippingRateQuotesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartShippingRateQuotes
		 * @path <API Root>/Shopping/AdminForUser/CartShippingRateQuotes
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<RateQuoteModel>>>}
		 * @public
		 */
		GetCartShippingRateQuotes = (routeParams: GetCartShippingRateQuotesDto) => this.$http<CEFActionResponseT<Array<RateQuoteModel>>>({
			url: [this.rootUrl, "Shopping", "AdminForUser", "CartShippingRateQuotes"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a specific cart state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartStateByID
		 * @path <API Root>/Shopping/CartState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetCartStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Shopping", "CartState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartStates
		 * @path <API Root>/Shopping/CartStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartStatePagedResults>}
		 * @public
		 */
		GetCartStates = (routeParams?: GetCartStatesDto) => this.$http<CartStatePagedResults>({
			url: [this.rootUrl, "Shopping", "CartStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific cart status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartStatusByID
		 * @path <API Root>/Shopping/CartStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetCartStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Shopping", "CartStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartStatuses
		 * @path <API Root>/Shopping/CartStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartStatusPagedResults>}
		 * @public
		 */
		GetCartStatuses = (routeParams?: GetCartStatusesDto) => this.$http<CartStatusPagedResults>({
			url: [this.rootUrl, "Shopping", "CartStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific cart type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartTypeByID
		 * @path <API Root>/Shopping/CartType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartTypeModel>}
		 * @public
		 */
		GetCartTypeByID = (id: number) => this.$http<CartTypeModel>({
			url: [this.rootUrl, "Shopping", "CartType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of cart types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartTypes
		 * @path <API Root>/Shopping/CartTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CartTypePagedResults>}
		 * @public
		 */
		GetCartTypes = (routeParams?: GetCartTypesDto) => this.$http<CartTypePagedResults>({
			url: [this.rootUrl, "Shopping", "CartTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific cart from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartByID
		 * @path <API Root>/Shopping/Cart/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "Cart", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartContactByID
		 * @path <API Root>/Shopping/CartContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartEventByID
		 * @path <API Root>/Shopping/CartEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartEventTypeByID
		 * @path <API Root>/Shopping/CartEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartFileByID
		 * @path <API Root>/Shopping/CartFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart item from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartItemByID
		 * @path <API Root>/Shopping/CartItem/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartItem", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart item target from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartItemTargetByID
		 * @path <API Root>/Shopping/CartItemTarget/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartItemTarget", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart state from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartStateByID
		 * @path <API Root>/Shopping/CartState/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartState", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartStatusByID
		 * @path <API Root>/Shopping/CartStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific cart type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCartTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCartTypeByID
		 * @path <API Root>/Shopping/CartType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCartTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shopping", "CartType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing cart.
		 * @param {@link cef.admin.api.UpdateCartDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCart
		 * @path <API Root>/Shopping/Cart/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCart = (routeParams?: UpdateCartDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "Cart", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart contact.
		 * @param {@link cef.admin.api.UpdateCartContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartContact
		 * @path <API Root>/Shopping/CartContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartContact = (routeParams?: UpdateCartContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart event.
		 * @param {@link cef.admin.api.UpdateCartEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartEvent
		 * @path <API Root>/Shopping/CartEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartEvent = (routeParams?: UpdateCartEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart event type.
		 * @param {@link cef.admin.api.UpdateCartEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartEventType
		 * @path <API Root>/Shopping/CartEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartEventType = (routeParams?: UpdateCartEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart file.
		 * @param {@link cef.admin.api.UpdateCartFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartFile
		 * @path <API Root>/Shopping/CartFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartFile = (routeParams?: UpdateCartFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart item.
		 * @param {@link cef.admin.api.UpdateCartItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartItem
		 * @path <API Root>/Shopping/CartItem/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartItem = (routeParams?: UpdateCartItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartItem", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart item target.
		 * @param {@link cef.admin.api.UpdateCartItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartItemTarget
		 * @path <API Root>/Shopping/CartItemTarget/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartItemTarget = (routeParams?: UpdateCartItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartItemTarget", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart state.
		 * @param {@link cef.admin.api.UpdateCartStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartState
		 * @path <API Root>/Shopping/CartState/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartState = (routeParams?: UpdateCartStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartState", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart status.
		 * @param {@link cef.admin.api.UpdateCartStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartStatus
		 * @path <API Root>/Shopping/CartStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartStatus = (routeParams?: UpdateCartStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing cart type.
		 * @param {@link cef.admin.api.UpdateCartTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartType
		 * @path <API Root>/Shopping/CartType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCartType = (routeParams?: UpdateCartTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shopping", "CartType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
