/**
 * @file framework/admin/_api/cvApi.Pricing.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Calculate the prices for multiple products by IDs as another user. Admins only.
	 * @public
	 */
	export interface BulkUpdateRawPricesForProductDto {
		RawPricesToPush: Array<RawProductPricesModel>;
	}
	/**
	 * Use to create a new price point.
	 * @see {@link PricePointModel}
	 * @public
	 */
	export interface CreatePricePointDto extends PricePointModel {
	}
	/**
	 * Use to create a new price rounding.
	 * @see {@link PriceRoundingModel}
	 * @public
	 */
	export interface CreatePriceRoundingDto extends PriceRoundingModel {
	}
	/**
	 * Use to create a new price rule.
	 * @see {@link PriceRuleModel}
	 * @public
	 */
	export interface CreatePriceRuleDto extends PriceRuleModel {
	}
	/**
	 * Use to create a new price rule account.
	 * @see {@link PriceRuleAccountModel}
	 * @public
	 */
	export interface CreatePriceRuleAccountDto extends PriceRuleAccountModel {
	}
	/**
	 * Use to create a new price rule account type.
	 * @see {@link PriceRuleAccountTypeModel}
	 * @public
	 */
	export interface CreatePriceRuleAccountTypeDto extends PriceRuleAccountTypeModel {
	}
	/**
	 * Use to create a new price rule brand.
	 * @see {@link PriceRuleBrandModel}
	 * @public
	 */
	export interface CreatePriceRuleBrandDto extends PriceRuleBrandModel {
	}
	/**
	 * Use to create a new price rule category.
	 * @see {@link PriceRuleCategoryModel}
	 * @public
	 */
	export interface CreatePriceRuleCategoryDto extends PriceRuleCategoryModel {
	}
	/**
	 * Use to create a new price rule country.
	 * @see {@link PriceRuleCountryModel}
	 * @public
	 */
	export interface CreatePriceRuleCountryDto extends PriceRuleCountryModel {
	}
	/**
	 * Use to create a new price rule franchise.
	 * @see {@link PriceRuleFranchiseModel}
	 * @public
	 */
	export interface CreatePriceRuleFranchiseDto extends PriceRuleFranchiseModel {
	}
	/**
	 * Use to create a new price rule manufacturer.
	 * @see {@link PriceRuleManufacturerModel}
	 * @public
	 */
	export interface CreatePriceRuleManufacturerDto extends PriceRuleManufacturerModel {
	}
	/**
	 * Use to create a new price rule product.
	 * @see {@link PriceRuleProductModel}
	 * @public
	 */
	export interface CreatePriceRuleProductDto extends PriceRuleProductModel {
	}
	/**
	 * Use to create a new price rule product type.
	 * @see {@link PriceRuleProductTypeModel}
	 * @public
	 */
	export interface CreatePriceRuleProductTypeDto extends PriceRuleProductTypeModel {
	}
	/**
	 * Use to create a new price rule store.
	 * @see {@link PriceRuleStoreModel}
	 * @public
	 */
	export interface CreatePriceRuleStoreDto extends PriceRuleStoreModel {
	}
	/**
	 * Use to create a new price rule user role.
	 * @see {@link PriceRuleUserRoleModel}
	 * @public
	 */
	export interface CreatePriceRuleUserRoleDto extends PriceRuleUserRoleModel {
	}
	/**
	 * Use to create a new price rule vendor.
	 * @see {@link PriceRuleVendorModel}
	 * @public
	 */
	export interface CreatePriceRuleVendorDto extends PriceRuleVendorModel {
	}
	/**
	 * Use to get a list of price points
	 * @see {@link PricePointSearchModel}
	 * @public
	 */
	export interface GetPricePointsDto extends PricePointSearchModel {
	}
	/**
	 * Use to get a list of price roundings
	 * @see {@link PriceRoundingSearchModel}
	 * @public
	 */
	export interface GetPriceRoundingsDto extends PriceRoundingSearchModel {
	}
	/**
	 * Use to get a list of price rule accounts
	 * @see {@link PriceRuleAccountSearchModel}
	 * @public
	 */
	export interface GetPriceRuleAccountsDto extends PriceRuleAccountSearchModel {
	}
	/**
	 * Use to get a list of price rule account types
	 * @see {@link PriceRuleAccountTypeSearchModel}
	 * @public
	 */
	export interface GetPriceRuleAccountTypesDto extends PriceRuleAccountTypeSearchModel {
	}
	/**
	 * Use to get a list of price rule brands
	 * @see {@link PriceRuleBrandSearchModel}
	 * @public
	 */
	export interface GetPriceRuleBrandsDto extends PriceRuleBrandSearchModel {
	}
	/**
	 * Use to get a list of price rule categories
	 * @see {@link PriceRuleCategorySearchModel}
	 * @public
	 */
	export interface GetPriceRuleCategoriesDto extends PriceRuleCategorySearchModel {
	}
	/**
	 * Use to get a list of price rule countries
	 * @see {@link PriceRuleCountrySearchModel}
	 * @public
	 */
	export interface GetPriceRuleCountriesDto extends PriceRuleCountrySearchModel {
	}
	/**
	 * Use to get a list of price rule franchises
	 * @see {@link PriceRuleFranchiseSearchModel}
	 * @public
	 */
	export interface GetPriceRuleFranchisesDto extends PriceRuleFranchiseSearchModel {
	}
	/**
	 * Use to get a list of price rule manufacturers
	 * @see {@link PriceRuleManufacturerSearchModel}
	 * @public
	 */
	export interface GetPriceRuleManufacturersDto extends PriceRuleManufacturerSearchModel {
	}
	/**
	 * Use to get a list of price rule products
	 * @see {@link PriceRuleProductSearchModel}
	 * @public
	 */
	export interface GetPriceRuleProductsDto extends PriceRuleProductSearchModel {
	}
	/**
	 * Use to get a list of price rule product types
	 * @see {@link PriceRuleProductTypeSearchModel}
	 * @public
	 */
	export interface GetPriceRuleProductTypesDto extends PriceRuleProductTypeSearchModel {
	}
	/**
	 * Use to get a list of price rules
	 * @see {@link PriceRuleSearchModel}
	 * @public
	 */
	export interface GetPriceRulesDto extends PriceRuleSearchModel {
	}
	/**
	 * Use to get a list of price rule stores
	 * @see {@link PriceRuleStoreSearchModel}
	 * @public
	 */
	export interface GetPriceRuleStoresDto extends PriceRuleStoreSearchModel {
	}
	/**
	 * Use to get a list of price rule user roles
	 * @see {@link PriceRuleUserRoleSearchModel}
	 * @public
	 */
	export interface GetPriceRuleUserRolesDto extends PriceRuleUserRoleSearchModel {
	}
	/**
	 * Use to get a list of price rule vendors
	 * @see {@link PriceRuleVendorSearchModel}
	 * @public
	 */
	export interface GetPriceRuleVendorsDto extends PriceRuleVendorSearchModel {
	}
	/**
	 * Calculate the prices for multiple products by IDs as another user. Admins only.
	 * @public
	 */
	export interface GetPricesForProductsAsUserDto {
		UserID: number;
		ProductIDs: Array<number>;
	}
	/**
	 * Use to update an existing price point.
	 * @see {@link PricePointModel}
	 * @public
	 */
	export interface UpdatePricePointDto extends PricePointModel {
	}
	/**
	 * Use to update an existing price rounding.
	 * @see {@link PriceRoundingModel}
	 * @public
	 */
	export interface UpdatePriceRoundingDto extends PriceRoundingModel {
	}
	/**
	 * Use to update an existing price rule.
	 * @see {@link PriceRuleModel}
	 * @public
	 */
	export interface UpdatePriceRuleDto extends PriceRuleModel {
	}
	/**
	 * Use to update an existing price rule account.
	 * @see {@link PriceRuleAccountModel}
	 * @public
	 */
	export interface UpdatePriceRuleAccountDto extends PriceRuleAccountModel {
	}
	/**
	 * Use to update an existing price rule account type.
	 * @see {@link PriceRuleAccountTypeModel}
	 * @public
	 */
	export interface UpdatePriceRuleAccountTypeDto extends PriceRuleAccountTypeModel {
	}
	/**
	 * Use to update an existing price rule brand.
	 * @see {@link PriceRuleBrandModel}
	 * @public
	 */
	export interface UpdatePriceRuleBrandDto extends PriceRuleBrandModel {
	}
	/**
	 * Use to update an existing price rule category.
	 * @see {@link PriceRuleCategoryModel}
	 * @public
	 */
	export interface UpdatePriceRuleCategoryDto extends PriceRuleCategoryModel {
	}
	/**
	 * Use to update an existing price rule country.
	 * @see {@link PriceRuleCountryModel}
	 * @public
	 */
	export interface UpdatePriceRuleCountryDto extends PriceRuleCountryModel {
	}
	/**
	 * Use to update an existing price rule franchise.
	 * @see {@link PriceRuleFranchiseModel}
	 * @public
	 */
	export interface UpdatePriceRuleFranchiseDto extends PriceRuleFranchiseModel {
	}
	/**
	 * Use to update an existing price rule manufacturer.
	 * @see {@link PriceRuleManufacturerModel}
	 * @public
	 */
	export interface UpdatePriceRuleManufacturerDto extends PriceRuleManufacturerModel {
	}
	/**
	 * Use to update an existing price rule product.
	 * @see {@link PriceRuleProductModel}
	 * @public
	 */
	export interface UpdatePriceRuleProductDto extends PriceRuleProductModel {
	}
	/**
	 * Use to update an existing price rule product type.
	 * @see {@link PriceRuleProductTypeModel}
	 * @public
	 */
	export interface UpdatePriceRuleProductTypeDto extends PriceRuleProductTypeModel {
	}
	/**
	 * Use to update an existing price rule store.
	 * @see {@link PriceRuleStoreModel}
	 * @public
	 */
	export interface UpdatePriceRuleStoreDto extends PriceRuleStoreModel {
	}
	/**
	 * Use to update an existing price rule user role.
	 * @see {@link PriceRuleUserRoleModel}
	 * @public
	 */
	export interface UpdatePriceRuleUserRoleDto extends PriceRuleUserRoleModel {
	}
	/**
	 * Use to update an existing price rule vendor.
	 * @see {@link PriceRuleVendorModel}
	 * @public
	 */
	export interface UpdatePriceRuleVendorDto extends PriceRuleVendorModel {
	}
	/**
	 * Calculate the prices for multiple products by IDs as another user. Admins only.
	 * @see {@link RawProductPricesModel}
	 * @public
	 */
	export interface UpdateRawPricesForProductDto extends RawProductPricesModel {
	}

	export class Pricing extends ServiceStackRoute {
		/**
		 * Calculate the prices for multiple products by IDs as another user. Admins only.
		 * @param {@link cef.admin.api.BulkUpdateRawPricesForProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.BulkUpdateRawPricesForProduct
		 * @path <API Root>/Pricing/Prices/RawForProduct/BulkUpdate
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		BulkUpdateRawPricesForProduct = (routeParams: BulkUpdateRawPricesForProductDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "Prices", "RawForProduct", "BulkUpdate"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Clears the Price Cache
		 * @param {@link cef.admin.api.ClearPriceCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceCache
		 * @path <API Root>/Pricing/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ClearPriceCache = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price point calls.
		 * @param {@link cef.admin.api.ClearPricePointCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPricePointCache
		 * @path <API Root>/Pricing/PricePoint/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPricePointCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PricePoint", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rounding calls.
		 * @param {@link cef.admin.api.ClearPriceRoundingCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRoundingCache
		 * @path <API Root>/Pricing/PriceRounding/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRoundingCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRounding", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule account calls.
		 * @param {@link cef.admin.api.ClearPriceRuleAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleAccountCache
		 * @path <API Root>/Pricing/PriceRuleAccount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule account type calls.
		 * @param {@link cef.admin.api.ClearPriceRuleAccountTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleAccountTypeCache
		 * @path <API Root>/Pricing/PriceRuleAccountType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleAccountTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule brand calls.
		 * @param {@link cef.admin.api.ClearPriceRuleBrandCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleBrandCache
		 * @path <API Root>/Pricing/PriceRuleBrand/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleBrandCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrand", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule calls.
		 * @param {@link cef.admin.api.ClearPriceRuleCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleCache
		 * @path <API Root>/Pricing/PriceRule/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRule", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule category calls.
		 * @param {@link cef.admin.api.ClearPriceRuleCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleCategoryCache
		 * @path <API Root>/Pricing/PriceRuleCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule country calls.
		 * @param {@link cef.admin.api.ClearPriceRuleCountryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleCountryCache
		 * @path <API Root>/Pricing/PriceRuleCountry/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleCountryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountry", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule franchise calls.
		 * @param {@link cef.admin.api.ClearPriceRuleFranchiseCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleFranchiseCache
		 * @path <API Root>/Pricing/PriceRuleFranchise/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleFranchiseCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchise", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule manufacturer calls.
		 * @param {@link cef.admin.api.ClearPriceRuleManufacturerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleManufacturerCache
		 * @path <API Root>/Pricing/PriceRuleManufacturer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleManufacturerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule product calls.
		 * @param {@link cef.admin.api.ClearPriceRuleProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleProductCache
		 * @path <API Root>/Pricing/PriceRuleProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule product type calls.
		 * @param {@link cef.admin.api.ClearPriceRuleProductTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleProductTypeCache
		 * @path <API Root>/Pricing/PriceRuleProductType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleProductTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule store calls.
		 * @param {@link cef.admin.api.ClearPriceRuleStoreCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleStoreCache
		 * @path <API Root>/Pricing/PriceRuleStore/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleStoreCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleStore", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule user role calls.
		 * @param {@link cef.admin.api.ClearPriceRuleUserRoleCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleUserRoleCache
		 * @path <API Root>/Pricing/PriceRuleUserRole/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleUserRoleCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRole", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all price rule vendor calls.
		 * @param {@link cef.admin.api.ClearPriceRuleVendorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPriceRuleVendorCache
		 * @path <API Root>/Pricing/PriceRuleVendor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPriceRuleVendorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new price point.
		 * @param {@link cef.admin.api.CreatePricePointDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePricePoint
		 * @path <API Root>/Pricing/PricePoint/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePricePoint = (routeParams?: CreatePricePointDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PricePoint", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rounding.
		 * @param {@link cef.admin.api.CreatePriceRoundingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRounding
		 * @path <API Root>/Pricing/PriceRounding/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRounding = (routeParams?: CreatePriceRoundingDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRounding", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule.
		 * @param {@link cef.admin.api.CreatePriceRuleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRule
		 * @path <API Root>/Pricing/PriceRule/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRule = (routeParams?: CreatePriceRuleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule account.
		 * @param {@link cef.admin.api.CreatePriceRuleAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleAccount
		 * @path <API Root>/Pricing/PriceRuleAccount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleAccount = (routeParams?: CreatePriceRuleAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule account type.
		 * @param {@link cef.admin.api.CreatePriceRuleAccountTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleAccountType
		 * @path <API Root>/Pricing/PriceRuleAccountType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleAccountType = (routeParams?: CreatePriceRuleAccountTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule brand.
		 * @param {@link cef.admin.api.CreatePriceRuleBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleBrand
		 * @path <API Root>/Pricing/PriceRuleBrand/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleBrand = (routeParams?: CreatePriceRuleBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrand", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule category.
		 * @param {@link cef.admin.api.CreatePriceRuleCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleCategory
		 * @path <API Root>/Pricing/PriceRuleCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleCategory = (routeParams?: CreatePriceRuleCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule country.
		 * @param {@link cef.admin.api.CreatePriceRuleCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleCountry
		 * @path <API Root>/Pricing/PriceRuleCountry/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleCountry = (routeParams?: CreatePriceRuleCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountry", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule franchise.
		 * @param {@link cef.admin.api.CreatePriceRuleFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleFranchise
		 * @path <API Root>/Pricing/PriceRuleFranchise/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleFranchise = (routeParams?: CreatePriceRuleFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchise", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule manufacturer.
		 * @param {@link cef.admin.api.CreatePriceRuleManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleManufacturer
		 * @path <API Root>/Pricing/PriceRuleManufacturer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleManufacturer = (routeParams?: CreatePriceRuleManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule product.
		 * @param {@link cef.admin.api.CreatePriceRuleProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleProduct
		 * @path <API Root>/Pricing/PriceRuleProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleProduct = (routeParams?: CreatePriceRuleProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule product type.
		 * @param {@link cef.admin.api.CreatePriceRuleProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleProductType
		 * @path <API Root>/Pricing/PriceRuleProductType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleProductType = (routeParams?: CreatePriceRuleProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule store.
		 * @param {@link cef.admin.api.CreatePriceRuleStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleStore
		 * @path <API Root>/Pricing/PriceRuleStore/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleStore = (routeParams?: CreatePriceRuleStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleStore", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule user role.
		 * @param {@link cef.admin.api.CreatePriceRuleUserRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleUserRole
		 * @path <API Root>/Pricing/PriceRuleUserRole/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleUserRole = (routeParams?: CreatePriceRuleUserRoleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRole", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule vendor.
		 * @param {@link cef.admin.api.CreatePriceRuleVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRuleVendor
		 * @path <API Root>/Pricing/PriceRuleVendor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRuleVendor = (routeParams?: CreatePriceRuleVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific price point from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePricePointByID
		 * @path <API Root>/Pricing/PricePoint/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PricePoint", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rounding from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRoundingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRoundingByID
		 * @path <API Root>/Pricing/PriceRounding/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRoundingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRounding", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleAccountByID
		 * @path <API Root>/Pricing/PriceRuleAccount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule account type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleAccountTypeByID
		 * @path <API Root>/Pricing/PriceRuleAccountType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule brand from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleBrandByID
		 * @path <API Root>/Pricing/PriceRuleBrand/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrand", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleByID
		 * @path <API Root>/Pricing/PriceRule/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleCategoryByID
		 * @path <API Root>/Pricing/PriceRuleCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule country from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleCountryByID
		 * @path <API Root>/Pricing/PriceRuleCountry/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountry", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule franchise from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleFranchiseByID
		 * @path <API Root>/Pricing/PriceRuleFranchise/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchise", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule manufacturer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleManufacturerByID
		 * @path <API Root>/Pricing/PriceRuleManufacturer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleProductByID
		 * @path <API Root>/Pricing/PriceRuleProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule product type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleProductTypeByID
		 * @path <API Root>/Pricing/PriceRuleProductType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule store from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleStoreByID
		 * @path <API Root>/Pricing/PriceRuleStore/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleStore", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule user role from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleUserRoleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleUserRoleByID
		 * @path <API Root>/Pricing/PriceRuleUserRole/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleUserRoleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRole", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific price rule vendor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePriceRuleVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePriceRuleVendorByID
		 * @path <API Root>/Pricing/PriceRuleVendor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePriceRuleVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific price point from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePricePointByID
		 * @path <API Root>/Pricing/PricePoint/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PricePoint", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rounding from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRoundingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRoundingByID
		 * @path <API Root>/Pricing/PriceRounding/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRoundingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRounding", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleAccountByID
		 * @path <API Root>/Pricing/PriceRuleAccount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule account type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleAccountTypeByID
		 * @path <API Root>/Pricing/PriceRuleAccountType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule brand from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleBrandByID
		 * @path <API Root>/Pricing/PriceRuleBrand/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrand", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleByID
		 * @path <API Root>/Pricing/PriceRule/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleCategoryByID
		 * @path <API Root>/Pricing/PriceRuleCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule country from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleCountryByID
		 * @path <API Root>/Pricing/PriceRuleCountry/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountry", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule franchise from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleFranchiseByID
		 * @path <API Root>/Pricing/PriceRuleFranchise/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchise", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule manufacturer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleManufacturerByID
		 * @path <API Root>/Pricing/PriceRuleManufacturer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleProductByID
		 * @path <API Root>/Pricing/PriceRuleProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule product type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleProductTypeByID
		 * @path <API Root>/Pricing/PriceRuleProductType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule store from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleStoreByID
		 * @path <API Root>/Pricing/PriceRuleStore/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleStore", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule user role from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleUserRoleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleUserRoleByID
		 * @path <API Root>/Pricing/PriceRuleUserRole/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleUserRoleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRole", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific price rule vendor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePriceRuleVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleVendorByID
		 * @path <API Root>/Pricing/PriceRuleVendor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific price point
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPricePointByID
		 * @path <API Root>/Pricing/PricePoint/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PricePointModel>}
		 * @public
		 */
		GetPricePointByID = (id: number) => this.$http<PricePointModel>({
			url: [this.rootUrl, "Pricing", "PricePoint", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price points
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPricePoints
		 * @path <API Root>/Pricing/PricePoints
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PricePointPagedResults>}
		 * @public
		 */
		GetPricePoints = (routeParams?: GetPricePointsDto) => this.$http<PricePointPagedResults>({
			url: [this.rootUrl, "Pricing", "PricePoints"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rounding
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRoundingByID
		 * @path <API Root>/Pricing/PriceRounding/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRoundingModel>}
		 * @public
		 */
		GetPriceRoundingByID = (id: number) => this.$http<PriceRoundingModel>({
			url: [this.rootUrl, "Pricing", "PriceRounding", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price roundings
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRoundings
		 * @path <API Root>/Pricing/PriceRoundings
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRoundingPagedResults>}
		 * @public
		 */
		GetPriceRoundings = (routeParams?: GetPriceRoundingsDto) => this.$http<PriceRoundingPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRoundings"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleAccountByID
		 * @path <API Root>/Pricing/PriceRuleAccount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleAccountModel>}
		 * @public
		 */
		GetPriceRuleAccountByID = (id: number) => this.$http<PriceRuleAccountModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleAccounts
		 * @path <API Root>/Pricing/PriceRuleAccounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleAccountPagedResults>}
		 * @public
		 */
		GetPriceRuleAccounts = (routeParams?: GetPriceRuleAccountsDto) => this.$http<PriceRuleAccountPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule account type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleAccountTypeByID
		 * @path <API Root>/Pricing/PriceRuleAccountType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleAccountTypeModel>}
		 * @public
		 */
		GetPriceRuleAccountTypeByID = (id: number) => this.$http<PriceRuleAccountTypeModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule account types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleAccountTypes
		 * @path <API Root>/Pricing/PriceRuleAccountTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleAccountTypePagedResults>}
		 * @public
		 */
		GetPriceRuleAccountTypes = (routeParams?: GetPriceRuleAccountTypesDto) => this.$http<PriceRuleAccountTypePagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule brand
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleBrandByID
		 * @path <API Root>/Pricing/PriceRuleBrand/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleBrandModel>}
		 * @public
		 */
		GetPriceRuleBrandByID = (id: number) => this.$http<PriceRuleBrandModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrand", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule brands
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleBrands
		 * @path <API Root>/Pricing/PriceRuleBrands
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleBrandPagedResults>}
		 * @public
		 */
		GetPriceRuleBrands = (routeParams?: GetPriceRuleBrandsDto) => this.$http<PriceRuleBrandPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrands"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleByID
		 * @path <API Root>/Pricing/PriceRule/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleModel>}
		 * @public
		 */
		GetPriceRuleByID = (id: number) => this.$http<PriceRuleModel>({
			url: [this.rootUrl, "Pricing", "PriceRule", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleCategories
		 * @path <API Root>/Pricing/PriceRuleCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleCategoryPagedResults>}
		 * @public
		 */
		GetPriceRuleCategories = (routeParams?: GetPriceRuleCategoriesDto) => this.$http<PriceRuleCategoryPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleCategoryByID
		 * @path <API Root>/Pricing/PriceRuleCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleCategoryModel>}
		 * @public
		 */
		GetPriceRuleCategoryByID = (id: number) => this.$http<PriceRuleCategoryModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule countries
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleCountries
		 * @path <API Root>/Pricing/PriceRuleCountries
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleCountryPagedResults>}
		 * @public
		 */
		GetPriceRuleCountries = (routeParams?: GetPriceRuleCountriesDto) => this.$http<PriceRuleCountryPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountries"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule country
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleCountryByID
		 * @path <API Root>/Pricing/PriceRuleCountry/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleCountryModel>}
		 * @public
		 */
		GetPriceRuleCountryByID = (id: number) => this.$http<PriceRuleCountryModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountry", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific price rule franchise
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleFranchiseByID
		 * @path <API Root>/Pricing/PriceRuleFranchise/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleFranchiseModel>}
		 * @public
		 */
		GetPriceRuleFranchiseByID = (id: number) => this.$http<PriceRuleFranchiseModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchise", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule franchises
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleFranchises
		 * @path <API Root>/Pricing/PriceRuleFranchises
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleFranchisePagedResults>}
		 * @public
		 */
		GetPriceRuleFranchises = (routeParams?: GetPriceRuleFranchisesDto) => this.$http<PriceRuleFranchisePagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchises"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule manufacturer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleManufacturerByID
		 * @path <API Root>/Pricing/PriceRuleManufacturer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleManufacturerModel>}
		 * @public
		 */
		GetPriceRuleManufacturerByID = (id: number) => this.$http<PriceRuleManufacturerModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule manufacturers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleManufacturers
		 * @path <API Root>/Pricing/PriceRuleManufacturers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleManufacturerPagedResults>}
		 * @public
		 */
		GetPriceRuleManufacturers = (routeParams?: GetPriceRuleManufacturersDto) => this.$http<PriceRuleManufacturerPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleProductByID
		 * @path <API Root>/Pricing/PriceRuleProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleProductModel>}
		 * @public
		 */
		GetPriceRuleProductByID = (id: number) => this.$http<PriceRuleProductModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleProducts
		 * @path <API Root>/Pricing/PriceRuleProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleProductPagedResults>}
		 * @public
		 */
		GetPriceRuleProducts = (routeParams?: GetPriceRuleProductsDto) => this.$http<PriceRuleProductPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule product type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleProductTypeByID
		 * @path <API Root>/Pricing/PriceRuleProductType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleProductTypeModel>}
		 * @public
		 */
		GetPriceRuleProductTypeByID = (id: number) => this.$http<PriceRuleProductTypeModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule product types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleProductTypes
		 * @path <API Root>/Pricing/PriceRuleProductTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleProductTypePagedResults>}
		 * @public
		 */
		GetPriceRuleProductTypes = (routeParams?: GetPriceRuleProductTypesDto) => this.$http<PriceRuleProductTypePagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of price rules
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRules
		 * @path <API Root>/Pricing/PriceRules
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRulePagedResults>}
		 * @public
		 */
		GetPriceRules = (routeParams?: GetPriceRulesDto) => this.$http<PriceRulePagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRules"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleStoreByID
		 * @path <API Root>/Pricing/PriceRuleStore/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleStoreModel>}
		 * @public
		 */
		GetPriceRuleStoreByID = (id: number) => this.$http<PriceRuleStoreModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleStore", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule stores
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleStores
		 * @path <API Root>/Pricing/PriceRuleStores
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleStorePagedResults>}
		 * @public
		 */
		GetPriceRuleStores = (routeParams?: GetPriceRuleStoresDto) => this.$http<PriceRuleStorePagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleStores"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule user role
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleUserRoleByID
		 * @path <API Root>/Pricing/PriceRuleUserRole/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleUserRoleModel>}
		 * @public
		 */
		GetPriceRuleUserRoleByID = (id: number) => this.$http<PriceRuleUserRoleModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRole", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule user roles
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleUserRoles
		 * @path <API Root>/Pricing/PriceRuleUserRoles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleUserRolePagedResults>}
		 * @public
		 */
		GetPriceRuleUserRoles = (routeParams?: GetPriceRuleUserRolesDto) => this.$http<PriceRuleUserRolePagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRoles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule vendor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleVendorByID
		 * @path <API Root>/Pricing/PriceRuleVendor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleVendorModel>}
		 * @public
		 */
		GetPriceRuleVendorByID = (id: number) => this.$http<PriceRuleVendorModel>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rule vendors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleVendors
		 * @path <API Root>/Pricing/PriceRuleVendors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleVendorPagedResults>}
		 * @public
		 */
		GetPriceRuleVendors = (routeParams?: GetPriceRuleVendorsDto) => this.$http<PriceRuleVendorPagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Calculate the price for a product by ID as another user. Admins only.
		 * @param {@link cef.admin.api.GetPricesForProductAsUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPricesForProductAsUser
		 * @path <API Root>/Pricing/Prices/ForProduct/{ProductID}/Quantity/{Quantity}/AsUser/{UserID}
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<CalculatedPrice>>}
		 * @public
		 */
		GetPricesForProductAsUser = (productID: number, quantity: number, userID: number) => this.$http<CEFActionResponseT<CalculatedPrice>>({
			url: [this.rootUrl, "Pricing", "Prices", "ForProduct", productID, "Quantity", quantity, "AsUser", userID].join("/"),
			method: "POST",
		});

		/**
		 * Calculate the prices for multiple products by IDs as another user. Admins only.
		 * @param {@link cef.admin.api.GetPricesForProductsAsUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPricesForProductsAsUser
		 * @path <API Root>/Pricing/Prices/ForProductsAsUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.admin.Dictionary<CalculatedPrice>>>}
		 * @public
		 */
		GetPricesForProductsAsUser = (routeParams: GetPricesForProductsAsUserDto) => this.$http<CEFActionResponseT<cefalt.admin.Dictionary<CalculatedPrice>>>({
			url: [this.rootUrl, "Pricing", "Prices", "ForProductsAsUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Calculate the prices for multiple products by IDs as another user. Admins only.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRawPricesForProduct
		 * @path <API Root>/Pricing/Prices/RawForProduct/ID/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<RawProductPricesModel>>}
		 * @public
		 */
		GetRawPricesForProduct = (id: number) => this.$http<CEFActionResponseT<RawProductPricesModel>>({
			url: [this.rootUrl, "Pricing", "Prices", "RawForProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Reactivate a specific price point from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePricePointByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePricePointByID
		 * @path <API Root>/Pricing/PricePoint/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePricePointByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PricePoint", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rounding from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRoundingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRoundingByID
		 * @path <API Root>/Pricing/PriceRounding/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRoundingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRounding", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleAccountByID
		 * @path <API Root>/Pricing/PriceRuleAccount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule account type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleAccountTypeByID
		 * @path <API Root>/Pricing/PriceRuleAccountType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule brand from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleBrandByID
		 * @path <API Root>/Pricing/PriceRuleBrand/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrand", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleByID
		 * @path <API Root>/Pricing/PriceRule/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleCategoryByID
		 * @path <API Root>/Pricing/PriceRuleCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule country from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleCountryByID
		 * @path <API Root>/Pricing/PriceRuleCountry/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountry", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule franchise from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleFranchiseByID
		 * @path <API Root>/Pricing/PriceRuleFranchise/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchise", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule manufacturer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleManufacturerByID
		 * @path <API Root>/Pricing/PriceRuleManufacturer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleProductByID
		 * @path <API Root>/Pricing/PriceRuleProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule product type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleProductTypeByID
		 * @path <API Root>/Pricing/PriceRuleProductType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule store from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleStoreByID
		 * @path <API Root>/Pricing/PriceRuleStore/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleStore", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule user role from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleUserRoleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleUserRoleByID
		 * @path <API Root>/Pricing/PriceRuleUserRole/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleUserRoleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRole", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific price rule vendor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePriceRuleVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePriceRuleVendorByID
		 * @path <API Root>/Pricing/PriceRuleVendor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePriceRuleVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing price point.
		 * @param {@link cef.admin.api.UpdatePricePointDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePricePoint
		 * @path <API Root>/Pricing/PricePoint/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePricePoint = (routeParams?: UpdatePricePointDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PricePoint", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rounding.
		 * @param {@link cef.admin.api.UpdatePriceRoundingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRounding
		 * @path <API Root>/Pricing/PriceRounding/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRounding = (routeParams?: UpdatePriceRoundingDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRounding", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule.
		 * @param {@link cef.admin.api.UpdatePriceRuleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRule
		 * @path <API Root>/Pricing/PriceRule/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRule = (routeParams?: UpdatePriceRuleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule account.
		 * @param {@link cef.admin.api.UpdatePriceRuleAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleAccount
		 * @path <API Root>/Pricing/PriceRuleAccount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleAccount = (routeParams?: UpdatePriceRuleAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule account type.
		 * @param {@link cef.admin.api.UpdatePriceRuleAccountTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleAccountType
		 * @path <API Root>/Pricing/PriceRuleAccountType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleAccountType = (routeParams?: UpdatePriceRuleAccountTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleAccountType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule brand.
		 * @param {@link cef.admin.api.UpdatePriceRuleBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleBrand
		 * @path <API Root>/Pricing/PriceRuleBrand/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleBrand = (routeParams?: UpdatePriceRuleBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleBrand", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule category.
		 * @param {@link cef.admin.api.UpdatePriceRuleCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleCategory
		 * @path <API Root>/Pricing/PriceRuleCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleCategory = (routeParams?: UpdatePriceRuleCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule country.
		 * @param {@link cef.admin.api.UpdatePriceRuleCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleCountry
		 * @path <API Root>/Pricing/PriceRuleCountry/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleCountry = (routeParams?: UpdatePriceRuleCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleCountry", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule franchise.
		 * @param {@link cef.admin.api.UpdatePriceRuleFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleFranchise
		 * @path <API Root>/Pricing/PriceRuleFranchise/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleFranchise = (routeParams?: UpdatePriceRuleFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleFranchise", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule manufacturer.
		 * @param {@link cef.admin.api.UpdatePriceRuleManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleManufacturer
		 * @path <API Root>/Pricing/PriceRuleManufacturer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleManufacturer = (routeParams?: UpdatePriceRuleManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleManufacturer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule product.
		 * @param {@link cef.admin.api.UpdatePriceRuleProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleProduct
		 * @path <API Root>/Pricing/PriceRuleProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleProduct = (routeParams?: UpdatePriceRuleProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule product type.
		 * @param {@link cef.admin.api.UpdatePriceRuleProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleProductType
		 * @path <API Root>/Pricing/PriceRuleProductType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleProductType = (routeParams?: UpdatePriceRuleProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleProductType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule store.
		 * @param {@link cef.admin.api.UpdatePriceRuleStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleStore
		 * @path <API Root>/Pricing/PriceRuleStore/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleStore = (routeParams?: UpdatePriceRuleStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleStore", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule user role.
		 * @param {@link cef.admin.api.UpdatePriceRuleUserRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleUserRole
		 * @path <API Root>/Pricing/PriceRuleUserRole/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleUserRole = (routeParams?: UpdatePriceRuleUserRoleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleUserRole", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule vendor.
		 * @param {@link cef.admin.api.UpdatePriceRuleVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRuleVendor
		 * @path <API Root>/Pricing/PriceRuleVendor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRuleVendor = (routeParams?: UpdatePriceRuleVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRuleVendor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Calculate the prices for multiple products by IDs as another user. Admins only.
		 * @param {@link cef.admin.api.UpdateRawPricesForProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRawPricesForProduct
		 * @path <API Root>/Pricing/Prices/RawForProduct/Update
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UpdateRawPricesForProduct = (routeParams?: UpdateRawPricesForProductDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "Prices", "RawForProduct", "Update"].join("/"),
			method: "PATCH",
			data: routeParams
		});

	}
}
