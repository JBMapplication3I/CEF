/**
 * @file framework/admin/_api/cvApi.Advertising.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new ad.
	 * @see {@link AdModel}
	 * @public
	 */
	export interface CreateAdDto extends AdModel {
	}
	/**
	 * Use to create a new ad account.
	 * @see {@link AdAccountModel}
	 * @public
	 */
	export interface CreateAdAccountDto extends AdAccountModel {
	}
	/**
	 * Use to create a new ad brand.
	 * @see {@link AdBrandModel}
	 * @public
	 */
	export interface CreateAdBrandDto extends AdBrandModel {
	}
	/**
	 * Use to create a new ad franchise.
	 * @see {@link AdFranchiseModel}
	 * @public
	 */
	export interface CreateAdFranchiseDto extends AdFranchiseModel {
	}
	/**
	 * Use to create a new ad image.
	 * @see {@link AdImageModel}
	 * @public
	 */
	export interface CreateAdImageDto extends AdImageModel {
	}
	/**
	 * Use to create a new ad image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAdImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new ad status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateAdStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new ad store.
	 * @see {@link AdStoreModel}
	 * @public
	 */
	export interface CreateAdStoreDto extends AdStoreModel {
	}
	/**
	 * Use to create a new ad type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAdTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new ad zone.
	 * @see {@link AdZoneModel}
	 * @public
	 */
	export interface CreateAdZoneDto extends AdZoneModel {
	}
	/**
	 * Use to create a new ad zone access.
	 * @see {@link AdZoneAccessModel}
	 * @public
	 */
	export interface CreateAdZoneAccessDto extends AdZoneAccessModel {
	}
	/**
	 * Use to create a new zone.
	 * @see {@link ZoneModel}
	 * @public
	 */
	export interface CreateZoneDto extends ZoneModel {
	}
	/**
	 * Use to create a new zone status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateZoneStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new zone type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateZoneTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of ad accounts
	 * @see {@link AdAccountSearchModel}
	 * @public
	 */
	export interface GetAdAccountsDto extends AdAccountSearchModel {
	}
	/**
	 * Use to get a list of ad brands
	 * @see {@link AdBrandSearchModel}
	 * @public
	 */
	export interface GetAdBrandsDto extends AdBrandSearchModel {
	}
	/**
	 * Use to get a list of ad franchises
	 * @see {@link AdFranchiseSearchModel}
	 * @public
	 */
	export interface GetAdFranchisesDto extends AdFranchiseSearchModel {
	}
	/**
	 * Use to get a list of ad images
	 * @see {@link AdImageSearchModel}
	 * @public
	 */
	export interface GetAdImagesDto extends AdImageSearchModel {
	}
	/**
	 * Use to get a list of ad image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAdImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of ads
	 * @see {@link AdSearchModel}
	 * @public
	 */
	export interface GetAdsDto extends AdSearchModel {
	}
	/**
	 * Use to get a list of ad statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetAdStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of ad stores
	 * @see {@link AdStoreSearchModel}
	 * @public
	 */
	export interface GetAdStoresDto extends AdStoreSearchModel {
	}
	/**
	 * Use to get a list of ad types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAdTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of ad zone accesses
	 * @see {@link AdZoneAccessSearchModel}
	 * @public
	 */
	export interface GetAdZoneAccessesDto extends AdZoneAccessSearchModel {
	}
	/**
	 * Use to get a list of ad zones
	 * @see {@link AdZoneSearchModel}
	 * @public
	 */
	export interface GetAdZonesDto extends AdZoneSearchModel {
	}
	/**
	 * Use to get a list of zones
	 * @see {@link ZoneSearchModel}
	 * @public
	 */
	export interface GetZonesDto extends ZoneSearchModel {
	}
	/**
	 * Use to get a list of zone statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetZoneStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of zone types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetZoneTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing ad.
	 * @see {@link AdModel}
	 * @public
	 */
	export interface UpdateAdDto extends AdModel {
	}
	/**
	 * Use to update an existing ad account.
	 * @see {@link AdAccountModel}
	 * @public
	 */
	export interface UpdateAdAccountDto extends AdAccountModel {
	}
	/**
	 * Use to update an existing ad brand.
	 * @see {@link AdBrandModel}
	 * @public
	 */
	export interface UpdateAdBrandDto extends AdBrandModel {
	}
	/**
	 * Use to update an existing ad franchise.
	 * @see {@link AdFranchiseModel}
	 * @public
	 */
	export interface UpdateAdFranchiseDto extends AdFranchiseModel {
	}
	/**
	 * Use to update an existing ad image.
	 * @see {@link AdImageModel}
	 * @public
	 */
	export interface UpdateAdImageDto extends AdImageModel {
	}
	/**
	 * Use to update an existing ad image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAdImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing ad status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateAdStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing ad store.
	 * @see {@link AdStoreModel}
	 * @public
	 */
	export interface UpdateAdStoreDto extends AdStoreModel {
	}
	/**
	 * Use to update an existing ad type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAdTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing ad zone.
	 * @see {@link AdZoneModel}
	 * @public
	 */
	export interface UpdateAdZoneDto extends AdZoneModel {
	}
	/**
	 * Use to update an existing ad zone access.
	 * @see {@link AdZoneAccessModel}
	 * @public
	 */
	export interface UpdateAdZoneAccessDto extends AdZoneAccessModel {
	}
	/**
	 * Use to update an existing zone.
	 * @see {@link ZoneModel}
	 * @public
	 */
	export interface UpdateZoneDto extends ZoneModel {
	}
	/**
	 * Use to update an existing zone status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateZoneStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing zone type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateZoneTypeDto extends TypeModel {
	}

	export class Advertising extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all ad account calls.
		 * @param {@link cef.admin.api.ClearAdAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdAccountCache
		 * @path <API Root>/Advertising/AdAccount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdAccount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad brand calls.
		 * @param {@link cef.admin.api.ClearAdBrandCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdBrandCache
		 * @path <API Root>/Advertising/AdBrand/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdBrandCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdBrand", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad calls.
		 * @param {@link cef.admin.api.ClearAdCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdCache
		 * @path <API Root>/Advertising/Ad/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "Ad", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad franchise calls.
		 * @param {@link cef.admin.api.ClearAdFranchiseCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdFranchiseCache
		 * @path <API Root>/Advertising/AdFranchise/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdFranchiseCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdFranchise", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad image calls.
		 * @param {@link cef.admin.api.ClearAdImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdImageCache
		 * @path <API Root>/Advertising/AdImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad image type calls.
		 * @param {@link cef.admin.api.ClearAdImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdImageTypeCache
		 * @path <API Root>/Advertising/AdImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad status calls.
		 * @param {@link cef.admin.api.ClearAdStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdStatusCache
		 * @path <API Root>/Advertising/AdStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad store calls.
		 * @param {@link cef.admin.api.ClearAdStoreCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdStoreCache
		 * @path <API Root>/Advertising/AdStore/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdStoreCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdStore", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad type calls.
		 * @param {@link cef.admin.api.ClearAdTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdTypeCache
		 * @path <API Root>/Advertising/AdType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad zone access calls.
		 * @param {@link cef.admin.api.ClearAdZoneAccessCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdZoneAccessCache
		 * @path <API Root>/Advertising/AdZoneAccess/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdZoneAccessCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdZoneAccess", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ad zone calls.
		 * @param {@link cef.admin.api.ClearAdZoneCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAdZoneCache
		 * @path <API Root>/Advertising/AdZone/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAdZoneCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "AdZone", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all zone calls.
		 * @param {@link cef.admin.api.ClearZoneCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearZoneCache
		 * @path <API Root>/Advertising/Zone/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearZoneCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "Zone", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all zone status calls.
		 * @param {@link cef.admin.api.ClearZoneStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearZoneStatusCache
		 * @path <API Root>/Advertising/ZoneStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearZoneStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "ZoneStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all zone type calls.
		 * @param {@link cef.admin.api.ClearZoneTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearZoneTypeCache
		 * @path <API Root>/Advertising/ZoneType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearZoneTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Advertising", "ZoneType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new ad.
		 * @param {@link cef.admin.api.CreateAdDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAd
		 * @path <API Root>/Advertising/Ad/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAd = (routeParams?: CreateAdDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "Ad", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad account.
		 * @param {@link cef.admin.api.CreateAdAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdAccount
		 * @path <API Root>/Advertising/AdAccount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdAccount = (routeParams?: CreateAdAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdAccount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad brand.
		 * @param {@link cef.admin.api.CreateAdBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdBrand
		 * @path <API Root>/Advertising/AdBrand/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdBrand = (routeParams?: CreateAdBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdBrand", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad franchise.
		 * @param {@link cef.admin.api.CreateAdFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdFranchise
		 * @path <API Root>/Advertising/AdFranchise/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdFranchise = (routeParams?: CreateAdFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdFranchise", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad image.
		 * @param {@link cef.admin.api.CreateAdImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdImage
		 * @path <API Root>/Advertising/AdImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdImage = (routeParams?: CreateAdImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad image type.
		 * @param {@link cef.admin.api.CreateAdImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdImageType
		 * @path <API Root>/Advertising/AdImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdImageType = (routeParams?: CreateAdImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad status.
		 * @param {@link cef.admin.api.CreateAdStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdStatus
		 * @path <API Root>/Advertising/AdStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdStatus = (routeParams?: CreateAdStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad store.
		 * @param {@link cef.admin.api.CreateAdStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdStore
		 * @path <API Root>/Advertising/AdStore/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdStore = (routeParams?: CreateAdStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdStore", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad type.
		 * @param {@link cef.admin.api.CreateAdTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdType
		 * @path <API Root>/Advertising/AdType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdType = (routeParams?: CreateAdTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad zone.
		 * @param {@link cef.admin.api.CreateAdZoneDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdZone
		 * @path <API Root>/Advertising/AdZone/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdZone = (routeParams?: CreateAdZoneDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdZone", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ad zone access.
		 * @param {@link cef.admin.api.CreateAdZoneAccessDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAdZoneAccess
		 * @path <API Root>/Advertising/AdZoneAccess/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAdZoneAccess = (routeParams?: CreateAdZoneAccessDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdZoneAccess", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new zone.
		 * @param {@link cef.admin.api.CreateZoneDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateZone
		 * @path <API Root>/Advertising/Zone/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateZone = (routeParams?: CreateZoneDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "Zone", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new zone status.
		 * @param {@link cef.admin.api.CreateZoneStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateZoneStatus
		 * @path <API Root>/Advertising/ZoneStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateZoneStatus = (routeParams?: CreateZoneStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "ZoneStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new zone type.
		 * @param {@link cef.admin.api.CreateZoneTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateZoneType
		 * @path <API Root>/Advertising/ZoneType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateZoneType = (routeParams?: CreateZoneTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "ZoneType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific ad account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdAccountByID
		 * @path <API Root>/Advertising/AdAccount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdAccount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad brand from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdBrandByID
		 * @path <API Root>/Advertising/AdBrand/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdBrand", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdByID
		 * @path <API Root>/Advertising/Ad/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "Ad", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad franchise from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdFranchiseByID
		 * @path <API Root>/Advertising/AdFranchise/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdFranchise", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdImageByID
		 * @path <API Root>/Advertising/AdImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdImageTypeByID
		 * @path <API Root>/Advertising/AdImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdStatusByID
		 * @path <API Root>/Advertising/AdStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad store from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdStoreByID
		 * @path <API Root>/Advertising/AdStore/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdStore", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdTypeByID
		 * @path <API Root>/Advertising/AdType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad zone access from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdZoneAccessByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdZoneAccessByID
		 * @path <API Root>/Advertising/AdZoneAccess/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdZoneAccessByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdZoneAccess", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ad zone from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAdZoneByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAdZoneByID
		 * @path <API Root>/Advertising/AdZone/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAdZoneByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdZone", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific zone from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateZoneByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateZoneByID
		 * @path <API Root>/Advertising/Zone/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateZoneByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "Zone", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific zone status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateZoneStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateZoneStatusByID
		 * @path <API Root>/Advertising/ZoneStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateZoneStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "ZoneStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific zone type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateZoneTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateZoneTypeByID
		 * @path <API Root>/Advertising/ZoneType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateZoneTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "ZoneType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific ad account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdAccountByID
		 * @path <API Root>/Advertising/AdAccount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdAccount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad brand from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdBrandByID
		 * @path <API Root>/Advertising/AdBrand/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdBrand", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdByID
		 * @path <API Root>/Advertising/Ad/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "Ad", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad franchise from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdFranchiseByID
		 * @path <API Root>/Advertising/AdFranchise/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdFranchise", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdImageByID
		 * @path <API Root>/Advertising/AdImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdImageTypeByID
		 * @path <API Root>/Advertising/AdImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdStatusByID
		 * @path <API Root>/Advertising/AdStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad store from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdStoreByID
		 * @path <API Root>/Advertising/AdStore/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdStore", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdTypeByID
		 * @path <API Root>/Advertising/AdType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad zone access from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdZoneAccessByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdZoneAccessByID
		 * @path <API Root>/Advertising/AdZoneAccess/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdZoneAccessByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdZoneAccess", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ad zone from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAdZoneByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAdZoneByID
		 * @path <API Root>/Advertising/AdZone/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAdZoneByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdZone", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific zone from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteZoneByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteZoneByID
		 * @path <API Root>/Advertising/Zone/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteZoneByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "Zone", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific zone status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteZoneStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteZoneStatusByID
		 * @path <API Root>/Advertising/ZoneStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteZoneStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "ZoneStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific zone type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteZoneTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteZoneTypeByID
		 * @path <API Root>/Advertising/ZoneType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteZoneTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "ZoneType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific ad account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdAccountByID
		 * @path <API Root>/Advertising/AdAccount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdAccountModel>}
		 * @public
		 */
		GetAdAccountByID = (id: number) => this.$http<AdAccountModel>({
			url: [this.rootUrl, "Advertising", "AdAccount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdAccounts
		 * @path <API Root>/Advertising/AdAccounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdAccountPagedResults>}
		 * @public
		 */
		GetAdAccounts = (routeParams?: GetAdAccountsDto) => this.$http<AdAccountPagedResults>({
			url: [this.rootUrl, "Advertising", "AdAccounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad brand
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdBrandByID
		 * @path <API Root>/Advertising/AdBrand/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdBrandModel>}
		 * @public
		 */
		GetAdBrandByID = (id: number) => this.$http<AdBrandModel>({
			url: [this.rootUrl, "Advertising", "AdBrand", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad brands
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdBrands
		 * @path <API Root>/Advertising/AdBrands
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdBrandPagedResults>}
		 * @public
		 */
		GetAdBrands = (routeParams?: GetAdBrandsDto) => this.$http<AdBrandPagedResults>({
			url: [this.rootUrl, "Advertising", "AdBrands"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdByID
		 * @path <API Root>/Advertising/Ad/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdModel>}
		 * @public
		 */
		GetAdByID = (id: number) => this.$http<AdModel>({
			url: [this.rootUrl, "Advertising", "Ad", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific ad franchise
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdFranchiseByID
		 * @path <API Root>/Advertising/AdFranchise/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdFranchiseModel>}
		 * @public
		 */
		GetAdFranchiseByID = (id: number) => this.$http<AdFranchiseModel>({
			url: [this.rootUrl, "Advertising", "AdFranchise", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad franchises
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdFranchises
		 * @path <API Root>/Advertising/AdFranchises
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdFranchisePagedResults>}
		 * @public
		 */
		GetAdFranchises = (routeParams?: GetAdFranchisesDto) => this.$http<AdFranchisePagedResults>({
			url: [this.rootUrl, "Advertising", "AdFranchises"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdImageByID
		 * @path <API Root>/Advertising/AdImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdImageModel>}
		 * @public
		 */
		GetAdImageByID = (id: number) => this.$http<AdImageModel>({
			url: [this.rootUrl, "Advertising", "AdImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdImages
		 * @path <API Root>/Advertising/AdImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdImagePagedResults>}
		 * @public
		 */
		GetAdImages = (routeParams?: GetAdImagesDto) => this.$http<AdImagePagedResults>({
			url: [this.rootUrl, "Advertising", "AdImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdImageTypeByID
		 * @path <API Root>/Advertising/AdImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAdImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Advertising", "AdImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdImageTypes
		 * @path <API Root>/Advertising/AdImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdImageTypePagedResults>}
		 * @public
		 */
		GetAdImageTypes = (routeParams?: GetAdImageTypesDto) => this.$http<AdImageTypePagedResults>({
			url: [this.rootUrl, "Advertising", "AdImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of ads
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAds
		 * @path <API Root>/Advertising/Ads
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdPagedResults>}
		 * @public
		 */
		GetAds = (routeParams?: GetAdsDto) => this.$http<AdPagedResults>({
			url: [this.rootUrl, "Advertising", "Ads"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdStatusByID
		 * @path <API Root>/Advertising/AdStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetAdStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Advertising", "AdStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdStatuses
		 * @path <API Root>/Advertising/AdStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdStatusPagedResults>}
		 * @public
		 */
		GetAdStatuses = (routeParams?: GetAdStatusesDto) => this.$http<AdStatusPagedResults>({
			url: [this.rootUrl, "Advertising", "AdStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdStoreByID
		 * @path <API Root>/Advertising/AdStore/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdStoreModel>}
		 * @public
		 */
		GetAdStoreByID = (id: number) => this.$http<AdStoreModel>({
			url: [this.rootUrl, "Advertising", "AdStore", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad stores
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdStores
		 * @path <API Root>/Advertising/AdStores
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdStorePagedResults>}
		 * @public
		 */
		GetAdStores = (routeParams?: GetAdStoresDto) => this.$http<AdStorePagedResults>({
			url: [this.rootUrl, "Advertising", "AdStores"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdTypeByID
		 * @path <API Root>/Advertising/AdType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAdTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Advertising", "AdType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdTypes
		 * @path <API Root>/Advertising/AdTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdTypePagedResults>}
		 * @public
		 */
		GetAdTypes = (routeParams?: GetAdTypesDto) => this.$http<AdTypePagedResults>({
			url: [this.rootUrl, "Advertising", "AdTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad zone access
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdZoneAccessByID
		 * @path <API Root>/Advertising/AdZoneAccess/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdZoneAccessModel>}
		 * @public
		 */
		GetAdZoneAccessByID = (id: number) => this.$http<AdZoneAccessModel>({
			url: [this.rootUrl, "Advertising", "AdZoneAccess", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad zone accesses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdZoneAccesses
		 * @path <API Root>/Advertising/AdZoneAccesses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdZoneAccessPagedResults>}
		 * @public
		 */
		GetAdZoneAccesses = (routeParams?: GetAdZoneAccessesDto) => this.$http<AdZoneAccessPagedResults>({
			url: [this.rootUrl, "Advertising", "AdZoneAccesses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ad zone
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdZoneByID
		 * @path <API Root>/Advertising/AdZone/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdZoneModel>}
		 * @public
		 */
		GetAdZoneByID = (id: number) => this.$http<AdZoneModel>({
			url: [this.rootUrl, "Advertising", "AdZone", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ad zones
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAdZones
		 * @path <API Root>/Advertising/AdZones
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AdZonePagedResults>}
		 * @public
		 */
		GetAdZones = (routeParams?: GetAdZonesDto) => this.$http<AdZonePagedResults>({
			url: [this.rootUrl, "Advertising", "AdZones"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific zone
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZoneByID
		 * @path <API Root>/Advertising/Zone/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ZoneModel>}
		 * @public
		 */
		GetZoneByID = (id: number) => this.$http<ZoneModel>({
			url: [this.rootUrl, "Advertising", "Zone", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of zones
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZones
		 * @path <API Root>/Advertising/Zones
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ZonePagedResults>}
		 * @public
		 */
		GetZones = (routeParams?: GetZonesDto) => this.$http<ZonePagedResults>({
			url: [this.rootUrl, "Advertising", "Zones"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific zone status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZoneStatusByID
		 * @path <API Root>/Advertising/ZoneStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetZoneStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Advertising", "ZoneStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of zone statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZoneStatuses
		 * @path <API Root>/Advertising/ZoneStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ZoneStatusPagedResults>}
		 * @public
		 */
		GetZoneStatuses = (routeParams?: GetZoneStatusesDto) => this.$http<ZoneStatusPagedResults>({
			url: [this.rootUrl, "Advertising", "ZoneStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific zone type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZoneTypeByID
		 * @path <API Root>/Advertising/ZoneType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetZoneTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Advertising", "ZoneType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of zone types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetZoneTypes
		 * @path <API Root>/Advertising/ZoneTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ZoneTypePagedResults>}
		 * @public
		 */
		GetZoneTypes = (routeParams?: GetZoneTypesDto) => this.$http<ZoneTypePagedResults>({
			url: [this.rootUrl, "Advertising", "ZoneTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific ad account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdAccountByID
		 * @path <API Root>/Advertising/AdAccount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdAccount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad brand from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdBrandByID
		 * @path <API Root>/Advertising/AdBrand/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdBrand", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdByID
		 * @path <API Root>/Advertising/Ad/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "Ad", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad franchise from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdFranchiseByID
		 * @path <API Root>/Advertising/AdFranchise/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdFranchise", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdImageByID
		 * @path <API Root>/Advertising/AdImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdImageTypeByID
		 * @path <API Root>/Advertising/AdImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdStatusByID
		 * @path <API Root>/Advertising/AdStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad store from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdStoreByID
		 * @path <API Root>/Advertising/AdStore/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdStore", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdTypeByID
		 * @path <API Root>/Advertising/AdType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad zone access from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdZoneAccessByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdZoneAccessByID
		 * @path <API Root>/Advertising/AdZoneAccess/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdZoneAccessByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdZoneAccess", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ad zone from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAdZoneByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAdZoneByID
		 * @path <API Root>/Advertising/AdZone/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAdZoneByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "AdZone", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific zone from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateZoneByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateZoneByID
		 * @path <API Root>/Advertising/Zone/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateZoneByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "Zone", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific zone status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateZoneStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateZoneStatusByID
		 * @path <API Root>/Advertising/ZoneStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateZoneStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "ZoneStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific zone type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateZoneTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateZoneTypeByID
		 * @path <API Root>/Advertising/ZoneType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateZoneTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Advertising", "ZoneType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing ad.
		 * @param {@link cef.admin.api.UpdateAdDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAd
		 * @path <API Root>/Advertising/Ad/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAd = (routeParams?: UpdateAdDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "Ad", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad account.
		 * @param {@link cef.admin.api.UpdateAdAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdAccount
		 * @path <API Root>/Advertising/AdAccount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdAccount = (routeParams?: UpdateAdAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdAccount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad brand.
		 * @param {@link cef.admin.api.UpdateAdBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdBrand
		 * @path <API Root>/Advertising/AdBrand/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdBrand = (routeParams?: UpdateAdBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdBrand", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad franchise.
		 * @param {@link cef.admin.api.UpdateAdFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdFranchise
		 * @path <API Root>/Advertising/AdFranchise/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdFranchise = (routeParams?: UpdateAdFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdFranchise", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad image.
		 * @param {@link cef.admin.api.UpdateAdImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdImage
		 * @path <API Root>/Advertising/AdImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdImage = (routeParams?: UpdateAdImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad image type.
		 * @param {@link cef.admin.api.UpdateAdImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdImageType
		 * @path <API Root>/Advertising/AdImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdImageType = (routeParams?: UpdateAdImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad status.
		 * @param {@link cef.admin.api.UpdateAdStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdStatus
		 * @path <API Root>/Advertising/AdStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdStatus = (routeParams?: UpdateAdStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad store.
		 * @param {@link cef.admin.api.UpdateAdStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdStore
		 * @path <API Root>/Advertising/AdStore/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdStore = (routeParams?: UpdateAdStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdStore", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad type.
		 * @param {@link cef.admin.api.UpdateAdTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdType
		 * @path <API Root>/Advertising/AdType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdType = (routeParams?: UpdateAdTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad zone.
		 * @param {@link cef.admin.api.UpdateAdZoneDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdZone
		 * @path <API Root>/Advertising/AdZone/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdZone = (routeParams?: UpdateAdZoneDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdZone", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ad zone access.
		 * @param {@link cef.admin.api.UpdateAdZoneAccessDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAdZoneAccess
		 * @path <API Root>/Advertising/AdZoneAccess/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAdZoneAccess = (routeParams?: UpdateAdZoneAccessDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "AdZoneAccess", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing zone.
		 * @param {@link cef.admin.api.UpdateZoneDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateZone
		 * @path <API Root>/Advertising/Zone/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateZone = (routeParams?: UpdateZoneDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "Zone", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing zone status.
		 * @param {@link cef.admin.api.UpdateZoneStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateZoneStatus
		 * @path <API Root>/Advertising/ZoneStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateZoneStatus = (routeParams?: UpdateZoneStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "ZoneStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing zone type.
		 * @param {@link cef.admin.api.UpdateZoneTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateZoneType
		 * @path <API Root>/Advertising/ZoneType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateZoneType = (routeParams?: UpdateZoneTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Advertising", "ZoneType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
