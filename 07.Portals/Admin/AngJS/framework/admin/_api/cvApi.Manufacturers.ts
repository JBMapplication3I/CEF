/**
 * @file framework/admin/_api/cvApi.Manufacturers.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new manufacturer.
	 * @see {@link ManufacturerModel}
	 * @public
	 */
	export interface CreateManufacturerDto extends ManufacturerModel {
	}
	/**
	 * Use to create a new manufacturer image.
	 * @see {@link ManufacturerImageModel}
	 * @public
	 */
	export interface CreateManufacturerImageDto extends ManufacturerImageModel {
	}
	/**
	 * Use to create a new manufacturer image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateManufacturerImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new manufacturer product.
	 * @see {@link ManufacturerProductModel}
	 * @public
	 */
	export interface CreateManufacturerProductDto extends ManufacturerProductModel {
	}
	/**
	 * Use to create a new manufacturer type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateManufacturerTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of manufacturer images
	 * @see {@link ManufacturerImageSearchModel}
	 * @public
	 */
	export interface GetManufacturerImagesDto extends ManufacturerImageSearchModel {
	}
	/**
	 * Use to get a list of manufacturer image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetManufacturerImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of manufacturer products
	 * @see {@link ManufacturerProductSearchModel}
	 * @public
	 */
	export interface GetManufacturerProductsDto extends ManufacturerProductSearchModel {
	}
	/**
	 * Use to get a list of manufacturers
	 * @see {@link ManufacturerSearchModel}
	 * @public
	 */
	export interface GetManufacturersDto extends ManufacturerSearchModel {
	}
	/**
	 * Use to get a list of manufacturer types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetManufacturerTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing manufacturer.
	 * @see {@link ManufacturerModel}
	 * @public
	 */
	export interface UpdateManufacturerDto extends ManufacturerModel {
	}
	/**
	 * Use to update an existing manufacturer image.
	 * @see {@link ManufacturerImageModel}
	 * @public
	 */
	export interface UpdateManufacturerImageDto extends ManufacturerImageModel {
	}
	/**
	 * Use to update an existing manufacturer image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateManufacturerImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing manufacturer product.
	 * @see {@link ManufacturerProductModel}
	 * @public
	 */
	export interface UpdateManufacturerProductDto extends ManufacturerProductModel {
	}
	/**
	 * Use to update an existing manufacturer type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateManufacturerTypeDto extends TypeModel {
	}

	export class Manufacturers extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all manufacturer calls.
		 * @param {@link cef.admin.api.ClearManufacturerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearManufacturerCache
		 * @path <API Root>/Manufacturers/Manufacturer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearManufacturerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Manufacturers", "Manufacturer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all manufacturer image calls.
		 * @param {@link cef.admin.api.ClearManufacturerImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearManufacturerImageCache
		 * @path <API Root>/Manufacturers/ManufacturerImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearManufacturerImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all manufacturer image type calls.
		 * @param {@link cef.admin.api.ClearManufacturerImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearManufacturerImageTypeCache
		 * @path <API Root>/Manufacturers/ManufacturerImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearManufacturerImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all manufacturer product calls.
		 * @param {@link cef.admin.api.ClearManufacturerProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearManufacturerProductCache
		 * @path <API Root>/Manufacturers/ManufacturerProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearManufacturerProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all manufacturer type calls.
		 * @param {@link cef.admin.api.ClearManufacturerTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearManufacturerTypeCache
		 * @path <API Root>/Manufacturers/ManufacturerType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearManufacturerTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new manufacturer.
		 * @param {@link cef.admin.api.CreateManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateManufacturer
		 * @path <API Root>/Manufacturers/Manufacturer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateManufacturer = (routeParams?: CreateManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "Manufacturer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new manufacturer image.
		 * @param {@link cef.admin.api.CreateManufacturerImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateManufacturerImage
		 * @path <API Root>/Manufacturers/ManufacturerImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateManufacturerImage = (routeParams?: CreateManufacturerImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new manufacturer image type.
		 * @param {@link cef.admin.api.CreateManufacturerImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateManufacturerImageType
		 * @path <API Root>/Manufacturers/ManufacturerImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateManufacturerImageType = (routeParams?: CreateManufacturerImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new manufacturer product.
		 * @param {@link cef.admin.api.CreateManufacturerProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateManufacturerProduct
		 * @path <API Root>/Manufacturers/ManufacturerProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateManufacturerProduct = (routeParams?: CreateManufacturerProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new manufacturer type.
		 * @param {@link cef.admin.api.CreateManufacturerTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateManufacturerType
		 * @path <API Root>/Manufacturers/ManufacturerType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateManufacturerType = (routeParams?: CreateManufacturerTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific manufacturer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateManufacturerByID
		 * @path <API Root>/Manufacturers/Manufacturer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "Manufacturer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific manufacturer image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateManufacturerImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateManufacturerImageByID
		 * @path <API Root>/Manufacturers/ManufacturerImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateManufacturerImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific manufacturer image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateManufacturerImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateManufacturerImageTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateManufacturerImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific manufacturer product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateManufacturerProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateManufacturerProductByID
		 * @path <API Root>/Manufacturers/ManufacturerProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateManufacturerProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific manufacturer type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateManufacturerTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateManufacturerTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateManufacturerTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific manufacturer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteManufacturerByID
		 * @path <API Root>/Manufacturers/Manufacturer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "Manufacturer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific manufacturer image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteManufacturerImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteManufacturerImageByID
		 * @path <API Root>/Manufacturers/ManufacturerImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteManufacturerImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific manufacturer image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteManufacturerImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteManufacturerImageTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteManufacturerImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific manufacturer product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteManufacturerProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteManufacturerProductByID
		 * @path <API Root>/Manufacturers/ManufacturerProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteManufacturerProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific manufacturer type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteManufacturerTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteManufacturerTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteManufacturerTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific manufacturer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerByID
		 * @path <API Root>/Manufacturers/Manufacturer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerModel>}
		 * @public
		 */
		GetManufacturerByID = (id: number) => this.$http<ManufacturerModel>({
			url: [this.rootUrl, "Manufacturers", "Manufacturer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific manufacturer image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerImageByID
		 * @path <API Root>/Manufacturers/ManufacturerImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerImageModel>}
		 * @public
		 */
		GetManufacturerImageByID = (id: number) => this.$http<ManufacturerImageModel>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of manufacturer images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerImages
		 * @path <API Root>/Manufacturers/ManufacturerImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerImagePagedResults>}
		 * @public
		 */
		GetManufacturerImages = (routeParams?: GetManufacturerImagesDto) => this.$http<ManufacturerImagePagedResults>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific manufacturer image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerImageTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetManufacturerImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of manufacturer image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerImageTypes
		 * @path <API Root>/Manufacturers/ManufacturerImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerImageTypePagedResults>}
		 * @public
		 */
		GetManufacturerImageTypes = (routeParams?: GetManufacturerImageTypesDto) => this.$http<ManufacturerImageTypePagedResults>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific manufacturer product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerProductByID
		 * @path <API Root>/Manufacturers/ManufacturerProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerProductModel>}
		 * @public
		 */
		GetManufacturerProductByID = (id: number) => this.$http<ManufacturerProductModel>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of manufacturer products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerProducts
		 * @path <API Root>/Manufacturers/ManufacturerProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerProductPagedResults>}
		 * @public
		 */
		GetManufacturerProducts = (routeParams?: GetManufacturerProductsDto) => this.$http<ManufacturerProductPagedResults>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of manufacturers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturers
		 * @path <API Root>/Manufacturers/Manufacturers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerPagedResults>}
		 * @public
		 */
		GetManufacturers = (routeParams?: GetManufacturersDto) => this.$http<ManufacturerPagedResults>({
			url: [this.rootUrl, "Manufacturers", "Manufacturers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific manufacturer type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetManufacturerTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of manufacturer types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetManufacturerTypes
		 * @path <API Root>/Manufacturers/ManufacturerTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ManufacturerTypePagedResults>}
		 * @public
		 */
		GetManufacturerTypes = (routeParams?: GetManufacturerTypesDto) => this.$http<ManufacturerTypePagedResults>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific manufacturer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateManufacturerByID
		 * @path <API Root>/Manufacturers/Manufacturer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "Manufacturer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific manufacturer image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateManufacturerImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateManufacturerImageByID
		 * @path <API Root>/Manufacturers/ManufacturerImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateManufacturerImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific manufacturer image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateManufacturerImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateManufacturerImageTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateManufacturerImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific manufacturer product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateManufacturerProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateManufacturerProductByID
		 * @path <API Root>/Manufacturers/ManufacturerProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateManufacturerProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific manufacturer type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateManufacturerTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateManufacturerTypeByID
		 * @path <API Root>/Manufacturers/ManufacturerType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateManufacturerTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing manufacturer.
		 * @param {@link cef.admin.api.UpdateManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateManufacturer
		 * @path <API Root>/Manufacturers/Manufacturer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateManufacturer = (routeParams?: UpdateManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "Manufacturer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing manufacturer image.
		 * @param {@link cef.admin.api.UpdateManufacturerImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateManufacturerImage
		 * @path <API Root>/Manufacturers/ManufacturerImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateManufacturerImage = (routeParams?: UpdateManufacturerImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing manufacturer image type.
		 * @param {@link cef.admin.api.UpdateManufacturerImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateManufacturerImageType
		 * @path <API Root>/Manufacturers/ManufacturerImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateManufacturerImageType = (routeParams?: UpdateManufacturerImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing manufacturer product.
		 * @param {@link cef.admin.api.UpdateManufacturerProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateManufacturerProduct
		 * @path <API Root>/Manufacturers/ManufacturerProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateManufacturerProduct = (routeParams?: UpdateManufacturerProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing manufacturer type.
		 * @param {@link cef.admin.api.UpdateManufacturerTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateManufacturerType
		 * @path <API Root>/Manufacturers/ManufacturerType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateManufacturerType = (routeParams?: UpdateManufacturerTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Manufacturers", "ManufacturerType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
