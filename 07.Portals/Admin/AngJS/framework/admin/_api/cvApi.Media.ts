/**
 * @file framework/admin/_api/cvApi.Media.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new stored file.
	 * @see {@link StoredFileModel}
	 * @public
	 */
	export interface CreateStoredFileDto extends StoredFileModel {
	}
	/**
	 * Use to get a list of stored files
	 * @see {@link StoredFileSearchModel}
	 * @public
	 */
	export interface GetStoredFilesDto extends StoredFileSearchModel {
	}
	/**
	 * FileUrl
	 * @public
	 */
	export interface GetStoredFileUrlDto {
		EntityType: FileEntityType;
		FileKey: string;
	}
	/**
	 * Use to update an existing stored file.
	 * @see {@link StoredFileModel}
	 * @public
	 */
	export interface UpdateStoredFileDto extends StoredFileModel {
	}
	/**
	 * Upload stored files of any type and they will be injected with your model as you save them (e.g.- Create/Update Product, Category, etc)
	 * @public
	 */
	export interface UploadStoredFileDto {
		EntityFileType: FileEntityType;
		Name?: string;
		Async: boolean;
	}

	export class Media extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all stored file calls.
		 * @param {@link cef.admin.api.ClearStoredFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoredFileCache
		 * @path <API Root>/Media/StoredFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoredFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Media", "StoredFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new stored file.
		 * @param {@link cef.admin.api.CreateStoredFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoredFile
		 * @path <API Root>/Media/StoredFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoredFile = (routeParams?: CreateStoredFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Media", "StoredFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific stored file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoredFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoredFileByID
		 * @path <API Root>/Media/StoredFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoredFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Media", "StoredFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific stored file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoredFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoredFileByID
		 * @path <API Root>/Media/StoredFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoredFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Media", "StoredFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific stored file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoredFileByID
		 * @path <API Root>/Media/StoredFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoredFileModel>}
		 * @public
		 */
		GetStoredFileByID = (id: number) => this.$http<StoredFileModel>({
			url: [this.rootUrl, "Media", "StoredFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of stored files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoredFiles
		 * @path <API Root>/Media/StoredFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoredFilePagedResults>}
		 * @public
		 */
		GetStoredFiles = (routeParams?: GetStoredFilesDto) => this.$http<StoredFilePagedResults>({
			url: [this.rootUrl, "Media", "StoredFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * FileUrl
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoredFileUrl
		 * @path <API Root>/Media/StoredFiles/Url
		 * @verb GET
		 * @returns {ng.IHttpPromise<string>}
		 * @public
		 */
		GetStoredFileUrl = (routeParams: GetStoredFileUrlDto) => this.$http<string>({
			url: [this.rootUrl, "Media", "StoredFiles", "Url"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get Upload StoredFile Results
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUploadStoredFileResults
		 * @path <API Root>/Media/StoredFiles/UploadResults/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<IUploadResponse>}
		 * @public
		 */
		GetUploadStoredFileResults = (id: string) => this.$http<IUploadResponse>({
			url: [this.rootUrl, "Media", "StoredFiles", "UploadResults", encodeURIComponent(id)].join("/"),
			method: "GET",
		});

		/**
		 * Reactivate a specific stored file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoredFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoredFileByID
		 * @path <API Root>/Media/StoredFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoredFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Media", "StoredFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing stored file.
		 * @param {@link cef.admin.api.UpdateStoredFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoredFile
		 * @path <API Root>/Media/StoredFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoredFile = (routeParams?: UpdateStoredFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Media", "StoredFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Upload stored files of any type and they will be injected with your model as you save them (e.g.- Create/Update Product, Category, etc)
		 * @param {@link cef.admin.api.UploadStoredFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UploadStoredFile
		 * @path <API Root>/Media/StoredFiles/Upload
		 * @verb POST
		 * @returns {ng.IHttpPromise<IUploadResponse>}
		 * @public
		 */
		UploadStoredFile = (routeParams: UploadStoredFileDto) => this.$http<IUploadResponse>({
			url: [this.rootUrl, "Media", "StoredFiles", "Upload"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
