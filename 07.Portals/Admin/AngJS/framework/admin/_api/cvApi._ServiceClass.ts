/**
 * @file framework/admin/_api/cvApi._ServiceClass.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {
	/** Exposes access to the ServiceStack routes */
	export class ClarityEcomService implements IClarityEcomService {
		authentication2: Authentication2;
		accounts : Accounts;
		advertising : Advertising;
		attributes : Attributes;
		auctions : Auctions;
		authentication : Authentication;
		badges : Badges;
		brands : Brands;
		calendarEvents : CalendarEvents;
		categories : Categories;
		contacts : Contacts;
		counters : Counters;
		currencies : Currencies;
		discounts : Discounts;
		favorites : Favorites;
		franchises : Franchises;
		geography : Geography;
		globalization : Globalization;
		groups : Groups;
		hangfire : Hangfire;
		inventory : Inventory;
		invoicing : Invoicing;
		jsConfigs : JSConfigs;
		manufacturers : Manufacturers;
		media : Media;
		messaging : Messaging;
		ordering : Ordering;
		payments : Payments;
		pricing : Pricing;
		products : Products;
		providers : Providers;
		purchasing : Purchasing;
		questionnaire : Questionnaire;
		quoting : Quoting;
		reporting : Reporting;
		returning : Returning;
		reviews : Reviews;
		sales : Sales;
		sampling : Sampling;
		scheduling : Scheduling;
		scouting : Scouting;
		shipping : Shipping;
		shopping : Shopping;
		stores : Stores;
		structure : Structure;
		tasks : Tasks;
		tax : Tax;
		tracking : Tracking;
		vendors : Vendors;
		
		constructor($http: ng.IHttpService, rootUrl: string) {
			this._$http = $http;
			this.rootUrl = rootUrl;
			this.authentication2 = new Authentication2(this);
			this.accounts = new Accounts(this);
			this.advertising = new Advertising(this);
			this.attributes = new Attributes(this);
			this.auctions = new Auctions(this);
			this.authentication = new Authentication(this);
			this.badges = new Badges(this);
			this.brands = new Brands(this);
			this.calendarEvents = new CalendarEvents(this);
			this.categories = new Categories(this);
			this.contacts = new Contacts(this);
			this.counters = new Counters(this);
			this.currencies = new Currencies(this);
			this.discounts = new Discounts(this);
			this.favorites = new Favorites(this);
			this.franchises = new Franchises(this);
			this.geography = new Geography(this);
			this.globalization = new Globalization(this);
			this.groups = new Groups(this);
			this.hangfire = new Hangfire(this);
			this.inventory = new Inventory(this);
			this.invoicing = new Invoicing(this);
			this.jsConfigs = new JSConfigs(this);
			this.manufacturers = new Manufacturers(this);
			this.media = new Media(this);
			this.messaging = new Messaging(this);
			this.ordering = new Ordering(this);
			this.payments = new Payments(this);
			this.pricing = new Pricing(this);
			this.products = new Products(this);
			this.providers = new Providers(this);
			this.purchasing = new Purchasing(this);
			this.questionnaire = new Questionnaire(this);
			this.quoting = new Quoting(this);
			this.reporting = new Reporting(this);
			this.returning = new Returning(this);
			this.reviews = new Reviews(this);
			this.sales = new Sales(this);
			this.sampling = new Sampling(this);
			this.scheduling = new Scheduling(this);
			this.scouting = new Scouting(this);
			this.shipping = new Shipping(this);
			this.shopping = new Shopping(this);
			this.stores = new Stores(this);
			this.structure = new Structure(this);
			this.tasks = new Tasks(this);
			this.tax = new Tax(this);
			this.tracking = new Tracking(this);
			this.vendors = new Vendors(this);
		}

		private _$http: ng.IHttpService;
		get $http(): ng.IHttpService { return this._$http; }
		private _rootUrl: string;
		set rootUrl(value) { this._rootUrl = value; }
		get rootUrl():string {
			// Remove trailing slash from URL if present
			return this._rootUrl.substr(-1) !== "/"
				? this._rootUrl
				: this._rootUrl.substr(0, this._rootUrl.length - 1);
		}
	}
}
