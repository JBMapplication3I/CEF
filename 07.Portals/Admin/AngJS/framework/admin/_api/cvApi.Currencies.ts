/**
 * @file framework/admin/_api/cvApi.Currencies.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Convert a decimal value from one currency to another
	 * @public
	 */
	export interface ConvertCurrencyValueAtoBDto {
		/** The decimal value to convert */
		Value: number;
		/** The key of the starting currency (convert from) */
		KeyA: string;
		/** The key of the currency to convert to */
		KeyB: string;
	}
	/**
	 * Use to create a new currency.
	 * @see {@link CurrencyModel}
	 * @public
	 */
	export interface CreateCurrencyDto extends CurrencyModel {
	}
	/**
	 * Use to create a new currency conversion.
	 * @see {@link CurrencyConversionModel}
	 * @public
	 */
	export interface CreateCurrencyConversionDto extends CurrencyConversionModel {
	}
	/**
	 * Use to create a new currency image.
	 * @see {@link CurrencyImageModel}
	 * @public
	 */
	export interface CreateCurrencyImageDto extends CurrencyImageModel {
	}
	/**
	 * Use to create a new currency image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCurrencyImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new historical currency rate.
	 * @see {@link HistoricalCurrencyRateModel}
	 * @public
	 */
	export interface CreateHistoricalCurrencyRateDto extends HistoricalCurrencyRateModel {
	}
	/**
	 * Use to get a list of currencies
	 * @see {@link CurrencySearchModel}
	 * @public
	 */
	export interface GetCurrenciesDto extends CurrencySearchModel {
	}
	/**
	 * Use to get a list of currency conversions
	 * @see {@link CurrencyConversionSearchModel}
	 * @public
	 */
	export interface GetCurrencyConversionsDto extends CurrencyConversionSearchModel {
	}
	/**
	 * Use to get a list of currency images
	 * @see {@link CurrencyImageSearchModel}
	 * @public
	 */
	export interface GetCurrencyImagesDto extends CurrencyImageSearchModel {
	}
	/**
	 * Use to get a list of currency image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCurrencyImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of historical currency rates
	 * @see {@link HistoricalCurrencyRateSearchModel}
	 * @public
	 */
	export interface GetHistoricalCurrencyRatesDto extends HistoricalCurrencyRateSearchModel {
	}
	/**
	 * Use to update an existing currency.
	 * @see {@link CurrencyModel}
	 * @public
	 */
	export interface UpdateCurrencyDto extends CurrencyModel {
	}
	/**
	 * Use to update an existing currency conversion.
	 * @see {@link CurrencyConversionModel}
	 * @public
	 */
	export interface UpdateCurrencyConversionDto extends CurrencyConversionModel {
	}
	/**
	 * Use to update an existing currency image.
	 * @see {@link CurrencyImageModel}
	 * @public
	 */
	export interface UpdateCurrencyImageDto extends CurrencyImageModel {
	}
	/**
	 * Use to update an existing currency image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCurrencyImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing historical currency rate.
	 * @see {@link HistoricalCurrencyRateModel}
	 * @public
	 */
	export interface UpdateHistoricalCurrencyRateDto extends HistoricalCurrencyRateModel {
	}

	export class Currencies extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all currency calls.
		 * @param {@link cef.admin.api.ClearCurrencyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrencyCache
		 * @path <API Root>/Currencies/Currency/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCurrencyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Currencies", "Currency", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all currency conversion calls.
		 * @param {@link cef.admin.api.ClearCurrencyConversionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrencyConversionCache
		 * @path <API Root>/Currencies/CurrencyConversion/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCurrencyConversionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Currencies", "CurrencyConversion", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all currency image calls.
		 * @param {@link cef.admin.api.ClearCurrencyImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrencyImageCache
		 * @path <API Root>/Currencies/CurrencyImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCurrencyImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Currencies", "CurrencyImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all currency image type calls.
		 * @param {@link cef.admin.api.ClearCurrencyImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrencyImageTypeCache
		 * @path <API Root>/Currencies/CurrencyImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCurrencyImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Currencies", "CurrencyImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all historical currency rate calls.
		 * @param {@link cef.admin.api.ClearHistoricalCurrencyRateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearHistoricalCurrencyRateCache
		 * @path <API Root>/Currencies/HistoricalCurrencyRate/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearHistoricalCurrencyRateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRate", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Convert a decimal value from one currency to another
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ConvertCurrencyValueAtoB
		 * @path <API Root>/Currencies/Convert
		 * @verb GET
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		ConvertCurrencyValueAtoB = (routeParams: ConvertCurrencyValueAtoBDto) => this.$http<number>({
			url: [this.rootUrl, "Currencies", "Convert"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to create a new currency.
		 * @param {@link cef.admin.api.CreateCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCurrency
		 * @path <API Root>/Currencies/Currency/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCurrency = (routeParams?: CreateCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "Currency", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new currency conversion.
		 * @param {@link cef.admin.api.CreateCurrencyConversionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCurrencyConversion
		 * @path <API Root>/Currencies/CurrencyConversion/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCurrencyConversion = (routeParams?: CreateCurrencyConversionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "CurrencyConversion", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new currency image.
		 * @param {@link cef.admin.api.CreateCurrencyImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCurrencyImage
		 * @path <API Root>/Currencies/CurrencyImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCurrencyImage = (routeParams?: CreateCurrencyImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "CurrencyImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new currency image type.
		 * @param {@link cef.admin.api.CreateCurrencyImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCurrencyImageType
		 * @path <API Root>/Currencies/CurrencyImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCurrencyImageType = (routeParams?: CreateCurrencyImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "CurrencyImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new historical currency rate.
		 * @param {@link cef.admin.api.CreateHistoricalCurrencyRateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateHistoricalCurrencyRate
		 * @path <API Root>/Currencies/HistoricalCurrencyRate/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateHistoricalCurrencyRate = (routeParams?: CreateHistoricalCurrencyRateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRate", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific currency from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCurrencyByID
		 * @path <API Root>/Currencies/Currency/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "Currency", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific currency conversion from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCurrencyConversionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCurrencyConversionByID
		 * @path <API Root>/Currencies/CurrencyConversion/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCurrencyConversionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyConversion", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific currency image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCurrencyImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCurrencyImageByID
		 * @path <API Root>/Currencies/CurrencyImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCurrencyImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific currency image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCurrencyImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCurrencyImageTypeByID
		 * @path <API Root>/Currencies/CurrencyImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCurrencyImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific historical currency rate from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateHistoricalCurrencyRateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateHistoricalCurrencyRateByID
		 * @path <API Root>/Currencies/HistoricalCurrencyRate/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateHistoricalCurrencyRateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRate", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific currency from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCurrencyByID
		 * @path <API Root>/Currencies/Currency/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "Currency", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific currency conversion from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCurrencyConversionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCurrencyConversionByID
		 * @path <API Root>/Currencies/CurrencyConversion/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCurrencyConversionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyConversion", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific currency image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCurrencyImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCurrencyImageByID
		 * @path <API Root>/Currencies/CurrencyImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCurrencyImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific currency image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCurrencyImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCurrencyImageTypeByID
		 * @path <API Root>/Currencies/CurrencyImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCurrencyImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific historical currency rate from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteHistoricalCurrencyRateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteHistoricalCurrencyRateByID
		 * @path <API Root>/Currencies/HistoricalCurrencyRate/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteHistoricalCurrencyRateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRate", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a list of currencies
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencies
		 * @path <API Root>/Currencies/Currencies
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyPagedResults>}
		 * @public
		 */
		GetCurrencies = (routeParams?: GetCurrenciesDto) => this.$http<CurrencyPagedResults>({
			url: [this.rootUrl, "Currencies", "Currencies"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific currency
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyByID
		 * @path <API Root>/Currencies/Currency/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyModel>}
		 * @public
		 */
		GetCurrencyByID = (id: number) => this.$http<CurrencyModel>({
			url: [this.rootUrl, "Currencies", "Currency", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific currency by the custom key
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyByKey
		 * @path <API Root>/Currencies/Currency/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyModel>}
		 * @public
		 */
		GetCurrencyByKey = (key: string) => this.$http<CurrencyModel>({
			url: [this.rootUrl, "Currencies", "Currency", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific currency conversion
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyConversionByID
		 * @path <API Root>/Currencies/CurrencyConversion/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyConversionModel>}
		 * @public
		 */
		GetCurrencyConversionByID = (id: number) => this.$http<CurrencyConversionModel>({
			url: [this.rootUrl, "Currencies", "CurrencyConversion", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of currency conversions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyConversions
		 * @path <API Root>/Currencies/CurrencyConversions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyConversionPagedResults>}
		 * @public
		 */
		GetCurrencyConversions = (routeParams?: GetCurrencyConversionsDto) => this.$http<CurrencyConversionPagedResults>({
			url: [this.rootUrl, "Currencies", "CurrencyConversions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific currency image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyImageByID
		 * @path <API Root>/Currencies/CurrencyImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyImageModel>}
		 * @public
		 */
		GetCurrencyImageByID = (id: number) => this.$http<CurrencyImageModel>({
			url: [this.rootUrl, "Currencies", "CurrencyImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of currency images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyImages
		 * @path <API Root>/Currencies/CurrencyImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyImagePagedResults>}
		 * @public
		 */
		GetCurrencyImages = (routeParams?: GetCurrencyImagesDto) => this.$http<CurrencyImagePagedResults>({
			url: [this.rootUrl, "Currencies", "CurrencyImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific currency image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyImageTypeByID
		 * @path <API Root>/Currencies/CurrencyImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCurrencyImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Currencies", "CurrencyImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of currency image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrencyImageTypes
		 * @path <API Root>/Currencies/CurrencyImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CurrencyImageTypePagedResults>}
		 * @public
		 */
		GetCurrencyImageTypes = (routeParams?: GetCurrencyImageTypesDto) => this.$http<CurrencyImageTypePagedResults>({
			url: [this.rootUrl, "Currencies", "CurrencyImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific historical currency rate
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetHistoricalCurrencyRateByID
		 * @path <API Root>/Currencies/HistoricalCurrencyRate/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<HistoricalCurrencyRateModel>}
		 * @public
		 */
		GetHistoricalCurrencyRateByID = (id: number) => this.$http<HistoricalCurrencyRateModel>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRate", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of historical currency rates
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetHistoricalCurrencyRates
		 * @path <API Root>/Currencies/HistoricalCurrencyRates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<HistoricalCurrencyRatePagedResults>}
		 * @public
		 */
		GetHistoricalCurrencyRates = (routeParams?: GetHistoricalCurrencyRatesDto) => this.$http<HistoricalCurrencyRatePagedResults>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific currency from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCurrencyByID
		 * @path <API Root>/Currencies/Currency/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "Currency", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific currency conversion from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCurrencyConversionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCurrencyConversionByID
		 * @path <API Root>/Currencies/CurrencyConversion/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCurrencyConversionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyConversion", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific currency image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCurrencyImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCurrencyImageByID
		 * @path <API Root>/Currencies/CurrencyImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCurrencyImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific currency image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCurrencyImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCurrencyImageTypeByID
		 * @path <API Root>/Currencies/CurrencyImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCurrencyImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "CurrencyImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific historical currency rate from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateHistoricalCurrencyRateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateHistoricalCurrencyRateByID
		 * @path <API Root>/Currencies/HistoricalCurrencyRate/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateHistoricalCurrencyRateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRate", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing currency.
		 * @param {@link cef.admin.api.UpdateCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrency
		 * @path <API Root>/Currencies/Currency/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCurrency = (routeParams?: UpdateCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "Currency", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing currency conversion.
		 * @param {@link cef.admin.api.UpdateCurrencyConversionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrencyConversion
		 * @path <API Root>/Currencies/CurrencyConversion/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCurrencyConversion = (routeParams?: UpdateCurrencyConversionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "CurrencyConversion", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing currency image.
		 * @param {@link cef.admin.api.UpdateCurrencyImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrencyImage
		 * @path <API Root>/Currencies/CurrencyImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCurrencyImage = (routeParams?: UpdateCurrencyImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "CurrencyImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing currency image type.
		 * @param {@link cef.admin.api.UpdateCurrencyImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrencyImageType
		 * @path <API Root>/Currencies/CurrencyImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCurrencyImageType = (routeParams?: UpdateCurrencyImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "CurrencyImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing historical currency rate.
		 * @param {@link cef.admin.api.UpdateHistoricalCurrencyRateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateHistoricalCurrencyRate
		 * @path <API Root>/Currencies/HistoricalCurrencyRate/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateHistoricalCurrencyRate = (routeParams?: UpdateHistoricalCurrencyRateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Currencies", "HistoricalCurrencyRate", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
