/**
 * @file framework/admin/_api/cvApi.Shipping.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new package.
	 * @see {@link PackageModel}
	 * @public
	 */
	export interface CreatePackageDto extends PackageModel {
	}
	/**
	 * Use to create a new package type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreatePackageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new rate quote.
	 * @see {@link RateQuoteModel}
	 * @public
	 */
	export interface CreateRateQuoteDto extends RateQuoteModel {
	}
	/**
	 * Use to create a new ship carrier.
	 * @see {@link ShipCarrierModel}
	 * @public
	 */
	export interface CreateShipCarrierDto extends ShipCarrierModel {
	}
	/**
	 * Use to create a new ship carrier method.
	 * @see {@link ShipCarrierMethodModel}
	 * @public
	 */
	export interface CreateShipCarrierMethodDto extends ShipCarrierMethodModel {
	}
	/**
	 * Use to create a new shipment.
	 * @see {@link ShipmentModel}
	 * @public
	 */
	export interface CreateShipmentDto extends ShipmentModel {
	}
	/**
	 * Use to create a new shipment event.
	 * @see {@link ShipmentEventModel}
	 * @public
	 */
	export interface CreateShipmentEventDto extends ShipmentEventModel {
	}
	/**
	 * Use to create a new shipment status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateShipmentStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new shipment type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateShipmentTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of packages
	 * @see {@link PackageSearchModel}
	 * @public
	 */
	export interface GetPackagesDto extends PackageSearchModel {
	}
	/**
	 * Use to get a list of package types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetPackageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of rate quotes
	 * @see {@link RateQuoteSearchModel}
	 * @public
	 */
	export interface GetRateQuotesDto extends RateQuoteSearchModel {
	}
	/**
	 * Use to get a list of ship carrier methods
	 * @see {@link ShipCarrierMethodSearchModel}
	 * @public
	 */
	export interface GetShipCarrierMethodsDto extends ShipCarrierMethodSearchModel {
	}
	/**
	 * Use to get a list of ship carriers
	 * @see {@link ShipCarrierSearchModel}
	 * @public
	 */
	export interface GetShipCarriersDto extends ShipCarrierSearchModel {
	}
	/**
	 * Use to get a list of shipment events
	 * @see {@link ShipmentEventSearchModel}
	 * @public
	 */
	export interface GetShipmentEventsDto extends ShipmentEventSearchModel {
	}
	/**
	 * Use to get a list of shipments
	 * @see {@link ShipmentSearchModel}
	 * @public
	 */
	export interface GetShipmentsDto extends ShipmentSearchModel {
	}
	/**
	 * Use to get a list of shipment statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetShipmentStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of shipment types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetShipmentTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing package.
	 * @see {@link PackageModel}
	 * @public
	 */
	export interface UpdatePackageDto extends PackageModel {
	}
	/**
	 * Use to update an existing package type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdatePackageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing rate quote.
	 * @see {@link RateQuoteModel}
	 * @public
	 */
	export interface UpdateRateQuoteDto extends RateQuoteModel {
	}
	/**
	 * Use to update an existing ship carrier.
	 * @see {@link ShipCarrierModel}
	 * @public
	 */
	export interface UpdateShipCarrierDto extends ShipCarrierModel {
	}
	/**
	 * Use to update an existing ship carrier method.
	 * @see {@link ShipCarrierMethodModel}
	 * @public
	 */
	export interface UpdateShipCarrierMethodDto extends ShipCarrierMethodModel {
	}
	/**
	 * Use to update an existing shipment.
	 * @see {@link ShipmentModel}
	 * @public
	 */
	export interface UpdateShipmentDto extends ShipmentModel {
	}
	/**
	 * Use to update an existing shipment event.
	 * @see {@link ShipmentEventModel}
	 * @public
	 */
	export interface UpdateShipmentEventDto extends ShipmentEventModel {
	}
	/**
	 * Use to update an existing shipment status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateShipmentStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing shipment type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateShipmentTypeDto extends TypeModel {
	}

	export class Shipping extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all package calls.
		 * @param {@link cef.admin.api.ClearPackageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPackageCache
		 * @path <API Root>/Shipping/Package/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPackageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "Package", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all package type calls.
		 * @param {@link cef.admin.api.ClearPackageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPackageTypeCache
		 * @path <API Root>/Shipping/PackageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPackageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "PackageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all rate quote calls.
		 * @param {@link cef.admin.api.ClearRateQuoteCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRateQuoteCache
		 * @path <API Root>/Shipping/RateQuote/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRateQuoteCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "RateQuote", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ship carrier calls.
		 * @param {@link cef.admin.api.ClearShipCarrierCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearShipCarrierCache
		 * @path <API Root>/Shipping/ShipCarrier/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearShipCarrierCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "ShipCarrier", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ship carrier method calls.
		 * @param {@link cef.admin.api.ClearShipCarrierMethodCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearShipCarrierMethodCache
		 * @path <API Root>/Shipping/ShipCarrierMethod/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearShipCarrierMethodCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethod", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all shipment calls.
		 * @param {@link cef.admin.api.ClearShipmentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearShipmentCache
		 * @path <API Root>/Shipping/Shipment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearShipmentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "Shipment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all shipment event calls.
		 * @param {@link cef.admin.api.ClearShipmentEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearShipmentEventCache
		 * @path <API Root>/Shipping/ShipmentEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearShipmentEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "ShipmentEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all shipment status calls.
		 * @param {@link cef.admin.api.ClearShipmentStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearShipmentStatusCache
		 * @path <API Root>/Shipping/ShipmentStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearShipmentStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "ShipmentStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all shipment type calls.
		 * @param {@link cef.admin.api.ClearShipmentTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearShipmentTypeCache
		 * @path <API Root>/Shipping/ShipmentType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearShipmentTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Shipping", "ShipmentType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new package.
		 * @param {@link cef.admin.api.CreatePackageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePackage
		 * @path <API Root>/Shipping/Package/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePackage = (routeParams?: CreatePackageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "Package", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new package type.
		 * @param {@link cef.admin.api.CreatePackageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePackageType
		 * @path <API Root>/Shipping/PackageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePackageType = (routeParams?: CreatePackageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "PackageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new rate quote.
		 * @param {@link cef.admin.api.CreateRateQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRateQuote
		 * @path <API Root>/Shipping/RateQuote/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRateQuote = (routeParams?: CreateRateQuoteDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "RateQuote", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ship carrier.
		 * @param {@link cef.admin.api.CreateShipCarrierDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateShipCarrier
		 * @path <API Root>/Shipping/ShipCarrier/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateShipCarrier = (routeParams?: CreateShipCarrierDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipCarrier", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ship carrier method.
		 * @param {@link cef.admin.api.CreateShipCarrierMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateShipCarrierMethod
		 * @path <API Root>/Shipping/ShipCarrierMethod/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateShipCarrierMethod = (routeParams?: CreateShipCarrierMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethod", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new shipment.
		 * @param {@link cef.admin.api.CreateShipmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateShipment
		 * @path <API Root>/Shipping/Shipment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateShipment = (routeParams?: CreateShipmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "Shipment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new shipment event.
		 * @param {@link cef.admin.api.CreateShipmentEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateShipmentEvent
		 * @path <API Root>/Shipping/ShipmentEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateShipmentEvent = (routeParams?: CreateShipmentEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipmentEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new shipment status.
		 * @param {@link cef.admin.api.CreateShipmentStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateShipmentStatus
		 * @path <API Root>/Shipping/ShipmentStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateShipmentStatus = (routeParams?: CreateShipmentStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipmentStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new shipment type.
		 * @param {@link cef.admin.api.CreateShipmentTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateShipmentType
		 * @path <API Root>/Shipping/ShipmentType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateShipmentType = (routeParams?: CreateShipmentTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipmentType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific package from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePackageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePackageByID
		 * @path <API Root>/Shipping/Package/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePackageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "Package", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific package type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePackageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePackageTypeByID
		 * @path <API Root>/Shipping/PackageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePackageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "PackageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific rate quote from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRateQuoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRateQuoteByID
		 * @path <API Root>/Shipping/RateQuote/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRateQuoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "RateQuote", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ship carrier from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateShipCarrierByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateShipCarrierByID
		 * @path <API Root>/Shipping/ShipCarrier/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateShipCarrierByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipCarrier", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ship carrier method from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateShipCarrierMethodByID
		 * @path <API Root>/Shipping/ShipCarrierMethod/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethod", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific shipment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateShipmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateShipmentByID
		 * @path <API Root>/Shipping/Shipment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateShipmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "Shipment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific shipment event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateShipmentEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateShipmentEventByID
		 * @path <API Root>/Shipping/ShipmentEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateShipmentEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific shipment status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateShipmentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateShipmentStatusByID
		 * @path <API Root>/Shipping/ShipmentStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateShipmentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific shipment type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateShipmentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateShipmentTypeByID
		 * @path <API Root>/Shipping/ShipmentType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateShipmentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific package from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePackageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePackageByID
		 * @path <API Root>/Shipping/Package/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePackageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "Package", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific package type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePackageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePackageTypeByID
		 * @path <API Root>/Shipping/PackageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePackageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "PackageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific rate quote from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRateQuoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRateQuoteByID
		 * @path <API Root>/Shipping/RateQuote/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRateQuoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "RateQuote", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ship carrier from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteShipCarrierByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteShipCarrierByID
		 * @path <API Root>/Shipping/ShipCarrier/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteShipCarrierByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipCarrier", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ship carrier method from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteShipCarrierMethodByID
		 * @path <API Root>/Shipping/ShipCarrierMethod/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethod", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific shipment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteShipmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteShipmentByID
		 * @path <API Root>/Shipping/Shipment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteShipmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "Shipment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific shipment event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteShipmentEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteShipmentEventByID
		 * @path <API Root>/Shipping/ShipmentEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteShipmentEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific shipment status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteShipmentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteShipmentStatusByID
		 * @path <API Root>/Shipping/ShipmentStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteShipmentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific shipment type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteShipmentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteShipmentTypeByID
		 * @path <API Root>/Shipping/ShipmentType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteShipmentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific package
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPackageByID
		 * @path <API Root>/Shipping/Package/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PackageModel>}
		 * @public
		 */
		GetPackageByID = (id: number) => this.$http<PackageModel>({
			url: [this.rootUrl, "Shipping", "Package", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of packages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPackages
		 * @path <API Root>/Shipping/Packages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PackagePagedResults>}
		 * @public
		 */
		GetPackages = (routeParams?: GetPackagesDto) => this.$http<PackagePagedResults>({
			url: [this.rootUrl, "Shipping", "Packages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific package type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPackageTypeByID
		 * @path <API Root>/Shipping/PackageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetPackageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Shipping", "PackageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of package types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPackageTypes
		 * @path <API Root>/Shipping/PackageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PackageTypePagedResults>}
		 * @public
		 */
		GetPackageTypes = (routeParams?: GetPackageTypesDto) => this.$http<PackageTypePagedResults>({
			url: [this.rootUrl, "Shipping", "PackageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific rate quote
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRateQuoteByID
		 * @path <API Root>/Shipping/RateQuote/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RateQuoteModel>}
		 * @public
		 */
		GetRateQuoteByID = (id: number) => this.$http<RateQuoteModel>({
			url: [this.rootUrl, "Shipping", "RateQuote", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of rate quotes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRateQuotes
		 * @path <API Root>/Shipping/RateQuotes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RateQuotePagedResults>}
		 * @public
		 */
		GetRateQuotes = (routeParams?: GetRateQuotesDto) => this.$http<RateQuotePagedResults>({
			url: [this.rootUrl, "Shipping", "RateQuotes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ship carrier
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipCarrierByID
		 * @path <API Root>/Shipping/ShipCarrier/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipCarrierModel>}
		 * @public
		 */
		GetShipCarrierByID = (id: number) => this.$http<ShipCarrierModel>({
			url: [this.rootUrl, "Shipping", "ShipCarrier", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific ship carrier method
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipCarrierMethodByID
		 * @path <API Root>/Shipping/ShipCarrierMethod/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipCarrierMethodModel>}
		 * @public
		 */
		GetShipCarrierMethodByID = (id: number) => this.$http<ShipCarrierMethodModel>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethod", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ship carrier methods
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipCarrierMethods
		 * @path <API Root>/Shipping/ShipCarrierMethods
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipCarrierMethodPagedResults>}
		 * @public
		 */
		GetShipCarrierMethods = (routeParams?: GetShipCarrierMethodsDto) => this.$http<ShipCarrierMethodPagedResults>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethods"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of ship carriers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipCarriers
		 * @path <API Root>/Shipping/ShipCarriers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipCarrierPagedResults>}
		 * @public
		 */
		GetShipCarriers = (routeParams?: GetShipCarriersDto) => this.$http<ShipCarrierPagedResults>({
			url: [this.rootUrl, "Shipping", "ShipCarriers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific shipment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipmentByID
		 * @path <API Root>/Shipping/Shipment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipmentModel>}
		 * @public
		 */
		GetShipmentByID = (id: number) => this.$http<ShipmentModel>({
			url: [this.rootUrl, "Shipping", "Shipment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific shipment event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipmentEventByID
		 * @path <API Root>/Shipping/ShipmentEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipmentEventModel>}
		 * @public
		 */
		GetShipmentEventByID = (id: number) => this.$http<ShipmentEventModel>({
			url: [this.rootUrl, "Shipping", "ShipmentEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of shipment events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipmentEvents
		 * @path <API Root>/Shipping/ShipmentEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipmentEventPagedResults>}
		 * @public
		 */
		GetShipmentEvents = (routeParams?: GetShipmentEventsDto) => this.$http<ShipmentEventPagedResults>({
			url: [this.rootUrl, "Shipping", "ShipmentEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of shipments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipments
		 * @path <API Root>/Shipping/Shipments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipmentPagedResults>}
		 * @public
		 */
		GetShipments = (routeParams?: GetShipmentsDto) => this.$http<ShipmentPagedResults>({
			url: [this.rootUrl, "Shipping", "Shipments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific shipment status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipmentStatusByID
		 * @path <API Root>/Shipping/ShipmentStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetShipmentStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Shipping", "ShipmentStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of shipment statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipmentStatuses
		 * @path <API Root>/Shipping/ShipmentStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipmentStatusPagedResults>}
		 * @public
		 */
		GetShipmentStatuses = (routeParams?: GetShipmentStatusesDto) => this.$http<ShipmentStatusPagedResults>({
			url: [this.rootUrl, "Shipping", "ShipmentStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific shipment type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipmentTypeByID
		 * @path <API Root>/Shipping/ShipmentType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetShipmentTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Shipping", "ShipmentType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of shipment types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetShipmentTypes
		 * @path <API Root>/Shipping/ShipmentTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ShipmentTypePagedResults>}
		 * @public
		 */
		GetShipmentTypes = (routeParams?: GetShipmentTypesDto) => this.$http<ShipmentTypePagedResults>({
			url: [this.rootUrl, "Shipping", "ShipmentTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific package from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePackageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePackageByID
		 * @path <API Root>/Shipping/Package/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePackageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "Package", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific package type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePackageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePackageTypeByID
		 * @path <API Root>/Shipping/PackageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePackageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "PackageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific rate quote from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRateQuoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRateQuoteByID
		 * @path <API Root>/Shipping/RateQuote/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRateQuoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "RateQuote", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ship carrier from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateShipCarrierByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateShipCarrierByID
		 * @path <API Root>/Shipping/ShipCarrier/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateShipCarrierByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipCarrier", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ship carrier method from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateShipCarrierMethodByID
		 * @path <API Root>/Shipping/ShipCarrierMethod/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethod", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific shipment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateShipmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateShipmentByID
		 * @path <API Root>/Shipping/Shipment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateShipmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "Shipment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific shipment event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateShipmentEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateShipmentEventByID
		 * @path <API Root>/Shipping/ShipmentEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateShipmentEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific shipment status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateShipmentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateShipmentStatusByID
		 * @path <API Root>/Shipping/ShipmentStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateShipmentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific shipment type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateShipmentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateShipmentTypeByID
		 * @path <API Root>/Shipping/ShipmentType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateShipmentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Shipping", "ShipmentType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing package.
		 * @param {@link cef.admin.api.UpdatePackageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePackage
		 * @path <API Root>/Shipping/Package/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePackage = (routeParams?: UpdatePackageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "Package", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing package type.
		 * @param {@link cef.admin.api.UpdatePackageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePackageType
		 * @path <API Root>/Shipping/PackageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePackageType = (routeParams?: UpdatePackageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "PackageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing rate quote.
		 * @param {@link cef.admin.api.UpdateRateQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRateQuote
		 * @path <API Root>/Shipping/RateQuote/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRateQuote = (routeParams?: UpdateRateQuoteDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "RateQuote", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ship carrier.
		 * @param {@link cef.admin.api.UpdateShipCarrierDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateShipCarrier
		 * @path <API Root>/Shipping/ShipCarrier/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateShipCarrier = (routeParams?: UpdateShipCarrierDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipCarrier", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ship carrier method.
		 * @param {@link cef.admin.api.UpdateShipCarrierMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateShipCarrierMethod
		 * @path <API Root>/Shipping/ShipCarrierMethod/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateShipCarrierMethod = (routeParams?: UpdateShipCarrierMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipCarrierMethod", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing shipment.
		 * @param {@link cef.admin.api.UpdateShipmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateShipment
		 * @path <API Root>/Shipping/Shipment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateShipment = (routeParams?: UpdateShipmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "Shipment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing shipment event.
		 * @param {@link cef.admin.api.UpdateShipmentEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateShipmentEvent
		 * @path <API Root>/Shipping/ShipmentEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateShipmentEvent = (routeParams?: UpdateShipmentEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipmentEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing shipment status.
		 * @param {@link cef.admin.api.UpdateShipmentStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateShipmentStatus
		 * @path <API Root>/Shipping/ShipmentStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateShipmentStatus = (routeParams?: UpdateShipmentStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipmentStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing shipment type.
		 * @param {@link cef.admin.api.UpdateShipmentTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateShipmentType
		 * @path <API Root>/Shipping/ShipmentType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateShipmentType = (routeParams?: UpdateShipmentTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Shipping", "ShipmentType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
