/**
 * @file framework/admin/_api/cvApi.Providers.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Analyze the specific cart and build target carts for it based on the internal rules.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface AnalyzeSpecificCartToTargetCartsDto extends CheckoutModel {
		/** Reset the analysis results so any previous target setups are removed. */
		ResetAnalysis: boolean;
	}
	/**
	 * Submit the current quote cart of the given session type
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface AnalyzeSpecificQuoteCartToTargetQuotesDto extends CheckoutModel {
	}
	/**
	 * Calculates inventory for the given product identifier. Returns a model containing relevant information about how the inventory was calculated, limits to purchasing, etc.
	 * @public
	 */
	export interface BulkCalculateInventoryDto {
		ProductIDs: Array<number>;
	}
	/**
	 * Returns a boolean value indicating whether there is any available inventory for the given product identifier.
	 * @public
	 */
	export interface BulkCheckHasAnyAvailableInventoryDto {
		ProductIDs: Array<number>;
	}
	/**
	 * Takes in bulk inventory data for upserting.
	 * @public
	 */
	export interface BulkUpdateInventoryForProductsDto {
		InventoryToPush?: Array<CalculatedInventory>;
	}
	/**
	 * Use to create a sales return admin side
	 * @see {@link SalesReturnModel}
	 * @public
	 */
	export interface CreateSalesReturnAsAdminDto extends SalesReturnModel {
	}
	/**
	 * Returns a total sum count of available inventory for the given product identifier.
	 * @public
	 */
	export interface GetBulkAvailableInventoryCountDto {
		ProductIDs: Array<number>;
	}
	/**
	 * Use to manually refund a sales return
	 * @see {@link SalesReturnModel}
	 * @public
	 */
	export interface ManuallyRefundSalesReturnDto extends SalesReturnModel {
	}
	/**
	 * Provide payment information to a specific invoice by ID.
	 * @public
	 */
	export interface PaySingleInvoiceByIDDto {
		InvoiceID: number;
		Payment: PaymentModel;
		Billing?: ContactModel;
	}
	/**
	 * Checkout the specific shopping cart
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessSpecificCartToSingleOrderDto extends CheckoutModel {
	}
	/**
	 * Checkout the specific cart of the given cart identifier.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessSpecificCartToTargetOrdersDto extends CheckoutModel {
	}
	/**
	 * Submit Quote the specific quote cart
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessSpecificQuoteCartToSingleQuoteDto extends CheckoutModel {
	}
	/**
	 * Submit the current quote cart of the given cart identifier.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessSpecificQuoteCartToTargetQuotesDto extends CheckoutModel {
	}
	/**
	 * Membership Registration Process step 1: Send Invitation (User gets an email with an invite token)
	 * @public
	 */
	export interface SendInvitationDto {
		/** Email to send the invitation to */
		Email: string;
	}
	/**
	 * Use to update a specific sales order item
	 * @public
	 */
	export interface SendReceiptNotificationWithEmailDto {
		/** Order ID */
		OrderID: number;
		/** Email address to send the notification to */
		Email: string;
	}
	/**
	 * Calculates inventory for the given product identifier.
	 * @see {@link ImplementsIDOnBodyBase}
	 * @public
	 */
	export interface UpdateInventoryForProductDto extends ImplementsIDOnBodyBase {
		Quantity?: number;
		QuantityAllocated?: number;
		QuantityPreSold?: number;
		RelevantLocationID?: number;
		RelevantHash?: number;
	}
	/**
	 * Use to validate address with AddressProvider
	 * @public
	 */
	export interface ValidateAddressDto {
		AccountContactID?: number;
		ContactID?: number;
		AddressID?: number;
		Address?: AddressModel;
	}

	export class Providers extends ServiceStackRoute {
		/**
		 * Analyze the specific cart and build target carts for it based on the internal rules.
		 * @param {@link cef.admin.api.AnalyzeSpecificCartToTargetCartsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.AnalyzeSpecificCartToTargetCarts
		 * @path <API Root>/Providers/Checkout/AnalyzeSpecificCartToTargetCarts
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<CartModel>>>}
		 * @public
		 */
		AnalyzeSpecificCartToTargetCarts = (routeParams: AnalyzeSpecificCartToTargetCartsDto) => this.$http<CEFActionResponseT<Array<CartModel>>>({
			url: [this.rootUrl, "Providers", "Checkout", "AnalyzeSpecificCartToTargetCarts"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Submit the current quote cart of the given session type
		 * @param {@link cef.admin.api.AnalyzeSpecificQuoteCartToTargetQuotesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.AnalyzeSpecificQuoteCartToTargetQuotes
		 * @path <API Root>/Providers/SubmitQuote/AnalyzeSpecificQuoteCartToTargetQuoteCarts
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<CartModel>>>}
		 * @public
		 */
		AnalyzeSpecificQuoteCartToTargetQuotes = (routeParams?: AnalyzeSpecificQuoteCartToTargetQuotesDto) => this.$http<CEFActionResponseT<Array<CartModel>>>({
			url: [this.rootUrl, "Providers", "SubmitQuote", "AnalyzeSpecificQuoteCartToTargetQuoteCarts"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Marks the original line item as awarded out using the response item
		 * @param {@link cef.admin.api.AwardSalesQuoteLineItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.AwardSalesQuoteLineItem
		 * @path <API Root>/Providers/Quoting/Actions/AwardItem/{OriginalItemID}/{ResponseItemID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AwardSalesQuoteLineItem = (originalItemID: number, responseItemID: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "AwardItem", originalItemID, responseItemID].join("/"),
			method: "PATCH",
		});

		/**
		 * Calculates inventory for the given product identifier. Returns a model containing relevant information about how the inventory was calculated, limits to purchasing, etc.
		 * @param {@link cef.admin.api.BulkCalculateInventoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.BulkCalculateInventory
		 * @path <API Root>/Providers/Inventory/BulkCalculateInventory
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.admin.Dictionary<CalculatedInventory>>>}
		 * @public
		 */
		BulkCalculateInventory = (routeParams: BulkCalculateInventoryDto) => this.$http<CEFActionResponseT<cefalt.admin.Dictionary<CalculatedInventory>>>({
			url: [this.rootUrl, "Providers", "Inventory", "BulkCalculateInventory"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Returns a boolean value indicating whether there is any available inventory for the given product identifier.
		 * @param {@link cef.admin.api.BulkCheckHasAnyAvailableInventoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.BulkCheckHasAnyAvailableInventory
		 * @path <API Root>/Providers/Inventory/BulkCheckHasAnyAvailableInventory
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.admin.Dictionary<boolean>>>}
		 * @public
		 */
		BulkCheckHasAnyAvailableInventory = (routeParams: BulkCheckHasAnyAvailableInventoryDto) => this.$http<CEFActionResponseT<cefalt.admin.Dictionary<boolean>>>({
			url: [this.rootUrl, "Providers", "Inventory", "BulkCheckHasAnyAvailableInventory"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Takes in bulk inventory data for upserting.
		 * @param {@link cef.admin.api.BulkUpdateInventoryForProductsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.BulkUpdateInventoryForProducts
		 * @path <API Root>/Providers/Inventory/BulkUpdateInventoryForProducts
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		BulkUpdateInventoryForProducts = (routeParams?: BulkUpdateInventoryForProductsDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Inventory", "BulkUpdateInventoryForProducts"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Calculates inventory for the given product identifier. Returns a model containing relevant information about how the inventory was calculated, limits to purchasing, etc.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.CalculateInventory
		 * @path <API Root>/Providers/Inventory/CalculateInventory/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<CalculatedInventory>>}
		 * @public
		 */
		CalculateInventory = (id: number) => this.$http<CEFActionResponseT<CalculatedInventory>>({
			url: [this.rootUrl, "Providers", "Inventory", "CalculateInventory", id].join("/"),
			method: "GET",
		});

		/**
		 * Returns a boolean value indicating whether there is any available inventory for the given product identifier.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.CheckHasAnyAvailableInventory
		 * @path <API Root>/Providers/Inventory/CheckHasAnyAvailableInventory/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<boolean>>}
		 * @public
		 */
		CheckHasAnyAvailableInventory = (id: number) => this.$http<CEFActionResponseT<boolean>>({
			url: [this.rootUrl, "Providers", "Inventory", "CheckHasAnyAvailableInventory", id].join("/"),
			method: "GET",
		});

		/**
		 * As an administrator, convert a quote to an order on behalf of the customer. This action also marks the quote Approved.
		 * @param {@link cef.admin.api.ConvertSpecificQuoteToOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.ConvertSpecificQuoteToOrder
		 * @path <API Root>/Providers/Quoting/Actions/Specific/ConvertToOrder/{ID}
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<{ item1: number, item2: number }>>}
		 * @public
		 */
		ConvertSpecificQuoteToOrder = (id: number) => this.$http<CEFActionResponseT<{ item1: number, item2: number }>>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Specific", "ConvertToOrder", id].join("/"),
			method: "POST",
		});

		/**
		 * Generates an Invoice with the same information as this Order with the Balance Due amount. An email notification will be sent to the customer. No status change will occur.
		 * @param {@link cef.admin.api.CreateInvoiceForSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.CreateInvoiceForSalesOrder
		 * @path <API Root>/Providers/Invoicing/Actions/CreateFromOrderID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponseT<SalesInvoiceModel>>}
		 * @public
		 */
		CreateInvoiceForSalesOrder = (id: number) => this.$http<CEFActionResponseT<SalesInvoiceModel>>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "CreateFromOrderID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Generates an Invoice with the same information as this Order with the Balance Due amount. An email notification will be sent to the customer. No status change will occur.
		 * @param {@link cef.admin.api.CreateInvoiceForSampleRequestDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.CreateInvoiceForSampleRequest
		 * @path <API Root>/Providers/Sampling/Actions/CreateInvoiceFor/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponseT<SalesInvoiceModel>>}
		 * @public
		 */
		CreateInvoiceForSampleRequest = (id: number) => this.$http<CEFActionResponseT<SalesInvoiceModel>>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "CreateInvoiceFor", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Creates a printable Pick Ticket for the Warehouse to locate products for the order. The order will be set to the 'Processing' status.
		 * @param {@link cef.admin.api.CreatePickTicketForSampleRequestDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.CreatePickTicketForSampleRequest
		 * @path <API Root>/Providers/Sampling/Actions/CreatePickTicketFor/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<SalesItemBaseModel<AppliedSampleRequestItemDiscountModel>>>>}
		 * @public
		 */
		CreatePickTicketForSampleRequest = (id: number) => this.$http<CEFActionResponseT<Array<SalesItemBaseModel<AppliedSampleRequestItemDiscountModel>>>>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "CreatePickTicketFor", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to create a sales return admin side
		 * @param {@link cef.admin.api.CreateSalesReturnAsAdminDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.CreateSalesReturnAsAdmin
		 * @path <API Root>/Providers/Returning/Actions/CreateSalesReturn
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnAsAdmin = (routeParams?: CreateSalesReturnAsAdminDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "CreateSalesReturn"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Returns a total sum count of available inventory for the given product identifier.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.GetAvailableInventoryCount
		 * @path <API Root>/Providers/Inventory/CalculateInventory/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		GetAvailableInventoryCount = (id: number) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Providers", "Inventory", "CalculateInventory", id].join("/"),
			method: "GET",
		});

		/**
		 * Returns a total sum count of available inventory for the given product identifier.
		 * @param {@link cef.admin.api.GetBulkAvailableInventoryCountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.GetBulkAvailableInventoryCount
		 * @path <API Root>/Providers/Inventory/BulkCalculateInventoryCount
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.admin.Dictionary<number>>>}
		 * @public
		 */
		GetBulkAvailableInventoryCount = (routeParams: GetBulkAvailableInventoryCountDto) => this.$http<CEFActionResponseT<cefalt.admin.Dictionary<number>>>({
			url: [this.rootUrl, "Providers", "Inventory", "BulkCalculateInventoryCount"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get the discounts for the top level and item levels at the same time.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Queries.Services.Endpoints.GetDiscountsForInvoice
		 * @path <API Root>/Providers/Invoicing/Queries/Secured/DiscountsFor/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<DiscountsForInvoice>}
		 * @public
		 */
		GetDiscountsForInvoice = (id: number) => this.$http<DiscountsForInvoice>({
			url: [this.rootUrl, "Providers", "Invoicing", "Queries", "Secured", "DiscountsFor", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the discounts for the top level and item levels at the same time.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountsForOrder
		 * @path <API Root>/Providers/Ordering/Queries/Secured/DiscountsFor/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<DiscountsForOrderResponse>}
		 * @public
		 */
		GetDiscountsForOrder = (id: number) => this.$http<DiscountsForOrderResponse>({
			url: [this.rootUrl, "Providers", "Ordering", "Queries", "Secured", "DiscountsFor", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the discounts for the top level and item levels at the same time.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Queries.Services.Endpoints.GetDiscountsForQuote
		 * @path <API Root>/Providers/Quoting/Queries/Secured/DiscountsFor/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<DiscountsForQuote>}
		 * @public
		 */
		GetDiscountsForQuote = (id: number) => this.$http<DiscountsForQuote>({
			url: [this.rootUrl, "Providers", "Quoting", "Queries", "Secured", "DiscountsFor", id].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the auctions in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexAuctions
		 * @path <API Root>/Providers/Searching/Auctions/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexAuctions = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Auctions", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the categories in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexCategories
		 * @path <API Root>/Providers/Searching/Categories/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexCategories = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Categories", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the franchises in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexFranchises
		 * @path <API Root>/Providers/Searching/Franchises/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexFranchises = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Franchises", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the lots in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexLots
		 * @path <API Root>/Providers/Searching/Lots/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexLots = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Lots", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the manufacturers in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexManufacturers
		 * @path <API Root>/Providers/Searching/Manufacturers/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexManufacturers = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Manufacturers", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the products in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexProducts
		 * @path <API Root>/Providers/Searching/Products/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexProducts = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Products", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the stores in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexStores
		 * @path <API Root>/Providers/Searching/Stores/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexStores = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Stores", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Calls the searching provider and re-indexes the vendors in the database
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.IndexVendors
		 * @path <API Root>/Providers/Searching/Vendors/Index
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IndexVendors = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Searching", "Vendors", "Index"].join("/"),
			method: "GET",
		});

		/**
		 * Use to manually refund a sales return
		 * @param {@link cef.admin.api.ManuallyRefundSalesReturnDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.ManuallyRefundSalesReturn
		 * @path <API Root>/Providers/Returning/Actions/ManuallyRefund
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ManuallyRefundSalesReturn = (routeParams?: ManuallyRefundSalesReturnDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "ManuallyRefund"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Provide payment information to a specific invoice by ID.
		 * @param {@link cef.admin.api.PaySingleInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.PaySingleInvoiceByID
		 * @path <API Root>/Providers/Invoicing/Actions/Pay
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		PaySingleInvoiceByID = (routeParams: PaySingleInvoiceByIDDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "Pay"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Checkout the specific shopping cart
		 * @param {@link cef.admin.api.ProcessSpecificCartToSingleOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessSpecificCartToSingleOrder
		 * @path <API Root>/Providers/Checkout/ProcessSpecificCartToSingleOrder
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessSpecificCartToSingleOrder = (routeParams?: ProcessSpecificCartToSingleOrderDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "Checkout", "ProcessSpecificCartToSingleOrder"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Checkout the specific cart of the given cart identifier.
		 * @param {@link cef.admin.api.ProcessSpecificCartToTargetOrdersDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessSpecificCartToTargetOrders
		 * @path <API Root>/Providers/Checkout/ProcessSpecificCartToTargetOrders
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessSpecificCartToTargetOrders = (routeParams?: ProcessSpecificCartToTargetOrdersDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "Checkout", "ProcessSpecificCartToTargetOrders"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Submit Quote the specific quote cart
		 * @param {@link cef.admin.api.ProcessSpecificQuoteCartToSingleQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessSpecificQuoteCartToSingleQuote
		 * @path <API Root>/Providers/SubmitQuote/ProcessSpecificQuoteCartToSingleQuote
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessSpecificQuoteCartToSingleQuote = (routeParams?: ProcessSpecificQuoteCartToSingleQuoteDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "SubmitQuote", "ProcessSpecificQuoteCartToSingleQuote"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Submit the current quote cart of the given cart identifier.
		 * @param {@link cef.admin.api.ProcessSpecificQuoteCartToTargetQuotesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessSpecificQuoteCartToTargetQuotes
		 * @path <API Root>/Providers/SubmitQuote/ProcessSpecificQuoteCartToTargetQuotes
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessSpecificQuoteCartToTargetQuotes = (routeParams?: ProcessSpecificQuoteCartToTargetQuotesDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "SubmitQuote", "ProcessSpecificQuoteCartToTargetQuotes"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Membership Registration Process step 1: Send Invitation (User gets an email with an invite token)
		 * @param {@link cef.admin.api.SendInvitationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Emails.SendInvitation
		 * @path <API Root>/Providers/Emails/Authentication/SendInvitation
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SendInvitation = (routeParams: SendInvitationDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Emails", "Authentication", "SendInvitation"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to update a specific sales order item
		 * @param {@link cef.admin.api.SendReceiptNotificationWithEmailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Emails.SendReceiptNotificationWithEmail
		 * @path <API Root>/Providers/Emails/ReceiptNotificationToEmailAddress
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SendReceiptNotificationWithEmail = (routeParams: SendReceiptNotificationWithEmailDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Emails", "ReceiptNotificationToEmailAddress"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Mark the invoice as Paid. It will no longer be processed and will be visible on the Completed Invoices view. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesInvoiceAsPaidDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.SetSalesInvoiceAsPaid
		 * @path <API Root>/Providers/Invoicing/Actions/Paid/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesInvoiceAsPaid = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "Paid", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Mark the invoice as Partially Paid. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesInvoiceAsPartiallyPaidDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.SetSalesInvoiceAsPartiallyPaid
		 * @path <API Root>/Providers/Invoicing/Actions/PartiallyPaid/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesInvoiceAsPartiallyPaid = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "PartiallyPaid", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Mark the invoice as Unpaid. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesInvoiceAsUnpaidDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.SetSalesInvoiceAsUnpaid
		 * @path <API Root>/Providers/Invoicing/Actions/Unpaid/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesInvoiceAsUnpaid = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "Unpaid", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Void the invoice. It will no longer be processed and will be visible on the Completed Invoices view. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesInvoiceAsVoidedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.SetSalesInvoiceAsVoided
		 * @path <API Root>/Providers/Invoicing/Actions/Void/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesInvoiceAsVoided = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "Void", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Approves the specified Quote
		 * @param {@link cef.admin.api.SetSalesQuoteAsApprovedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsApproved
		 * @path <API Root>/Providers/Quoting/Actions/Approve/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsApproved = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Approve", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Marks the specified Quote as In Process
		 * @param {@link cef.admin.api.SetSalesQuoteAsInProcessDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsInProcess
		 * @path <API Root>/Providers/Quoting/Actions/InProcess/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsInProcess = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "InProcess", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Marks the specified Quote as Processed
		 * @param {@link cef.admin.api.SetSalesQuoteAsProcessedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsProcessed
		 * @path <API Root>/Providers/Quoting/Actions/Processed/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsProcessed = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Processed", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Rejects the specified Quote
		 * @param {@link cef.admin.api.SetSalesQuoteAsRejectedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsRejected
		 * @path <API Root>/Providers/Quoting/Actions/Reject/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsRejected = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Reject", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Voids the specified Quote
		 * @param {@link cef.admin.api.SetSalesQuoteAsVoidedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsVoided
		 * @path <API Root>/Providers/Quoting/Actions/Void/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsVoided = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Void", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The return items each have sufficient stock and will be allocated against their stock (reducing each). The return status will be set to 'Confirmed'. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesReturnAsConfirmedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.SetSalesReturnAsConfirmed
		 * @path <API Root>/Providers/Returning/Actions/Confirm/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesReturnAsConfirmed = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "Confirm", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The return amount will be refunded. If successful, an email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesReturnAsRefundedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.SetSalesReturnAsRefunded
		 * @path <API Root>/Providers/Returning/Actions/Refund/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesReturnAsRefunded = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "Refund", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The return will be set to 'Rejected' status, no further modifications will be allowed. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesReturnAsRejectedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.SetSalesReturnAsRejected
		 * @path <API Root>/Providers/Returning/Actions/Reject/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesReturnAsRejected = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "Reject", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Void the return. It will no longer be processed and will be visible on the Completed Returns view. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSalesReturnAsVoidedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.SetSalesReturnAsVoided
		 * @path <API Root>/Providers/Returning/Actions/Void/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesReturnAsVoided = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "Void", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The order items do not have sufficient stock. The order status will be set to 'Backordered'. An email notification will be sent to the customer. A Purchase Order should be created and reference this order by an Inventory Manager to refill stock.
		 * @param {@link cef.admin.api.SetSampleRequestAsBackorderedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.SetSampleRequestAsBackordered
		 * @path <API Root>/Providers/Sampling/Actions/Backorder/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSampleRequestAsBackordered = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "Backorder", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The order will be set to 'Completed' status, no further modifications will be allowed. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSampleRequestAsCompletedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.SetSampleRequestAsCompleted
		 * @path <API Root>/Providers/Sampling/Actions/Complete/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSampleRequestAsCompleted = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "Complete", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The order items each have sufficient stock and will be allocated against their stock (reducing each). The order status will be set to 'Confirmed'. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSampleRequestAsConfirmedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.SetSampleRequestAsConfirmed
		 * @path <API Root>/Providers/Sampling/Actions/Confirm/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSampleRequestAsConfirmed = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "Confirm", id].join("/"),
			method: "PATCH",
		});

		/**
		 * A Purchase Order will be created with this order's line items where a Vendor can be selected that allows Drop Shipping. The order will be set to 'Shipped from Vendor' status. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSampleRequestAsDropShippedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.SetSampleRequestAsDropShipped
		 * @path <API Root>/Providers/Sampling/Actions/DropShipped/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponseT<PurchaseOrderModel>>}
		 * @public
		 */
		SetSampleRequestAsDropShipped = (id: number) => this.$http<CEFActionResponseT<PurchaseOrderModel>>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "DropShipped", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The order will be set to 'Shipped' status. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSampleRequestAsShippedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.SetSampleRequestAsShipped
		 * @path <API Root>/Providers/Sampling/Actions/Shipped/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSampleRequestAsShipped = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "Shipped", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Void the request. It will no longer be processed and will be visible on the Completed Orders view. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.SetSampleRequestAsVoidedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Actions.Services.Endpoints.SetSampleRequestAsVoided
		 * @path <API Root>/Providers/Sampling/Actions/Void/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSampleRequestAsVoided = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Sampling", "Actions", "Void", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Calculates inventory for the given product identifier.
		 * @param {@link cef.admin.api.UpdateInventoryForProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.UpdateInventoryForProduct
		 * @path <API Root>/Providers/Inventory/UpdateInventoryForProduct
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UpdateInventoryForProduct = (routeParams?: UpdateInventoryForProductDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Inventory", "UpdateInventoryForProduct"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Use to validate address with AddressProvider
		 * @param {@link cef.admin.api.ValidateAddressDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.AddressValidation.ValidateAddress
		 * @path <API Root>/Providers/Geography/ValidateAddress
		 * @verb POST
		 * @returns {ng.IHttpPromise<AddressValidationResultModel>}
		 * @public
		 */
		ValidateAddress = (routeParams?: ValidateAddressDto) => this.$http<AddressValidationResultModel>({
			url: [this.rootUrl, "Providers", "Geography", "ValidateAddress"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
