/**
 * @file framework/admin/_api/cvApi.Discounts.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to determine if a discount code already exists
	 * @public
	 */
	export interface CheckDiscountCodeExistsByCodeDto {
		/** The discount code to check */
		Code: string;
	}
	/**
	 * Use to create a new applied cart discount.
	 * @see {@link AppliedCartDiscountModel}
	 * @public
	 */
	export interface CreateAppliedCartDiscountDto extends AppliedCartDiscountModel {
	}
	/**
	 * Use to create a new applied cart item discount.
	 * @see {@link AppliedCartItemDiscountModel}
	 * @public
	 */
	export interface CreateAppliedCartItemDiscountDto extends AppliedCartItemDiscountModel {
	}
	/**
	 * Use to create a new applied purchase order discount.
	 * @see {@link AppliedPurchaseOrderDiscountModel}
	 * @public
	 */
	export interface CreateAppliedPurchaseOrderDiscountDto extends AppliedPurchaseOrderDiscountModel {
	}
	/**
	 * Use to create a new applied purchase order item discount.
	 * @see {@link AppliedPurchaseOrderItemDiscountModel}
	 * @public
	 */
	export interface CreateAppliedPurchaseOrderItemDiscountDto extends AppliedPurchaseOrderItemDiscountModel {
	}
	/**
	 * Use to create a new applied sales invoice discount.
	 * @see {@link AppliedSalesInvoiceDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesInvoiceDiscountDto extends AppliedSalesInvoiceDiscountModel {
	}
	/**
	 * Use to create a new applied sales invoice item discount.
	 * @see {@link AppliedSalesInvoiceItemDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesInvoiceItemDiscountDto extends AppliedSalesInvoiceItemDiscountModel {
	}
	/**
	 * Use to create a new applied sales order discount.
	 * @see {@link AppliedSalesOrderDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesOrderDiscountDto extends AppliedSalesOrderDiscountModel {
	}
	/**
	 * Use to create a new applied sales order item discount.
	 * @see {@link AppliedSalesOrderItemDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesOrderItemDiscountDto extends AppliedSalesOrderItemDiscountModel {
	}
	/**
	 * Use to create a new applied sales quote discount.
	 * @see {@link AppliedSalesQuoteDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesQuoteDiscountDto extends AppliedSalesQuoteDiscountModel {
	}
	/**
	 * Use to create a new applied sales quote item discount.
	 * @see {@link AppliedSalesQuoteItemDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesQuoteItemDiscountDto extends AppliedSalesQuoteItemDiscountModel {
	}
	/**
	 * Use to create a new applied sales return discount.
	 * @see {@link AppliedSalesReturnDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesReturnDiscountDto extends AppliedSalesReturnDiscountModel {
	}
	/**
	 * Use to create a new applied sales return item discount.
	 * @see {@link AppliedSalesReturnItemDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSalesReturnItemDiscountDto extends AppliedSalesReturnItemDiscountModel {
	}
	/**
	 * Use to create a new applied sample request discount.
	 * @see {@link AppliedSampleRequestDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSampleRequestDiscountDto extends AppliedSampleRequestDiscountModel {
	}
	/**
	 * Use to create a new applied sample request item discount.
	 * @see {@link AppliedSampleRequestItemDiscountModel}
	 * @public
	 */
	export interface CreateAppliedSampleRequestItemDiscountDto extends AppliedSampleRequestItemDiscountModel {
	}
	/**
	 * Use to create a new discount.
	 * @see {@link DiscountModel}
	 * @public
	 */
	export interface CreateDiscountDto extends DiscountModel {
	}
	/**
	 * Use to create a new discount account.
	 * @see {@link DiscountAccountModel}
	 * @public
	 */
	export interface CreateDiscountAccountDto extends DiscountAccountModel {
	}
	/**
	 * Use to create a new discount account type.
	 * @see {@link DiscountAccountTypeModel}
	 * @public
	 */
	export interface CreateDiscountAccountTypeDto extends DiscountAccountTypeModel {
	}
	/**
	 * Use to create a new discount brand.
	 * @see {@link DiscountBrandModel}
	 * @public
	 */
	export interface CreateDiscountBrandDto extends DiscountBrandModel {
	}
	/**
	 * Use to create a new discount category.
	 * @see {@link DiscountCategoryModel}
	 * @public
	 */
	export interface CreateDiscountCategoryDto extends DiscountCategoryModel {
	}
	/**
	 * Use to create a new discount code.
	 * @see {@link DiscountCodeModel}
	 * @public
	 */
	export interface CreateDiscountCodeDto extends DiscountCodeModel {
	}
	/**
	 * Use to create a new discount country.
	 * @see {@link DiscountCountryModel}
	 * @public
	 */
	export interface CreateDiscountCountryDto extends DiscountCountryModel {
	}
	/**
	 * Use to create a new discount franchise.
	 * @see {@link DiscountFranchiseModel}
	 * @public
	 */
	export interface CreateDiscountFranchiseDto extends DiscountFranchiseModel {
	}
	/**
	 * Use to create a new discount manufacturer.
	 * @see {@link DiscountManufacturerModel}
	 * @public
	 */
	export interface CreateDiscountManufacturerDto extends DiscountManufacturerModel {
	}
	/**
	 * Use to create a new discount product.
	 * @see {@link DiscountProductModel}
	 * @public
	 */
	export interface CreateDiscountProductDto extends DiscountProductModel {
	}
	/**
	 * Use to create a new discount product type.
	 * @see {@link DiscountProductTypeModel}
	 * @public
	 */
	export interface CreateDiscountProductTypeDto extends DiscountProductTypeModel {
	}
	/**
	 * Use to create a new discount ship carrier method.
	 * @see {@link DiscountShipCarrierMethodModel}
	 * @public
	 */
	export interface CreateDiscountShipCarrierMethodDto extends DiscountShipCarrierMethodModel {
	}
	/**
	 * Use to create a new discount store.
	 * @see {@link DiscountStoreModel}
	 * @public
	 */
	export interface CreateDiscountStoreDto extends DiscountStoreModel {
	}
	/**
	 * Use to create a new discount user.
	 * @see {@link DiscountUserModel}
	 * @public
	 */
	export interface CreateDiscountUserDto extends DiscountUserModel {
	}
	/**
	 * Use to create a new discount user role.
	 * @see {@link DiscountUserRoleModel}
	 * @public
	 */
	export interface CreateDiscountUserRoleDto extends DiscountUserRoleModel {
	}
	/**
	 * Use to create a new discount vendor.
	 * @see {@link DiscountVendorModel}
	 * @public
	 */
	export interface CreateDiscountVendorDto extends DiscountVendorModel {
	}
	/**
	 * Use to get a list of applied cart discounts
	 * @see {@link AppliedCartDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedCartDiscountsDto extends AppliedCartDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied cart item discounts
	 * @see {@link AppliedCartItemDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedCartItemDiscountsDto extends AppliedCartItemDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied purchase order discounts
	 * @see {@link AppliedPurchaseOrderDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedPurchaseOrderDiscountsDto extends AppliedPurchaseOrderDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied purchase order item discounts
	 * @see {@link AppliedPurchaseOrderItemDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedPurchaseOrderItemDiscountsDto extends AppliedPurchaseOrderItemDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales invoice discounts
	 * @see {@link AppliedSalesInvoiceDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesInvoiceDiscountsDto extends AppliedSalesInvoiceDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales invoice item discounts
	 * @see {@link AppliedSalesInvoiceItemDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesInvoiceItemDiscountsDto extends AppliedSalesInvoiceItemDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales order discounts
	 * @see {@link AppliedSalesOrderDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesOrderDiscountsDto extends AppliedSalesOrderDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales order item discounts
	 * @see {@link AppliedSalesOrderItemDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesOrderItemDiscountsDto extends AppliedSalesOrderItemDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales quote discounts
	 * @see {@link AppliedSalesQuoteDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesQuoteDiscountsDto extends AppliedSalesQuoteDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales quote item discounts
	 * @see {@link AppliedSalesQuoteItemDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesQuoteItemDiscountsDto extends AppliedSalesQuoteItemDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales return discounts
	 * @see {@link AppliedSalesReturnDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesReturnDiscountsDto extends AppliedSalesReturnDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sales return item discounts
	 * @see {@link AppliedSalesReturnItemDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSalesReturnItemDiscountsDto extends AppliedSalesReturnItemDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sample request discounts
	 * @see {@link AppliedSampleRequestDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSampleRequestDiscountsDto extends AppliedSampleRequestDiscountSearchModel {
	}
	/**
	 * Use to get a list of applied sample request item discounts
	 * @see {@link AppliedSampleRequestItemDiscountSearchModel}
	 * @public
	 */
	export interface GetAppliedSampleRequestItemDiscountsDto extends AppliedSampleRequestItemDiscountSearchModel {
	}
	/**
	 * Use to get a list of discount accounts
	 * @see {@link DiscountAccountSearchModel}
	 * @public
	 */
	export interface GetDiscountAccountsDto extends DiscountAccountSearchModel {
	}
	/**
	 * Use to get a list of discount account types
	 * @see {@link DiscountAccountTypeSearchModel}
	 * @public
	 */
	export interface GetDiscountAccountTypesDto extends DiscountAccountTypeSearchModel {
	}
	/**
	 * Use to get a list of discount brands
	 * @see {@link DiscountBrandSearchModel}
	 * @public
	 */
	export interface GetDiscountBrandsDto extends DiscountBrandSearchModel {
	}
	/**
	 * Use to get a list of discount categories
	 * @see {@link DiscountCategorySearchModel}
	 * @public
	 */
	export interface GetDiscountCategoriesDto extends DiscountCategorySearchModel {
	}
	/**
	 * Use to get a list of discount codes
	 * @see {@link DiscountCodeSearchModel}
	 * @public
	 */
	export interface GetDiscountCodesDto extends DiscountCodeSearchModel {
	}
	/**
	 * Use to get a list of discount countries
	 * @see {@link DiscountCountrySearchModel}
	 * @public
	 */
	export interface GetDiscountCountriesDto extends DiscountCountrySearchModel {
	}
	/**
	 * Use to get a list of discount franchises
	 * @see {@link DiscountFranchiseSearchModel}
	 * @public
	 */
	export interface GetDiscountFranchisesDto extends DiscountFranchiseSearchModel {
	}
	/**
	 * Use to get a list of discount manufacturers
	 * @see {@link DiscountManufacturerSearchModel}
	 * @public
	 */
	export interface GetDiscountManufacturersDto extends DiscountManufacturerSearchModel {
	}
	/**
	 * Use to get a list of discount products
	 * @see {@link DiscountProductSearchModel}
	 * @public
	 */
	export interface GetDiscountProductsDto extends DiscountProductSearchModel {
	}
	/**
	 * Use to get a list of discount product types
	 * @see {@link DiscountProductTypeSearchModel}
	 * @public
	 */
	export interface GetDiscountProductTypesDto extends DiscountProductTypeSearchModel {
	}
	/**
	 * Use to get a list of discounts
	 * @see {@link DiscountSearchModel}
	 * @public
	 */
	export interface GetDiscountsDto extends DiscountSearchModel {
		SourceType: number;
		SourceId: number;
		DiscountCodes?: Array<string>;
	}
	/**
	 * Use to get a list of discount ship carrier methods
	 * @see {@link DiscountShipCarrierMethodSearchModel}
	 * @public
	 */
	export interface GetDiscountShipCarrierMethodsDto extends DiscountShipCarrierMethodSearchModel {
	}
	/**
	 * Use to get a list of discount stores
	 * @see {@link DiscountStoreSearchModel}
	 * @public
	 */
	export interface GetDiscountStoresDto extends DiscountStoreSearchModel {
	}
	/**
	 * Use to get a list of discount user roles
	 * @see {@link DiscountUserRoleSearchModel}
	 * @public
	 */
	export interface GetDiscountUserRolesDto extends DiscountUserRoleSearchModel {
	}
	/**
	 * Use to get a list of discount users
	 * @see {@link DiscountUserSearchModel}
	 * @public
	 */
	export interface GetDiscountUsersDto extends DiscountUserSearchModel {
	}
	/**
	 * Use to get a list of discount vendors
	 * @see {@link DiscountVendorSearchModel}
	 * @public
	 */
	export interface GetDiscountVendorsDto extends DiscountVendorSearchModel {
	}
	/**
	 * Use to update an existing applied cart discount.
	 * @see {@link AppliedCartDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedCartDiscountDto extends AppliedCartDiscountModel {
	}
	/**
	 * Use to update an existing applied cart item discount.
	 * @see {@link AppliedCartItemDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedCartItemDiscountDto extends AppliedCartItemDiscountModel {
	}
	/**
	 * Use to update an existing applied purchase order discount.
	 * @see {@link AppliedPurchaseOrderDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedPurchaseOrderDiscountDto extends AppliedPurchaseOrderDiscountModel {
	}
	/**
	 * Use to update an existing applied purchase order item discount.
	 * @see {@link AppliedPurchaseOrderItemDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedPurchaseOrderItemDiscountDto extends AppliedPurchaseOrderItemDiscountModel {
	}
	/**
	 * Use to update an existing applied sales invoice discount.
	 * @see {@link AppliedSalesInvoiceDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesInvoiceDiscountDto extends AppliedSalesInvoiceDiscountModel {
	}
	/**
	 * Use to update an existing applied sales invoice item discount.
	 * @see {@link AppliedSalesInvoiceItemDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesInvoiceItemDiscountDto extends AppliedSalesInvoiceItemDiscountModel {
	}
	/**
	 * Use to update an existing applied sales order discount.
	 * @see {@link AppliedSalesOrderDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesOrderDiscountDto extends AppliedSalesOrderDiscountModel {
	}
	/**
	 * Use to update an existing applied sales order item discount.
	 * @see {@link AppliedSalesOrderItemDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesOrderItemDiscountDto extends AppliedSalesOrderItemDiscountModel {
	}
	/**
	 * Use to update an existing applied sales quote discount.
	 * @see {@link AppliedSalesQuoteDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesQuoteDiscountDto extends AppliedSalesQuoteDiscountModel {
	}
	/**
	 * Use to update an existing applied sales quote item discount.
	 * @see {@link AppliedSalesQuoteItemDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesQuoteItemDiscountDto extends AppliedSalesQuoteItemDiscountModel {
	}
	/**
	 * Use to update an existing applied sales return discount.
	 * @see {@link AppliedSalesReturnDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesReturnDiscountDto extends AppliedSalesReturnDiscountModel {
	}
	/**
	 * Use to update an existing applied sales return item discount.
	 * @see {@link AppliedSalesReturnItemDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSalesReturnItemDiscountDto extends AppliedSalesReturnItemDiscountModel {
	}
	/**
	 * Use to update an existing applied sample request discount.
	 * @see {@link AppliedSampleRequestDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSampleRequestDiscountDto extends AppliedSampleRequestDiscountModel {
	}
	/**
	 * Use to update an existing applied sample request item discount.
	 * @see {@link AppliedSampleRequestItemDiscountModel}
	 * @public
	 */
	export interface UpdateAppliedSampleRequestItemDiscountDto extends AppliedSampleRequestItemDiscountModel {
	}
	/**
	 * Use to update an existing discount.
	 * @see {@link DiscountModel}
	 * @public
	 */
	export interface UpdateDiscountDto extends DiscountModel {
	}
	/**
	 * Use to update an existing discount account.
	 * @see {@link DiscountAccountModel}
	 * @public
	 */
	export interface UpdateDiscountAccountDto extends DiscountAccountModel {
	}
	/**
	 * Use to update an existing discount account type.
	 * @see {@link DiscountAccountTypeModel}
	 * @public
	 */
	export interface UpdateDiscountAccountTypeDto extends DiscountAccountTypeModel {
	}
	/**
	 * Use to update an existing discount brand.
	 * @see {@link DiscountBrandModel}
	 * @public
	 */
	export interface UpdateDiscountBrandDto extends DiscountBrandModel {
	}
	/**
	 * Use to update an existing discount category.
	 * @see {@link DiscountCategoryModel}
	 * @public
	 */
	export interface UpdateDiscountCategoryDto extends DiscountCategoryModel {
	}
	/**
	 * Use to update an existing discount code.
	 * @see {@link DiscountCodeModel}
	 * @public
	 */
	export interface UpdateDiscountCodeDto extends DiscountCodeModel {
	}
	/**
	 * Use to update an existing discount country.
	 * @see {@link DiscountCountryModel}
	 * @public
	 */
	export interface UpdateDiscountCountryDto extends DiscountCountryModel {
	}
	/**
	 * Use to update an existing discount franchise.
	 * @see {@link DiscountFranchiseModel}
	 * @public
	 */
	export interface UpdateDiscountFranchiseDto extends DiscountFranchiseModel {
	}
	/**
	 * Use to update an existing discount manufacturer.
	 * @see {@link DiscountManufacturerModel}
	 * @public
	 */
	export interface UpdateDiscountManufacturerDto extends DiscountManufacturerModel {
	}
	/**
	 * Use to update an existing discount product.
	 * @see {@link DiscountProductModel}
	 * @public
	 */
	export interface UpdateDiscountProductDto extends DiscountProductModel {
	}
	/**
	 * Use to update an existing discount product type.
	 * @see {@link DiscountProductTypeModel}
	 * @public
	 */
	export interface UpdateDiscountProductTypeDto extends DiscountProductTypeModel {
	}
	/**
	 * Use to update an existing discount ship carrier method.
	 * @see {@link DiscountShipCarrierMethodModel}
	 * @public
	 */
	export interface UpdateDiscountShipCarrierMethodDto extends DiscountShipCarrierMethodModel {
	}
	/**
	 * Use to update an existing discount store.
	 * @see {@link DiscountStoreModel}
	 * @public
	 */
	export interface UpdateDiscountStoreDto extends DiscountStoreModel {
	}
	/**
	 * Use to update an existing discount user.
	 * @see {@link DiscountUserModel}
	 * @public
	 */
	export interface UpdateDiscountUserDto extends DiscountUserModel {
	}
	/**
	 * Use to update an existing discount user role.
	 * @see {@link DiscountUserRoleModel}
	 * @public
	 */
	export interface UpdateDiscountUserRoleDto extends DiscountUserRoleModel {
	}
	/**
	 * Use to update an existing discount vendor.
	 * @see {@link DiscountVendorModel}
	 * @public
	 */
	export interface UpdateDiscountVendorDto extends DiscountVendorModel {
	}

	export class Discounts extends ServiceStackRoute {
		/**
		 * Use to determine if a discount code already exists
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckDiscountCodeExistsByCode
		 * @path <API Root>/Discounts/DiscountCodes/ExistsByCode
		 * @verb GET
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckDiscountCodeExistsByCode = (routeParams: CheckDiscountCodeExistsByCodeDto) => this.$http<number>({
			url: [this.rootUrl, "Discounts", "DiscountCodes", "ExistsByCode"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all applied cart discount calls.
		 * @param {@link cef.admin.api.ClearAppliedCartDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedCartDiscountCache
		 * @path <API Root>/Discounts/AppliedCartDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedCartDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied cart item discount calls.
		 * @param {@link cef.admin.api.ClearAppliedCartItemDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedCartItemDiscountCache
		 * @path <API Root>/Discounts/AppliedCartItemDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedCartItemDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied purchase order discount calls.
		 * @param {@link cef.admin.api.ClearAppliedPurchaseOrderDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedPurchaseOrderDiscountCache
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedPurchaseOrderDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied purchase order item discount calls.
		 * @param {@link cef.admin.api.ClearAppliedPurchaseOrderItemDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedPurchaseOrderItemDiscountCache
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedPurchaseOrderItemDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales invoice discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesInvoiceDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesInvoiceDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesInvoiceDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales invoice item discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesInvoiceItemDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesInvoiceItemDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesInvoiceItemDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales order discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesOrderDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesOrderDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesOrderDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales order item discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesOrderItemDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesOrderItemDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesOrderItemDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales quote discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesQuoteDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesQuoteDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesQuoteDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales quote item discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesQuoteItemDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesQuoteItemDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesQuoteItemDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales return discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesReturnDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesReturnDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesReturnDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sales return item discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSalesReturnItemDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSalesReturnItemDiscountCache
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSalesReturnItemDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sample request discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSampleRequestDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSampleRequestDiscountCache
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSampleRequestDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all applied sample request item discount calls.
		 * @param {@link cef.admin.api.ClearAppliedSampleRequestItemDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppliedSampleRequestItemDiscountCache
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppliedSampleRequestItemDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount account calls.
		 * @param {@link cef.admin.api.ClearDiscountAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountAccountCache
		 * @path <API Root>/Discounts/DiscountAccount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountAccount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount account type calls.
		 * @param {@link cef.admin.api.ClearDiscountAccountTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountAccountTypeCache
		 * @path <API Root>/Discounts/DiscountAccountType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountAccountTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountAccountType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount brand calls.
		 * @param {@link cef.admin.api.ClearDiscountBrandCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountBrandCache
		 * @path <API Root>/Discounts/DiscountBrand/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountBrandCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountBrand", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount calls.
		 * @param {@link cef.admin.api.ClearDiscountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountCache
		 * @path <API Root>/Discounts/Discount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "Discount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount category calls.
		 * @param {@link cef.admin.api.ClearDiscountCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountCategoryCache
		 * @path <API Root>/Discounts/DiscountCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount code calls.
		 * @param {@link cef.admin.api.ClearDiscountCodeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountCodeCache
		 * @path <API Root>/Discounts/DiscountCode/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountCodeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountCode", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount country calls.
		 * @param {@link cef.admin.api.ClearDiscountCountryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountCountryCache
		 * @path <API Root>/Discounts/DiscountCountry/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountCountryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountCountry", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount franchise calls.
		 * @param {@link cef.admin.api.ClearDiscountFranchiseCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountFranchiseCache
		 * @path <API Root>/Discounts/DiscountFranchise/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountFranchiseCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountFranchise", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount manufacturer calls.
		 * @param {@link cef.admin.api.ClearDiscountManufacturerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountManufacturerCache
		 * @path <API Root>/Discounts/DiscountManufacturer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountManufacturerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount product calls.
		 * @param {@link cef.admin.api.ClearDiscountProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountProductCache
		 * @path <API Root>/Discounts/DiscountProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount product type calls.
		 * @param {@link cef.admin.api.ClearDiscountProductTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountProductTypeCache
		 * @path <API Root>/Discounts/DiscountProductType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountProductTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountProductType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount ship carrier method calls.
		 * @param {@link cef.admin.api.ClearDiscountShipCarrierMethodCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountShipCarrierMethodCache
		 * @path <API Root>/Discounts/DiscountShipCarrierMethod/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountShipCarrierMethodCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethod", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount store calls.
		 * @param {@link cef.admin.api.ClearDiscountStoreCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountStoreCache
		 * @path <API Root>/Discounts/DiscountStore/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountStoreCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountStore", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount user calls.
		 * @param {@link cef.admin.api.ClearDiscountUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountUserCache
		 * @path <API Root>/Discounts/DiscountUser/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountUser", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount user role calls.
		 * @param {@link cef.admin.api.ClearDiscountUserRoleCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountUserRoleCache
		 * @path <API Root>/Discounts/DiscountUserRole/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountUserRoleCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountUserRole", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all discount vendor calls.
		 * @param {@link cef.admin.api.ClearDiscountVendorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearDiscountVendorCache
		 * @path <API Root>/Discounts/DiscountVendor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearDiscountVendorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Discounts", "DiscountVendor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new applied cart discount.
		 * @param {@link cef.admin.api.CreateAppliedCartDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedCartDiscount
		 * @path <API Root>/Discounts/AppliedCartDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedCartDiscount = (routeParams?: CreateAppliedCartDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied cart item discount.
		 * @param {@link cef.admin.api.CreateAppliedCartItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedCartItemDiscount
		 * @path <API Root>/Discounts/AppliedCartItemDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedCartItemDiscount = (routeParams?: CreateAppliedCartItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied purchase order discount.
		 * @param {@link cef.admin.api.CreateAppliedPurchaseOrderDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedPurchaseOrderDiscount
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedPurchaseOrderDiscount = (routeParams?: CreateAppliedPurchaseOrderDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied purchase order item discount.
		 * @param {@link cef.admin.api.CreateAppliedPurchaseOrderItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedPurchaseOrderItemDiscount
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedPurchaseOrderItemDiscount = (routeParams?: CreateAppliedPurchaseOrderItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales invoice discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesInvoiceDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesInvoiceDiscount
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesInvoiceDiscount = (routeParams?: CreateAppliedSalesInvoiceDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales invoice item discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesInvoiceItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesInvoiceItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesInvoiceItemDiscount = (routeParams?: CreateAppliedSalesInvoiceItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales order discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesOrderDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesOrderDiscount
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesOrderDiscount = (routeParams?: CreateAppliedSalesOrderDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales order item discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesOrderItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesOrderItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesOrderItemDiscount = (routeParams?: CreateAppliedSalesOrderItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales quote discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesQuoteDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesQuoteDiscount
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesQuoteDiscount = (routeParams?: CreateAppliedSalesQuoteDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales quote item discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesQuoteItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesQuoteItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesQuoteItemDiscount = (routeParams?: CreateAppliedSalesQuoteItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales return discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesReturnDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesReturnDiscount
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesReturnDiscount = (routeParams?: CreateAppliedSalesReturnDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sales return item discount.
		 * @param {@link cef.admin.api.CreateAppliedSalesReturnItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSalesReturnItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSalesReturnItemDiscount = (routeParams?: CreateAppliedSalesReturnItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sample request discount.
		 * @param {@link cef.admin.api.CreateAppliedSampleRequestDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSampleRequestDiscount
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSampleRequestDiscount = (routeParams?: CreateAppliedSampleRequestDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new applied sample request item discount.
		 * @param {@link cef.admin.api.CreateAppliedSampleRequestItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppliedSampleRequestItemDiscount
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppliedSampleRequestItemDiscount = (routeParams?: CreateAppliedSampleRequestItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount.
		 * @param {@link cef.admin.api.CreateDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscount
		 * @path <API Root>/Discounts/Discount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscount = (routeParams?: CreateDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "Discount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount account.
		 * @param {@link cef.admin.api.CreateDiscountAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountAccount
		 * @path <API Root>/Discounts/DiscountAccount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountAccount = (routeParams?: CreateDiscountAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountAccount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount account type.
		 * @param {@link cef.admin.api.CreateDiscountAccountTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountAccountType
		 * @path <API Root>/Discounts/DiscountAccountType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountAccountType = (routeParams?: CreateDiscountAccountTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountAccountType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount brand.
		 * @param {@link cef.admin.api.CreateDiscountBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountBrand
		 * @path <API Root>/Discounts/DiscountBrand/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountBrand = (routeParams?: CreateDiscountBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountBrand", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount category.
		 * @param {@link cef.admin.api.CreateDiscountCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountCategory
		 * @path <API Root>/Discounts/DiscountCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountCategory = (routeParams?: CreateDiscountCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount code.
		 * @param {@link cef.admin.api.CreateDiscountCodeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountCode
		 * @path <API Root>/Discounts/DiscountCode/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountCode = (routeParams?: CreateDiscountCodeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountCode", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount country.
		 * @param {@link cef.admin.api.CreateDiscountCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountCountry
		 * @path <API Root>/Discounts/DiscountCountry/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountCountry = (routeParams?: CreateDiscountCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountCountry", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount franchise.
		 * @param {@link cef.admin.api.CreateDiscountFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountFranchise
		 * @path <API Root>/Discounts/DiscountFranchise/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountFranchise = (routeParams?: CreateDiscountFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountFranchise", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount manufacturer.
		 * @param {@link cef.admin.api.CreateDiscountManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountManufacturer
		 * @path <API Root>/Discounts/DiscountManufacturer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountManufacturer = (routeParams?: CreateDiscountManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount product.
		 * @param {@link cef.admin.api.CreateDiscountProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountProduct
		 * @path <API Root>/Discounts/DiscountProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountProduct = (routeParams?: CreateDiscountProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount product type.
		 * @param {@link cef.admin.api.CreateDiscountProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountProductType
		 * @path <API Root>/Discounts/DiscountProductType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountProductType = (routeParams?: CreateDiscountProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountProductType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount ship carrier method.
		 * @param {@link cef.admin.api.CreateDiscountShipCarrierMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountShipCarrierMethod
		 * @path <API Root>/Discounts/DiscountShipCarrierMethod/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountShipCarrierMethod = (routeParams?: CreateDiscountShipCarrierMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethod", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount store.
		 * @param {@link cef.admin.api.CreateDiscountStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountStore
		 * @path <API Root>/Discounts/DiscountStore/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountStore = (routeParams?: CreateDiscountStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountStore", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount user.
		 * @param {@link cef.admin.api.CreateDiscountUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountUser
		 * @path <API Root>/Discounts/DiscountUser/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountUser = (routeParams?: CreateDiscountUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountUser", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount user role.
		 * @param {@link cef.admin.api.CreateDiscountUserRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountUserRole
		 * @path <API Root>/Discounts/DiscountUserRole/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountUserRole = (routeParams?: CreateDiscountUserRoleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountUserRole", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new discount vendor.
		 * @param {@link cef.admin.api.CreateDiscountVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateDiscountVendor
		 * @path <API Root>/Discounts/DiscountVendor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateDiscountVendor = (routeParams?: CreateDiscountVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountVendor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific applied cart discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedCartDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedCartDiscountByID
		 * @path <API Root>/Discounts/AppliedCartDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedCartDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied cart item discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedCartItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedCartItemDiscountByID
		 * @path <API Root>/Discounts/AppliedCartItemDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedCartItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied purchase order discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedPurchaseOrderDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedPurchaseOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedPurchaseOrderDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied purchase order item discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedPurchaseOrderItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedPurchaseOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedPurchaseOrderItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales invoice discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesInvoiceDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesInvoiceDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesInvoiceDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales invoice item discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesInvoiceItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesInvoiceItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesInvoiceItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales order discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesOrderDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesOrderDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales order item discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesOrderItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesOrderItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales quote discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesQuoteDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesQuoteDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesQuoteDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales quote item discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesQuoteItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesQuoteItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesQuoteItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales return discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesReturnDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesReturnDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesReturnDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sales return item discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSalesReturnItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSalesReturnItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSalesReturnItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sample request discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSampleRequestDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSampleRequestDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSampleRequestDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific applied sample request item discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppliedSampleRequestItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppliedSampleRequestItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppliedSampleRequestItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountAccountByID
		 * @path <API Root>/Discounts/DiscountAccount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountAccount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount account type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountAccountTypeByID
		 * @path <API Root>/Discounts/DiscountAccountType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountAccountType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount brand from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountBrandByID
		 * @path <API Root>/Discounts/DiscountBrand/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountBrand", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountByID
		 * @path <API Root>/Discounts/Discount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "Discount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountCategoryByID
		 * @path <API Root>/Discounts/DiscountCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount code from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountCodeByID
		 * @path <API Root>/Discounts/DiscountCode/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCode", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount country from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountCountryByID
		 * @path <API Root>/Discounts/DiscountCountry/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCountry", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount franchise from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountFranchiseByID
		 * @path <API Root>/Discounts/DiscountFranchise/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountFranchise", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount manufacturer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountManufacturerByID
		 * @path <API Root>/Discounts/DiscountManufacturer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountProductByID
		 * @path <API Root>/Discounts/DiscountProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount product type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountProductTypeByID
		 * @path <API Root>/Discounts/DiscountProductType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountProductType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount ship carrier method from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountShipCarrierMethodByID
		 * @path <API Root>/Discounts/DiscountShipCarrierMethod/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethod", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount store from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountStoreByID
		 * @path <API Root>/Discounts/DiscountStore/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountStore", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountUserByID
		 * @path <API Root>/Discounts/DiscountUser/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountUser", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount user role from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountUserRoleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountUserRoleByID
		 * @path <API Root>/Discounts/DiscountUserRole/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountUserRoleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountUserRole", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific discount vendor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateDiscountVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateDiscountVendorByID
		 * @path <API Root>/Discounts/DiscountVendor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateDiscountVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountVendor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific applied cart discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedCartDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedCartDiscountByID
		 * @path <API Root>/Discounts/AppliedCartDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedCartDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied cart item discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedCartItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedCartItemDiscountByID
		 * @path <API Root>/Discounts/AppliedCartItemDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedCartItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied purchase order discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedPurchaseOrderDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedPurchaseOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedPurchaseOrderDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied purchase order item discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedPurchaseOrderItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedPurchaseOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedPurchaseOrderItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales invoice discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesInvoiceDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesInvoiceDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesInvoiceDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales invoice item discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesInvoiceItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesInvoiceItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesInvoiceItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales order discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesOrderDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesOrderDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales order item discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesOrderItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesOrderItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales quote discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesQuoteDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesQuoteDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesQuoteDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales quote item discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesQuoteItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesQuoteItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesQuoteItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales return discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesReturnDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesReturnDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesReturnDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sales return item discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSalesReturnItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSalesReturnItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSalesReturnItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sample request discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSampleRequestDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSampleRequestDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSampleRequestDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific applied sample request item discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppliedSampleRequestItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppliedSampleRequestItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppliedSampleRequestItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountAccountByID
		 * @path <API Root>/Discounts/DiscountAccount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountAccount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount account type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountAccountTypeByID
		 * @path <API Root>/Discounts/DiscountAccountType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountAccountType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount brand from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountBrandByID
		 * @path <API Root>/Discounts/DiscountBrand/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountBrand", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountByID
		 * @path <API Root>/Discounts/Discount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "Discount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountCategoryByID
		 * @path <API Root>/Discounts/DiscountCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount code from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountCodeByID
		 * @path <API Root>/Discounts/DiscountCode/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCode", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount country from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountCountryByID
		 * @path <API Root>/Discounts/DiscountCountry/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCountry", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount franchise from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountFranchiseByID
		 * @path <API Root>/Discounts/DiscountFranchise/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountFranchise", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount manufacturer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountManufacturerByID
		 * @path <API Root>/Discounts/DiscountManufacturer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountProductByID
		 * @path <API Root>/Discounts/DiscountProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount product type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountProductTypeByID
		 * @path <API Root>/Discounts/DiscountProductType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountProductType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount ship carrier method from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountShipCarrierMethodByID
		 * @path <API Root>/Discounts/DiscountShipCarrierMethod/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethod", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount store from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountStoreByID
		 * @path <API Root>/Discounts/DiscountStore/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountStore", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountUserByID
		 * @path <API Root>/Discounts/DiscountUser/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountUser", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount user role from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountUserRoleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountUserRoleByID
		 * @path <API Root>/Discounts/DiscountUserRole/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountUserRoleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountUserRole", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific discount vendor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteDiscountVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteDiscountVendorByID
		 * @path <API Root>/Discounts/DiscountVendor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteDiscountVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountVendor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to end an existing discount by ID.
		 * @param {@link cef.admin.api.EndDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.EndDiscountByID
		 * @path <API Root>/Discounts/Discount/End/ID/{ID}
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<boolean>>}
		 * @public
		 */
		EndDiscountByID = (id: number) => this.$http<CEFActionResponseT<boolean>>({
			url: [this.rootUrl, "Discounts", "Discount", "End", "ID", id].join("/"),
			method: "PUT",
		});

		/**
		 * Use to get a specific applied cart discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedCartDiscountByID
		 * @path <API Root>/Discounts/AppliedCartDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedCartDiscountModel>}
		 * @public
		 */
		GetAppliedCartDiscountByID = (id: number) => this.$http<AppliedCartDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied cart discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedCartDiscounts
		 * @path <API Root>/Discounts/AppliedCartDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedCartDiscountPagedResults>}
		 * @public
		 */
		GetAppliedCartDiscounts = (routeParams?: GetAppliedCartDiscountsDto) => this.$http<AppliedCartDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied cart item discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedCartItemDiscountByID
		 * @path <API Root>/Discounts/AppliedCartItemDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedCartItemDiscountModel>}
		 * @public
		 */
		GetAppliedCartItemDiscountByID = (id: number) => this.$http<AppliedCartItemDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied cart item discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedCartItemDiscounts
		 * @path <API Root>/Discounts/AppliedCartItemDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedCartItemDiscountPagedResults>}
		 * @public
		 */
		GetAppliedCartItemDiscounts = (routeParams?: GetAppliedCartItemDiscountsDto) => this.$http<AppliedCartItemDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied purchase order discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedPurchaseOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedPurchaseOrderDiscountModel>}
		 * @public
		 */
		GetAppliedPurchaseOrderDiscountByID = (id: number) => this.$http<AppliedPurchaseOrderDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied purchase order discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedPurchaseOrderDiscounts
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedPurchaseOrderDiscountPagedResults>}
		 * @public
		 */
		GetAppliedPurchaseOrderDiscounts = (routeParams?: GetAppliedPurchaseOrderDiscountsDto) => this.$http<AppliedPurchaseOrderDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied purchase order item discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedPurchaseOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedPurchaseOrderItemDiscountModel>}
		 * @public
		 */
		GetAppliedPurchaseOrderItemDiscountByID = (id: number) => this.$http<AppliedPurchaseOrderItemDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied purchase order item discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedPurchaseOrderItemDiscounts
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedPurchaseOrderItemDiscountPagedResults>}
		 * @public
		 */
		GetAppliedPurchaseOrderItemDiscounts = (routeParams?: GetAppliedPurchaseOrderItemDiscountsDto) => this.$http<AppliedPurchaseOrderItemDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales invoice discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesInvoiceDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesInvoiceDiscountModel>}
		 * @public
		 */
		GetAppliedSalesInvoiceDiscountByID = (id: number) => this.$http<AppliedSalesInvoiceDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales invoice discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesInvoiceDiscounts
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesInvoiceDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesInvoiceDiscounts = (routeParams?: GetAppliedSalesInvoiceDiscountsDto) => this.$http<AppliedSalesInvoiceDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales invoice item discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesInvoiceItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesInvoiceItemDiscountModel>}
		 * @public
		 */
		GetAppliedSalesInvoiceItemDiscountByID = (id: number) => this.$http<AppliedSalesInvoiceItemDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales invoice item discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesInvoiceItemDiscounts
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesInvoiceItemDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesInvoiceItemDiscounts = (routeParams?: GetAppliedSalesInvoiceItemDiscountsDto) => this.$http<AppliedSalesInvoiceItemDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales order discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesOrderDiscountModel>}
		 * @public
		 */
		GetAppliedSalesOrderDiscountByID = (id: number) => this.$http<AppliedSalesOrderDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales order discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesOrderDiscounts
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesOrderDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesOrderDiscounts = (routeParams?: GetAppliedSalesOrderDiscountsDto) => this.$http<AppliedSalesOrderDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales order item discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesOrderItemDiscountModel>}
		 * @public
		 */
		GetAppliedSalesOrderItemDiscountByID = (id: number) => this.$http<AppliedSalesOrderItemDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales order item discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesOrderItemDiscounts
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesOrderItemDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesOrderItemDiscounts = (routeParams?: GetAppliedSalesOrderItemDiscountsDto) => this.$http<AppliedSalesOrderItemDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales quote discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesQuoteDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesQuoteDiscountModel>}
		 * @public
		 */
		GetAppliedSalesQuoteDiscountByID = (id: number) => this.$http<AppliedSalesQuoteDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales quote discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesQuoteDiscounts
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesQuoteDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesQuoteDiscounts = (routeParams?: GetAppliedSalesQuoteDiscountsDto) => this.$http<AppliedSalesQuoteDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales quote item discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesQuoteItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesQuoteItemDiscountModel>}
		 * @public
		 */
		GetAppliedSalesQuoteItemDiscountByID = (id: number) => this.$http<AppliedSalesQuoteItemDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales quote item discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesQuoteItemDiscounts
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesQuoteItemDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesQuoteItemDiscounts = (routeParams?: GetAppliedSalesQuoteItemDiscountsDto) => this.$http<AppliedSalesQuoteItemDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales return discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesReturnDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesReturnDiscountModel>}
		 * @public
		 */
		GetAppliedSalesReturnDiscountByID = (id: number) => this.$http<AppliedSalesReturnDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales return discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesReturnDiscounts
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesReturnDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesReturnDiscounts = (routeParams?: GetAppliedSalesReturnDiscountsDto) => this.$http<AppliedSalesReturnDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sales return item discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesReturnItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesReturnItemDiscountModel>}
		 * @public
		 */
		GetAppliedSalesReturnItemDiscountByID = (id: number) => this.$http<AppliedSalesReturnItemDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sales return item discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSalesReturnItemDiscounts
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSalesReturnItemDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSalesReturnItemDiscounts = (routeParams?: GetAppliedSalesReturnItemDiscountsDto) => this.$http<AppliedSalesReturnItemDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sample request discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSampleRequestDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSampleRequestDiscountModel>}
		 * @public
		 */
		GetAppliedSampleRequestDiscountByID = (id: number) => this.$http<AppliedSampleRequestDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sample request discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSampleRequestDiscounts
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSampleRequestDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSampleRequestDiscounts = (routeParams?: GetAppliedSampleRequestDiscountsDto) => this.$http<AppliedSampleRequestDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific applied sample request item discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSampleRequestItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSampleRequestItemDiscountModel>}
		 * @public
		 */
		GetAppliedSampleRequestItemDiscountByID = (id: number) => this.$http<AppliedSampleRequestItemDiscountModel>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of applied sample request item discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppliedSampleRequestItemDiscounts
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppliedSampleRequestItemDiscountPagedResults>}
		 * @public
		 */
		GetAppliedSampleRequestItemDiscounts = (routeParams?: GetAppliedSampleRequestItemDiscountsDto) => this.$http<AppliedSampleRequestItemDiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountAccountByID
		 * @path <API Root>/Discounts/DiscountAccount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountAccountModel>}
		 * @public
		 */
		GetDiscountAccountByID = (id: number) => this.$http<DiscountAccountModel>({
			url: [this.rootUrl, "Discounts", "DiscountAccount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountAccounts
		 * @path <API Root>/Discounts/DiscountAccounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountAccountPagedResults>}
		 * @public
		 */
		GetDiscountAccounts = (routeParams?: GetDiscountAccountsDto) => this.$http<DiscountAccountPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountAccounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount account type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountAccountTypeByID
		 * @path <API Root>/Discounts/DiscountAccountType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountAccountTypeModel>}
		 * @public
		 */
		GetDiscountAccountTypeByID = (id: number) => this.$http<DiscountAccountTypeModel>({
			url: [this.rootUrl, "Discounts", "DiscountAccountType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount account types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountAccountTypes
		 * @path <API Root>/Discounts/DiscountAccountTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountAccountTypePagedResults>}
		 * @public
		 */
		GetDiscountAccountTypes = (routeParams?: GetDiscountAccountTypesDto) => this.$http<DiscountAccountTypePagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountAccountTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount brand
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountBrandByID
		 * @path <API Root>/Discounts/DiscountBrand/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountBrandModel>}
		 * @public
		 */
		GetDiscountBrandByID = (id: number) => this.$http<DiscountBrandModel>({
			url: [this.rootUrl, "Discounts", "DiscountBrand", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount brands
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountBrands
		 * @path <API Root>/Discounts/DiscountBrands
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountBrandPagedResults>}
		 * @public
		 */
		GetDiscountBrands = (routeParams?: GetDiscountBrandsDto) => this.$http<DiscountBrandPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountBrands"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountByID
		 * @path <API Root>/Discounts/Discount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountModel>}
		 * @public
		 */
		GetDiscountByID = (id: number) => this.$http<DiscountModel>({
			url: [this.rootUrl, "Discounts", "Discount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountCategories
		 * @path <API Root>/Discounts/DiscountCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountCategoryPagedResults>}
		 * @public
		 */
		GetDiscountCategories = (routeParams?: GetDiscountCategoriesDto) => this.$http<DiscountCategoryPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountCategoryByID
		 * @path <API Root>/Discounts/DiscountCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountCategoryModel>}
		 * @public
		 */
		GetDiscountCategoryByID = (id: number) => this.$http<DiscountCategoryModel>({
			url: [this.rootUrl, "Discounts", "DiscountCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific discount code
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountCodeByID
		 * @path <API Root>/Discounts/DiscountCode/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountCodeModel>}
		 * @public
		 */
		GetDiscountCodeByID = (id: number) => this.$http<DiscountCodeModel>({
			url: [this.rootUrl, "Discounts", "DiscountCode", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount codes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountCodes
		 * @path <API Root>/Discounts/DiscountCodes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountCodePagedResults>}
		 * @public
		 */
		GetDiscountCodes = (routeParams?: GetDiscountCodesDto) => this.$http<DiscountCodePagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountCodes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of discount countries
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountCountries
		 * @path <API Root>/Discounts/DiscountCountries
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountCountryPagedResults>}
		 * @public
		 */
		GetDiscountCountries = (routeParams?: GetDiscountCountriesDto) => this.$http<DiscountCountryPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountCountries"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount country
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountCountryByID
		 * @path <API Root>/Discounts/DiscountCountry/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountCountryModel>}
		 * @public
		 */
		GetDiscountCountryByID = (id: number) => this.$http<DiscountCountryModel>({
			url: [this.rootUrl, "Discounts", "DiscountCountry", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific discount franchise
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountFranchiseByID
		 * @path <API Root>/Discounts/DiscountFranchise/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountFranchiseModel>}
		 * @public
		 */
		GetDiscountFranchiseByID = (id: number) => this.$http<DiscountFranchiseModel>({
			url: [this.rootUrl, "Discounts", "DiscountFranchise", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount franchises
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountFranchises
		 * @path <API Root>/Discounts/DiscountFranchises
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountFranchisePagedResults>}
		 * @public
		 */
		GetDiscountFranchises = (routeParams?: GetDiscountFranchisesDto) => this.$http<DiscountFranchisePagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountFranchises"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount manufacturer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountManufacturerByID
		 * @path <API Root>/Discounts/DiscountManufacturer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountManufacturerModel>}
		 * @public
		 */
		GetDiscountManufacturerByID = (id: number) => this.$http<DiscountManufacturerModel>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount manufacturers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountManufacturers
		 * @path <API Root>/Discounts/DiscountManufacturers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountManufacturerPagedResults>}
		 * @public
		 */
		GetDiscountManufacturers = (routeParams?: GetDiscountManufacturersDto) => this.$http<DiscountManufacturerPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountProductByID
		 * @path <API Root>/Discounts/DiscountProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountProductModel>}
		 * @public
		 */
		GetDiscountProductByID = (id: number) => this.$http<DiscountProductModel>({
			url: [this.rootUrl, "Discounts", "DiscountProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountProducts
		 * @path <API Root>/Discounts/DiscountProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountProductPagedResults>}
		 * @public
		 */
		GetDiscountProducts = (routeParams?: GetDiscountProductsDto) => this.$http<DiscountProductPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount product type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountProductTypeByID
		 * @path <API Root>/Discounts/DiscountProductType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountProductTypeModel>}
		 * @public
		 */
		GetDiscountProductTypeByID = (id: number) => this.$http<DiscountProductTypeModel>({
			url: [this.rootUrl, "Discounts", "DiscountProductType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount product types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountProductTypes
		 * @path <API Root>/Discounts/DiscountProductTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountProductTypePagedResults>}
		 * @public
		 */
		GetDiscountProductTypes = (routeParams?: GetDiscountProductTypesDto) => this.$http<DiscountProductTypePagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountProductTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of discounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscounts
		 * @path <API Root>/Discounts/Discounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountPagedResults>}
		 * @public
		 */
		GetDiscounts = (routeParams: GetDiscountsDto) => this.$http<DiscountPagedResults>({
			url: [this.rootUrl, "Discounts", "Discounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount ship carrier method
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountShipCarrierMethodByID
		 * @path <API Root>/Discounts/DiscountShipCarrierMethod/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountShipCarrierMethodModel>}
		 * @public
		 */
		GetDiscountShipCarrierMethodByID = (id: number) => this.$http<DiscountShipCarrierMethodModel>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethod", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount ship carrier methods
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountShipCarrierMethods
		 * @path <API Root>/Discounts/DiscountShipCarrierMethods
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountShipCarrierMethodPagedResults>}
		 * @public
		 */
		GetDiscountShipCarrierMethods = (routeParams?: GetDiscountShipCarrierMethodsDto) => this.$http<DiscountShipCarrierMethodPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethods"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountStoreByID
		 * @path <API Root>/Discounts/DiscountStore/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountStoreModel>}
		 * @public
		 */
		GetDiscountStoreByID = (id: number) => this.$http<DiscountStoreModel>({
			url: [this.rootUrl, "Discounts", "DiscountStore", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount stores
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountStores
		 * @path <API Root>/Discounts/DiscountStores
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountStorePagedResults>}
		 * @public
		 */
		GetDiscountStores = (routeParams?: GetDiscountStoresDto) => this.$http<DiscountStorePagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountStores"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountUserByID
		 * @path <API Root>/Discounts/DiscountUser/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountUserModel>}
		 * @public
		 */
		GetDiscountUserByID = (id: number) => this.$http<DiscountUserModel>({
			url: [this.rootUrl, "Discounts", "DiscountUser", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific discount user role
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountUserRoleByID
		 * @path <API Root>/Discounts/DiscountUserRole/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountUserRoleModel>}
		 * @public
		 */
		GetDiscountUserRoleByID = (id: number) => this.$http<DiscountUserRoleModel>({
			url: [this.rootUrl, "Discounts", "DiscountUserRole", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount user roles
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountUserRoles
		 * @path <API Root>/Discounts/DiscountUserRoles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountUserRolePagedResults>}
		 * @public
		 */
		GetDiscountUserRoles = (routeParams?: GetDiscountUserRolesDto) => this.$http<DiscountUserRolePagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountUserRoles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of discount users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountUsers
		 * @path <API Root>/Discounts/DiscountUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountUserPagedResults>}
		 * @public
		 */
		GetDiscountUsers = (routeParams?: GetDiscountUsersDto) => this.$http<DiscountUserPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific discount vendor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountVendorByID
		 * @path <API Root>/Discounts/DiscountVendor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountVendorModel>}
		 * @public
		 */
		GetDiscountVendorByID = (id: number) => this.$http<DiscountVendorModel>({
			url: [this.rootUrl, "Discounts", "DiscountVendor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of discount vendors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountVendors
		 * @path <API Root>/Discounts/DiscountVendors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DiscountVendorPagedResults>}
		 * @public
		 */
		GetDiscountVendors = (routeParams?: GetDiscountVendorsDto) => this.$http<DiscountVendorPagedResults>({
			url: [this.rootUrl, "Discounts", "DiscountVendors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific applied cart discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedCartDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedCartDiscountByID
		 * @path <API Root>/Discounts/AppliedCartDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedCartDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied cart item discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedCartItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedCartItemDiscountByID
		 * @path <API Root>/Discounts/AppliedCartItemDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedCartItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied purchase order discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedPurchaseOrderDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedPurchaseOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedPurchaseOrderDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied purchase order item discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedPurchaseOrderItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedPurchaseOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedPurchaseOrderItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales invoice discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesInvoiceDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesInvoiceDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesInvoiceDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales invoice item discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesInvoiceItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesInvoiceItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesInvoiceItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales order discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesOrderDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesOrderDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesOrderDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales order item discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesOrderItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesOrderItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesOrderItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales quote discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesQuoteDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesQuoteDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesQuoteDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales quote item discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesQuoteItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesQuoteItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesQuoteItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales return discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesReturnDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesReturnDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesReturnDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sales return item discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSalesReturnItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSalesReturnItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSalesReturnItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sample request discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSampleRequestDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSampleRequestDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSampleRequestDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific applied sample request item discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppliedSampleRequestItemDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppliedSampleRequestItemDiscountByID
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppliedSampleRequestItemDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountAccountByID
		 * @path <API Root>/Discounts/DiscountAccount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountAccount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount account type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountAccountTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountAccountTypeByID
		 * @path <API Root>/Discounts/DiscountAccountType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountAccountTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountAccountType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount brand from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountBrandByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountBrandByID
		 * @path <API Root>/Discounts/DiscountBrand/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountBrandByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountBrand", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountByID
		 * @path <API Root>/Discounts/Discount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "Discount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountCategoryByID
		 * @path <API Root>/Discounts/DiscountCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount code from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountCodeByID
		 * @path <API Root>/Discounts/DiscountCode/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCode", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount country from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountCountryByID
		 * @path <API Root>/Discounts/DiscountCountry/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountCountry", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount franchise from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountFranchiseByID
		 * @path <API Root>/Discounts/DiscountFranchise/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountFranchise", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount manufacturer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountManufacturerByID
		 * @path <API Root>/Discounts/DiscountManufacturer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountProductByID
		 * @path <API Root>/Discounts/DiscountProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount product type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountProductTypeByID
		 * @path <API Root>/Discounts/DiscountProductType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountProductType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount ship carrier method from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountShipCarrierMethodByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountShipCarrierMethodByID
		 * @path <API Root>/Discounts/DiscountShipCarrierMethod/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountShipCarrierMethodByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethod", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount store from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountStoreByID
		 * @path <API Root>/Discounts/DiscountStore/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountStore", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountUserByID
		 * @path <API Root>/Discounts/DiscountUser/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountUser", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount user role from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountUserRoleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountUserRoleByID
		 * @path <API Root>/Discounts/DiscountUserRole/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountUserRoleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountUserRole", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific discount vendor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateDiscountVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateDiscountVendorByID
		 * @path <API Root>/Discounts/DiscountVendor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateDiscountVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Discounts", "DiscountVendor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing applied cart discount.
		 * @param {@link cef.admin.api.UpdateAppliedCartDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedCartDiscount
		 * @path <API Root>/Discounts/AppliedCartDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedCartDiscount = (routeParams?: UpdateAppliedCartDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedCartDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied cart item discount.
		 * @param {@link cef.admin.api.UpdateAppliedCartItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedCartItemDiscount
		 * @path <API Root>/Discounts/AppliedCartItemDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedCartItemDiscount = (routeParams?: UpdateAppliedCartItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedCartItemDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied purchase order discount.
		 * @param {@link cef.admin.api.UpdateAppliedPurchaseOrderDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedPurchaseOrderDiscount
		 * @path <API Root>/Discounts/AppliedPurchaseOrderDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedPurchaseOrderDiscount = (routeParams?: UpdateAppliedPurchaseOrderDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied purchase order item discount.
		 * @param {@link cef.admin.api.UpdateAppliedPurchaseOrderItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedPurchaseOrderItemDiscount
		 * @path <API Root>/Discounts/AppliedPurchaseOrderItemDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedPurchaseOrderItemDiscount = (routeParams?: UpdateAppliedPurchaseOrderItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedPurchaseOrderItemDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales invoice discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesInvoiceDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesInvoiceDiscount
		 * @path <API Root>/Discounts/AppliedSalesInvoiceDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesInvoiceDiscount = (routeParams?: UpdateAppliedSalesInvoiceDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales invoice item discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesInvoiceItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesInvoiceItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesInvoiceItemDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesInvoiceItemDiscount = (routeParams?: UpdateAppliedSalesInvoiceItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesInvoiceItemDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales order discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesOrderDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesOrderDiscount
		 * @path <API Root>/Discounts/AppliedSalesOrderDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesOrderDiscount = (routeParams?: UpdateAppliedSalesOrderDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales order item discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesOrderItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesOrderItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesOrderItemDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesOrderItemDiscount = (routeParams?: UpdateAppliedSalesOrderItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesOrderItemDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales quote discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesQuoteDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesQuoteDiscount
		 * @path <API Root>/Discounts/AppliedSalesQuoteDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesQuoteDiscount = (routeParams?: UpdateAppliedSalesQuoteDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales quote item discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesQuoteItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesQuoteItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesQuoteItemDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesQuoteItemDiscount = (routeParams?: UpdateAppliedSalesQuoteItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesQuoteItemDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales return discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesReturnDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesReturnDiscount
		 * @path <API Root>/Discounts/AppliedSalesReturnDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesReturnDiscount = (routeParams?: UpdateAppliedSalesReturnDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sales return item discount.
		 * @param {@link cef.admin.api.UpdateAppliedSalesReturnItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSalesReturnItemDiscount
		 * @path <API Root>/Discounts/AppliedSalesReturnItemDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSalesReturnItemDiscount = (routeParams?: UpdateAppliedSalesReturnItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSalesReturnItemDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sample request discount.
		 * @param {@link cef.admin.api.UpdateAppliedSampleRequestDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSampleRequestDiscount
		 * @path <API Root>/Discounts/AppliedSampleRequestDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSampleRequestDiscount = (routeParams?: UpdateAppliedSampleRequestDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing applied sample request item discount.
		 * @param {@link cef.admin.api.UpdateAppliedSampleRequestItemDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppliedSampleRequestItemDiscount
		 * @path <API Root>/Discounts/AppliedSampleRequestItemDiscount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppliedSampleRequestItemDiscount = (routeParams?: UpdateAppliedSampleRequestItemDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "AppliedSampleRequestItemDiscount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount.
		 * @param {@link cef.admin.api.UpdateDiscountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscount
		 * @path <API Root>/Discounts/Discount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscount = (routeParams?: UpdateDiscountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "Discount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount account.
		 * @param {@link cef.admin.api.UpdateDiscountAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountAccount
		 * @path <API Root>/Discounts/DiscountAccount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountAccount = (routeParams?: UpdateDiscountAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountAccount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount account type.
		 * @param {@link cef.admin.api.UpdateDiscountAccountTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountAccountType
		 * @path <API Root>/Discounts/DiscountAccountType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountAccountType = (routeParams?: UpdateDiscountAccountTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountAccountType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount brand.
		 * @param {@link cef.admin.api.UpdateDiscountBrandDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountBrand
		 * @path <API Root>/Discounts/DiscountBrand/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountBrand = (routeParams?: UpdateDiscountBrandDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountBrand", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount category.
		 * @param {@link cef.admin.api.UpdateDiscountCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountCategory
		 * @path <API Root>/Discounts/DiscountCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountCategory = (routeParams?: UpdateDiscountCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount code.
		 * @param {@link cef.admin.api.UpdateDiscountCodeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountCode
		 * @path <API Root>/Discounts/DiscountCode/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountCode = (routeParams?: UpdateDiscountCodeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountCode", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount country.
		 * @param {@link cef.admin.api.UpdateDiscountCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountCountry
		 * @path <API Root>/Discounts/DiscountCountry/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountCountry = (routeParams?: UpdateDiscountCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountCountry", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount franchise.
		 * @param {@link cef.admin.api.UpdateDiscountFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountFranchise
		 * @path <API Root>/Discounts/DiscountFranchise/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountFranchise = (routeParams?: UpdateDiscountFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountFranchise", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount manufacturer.
		 * @param {@link cef.admin.api.UpdateDiscountManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountManufacturer
		 * @path <API Root>/Discounts/DiscountManufacturer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountManufacturer = (routeParams?: UpdateDiscountManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountManufacturer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount product.
		 * @param {@link cef.admin.api.UpdateDiscountProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountProduct
		 * @path <API Root>/Discounts/DiscountProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountProduct = (routeParams?: UpdateDiscountProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount product type.
		 * @param {@link cef.admin.api.UpdateDiscountProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountProductType
		 * @path <API Root>/Discounts/DiscountProductType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountProductType = (routeParams?: UpdateDiscountProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountProductType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount ship carrier method.
		 * @param {@link cef.admin.api.UpdateDiscountShipCarrierMethodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountShipCarrierMethod
		 * @path <API Root>/Discounts/DiscountShipCarrierMethod/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountShipCarrierMethod = (routeParams?: UpdateDiscountShipCarrierMethodDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountShipCarrierMethod", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount store.
		 * @param {@link cef.admin.api.UpdateDiscountStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountStore
		 * @path <API Root>/Discounts/DiscountStore/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountStore = (routeParams?: UpdateDiscountStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountStore", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount user.
		 * @param {@link cef.admin.api.UpdateDiscountUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountUser
		 * @path <API Root>/Discounts/DiscountUser/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountUser = (routeParams?: UpdateDiscountUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount user role.
		 * @param {@link cef.admin.api.UpdateDiscountUserRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountUserRole
		 * @path <API Root>/Discounts/DiscountUserRole/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountUserRole = (routeParams?: UpdateDiscountUserRoleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountUserRole", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing discount vendor.
		 * @param {@link cef.admin.api.UpdateDiscountVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateDiscountVendor
		 * @path <API Root>/Discounts/DiscountVendor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateDiscountVendor = (routeParams?: UpdateDiscountVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Discounts", "DiscountVendor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
