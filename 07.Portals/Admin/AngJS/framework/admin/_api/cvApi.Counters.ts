/**
 * @file framework/admin/_api/cvApi.Counters.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new counter.
	 * @see {@link CounterModel}
	 * @public
	 */
	export interface CreateCounterDto extends CounterModel {
	}
	/**
	 * Use to create a new counter log.
	 * @see {@link CounterLogModel}
	 * @public
	 */
	export interface CreateCounterLogDto extends CounterLogModel {
	}
	/**
	 * Use to create a new counter log type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCounterLogTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new counter type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCounterTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of counter logs
	 * @see {@link CounterLogSearchModel}
	 * @public
	 */
	export interface GetCounterLogsDto extends CounterLogSearchModel {
	}
	/**
	 * Use to get a list of counter log types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCounterLogTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of counters
	 * @see {@link CounterSearchModel}
	 * @public
	 */
	export interface GetCountersDto extends CounterSearchModel {
	}
	/**
	 * Use to get a list of counter types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCounterTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing counter.
	 * @see {@link CounterModel}
	 * @public
	 */
	export interface UpdateCounterDto extends CounterModel {
	}
	/**
	 * Use to update an existing counter log.
	 * @see {@link CounterLogModel}
	 * @public
	 */
	export interface UpdateCounterLogDto extends CounterLogModel {
	}
	/**
	 * Use to update an existing counter log type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCounterLogTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing counter type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCounterTypeDto extends TypeModel {
	}

	export class Counters extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all counter calls.
		 * @param {@link cef.admin.api.ClearCounterCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCounterCache
		 * @path <API Root>/Counters/Counter/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCounterCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Counters", "Counter", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all counter log calls.
		 * @param {@link cef.admin.api.ClearCounterLogCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCounterLogCache
		 * @path <API Root>/Counters/CounterLog/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCounterLogCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Counters", "CounterLog", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all counter log type calls.
		 * @param {@link cef.admin.api.ClearCounterLogTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCounterLogTypeCache
		 * @path <API Root>/Counters/CounterLogType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCounterLogTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Counters", "CounterLogType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all counter type calls.
		 * @param {@link cef.admin.api.ClearCounterTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCounterTypeCache
		 * @path <API Root>/Counters/CounterType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCounterTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Counters", "CounterType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new counter.
		 * @param {@link cef.admin.api.CreateCounterDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCounter
		 * @path <API Root>/Counters/Counter/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCounter = (routeParams?: CreateCounterDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "Counter", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new counter log.
		 * @param {@link cef.admin.api.CreateCounterLogDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCounterLog
		 * @path <API Root>/Counters/CounterLog/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCounterLog = (routeParams?: CreateCounterLogDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "CounterLog", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new counter log type.
		 * @param {@link cef.admin.api.CreateCounterLogTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCounterLogType
		 * @path <API Root>/Counters/CounterLogType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCounterLogType = (routeParams?: CreateCounterLogTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "CounterLogType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new counter type.
		 * @param {@link cef.admin.api.CreateCounterTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCounterType
		 * @path <API Root>/Counters/CounterType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCounterType = (routeParams?: CreateCounterTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "CounterType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific counter from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCounterByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCounterByID
		 * @path <API Root>/Counters/Counter/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCounterByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "Counter", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific counter log from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCounterLogByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCounterLogByID
		 * @path <API Root>/Counters/CounterLog/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCounterLogByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterLog", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific counter log type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCounterLogTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCounterLogTypeByID
		 * @path <API Root>/Counters/CounterLogType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCounterLogTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterLogType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific counter type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCounterTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCounterTypeByID
		 * @path <API Root>/Counters/CounterType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCounterTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific counter from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCounterByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCounterByID
		 * @path <API Root>/Counters/Counter/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCounterByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "Counter", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific counter log from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCounterLogByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCounterLogByID
		 * @path <API Root>/Counters/CounterLog/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCounterLogByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterLog", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific counter log type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCounterLogTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCounterLogTypeByID
		 * @path <API Root>/Counters/CounterLogType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCounterLogTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterLogType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific counter type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCounterTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCounterTypeByID
		 * @path <API Root>/Counters/CounterType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCounterTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific counter
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounterByID
		 * @path <API Root>/Counters/Counter/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CounterModel>}
		 * @public
		 */
		GetCounterByID = (id: number) => this.$http<CounterModel>({
			url: [this.rootUrl, "Counters", "Counter", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific counter log
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounterLogByID
		 * @path <API Root>/Counters/CounterLog/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CounterLogModel>}
		 * @public
		 */
		GetCounterLogByID = (id: number) => this.$http<CounterLogModel>({
			url: [this.rootUrl, "Counters", "CounterLog", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of counter logs
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounterLogs
		 * @path <API Root>/Counters/CounterLogs
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CounterLogPagedResults>}
		 * @public
		 */
		GetCounterLogs = (routeParams?: GetCounterLogsDto) => this.$http<CounterLogPagedResults>({
			url: [this.rootUrl, "Counters", "CounterLogs"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific counter log type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounterLogTypeByID
		 * @path <API Root>/Counters/CounterLogType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCounterLogTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Counters", "CounterLogType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of counter log types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounterLogTypes
		 * @path <API Root>/Counters/CounterLogTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CounterLogTypePagedResults>}
		 * @public
		 */
		GetCounterLogTypes = (routeParams?: GetCounterLogTypesDto) => this.$http<CounterLogTypePagedResults>({
			url: [this.rootUrl, "Counters", "CounterLogTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of counters
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounters
		 * @path <API Root>/Counters/Counters
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CounterPagedResults>}
		 * @public
		 */
		GetCounters = (routeParams?: GetCountersDto) => this.$http<CounterPagedResults>({
			url: [this.rootUrl, "Counters", "Counters"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific counter type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounterTypeByID
		 * @path <API Root>/Counters/CounterType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCounterTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Counters", "CounterType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of counter types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCounterTypes
		 * @path <API Root>/Counters/CounterTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CounterTypePagedResults>}
		 * @public
		 */
		GetCounterTypes = (routeParams?: GetCounterTypesDto) => this.$http<CounterTypePagedResults>({
			url: [this.rootUrl, "Counters", "CounterTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific counter from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCounterByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCounterByID
		 * @path <API Root>/Counters/Counter/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCounterByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "Counter", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific counter log from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCounterLogByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCounterLogByID
		 * @path <API Root>/Counters/CounterLog/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCounterLogByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterLog", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific counter log type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCounterLogTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCounterLogTypeByID
		 * @path <API Root>/Counters/CounterLogType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCounterLogTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterLogType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific counter type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCounterTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCounterTypeByID
		 * @path <API Root>/Counters/CounterType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCounterTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Counters", "CounterType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing counter.
		 * @param {@link cef.admin.api.UpdateCounterDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCounter
		 * @path <API Root>/Counters/Counter/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCounter = (routeParams?: UpdateCounterDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "Counter", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing counter log.
		 * @param {@link cef.admin.api.UpdateCounterLogDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCounterLog
		 * @path <API Root>/Counters/CounterLog/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCounterLog = (routeParams?: UpdateCounterLogDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "CounterLog", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing counter log type.
		 * @param {@link cef.admin.api.UpdateCounterLogTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCounterLogType
		 * @path <API Root>/Counters/CounterLogType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCounterLogType = (routeParams?: UpdateCounterLogTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "CounterLogType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing counter type.
		 * @param {@link cef.admin.api.UpdateCounterTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCounterType
		 * @path <API Root>/Counters/CounterType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCounterType = (routeParams?: UpdateCounterTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Counters", "CounterType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
