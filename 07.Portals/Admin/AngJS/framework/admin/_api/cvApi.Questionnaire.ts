/**
 * @file framework/admin/_api/cvApi.Questionnaire.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new answer.
	 * @see {@link AnswerModel}
	 * @public
	 */
	export interface CreateAnswerDto extends AnswerModel {
	}
	/**
	 * Use to create a new question.
	 * @see {@link QuestionModel}
	 * @public
	 */
	export interface CreateQuestionDto extends QuestionModel {
	}
	/**
	 * Use to create a new question option.
	 * @see {@link QuestionOptionModel}
	 * @public
	 */
	export interface CreateQuestionOptionDto extends QuestionOptionModel {
	}
	/**
	 * Use to create a new question type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateQuestionTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of answers
	 * @see {@link AnswerSearchModel}
	 * @public
	 */
	export interface GetAnswersDto extends AnswerSearchModel {
	}
	/**
	 * Use to get a list of question options
	 * @see {@link QuestionOptionSearchModel}
	 * @public
	 */
	export interface GetQuestionOptionsDto extends QuestionOptionSearchModel {
	}
	/**
	 * Use to get a list of questions
	 * @see {@link QuestionSearchModel}
	 * @public
	 */
	export interface GetQuestionsDto extends QuestionSearchModel {
	}
	/**
	 * Use to get a list of question types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetQuestionTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing answer.
	 * @see {@link AnswerModel}
	 * @public
	 */
	export interface UpdateAnswerDto extends AnswerModel {
	}
	/**
	 * Use to update an existing question.
	 * @see {@link QuestionModel}
	 * @public
	 */
	export interface UpdateQuestionDto extends QuestionModel {
	}
	/**
	 * Use to update an existing question option.
	 * @see {@link QuestionOptionModel}
	 * @public
	 */
	export interface UpdateQuestionOptionDto extends QuestionOptionModel {
	}
	/**
	 * Use to update an existing question type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateQuestionTypeDto extends TypeModel {
	}

	export class Questionnaire extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all answer calls.
		 * @param {@link cef.admin.api.ClearAnswerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAnswerCache
		 * @path <API Root>/Questionnaire/Answer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAnswerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Questionnaire", "Answer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all question calls.
		 * @param {@link cef.admin.api.ClearQuestionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearQuestionCache
		 * @path <API Root>/Questionnaire/Question/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearQuestionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Questionnaire", "Question", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all question option calls.
		 * @param {@link cef.admin.api.ClearQuestionOptionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearQuestionOptionCache
		 * @path <API Root>/Questionnaire/QuestionOption/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearQuestionOptionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Questionnaire", "QuestionOption", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all question type calls.
		 * @param {@link cef.admin.api.ClearQuestionTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearQuestionTypeCache
		 * @path <API Root>/Questionnaire/QuestionType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearQuestionTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Questionnaire", "QuestionType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new answer.
		 * @param {@link cef.admin.api.CreateAnswerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAnswer
		 * @path <API Root>/Questionnaire/Answer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAnswer = (routeParams?: CreateAnswerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "Answer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new question.
		 * @param {@link cef.admin.api.CreateQuestionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateQuestion
		 * @path <API Root>/Questionnaire/Question/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateQuestion = (routeParams?: CreateQuestionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "Question", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new question option.
		 * @param {@link cef.admin.api.CreateQuestionOptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateQuestionOption
		 * @path <API Root>/Questionnaire/QuestionOption/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateQuestionOption = (routeParams?: CreateQuestionOptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "QuestionOption", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new question type.
		 * @param {@link cef.admin.api.CreateQuestionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateQuestionType
		 * @path <API Root>/Questionnaire/QuestionType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateQuestionType = (routeParams?: CreateQuestionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "QuestionType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific answer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAnswerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAnswerByID
		 * @path <API Root>/Questionnaire/Answer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAnswerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "Answer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific question from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateQuestionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateQuestionByID
		 * @path <API Root>/Questionnaire/Question/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateQuestionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "Question", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific question option from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateQuestionOptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateQuestionOptionByID
		 * @path <API Root>/Questionnaire/QuestionOption/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateQuestionOptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "QuestionOption", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific question type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateQuestionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateQuestionTypeByID
		 * @path <API Root>/Questionnaire/QuestionType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateQuestionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "QuestionType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific answer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAnswerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAnswerByID
		 * @path <API Root>/Questionnaire/Answer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAnswerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "Answer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific question from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteQuestionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteQuestionByID
		 * @path <API Root>/Questionnaire/Question/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteQuestionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "Question", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific question option from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteQuestionOptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteQuestionOptionByID
		 * @path <API Root>/Questionnaire/QuestionOption/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteQuestionOptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "QuestionOption", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific question type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteQuestionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteQuestionTypeByID
		 * @path <API Root>/Questionnaire/QuestionType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteQuestionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "QuestionType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific answer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAnswerByID
		 * @path <API Root>/Questionnaire/Answer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AnswerModel>}
		 * @public
		 */
		GetAnswerByID = (id: number) => this.$http<AnswerModel>({
			url: [this.rootUrl, "Questionnaire", "Answer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of answers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAnswers
		 * @path <API Root>/Questionnaire/Answers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AnswerPagedResults>}
		 * @public
		 */
		GetAnswers = (routeParams?: GetAnswersDto) => this.$http<AnswerPagedResults>({
			url: [this.rootUrl, "Questionnaire", "Answers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific question
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetQuestionByID
		 * @path <API Root>/Questionnaire/Question/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<QuestionModel>}
		 * @public
		 */
		GetQuestionByID = (id: number) => this.$http<QuestionModel>({
			url: [this.rootUrl, "Questionnaire", "Question", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific question option
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetQuestionOptionByID
		 * @path <API Root>/Questionnaire/QuestionOption/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<QuestionOptionModel>}
		 * @public
		 */
		GetQuestionOptionByID = (id: number) => this.$http<QuestionOptionModel>({
			url: [this.rootUrl, "Questionnaire", "QuestionOption", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of question options
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetQuestionOptions
		 * @path <API Root>/Questionnaire/QuestionOptions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<QuestionOptionPagedResults>}
		 * @public
		 */
		GetQuestionOptions = (routeParams?: GetQuestionOptionsDto) => this.$http<QuestionOptionPagedResults>({
			url: [this.rootUrl, "Questionnaire", "QuestionOptions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of questions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetQuestions
		 * @path <API Root>/Questionnaire/Questions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<QuestionPagedResults>}
		 * @public
		 */
		GetQuestions = (routeParams?: GetQuestionsDto) => this.$http<QuestionPagedResults>({
			url: [this.rootUrl, "Questionnaire", "Questions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific question type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetQuestionTypeByID
		 * @path <API Root>/Questionnaire/QuestionType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetQuestionTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Questionnaire", "QuestionType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of question types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetQuestionTypes
		 * @path <API Root>/Questionnaire/QuestionTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<QuestionTypePagedResults>}
		 * @public
		 */
		GetQuestionTypes = (routeParams?: GetQuestionTypesDto) => this.$http<QuestionTypePagedResults>({
			url: [this.rootUrl, "Questionnaire", "QuestionTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific answer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAnswerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAnswerByID
		 * @path <API Root>/Questionnaire/Answer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAnswerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "Answer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific question from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateQuestionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateQuestionByID
		 * @path <API Root>/Questionnaire/Question/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateQuestionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "Question", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific question option from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateQuestionOptionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateQuestionOptionByID
		 * @path <API Root>/Questionnaire/QuestionOption/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateQuestionOptionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "QuestionOption", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific question type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateQuestionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateQuestionTypeByID
		 * @path <API Root>/Questionnaire/QuestionType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateQuestionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Questionnaire", "QuestionType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing answer.
		 * @param {@link cef.admin.api.UpdateAnswerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAnswer
		 * @path <API Root>/Questionnaire/Answer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAnswer = (routeParams?: UpdateAnswerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "Answer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing question.
		 * @param {@link cef.admin.api.UpdateQuestionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateQuestion
		 * @path <API Root>/Questionnaire/Question/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateQuestion = (routeParams?: UpdateQuestionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "Question", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing question option.
		 * @param {@link cef.admin.api.UpdateQuestionOptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateQuestionOption
		 * @path <API Root>/Questionnaire/QuestionOption/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateQuestionOption = (routeParams?: UpdateQuestionOptionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "QuestionOption", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing question type.
		 * @param {@link cef.admin.api.UpdateQuestionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateQuestionType
		 * @path <API Root>/Questionnaire/QuestionType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateQuestionType = (routeParams?: UpdateQuestionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Questionnaire", "QuestionType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
