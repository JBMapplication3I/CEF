/**
 * @file framework/admin/_api/cvApi.Sales.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new sales group.
	 * @see {@link SalesGroupModel}
	 * @public
	 */
	export interface CreateSalesGroupDto extends SalesGroupModel {
	}
	/**
	 * Use to create a new sales item target type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesItemTargetTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of sales groups
	 * @see {@link SalesGroupSearchModel}
	 * @public
	 */
	export interface GetSalesGroupsDto extends SalesGroupSearchModel {
	}
	/**
	 * Use to get a list of sales item target types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesItemTargetTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing sales group.
	 * @see {@link SalesGroupModel}
	 * @public
	 */
	export interface UpdateSalesGroupDto extends SalesGroupModel {
	}
	/**
	 * Use to update an existing sales item target type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesItemTargetTypeDto extends TypeModel {
	}

	export class Sales extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all sales group calls.
		 * @param {@link cef.admin.api.ClearSalesGroupCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesGroupCache
		 * @path <API Root>/Sales/SalesGroup/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesGroupCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sales", "SalesGroup", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales item target type calls.
		 * @param {@link cef.admin.api.ClearSalesItemTargetTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesItemTargetTypeCache
		 * @path <API Root>/Sales/SalesItemTargetType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesItemTargetTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sales", "SalesItemTargetType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new sales group.
		 * @param {@link cef.admin.api.CreateSalesGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesGroup
		 * @path <API Root>/Sales/SalesGroup/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesGroup = (routeParams?: CreateSalesGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sales", "SalesGroup", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales item target type.
		 * @param {@link cef.admin.api.CreateSalesItemTargetTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesItemTargetType
		 * @path <API Root>/Sales/SalesItemTargetType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesItemTargetType = (routeParams?: CreateSalesItemTargetTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sales", "SalesItemTargetType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific sales group from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesGroupByID
		 * @path <API Root>/Sales/SalesGroup/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sales", "SalesGroup", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales item target type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesItemTargetTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesItemTargetTypeByID
		 * @path <API Root>/Sales/SalesItemTargetType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesItemTargetTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sales", "SalesItemTargetType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific sales group from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesGroupByID
		 * @path <API Root>/Sales/SalesGroup/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sales", "SalesGroup", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales item target type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesItemTargetTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesItemTargetTypeByID
		 * @path <API Root>/Sales/SalesItemTargetType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesItemTargetTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sales", "SalesItemTargetType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific sales group
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesGroupByID
		 * @path <API Root>/Sales/SalesGroup/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesGroupModel>}
		 * @public
		 */
		GetSalesGroupByID = (id: number) => this.$http<SalesGroupModel>({
			url: [this.rootUrl, "Sales", "SalesGroup", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales groups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesGroups
		 * @path <API Root>/Sales/SalesGroups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesGroupPagedResults>}
		 * @public
		 */
		GetSalesGroups = (routeParams?: GetSalesGroupsDto) => this.$http<SalesGroupPagedResults>({
			url: [this.rootUrl, "Sales", "SalesGroups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales item target type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesItemTargetTypeByID
		 * @path <API Root>/Sales/SalesItemTargetType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesItemTargetTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Sales", "SalesItemTargetType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales item target types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesItemTargetTypes
		 * @path <API Root>/Sales/SalesItemTargetTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetTypePagedResults>}
		 * @public
		 */
		GetSalesItemTargetTypes = (routeParams?: GetSalesItemTargetTypesDto) => this.$http<SalesItemTargetTypePagedResults>({
			url: [this.rootUrl, "Sales", "SalesItemTargetTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific sales group from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesGroupByID
		 * @path <API Root>/Sales/SalesGroup/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sales", "SalesGroup", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales item target type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesItemTargetTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesItemTargetTypeByID
		 * @path <API Root>/Sales/SalesItemTargetType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesItemTargetTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sales", "SalesItemTargetType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing sales group.
		 * @param {@link cef.admin.api.UpdateSalesGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesGroup
		 * @path <API Root>/Sales/SalesGroup/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesGroup = (routeParams?: UpdateSalesGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sales", "SalesGroup", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales item target type.
		 * @param {@link cef.admin.api.UpdateSalesItemTargetTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesItemTargetType
		 * @path <API Root>/Sales/SalesItemTargetType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesItemTargetType = (routeParams?: UpdateSalesItemTargetTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sales", "SalesItemTargetType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
