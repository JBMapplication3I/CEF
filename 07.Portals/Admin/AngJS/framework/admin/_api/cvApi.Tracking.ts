/**
 * @file framework/admin/_api/cvApi.Tracking.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new campaign.
	 * @see {@link CampaignModel}
	 * @public
	 */
	export interface CreateCampaignDto extends CampaignModel {
	}
	/**
	 * Use to create a new campaign ad.
	 * @see {@link CampaignAdModel}
	 * @public
	 */
	export interface CreateCampaignAdDto extends CampaignAdModel {
	}
	/**
	 * Use to create a new campaign status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateCampaignStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new campaign type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCampaignTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new event.
	 * @see {@link EventModel}
	 * @public
	 */
	export interface CreateEventDto extends EventModel {
	}
	/**
	 * Use to create a new event status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateEventStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new ip organization.
	 * @see {@link IPOrganizationModel}
	 * @public
	 */
	export interface CreateIPOrganizationDto extends IPOrganizationModel {
	}
	/**
	 * Use to create a new ip organization status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateIPOrganizationStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new page view.
	 * @see {@link PageViewModel}
	 * @public
	 */
	export interface CreatePageViewDto extends PageViewModel {
	}
	/**
	 * Use to create a new page view event.
	 * @see {@link PageViewEventModel}
	 * @public
	 */
	export interface CreatePageViewEventDto extends PageViewEventModel {
	}
	/**
	 * Use to create a new page view status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreatePageViewStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new page view type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreatePageViewTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new visit.
	 * @see {@link VisitModel}
	 * @public
	 */
	export interface CreateVisitDto extends VisitModel {
	}
	/**
	 * Use to create a new visitor.
	 * @see {@link VisitorModel}
	 * @public
	 */
	export interface CreateVisitorDto extends VisitorModel {
	}
	/**
	 * Use to create a new visit status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateVisitStatusDto extends StatusModel {
	}
	/**
	 * Use to get a list of campaign ads
	 * @see {@link CampaignAdSearchModel}
	 * @public
	 */
	export interface GetCampaignAdsDto extends CampaignAdSearchModel {
	}
	/**
	 * Use to get a list of campaigns
	 * @see {@link CampaignSearchModel}
	 * @public
	 */
	export interface GetCampaignsDto extends CampaignSearchModel {
	}
	/**
	 * Use to get a list of campaign statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetCampaignStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of campaign types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCampaignTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of events
	 * @see {@link EventSearchModel}
	 * @public
	 */
	export interface GetEventsDto extends EventSearchModel {
	}
	/**
	 * Use to get a list of event statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetEventStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of ip organizations
	 * @see {@link IPOrganizationSearchModel}
	 * @public
	 */
	export interface GetIPOrganizationsDto extends IPOrganizationSearchModel {
	}
	/**
	 * Use to get a list of ip organization statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetIPOrganizationStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of page view events
	 * @see {@link PageViewEventSearchModel}
	 * @public
	 */
	export interface GetPageViewEventsDto extends PageViewEventSearchModel {
	}
	/**
	 * Use to get a list of page views
	 * @see {@link PageViewSearchModel}
	 * @public
	 */
	export interface GetPageViewsDto extends PageViewSearchModel {
	}
	/**
	 * Use to get a list of page view statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetPageViewStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of page view types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetPageViewTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of visitors
	 * @see {@link VisitorSearchModel}
	 * @public
	 */
	export interface GetVisitorsDto extends VisitorSearchModel {
	}
	/**
	 * Use to get a list of visits
	 * @see {@link VisitSearchModel}
	 * @public
	 */
	export interface GetVisitsDto extends VisitSearchModel {
	}
	/**
	 * Use to get a list of visit statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetVisitStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to update an existing campaign.
	 * @see {@link CampaignModel}
	 * @public
	 */
	export interface UpdateCampaignDto extends CampaignModel {
	}
	/**
	 * Use to update an existing campaign ad.
	 * @see {@link CampaignAdModel}
	 * @public
	 */
	export interface UpdateCampaignAdDto extends CampaignAdModel {
	}
	/**
	 * Use to update an existing campaign status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateCampaignStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing campaign type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCampaignTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing event.
	 * @see {@link EventModel}
	 * @public
	 */
	export interface UpdateEventDto extends EventModel {
	}
	/**
	 * Use to update an existing event status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateEventStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing ip organization.
	 * @see {@link IPOrganizationModel}
	 * @public
	 */
	export interface UpdateIPOrganizationDto extends IPOrganizationModel {
	}
	/**
	 * Use to update an existing ip organization status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateIPOrganizationStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing page view.
	 * @see {@link PageViewModel}
	 * @public
	 */
	export interface UpdatePageViewDto extends PageViewModel {
	}
	/**
	 * Use to update an existing page view event.
	 * @see {@link PageViewEventModel}
	 * @public
	 */
	export interface UpdatePageViewEventDto extends PageViewEventModel {
	}
	/**
	 * Use to update an existing page view status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdatePageViewStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing page view type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdatePageViewTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing visit.
	 * @see {@link VisitModel}
	 * @public
	 */
	export interface UpdateVisitDto extends VisitModel {
	}
	/**
	 * Use to update an existing visitor.
	 * @see {@link VisitorModel}
	 * @public
	 */
	export interface UpdateVisitorDto extends VisitorModel {
	}
	/**
	 * Use to update an existing visit status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateVisitStatusDto extends StatusModel {
	}

	export class Tracking extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all campaign ad calls.
		 * @param {@link cef.admin.api.ClearCampaignAdCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCampaignAdCache
		 * @path <API Root>/Tracking/CampaignAd/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCampaignAdCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "CampaignAd", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all campaign calls.
		 * @param {@link cef.admin.api.ClearCampaignCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCampaignCache
		 * @path <API Root>/Tracking/Campaign/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCampaignCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "Campaign", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all campaign status calls.
		 * @param {@link cef.admin.api.ClearCampaignStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCampaignStatusCache
		 * @path <API Root>/Tracking/CampaignStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCampaignStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "CampaignStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all campaign type calls.
		 * @param {@link cef.admin.api.ClearCampaignTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCampaignTypeCache
		 * @path <API Root>/Tracking/CampaignType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCampaignTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "CampaignType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all event calls.
		 * @param {@link cef.admin.api.ClearEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEventCache
		 * @path <API Root>/Tracking/Event/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "Event", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all event status calls.
		 * @param {@link cef.admin.api.ClearEventStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEventStatusCache
		 * @path <API Root>/Tracking/EventStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEventStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "EventStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all event type calls.
		 * @param {@link cef.admin.api.ClearEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEventTypeCache
		 * @path <API Root>/Tracking/EventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "EventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ip organization calls.
		 * @param {@link cef.admin.api.ClearIPOrganizationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearIPOrganizationCache
		 * @path <API Root>/Tracking/IPOrganization/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearIPOrganizationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "IPOrganization", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ip organization status calls.
		 * @param {@link cef.admin.api.ClearIPOrganizationStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearIPOrganizationStatusCache
		 * @path <API Root>/Tracking/IPOrganizationStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearIPOrganizationStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all page view calls.
		 * @param {@link cef.admin.api.ClearPageViewCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPageViewCache
		 * @path <API Root>/Tracking/PageView/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPageViewCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "PageView", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all page view event calls.
		 * @param {@link cef.admin.api.ClearPageViewEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPageViewEventCache
		 * @path <API Root>/Tracking/PageViewEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPageViewEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "PageViewEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all page view status calls.
		 * @param {@link cef.admin.api.ClearPageViewStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPageViewStatusCache
		 * @path <API Root>/Tracking/PageViewStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPageViewStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "PageViewStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all page view type calls.
		 * @param {@link cef.admin.api.ClearPageViewTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearPageViewTypeCache
		 * @path <API Root>/Tracking/PageViewType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearPageViewTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "PageViewType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all visit calls.
		 * @param {@link cef.admin.api.ClearVisitCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVisitCache
		 * @path <API Root>/Tracking/Visit/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVisitCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "Visit", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all visitor calls.
		 * @param {@link cef.admin.api.ClearVisitorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVisitorCache
		 * @path <API Root>/Tracking/Visitor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVisitorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "Visitor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all visit status calls.
		 * @param {@link cef.admin.api.ClearVisitStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearVisitStatusCache
		 * @path <API Root>/Tracking/VisitStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearVisitStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Tracking", "VisitStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new campaign.
		 * @param {@link cef.admin.api.CreateCampaignDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCampaign
		 * @path <API Root>/Tracking/Campaign/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCampaign = (routeParams?: CreateCampaignDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Campaign", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new campaign ad.
		 * @param {@link cef.admin.api.CreateCampaignAdDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCampaignAd
		 * @path <API Root>/Tracking/CampaignAd/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCampaignAd = (routeParams?: CreateCampaignAdDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "CampaignAd", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new campaign status.
		 * @param {@link cef.admin.api.CreateCampaignStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCampaignStatus
		 * @path <API Root>/Tracking/CampaignStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCampaignStatus = (routeParams?: CreateCampaignStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "CampaignStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new campaign type.
		 * @param {@link cef.admin.api.CreateCampaignTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCampaignType
		 * @path <API Root>/Tracking/CampaignType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCampaignType = (routeParams?: CreateCampaignTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "CampaignType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new event.
		 * @param {@link cef.admin.api.CreateEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEvent
		 * @path <API Root>/Tracking/Event/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEvent = (routeParams?: CreateEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Event", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new event status.
		 * @param {@link cef.admin.api.CreateEventStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEventStatus
		 * @path <API Root>/Tracking/EventStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEventStatus = (routeParams?: CreateEventStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "EventStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new event type.
		 * @param {@link cef.admin.api.CreateEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEventType
		 * @path <API Root>/Tracking/EventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEventType = (routeParams?: CreateEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "EventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ip organization.
		 * @param {@link cef.admin.api.CreateIPOrganizationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateIPOrganization
		 * @path <API Root>/Tracking/IPOrganization/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateIPOrganization = (routeParams?: CreateIPOrganizationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "IPOrganization", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ip organization status.
		 * @param {@link cef.admin.api.CreateIPOrganizationStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateIPOrganizationStatus
		 * @path <API Root>/Tracking/IPOrganizationStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateIPOrganizationStatus = (routeParams?: CreateIPOrganizationStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new page view.
		 * @param {@link cef.admin.api.CreatePageViewDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePageView
		 * @path <API Root>/Tracking/PageView/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePageView = (routeParams?: CreatePageViewDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageView", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new page view event.
		 * @param {@link cef.admin.api.CreatePageViewEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePageViewEvent
		 * @path <API Root>/Tracking/PageViewEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePageViewEvent = (routeParams?: CreatePageViewEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageViewEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new page view status.
		 * @param {@link cef.admin.api.CreatePageViewStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePageViewStatus
		 * @path <API Root>/Tracking/PageViewStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePageViewStatus = (routeParams?: CreatePageViewStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageViewStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new page view type.
		 * @param {@link cef.admin.api.CreatePageViewTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePageViewType
		 * @path <API Root>/Tracking/PageViewType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePageViewType = (routeParams?: CreatePageViewTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageViewType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new visit.
		 * @param {@link cef.admin.api.CreateVisitDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVisit
		 * @path <API Root>/Tracking/Visit/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVisit = (routeParams?: CreateVisitDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Visit", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new visitor.
		 * @param {@link cef.admin.api.CreateVisitorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVisitor
		 * @path <API Root>/Tracking/Visitor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVisitor = (routeParams?: CreateVisitorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Visitor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new visit status.
		 * @param {@link cef.admin.api.CreateVisitStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateVisitStatus
		 * @path <API Root>/Tracking/VisitStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateVisitStatus = (routeParams?: CreateVisitStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "VisitStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific campaign ad from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCampaignAdByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCampaignAdByID
		 * @path <API Root>/Tracking/CampaignAd/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCampaignAdByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignAd", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific campaign from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCampaignByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCampaignByID
		 * @path <API Root>/Tracking/Campaign/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCampaignByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Campaign", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific campaign status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCampaignStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCampaignStatusByID
		 * @path <API Root>/Tracking/CampaignStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCampaignStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific campaign type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCampaignTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCampaignTypeByID
		 * @path <API Root>/Tracking/CampaignType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCampaignTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEventByID
		 * @path <API Root>/Tracking/Event/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Event", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific event status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEventStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEventStatusByID
		 * @path <API Root>/Tracking/EventStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEventStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "EventStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEventTypeByID
		 * @path <API Root>/Tracking/EventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "EventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ip organization from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateIPOrganizationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateIPOrganizationByID
		 * @path <API Root>/Tracking/IPOrganization/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateIPOrganizationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "IPOrganization", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ip organization status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateIPOrganizationStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateIPOrganizationStatusByID
		 * @path <API Root>/Tracking/IPOrganizationStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateIPOrganizationStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific page view from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePageViewByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePageViewByID
		 * @path <API Root>/Tracking/PageView/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePageViewByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageView", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific page view event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePageViewEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePageViewEventByID
		 * @path <API Root>/Tracking/PageViewEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePageViewEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific page view status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePageViewStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePageViewStatusByID
		 * @path <API Root>/Tracking/PageViewStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePageViewStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific page view type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivatePageViewTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivatePageViewTypeByID
		 * @path <API Root>/Tracking/PageViewType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivatePageViewTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific visit from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVisitByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVisitByID
		 * @path <API Root>/Tracking/Visit/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVisitByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Visit", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific visitor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVisitorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVisitorByID
		 * @path <API Root>/Tracking/Visitor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVisitorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Visitor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific visit status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateVisitStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateVisitStatusByID
		 * @path <API Root>/Tracking/VisitStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateVisitStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "VisitStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific campaign ad from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCampaignAdByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCampaignAdByID
		 * @path <API Root>/Tracking/CampaignAd/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCampaignAdByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignAd", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific campaign from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCampaignByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCampaignByID
		 * @path <API Root>/Tracking/Campaign/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCampaignByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Campaign", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific campaign status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCampaignStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCampaignStatusByID
		 * @path <API Root>/Tracking/CampaignStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCampaignStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific campaign type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCampaignTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCampaignTypeByID
		 * @path <API Root>/Tracking/CampaignType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCampaignTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEventByID
		 * @path <API Root>/Tracking/Event/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Event", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific event status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEventStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEventStatusByID
		 * @path <API Root>/Tracking/EventStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEventStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "EventStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEventTypeByID
		 * @path <API Root>/Tracking/EventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "EventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ip organization from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteIPOrganizationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteIPOrganizationByID
		 * @path <API Root>/Tracking/IPOrganization/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteIPOrganizationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "IPOrganization", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ip organization status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteIPOrganizationStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteIPOrganizationStatusByID
		 * @path <API Root>/Tracking/IPOrganizationStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteIPOrganizationStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific page view from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePageViewByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePageViewByID
		 * @path <API Root>/Tracking/PageView/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePageViewByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageView", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific page view event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePageViewEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePageViewEventByID
		 * @path <API Root>/Tracking/PageViewEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePageViewEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific page view status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePageViewStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePageViewStatusByID
		 * @path <API Root>/Tracking/PageViewStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePageViewStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific page view type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeletePageViewTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePageViewTypeByID
		 * @path <API Root>/Tracking/PageViewType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePageViewTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific visit from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVisitByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVisitByID
		 * @path <API Root>/Tracking/Visit/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVisitByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Visit", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific visitor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVisitorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVisitorByID
		 * @path <API Root>/Tracking/Visitor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVisitorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Visitor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific visit status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteVisitStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteVisitStatusByID
		 * @path <API Root>/Tracking/VisitStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteVisitStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "VisitStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific campaign ad
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaignAdByID
		 * @path <API Root>/Tracking/CampaignAd/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CampaignAdModel>}
		 * @public
		 */
		GetCampaignAdByID = (id: number) => this.$http<CampaignAdModel>({
			url: [this.rootUrl, "Tracking", "CampaignAd", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of campaign ads
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaignAds
		 * @path <API Root>/Tracking/CampaignAds
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CampaignAdPagedResults>}
		 * @public
		 */
		GetCampaignAds = (routeParams?: GetCampaignAdsDto) => this.$http<CampaignAdPagedResults>({
			url: [this.rootUrl, "Tracking", "CampaignAds"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific campaign
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaignByID
		 * @path <API Root>/Tracking/Campaign/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CampaignModel>}
		 * @public
		 */
		GetCampaignByID = (id: number) => this.$http<CampaignModel>({
			url: [this.rootUrl, "Tracking", "Campaign", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of campaigns
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaigns
		 * @path <API Root>/Tracking/Campaigns
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CampaignPagedResults>}
		 * @public
		 */
		GetCampaigns = (routeParams?: GetCampaignsDto) => this.$http<CampaignPagedResults>({
			url: [this.rootUrl, "Tracking", "Campaigns"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific campaign status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaignStatusByID
		 * @path <API Root>/Tracking/CampaignStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetCampaignStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Tracking", "CampaignStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of campaign statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaignStatuses
		 * @path <API Root>/Tracking/CampaignStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CampaignStatusPagedResults>}
		 * @public
		 */
		GetCampaignStatuses = (routeParams?: GetCampaignStatusesDto) => this.$http<CampaignStatusPagedResults>({
			url: [this.rootUrl, "Tracking", "CampaignStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific campaign type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaignTypeByID
		 * @path <API Root>/Tracking/CampaignType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCampaignTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Tracking", "CampaignType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of campaign types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCampaignTypes
		 * @path <API Root>/Tracking/CampaignTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CampaignTypePagedResults>}
		 * @public
		 */
		GetCampaignTypes = (routeParams?: GetCampaignTypesDto) => this.$http<CampaignTypePagedResults>({
			url: [this.rootUrl, "Tracking", "CampaignTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEventByID
		 * @path <API Root>/Tracking/Event/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EventModel>}
		 * @public
		 */
		GetEventByID = (id: number) => this.$http<EventModel>({
			url: [this.rootUrl, "Tracking", "Event", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEvents
		 * @path <API Root>/Tracking/Events
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EventPagedResults>}
		 * @public
		 */
		GetEvents = (routeParams?: GetEventsDto) => this.$http<EventPagedResults>({
			url: [this.rootUrl, "Tracking", "Events"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific event status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEventStatusByID
		 * @path <API Root>/Tracking/EventStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetEventStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Tracking", "EventStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of event statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEventStatuses
		 * @path <API Root>/Tracking/EventStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EventStatusPagedResults>}
		 * @public
		 */
		GetEventStatuses = (routeParams?: GetEventStatusesDto) => this.$http<EventStatusPagedResults>({
			url: [this.rootUrl, "Tracking", "EventStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEventTypeByID
		 * @path <API Root>/Tracking/EventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Tracking", "EventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEventTypes
		 * @path <API Root>/Tracking/EventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EventTypePagedResults>}
		 * @public
		 */
		GetEventTypes = (routeParams?: GetEventTypesDto) => this.$http<EventTypePagedResults>({
			url: [this.rootUrl, "Tracking", "EventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ip organization
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetIPOrganizationByID
		 * @path <API Root>/Tracking/IPOrganization/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<IPOrganizationModel>}
		 * @public
		 */
		GetIPOrganizationByID = (id: number) => this.$http<IPOrganizationModel>({
			url: [this.rootUrl, "Tracking", "IPOrganization", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ip organizations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetIPOrganizations
		 * @path <API Root>/Tracking/IPOrganizations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<IPOrganizationPagedResults>}
		 * @public
		 */
		GetIPOrganizations = (routeParams?: GetIPOrganizationsDto) => this.$http<IPOrganizationPagedResults>({
			url: [this.rootUrl, "Tracking", "IPOrganizations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ip organization status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetIPOrganizationStatusByID
		 * @path <API Root>/Tracking/IPOrganizationStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetIPOrganizationStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ip organization statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetIPOrganizationStatuses
		 * @path <API Root>/Tracking/IPOrganizationStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<IPOrganizationStatusPagedResults>}
		 * @public
		 */
		GetIPOrganizationStatuses = (routeParams?: GetIPOrganizationStatusesDto) => this.$http<IPOrganizationStatusPagedResults>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific page view
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViewByID
		 * @path <API Root>/Tracking/PageView/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PageViewModel>}
		 * @public
		 */
		GetPageViewByID = (id: number) => this.$http<PageViewModel>({
			url: [this.rootUrl, "Tracking", "PageView", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific page view event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViewEventByID
		 * @path <API Root>/Tracking/PageViewEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PageViewEventModel>}
		 * @public
		 */
		GetPageViewEventByID = (id: number) => this.$http<PageViewEventModel>({
			url: [this.rootUrl, "Tracking", "PageViewEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of page view events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViewEvents
		 * @path <API Root>/Tracking/PageViewEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PageViewEventPagedResults>}
		 * @public
		 */
		GetPageViewEvents = (routeParams?: GetPageViewEventsDto) => this.$http<PageViewEventPagedResults>({
			url: [this.rootUrl, "Tracking", "PageViewEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of page views
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViews
		 * @path <API Root>/Tracking/PageViews
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PageViewPagedResults>}
		 * @public
		 */
		GetPageViews = (routeParams?: GetPageViewsDto) => this.$http<PageViewPagedResults>({
			url: [this.rootUrl, "Tracking", "PageViews"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific page view status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViewStatusByID
		 * @path <API Root>/Tracking/PageViewStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetPageViewStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Tracking", "PageViewStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of page view statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViewStatuses
		 * @path <API Root>/Tracking/PageViewStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PageViewStatusPagedResults>}
		 * @public
		 */
		GetPageViewStatuses = (routeParams?: GetPageViewStatusesDto) => this.$http<PageViewStatusPagedResults>({
			url: [this.rootUrl, "Tracking", "PageViewStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific page view type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViewTypeByID
		 * @path <API Root>/Tracking/PageViewType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetPageViewTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Tracking", "PageViewType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of page view types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPageViewTypes
		 * @path <API Root>/Tracking/PageViewTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PageViewTypePagedResults>}
		 * @public
		 */
		GetPageViewTypes = (routeParams?: GetPageViewTypesDto) => this.$http<PageViewTypePagedResults>({
			url: [this.rootUrl, "Tracking", "PageViewTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific visit
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVisitByID
		 * @path <API Root>/Tracking/Visit/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VisitModel>}
		 * @public
		 */
		GetVisitByID = (id: number) => this.$http<VisitModel>({
			url: [this.rootUrl, "Tracking", "Visit", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific visitor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVisitorByID
		 * @path <API Root>/Tracking/Visitor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VisitorModel>}
		 * @public
		 */
		GetVisitorByID = (id: number) => this.$http<VisitorModel>({
			url: [this.rootUrl, "Tracking", "Visitor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of visitors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVisitors
		 * @path <API Root>/Tracking/Visitors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VisitorPagedResults>}
		 * @public
		 */
		GetVisitors = (routeParams?: GetVisitorsDto) => this.$http<VisitorPagedResults>({
			url: [this.rootUrl, "Tracking", "Visitors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of visits
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVisits
		 * @path <API Root>/Tracking/Visits
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VisitPagedResults>}
		 * @public
		 */
		GetVisits = (routeParams?: GetVisitsDto) => this.$http<VisitPagedResults>({
			url: [this.rootUrl, "Tracking", "Visits"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific visit status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVisitStatusByID
		 * @path <API Root>/Tracking/VisitStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetVisitStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Tracking", "VisitStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of visit statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVisitStatuses
		 * @path <API Root>/Tracking/VisitStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VisitStatusPagedResults>}
		 * @public
		 */
		GetVisitStatuses = (routeParams?: GetVisitStatusesDto) => this.$http<VisitStatusPagedResults>({
			url: [this.rootUrl, "Tracking", "VisitStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific campaign ad from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCampaignAdByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCampaignAdByID
		 * @path <API Root>/Tracking/CampaignAd/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCampaignAdByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignAd", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific campaign from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCampaignByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCampaignByID
		 * @path <API Root>/Tracking/Campaign/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCampaignByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Campaign", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific campaign status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCampaignStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCampaignStatusByID
		 * @path <API Root>/Tracking/CampaignStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCampaignStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific campaign type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCampaignTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCampaignTypeByID
		 * @path <API Root>/Tracking/CampaignType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCampaignTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "CampaignType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEventByID
		 * @path <API Root>/Tracking/Event/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Event", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific event status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEventStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEventStatusByID
		 * @path <API Root>/Tracking/EventStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEventStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "EventStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEventTypeByID
		 * @path <API Root>/Tracking/EventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "EventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ip organization from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateIPOrganizationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateIPOrganizationByID
		 * @path <API Root>/Tracking/IPOrganization/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateIPOrganizationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "IPOrganization", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ip organization status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateIPOrganizationStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateIPOrganizationStatusByID
		 * @path <API Root>/Tracking/IPOrganizationStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateIPOrganizationStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific page view from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePageViewByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePageViewByID
		 * @path <API Root>/Tracking/PageView/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePageViewByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageView", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific page view event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePageViewEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePageViewEventByID
		 * @path <API Root>/Tracking/PageViewEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePageViewEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific page view status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePageViewStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePageViewStatusByID
		 * @path <API Root>/Tracking/PageViewStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePageViewStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific page view type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivatePageViewTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivatePageViewTypeByID
		 * @path <API Root>/Tracking/PageViewType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivatePageViewTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "PageViewType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific visit from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVisitByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVisitByID
		 * @path <API Root>/Tracking/Visit/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVisitByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Visit", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific visitor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVisitorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVisitorByID
		 * @path <API Root>/Tracking/Visitor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVisitorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "Visitor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific visit status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateVisitStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateVisitStatusByID
		 * @path <API Root>/Tracking/VisitStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateVisitStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Tracking", "VisitStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing campaign.
		 * @param {@link cef.admin.api.UpdateCampaignDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCampaign
		 * @path <API Root>/Tracking/Campaign/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCampaign = (routeParams?: UpdateCampaignDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Campaign", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing campaign ad.
		 * @param {@link cef.admin.api.UpdateCampaignAdDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCampaignAd
		 * @path <API Root>/Tracking/CampaignAd/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCampaignAd = (routeParams?: UpdateCampaignAdDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "CampaignAd", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing campaign status.
		 * @param {@link cef.admin.api.UpdateCampaignStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCampaignStatus
		 * @path <API Root>/Tracking/CampaignStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCampaignStatus = (routeParams?: UpdateCampaignStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "CampaignStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing campaign type.
		 * @param {@link cef.admin.api.UpdateCampaignTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCampaignType
		 * @path <API Root>/Tracking/CampaignType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCampaignType = (routeParams?: UpdateCampaignTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "CampaignType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing event.
		 * @param {@link cef.admin.api.UpdateEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEvent
		 * @path <API Root>/Tracking/Event/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEvent = (routeParams?: UpdateEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Event", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing event status.
		 * @param {@link cef.admin.api.UpdateEventStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEventStatus
		 * @path <API Root>/Tracking/EventStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEventStatus = (routeParams?: UpdateEventStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "EventStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing event type.
		 * @param {@link cef.admin.api.UpdateEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEventType
		 * @path <API Root>/Tracking/EventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEventType = (routeParams?: UpdateEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "EventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ip organization.
		 * @param {@link cef.admin.api.UpdateIPOrganizationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateIPOrganization
		 * @path <API Root>/Tracking/IPOrganization/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateIPOrganization = (routeParams?: UpdateIPOrganizationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "IPOrganization", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ip organization status.
		 * @param {@link cef.admin.api.UpdateIPOrganizationStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateIPOrganizationStatus
		 * @path <API Root>/Tracking/IPOrganizationStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateIPOrganizationStatus = (routeParams?: UpdateIPOrganizationStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "IPOrganizationStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing page view.
		 * @param {@link cef.admin.api.UpdatePageViewDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePageView
		 * @path <API Root>/Tracking/PageView/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePageView = (routeParams?: UpdatePageViewDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageView", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing page view event.
		 * @param {@link cef.admin.api.UpdatePageViewEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePageViewEvent
		 * @path <API Root>/Tracking/PageViewEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePageViewEvent = (routeParams?: UpdatePageViewEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageViewEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing page view status.
		 * @param {@link cef.admin.api.UpdatePageViewStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePageViewStatus
		 * @path <API Root>/Tracking/PageViewStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePageViewStatus = (routeParams?: UpdatePageViewStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageViewStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing page view type.
		 * @param {@link cef.admin.api.UpdatePageViewTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePageViewType
		 * @path <API Root>/Tracking/PageViewType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePageViewType = (routeParams?: UpdatePageViewTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "PageViewType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing visit.
		 * @param {@link cef.admin.api.UpdateVisitDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVisit
		 * @path <API Root>/Tracking/Visit/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVisit = (routeParams?: UpdateVisitDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Visit", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing visitor.
		 * @param {@link cef.admin.api.UpdateVisitorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVisitor
		 * @path <API Root>/Tracking/Visitor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVisitor = (routeParams?: UpdateVisitorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "Visitor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing visit status.
		 * @param {@link cef.admin.api.UpdateVisitStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateVisitStatus
		 * @path <API Root>/Tracking/VisitStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateVisitStatus = (routeParams?: UpdateVisitStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Tracking", "VisitStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
