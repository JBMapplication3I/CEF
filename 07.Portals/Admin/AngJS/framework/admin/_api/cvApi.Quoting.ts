/**
 * @file framework/admin/_api/cvApi.Quoting.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesQuoteStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesQuoteStateExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesQuoteStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesQuoteStatusExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesQuoteTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesQuoteTypeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to create a new sales quote.
	 * @see {@link SalesQuoteModel}
	 * @public
	 */
	export interface CreateSalesQuoteDto extends SalesQuoteModel {
	}
	/**
	 * Use to create a new sales quote category.
	 * @see {@link SalesQuoteCategoryModel}
	 * @public
	 */
	export interface CreateSalesQuoteCategoryDto extends SalesQuoteCategoryModel {
	}
	/**
	 * Use to create a new sales quote contact.
	 * @see {@link SalesQuoteContactModel}
	 * @public
	 */
	export interface CreateSalesQuoteContactDto extends SalesQuoteContactModel {
	}
	/**
	 * Use to create a new sales quote event.
	 * @see {@link SalesQuoteEventModel}
	 * @public
	 */
	export interface CreateSalesQuoteEventDto extends SalesQuoteEventModel {
	}
	/**
	 * Use to create a new sales quote event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesQuoteEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new sales quote file.
	 * @see {@link SalesQuoteFileModel}
	 * @public
	 */
	export interface CreateSalesQuoteFileDto extends SalesQuoteFileModel {
	}
	/**
	 * Use to create a new sales quote item.
	 * @see {@link SalesItemBaseModel<AppliedSalesQuoteItemDiscountModel>}
	 * @public
	 */
	export interface CreateSalesQuoteItemDto extends SalesItemBaseModel<AppliedSalesQuoteItemDiscountModel> {
	}
	/**
	 * Use to create a new sales quote item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface CreateSalesQuoteItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to create a new sales quote sales order.
	 * @see {@link SalesQuoteSalesOrderModel}
	 * @public
	 */
	export interface CreateSalesQuoteSalesOrderDto extends SalesQuoteSalesOrderModel {
	}
	/**
	 * Use to create a new sales quote state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface CreateSalesQuoteStateDto extends StateModel {
	}
	/**
	 * Use to create a new sales quote status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateSalesQuoteStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new sales quote type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesQuoteTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of sales quote categories
	 * @see {@link SalesQuoteCategorySearchModel}
	 * @public
	 */
	export interface GetSalesQuoteCategoriesDto extends SalesQuoteCategorySearchModel {
	}
	/**
	 * Use to get a list of sales quote contacts
	 * @see {@link SalesQuoteContactSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteContactsDto extends SalesQuoteContactSearchModel {
	}
	/**
	 * Use to get a list of sales quote events
	 * @see {@link SalesQuoteEventSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteEventsDto extends SalesQuoteEventSearchModel {
	}
	/**
	 * Use to get a list of sales quote event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of sales quote files
	 * @see {@link SalesQuoteFileSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteFilesDto extends SalesQuoteFileSearchModel {
	}
	/**
	 * Use to get a list of sales quote items
	 * @see {@link SalesItemBaseSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteItemsDto extends SalesItemBaseSearchModel {
	}
	/**
	 * Use to get a list of sales quote item targets
	 * @see {@link SalesItemTargetBaseSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteItemTargetsDto extends SalesItemTargetBaseSearchModel {
	}
	/**
	 * Use to get a list of sales quotes
	 * @see {@link SalesQuoteSearchModel}
	 * @public
	 */
	export interface GetSalesQuotesDto extends SalesQuoteSearchModel {
	}
	/**
	 * Use to get a list of sales quote sales orders
	 * @see {@link SalesQuoteSalesOrderSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteSalesOrdersDto extends SalesQuoteSalesOrderSearchModel {
	}
	/**
	 * Use to get a list of sales quote states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of sales quote statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of sales quote types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesQuoteTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing sales quote.
	 * @see {@link SalesQuoteModel}
	 * @public
	 */
	export interface UpdateSalesQuoteDto extends SalesQuoteModel {
	}
	/**
	 * Use to update an existing sales quote category.
	 * @see {@link SalesQuoteCategoryModel}
	 * @public
	 */
	export interface UpdateSalesQuoteCategoryDto extends SalesQuoteCategoryModel {
	}
	/**
	 * Use to update an existing sales quote contact.
	 * @see {@link SalesQuoteContactModel}
	 * @public
	 */
	export interface UpdateSalesQuoteContactDto extends SalesQuoteContactModel {
	}
	/**
	 * Use to update an existing sales quote event.
	 * @see {@link SalesQuoteEventModel}
	 * @public
	 */
	export interface UpdateSalesQuoteEventDto extends SalesQuoteEventModel {
	}
	/**
	 * Use to update an existing sales quote event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesQuoteEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing sales quote file.
	 * @see {@link SalesQuoteFileModel}
	 * @public
	 */
	export interface UpdateSalesQuoteFileDto extends SalesQuoteFileModel {
	}
	/**
	 * Use to update an existing sales quote item.
	 * @see {@link SalesItemBaseModel<AppliedSalesQuoteItemDiscountModel>}
	 * @public
	 */
	export interface UpdateSalesQuoteItemDto extends SalesItemBaseModel<AppliedSalesQuoteItemDiscountModel> {
	}
	/**
	 * Use to update an existing sales quote item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface UpdateSalesQuoteItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to update an existing sales quote sales order.
	 * @see {@link SalesQuoteSalesOrderModel}
	 * @public
	 */
	export interface UpdateSalesQuoteSalesOrderDto extends SalesQuoteSalesOrderModel {
	}
	/**
	 * Use to update an existing sales quote state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface UpdateSalesQuoteStateDto extends StateModel {
	}
	/**
	 * Use to update an existing sales quote status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateSalesQuoteStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing sales quote type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesQuoteTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new or update an existing sales quote (as needed).
	 * @see {@link SalesQuoteModel}
	 * @public
	 */
	export interface UpsertSalesQuoteDto extends SalesQuoteModel {
	}

	export class Quoting extends ServiceStackRoute {
		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteExistsByKey
		 * @path <API Root>/Quoting/SalesQuote/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStateExistsByDisplayName
		 * @path <API Root>/Quoting/SalesQuoteState/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteStateExistsByDisplayName = (routeParams?: CheckSalesQuoteStateExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStateExistsByKey
		 * @path <API Root>/Quoting/SalesQuoteState/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteStateExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStateExistsByName
		 * @path <API Root>/Quoting/SalesQuoteState/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteStateExistsByName = (routeParams?: CheckSalesQuoteStateExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStatusExistsByDisplayName
		 * @path <API Root>/Quoting/SalesQuoteStatus/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteStatusExistsByDisplayName = (routeParams?: CheckSalesQuoteStatusExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStatusExistsByKey
		 * @path <API Root>/Quoting/SalesQuoteStatus/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteStatusExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStatusExistsByName
		 * @path <API Root>/Quoting/SalesQuoteStatus/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteStatusExistsByName = (routeParams?: CheckSalesQuoteStatusExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteTypeExistsByDisplayName
		 * @path <API Root>/Quoting/SalesQuoteType/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteTypeExistsByDisplayName = (routeParams?: CheckSalesQuoteTypeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteTypeExistsByKey
		 * @path <API Root>/Quoting/SalesQuoteType/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteTypeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteTypeExistsByName
		 * @path <API Root>/Quoting/SalesQuoteType/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesQuoteTypeExistsByName = (routeParams?: CheckSalesQuoteTypeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all sales quote calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteCache
		 * @path <API Root>/Quoting/SalesQuote/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote category calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteCategoryCache
		 * @path <API Root>/Quoting/SalesQuoteCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote contact calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteContactCache
		 * @path <API Root>/Quoting/SalesQuoteContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote event calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteEventCache
		 * @path <API Root>/Quoting/SalesQuoteEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote event type calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteEventTypeCache
		 * @path <API Root>/Quoting/SalesQuoteEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote file calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteFileCache
		 * @path <API Root>/Quoting/SalesQuoteFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote item calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteItemCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteItemCache
		 * @path <API Root>/Quoting/SalesQuoteItem/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteItemCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItem", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote item target calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteItemTargetCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteItemTargetCache
		 * @path <API Root>/Quoting/SalesQuoteItemTarget/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteItemTargetCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTarget", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote sales order calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteSalesOrderCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteSalesOrderCache
		 * @path <API Root>/Quoting/SalesQuoteSalesOrder/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteSalesOrderCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrder", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote state calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteStateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteStateCache
		 * @path <API Root>/Quoting/SalesQuoteState/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteStateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote status calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteStatusCache
		 * @path <API Root>/Quoting/SalesQuoteStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales quote type calls.
		 * @param {@link cef.admin.api.ClearSalesQuoteTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesQuoteTypeCache
		 * @path <API Root>/Quoting/SalesQuoteType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesQuoteTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new sales quote.
		 * @param {@link cef.admin.api.CreateSalesQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuote
		 * @path <API Root>/Quoting/SalesQuote/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuote = (routeParams?: CreateSalesQuoteDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote category.
		 * @param {@link cef.admin.api.CreateSalesQuoteCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteCategory
		 * @path <API Root>/Quoting/SalesQuoteCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteCategory = (routeParams?: CreateSalesQuoteCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote contact.
		 * @param {@link cef.admin.api.CreateSalesQuoteContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteContact
		 * @path <API Root>/Quoting/SalesQuoteContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteContact = (routeParams?: CreateSalesQuoteContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote event.
		 * @param {@link cef.admin.api.CreateSalesQuoteEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteEvent
		 * @path <API Root>/Quoting/SalesQuoteEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteEvent = (routeParams?: CreateSalesQuoteEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote event type.
		 * @param {@link cef.admin.api.CreateSalesQuoteEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteEventType
		 * @path <API Root>/Quoting/SalesQuoteEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteEventType = (routeParams?: CreateSalesQuoteEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote file.
		 * @param {@link cef.admin.api.CreateSalesQuoteFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteFile
		 * @path <API Root>/Quoting/SalesQuoteFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteFile = (routeParams?: CreateSalesQuoteFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote item.
		 * @param {@link cef.admin.api.CreateSalesQuoteItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteItem
		 * @path <API Root>/Quoting/SalesQuoteItem/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteItem = (routeParams?: CreateSalesQuoteItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItem", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote item target.
		 * @param {@link cef.admin.api.CreateSalesQuoteItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteItemTarget
		 * @path <API Root>/Quoting/SalesQuoteItemTarget/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteItemTarget = (routeParams?: CreateSalesQuoteItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTarget", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote sales order.
		 * @param {@link cef.admin.api.CreateSalesQuoteSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteSalesOrder
		 * @path <API Root>/Quoting/SalesQuoteSalesOrder/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteSalesOrder = (routeParams?: CreateSalesQuoteSalesOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrder", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote state.
		 * @param {@link cef.admin.api.CreateSalesQuoteStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteState
		 * @path <API Root>/Quoting/SalesQuoteState/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteState = (routeParams?: CreateSalesQuoteStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote status.
		 * @param {@link cef.admin.api.CreateSalesQuoteStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteStatus
		 * @path <API Root>/Quoting/SalesQuoteStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteStatus = (routeParams?: CreateSalesQuoteStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales quote type.
		 * @param {@link cef.admin.api.CreateSalesQuoteTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesQuoteType
		 * @path <API Root>/Quoting/SalesQuoteType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesQuoteType = (routeParams?: CreateSalesQuoteTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific sales quote from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteByID
		 * @path <API Root>/Quoting/SalesQuote/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteCategoryByID
		 * @path <API Root>/Quoting/SalesQuoteCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteContactByID
		 * @path <API Root>/Quoting/SalesQuoteContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteEventByID
		 * @path <API Root>/Quoting/SalesQuoteEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteEventTypeByID
		 * @path <API Root>/Quoting/SalesQuoteEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteFileByID
		 * @path <API Root>/Quoting/SalesQuoteFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote item from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteItemByID
		 * @path <API Root>/Quoting/SalesQuoteItem/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItem", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote item target from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteItemTargetByID
		 * @path <API Root>/Quoting/SalesQuoteItemTarget/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTarget", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote sales order from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteSalesOrderByID
		 * @path <API Root>/Quoting/SalesQuoteSalesOrder/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrder", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote state from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteStateByID
		 * @path <API Root>/Quoting/SalesQuoteState/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteStatusByID
		 * @path <API Root>/Quoting/SalesQuoteStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales quote type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesQuoteTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesQuoteTypeByID
		 * @path <API Root>/Quoting/SalesQuoteType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesQuoteTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific sales quote from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteByID
		 * @path <API Root>/Quoting/SalesQuote/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteCategoryByID
		 * @path <API Root>/Quoting/SalesQuoteCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteContactByID
		 * @path <API Root>/Quoting/SalesQuoteContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteEventByID
		 * @path <API Root>/Quoting/SalesQuoteEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteEventTypeByID
		 * @path <API Root>/Quoting/SalesQuoteEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteFileByID
		 * @path <API Root>/Quoting/SalesQuoteFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote item from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteItemByID
		 * @path <API Root>/Quoting/SalesQuoteItem/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItem", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote item target from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteItemTargetByID
		 * @path <API Root>/Quoting/SalesQuoteItemTarget/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTarget", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote sales order from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteSalesOrderByID
		 * @path <API Root>/Quoting/SalesQuoteSalesOrder/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrder", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote state from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteStateByID
		 * @path <API Root>/Quoting/SalesQuoteState/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteStatusByID
		 * @path <API Root>/Quoting/SalesQuoteStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales quote type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesQuoteTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesQuoteTypeByID
		 * @path <API Root>/Quoting/SalesQuoteType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesQuoteTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific sales quote
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteByID
		 * @path <API Root>/Quoting/SalesQuote/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteModel>}
		 * @public
		 */
		GetSalesQuoteByID = (id: number) => this.$http<SalesQuoteModel>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteCategories
		 * @path <API Root>/Quoting/SalesQuoteCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteCategoryPagedResults>}
		 * @public
		 */
		GetSalesQuoteCategories = (routeParams?: GetSalesQuoteCategoriesDto) => this.$http<SalesQuoteCategoryPagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteCategoryByID
		 * @path <API Root>/Quoting/SalesQuoteCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteCategoryModel>}
		 * @public
		 */
		GetSalesQuoteCategoryByID = (id: number) => this.$http<SalesQuoteCategoryModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sales quote contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteContactByID
		 * @path <API Root>/Quoting/SalesQuoteContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteContactModel>}
		 * @public
		 */
		GetSalesQuoteContactByID = (id: number) => this.$http<SalesQuoteContactModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteContacts
		 * @path <API Root>/Quoting/SalesQuoteContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteContactPagedResults>}
		 * @public
		 */
		GetSalesQuoteContacts = (routeParams?: GetSalesQuoteContactsDto) => this.$http<SalesQuoteContactPagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteEventByID
		 * @path <API Root>/Quoting/SalesQuoteEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteEventModel>}
		 * @public
		 */
		GetSalesQuoteEventByID = (id: number) => this.$http<SalesQuoteEventModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteEvents
		 * @path <API Root>/Quoting/SalesQuoteEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteEventPagedResults>}
		 * @public
		 */
		GetSalesQuoteEvents = (routeParams?: GetSalesQuoteEventsDto) => this.$http<SalesQuoteEventPagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteEventTypeByID
		 * @path <API Root>/Quoting/SalesQuoteEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesQuoteEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteEventTypes
		 * @path <API Root>/Quoting/SalesQuoteEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteEventTypePagedResults>}
		 * @public
		 */
		GetSalesQuoteEventTypes = (routeParams?: GetSalesQuoteEventTypesDto) => this.$http<SalesQuoteEventTypePagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteFileByID
		 * @path <API Root>/Quoting/SalesQuoteFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteFileModel>}
		 * @public
		 */
		GetSalesQuoteFileByID = (id: number) => this.$http<SalesQuoteFileModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteFiles
		 * @path <API Root>/Quoting/SalesQuoteFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteFilePagedResults>}
		 * @public
		 */
		GetSalesQuoteFiles = (routeParams?: GetSalesQuoteFilesDto) => this.$http<SalesQuoteFilePagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote item
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteItemByID
		 * @path <API Root>/Quoting/SalesQuoteItem/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedSalesQuoteItemDiscountModel>>}
		 * @public
		 */
		GetSalesQuoteItemByID = (id: number) => this.$http<SalesItemBaseModel<AppliedSalesQuoteItemDiscountModel>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItem", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote items
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteItems
		 * @path <API Root>/Quoting/SalesQuoteItems
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteItemPagedResults>}
		 * @public
		 */
		GetSalesQuoteItems = (routeParams?: GetSalesQuoteItemsDto) => this.$http<SalesQuoteItemPagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItems"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote item target
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteItemTargetByID
		 * @path <API Root>/Quoting/SalesQuoteItemTarget/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetBaseModel>}
		 * @public
		 */
		GetSalesQuoteItemTargetByID = (id: number) => this.$http<SalesItemTargetBaseModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTarget", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote item targets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteItemTargets
		 * @path <API Root>/Quoting/SalesQuoteItemTargets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteItemTargetPagedResults>}
		 * @public
		 */
		GetSalesQuoteItemTargets = (routeParams?: GetSalesQuoteItemTargetsDto) => this.$http<SalesQuoteItemTargetPagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTargets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of sales quotes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuotes
		 * @path <API Root>/Quoting/SalesQuotes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuotePagedResults>}
		 * @public
		 */
		GetSalesQuotes = (routeParams?: GetSalesQuotesDto) => this.$http<SalesQuotePagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuotes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote sales order
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteSalesOrderByID
		 * @path <API Root>/Quoting/SalesQuoteSalesOrder/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteSalesOrderModel>}
		 * @public
		 */
		GetSalesQuoteSalesOrderByID = (id: number) => this.$http<SalesQuoteSalesOrderModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrder", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote sales orders
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteSalesOrders
		 * @path <API Root>/Quoting/SalesQuoteSalesOrders
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteSalesOrderPagedResults>}
		 * @public
		 */
		GetSalesQuoteSalesOrders = (routeParams?: GetSalesQuoteSalesOrdersDto) => this.$http<SalesQuoteSalesOrderPagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrders"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStateByID
		 * @path <API Root>/Quoting/SalesQuoteState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetSalesQuoteStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStates
		 * @path <API Root>/Quoting/SalesQuoteStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteStatePagedResults>}
		 * @public
		 */
		GetSalesQuoteStates = (routeParams?: GetSalesQuoteStatesDto) => this.$http<SalesQuoteStatePagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStatusByID
		 * @path <API Root>/Quoting/SalesQuoteStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSalesQuoteStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStatuses
		 * @path <API Root>/Quoting/SalesQuoteStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteStatusPagedResults>}
		 * @public
		 */
		GetSalesQuoteStatuses = (routeParams?: GetSalesQuoteStatusesDto) => this.$http<SalesQuoteStatusPagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales quote type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteTypeByID
		 * @path <API Root>/Quoting/SalesQuoteType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesQuoteTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales quote types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteTypes
		 * @path <API Root>/Quoting/SalesQuoteTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesQuoteTypePagedResults>}
		 * @public
		 */
		GetSalesQuoteTypes = (routeParams?: GetSalesQuoteTypesDto) => this.$http<SalesQuoteTypePagedResults>({
			url: [this.rootUrl, "Quoting", "SalesQuoteTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific sales quote from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteByID
		 * @path <API Root>/Quoting/SalesQuote/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteCategoryByID
		 * @path <API Root>/Quoting/SalesQuoteCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteContactByID
		 * @path <API Root>/Quoting/SalesQuoteContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteEventByID
		 * @path <API Root>/Quoting/SalesQuoteEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteEventTypeByID
		 * @path <API Root>/Quoting/SalesQuoteEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteFileByID
		 * @path <API Root>/Quoting/SalesQuoteFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote item from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteItemByID
		 * @path <API Root>/Quoting/SalesQuoteItem/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItem", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote item target from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteItemTargetByID
		 * @path <API Root>/Quoting/SalesQuoteItemTarget/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTarget", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote sales order from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteSalesOrderByID
		 * @path <API Root>/Quoting/SalesQuoteSalesOrder/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrder", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote state from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteStateByID
		 * @path <API Root>/Quoting/SalesQuoteState/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteStatusByID
		 * @path <API Root>/Quoting/SalesQuoteStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales quote type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesQuoteTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesQuoteTypeByID
		 * @path <API Root>/Quoting/SalesQuoteType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesQuoteTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing sales quote.
		 * @param {@link cef.admin.api.UpdateSalesQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuote
		 * @path <API Root>/Quoting/SalesQuote/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuote = (routeParams?: UpdateSalesQuoteDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote category.
		 * @param {@link cef.admin.api.UpdateSalesQuoteCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteCategory
		 * @path <API Root>/Quoting/SalesQuoteCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteCategory = (routeParams?: UpdateSalesQuoteCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote contact.
		 * @param {@link cef.admin.api.UpdateSalesQuoteContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteContact
		 * @path <API Root>/Quoting/SalesQuoteContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteContact = (routeParams?: UpdateSalesQuoteContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote event.
		 * @param {@link cef.admin.api.UpdateSalesQuoteEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteEvent
		 * @path <API Root>/Quoting/SalesQuoteEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteEvent = (routeParams?: UpdateSalesQuoteEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote event type.
		 * @param {@link cef.admin.api.UpdateSalesQuoteEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteEventType
		 * @path <API Root>/Quoting/SalesQuoteEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteEventType = (routeParams?: UpdateSalesQuoteEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote file.
		 * @param {@link cef.admin.api.UpdateSalesQuoteFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteFile
		 * @path <API Root>/Quoting/SalesQuoteFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteFile = (routeParams?: UpdateSalesQuoteFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote item.
		 * @param {@link cef.admin.api.UpdateSalesQuoteItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteItem
		 * @path <API Root>/Quoting/SalesQuoteItem/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteItem = (routeParams?: UpdateSalesQuoteItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItem", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote item target.
		 * @param {@link cef.admin.api.UpdateSalesQuoteItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteItemTarget
		 * @path <API Root>/Quoting/SalesQuoteItemTarget/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteItemTarget = (routeParams?: UpdateSalesQuoteItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteItemTarget", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote sales order.
		 * @param {@link cef.admin.api.UpdateSalesQuoteSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteSalesOrder
		 * @path <API Root>/Quoting/SalesQuoteSalesOrder/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteSalesOrder = (routeParams?: UpdateSalesQuoteSalesOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteSalesOrder", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote state.
		 * @param {@link cef.admin.api.UpdateSalesQuoteStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteState
		 * @path <API Root>/Quoting/SalesQuoteState/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteState = (routeParams?: UpdateSalesQuoteStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteState", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote status.
		 * @param {@link cef.admin.api.UpdateSalesQuoteStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteStatus
		 * @path <API Root>/Quoting/SalesQuoteStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteStatus = (routeParams?: UpdateSalesQuoteStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales quote type.
		 * @param {@link cef.admin.api.UpdateSalesQuoteTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesQuoteType
		 * @path <API Root>/Quoting/SalesQuoteType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesQuoteType = (routeParams?: UpdateSalesQuoteTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuoteType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to create a new or update an existing sales quote (as needed).
		 * @param {@link cef.admin.api.UpsertSalesQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertSalesQuote
		 * @path <API Root>/Quoting/SalesQuote/Upsert
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpsertSalesQuote = (routeParams?: UpsertSalesQuoteDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Quoting", "SalesQuote", "Upsert"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
