/**
 * @file framework/admin/_api/cvApi.Authentication.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Membership Registration Process step 5: Administrator approves the user
	 * @public
	 */
	export interface ApproveUserRegistrationDto {
		/** The encrypted token to use for validation */
		Token: string;
		/** CEF User ID */
		ID: number;
	}
	/**
	 * Assigns a role to a specified account (all users in the account will inherit the role).
	 * @public
	 */
	export interface AssignRoleToAccountDto {
	}
	/**
	 * Assigns a role to the specified user
	 * @public
	 */
	export interface AssignRoleToUserDto {
	}
	/**
	 * When provided with the valid existing password, changes the password for a user to a new value.
	 * @public
	 */
	export interface ChangePasswordDto {
		/** UserName */
		UserName: string;
		/** Current Password */
		Password: string;
		/** New Password */
		NewPassword: string;
	}
	/**
	 * Use to create a new role
	 * @public
	 */
	export interface CreateRoleDto {
		/** Name of the new Role to create */
		Name: string;
		/** Permissions this Role has */
		IncludedPermissions: Array<PermissionModel>;
	}
	/**
	 * Check if the currently logged in user has any Permissions by Regular Expression
	 * @public
	 */
	export interface CurrentUserHasAnyPermissionDto {
		/** The Regular Expression of the Permissions to match against */
		Regex: string;
	}
	/**
	 * Check if the currently logged in user has any Roles by Regular Expression
	 * @public
	 */
	export interface CurrentUserHasAnyRoleDto {
		/** The Regular Expression of the Roles to match against */
		Regex: string;
	}
	/**
	 * Check if the currently logged in user has a specific Permission by name
	 * @public
	 */
	export interface CurrentUserHasPermissionDto {
		/** The Name of the Permission to check */
		Name: string;
	}
	/**
	 * Check if the currently logged in user has a specific role by name.
	 * @public
	 */
	export interface CurrentUserHasRoleDto {
		/** The Name of the Role to check */
		Name: string;
	}
	/**
	 * Removes a specific role from the system [Hard-Delete]
	 * @public
	 */
	export interface DeleteRoleDto {
		/** Name of the Role to delete */
		Name: string;
	}
	/**
	 * When the user is required to reset their password, this endpoint handles it.
	 * @public
	 */
	export interface ForcedPasswordResetDto {
		/** Email */
		Email: string;
		/** Old Password */
		OldPassword: string;
		/** New Password */
		NewPassword: string;
	}
	/**
	 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
	 * @public
	 */
	export interface ForgotPasswordDto {
		/** Email */
		Email: string;
	}
	/**
	 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
	 * @public
	 */
	export interface ForgotPasswordReturnDto {
		/** Email */
		Email: string;
		/** Token */
		Token: string;
		/** Password */
		Password: string;
	}
	/**
	 * Sends an email to the user if the provided email matches an existing user with the Username in it.
	 * @public
	 */
	export interface ForgotUsernameDto {
		/** Email */
		Email: string;
	}
	/**
	 * Get the list of all roles in the server (as ID/Name key/value pairs).
	 * @public
	 */
	export interface GetRolesDto {
		ID?: number;
		CustomKey?: string;
	}
	/**
	 * Get the list of roles in the server (as models).
	 * @public
	 */
	export interface GetRolesAsListingDto {
		ID?: number;
		CustomKey?: string;
	}
	/**
	 * Consumes the code response from Open ID Connect
	 * @public
	 */
	export interface OktaCodeCallbackDto {
		id_token?: string; // Name format overridden
		access_token?: string; // Name format overridden
		code?: string; // Name format overridden
		expires_in: number; // Name format overridden
		resource?: string; // Name format overridden
		refresh_token?: string; // Name format overridden
		refresh_token_expires_in: number; // Name format overridden
		scope?: string; // Name format overridden
		error?: string; // Name format overridden
		errorDescription?: string; // Name format overridden
	}
	/**
	 * Registers a new user via the standard process
	 * @see {@link UserModel}
	 * @public
	 */
	export interface RegisterNewUserDto extends UserModel {
		AddressBook?: Array<AccountContactModel>;
		InService: boolean;
	}
	/**
	 * Removes a role assigned to a specified account.
	 * @public
	 */
	export interface RemoveRoleFromAccountDto {
	}
	/**
	 * Removes a role from a specified user
	 * @public
	 */
	export interface RemoveRoleFromUserDto {
	}
	/**
	 * Request a multi-factor authentication token for a specific user.
	 * @public
	 */
	export interface RequestMFAForUsernameDto {
		/** If true, send over SMS instead of email. */
		UsePhone: boolean;
	}
	/**
	 * Use to create a new role
	 * @public
	 */
	export interface UpdateRoleDto {
		/** Old name for the Role */
		OldName: string;
		/** New name for the Role */
		NewName: string;
		/** Permissions this Role has */
		IncludedPermissions: Array<PermissionModel>;
	}
	/**
	 * Updates the information about a specific role assignment to an account.
	 * @public
	 */
	export interface UpdateRoleForAccountDto {
	}
	/**
	 * Updates the information about the role assignment to a specific user
	 * @public
	 */
	export interface UpdateRoleForUserDto {
	}
	/**
	 * Validate Custom Key is Unique
	 * @public
	 */
	export interface ValidateCustomKeyIsUniqueDto {
		CustomKey: string;
	}
	/**
	 * Pass in user credentials to log into the site.
	 * @public
	 */
	export interface ValidateEmailDto {
		/** Email to send the invitation to */
		Email: string;
		/** The encrypted token to use for validation */
		Token: string;
	}
	/**
	 * Validate Email Is Unique
	 * @public
	 */
	export interface ValidateEmailIsUniqueDto {
		Email: string;
	}
	/**
	 * Validates that the password provided for a username is the correct one.
	 * @public
	 */
	export interface ValidatePasswordDto {
		UserName: string;
		Password: string;
	}
	/**
	 * Pass in user credentials to log into the site.
	 * @public
	 */
	export interface ValidatePasswordIsGoodDto {
		Password: string;
	}
	/**
	 * Pass in user credentials to log into the site.
	 * @public
	 */
	export interface ValidateUserNameIsGoodDto {
		UserName: string;
	}

	export class Authentication extends ServiceStackRoute {
		/**
		 * Approves a user, allowing them to log in
		 * @param {@link cef.admin.api.ApproveUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ApproveUser
		 * @path <API Root>/Authentication/Approve/User/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ApproveUser = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "Approve", "User", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Membership Registration Process step 5: Administrator approves the user
		 * @param {@link cef.admin.api.ApproveUserRegistrationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ApproveUserRegistration
		 * @path <API Root>/Authentication/ApproveUser
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ApproveUserRegistration = (routeParams: ApproveUserRegistrationDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ApproveUser"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Assigns a role to a specified account (all users in the account will inherit the role).
		 * @param {@link cef.admin.api.AssignRoleToAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AssignRoleToAccount
		 * @path <API Root>/Authentication/Account/AssignRole
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AssignRoleToAccount = (routeParams?: AssignRoleToAccountDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "Account", "AssignRole"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Assigns a role to the specified user
		 * @param {@link cef.admin.api.AssignRoleToUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AssignRoleToUser
		 * @path <API Root>/Authentication/User/AssignRole
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AssignRoleToUser = (routeParams?: AssignRoleToUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "User", "AssignRole"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * When provided with the valid existing password, changes the password for a user to a new value.
		 * @param {@link cef.admin.api.ChangePasswordDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ChangePassword
		 * @path <API Root>/Authentication/ChangePassword
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ChangePassword = (routeParams: ChangePasswordDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ChangePassword"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if multi-factor authentication is enabled for a specific user.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckForMFAForUsername
		 * @path <API Root>/Authentication/CheckForMFA/{Username*}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<MFARequirementsModel>>}
		 * @public
		 */
		CheckForMFAForUsername = (username: string) => this.$http<CEFActionResponseT<MFARequirementsModel>>({
			url: [this.rootUrl, "Authentication", "CheckForMFA", encodeURIComponent(username)].join("/"),
			method: "GET",
		});

		/**
		 * Use to create a new role
		 * @param {@link cef.admin.api.CreateRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRole
		 * @path <API Root>/Authentication/Role/Create
		 * @verb POST
		 * @returns {ng.IHttpPromise<RoleUserModel>}
		 * @public
		 */
		CreateRole = (routeParams: CreateRoleDto) => this.$http<RoleUserModel>({
			url: [this.rootUrl, "Authentication", "Role", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has any Permissions by Regular Expression
		 * @param {@link cef.admin.api.CurrentUserHasAnyPermissionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasAnyPermission
		 * @path <API Root>/Authentication/CurrentUser/HasAnyPermission
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasAnyPermission = (routeParams: CurrentUserHasAnyPermissionDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasAnyPermission"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has any Roles by Regular Expression
		 * @param {@link cef.admin.api.CurrentUserHasAnyRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasAnyRole
		 * @path <API Root>/Authentication/CurrentUser/HasAnyRole
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasAnyRole = (routeParams: CurrentUserHasAnyRoleDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasAnyRole"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has a specific Permission by name
		 * @param {@link cef.admin.api.CurrentUserHasPermissionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasPermission
		 * @path <API Root>/Authentication/CurrentUser/HasPermission
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasPermission = (routeParams: CurrentUserHasPermissionDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasPermission"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has a specific role by name.
		 * @param {@link cef.admin.api.CurrentUserHasRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasRole
		 * @path <API Root>/Authentication/CurrentUser/HasRole
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasRole = (routeParams: CurrentUserHasRoleDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasRole"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Removes a specific role from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRole
		 * @path <API Root>/Authentication/Role/Delete
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRole = (routeParams: DeleteRoleDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "Role", "Delete"].join("/"),
			method: "DELETE",
			data: routeParams
		});

		/**
		 * Un-sets the setting of a specific user to require resetting their password on next login attempt.
		 * @param {@link cef.admin.api.DontRequirePasswordResetOnNextLoginForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DontRequirePasswordResetOnNextLoginForUser
		 * @path <API Root>/Authentication/DontRequirePasswordResetOnNextLogin/User/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DontRequirePasswordResetOnNextLoginForUser = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "DontRequirePasswordResetOnNextLogin", "User", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Sets a user to require resetting their password on their next login attempt.
		 * @param {@link cef.admin.api.DoRequirePasswordResetOnNextLoginForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DoRequirePasswordResetOnNextLoginForUser
		 * @path <API Root>/Authentication/DoRequirePasswordResetOnNextLogin/User/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DoRequirePasswordResetOnNextLoginForUser = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "DoRequirePasswordResetOnNextLogin", "User", id].join("/"),
			method: "PATCH",
		});

		/**
		 * When the user is required to reset their password, this endpoint handles it.
		 * @param {@link cef.admin.api.ForcedPasswordResetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForcedPasswordReset
		 * @path <API Root>/Authentication/ForcedPasswordReset
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ForcedPasswordReset = (routeParams: ForcedPasswordResetDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ForcedPasswordReset"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
		 * @param {@link cef.admin.api.ForgotPasswordDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotPassword
		 * @path <API Root>/Authentication/ForgotPassword
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ForgotPassword = (routeParams: ForgotPasswordDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ForgotPassword"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
		 * @param {@link cef.admin.api.ForgotPasswordReturnDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotPasswordReturn
		 * @path <API Root>/Authentication/ForgotPassword/Return
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<string>>}
		 * @public
		 */
		ForgotPasswordReturn = (routeParams: ForgotPasswordReturnDto) => this.$http<CEFActionResponseT<string>>({
			url: [this.rootUrl, "Authentication", "ForgotPassword", "Return"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Sends an email to the user if the provided email matches an existing user with the Username in it.
		 * @param {@link cef.admin.api.ForgotUsernameDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotUsername
		 * @path <API Root>/Authentication/ForgotUsername
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ForgotUsername = (routeParams: ForgotUsernameDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ForgotUsername"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Get the list of Permissions available in the server
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPermissions
		 * @path <API Root>/Authentication/Permissions
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<PermissionModel>>}
		 * @public
		 */
		GetPermissions = () => this.$http<Array<PermissionModel>>({
			url: [this.rootUrl, "Authentication", "Permissions"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific role
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRole
		 * @path <API Root>/Authentication/Role/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<RoleUserModel>}
		 * @public
		 */
		GetRole = (id: number) => this.$http<RoleUserModel>({
			url: [this.rootUrl, "Authentication", "Role", id].join("/"),
			method: "GET",
		});

		/**
		 * Get the list of all roles in the server (as ID/Name key/value pairs).
		 * @param {@link cef.admin.api.GetRolesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRoles
		 * @path <API Root>/Authentication/Roles
		 * @verb POST
		 * @returns {ng.IHttpPromise<cefalt.admin.Dictionary<number>>}
		 * @public
		 */
		GetRoles = (routeParams?: GetRolesDto) => this.$http<cefalt.admin.Dictionary<number>>({
			url: [this.rootUrl, "Authentication", "Roles"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Get the list of roles in the server (as models).
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRolesAsListing
		 * @path <API Root>/Authentication/RolesListing
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<RoleUserModel>>}
		 * @public
		 */
		GetRolesAsListing = (routeParams?: GetRolesAsListingDto) => this.$http<Array<RoleUserModel>>({
			url: [this.rootUrl, "Authentication", "RolesListing"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get the roles assigned to a specific account (as models).
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRolesForAccount
		 * @path <API Root>/Authentication/Roles/Account/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<any>>}
		 * @public
		 */
		GetRolesForAccount = (id: number) => this.$http<Array<any>>({
			url: [this.rootUrl, "Authentication", "Roles", "Account", id].join("/"),
			method: "GET",
		});

		/**
		 * Get the roles assigned to a specific user (as models).
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRolesForUser
		 * @path <API Root>/Authentication/Roles/User/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<any>>}
		 * @public
		 */
		GetRolesForUser = (id: number) => this.$http<Array<any>>({
			url: [this.rootUrl, "Authentication", "Roles", "User", id].join("/"),
			method: "GET",
		});

		/**
		 * Locks the user, preventing them from logging in
		 * @param {@link cef.admin.api.LockUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.LockUser
		 * @path <API Root>/Authentication/Lock/User/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		LockUser = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "Lock", "User", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Consumes the code response from Open ID Connect
		 * @param {@link cef.admin.api.OktaCodeCallbackDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType ServiceStack.Auth.OktaCodeCallback
		 * @path <API Root>/Authentication/OktaCodeCallback
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		OktaCodeCallback = (routeParams: OktaCodeCallbackDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "OktaCodeCallback"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Registers a new user via the standard process
		 * @param {@link cef.admin.api.RegisterNewUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RegisterNewUser
		 * @path <API Root>/Authentication/RegisterNewUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RegisterNewUser = (routeParams: RegisterNewUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "RegisterNewUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Removes a role assigned to a specified account.
		 * @param {@link cef.admin.api.RemoveRoleFromAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RemoveRoleFromAccount
		 * @path <API Root>/Authentication/Account/RemoveRole
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RemoveRoleFromAccount = (routeParams?: RemoveRoleFromAccountDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "Account", "RemoveRole"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Removes a role from a specified user
		 * @param {@link cef.admin.api.RemoveRoleFromUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RemoveRoleFromUser
		 * @path <API Root>/Authentication/User/RemoveRole
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RemoveRoleFromUser = (routeParams?: RemoveRoleFromUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "User", "RemoveRole"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Request a multi-factor authentication token for a specific user.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RequestMFAForUsername
		 * @path <API Root>/Authentication/RequestMFA/{Username*}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RequestMFAForUsername = (username: string, routeParams: RequestMFAForUsernameDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "RequestMFA", encodeURIComponent(username)].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Removes the approval for a user, preventing them from logging in.
		 * @param {@link cef.admin.api.UnApproveUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UnApproveUser
		 * @path <API Root>/Authentication/UnApprove/User/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UnApproveUser = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "UnApprove", "User", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Unlocks a locked user, allowing them to log in
		 * @param {@link cef.admin.api.UnlockUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UnlockUser
		 * @path <API Root>/Authentication/Unlock/User/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UnlockUser = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "Unlock", "User", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to create a new role
		 * @param {@link cef.admin.api.UpdateRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRole
		 * @path <API Root>/Authentication/Role/Update
		 * @verb PUT
		 * @returns {ng.IHttpPromise<RoleUserModel>}
		 * @public
		 */
		UpdateRole = (routeParams: UpdateRoleDto) => this.$http<RoleUserModel>({
			url: [this.rootUrl, "Authentication", "Role", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Updates the information about a specific role assignment to an account.
		 * @param {@link cef.admin.api.UpdateRoleForAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRoleForAccount
		 * @path <API Root>/Authentication/Account/UpdateRole
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UpdateRoleForAccount = (routeParams?: UpdateRoleForAccountDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "Account", "UpdateRole"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Updates the information about the role assignment to a specific user
		 * @param {@link cef.admin.api.UpdateRoleForUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRoleForUser
		 * @path <API Root>/Authentication/User/UpdateRole
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UpdateRoleForUser = (routeParams?: UpdateRoleForUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "User", "UpdateRole"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Validate Custom Key is Unique
		 * @param {@link cef.admin.api.ValidateCustomKeyIsUniqueDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateCustomKeyIsUnique
		 * @path <API Root>/Authentication/ValidateCustomKeyIsUnique
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateCustomKeyIsUnique = (routeParams: ValidateCustomKeyIsUniqueDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateCustomKeyIsUnique"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Pass in user credentials to log into the site.
		 * @param {@link cef.admin.api.ValidateEmailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateEmail
		 * @path <API Root>/Authentication/ValidateEmail
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateEmail = (routeParams: ValidateEmailDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateEmail"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Validate Email Is Unique
		 * @param {@link cef.admin.api.ValidateEmailIsUniqueDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateEmailIsUnique
		 * @path <API Root>/Authentication/ValidateEmailIsUnique
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateEmailIsUnique = (routeParams: ValidateEmailIsUniqueDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateEmailIsUnique"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Validates that the password provided for a username is the correct one.
		 * @param {@link cef.admin.api.ValidatePasswordDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidatePassword
		 * @path <API Root>/Authentication/ValidatePassword
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidatePassword = (routeParams: ValidatePasswordDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidatePassword"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Pass in user credentials to log into the site.
		 * @param {@link cef.admin.api.ValidatePasswordIsGoodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidatePasswordIsGood
		 * @path <API Root>/Authentication/ValidatePasswordIsGood
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidatePasswordIsGood = (routeParams: ValidatePasswordIsGoodDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidatePasswordIsGood"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Pass in user credentials to log into the site.
		 * @param {@link cef.admin.api.ValidateUserNameIsGoodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateUserNameIsGood
		 * @path <API Root>/Authentication/ValidateUserNameIsGood
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateUserNameIsGood = (routeParams: ValidateUserNameIsGoodDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateUserNameIsGood"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
