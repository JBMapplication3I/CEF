/**
 * @file framework/admin/_api/cvApi.Auctions.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new auction.
	 * @see {@link AuctionModel}
	 * @public
	 */
	export interface CreateAuctionDto extends AuctionModel {
	}
	/**
	 * Use to create a new auction category.
	 * @see {@link AuctionCategoryModel}
	 * @public
	 */
	export interface CreateAuctionCategoryDto extends AuctionCategoryModel {
	}
	/**
	 * Use to create a new auction status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateAuctionStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new auction type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAuctionTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new bid.
	 * @see {@link BidModel}
	 * @public
	 */
	export interface CreateBidDto extends BidModel {
	}
	/**
	 * Use to create a new bid status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateBidStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new brand auction.
	 * @see {@link BrandAuctionModel}
	 * @public
	 */
	export interface CreateBrandAuctionDto extends BrandAuctionModel {
	}
	/**
	 * Use to create a new franchise auction.
	 * @see {@link FranchiseAuctionModel}
	 * @public
	 */
	export interface CreateFranchiseAuctionDto extends FranchiseAuctionModel {
	}
	/**
	 * Use to create a new lot.
	 * @see {@link LotModel}
	 * @public
	 */
	export interface CreateLotDto extends LotModel {
	}
	/**
	 * Use to create a new lot category.
	 * @see {@link LotCategoryModel}
	 * @public
	 */
	export interface CreateLotCategoryDto extends LotCategoryModel {
	}
	/**
	 * Use to create a new lot group.
	 * @see {@link LotGroupModel}
	 * @public
	 */
	export interface CreateLotGroupDto extends LotGroupModel {
	}
	/**
	 * Use to create a new lot status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateLotStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new lot type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateLotTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new store auction.
	 * @see {@link StoreAuctionModel}
	 * @public
	 */
	export interface CreateStoreAuctionDto extends StoreAuctionModel {
	}
	/**
	 * Use to get a list of auction categories
	 * @see {@link AuctionCategorySearchModel}
	 * @public
	 */
	export interface GetAuctionCategoriesDto extends AuctionCategorySearchModel {
	}
	/**
	 * Use to get a list of auctions
	 * @see {@link AuctionSearchModel}
	 * @public
	 */
	export interface GetAuctionsDto extends AuctionSearchModel {
	}
	/**
	 * Use to get a list of auction statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetAuctionStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of auction types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAuctionTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of bids
	 * @see {@link BidSearchModel}
	 * @public
	 */
	export interface GetBidsDto extends BidSearchModel {
	}
	/**
	 * Use to get a list of bid statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetBidStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of brand auctions
	 * @see {@link BrandAuctionSearchModel}
	 * @public
	 */
	export interface GetBrandAuctionsDto extends BrandAuctionSearchModel {
	}
	/**
	 * Use to get a list of franchise auctions
	 * @see {@link FranchiseAuctionSearchModel}
	 * @public
	 */
	export interface GetFranchiseAuctionsDto extends FranchiseAuctionSearchModel {
	}
	/**
	 * Use to get a list of lot categories
	 * @see {@link LotCategorySearchModel}
	 * @public
	 */
	export interface GetLotCategoriesDto extends LotCategorySearchModel {
	}
	/**
	 * Use to get a list of lot groups
	 * @see {@link LotGroupSearchModel}
	 * @public
	 */
	export interface GetLotGroupsDto extends LotGroupSearchModel {
	}
	/**
	 * Use to get a list of lots
	 * @see {@link LotSearchModel}
	 * @public
	 */
	export interface GetLotsDto extends LotSearchModel {
	}
	/**
	 * Use to get a list of lot statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetLotStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of lot types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetLotTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of store auctions
	 * @see {@link StoreAuctionSearchModel}
	 * @public
	 */
	export interface GetStoreAuctionsDto extends StoreAuctionSearchModel {
	}
	/**
	 * Use to update an existing auction.
	 * @see {@link AuctionModel}
	 * @public
	 */
	export interface UpdateAuctionDto extends AuctionModel {
	}
	/**
	 * Use to update an existing auction category.
	 * @see {@link AuctionCategoryModel}
	 * @public
	 */
	export interface UpdateAuctionCategoryDto extends AuctionCategoryModel {
	}
	/**
	 * Use to update an existing auction status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateAuctionStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing auction type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAuctionTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing bid.
	 * @see {@link BidModel}
	 * @public
	 */
	export interface UpdateBidDto extends BidModel {
	}
	/**
	 * Use to update an existing bid status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateBidStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing brand auction.
	 * @see {@link BrandAuctionModel}
	 * @public
	 */
	export interface UpdateBrandAuctionDto extends BrandAuctionModel {
	}
	/**
	 * Use to update an existing franchise auction.
	 * @see {@link FranchiseAuctionModel}
	 * @public
	 */
	export interface UpdateFranchiseAuctionDto extends FranchiseAuctionModel {
	}
	/**
	 * Use to update an existing lot.
	 * @see {@link LotModel}
	 * @public
	 */
	export interface UpdateLotDto extends LotModel {
	}
	/**
	 * Use to update an existing lot category.
	 * @see {@link LotCategoryModel}
	 * @public
	 */
	export interface UpdateLotCategoryDto extends LotCategoryModel {
	}
	/**
	 * Use to update an existing lot group.
	 * @see {@link LotGroupModel}
	 * @public
	 */
	export interface UpdateLotGroupDto extends LotGroupModel {
	}
	/**
	 * Use to update an existing lot status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateLotStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing lot type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateLotTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing store auction.
	 * @see {@link StoreAuctionModel}
	 * @public
	 */
	export interface UpdateStoreAuctionDto extends StoreAuctionModel {
	}

	export class Auctions extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all auction calls.
		 * @param {@link cef.admin.api.ClearAuctionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAuctionCache
		 * @path <API Root>/Auctions/Auction/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAuctionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "Auction", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all auction category calls.
		 * @param {@link cef.admin.api.ClearAuctionCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAuctionCategoryCache
		 * @path <API Root>/Auctions/AuctionCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAuctionCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "AuctionCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all auction status calls.
		 * @param {@link cef.admin.api.ClearAuctionStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAuctionStatusCache
		 * @path <API Root>/Auctions/AuctionStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAuctionStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "AuctionStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all auction type calls.
		 * @param {@link cef.admin.api.ClearAuctionTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAuctionTypeCache
		 * @path <API Root>/Auctions/AuctionType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAuctionTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "AuctionType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all bid calls.
		 * @param {@link cef.admin.api.ClearBidCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBidCache
		 * @path <API Root>/Auctions/Bid/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBidCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "Bid", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all bid status calls.
		 * @param {@link cef.admin.api.ClearBidStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBidStatusCache
		 * @path <API Root>/Auctions/BidStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBidStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "BidStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all brand auction calls.
		 * @param {@link cef.admin.api.ClearBrandAuctionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearBrandAuctionCache
		 * @path <API Root>/Auctions/BrandAuction/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearBrandAuctionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "BrandAuction", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise auction calls.
		 * @param {@link cef.admin.api.ClearFranchiseAuctionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseAuctionCache
		 * @path <API Root>/Auctions/FranchiseAuction/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseAuctionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "FranchiseAuction", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all lot calls.
		 * @param {@link cef.admin.api.ClearLotCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLotCache
		 * @path <API Root>/Auctions/Lot/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLotCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "Lot", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all lot category calls.
		 * @param {@link cef.admin.api.ClearLotCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLotCategoryCache
		 * @path <API Root>/Auctions/LotCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLotCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "LotCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all lot group calls.
		 * @param {@link cef.admin.api.ClearLotGroupCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLotGroupCache
		 * @path <API Root>/Auctions/LotGroup/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLotGroupCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "LotGroup", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all lot status calls.
		 * @param {@link cef.admin.api.ClearLotStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLotStatusCache
		 * @path <API Root>/Auctions/LotStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLotStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "LotStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all lot type calls.
		 * @param {@link cef.admin.api.ClearLotTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLotTypeCache
		 * @path <API Root>/Auctions/LotType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLotTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "LotType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all store auction calls.
		 * @param {@link cef.admin.api.ClearStoreAuctionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearStoreAuctionCache
		 * @path <API Root>/Auctions/StoreAuction/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearStoreAuctionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "StoreAuction", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new auction.
		 * @param {@link cef.admin.api.CreateAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAuction
		 * @path <API Root>/Auctions/Auction/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAuction = (routeParams?: CreateAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "Auction", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new auction category.
		 * @param {@link cef.admin.api.CreateAuctionCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAuctionCategory
		 * @path <API Root>/Auctions/AuctionCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAuctionCategory = (routeParams?: CreateAuctionCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "AuctionCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new auction status.
		 * @param {@link cef.admin.api.CreateAuctionStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAuctionStatus
		 * @path <API Root>/Auctions/AuctionStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAuctionStatus = (routeParams?: CreateAuctionStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "AuctionStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new auction type.
		 * @param {@link cef.admin.api.CreateAuctionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAuctionType
		 * @path <API Root>/Auctions/AuctionType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAuctionType = (routeParams?: CreateAuctionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "AuctionType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new bid.
		 * @param {@link cef.admin.api.CreateBidDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBid
		 * @path <API Root>/Auctions/Bid/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBid = (routeParams?: CreateBidDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "Bid", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new bid status.
		 * @param {@link cef.admin.api.CreateBidStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBidStatus
		 * @path <API Root>/Auctions/BidStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBidStatus = (routeParams?: CreateBidStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "BidStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new brand auction.
		 * @param {@link cef.admin.api.CreateBrandAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateBrandAuction
		 * @path <API Root>/Auctions/BrandAuction/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateBrandAuction = (routeParams?: CreateBrandAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "BrandAuction", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise auction.
		 * @param {@link cef.admin.api.CreateFranchiseAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseAuction
		 * @path <API Root>/Auctions/FranchiseAuction/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseAuction = (routeParams?: CreateFranchiseAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "FranchiseAuction", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new lot.
		 * @param {@link cef.admin.api.CreateLotDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLot
		 * @path <API Root>/Auctions/Lot/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLot = (routeParams?: CreateLotDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "Lot", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new lot category.
		 * @param {@link cef.admin.api.CreateLotCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLotCategory
		 * @path <API Root>/Auctions/LotCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLotCategory = (routeParams?: CreateLotCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new lot group.
		 * @param {@link cef.admin.api.CreateLotGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLotGroup
		 * @path <API Root>/Auctions/LotGroup/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLotGroup = (routeParams?: CreateLotGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotGroup", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new lot status.
		 * @param {@link cef.admin.api.CreateLotStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLotStatus
		 * @path <API Root>/Auctions/LotStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLotStatus = (routeParams?: CreateLotStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new lot type.
		 * @param {@link cef.admin.api.CreateLotTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLotType
		 * @path <API Root>/Auctions/LotType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLotType = (routeParams?: CreateLotTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new store auction.
		 * @param {@link cef.admin.api.CreateStoreAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateStoreAuction
		 * @path <API Root>/Auctions/StoreAuction/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateStoreAuction = (routeParams?: CreateStoreAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "StoreAuction", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific auction from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAuctionByID
		 * @path <API Root>/Auctions/Auction/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Auction", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific auction category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAuctionCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAuctionCategoryByID
		 * @path <API Root>/Auctions/AuctionCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAuctionCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific auction status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAuctionStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAuctionStatusByID
		 * @path <API Root>/Auctions/AuctionStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAuctionStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific auction type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAuctionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAuctionTypeByID
		 * @path <API Root>/Auctions/AuctionType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAuctionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific bid from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBidByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBidByID
		 * @path <API Root>/Auctions/Bid/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBidByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Bid", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific bid status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBidStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBidStatusByID
		 * @path <API Root>/Auctions/BidStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBidStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "BidStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific brand auction from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateBrandAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateBrandAuctionByID
		 * @path <API Root>/Auctions/BrandAuction/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateBrandAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "BrandAuction", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise auction from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseAuctionByID
		 * @path <API Root>/Auctions/FranchiseAuction/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "FranchiseAuction", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific lot from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLotByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLotByID
		 * @path <API Root>/Auctions/Lot/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLotByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Lot", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific lot category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLotCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLotCategoryByID
		 * @path <API Root>/Auctions/LotCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLotCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific lot group from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLotGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLotGroupByID
		 * @path <API Root>/Auctions/LotGroup/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLotGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotGroup", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific lot status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLotStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLotStatusByID
		 * @path <API Root>/Auctions/LotStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLotStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific lot type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLotTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLotTypeByID
		 * @path <API Root>/Auctions/LotType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLotTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific store auction from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateStoreAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateStoreAuctionByID
		 * @path <API Root>/Auctions/StoreAuction/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateStoreAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "StoreAuction", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific auction from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAuctionByID
		 * @path <API Root>/Auctions/Auction/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Auction", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific auction category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAuctionCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAuctionCategoryByID
		 * @path <API Root>/Auctions/AuctionCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAuctionCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific auction status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAuctionStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAuctionStatusByID
		 * @path <API Root>/Auctions/AuctionStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAuctionStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific auction type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAuctionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAuctionTypeByID
		 * @path <API Root>/Auctions/AuctionType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAuctionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific bid from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBidByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBidByID
		 * @path <API Root>/Auctions/Bid/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBidByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Bid", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific bid status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBidStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBidStatusByID
		 * @path <API Root>/Auctions/BidStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBidStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "BidStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific brand auction from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteBrandAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteBrandAuctionByID
		 * @path <API Root>/Auctions/BrandAuction/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteBrandAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "BrandAuction", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise auction from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseAuctionByID
		 * @path <API Root>/Auctions/FranchiseAuction/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "FranchiseAuction", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific lot from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLotByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLotByID
		 * @path <API Root>/Auctions/Lot/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLotByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Lot", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific lot category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLotCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLotCategoryByID
		 * @path <API Root>/Auctions/LotCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLotCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific lot group from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLotGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLotGroupByID
		 * @path <API Root>/Auctions/LotGroup/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLotGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotGroup", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific lot status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLotStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLotStatusByID
		 * @path <API Root>/Auctions/LotStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLotStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific lot type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLotTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLotTypeByID
		 * @path <API Root>/Auctions/LotType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLotTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific store auction from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteStoreAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteStoreAuctionByID
		 * @path <API Root>/Auctions/StoreAuction/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteStoreAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "StoreAuction", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific auction
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionByID
		 * @path <API Root>/Auctions/Auction/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionModel>}
		 * @public
		 */
		GetAuctionByID = (id: number) => this.$http<AuctionModel>({
			url: [this.rootUrl, "Auctions", "Auction", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of auction categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionCategories
		 * @path <API Root>/Auctions/AuctionCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionCategoryPagedResults>}
		 * @public
		 */
		GetAuctionCategories = (routeParams?: GetAuctionCategoriesDto) => this.$http<AuctionCategoryPagedResults>({
			url: [this.rootUrl, "Auctions", "AuctionCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific auction category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionCategoryByID
		 * @path <API Root>/Auctions/AuctionCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionCategoryModel>}
		 * @public
		 */
		GetAuctionCategoryByID = (id: number) => this.$http<AuctionCategoryModel>({
			url: [this.rootUrl, "Auctions", "AuctionCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of auctions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctions
		 * @path <API Root>/Auctions/Auctions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionPagedResults>}
		 * @public
		 */
		GetAuctions = (routeParams?: GetAuctionsDto) => this.$http<AuctionPagedResults>({
			url: [this.rootUrl, "Auctions", "Auctions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific auction status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionStatusByID
		 * @path <API Root>/Auctions/AuctionStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetAuctionStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Auctions", "AuctionStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of auction statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionStatuses
		 * @path <API Root>/Auctions/AuctionStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionStatusPagedResults>}
		 * @public
		 */
		GetAuctionStatuses = (routeParams?: GetAuctionStatusesDto) => this.$http<AuctionStatusPagedResults>({
			url: [this.rootUrl, "Auctions", "AuctionStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific auction type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionTypeByID
		 * @path <API Root>/Auctions/AuctionType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAuctionTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Auctions", "AuctionType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of auction types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionTypes
		 * @path <API Root>/Auctions/AuctionTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionTypePagedResults>}
		 * @public
		 */
		GetAuctionTypes = (routeParams?: GetAuctionTypesDto) => this.$http<AuctionTypePagedResults>({
			url: [this.rootUrl, "Auctions", "AuctionTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific bid
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBidByID
		 * @path <API Root>/Auctions/Bid/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BidModel>}
		 * @public
		 */
		GetBidByID = (id: number) => this.$http<BidModel>({
			url: [this.rootUrl, "Auctions", "Bid", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of bids
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBids
		 * @path <API Root>/Auctions/Bids
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BidPagedResults>}
		 * @public
		 */
		GetBids = (routeParams?: GetBidsDto) => this.$http<BidPagedResults>({
			url: [this.rootUrl, "Auctions", "Bids"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific bid status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBidStatusByID
		 * @path <API Root>/Auctions/BidStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetBidStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Auctions", "BidStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of bid statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBidStatuses
		 * @path <API Root>/Auctions/BidStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BidStatusPagedResults>}
		 * @public
		 */
		GetBidStatuses = (routeParams?: GetBidStatusesDto) => this.$http<BidStatusPagedResults>({
			url: [this.rootUrl, "Auctions", "BidStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific brand auction
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandAuctionByID
		 * @path <API Root>/Auctions/BrandAuction/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandAuctionModel>}
		 * @public
		 */
		GetBrandAuctionByID = (id: number) => this.$http<BrandAuctionModel>({
			url: [this.rootUrl, "Auctions", "BrandAuction", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of brand auctions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBrandAuctions
		 * @path <API Root>/Auctions/BrandAuctions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BrandAuctionPagedResults>}
		 * @public
		 */
		GetBrandAuctions = (routeParams?: GetBrandAuctionsDto) => this.$http<BrandAuctionPagedResults>({
			url: [this.rootUrl, "Auctions", "BrandAuctions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise auction
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseAuctionByID
		 * @path <API Root>/Auctions/FranchiseAuction/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseAuctionModel>}
		 * @public
		 */
		GetFranchiseAuctionByID = (id: number) => this.$http<FranchiseAuctionModel>({
			url: [this.rootUrl, "Auctions", "FranchiseAuction", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise auctions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseAuctions
		 * @path <API Root>/Auctions/FranchiseAuctions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseAuctionPagedResults>}
		 * @public
		 */
		GetFranchiseAuctions = (routeParams?: GetFranchiseAuctionsDto) => this.$http<FranchiseAuctionPagedResults>({
			url: [this.rootUrl, "Auctions", "FranchiseAuctions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific lot
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotByID
		 * @path <API Root>/Auctions/Lot/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotModel>}
		 * @public
		 */
		GetLotByID = (id: number) => this.$http<LotModel>({
			url: [this.rootUrl, "Auctions", "Lot", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of lot categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotCategories
		 * @path <API Root>/Auctions/LotCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotCategoryPagedResults>}
		 * @public
		 */
		GetLotCategories = (routeParams?: GetLotCategoriesDto) => this.$http<LotCategoryPagedResults>({
			url: [this.rootUrl, "Auctions", "LotCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific lot category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotCategoryByID
		 * @path <API Root>/Auctions/LotCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotCategoryModel>}
		 * @public
		 */
		GetLotCategoryByID = (id: number) => this.$http<LotCategoryModel>({
			url: [this.rootUrl, "Auctions", "LotCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific lot group
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotGroupByID
		 * @path <API Root>/Auctions/LotGroup/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotGroupModel>}
		 * @public
		 */
		GetLotGroupByID = (id: number) => this.$http<LotGroupModel>({
			url: [this.rootUrl, "Auctions", "LotGroup", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of lot groups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotGroups
		 * @path <API Root>/Auctions/LotGroups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotGroupPagedResults>}
		 * @public
		 */
		GetLotGroups = (routeParams?: GetLotGroupsDto) => this.$http<LotGroupPagedResults>({
			url: [this.rootUrl, "Auctions", "LotGroups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of lots
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLots
		 * @path <API Root>/Auctions/Lots
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotPagedResults>}
		 * @public
		 */
		GetLots = (routeParams?: GetLotsDto) => this.$http<LotPagedResults>({
			url: [this.rootUrl, "Auctions", "Lots"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific lot status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotStatusByID
		 * @path <API Root>/Auctions/LotStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetLotStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Auctions", "LotStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of lot statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotStatuses
		 * @path <API Root>/Auctions/LotStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotStatusPagedResults>}
		 * @public
		 */
		GetLotStatuses = (routeParams?: GetLotStatusesDto) => this.$http<LotStatusPagedResults>({
			url: [this.rootUrl, "Auctions", "LotStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific lot type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotTypeByID
		 * @path <API Root>/Auctions/LotType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetLotTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Auctions", "LotType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of lot types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotTypes
		 * @path <API Root>/Auctions/LotTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotTypePagedResults>}
		 * @public
		 */
		GetLotTypes = (routeParams?: GetLotTypesDto) => this.$http<LotTypePagedResults>({
			url: [this.rootUrl, "Auctions", "LotTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific store auction
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreAuctionByID
		 * @path <API Root>/Auctions/StoreAuction/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreAuctionModel>}
		 * @public
		 */
		GetStoreAuctionByID = (id: number) => this.$http<StoreAuctionModel>({
			url: [this.rootUrl, "Auctions", "StoreAuction", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store auctions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreAuctions
		 * @path <API Root>/Auctions/StoreAuctions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreAuctionPagedResults>}
		 * @public
		 */
		GetStoreAuctions = (routeParams?: GetStoreAuctionsDto) => this.$http<StoreAuctionPagedResults>({
			url: [this.rootUrl, "Auctions", "StoreAuctions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific auction from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAuctionByID
		 * @path <API Root>/Auctions/Auction/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Auction", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific auction category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAuctionCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAuctionCategoryByID
		 * @path <API Root>/Auctions/AuctionCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAuctionCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific auction status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAuctionStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAuctionStatusByID
		 * @path <API Root>/Auctions/AuctionStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAuctionStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific auction type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAuctionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAuctionTypeByID
		 * @path <API Root>/Auctions/AuctionType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAuctionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "AuctionType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific bid from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBidByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBidByID
		 * @path <API Root>/Auctions/Bid/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBidByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Bid", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific bid status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBidStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBidStatusByID
		 * @path <API Root>/Auctions/BidStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBidStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "BidStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific brand auction from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateBrandAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateBrandAuctionByID
		 * @path <API Root>/Auctions/BrandAuction/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateBrandAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "BrandAuction", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise auction from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseAuctionByID
		 * @path <API Root>/Auctions/FranchiseAuction/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "FranchiseAuction", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific lot from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLotByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLotByID
		 * @path <API Root>/Auctions/Lot/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLotByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Lot", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific lot category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLotCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLotCategoryByID
		 * @path <API Root>/Auctions/LotCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLotCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific lot group from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLotGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLotGroupByID
		 * @path <API Root>/Auctions/LotGroup/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLotGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotGroup", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific lot status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLotStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLotStatusByID
		 * @path <API Root>/Auctions/LotStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLotStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific lot type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLotTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLotTypeByID
		 * @path <API Root>/Auctions/LotType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLotTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "LotType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific store auction from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateStoreAuctionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateStoreAuctionByID
		 * @path <API Root>/Auctions/StoreAuction/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateStoreAuctionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "StoreAuction", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing auction.
		 * @param {@link cef.admin.api.UpdateAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAuction
		 * @path <API Root>/Auctions/Auction/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAuction = (routeParams?: UpdateAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "Auction", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing auction category.
		 * @param {@link cef.admin.api.UpdateAuctionCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAuctionCategory
		 * @path <API Root>/Auctions/AuctionCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAuctionCategory = (routeParams?: UpdateAuctionCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "AuctionCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing auction status.
		 * @param {@link cef.admin.api.UpdateAuctionStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAuctionStatus
		 * @path <API Root>/Auctions/AuctionStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAuctionStatus = (routeParams?: UpdateAuctionStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "AuctionStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing auction type.
		 * @param {@link cef.admin.api.UpdateAuctionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAuctionType
		 * @path <API Root>/Auctions/AuctionType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAuctionType = (routeParams?: UpdateAuctionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "AuctionType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing bid.
		 * @param {@link cef.admin.api.UpdateBidDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBid
		 * @path <API Root>/Auctions/Bid/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBid = (routeParams?: UpdateBidDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "Bid", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing bid status.
		 * @param {@link cef.admin.api.UpdateBidStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBidStatus
		 * @path <API Root>/Auctions/BidStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBidStatus = (routeParams?: UpdateBidStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "BidStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing brand auction.
		 * @param {@link cef.admin.api.UpdateBrandAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateBrandAuction
		 * @path <API Root>/Auctions/BrandAuction/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateBrandAuction = (routeParams?: UpdateBrandAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "BrandAuction", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise auction.
		 * @param {@link cef.admin.api.UpdateFranchiseAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseAuction
		 * @path <API Root>/Auctions/FranchiseAuction/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseAuction = (routeParams?: UpdateFranchiseAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "FranchiseAuction", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing lot.
		 * @param {@link cef.admin.api.UpdateLotDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLot
		 * @path <API Root>/Auctions/Lot/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLot = (routeParams?: UpdateLotDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "Lot", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing lot category.
		 * @param {@link cef.admin.api.UpdateLotCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLotCategory
		 * @path <API Root>/Auctions/LotCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLotCategory = (routeParams?: UpdateLotCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing lot group.
		 * @param {@link cef.admin.api.UpdateLotGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLotGroup
		 * @path <API Root>/Auctions/LotGroup/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLotGroup = (routeParams?: UpdateLotGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotGroup", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing lot status.
		 * @param {@link cef.admin.api.UpdateLotStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLotStatus
		 * @path <API Root>/Auctions/LotStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLotStatus = (routeParams?: UpdateLotStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing lot type.
		 * @param {@link cef.admin.api.UpdateLotTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLotType
		 * @path <API Root>/Auctions/LotType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLotType = (routeParams?: UpdateLotTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing store auction.
		 * @param {@link cef.admin.api.UpdateStoreAuctionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStoreAuction
		 * @path <API Root>/Auctions/StoreAuction/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateStoreAuction = (routeParams?: UpdateStoreAuctionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "StoreAuction", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
