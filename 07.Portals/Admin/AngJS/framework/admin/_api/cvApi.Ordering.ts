/**
 * @file framework/admin/_api/cvApi.Ordering.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Take payment information from the customer and perform an Authorize and/or Capture from the Payment Provider. If the total of all payments is less than the Balance Due, the status will be set to'Partial Payment Received', otherwise 'Full Payment Received'. An email notification will be sent to the customer.
	 * @public
	 */
	export interface AddPaymentToSalesOrderDto {
		ID: number;
		/** The Payment information. This will only be Authorized and not Captured with the Payment Provider */
		Payment: PaymentModel;
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesOrderStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesOrderStateExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesOrderStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesOrderStatusExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesOrderTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesOrderTypeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to create a new sales order.
	 * @see {@link SalesOrderModel}
	 * @public
	 */
	export interface CreateSalesOrderDto extends SalesOrderModel {
	}
	/**
	 * Use to create a new sales order contact.
	 * @see {@link SalesOrderContactModel}
	 * @public
	 */
	export interface CreateSalesOrderContactDto extends SalesOrderContactModel {
	}
	/**
	 * Use to create a new sales order event.
	 * @see {@link SalesOrderEventModel}
	 * @public
	 */
	export interface CreateSalesOrderEventDto extends SalesOrderEventModel {
	}
	/**
	 * Use to create a new sales order event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesOrderEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new sales order file.
	 * @see {@link SalesOrderFileModel}
	 * @public
	 */
	export interface CreateSalesOrderFileDto extends SalesOrderFileModel {
	}
	/**
	 * Use to create a new sales order item.
	 * @see {@link SalesItemBaseModel<AppliedSalesOrderItemDiscountModel>}
	 * @public
	 */
	export interface CreateSalesOrderItemDto extends SalesItemBaseModel<AppliedSalesOrderItemDiscountModel> {
	}
	/**
	 * Use to create a new sales order item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface CreateSalesOrderItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to create a new sales order state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface CreateSalesOrderStateDto extends StateModel {
	}
	/**
	 * Use to create a new sales order status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateSalesOrderStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new sales order type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSalesOrderTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of sales order contacts
	 * @see {@link SalesOrderContactSearchModel}
	 * @public
	 */
	export interface GetSalesOrderContactsDto extends SalesOrderContactSearchModel {
	}
	/**
	 * Use to get a list of sales order events
	 * @see {@link SalesOrderEventSearchModel}
	 * @public
	 */
	export interface GetSalesOrderEventsDto extends SalesOrderEventSearchModel {
	}
	/**
	 * Use to get a list of sales order event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesOrderEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of sales order files
	 * @see {@link SalesOrderFileSearchModel}
	 * @public
	 */
	export interface GetSalesOrderFilesDto extends SalesOrderFileSearchModel {
	}
	/**
	 * Use to get a list of sales order items
	 * @see {@link SalesItemBaseSearchModel}
	 * @public
	 */
	export interface GetSalesOrderItemsDto extends SalesItemBaseSearchModel {
	}
	/**
	 * Use to get a list of sales order item targets
	 * @see {@link SalesItemTargetBaseSearchModel}
	 * @public
	 */
	export interface GetSalesOrderItemTargetsDto extends SalesItemTargetBaseSearchModel {
	}
	/**
	 * Use to get a list of sales orders
	 * @see {@link SalesOrderSearchModel}
	 * @public
	 */
	export interface GetSalesOrdersDto extends SalesOrderSearchModel {
	}
	/**
	 * Use to get a list of sales order states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetSalesOrderStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of sales order statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSalesOrderStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of sales order types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesOrderTypesDto extends TypeSearchModel {
	}
	/**
	 * Send an email with the sales order receipt.
	 * @see {@link ImplementsIDBase}
	 * @public
	 */
	export interface SendSalesOrderConfirmationEmailDto extends ImplementsIDBase {
		Email?: string;
	}
	/**
	 * Use to update an existing sales order.
	 * @see {@link SalesOrderModel}
	 * @public
	 */
	export interface UpdateSalesOrderDto extends SalesOrderModel {
	}
	/**
	 * Use to update an existing sales order contact.
	 * @see {@link SalesOrderContactModel}
	 * @public
	 */
	export interface UpdateSalesOrderContactDto extends SalesOrderContactModel {
	}
	/**
	 * Use to update an existing sales order event.
	 * @see {@link SalesOrderEventModel}
	 * @public
	 */
	export interface UpdateSalesOrderEventDto extends SalesOrderEventModel {
	}
	/**
	 * Use to update an existing sales order event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesOrderEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing sales order file.
	 * @see {@link SalesOrderFileModel}
	 * @public
	 */
	export interface UpdateSalesOrderFileDto extends SalesOrderFileModel {
	}
	/**
	 * Use to update an existing sales order item.
	 * @see {@link SalesItemBaseModel<AppliedSalesOrderItemDiscountModel>}
	 * @public
	 */
	export interface UpdateSalesOrderItemDto extends SalesItemBaseModel<AppliedSalesOrderItemDiscountModel> {
	}
	/**
	 * Use to update an existing sales order item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface UpdateSalesOrderItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to update an existing sales order state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface UpdateSalesOrderStateDto extends StateModel {
	}
	/**
	 * Use to update an existing sales order status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateSalesOrderStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing sales order type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSalesOrderTypeDto extends TypeModel {
	}
	/**
	 * Update status of order. Doctor can approve, deny or modify.
	 * @public
	 */
	export interface UpdateStatusOfSalesOrderDto {
		StatusUpdate: string;
		ProductID: number;
		Quantity: number;
	}

	export class Ordering extends ServiceStackRoute {
		/**
		 * Take payment information from the customer and perform an Authorize and/or Capture from the Payment Provider. If the total of all payments is less than the Balance Due, the status will be set to'Partial Payment Received', otherwise 'Full Payment Received'. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.AddPaymentToSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.AddPaymentToSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/AddPayment
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AddPaymentToSalesOrder = (routeParams: AddPaymentToSalesOrderDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "AddPayment"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * The order items do not have sufficient stock. The order status will be set to 'Backordered'. An email notification will be sent to the customer. A Purchase Order should be created and reference this order by an Inventory Manager to refill stock.
		 * @param {@link cef.admin.api.BackorderSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.BackorderSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Backorder/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		BackorderSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Backorder", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Captures a pre-authorized payment on the order. No status change will occur.
		 * @param {@link cef.admin.api.CapturePaymentForSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CapturePaymentForSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/CapturePayment/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CapturePaymentForSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "CapturePayment", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderStateExistsByDisplayName
		 * @path <API Root>/Ordering/SalesOrderState/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderStateExistsByDisplayName = (routeParams?: CheckSalesOrderStateExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderStateExistsByKey
		 * @path <API Root>/Ordering/SalesOrderState/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderStateExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderStateExistsByName
		 * @path <API Root>/Ordering/SalesOrderState/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderStateExistsByName = (routeParams?: CheckSalesOrderStateExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderStatusExistsByDisplayName
		 * @path <API Root>/Ordering/SalesOrderStatus/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderStatusExistsByDisplayName = (routeParams?: CheckSalesOrderStatusExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderStatusExistsByKey
		 * @path <API Root>/Ordering/SalesOrderStatus/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderStatusExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderStatusExistsByName
		 * @path <API Root>/Ordering/SalesOrderStatus/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderStatusExistsByName = (routeParams?: CheckSalesOrderStatusExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderTypeExistsByDisplayName
		 * @path <API Root>/Ordering/SalesOrderType/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderTypeExistsByDisplayName = (routeParams?: CheckSalesOrderTypeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderTypeExistsByKey
		 * @path <API Root>/Ordering/SalesOrderType/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderTypeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesOrderTypeExistsByName
		 * @path <API Root>/Ordering/SalesOrderType/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesOrderTypeExistsByName = (routeParams?: CheckSalesOrderTypeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all sales order calls.
		 * @param {@link cef.admin.api.ClearSalesOrderCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderCache
		 * @path <API Root>/Ordering/SalesOrder/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order contact calls.
		 * @param {@link cef.admin.api.ClearSalesOrderContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderContactCache
		 * @path <API Root>/Ordering/SalesOrderContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order event calls.
		 * @param {@link cef.admin.api.ClearSalesOrderEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderEventCache
		 * @path <API Root>/Ordering/SalesOrderEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order event type calls.
		 * @param {@link cef.admin.api.ClearSalesOrderEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderEventTypeCache
		 * @path <API Root>/Ordering/SalesOrderEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order file calls.
		 * @param {@link cef.admin.api.ClearSalesOrderFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderFileCache
		 * @path <API Root>/Ordering/SalesOrderFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order item calls.
		 * @param {@link cef.admin.api.ClearSalesOrderItemCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderItemCache
		 * @path <API Root>/Ordering/SalesOrderItem/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderItemCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderItem", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order item target calls.
		 * @param {@link cef.admin.api.ClearSalesOrderItemTargetCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderItemTargetCache
		 * @path <API Root>/Ordering/SalesOrderItemTarget/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderItemTargetCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTarget", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order state calls.
		 * @param {@link cef.admin.api.ClearSalesOrderStateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderStateCache
		 * @path <API Root>/Ordering/SalesOrderState/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderStateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order status calls.
		 * @param {@link cef.admin.api.ClearSalesOrderStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderStatusCache
		 * @path <API Root>/Ordering/SalesOrderStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sales order type calls.
		 * @param {@link cef.admin.api.ClearSalesOrderTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSalesOrderTypeCache
		 * @path <API Root>/Ordering/SalesOrderType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSalesOrderTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * The order will be set to 'Completed' status, no further modifications will be allowed. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.CompleteSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CompleteSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Complete/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CompleteSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Complete", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The order items each have sufficient stock and will be allocated against their stock (reducing each). The order status will be set to 'Confirmed'. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.ConfirmSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ConfirmSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Confirm/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ConfirmSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Confirm", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Creates a printable Pick Ticket for the Warehouse to locate products for the order. The order will be set to the 'Processing' status.
		 * @param {@link cef.admin.api.CreatePickTicketForSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePickTicketForSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/CreatePickTicket/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<SalesItemBaseModel<AppliedSalesOrderItemDiscountModel>>>>}
		 * @public
		 */
		CreatePickTicketForSalesOrder = (id: number) => this.$http<CEFActionResponseT<Array<SalesItemBaseModel<AppliedSalesOrderItemDiscountModel>>>>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "CreatePickTicket", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to create a new sales order.
		 * @param {@link cef.admin.api.CreateSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrder = (routeParams?: CreateSalesOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order contact.
		 * @param {@link cef.admin.api.CreateSalesOrderContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderContact
		 * @path <API Root>/Ordering/SalesOrderContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderContact = (routeParams?: CreateSalesOrderContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order event.
		 * @param {@link cef.admin.api.CreateSalesOrderEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderEvent
		 * @path <API Root>/Ordering/SalesOrderEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderEvent = (routeParams?: CreateSalesOrderEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order event type.
		 * @param {@link cef.admin.api.CreateSalesOrderEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderEventType
		 * @path <API Root>/Ordering/SalesOrderEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderEventType = (routeParams?: CreateSalesOrderEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order file.
		 * @param {@link cef.admin.api.CreateSalesOrderFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderFile
		 * @path <API Root>/Ordering/SalesOrderFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderFile = (routeParams?: CreateSalesOrderFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order item.
		 * @param {@link cef.admin.api.CreateSalesOrderItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderItem
		 * @path <API Root>/Ordering/SalesOrderItem/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderItem = (routeParams?: CreateSalesOrderItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderItem", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order item target.
		 * @param {@link cef.admin.api.CreateSalesOrderItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderItemTarget
		 * @path <API Root>/Ordering/SalesOrderItemTarget/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderItemTarget = (routeParams?: CreateSalesOrderItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTarget", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order state.
		 * @param {@link cef.admin.api.CreateSalesOrderStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderState
		 * @path <API Root>/Ordering/SalesOrderState/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderState = (routeParams?: CreateSalesOrderStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order status.
		 * @param {@link cef.admin.api.CreateSalesOrderStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderStatus
		 * @path <API Root>/Ordering/SalesOrderStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderStatus = (routeParams?: CreateSalesOrderStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sales order type.
		 * @param {@link cef.admin.api.CreateSalesOrderTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSalesOrderType
		 * @path <API Root>/Ordering/SalesOrderType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesOrderType = (routeParams?: CreateSalesOrderTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific sales order from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderByID
		 * @path <API Root>/Ordering/SalesOrder/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderContactByID
		 * @path <API Root>/Ordering/SalesOrderContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderEventByID
		 * @path <API Root>/Ordering/SalesOrderEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderEventTypeByID
		 * @path <API Root>/Ordering/SalesOrderEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderFileByID
		 * @path <API Root>/Ordering/SalesOrderFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order item from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderItemByID
		 * @path <API Root>/Ordering/SalesOrderItem/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderItem", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order item target from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderItemTargetByID
		 * @path <API Root>/Ordering/SalesOrderItemTarget/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTarget", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order state from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderStateByID
		 * @path <API Root>/Ordering/SalesOrderState/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderStatusByID
		 * @path <API Root>/Ordering/SalesOrderStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sales order type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSalesOrderTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSalesOrderTypeByID
		 * @path <API Root>/Ordering/SalesOrderType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSalesOrderTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific sales order from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderByID
		 * @path <API Root>/Ordering/SalesOrder/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderContactByID
		 * @path <API Root>/Ordering/SalesOrderContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderEventByID
		 * @path <API Root>/Ordering/SalesOrderEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderEventTypeByID
		 * @path <API Root>/Ordering/SalesOrderEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderFileByID
		 * @path <API Root>/Ordering/SalesOrderFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order item from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderItemByID
		 * @path <API Root>/Ordering/SalesOrderItem/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderItem", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order item target from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderItemTargetByID
		 * @path <API Root>/Ordering/SalesOrderItemTarget/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTarget", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order state from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderStateByID
		 * @path <API Root>/Ordering/SalesOrderState/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderStatusByID
		 * @path <API Root>/Ordering/SalesOrderStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sales order type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSalesOrderTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSalesOrderTypeByID
		 * @path <API Root>/Ordering/SalesOrderType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSalesOrderTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * A Purchase Order will be created with this order's line items where a Vendor can be selected that allows Drop Shipping. The order will be set to 'Shipped from Vendor' status. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.DropShipSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DropShipSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/DropShip/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponseT<PurchaseOrderModel>>}
		 * @public
		 */
		DropShipSalesOrder = (id: number) => this.$http<CEFActionResponseT<PurchaseOrderModel>>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "DropShip", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to get a specific sales order
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderByID
		 * @path <API Root>/Ordering/SalesOrder/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderModel>}
		 * @public
		 */
		GetSalesOrderByID = (id: number) => this.$http<SalesOrderModel>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sales order contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderContactByID
		 * @path <API Root>/Ordering/SalesOrderContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderContactModel>}
		 * @public
		 */
		GetSalesOrderContactByID = (id: number) => this.$http<SalesOrderContactModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderContacts
		 * @path <API Root>/Ordering/SalesOrderContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderContactPagedResults>}
		 * @public
		 */
		GetSalesOrderContacts = (routeParams?: GetSalesOrderContactsDto) => this.$http<SalesOrderContactPagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderEventByID
		 * @path <API Root>/Ordering/SalesOrderEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderEventModel>}
		 * @public
		 */
		GetSalesOrderEventByID = (id: number) => this.$http<SalesOrderEventModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderEvents
		 * @path <API Root>/Ordering/SalesOrderEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderEventPagedResults>}
		 * @public
		 */
		GetSalesOrderEvents = (routeParams?: GetSalesOrderEventsDto) => this.$http<SalesOrderEventPagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderEventTypeByID
		 * @path <API Root>/Ordering/SalesOrderEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesOrderEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderEventTypes
		 * @path <API Root>/Ordering/SalesOrderEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderEventTypePagedResults>}
		 * @public
		 */
		GetSalesOrderEventTypes = (routeParams?: GetSalesOrderEventTypesDto) => this.$http<SalesOrderEventTypePagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderFileByID
		 * @path <API Root>/Ordering/SalesOrderFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderFileModel>}
		 * @public
		 */
		GetSalesOrderFileByID = (id: number) => this.$http<SalesOrderFileModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderFiles
		 * @path <API Root>/Ordering/SalesOrderFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderFilePagedResults>}
		 * @public
		 */
		GetSalesOrderFiles = (routeParams?: GetSalesOrderFilesDto) => this.$http<SalesOrderFilePagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order item
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderItemByID
		 * @path <API Root>/Ordering/SalesOrderItem/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedSalesOrderItemDiscountModel>>}
		 * @public
		 */
		GetSalesOrderItemByID = (id: number) => this.$http<SalesItemBaseModel<AppliedSalesOrderItemDiscountModel>>({
			url: [this.rootUrl, "Ordering", "SalesOrderItem", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order items
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderItems
		 * @path <API Root>/Ordering/SalesOrderItems
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderItemPagedResults>}
		 * @public
		 */
		GetSalesOrderItems = (routeParams?: GetSalesOrderItemsDto) => this.$http<SalesOrderItemPagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderItems"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order item target
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderItemTargetByID
		 * @path <API Root>/Ordering/SalesOrderItemTarget/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetBaseModel>}
		 * @public
		 */
		GetSalesOrderItemTargetByID = (id: number) => this.$http<SalesItemTargetBaseModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTarget", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order item targets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderItemTargets
		 * @path <API Root>/Ordering/SalesOrderItemTargets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderItemTargetPagedResults>}
		 * @public
		 */
		GetSalesOrderItemTargets = (routeParams?: GetSalesOrderItemTargetsDto) => this.$http<SalesOrderItemTargetPagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTargets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of sales orders
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrders
		 * @path <API Root>/Ordering/SalesOrders
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderPagedResults>}
		 * @public
		 */
		GetSalesOrders = (routeParams?: GetSalesOrdersDto) => this.$http<SalesOrderPagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrders"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderStateByID
		 * @path <API Root>/Ordering/SalesOrderState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetSalesOrderStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderStates
		 * @path <API Root>/Ordering/SalesOrderStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderStatePagedResults>}
		 * @public
		 */
		GetSalesOrderStates = (routeParams?: GetSalesOrderStatesDto) => this.$http<SalesOrderStatePagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderStatusByID
		 * @path <API Root>/Ordering/SalesOrderStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSalesOrderStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderStatuses
		 * @path <API Root>/Ordering/SalesOrderStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderStatusPagedResults>}
		 * @public
		 */
		GetSalesOrderStatuses = (routeParams?: GetSalesOrderStatusesDto) => this.$http<SalesOrderStatusPagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales order type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderTypeByID
		 * @path <API Root>/Ordering/SalesOrderType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesOrderTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales order types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesOrderTypes
		 * @path <API Root>/Ordering/SalesOrderTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesOrderTypePagedResults>}
		 * @public
		 */
		GetSalesOrderTypes = (routeParams?: GetSalesOrderTypesDto) => this.$http<SalesOrderTypePagedResults>({
			url: [this.rootUrl, "Ordering", "SalesOrderTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * The order items each have sufficient stock and will be allocated against their stock (reducing each). The order status will be set to 'On Hold'. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.HoldSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.HoldSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Hold/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		HoldSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Hold", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Void the order. It will no longer be processed and will be visible on the Completed Orders view. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.MarkSalesOrderItemsInStockDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkSalesOrderItemsInStock
		 * @path <API Root>/Ordering/SalesOrder/InStock/{ID}/{Guid}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkSalesOrderItemsInStock = (id: number, guid: Guid) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "InStock", id, guid].join("/"),
			method: "PATCH",
		});

		/**
		 * Void the order. It will no longer be processed and will be visible on the Completed Orders view. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.MarkSalesOrderItemsNotInStockDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkSalesOrderItemsNotInStock
		 * @path <API Root>/Ordering/SalesOrder/NotInStock/{ID}/{Guid}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkSalesOrderItemsNotInStock = (id: number, guid: Guid) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "NotInStock", id, guid].join("/"),
			method: "PATCH",
		});

		/**
		 * The order items each have sufficient stock and will be allocated against their stock (reducing each). The order status will be set to 'Confirmed'. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.PendingSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.PendingSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Pending/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		PendingSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Pending", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderByID
		 * @path <API Root>/Ordering/SalesOrder/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderContactByID
		 * @path <API Root>/Ordering/SalesOrderContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderEventByID
		 * @path <API Root>/Ordering/SalesOrderEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderEventTypeByID
		 * @path <API Root>/Ordering/SalesOrderEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderFileByID
		 * @path <API Root>/Ordering/SalesOrderFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order item from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderItemByID
		 * @path <API Root>/Ordering/SalesOrderItem/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderItem", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order item target from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderItemTargetByID
		 * @path <API Root>/Ordering/SalesOrderItemTarget/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTarget", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order state from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderStateByID
		 * @path <API Root>/Ordering/SalesOrderState/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderStatusByID
		 * @path <API Root>/Ordering/SalesOrderStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sales order type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSalesOrderTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSalesOrderTypeByID
		 * @path <API Root>/Ordering/SalesOrderType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSalesOrderTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The order will be set to 'Ready For Pickup' status. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.ReadyForPickupSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReadyForPickupSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/ReadyForPickup/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReadyForPickupSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "ReadyForPickup", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Send an email with the sales order receipt.
		 * @param {@link cef.admin.api.SendSalesOrderConfirmationEmailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.SendSalesOrderConfirmationEmail
		 * @path <API Root>/Ordering/SalesOrder/SendReceiptEmail
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SendSalesOrderConfirmationEmail = (routeParams?: SendSalesOrderConfirmationEmailDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "SendReceiptEmail"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * The order will be set to 'Shipped' status. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.ShipSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ShipSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Ship/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ShipSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Ship", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing sales order.
		 * @param {@link cef.admin.api.UpdateSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrder = (routeParams?: UpdateSalesOrderDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order contact.
		 * @param {@link cef.admin.api.UpdateSalesOrderContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderContact
		 * @path <API Root>/Ordering/SalesOrderContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderContact = (routeParams?: UpdateSalesOrderContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order event.
		 * @param {@link cef.admin.api.UpdateSalesOrderEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderEvent
		 * @path <API Root>/Ordering/SalesOrderEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderEvent = (routeParams?: UpdateSalesOrderEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order event type.
		 * @param {@link cef.admin.api.UpdateSalesOrderEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderEventType
		 * @path <API Root>/Ordering/SalesOrderEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderEventType = (routeParams?: UpdateSalesOrderEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order file.
		 * @param {@link cef.admin.api.UpdateSalesOrderFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderFile
		 * @path <API Root>/Ordering/SalesOrderFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderFile = (routeParams?: UpdateSalesOrderFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order item.
		 * @param {@link cef.admin.api.UpdateSalesOrderItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderItem
		 * @path <API Root>/Ordering/SalesOrderItem/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderItem = (routeParams?: UpdateSalesOrderItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderItem", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order item target.
		 * @param {@link cef.admin.api.UpdateSalesOrderItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderItemTarget
		 * @path <API Root>/Ordering/SalesOrderItemTarget/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderItemTarget = (routeParams?: UpdateSalesOrderItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderItemTarget", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order state.
		 * @param {@link cef.admin.api.UpdateSalesOrderStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderState
		 * @path <API Root>/Ordering/SalesOrderState/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderState = (routeParams?: UpdateSalesOrderStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderState", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order status.
		 * @param {@link cef.admin.api.UpdateSalesOrderStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderStatus
		 * @path <API Root>/Ordering/SalesOrderStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderStatus = (routeParams?: UpdateSalesOrderStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sales order type.
		 * @param {@link cef.admin.api.UpdateSalesOrderTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSalesOrderType
		 * @path <API Root>/Ordering/SalesOrderType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesOrderType = (routeParams?: UpdateSalesOrderTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Ordering", "SalesOrderType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Update status of order. Doctor can approve, deny or modify.
		 * @param {@link cef.admin.api.UpdateStatusOfSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateStatusOfSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/PendingSalesOrders/{SalesOrderID}/Update
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UpdateStatusOfSalesOrder = (salesOrderID: number, routeParams: UpdateStatusOfSalesOrderDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "PendingSalesOrders", salesOrderID, "Update"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Void the order. It will no longer be processed and will be visible on the Completed Orders view. An email notification will be sent to the customer.
		 * @param {@link cef.admin.api.VoidSalesOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.VoidSalesOrder
		 * @path <API Root>/Ordering/SalesOrder/Void/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		VoidSalesOrder = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Ordering", "SalesOrder", "Void", id].join("/"),
			method: "PATCH",
		});

	}
}
