/**
 * @file framework/admin/_api/cvApi.Scouting.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new scout.
	 * @see {@link ScoutModel}
	 * @public
	 */
	export interface CreateScoutDto extends ScoutModel {
	}
	/**
	 * Use to create a new scout category.
	 * @see {@link ScoutCategoryModel}
	 * @public
	 */
	export interface CreateScoutCategoryDto extends ScoutCategoryModel {
	}
	/**
	 * Use to create a new scout category type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateScoutCategoryTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of scout categories
	 * @see {@link ScoutCategorySearchModel}
	 * @public
	 */
	export interface GetScoutCategoriesDto extends ScoutCategorySearchModel {
	}
	/**
	 * Use to get a list of scout category types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetScoutCategoryTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of scouts
	 * @see {@link ScoutSearchModel}
	 * @public
	 */
	export interface GetScoutsDto extends ScoutSearchModel {
	}
	/**
	 * Use to update an existing scout.
	 * @see {@link ScoutModel}
	 * @public
	 */
	export interface UpdateScoutDto extends ScoutModel {
	}
	/**
	 * Use to update an existing scout category.
	 * @see {@link ScoutCategoryModel}
	 * @public
	 */
	export interface UpdateScoutCategoryDto extends ScoutCategoryModel {
	}
	/**
	 * Use to update an existing scout category type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateScoutCategoryTypeDto extends TypeModel {
	}

	export class Scouting extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all scout calls.
		 * @param {@link cef.admin.api.ClearScoutCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearScoutCache
		 * @path <API Root>/Scouting/Scout/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearScoutCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scouting", "Scout", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all scout category calls.
		 * @param {@link cef.admin.api.ClearScoutCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearScoutCategoryCache
		 * @path <API Root>/Scouting/ScoutCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearScoutCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scouting", "ScoutCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all scout category type calls.
		 * @param {@link cef.admin.api.ClearScoutCategoryTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearScoutCategoryTypeCache
		 * @path <API Root>/Scouting/ScoutCategoryType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearScoutCategoryTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new scout.
		 * @param {@link cef.admin.api.CreateScoutDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateScout
		 * @path <API Root>/Scouting/Scout/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateScout = (routeParams?: CreateScoutDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scouting", "Scout", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new scout category.
		 * @param {@link cef.admin.api.CreateScoutCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateScoutCategory
		 * @path <API Root>/Scouting/ScoutCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateScoutCategory = (routeParams?: CreateScoutCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scouting", "ScoutCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new scout category type.
		 * @param {@link cef.admin.api.CreateScoutCategoryTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateScoutCategoryType
		 * @path <API Root>/Scouting/ScoutCategoryType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateScoutCategoryType = (routeParams?: CreateScoutCategoryTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific scout from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateScoutByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateScoutByID
		 * @path <API Root>/Scouting/Scout/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateScoutByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "Scout", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific scout category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateScoutCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateScoutCategoryByID
		 * @path <API Root>/Scouting/ScoutCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateScoutCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "ScoutCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific scout category type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateScoutCategoryTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateScoutCategoryTypeByID
		 * @path <API Root>/Scouting/ScoutCategoryType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateScoutCategoryTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific scout from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteScoutByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteScoutByID
		 * @path <API Root>/Scouting/Scout/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteScoutByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "Scout", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific scout category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteScoutCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteScoutCategoryByID
		 * @path <API Root>/Scouting/ScoutCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteScoutCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "ScoutCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific scout category type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteScoutCategoryTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteScoutCategoryTypeByID
		 * @path <API Root>/Scouting/ScoutCategoryType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteScoutCategoryTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific scout
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetScoutByID
		 * @path <API Root>/Scouting/Scout/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ScoutModel>}
		 * @public
		 */
		GetScoutByID = (id: number) => this.$http<ScoutModel>({
			url: [this.rootUrl, "Scouting", "Scout", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of scout categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetScoutCategories
		 * @path <API Root>/Scouting/ScoutCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ScoutCategoryPagedResults>}
		 * @public
		 */
		GetScoutCategories = (routeParams?: GetScoutCategoriesDto) => this.$http<ScoutCategoryPagedResults>({
			url: [this.rootUrl, "Scouting", "ScoutCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific scout category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetScoutCategoryByID
		 * @path <API Root>/Scouting/ScoutCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ScoutCategoryModel>}
		 * @public
		 */
		GetScoutCategoryByID = (id: number) => this.$http<ScoutCategoryModel>({
			url: [this.rootUrl, "Scouting", "ScoutCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific scout category type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetScoutCategoryTypeByID
		 * @path <API Root>/Scouting/ScoutCategoryType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetScoutCategoryTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of scout category types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetScoutCategoryTypes
		 * @path <API Root>/Scouting/ScoutCategoryTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ScoutCategoryTypePagedResults>}
		 * @public
		 */
		GetScoutCategoryTypes = (routeParams?: GetScoutCategoryTypesDto) => this.$http<ScoutCategoryTypePagedResults>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of scouts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetScouts
		 * @path <API Root>/Scouting/Scouts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ScoutPagedResults>}
		 * @public
		 */
		GetScouts = (routeParams?: GetScoutsDto) => this.$http<ScoutPagedResults>({
			url: [this.rootUrl, "Scouting", "Scouts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific scout from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateScoutByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateScoutByID
		 * @path <API Root>/Scouting/Scout/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateScoutByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "Scout", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific scout category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateScoutCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateScoutCategoryByID
		 * @path <API Root>/Scouting/ScoutCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateScoutCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "ScoutCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific scout category type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateScoutCategoryTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateScoutCategoryTypeByID
		 * @path <API Root>/Scouting/ScoutCategoryType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateScoutCategoryTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing scout.
		 * @param {@link cef.admin.api.UpdateScoutDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateScout
		 * @path <API Root>/Scouting/Scout/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateScout = (routeParams?: UpdateScoutDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scouting", "Scout", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing scout category.
		 * @param {@link cef.admin.api.UpdateScoutCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateScoutCategory
		 * @path <API Root>/Scouting/ScoutCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateScoutCategory = (routeParams?: UpdateScoutCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scouting", "ScoutCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing scout category type.
		 * @param {@link cef.admin.api.UpdateScoutCategoryTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateScoutCategoryType
		 * @path <API Root>/Scouting/ScoutCategoryType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateScoutCategoryType = (routeParams?: UpdateScoutCategoryTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scouting", "ScoutCategoryType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
