/**
 * @file framework/admin/_api/cvApi.Sampling.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new sample request.
	 * @see {@link SampleRequestModel}
	 * @public
	 */
	export interface CreateSampleRequestDto extends SampleRequestModel {
	}
	/**
	 * Use to create a new sample request contact.
	 * @see {@link SampleRequestContactModel}
	 * @public
	 */
	export interface CreateSampleRequestContactDto extends SampleRequestContactModel {
	}
	/**
	 * Use to create a new sample request event.
	 * @see {@link SampleRequestEventModel}
	 * @public
	 */
	export interface CreateSampleRequestEventDto extends SampleRequestEventModel {
	}
	/**
	 * Use to create a new sample request event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSampleRequestEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new sample request file.
	 * @see {@link SampleRequestFileModel}
	 * @public
	 */
	export interface CreateSampleRequestFileDto extends SampleRequestFileModel {
	}
	/**
	 * Use to create a new sample request item.
	 * @see {@link SalesItemBaseModel<AppliedSampleRequestItemDiscountModel>}
	 * @public
	 */
	export interface CreateSampleRequestItemDto extends SalesItemBaseModel<AppliedSampleRequestItemDiscountModel> {
	}
	/**
	 * Use to create a new sample request item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface CreateSampleRequestItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to create a new sample request state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface CreateSampleRequestStateDto extends StateModel {
	}
	/**
	 * Use to create a new sample request status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateSampleRequestStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new sample request type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSampleRequestTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of sample request contacts
	 * @see {@link SampleRequestContactSearchModel}
	 * @public
	 */
	export interface GetSampleRequestContactsDto extends SampleRequestContactSearchModel {
	}
	/**
	 * Use to get a list of sample request events
	 * @see {@link SampleRequestEventSearchModel}
	 * @public
	 */
	export interface GetSampleRequestEventsDto extends SampleRequestEventSearchModel {
	}
	/**
	 * Use to get a list of sample request event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSampleRequestEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of sample request files
	 * @see {@link SampleRequestFileSearchModel}
	 * @public
	 */
	export interface GetSampleRequestFilesDto extends SampleRequestFileSearchModel {
	}
	/**
	 * Use to get a list of sample request items
	 * @see {@link SalesItemBaseSearchModel}
	 * @public
	 */
	export interface GetSampleRequestItemsDto extends SalesItemBaseSearchModel {
	}
	/**
	 * Use to get a list of sample request item targets
	 * @see {@link SalesItemTargetBaseSearchModel}
	 * @public
	 */
	export interface GetSampleRequestItemTargetsDto extends SalesItemTargetBaseSearchModel {
	}
	/**
	 * Use to get a list of sample requests
	 * @see {@link SampleRequestSearchModel}
	 * @public
	 */
	export interface GetSampleRequestsDto extends SampleRequestSearchModel {
	}
	/**
	 * Use to get a list of sample request states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetSampleRequestStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of sample request statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSampleRequestStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of sample request types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSampleRequestTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing sample request.
	 * @see {@link SampleRequestModel}
	 * @public
	 */
	export interface UpdateSampleRequestDto extends SampleRequestModel {
	}
	/**
	 * Use to update an existing sample request contact.
	 * @see {@link SampleRequestContactModel}
	 * @public
	 */
	export interface UpdateSampleRequestContactDto extends SampleRequestContactModel {
	}
	/**
	 * Use to update an existing sample request event.
	 * @see {@link SampleRequestEventModel}
	 * @public
	 */
	export interface UpdateSampleRequestEventDto extends SampleRequestEventModel {
	}
	/**
	 * Use to update an existing sample request event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSampleRequestEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing sample request file.
	 * @see {@link SampleRequestFileModel}
	 * @public
	 */
	export interface UpdateSampleRequestFileDto extends SampleRequestFileModel {
	}
	/**
	 * Use to update an existing sample request item.
	 * @see {@link SalesItemBaseModel<AppliedSampleRequestItemDiscountModel>}
	 * @public
	 */
	export interface UpdateSampleRequestItemDto extends SalesItemBaseModel<AppliedSampleRequestItemDiscountModel> {
	}
	/**
	 * Use to update an existing sample request item target.
	 * @see {@link SalesItemTargetBaseModel}
	 * @public
	 */
	export interface UpdateSampleRequestItemTargetDto extends SalesItemTargetBaseModel {
	}
	/**
	 * Use to update an existing sample request state.
	 * @see {@link StateModel}
	 * @public
	 */
	export interface UpdateSampleRequestStateDto extends StateModel {
	}
	/**
	 * Use to update an existing sample request status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateSampleRequestStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing sample request type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSampleRequestTypeDto extends TypeModel {
	}

	export class Sampling extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all sample request calls.
		 * @param {@link cef.admin.api.ClearSampleRequestCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestCache
		 * @path <API Root>/Sampling/SampleRequest/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequest", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request contact calls.
		 * @param {@link cef.admin.api.ClearSampleRequestContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestContactCache
		 * @path <API Root>/Sampling/SampleRequestContact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestContact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request event calls.
		 * @param {@link cef.admin.api.ClearSampleRequestEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestEventCache
		 * @path <API Root>/Sampling/SampleRequestEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request event type calls.
		 * @param {@link cef.admin.api.ClearSampleRequestEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestEventTypeCache
		 * @path <API Root>/Sampling/SampleRequestEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request file calls.
		 * @param {@link cef.admin.api.ClearSampleRequestFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestFileCache
		 * @path <API Root>/Sampling/SampleRequestFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request item calls.
		 * @param {@link cef.admin.api.ClearSampleRequestItemCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestItemCache
		 * @path <API Root>/Sampling/SampleRequestItem/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestItemCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestItem", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request item target calls.
		 * @param {@link cef.admin.api.ClearSampleRequestItemTargetCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestItemTargetCache
		 * @path <API Root>/Sampling/SampleRequestItemTarget/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestItemTargetCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTarget", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request state calls.
		 * @param {@link cef.admin.api.ClearSampleRequestStateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestStateCache
		 * @path <API Root>/Sampling/SampleRequestState/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestStateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestState", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request status calls.
		 * @param {@link cef.admin.api.ClearSampleRequestStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestStatusCache
		 * @path <API Root>/Sampling/SampleRequestStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all sample request type calls.
		 * @param {@link cef.admin.api.ClearSampleRequestTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSampleRequestTypeCache
		 * @path <API Root>/Sampling/SampleRequestType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSampleRequestTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Sampling", "SampleRequestType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new sample request.
		 * @param {@link cef.admin.api.CreateSampleRequestDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequest
		 * @path <API Root>/Sampling/SampleRequest/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequest = (routeParams?: CreateSampleRequestDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequest", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request contact.
		 * @param {@link cef.admin.api.CreateSampleRequestContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestContact
		 * @path <API Root>/Sampling/SampleRequestContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestContact = (routeParams?: CreateSampleRequestContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request event.
		 * @param {@link cef.admin.api.CreateSampleRequestEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestEvent
		 * @path <API Root>/Sampling/SampleRequestEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestEvent = (routeParams?: CreateSampleRequestEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request event type.
		 * @param {@link cef.admin.api.CreateSampleRequestEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestEventType
		 * @path <API Root>/Sampling/SampleRequestEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestEventType = (routeParams?: CreateSampleRequestEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request file.
		 * @param {@link cef.admin.api.CreateSampleRequestFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestFile
		 * @path <API Root>/Sampling/SampleRequestFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestFile = (routeParams?: CreateSampleRequestFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request item.
		 * @param {@link cef.admin.api.CreateSampleRequestItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestItem
		 * @path <API Root>/Sampling/SampleRequestItem/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestItem = (routeParams?: CreateSampleRequestItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestItem", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request item target.
		 * @param {@link cef.admin.api.CreateSampleRequestItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestItemTarget
		 * @path <API Root>/Sampling/SampleRequestItemTarget/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestItemTarget = (routeParams?: CreateSampleRequestItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTarget", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request state.
		 * @param {@link cef.admin.api.CreateSampleRequestStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestState
		 * @path <API Root>/Sampling/SampleRequestState/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestState = (routeParams?: CreateSampleRequestStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestState", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request status.
		 * @param {@link cef.admin.api.CreateSampleRequestStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestStatus
		 * @path <API Root>/Sampling/SampleRequestStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestStatus = (routeParams?: CreateSampleRequestStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new sample request type.
		 * @param {@link cef.admin.api.CreateSampleRequestTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSampleRequestType
		 * @path <API Root>/Sampling/SampleRequestType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSampleRequestType = (routeParams?: CreateSampleRequestTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific sample request from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestByID
		 * @path <API Root>/Sampling/SampleRequest/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequest", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestContactByID
		 * @path <API Root>/Sampling/SampleRequestContact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestContact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestEventByID
		 * @path <API Root>/Sampling/SampleRequestEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestEventTypeByID
		 * @path <API Root>/Sampling/SampleRequestEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestFileByID
		 * @path <API Root>/Sampling/SampleRequestFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request item from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestItemByID
		 * @path <API Root>/Sampling/SampleRequestItem/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestItem", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request item target from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestItemTargetByID
		 * @path <API Root>/Sampling/SampleRequestItemTarget/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTarget", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request state from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestStateByID
		 * @path <API Root>/Sampling/SampleRequestState/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestState", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestStatusByID
		 * @path <API Root>/Sampling/SampleRequestStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific sample request type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSampleRequestTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSampleRequestTypeByID
		 * @path <API Root>/Sampling/SampleRequestType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSampleRequestTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific sample request from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestByID
		 * @path <API Root>/Sampling/SampleRequest/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequest", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestContactByID
		 * @path <API Root>/Sampling/SampleRequestContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestEventByID
		 * @path <API Root>/Sampling/SampleRequestEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestEventTypeByID
		 * @path <API Root>/Sampling/SampleRequestEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestFileByID
		 * @path <API Root>/Sampling/SampleRequestFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request item from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestItemByID
		 * @path <API Root>/Sampling/SampleRequestItem/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestItem", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request item target from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestItemTargetByID
		 * @path <API Root>/Sampling/SampleRequestItemTarget/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTarget", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request state from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestStateByID
		 * @path <API Root>/Sampling/SampleRequestState/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestState", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestStatusByID
		 * @path <API Root>/Sampling/SampleRequestStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific sample request type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSampleRequestTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSampleRequestTypeByID
		 * @path <API Root>/Sampling/SampleRequestType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSampleRequestTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific sample request
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestByID
		 * @path <API Root>/Sampling/SampleRequest/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestModel>}
		 * @public
		 */
		GetSampleRequestByID = (id: number) => this.$http<SampleRequestModel>({
			url: [this.rootUrl, "Sampling", "SampleRequest", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sample request contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestContactByID
		 * @path <API Root>/Sampling/SampleRequestContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestContactModel>}
		 * @public
		 */
		GetSampleRequestContactByID = (id: number) => this.$http<SampleRequestContactModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestContacts
		 * @path <API Root>/Sampling/SampleRequestContacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestContactPagedResults>}
		 * @public
		 */
		GetSampleRequestContacts = (routeParams?: GetSampleRequestContactsDto) => this.$http<SampleRequestContactPagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestContacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestEventByID
		 * @path <API Root>/Sampling/SampleRequestEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestEventModel>}
		 * @public
		 */
		GetSampleRequestEventByID = (id: number) => this.$http<SampleRequestEventModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestEvents
		 * @path <API Root>/Sampling/SampleRequestEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestEventPagedResults>}
		 * @public
		 */
		GetSampleRequestEvents = (routeParams?: GetSampleRequestEventsDto) => this.$http<SampleRequestEventPagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestEventTypeByID
		 * @path <API Root>/Sampling/SampleRequestEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSampleRequestEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestEventTypes
		 * @path <API Root>/Sampling/SampleRequestEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestEventTypePagedResults>}
		 * @public
		 */
		GetSampleRequestEventTypes = (routeParams?: GetSampleRequestEventTypesDto) => this.$http<SampleRequestEventTypePagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestFileByID
		 * @path <API Root>/Sampling/SampleRequestFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestFileModel>}
		 * @public
		 */
		GetSampleRequestFileByID = (id: number) => this.$http<SampleRequestFileModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestFiles
		 * @path <API Root>/Sampling/SampleRequestFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestFilePagedResults>}
		 * @public
		 */
		GetSampleRequestFiles = (routeParams?: GetSampleRequestFilesDto) => this.$http<SampleRequestFilePagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request item
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestItemByID
		 * @path <API Root>/Sampling/SampleRequestItem/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedSampleRequestItemDiscountModel>>}
		 * @public
		 */
		GetSampleRequestItemByID = (id: number) => this.$http<SalesItemBaseModel<AppliedSampleRequestItemDiscountModel>>({
			url: [this.rootUrl, "Sampling", "SampleRequestItem", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request items
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestItems
		 * @path <API Root>/Sampling/SampleRequestItems
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestItemPagedResults>}
		 * @public
		 */
		GetSampleRequestItems = (routeParams?: GetSampleRequestItemsDto) => this.$http<SampleRequestItemPagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestItems"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request item target
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestItemTargetByID
		 * @path <API Root>/Sampling/SampleRequestItemTarget/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesItemTargetBaseModel>}
		 * @public
		 */
		GetSampleRequestItemTargetByID = (id: number) => this.$http<SalesItemTargetBaseModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTarget", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request item targets
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestItemTargets
		 * @path <API Root>/Sampling/SampleRequestItemTargets
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestItemTargetPagedResults>}
		 * @public
		 */
		GetSampleRequestItemTargets = (routeParams?: GetSampleRequestItemTargetsDto) => this.$http<SampleRequestItemTargetPagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTargets"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of sample requests
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequests
		 * @path <API Root>/Sampling/SampleRequests
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestPagedResults>}
		 * @public
		 */
		GetSampleRequests = (routeParams?: GetSampleRequestsDto) => this.$http<SampleRequestPagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequests"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestStateByID
		 * @path <API Root>/Sampling/SampleRequestState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetSampleRequestStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestStates
		 * @path <API Root>/Sampling/SampleRequestStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestStatePagedResults>}
		 * @public
		 */
		GetSampleRequestStates = (routeParams?: GetSampleRequestStatesDto) => this.$http<SampleRequestStatePagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestStatusByID
		 * @path <API Root>/Sampling/SampleRequestStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSampleRequestStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestStatuses
		 * @path <API Root>/Sampling/SampleRequestStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestStatusPagedResults>}
		 * @public
		 */
		GetSampleRequestStatuses = (routeParams?: GetSampleRequestStatusesDto) => this.$http<SampleRequestStatusPagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sample request type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestTypeByID
		 * @path <API Root>/Sampling/SampleRequestType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSampleRequestTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Sampling", "SampleRequestType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sample request types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSampleRequestTypes
		 * @path <API Root>/Sampling/SampleRequestTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SampleRequestTypePagedResults>}
		 * @public
		 */
		GetSampleRequestTypes = (routeParams?: GetSampleRequestTypesDto) => this.$http<SampleRequestTypePagedResults>({
			url: [this.rootUrl, "Sampling", "SampleRequestTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific sample request from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestByID
		 * @path <API Root>/Sampling/SampleRequest/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequest", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestContactByID
		 * @path <API Root>/Sampling/SampleRequestContact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestContact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestEventByID
		 * @path <API Root>/Sampling/SampleRequestEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestEventTypeByID
		 * @path <API Root>/Sampling/SampleRequestEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestFileByID
		 * @path <API Root>/Sampling/SampleRequestFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request item from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestItemByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestItemByID
		 * @path <API Root>/Sampling/SampleRequestItem/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestItemByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestItem", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request item target from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestItemTargetByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestItemTargetByID
		 * @path <API Root>/Sampling/SampleRequestItemTarget/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestItemTargetByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTarget", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request state from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestStateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestStateByID
		 * @path <API Root>/Sampling/SampleRequestState/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestStateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestState", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestStatusByID
		 * @path <API Root>/Sampling/SampleRequestStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific sample request type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSampleRequestTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSampleRequestTypeByID
		 * @path <API Root>/Sampling/SampleRequestType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSampleRequestTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Sampling", "SampleRequestType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing sample request.
		 * @param {@link cef.admin.api.UpdateSampleRequestDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequest
		 * @path <API Root>/Sampling/SampleRequest/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequest = (routeParams?: UpdateSampleRequestDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequest", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request contact.
		 * @param {@link cef.admin.api.UpdateSampleRequestContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestContact
		 * @path <API Root>/Sampling/SampleRequestContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestContact = (routeParams?: UpdateSampleRequestContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request event.
		 * @param {@link cef.admin.api.UpdateSampleRequestEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestEvent
		 * @path <API Root>/Sampling/SampleRequestEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestEvent = (routeParams?: UpdateSampleRequestEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request event type.
		 * @param {@link cef.admin.api.UpdateSampleRequestEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestEventType
		 * @path <API Root>/Sampling/SampleRequestEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestEventType = (routeParams?: UpdateSampleRequestEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request file.
		 * @param {@link cef.admin.api.UpdateSampleRequestFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestFile
		 * @path <API Root>/Sampling/SampleRequestFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestFile = (routeParams?: UpdateSampleRequestFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request item.
		 * @param {@link cef.admin.api.UpdateSampleRequestItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestItem
		 * @path <API Root>/Sampling/SampleRequestItem/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestItem = (routeParams?: UpdateSampleRequestItemDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestItem", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request item target.
		 * @param {@link cef.admin.api.UpdateSampleRequestItemTargetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestItemTarget
		 * @path <API Root>/Sampling/SampleRequestItemTarget/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestItemTarget = (routeParams?: UpdateSampleRequestItemTargetDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestItemTarget", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request state.
		 * @param {@link cef.admin.api.UpdateSampleRequestStateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestState
		 * @path <API Root>/Sampling/SampleRequestState/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestState = (routeParams?: UpdateSampleRequestStateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestState", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request status.
		 * @param {@link cef.admin.api.UpdateSampleRequestStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestStatus
		 * @path <API Root>/Sampling/SampleRequestStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestStatus = (routeParams?: UpdateSampleRequestStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing sample request type.
		 * @param {@link cef.admin.api.UpdateSampleRequestTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSampleRequestType
		 * @path <API Root>/Sampling/SampleRequestType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSampleRequestType = (routeParams?: UpdateSampleRequestTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Sampling", "SampleRequestType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
