/**
 * @file framework/admin/_api/cvApi.Structure.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckRecordVersionExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to create a new event log.
	 * @see {@link EventLogModel}
	 * @public
	 */
	export interface CreateEventLogDto extends EventLogModel {
	}
	/**
	 * Use to create a new import export mapping.
	 * @see {@link ImportExportMappingModel}
	 * @public
	 */
	export interface CreateImportExportMappingDto extends ImportExportMappingModel {
	}
	/**
	 * Use to create a new note.
	 * @see {@link NoteModel}
	 * @public
	 */
	export interface CreateNoteDto extends NoteModel {
	}
	/**
	 * Use to create a new note type.
	 * @see {@link NoteTypeModel}
	 * @public
	 */
	export interface CreateNoteTypeDto extends NoteTypeModel {
	}
	/**
	 * Use to create a new record version.
	 * @see {@link RecordVersionModel}
	 * @public
	 */
	export interface CreateRecordVersionDto extends RecordVersionModel {
	}
	/**
	 * Use to create a new record version type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateRecordVersionTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new setting.
	 * @see {@link SettingModel}
	 * @public
	 */
	export interface CreateSettingDto extends SettingModel {
	}
	/**
	 * Use to create a new setting group.
	 * @see {@link SettingGroupModel}
	 * @public
	 */
	export interface CreateSettingGroupDto extends SettingGroupModel {
	}
	/**
	 * Use to create a new setting type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateSettingTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of event logs
	 * @see {@link EventLogSearchModel}
	 * @public
	 */
	export interface GetEventLogsDto extends EventLogSearchModel {
	}
	/**
	 * Use to get a list of import export mappings
	 * @see {@link ImportExportMappingSearchModel}
	 * @public
	 */
	export interface GetImportExportMappingsDto extends ImportExportMappingSearchModel {
	}
	/**
	 * Use to get a list of notes
	 * @see {@link NoteSearchModel}
	 * @public
	 */
	export interface GetNotesDto extends NoteSearchModel {
	}
	/**
	 * Use to get a list of note types
	 * @see {@link NoteTypeSearchModel}
	 * @public
	 */
	export interface GetNoteTypesDto extends NoteTypeSearchModel {
	}
	/**
	 * Use to get a list of record versions
	 * @see {@link RecordVersionSearchModel}
	 * @public
	 */
	export interface GetRecordVersionsDto extends RecordVersionSearchModel {
	}
	/**
	 * Use to get a list of record version types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetRecordVersionTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of setting groups
	 * @see {@link SettingGroupSearchModel}
	 * @public
	 */
	export interface GetSettingGroupsDto extends SettingGroupSearchModel {
	}
	/**
	 * Use to get a list of settings
	 * @see {@link SettingSearchModel}
	 * @public
	 */
	export interface GetSettingsDto extends SettingSearchModel {
	}
	/**
	 * Use to get a list of setting types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSettingTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing event log.
	 * @see {@link EventLogModel}
	 * @public
	 */
	export interface UpdateEventLogDto extends EventLogModel {
	}
	/**
	 * Use to update an existing import export mapping.
	 * @see {@link ImportExportMappingModel}
	 * @public
	 */
	export interface UpdateImportExportMappingDto extends ImportExportMappingModel {
	}
	/**
	 * Use to update an existing note.
	 * @see {@link NoteModel}
	 * @public
	 */
	export interface UpdateNoteDto extends NoteModel {
	}
	/**
	 * Use to update an existing note type.
	 * @see {@link NoteTypeModel}
	 * @public
	 */
	export interface UpdateNoteTypeDto extends NoteTypeModel {
	}
	/**
	 * Use to update an existing record version.
	 * @see {@link RecordVersionModel}
	 * @public
	 */
	export interface UpdateRecordVersionDto extends RecordVersionModel {
	}
	/**
	 * Use to update an existing record version type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateRecordVersionTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing setting.
	 * @see {@link SettingModel}
	 * @public
	 */
	export interface UpdateSettingDto extends SettingModel {
	}
	/**
	 * Use to update an existing setting group.
	 * @see {@link SettingGroupModel}
	 * @public
	 */
	export interface UpdateSettingGroupDto extends SettingGroupModel {
	}
	/**
	 * Use to update an existing setting type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateSettingTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new or update an existing record version (as needed).
	 * @see {@link RecordVersionModel}
	 * @public
	 */
	export interface UpsertRecordVersionDto extends RecordVersionModel {
	}

	export class Structure extends ServiceStackRoute {
		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRecordVersionExistsByName
		 * @path <API Root>/Structure/RecordVersion/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckRecordVersionExistsByName = (routeParams?: CheckRecordVersionExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Structure", "RecordVersion", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all event log calls.
		 * @param {@link cef.admin.api.ClearEventLogCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEventLogCache
		 * @path <API Root>/Structure/EventLog/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEventLogCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "EventLog", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all import export mapping calls.
		 * @param {@link cef.admin.api.ClearImportExportMappingCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearImportExportMappingCache
		 * @path <API Root>/Structure/ImportExportMapping/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearImportExportMappingCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "ImportExportMapping", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all note calls.
		 * @param {@link cef.admin.api.ClearNoteCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearNoteCache
		 * @path <API Root>/Structure/Note/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearNoteCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "Note", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all note type calls.
		 * @param {@link cef.admin.api.ClearNoteTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearNoteTypeCache
		 * @path <API Root>/Structure/NoteType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearNoteTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "NoteType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all record version calls.
		 * @param {@link cef.admin.api.ClearRecordVersionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRecordVersionCache
		 * @path <API Root>/Structure/RecordVersion/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRecordVersionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "RecordVersion", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all record version type calls.
		 * @param {@link cef.admin.api.ClearRecordVersionTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearRecordVersionTypeCache
		 * @path <API Root>/Structure/RecordVersionType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearRecordVersionTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "RecordVersionType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all setting calls.
		 * @param {@link cef.admin.api.ClearSettingCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSettingCache
		 * @path <API Root>/Structure/Setting/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSettingCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "Setting", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all setting group calls.
		 * @param {@link cef.admin.api.ClearSettingGroupCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSettingGroupCache
		 * @path <API Root>/Structure/SettingGroup/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSettingGroupCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "SettingGroup", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all setting type calls.
		 * @param {@link cef.admin.api.ClearSettingTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearSettingTypeCache
		 * @path <API Root>/Structure/SettingType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearSettingTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Structure", "SettingType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new event log.
		 * @param {@link cef.admin.api.CreateEventLogDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEventLog
		 * @path <API Root>/Structure/EventLog/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEventLog = (routeParams?: CreateEventLogDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "EventLog", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new import export mapping.
		 * @param {@link cef.admin.api.CreateImportExportMappingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateImportExportMapping
		 * @path <API Root>/Structure/ImportExportMapping/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateImportExportMapping = (routeParams?: CreateImportExportMappingDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "ImportExportMapping", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new note.
		 * @param {@link cef.admin.api.CreateNoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateNote
		 * @path <API Root>/Structure/Note/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateNote = (routeParams?: CreateNoteDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "Note", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new note type.
		 * @param {@link cef.admin.api.CreateNoteTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateNoteType
		 * @path <API Root>/Structure/NoteType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateNoteType = (routeParams?: CreateNoteTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "NoteType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new record version.
		 * @param {@link cef.admin.api.CreateRecordVersionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRecordVersion
		 * @path <API Root>/Structure/RecordVersion/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRecordVersion = (routeParams?: CreateRecordVersionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "RecordVersion", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new record version type.
		 * @param {@link cef.admin.api.CreateRecordVersionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateRecordVersionType
		 * @path <API Root>/Structure/RecordVersionType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateRecordVersionType = (routeParams?: CreateRecordVersionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "RecordVersionType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new setting.
		 * @param {@link cef.admin.api.CreateSettingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSetting
		 * @path <API Root>/Structure/Setting/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSetting = (routeParams?: CreateSettingDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "Setting", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new setting group.
		 * @param {@link cef.admin.api.CreateSettingGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSettingGroup
		 * @path <API Root>/Structure/SettingGroup/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSettingGroup = (routeParams?: CreateSettingGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "SettingGroup", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new setting type.
		 * @param {@link cef.admin.api.CreateSettingTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSettingType
		 * @path <API Root>/Structure/SettingType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSettingType = (routeParams?: CreateSettingTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "SettingType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific event log from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEventLogByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEventLogByID
		 * @path <API Root>/Structure/EventLog/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEventLogByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "EventLog", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific import export mapping from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateImportExportMappingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateImportExportMappingByID
		 * @path <API Root>/Structure/ImportExportMapping/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateImportExportMappingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "ImportExportMapping", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific note from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateNoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateNoteByID
		 * @path <API Root>/Structure/Note/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateNoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "Note", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific note type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateNoteTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateNoteTypeByID
		 * @path <API Root>/Structure/NoteType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateNoteTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "NoteType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific record version from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRecordVersionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRecordVersionByID
		 * @path <API Root>/Structure/RecordVersion/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRecordVersionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "RecordVersion", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific record version type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateRecordVersionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateRecordVersionTypeByID
		 * @path <API Root>/Structure/RecordVersionType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateRecordVersionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "RecordVersionType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific setting from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSettingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSettingByID
		 * @path <API Root>/Structure/Setting/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSettingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "Setting", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific setting group from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSettingGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSettingGroupByID
		 * @path <API Root>/Structure/SettingGroup/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSettingGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "SettingGroup", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific setting type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateSettingTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateSettingTypeByID
		 * @path <API Root>/Structure/SettingType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateSettingTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "SettingType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific event log from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEventLogByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEventLogByID
		 * @path <API Root>/Structure/EventLog/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEventLogByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "EventLog", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific import export mapping from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteImportExportMappingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteImportExportMappingByID
		 * @path <API Root>/Structure/ImportExportMapping/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteImportExportMappingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "ImportExportMapping", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific note from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteNoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteNoteByID
		 * @path <API Root>/Structure/Note/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteNoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "Note", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific note type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteNoteTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteNoteTypeByID
		 * @path <API Root>/Structure/NoteType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteNoteTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "NoteType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific record version from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRecordVersionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRecordVersionByID
		 * @path <API Root>/Structure/RecordVersion/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRecordVersionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "RecordVersion", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific record version type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteRecordVersionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteRecordVersionTypeByID
		 * @path <API Root>/Structure/RecordVersionType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteRecordVersionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "RecordVersionType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific setting from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSettingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSettingByID
		 * @path <API Root>/Structure/Setting/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSettingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "Setting", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific setting group from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSettingGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSettingGroupByID
		 * @path <API Root>/Structure/SettingGroup/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSettingGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "SettingGroup", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific setting type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteSettingTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteSettingTypeByID
		 * @path <API Root>/Structure/SettingType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteSettingTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "SettingType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific event log
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEventLogByID
		 * @path <API Root>/Structure/EventLog/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EventLogModel>}
		 * @public
		 */
		GetEventLogByID = (id: number) => this.$http<EventLogModel>({
			url: [this.rootUrl, "Structure", "EventLog", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of event logs
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEventLogs
		 * @path <API Root>/Structure/EventLogs
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EventLogPagedResults>}
		 * @public
		 */
		GetEventLogs = (routeParams?: GetEventLogsDto) => this.$http<EventLogPagedResults>({
			url: [this.rootUrl, "Structure", "EventLogs"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific import export mapping
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetImportExportMappingByID
		 * @path <API Root>/Structure/ImportExportMapping/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ImportExportMappingModel>}
		 * @public
		 */
		GetImportExportMappingByID = (id: number) => this.$http<ImportExportMappingModel>({
			url: [this.rootUrl, "Structure", "ImportExportMapping", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of import export mappings
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetImportExportMappings
		 * @path <API Root>/Structure/ImportExportMappings
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ImportExportMappingPagedResults>}
		 * @public
		 */
		GetImportExportMappings = (routeParams?: GetImportExportMappingsDto) => this.$http<ImportExportMappingPagedResults>({
			url: [this.rootUrl, "Structure", "ImportExportMappings"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific note
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetNoteByID
		 * @path <API Root>/Structure/Note/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<NoteModel>}
		 * @public
		 */
		GetNoteByID = (id: number) => this.$http<NoteModel>({
			url: [this.rootUrl, "Structure", "Note", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of notes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetNotes
		 * @path <API Root>/Structure/Notes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<NotePagedResults>}
		 * @public
		 */
		GetNotes = (routeParams?: GetNotesDto) => this.$http<NotePagedResults>({
			url: [this.rootUrl, "Structure", "Notes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific note type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetNoteTypeByID
		 * @path <API Root>/Structure/NoteType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<NoteTypeModel>}
		 * @public
		 */
		GetNoteTypeByID = (id: number) => this.$http<NoteTypeModel>({
			url: [this.rootUrl, "Structure", "NoteType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of note types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetNoteTypes
		 * @path <API Root>/Structure/NoteTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<NoteTypePagedResults>}
		 * @public
		 */
		GetNoteTypes = (routeParams?: GetNoteTypesDto) => this.$http<NoteTypePagedResults>({
			url: [this.rootUrl, "Structure", "NoteTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific record version
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRecordVersionByID
		 * @path <API Root>/Structure/RecordVersion/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RecordVersionModel>}
		 * @public
		 */
		GetRecordVersionByID = (id: number) => this.$http<RecordVersionModel>({
			url: [this.rootUrl, "Structure", "RecordVersion", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of record versions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRecordVersions
		 * @path <API Root>/Structure/RecordVersions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RecordVersionPagedResults>}
		 * @public
		 */
		GetRecordVersions = (routeParams?: GetRecordVersionsDto) => this.$http<RecordVersionPagedResults>({
			url: [this.rootUrl, "Structure", "RecordVersions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific record version type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRecordVersionTypeByID
		 * @path <API Root>/Structure/RecordVersionType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetRecordVersionTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Structure", "RecordVersionType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of record version types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRecordVersionTypes
		 * @path <API Root>/Structure/RecordVersionTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RecordVersionTypePagedResults>}
		 * @public
		 */
		GetRecordVersionTypes = (routeParams?: GetRecordVersionTypesDto) => this.$http<RecordVersionTypePagedResults>({
			url: [this.rootUrl, "Structure", "RecordVersionTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific setting
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettingByID
		 * @path <API Root>/Structure/Setting/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SettingModel>}
		 * @public
		 */
		GetSettingByID = (id: number) => this.$http<SettingModel>({
			url: [this.rootUrl, "Structure", "Setting", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific setting
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettingByName
		 * @path <API Root>/Structure/Setting/ByName/{Name}
		 * @verb GET
		 * @returns {ng.IHttpPromise<SettingModel>}
		 * @public
		 */
		GetSettingByName = (name: string) => this.$http<SettingModel>({
			url: [this.rootUrl, "Structure", "Setting", "ByName", encodeURIComponent(name)].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific setting group
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettingGroupByID
		 * @path <API Root>/Structure/SettingGroup/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SettingGroupModel>}
		 * @public
		 */
		GetSettingGroupByID = (id: number) => this.$http<SettingGroupModel>({
			url: [this.rootUrl, "Structure", "SettingGroup", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of setting groups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettingGroups
		 * @path <API Root>/Structure/SettingGroups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SettingGroupPagedResults>}
		 * @public
		 */
		GetSettingGroups = (routeParams?: GetSettingGroupsDto) => this.$http<SettingGroupPagedResults>({
			url: [this.rootUrl, "Structure", "SettingGroups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of settings
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettings
		 * @path <API Root>/Structure/Settings
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SettingPagedResults>}
		 * @public
		 */
		GetSettings = (routeParams?: GetSettingsDto) => this.$http<SettingPagedResults>({
			url: [this.rootUrl, "Structure", "Settings"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific setting
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettingsByGroupName
		 * @path <API Root>/Structure/Setting/ByGroupName/{Name}
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<SettingModel>>}
		 * @public
		 */
		GetSettingsByGroupName = (name: string) => this.$http<Array<SettingModel>>({
			url: [this.rootUrl, "Structure", "Setting", "ByGroupName", encodeURIComponent(name)].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific setting type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettingTypeByID
		 * @path <API Root>/Structure/SettingType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSettingTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Structure", "SettingType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of setting types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSettingTypes
		 * @path <API Root>/Structure/SettingTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SettingTypePagedResults>}
		 * @public
		 */
		GetSettingTypes = (routeParams?: GetSettingTypesDto) => this.$http<SettingTypePagedResults>({
			url: [this.rootUrl, "Structure", "SettingTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific event log from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEventLogByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEventLogByID
		 * @path <API Root>/Structure/EventLog/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEventLogByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "EventLog", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific import export mapping from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateImportExportMappingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateImportExportMappingByID
		 * @path <API Root>/Structure/ImportExportMapping/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateImportExportMappingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "ImportExportMapping", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific note from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateNoteByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateNoteByID
		 * @path <API Root>/Structure/Note/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateNoteByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "Note", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific note type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateNoteTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateNoteTypeByID
		 * @path <API Root>/Structure/NoteType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateNoteTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "NoteType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific record version from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRecordVersionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRecordVersionByID
		 * @path <API Root>/Structure/RecordVersion/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRecordVersionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "RecordVersion", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific record version type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateRecordVersionTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateRecordVersionTypeByID
		 * @path <API Root>/Structure/RecordVersionType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateRecordVersionTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "RecordVersionType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific setting from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSettingByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSettingByID
		 * @path <API Root>/Structure/Setting/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSettingByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "Setting", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific setting group from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSettingGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSettingGroupByID
		 * @path <API Root>/Structure/SettingGroup/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSettingGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "SettingGroup", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific setting type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateSettingTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateSettingTypeByID
		 * @path <API Root>/Structure/SettingType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateSettingTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Structure", "SettingType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing event log.
		 * @param {@link cef.admin.api.UpdateEventLogDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEventLog
		 * @path <API Root>/Structure/EventLog/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEventLog = (routeParams?: UpdateEventLogDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "EventLog", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing import export mapping.
		 * @param {@link cef.admin.api.UpdateImportExportMappingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateImportExportMapping
		 * @path <API Root>/Structure/ImportExportMapping/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateImportExportMapping = (routeParams?: UpdateImportExportMappingDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "ImportExportMapping", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing note.
		 * @param {@link cef.admin.api.UpdateNoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateNote
		 * @path <API Root>/Structure/Note/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateNote = (routeParams?: UpdateNoteDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "Note", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing note type.
		 * @param {@link cef.admin.api.UpdateNoteTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateNoteType
		 * @path <API Root>/Structure/NoteType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateNoteType = (routeParams?: UpdateNoteTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "NoteType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing record version.
		 * @param {@link cef.admin.api.UpdateRecordVersionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRecordVersion
		 * @path <API Root>/Structure/RecordVersion/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRecordVersion = (routeParams?: UpdateRecordVersionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "RecordVersion", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing record version type.
		 * @param {@link cef.admin.api.UpdateRecordVersionTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateRecordVersionType
		 * @path <API Root>/Structure/RecordVersionType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateRecordVersionType = (routeParams?: UpdateRecordVersionTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "RecordVersionType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing setting.
		 * @param {@link cef.admin.api.UpdateSettingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSetting
		 * @path <API Root>/Structure/Setting/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSetting = (routeParams?: UpdateSettingDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "Setting", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing setting group.
		 * @param {@link cef.admin.api.UpdateSettingGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSettingGroup
		 * @path <API Root>/Structure/SettingGroup/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSettingGroup = (routeParams?: UpdateSettingGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "SettingGroup", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing setting type.
		 * @param {@link cef.admin.api.UpdateSettingTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateSettingType
		 * @path <API Root>/Structure/SettingType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSettingType = (routeParams?: UpdateSettingTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "SettingType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to create a new or update an existing record version (as needed).
		 * @param {@link cef.admin.api.UpsertRecordVersionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertRecordVersion
		 * @path <API Root>/Structure/RecordVersion/Upsert
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpsertRecordVersion = (routeParams?: UpsertRecordVersionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Structure", "RecordVersion", "Upsert"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
