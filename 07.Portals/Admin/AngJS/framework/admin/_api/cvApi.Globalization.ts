/**
 * @file framework/admin/_api/cvApi.Globalization.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new language.
	 * @see {@link LanguageModel}
	 * @public
	 */
	export interface CreateLanguageDto extends LanguageModel {
	}
	/**
	 * Use to create a new language image.
	 * @see {@link LanguageImageModel}
	 * @public
	 */
	export interface CreateLanguageImageDto extends LanguageImageModel {
	}
	/**
	 * Use to create a new language image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateLanguageImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new ui key.
	 * @see {@link UiKeyModel}
	 * @public
	 */
	export interface CreateUiKeyDto extends UiKeyModel {
	}
	/**
	 * Use to create a new ui translation.
	 * @see {@link UiTranslationModel}
	 * @public
	 */
	export interface CreateUiTranslationDto extends UiTranslationModel {
	}
	/**
	 * Use to get a list of language images
	 * @see {@link LanguageImageSearchModel}
	 * @public
	 */
	export interface GetLanguageImagesDto extends LanguageImageSearchModel {
	}
	/**
	 * Use to get a list of language image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetLanguageImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of languages
	 * @see {@link LanguageSearchModel}
	 * @public
	 */
	export interface GetLanguagesDto extends LanguageSearchModel {
	}
	/**
	 * Use to get a list of ui keys
	 * @see {@link UiKeySearchModel}
	 * @public
	 */
	export interface GetUiKeysDto extends UiKeySearchModel {
	}
	/**
	 * Use to get a list of ui translations
	 * @see {@link UiTranslationSearchModel}
	 * @public
	 */
	export interface GetUiTranslationsDto extends UiTranslationSearchModel {
	}
	/**
	 * Use to update an existing language.
	 * @see {@link LanguageModel}
	 * @public
	 */
	export interface UpdateLanguageDto extends LanguageModel {
	}
	/**
	 * Use to update an existing language image.
	 * @see {@link LanguageImageModel}
	 * @public
	 */
	export interface UpdateLanguageImageDto extends LanguageImageModel {
	}
	/**
	 * Use to update an existing language image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateLanguageImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing ui key.
	 * @see {@link UiKeyModel}
	 * @public
	 */
	export interface UpdateUiKeyDto extends UiKeyModel {
	}
	/**
	 * Use to update an existing ui translation.
	 * @see {@link UiTranslationModel}
	 * @public
	 */
	export interface UpdateUiTranslationDto extends UiTranslationModel {
	}

	export class Globalization extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all language calls.
		 * @param {@link cef.admin.api.ClearLanguageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLanguageCache
		 * @path <API Root>/Globalization/Language/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLanguageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Globalization", "Language", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all language image calls.
		 * @param {@link cef.admin.api.ClearLanguageImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLanguageImageCache
		 * @path <API Root>/Globalization/LanguageImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLanguageImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Globalization", "LanguageImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all language image type calls.
		 * @param {@link cef.admin.api.ClearLanguageImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearLanguageImageTypeCache
		 * @path <API Root>/Globalization/LanguageImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearLanguageImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Globalization", "LanguageImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ui key calls.
		 * @param {@link cef.admin.api.ClearUiKeyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUiKeyCache
		 * @path <API Root>/Globalization/UiKey/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUiKeyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Globalization", "UiKey", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all ui translation calls.
		 * @param {@link cef.admin.api.ClearUiTranslationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUiTranslationCache
		 * @path <API Root>/Globalization/UiTranslation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUiTranslationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Globalization", "UiTranslation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new language.
		 * @param {@link cef.admin.api.CreateLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLanguage
		 * @path <API Root>/Globalization/Language/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLanguage = (routeParams?: CreateLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "Language", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new language image.
		 * @param {@link cef.admin.api.CreateLanguageImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLanguageImage
		 * @path <API Root>/Globalization/LanguageImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLanguageImage = (routeParams?: CreateLanguageImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "LanguageImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new language image type.
		 * @param {@link cef.admin.api.CreateLanguageImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLanguageImageType
		 * @path <API Root>/Globalization/LanguageImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateLanguageImageType = (routeParams?: CreateLanguageImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "LanguageImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ui key.
		 * @param {@link cef.admin.api.CreateUiKeyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUiKey
		 * @path <API Root>/Globalization/UiKey/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUiKey = (routeParams?: CreateUiKeyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "UiKey", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new ui translation.
		 * @param {@link cef.admin.api.CreateUiTranslationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUiTranslation
		 * @path <API Root>/Globalization/UiTranslation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUiTranslation = (routeParams?: CreateUiTranslationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "UiTranslation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific language from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLanguageByID
		 * @path <API Root>/Globalization/Language/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "Language", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific language image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLanguageImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLanguageImageByID
		 * @path <API Root>/Globalization/LanguageImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLanguageImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "LanguageImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific language image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateLanguageImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateLanguageImageTypeByID
		 * @path <API Root>/Globalization/LanguageImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateLanguageImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "LanguageImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ui key from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUiKeyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUiKeyByID
		 * @path <API Root>/Globalization/UiKey/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUiKeyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "UiKey", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific ui translation from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUiTranslationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUiTranslationByID
		 * @path <API Root>/Globalization/UiTranslation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUiTranslationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "UiTranslation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific language from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLanguageByID
		 * @path <API Root>/Globalization/Language/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "Language", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific language image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLanguageImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLanguageImageByID
		 * @path <API Root>/Globalization/LanguageImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLanguageImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "LanguageImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific language image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteLanguageImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteLanguageImageTypeByID
		 * @path <API Root>/Globalization/LanguageImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteLanguageImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "LanguageImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ui key from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUiKeyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUiKeyByID
		 * @path <API Root>/Globalization/UiKey/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUiKeyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "UiKey", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific ui translation from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUiTranslationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUiTranslationByID
		 * @path <API Root>/Globalization/UiTranslation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUiTranslationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "UiTranslation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific language
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLanguageByID
		 * @path <API Root>/Globalization/Language/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LanguageModel>}
		 * @public
		 */
		GetLanguageByID = (id: number) => this.$http<LanguageModel>({
			url: [this.rootUrl, "Globalization", "Language", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific language by the custom key
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLanguageByKey
		 * @path <API Root>/Globalization/Language/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LanguageModel>}
		 * @public
		 */
		GetLanguageByKey = (key: string) => this.$http<LanguageModel>({
			url: [this.rootUrl, "Globalization", "Language", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific language image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLanguageImageByID
		 * @path <API Root>/Globalization/LanguageImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LanguageImageModel>}
		 * @public
		 */
		GetLanguageImageByID = (id: number) => this.$http<LanguageImageModel>({
			url: [this.rootUrl, "Globalization", "LanguageImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of language images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLanguageImages
		 * @path <API Root>/Globalization/LanguageImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LanguageImagePagedResults>}
		 * @public
		 */
		GetLanguageImages = (routeParams?: GetLanguageImagesDto) => this.$http<LanguageImagePagedResults>({
			url: [this.rootUrl, "Globalization", "LanguageImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific language image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLanguageImageTypeByID
		 * @path <API Root>/Globalization/LanguageImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetLanguageImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Globalization", "LanguageImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of language image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLanguageImageTypes
		 * @path <API Root>/Globalization/LanguageImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LanguageImageTypePagedResults>}
		 * @public
		 */
		GetLanguageImageTypes = (routeParams?: GetLanguageImageTypesDto) => this.$http<LanguageImageTypePagedResults>({
			url: [this.rootUrl, "Globalization", "LanguageImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of languages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLanguages
		 * @path <API Root>/Globalization/Languages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LanguagePagedResults>}
		 * @public
		 */
		GetLanguages = (routeParams?: GetLanguagesDto) => this.$http<LanguagePagedResults>({
			url: [this.rootUrl, "Globalization", "Languages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ui key
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUiKeyByID
		 * @path <API Root>/Globalization/UiKey/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UiKeyModel>}
		 * @public
		 */
		GetUiKeyByID = (id: number) => this.$http<UiKeyModel>({
			url: [this.rootUrl, "Globalization", "UiKey", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ui keys
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUiKeys
		 * @path <API Root>/Globalization/UiKeys
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UiKeyPagedResults>}
		 * @public
		 */
		GetUiKeys = (routeParams?: GetUiKeysDto) => this.$http<UiKeyPagedResults>({
			url: [this.rootUrl, "Globalization", "UiKeys"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific ui translation
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUiTranslationByID
		 * @path <API Root>/Globalization/UiTranslation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UiTranslationModel>}
		 * @public
		 */
		GetUiTranslationByID = (id: number) => this.$http<UiTranslationModel>({
			url: [this.rootUrl, "Globalization", "UiTranslation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of ui translations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUiTranslations
		 * @path <API Root>/Globalization/UiTranslations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UiTranslationPagedResults>}
		 * @public
		 */
		GetUiTranslations = (routeParams?: GetUiTranslationsDto) => this.$http<UiTranslationPagedResults>({
			url: [this.rootUrl, "Globalization", "UiTranslations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific language from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLanguageByID
		 * @path <API Root>/Globalization/Language/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "Language", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific language image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLanguageImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLanguageImageByID
		 * @path <API Root>/Globalization/LanguageImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLanguageImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "LanguageImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific language image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateLanguageImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateLanguageImageTypeByID
		 * @path <API Root>/Globalization/LanguageImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateLanguageImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "LanguageImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ui key from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUiKeyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUiKeyByID
		 * @path <API Root>/Globalization/UiKey/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUiKeyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "UiKey", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific ui translation from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUiTranslationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUiTranslationByID
		 * @path <API Root>/Globalization/UiTranslation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUiTranslationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Globalization", "UiTranslation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing language.
		 * @param {@link cef.admin.api.UpdateLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLanguage
		 * @path <API Root>/Globalization/Language/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLanguage = (routeParams?: UpdateLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "Language", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing language image.
		 * @param {@link cef.admin.api.UpdateLanguageImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLanguageImage
		 * @path <API Root>/Globalization/LanguageImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLanguageImage = (routeParams?: UpdateLanguageImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "LanguageImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing language image type.
		 * @param {@link cef.admin.api.UpdateLanguageImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateLanguageImageType
		 * @path <API Root>/Globalization/LanguageImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateLanguageImageType = (routeParams?: UpdateLanguageImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "LanguageImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ui key.
		 * @param {@link cef.admin.api.UpdateUiKeyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUiKey
		 * @path <API Root>/Globalization/UiKey/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUiKey = (routeParams?: UpdateUiKeyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "UiKey", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing ui translation.
		 * @param {@link cef.admin.api.UpdateUiTranslationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUiTranslation
		 * @path <API Root>/Globalization/UiTranslation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUiTranslation = (routeParams?: UpdateUiTranslationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Globalization", "UiTranslation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
