/**
 * @file framework/admin/_api/cvApi.CalendarEvents.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new calendar event.
	 * @see {@link CalendarEventModel}
	 * @public
	 */
	export interface CreateCalendarEventDto extends CalendarEventModel {
	}
	/**
	 * Use to create a new calendar event detail.
	 * @see {@link CalendarEventDetailModel}
	 * @public
	 */
	export interface CreateCalendarEventDetailDto extends CalendarEventDetailModel {
	}
	/**
	 * Use to create a new calendar event file.
	 * @see {@link CalendarEventFileModel}
	 * @public
	 */
	export interface CreateCalendarEventFileDto extends CalendarEventFileModel {
	}
	/**
	 * Use to create a new calendar event image.
	 * @see {@link CalendarEventImageModel}
	 * @public
	 */
	export interface CreateCalendarEventImageDto extends CalendarEventImageModel {
	}
	/**
	 * Use to create a new calendar event image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCalendarEventImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new calendar event product.
	 * @see {@link CalendarEventProductModel}
	 * @public
	 */
	export interface CreateCalendarEventProductDto extends CalendarEventProductModel {
	}
	/**
	 * Use to create a new calendar event status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateCalendarEventStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new calendar event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateCalendarEventTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new user event attendance.
	 * @see {@link UserEventAttendanceModel}
	 * @public
	 */
	export interface CreateUserEventAttendanceDto extends UserEventAttendanceModel {
	}
	/**
	 * Use to create a new user event attendance type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateUserEventAttendanceTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of calendar event details
	 * @see {@link CalendarEventDetailSearchModel}
	 * @public
	 */
	export interface GetCalendarEventDetailsDto extends CalendarEventDetailSearchModel {
	}
	/**
	 * Use to get a list of calendar event files
	 * @see {@link CalendarEventFileSearchModel}
	 * @public
	 */
	export interface GetCalendarEventFilesDto extends CalendarEventFileSearchModel {
	}
	/**
	 * Use to get a list of calendar event images
	 * @see {@link CalendarEventImageSearchModel}
	 * @public
	 */
	export interface GetCalendarEventImagesDto extends CalendarEventImageSearchModel {
	}
	/**
	 * Use to get a list of calendar event image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCalendarEventImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of calendar event products
	 * @see {@link CalendarEventProductSearchModel}
	 * @public
	 */
	export interface GetCalendarEventProductsDto extends CalendarEventProductSearchModel {
	}
	/**
	 * Use to get a list of calendar events
	 * @see {@link CalendarEventSearchModel}
	 * @public
	 */
	export interface GetCalendarEventsDto extends CalendarEventSearchModel {
	}
	/**
	 * Use to get a list of calendar event statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetCalendarEventStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of calendar event types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCalendarEventTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of user event attendances
	 * @see {@link UserEventAttendanceSearchModel}
	 * @public
	 */
	export interface GetUserEventAttendancesDto extends UserEventAttendanceSearchModel {
	}
	/**
	 * Use to get a list of user event attendance types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetUserEventAttendanceTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing calendar event.
	 * @see {@link CalendarEventModel}
	 * @public
	 */
	export interface UpdateCalendarEventDto extends CalendarEventModel {
	}
	/**
	 * Use to update an existing calendar event detail.
	 * @see {@link CalendarEventDetailModel}
	 * @public
	 */
	export interface UpdateCalendarEventDetailDto extends CalendarEventDetailModel {
	}
	/**
	 * Use to update an existing calendar event file.
	 * @see {@link CalendarEventFileModel}
	 * @public
	 */
	export interface UpdateCalendarEventFileDto extends CalendarEventFileModel {
	}
	/**
	 * Use to update an existing calendar event image.
	 * @see {@link CalendarEventImageModel}
	 * @public
	 */
	export interface UpdateCalendarEventImageDto extends CalendarEventImageModel {
	}
	/**
	 * Use to update an existing calendar event image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCalendarEventImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing calendar event product.
	 * @see {@link CalendarEventProductModel}
	 * @public
	 */
	export interface UpdateCalendarEventProductDto extends CalendarEventProductModel {
	}
	/**
	 * Use to update an existing calendar event status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateCalendarEventStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing calendar event type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateCalendarEventTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing user event attendance.
	 * @see {@link UserEventAttendanceModel}
	 * @public
	 */
	export interface UpdateUserEventAttendanceDto extends UserEventAttendanceModel {
	}
	/**
	 * Use to update an existing user event attendance type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateUserEventAttendanceTypeDto extends TypeModel {
	}

	export class CalendarEvents extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all calendar event calls.
		 * @param {@link cef.admin.api.ClearCalendarEventCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventCache
		 * @path <API Root>/CalendarEvents/CalendarEvent/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvent", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar event detail calls.
		 * @param {@link cef.admin.api.ClearCalendarEventDetailCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventDetailCache
		 * @path <API Root>/CalendarEvents/CalendarEventDetail/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventDetailCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetail", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar event file calls.
		 * @param {@link cef.admin.api.ClearCalendarEventFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventFileCache
		 * @path <API Root>/CalendarEvents/CalendarEventFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar event image calls.
		 * @param {@link cef.admin.api.ClearCalendarEventImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventImageCache
		 * @path <API Root>/CalendarEvents/CalendarEventImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar event image type calls.
		 * @param {@link cef.admin.api.ClearCalendarEventImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventImageTypeCache
		 * @path <API Root>/CalendarEvents/CalendarEventImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar event product calls.
		 * @param {@link cef.admin.api.ClearCalendarEventProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventProductCache
		 * @path <API Root>/CalendarEvents/CalendarEventProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar event status calls.
		 * @param {@link cef.admin.api.ClearCalendarEventStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventStatusCache
		 * @path <API Root>/CalendarEvents/CalendarEventStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar event type calls.
		 * @param {@link cef.admin.api.ClearCalendarEventTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarEventTypeCache
		 * @path <API Root>/CalendarEvents/CalendarEventType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarEventTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user event attendance calls.
		 * @param {@link cef.admin.api.ClearUserEventAttendanceCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserEventAttendanceCache
		 * @path <API Root>/CalendarEvents/UserEventAttendance/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserEventAttendanceCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendance", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user event attendance type calls.
		 * @param {@link cef.admin.api.ClearUserEventAttendanceTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserEventAttendanceTypeCache
		 * @path <API Root>/CalendarEvents/UserEventAttendanceType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserEventAttendanceTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new calendar event.
		 * @param {@link cef.admin.api.CreateCalendarEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEvent
		 * @path <API Root>/CalendarEvents/CalendarEvent/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEvent = (routeParams?: CreateCalendarEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvent", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar event detail.
		 * @param {@link cef.admin.api.CreateCalendarEventDetailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEventDetail
		 * @path <API Root>/CalendarEvents/CalendarEventDetail/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEventDetail = (routeParams?: CreateCalendarEventDetailDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetail", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar event file.
		 * @param {@link cef.admin.api.CreateCalendarEventFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEventFile
		 * @path <API Root>/CalendarEvents/CalendarEventFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEventFile = (routeParams?: CreateCalendarEventFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar event image.
		 * @param {@link cef.admin.api.CreateCalendarEventImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEventImage
		 * @path <API Root>/CalendarEvents/CalendarEventImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEventImage = (routeParams?: CreateCalendarEventImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar event image type.
		 * @param {@link cef.admin.api.CreateCalendarEventImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEventImageType
		 * @path <API Root>/CalendarEvents/CalendarEventImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEventImageType = (routeParams?: CreateCalendarEventImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar event product.
		 * @param {@link cef.admin.api.CreateCalendarEventProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEventProduct
		 * @path <API Root>/CalendarEvents/CalendarEventProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEventProduct = (routeParams?: CreateCalendarEventProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar event status.
		 * @param {@link cef.admin.api.CreateCalendarEventStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEventStatus
		 * @path <API Root>/CalendarEvents/CalendarEventStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEventStatus = (routeParams?: CreateCalendarEventStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar event type.
		 * @param {@link cef.admin.api.CreateCalendarEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarEventType
		 * @path <API Root>/CalendarEvents/CalendarEventType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarEventType = (routeParams?: CreateCalendarEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user event attendance.
		 * @param {@link cef.admin.api.CreateUserEventAttendanceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserEventAttendance
		 * @path <API Root>/CalendarEvents/UserEventAttendance/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserEventAttendance = (routeParams?: CreateUserEventAttendanceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendance", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user event attendance type.
		 * @param {@link cef.admin.api.CreateUserEventAttendanceTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserEventAttendanceType
		 * @path <API Root>/CalendarEvents/UserEventAttendanceType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserEventAttendanceType = (routeParams?: CreateUserEventAttendanceTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific calendar event from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventByID
		 * @path <API Root>/CalendarEvents/CalendarEvent/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvent", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar event detail from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventDetailByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventDetailByID
		 * @path <API Root>/CalendarEvents/CalendarEventDetail/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventDetailByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetail", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar event file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventFileByID
		 * @path <API Root>/CalendarEvents/CalendarEventFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar event image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventImageByID
		 * @path <API Root>/CalendarEvents/CalendarEventImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar event image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventImageTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar event product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventProductByID
		 * @path <API Root>/CalendarEvents/CalendarEventProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar event status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventStatusByID
		 * @path <API Root>/CalendarEvents/CalendarEventStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar event type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarEventTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user event attendance from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserEventAttendanceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserEventAttendanceByID
		 * @path <API Root>/CalendarEvents/UserEventAttendance/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserEventAttendanceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendance", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user event attendance type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserEventAttendanceTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserEventAttendanceTypeByID
		 * @path <API Root>/CalendarEvents/UserEventAttendanceType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserEventAttendanceTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific calendar event from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventByID
		 * @path <API Root>/CalendarEvents/CalendarEvent/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvent", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar event detail from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventDetailByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventDetailByID
		 * @path <API Root>/CalendarEvents/CalendarEventDetail/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventDetailByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetail", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar event file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventFileByID
		 * @path <API Root>/CalendarEvents/CalendarEventFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar event image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventImageByID
		 * @path <API Root>/CalendarEvents/CalendarEventImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar event image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventImageTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar event product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventProductByID
		 * @path <API Root>/CalendarEvents/CalendarEventProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar event status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventStatusByID
		 * @path <API Root>/CalendarEvents/CalendarEventStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar event type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarEventTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user event attendance from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserEventAttendanceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserEventAttendanceByID
		 * @path <API Root>/CalendarEvents/UserEventAttendance/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserEventAttendanceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendance", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user event attendance type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserEventAttendanceTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserEventAttendanceTypeByID
		 * @path <API Root>/CalendarEvents/UserEventAttendanceType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserEventAttendanceTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific calendar event
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventByID
		 * @path <API Root>/CalendarEvents/CalendarEvent/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventModel>}
		 * @public
		 */
		GetCalendarEventByID = (id: number) => this.$http<CalendarEventModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvent", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific calendar event detail
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventDetailByID
		 * @path <API Root>/CalendarEvents/CalendarEventDetail/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventDetailModel>}
		 * @public
		 */
		GetCalendarEventDetailByID = (id: number) => this.$http<CalendarEventDetailModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetail", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar event details
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventDetails
		 * @path <API Root>/CalendarEvents/CalendarEventDetails
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventDetailPagedResults>}
		 * @public
		 */
		GetCalendarEventDetails = (routeParams?: GetCalendarEventDetailsDto) => this.$http<CalendarEventDetailPagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetails"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar event file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventFileByID
		 * @path <API Root>/CalendarEvents/CalendarEventFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventFileModel>}
		 * @public
		 */
		GetCalendarEventFileByID = (id: number) => this.$http<CalendarEventFileModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar event files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventFiles
		 * @path <API Root>/CalendarEvents/CalendarEventFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventFilePagedResults>}
		 * @public
		 */
		GetCalendarEventFiles = (routeParams?: GetCalendarEventFilesDto) => this.$http<CalendarEventFilePagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar event image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventImageByID
		 * @path <API Root>/CalendarEvents/CalendarEventImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventImageModel>}
		 * @public
		 */
		GetCalendarEventImageByID = (id: number) => this.$http<CalendarEventImageModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar event images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventImages
		 * @path <API Root>/CalendarEvents/CalendarEventImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventImagePagedResults>}
		 * @public
		 */
		GetCalendarEventImages = (routeParams?: GetCalendarEventImagesDto) => this.$http<CalendarEventImagePagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar event image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventImageTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCalendarEventImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar event image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventImageTypes
		 * @path <API Root>/CalendarEvents/CalendarEventImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventImageTypePagedResults>}
		 * @public
		 */
		GetCalendarEventImageTypes = (routeParams?: GetCalendarEventImageTypesDto) => this.$http<CalendarEventImageTypePagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar event product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventProductByID
		 * @path <API Root>/CalendarEvents/CalendarEventProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventProductModel>}
		 * @public
		 */
		GetCalendarEventProductByID = (id: number) => this.$http<CalendarEventProductModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar event products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventProducts
		 * @path <API Root>/CalendarEvents/CalendarEventProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventProductPagedResults>}
		 * @public
		 */
		GetCalendarEventProducts = (routeParams?: GetCalendarEventProductsDto) => this.$http<CalendarEventProductPagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of calendar events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEvents
		 * @path <API Root>/CalendarEvents/CalendarEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventPagedResults>}
		 * @public
		 */
		GetCalendarEvents = (routeParams?: GetCalendarEventsDto) => this.$http<CalendarEventPagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar event status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventStatusByID
		 * @path <API Root>/CalendarEvents/CalendarEventStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetCalendarEventStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar event statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventStatuses
		 * @path <API Root>/CalendarEvents/CalendarEventStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventStatusPagedResults>}
		 * @public
		 */
		GetCalendarEventStatuses = (routeParams?: GetCalendarEventStatusesDto) => this.$http<CalendarEventStatusPagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar event type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetCalendarEventTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar event types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarEventTypes
		 * @path <API Root>/CalendarEvents/CalendarEventTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarEventTypePagedResults>}
		 * @public
		 */
		GetCalendarEventTypes = (routeParams?: GetCalendarEventTypesDto) => this.$http<CalendarEventTypePagedResults>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user event attendance
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserEventAttendanceByID
		 * @path <API Root>/CalendarEvents/UserEventAttendance/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserEventAttendanceModel>}
		 * @public
		 */
		GetUserEventAttendanceByID = (id: number) => this.$http<UserEventAttendanceModel>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendance", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user event attendances
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserEventAttendances
		 * @path <API Root>/CalendarEvents/UserEventAttendances
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserEventAttendancePagedResults>}
		 * @public
		 */
		GetUserEventAttendances = (routeParams?: GetUserEventAttendancesDto) => this.$http<UserEventAttendancePagedResults>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendances"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user event attendance type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserEventAttendanceTypeByID
		 * @path <API Root>/CalendarEvents/UserEventAttendanceType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetUserEventAttendanceTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user event attendance types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserEventAttendanceTypes
		 * @path <API Root>/CalendarEvents/UserEventAttendanceTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserEventAttendanceTypePagedResults>}
		 * @public
		 */
		GetUserEventAttendanceTypes = (routeParams?: GetUserEventAttendanceTypesDto) => this.$http<UserEventAttendanceTypePagedResults>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific calendar event from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventByID
		 * @path <API Root>/CalendarEvents/CalendarEvent/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvent", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar event detail from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventDetailByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventDetailByID
		 * @path <API Root>/CalendarEvents/CalendarEventDetail/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventDetailByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetail", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar event file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventFileByID
		 * @path <API Root>/CalendarEvents/CalendarEventFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar event image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventImageByID
		 * @path <API Root>/CalendarEvents/CalendarEventImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar event image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventImageTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar event product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventProductByID
		 * @path <API Root>/CalendarEvents/CalendarEventProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar event status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventStatusByID
		 * @path <API Root>/CalendarEvents/CalendarEventStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar event type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarEventTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarEventTypeByID
		 * @path <API Root>/CalendarEvents/CalendarEventType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarEventTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user event attendance from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserEventAttendanceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserEventAttendanceByID
		 * @path <API Root>/CalendarEvents/UserEventAttendance/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserEventAttendanceByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendance", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user event attendance type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserEventAttendanceTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserEventAttendanceTypeByID
		 * @path <API Root>/CalendarEvents/UserEventAttendanceType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserEventAttendanceTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing calendar event.
		 * @param {@link cef.admin.api.UpdateCalendarEventDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEvent
		 * @path <API Root>/CalendarEvents/CalendarEvent/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEvent = (routeParams?: UpdateCalendarEventDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEvent", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar event detail.
		 * @param {@link cef.admin.api.UpdateCalendarEventDetailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEventDetail
		 * @path <API Root>/CalendarEvents/CalendarEventDetail/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEventDetail = (routeParams?: UpdateCalendarEventDetailDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventDetail", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar event file.
		 * @param {@link cef.admin.api.UpdateCalendarEventFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEventFile
		 * @path <API Root>/CalendarEvents/CalendarEventFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEventFile = (routeParams?: UpdateCalendarEventFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar event image.
		 * @param {@link cef.admin.api.UpdateCalendarEventImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEventImage
		 * @path <API Root>/CalendarEvents/CalendarEventImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEventImage = (routeParams?: UpdateCalendarEventImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar event image type.
		 * @param {@link cef.admin.api.UpdateCalendarEventImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEventImageType
		 * @path <API Root>/CalendarEvents/CalendarEventImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEventImageType = (routeParams?: UpdateCalendarEventImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar event product.
		 * @param {@link cef.admin.api.UpdateCalendarEventProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEventProduct
		 * @path <API Root>/CalendarEvents/CalendarEventProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEventProduct = (routeParams?: UpdateCalendarEventProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar event status.
		 * @param {@link cef.admin.api.UpdateCalendarEventStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEventStatus
		 * @path <API Root>/CalendarEvents/CalendarEventStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEventStatus = (routeParams?: UpdateCalendarEventStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar event type.
		 * @param {@link cef.admin.api.UpdateCalendarEventTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarEventType
		 * @path <API Root>/CalendarEvents/CalendarEventType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarEventType = (routeParams?: UpdateCalendarEventTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "CalendarEventType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user event attendance.
		 * @param {@link cef.admin.api.UpdateUserEventAttendanceDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserEventAttendance
		 * @path <API Root>/CalendarEvents/UserEventAttendance/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserEventAttendance = (routeParams?: UpdateUserEventAttendanceDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendance", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user event attendance type.
		 * @param {@link cef.admin.api.UpdateUserEventAttendanceTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserEventAttendanceType
		 * @path <API Root>/CalendarEvents/UserEventAttendanceType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserEventAttendanceType = (routeParams?: UpdateUserEventAttendanceTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "CalendarEvents", "UserEventAttendanceType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
