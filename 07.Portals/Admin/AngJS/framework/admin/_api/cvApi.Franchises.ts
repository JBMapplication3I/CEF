/**
 * @file framework/admin/_api/cvApi.Franchises.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new franchise.
	 * @see {@link FranchiseModel}
	 * @public
	 */
	export interface CreateFranchiseDto extends FranchiseModel {
	}
	/**
	 * Use to create a new franchise account.
	 * @see {@link FranchiseAccountModel}
	 * @public
	 */
	export interface CreateFranchiseAccountDto extends FranchiseAccountModel {
	}
	/**
	 * Use to create a new franchise category.
	 * @see {@link FranchiseCategoryModel}
	 * @public
	 */
	export interface CreateFranchiseCategoryDto extends FranchiseCategoryModel {
	}
	/**
	 * Use to create a new franchise country.
	 * @see {@link FranchiseCountryModel}
	 * @public
	 */
	export interface CreateFranchiseCountryDto extends FranchiseCountryModel {
	}
	/**
	 * Use to create a new franchise currency.
	 * @see {@link FranchiseCurrencyModel}
	 * @public
	 */
	export interface CreateFranchiseCurrencyDto extends FranchiseCurrencyModel {
	}
	/**
	 * Use to create a new franchise district.
	 * @see {@link FranchiseDistrictModel}
	 * @public
	 */
	export interface CreateFranchiseDistrictDto extends FranchiseDistrictModel {
	}
	/**
	 * Use to create a new franchise image.
	 * @see {@link FranchiseImageModel}
	 * @public
	 */
	export interface CreateFranchiseImageDto extends FranchiseImageModel {
	}
	/**
	 * Use to create a new franchise image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateFranchiseImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new franchise inventory location.
	 * @see {@link FranchiseInventoryLocationModel}
	 * @public
	 */
	export interface CreateFranchiseInventoryLocationDto extends FranchiseInventoryLocationModel {
	}
	/**
	 * Use to create a new franchise inventory location type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateFranchiseInventoryLocationTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new franchise language.
	 * @see {@link FranchiseLanguageModel}
	 * @public
	 */
	export interface CreateFranchiseLanguageDto extends FranchiseLanguageModel {
	}
	/**
	 * Use to create a new franchise manufacturer.
	 * @see {@link FranchiseManufacturerModel}
	 * @public
	 */
	export interface CreateFranchiseManufacturerDto extends FranchiseManufacturerModel {
	}
	/**
	 * Use to create a new franchise product.
	 * @see {@link FranchiseProductModel}
	 * @public
	 */
	export interface CreateFranchiseProductDto extends FranchiseProductModel {
	}
	/**
	 * Use to create a new franchise region.
	 * @see {@link FranchiseRegionModel}
	 * @public
	 */
	export interface CreateFranchiseRegionDto extends FranchiseRegionModel {
	}
	/**
	 * Use to create a new franchise site domain.
	 * @see {@link FranchiseSiteDomainModel}
	 * @public
	 */
	export interface CreateFranchiseSiteDomainDto extends FranchiseSiteDomainModel {
	}
	/**
	 * Use to create a new franchise store.
	 * @see {@link FranchiseStoreModel}
	 * @public
	 */
	export interface CreateFranchiseStoreDto extends FranchiseStoreModel {
	}
	/**
	 * Use to create a new franchise type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateFranchiseTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new franchise user.
	 * @see {@link FranchiseUserModel}
	 * @public
	 */
	export interface CreateFranchiseUserDto extends FranchiseUserModel {
	}
	/**
	 * Use to create a new franchise vendor.
	 * @see {@link FranchiseVendorModel}
	 * @public
	 */
	export interface CreateFranchiseVendorDto extends FranchiseVendorModel {
	}
	/**
	 * Use to get a list of franchise accounts
	 * @see {@link FranchiseAccountSearchModel}
	 * @public
	 */
	export interface GetFranchiseAccountsDto extends FranchiseAccountSearchModel {
	}
	/**
	 * Use to get a list of franchise categories
	 * @see {@link FranchiseCategorySearchModel}
	 * @public
	 */
	export interface GetFranchiseCategoriesDto extends FranchiseCategorySearchModel {
	}
	/**
	 * Use to get a list of franchise countries
	 * @see {@link FranchiseCountrySearchModel}
	 * @public
	 */
	export interface GetFranchiseCountriesDto extends FranchiseCountrySearchModel {
	}
	/**
	 * Use to get a list of franchise currencies
	 * @see {@link FranchiseCurrencySearchModel}
	 * @public
	 */
	export interface GetFranchiseCurrenciesDto extends FranchiseCurrencySearchModel {
	}
	/**
	 * Use to get a list of franchise districts
	 * @see {@link FranchiseDistrictSearchModel}
	 * @public
	 */
	export interface GetFranchiseDistrictsDto extends FranchiseDistrictSearchModel {
	}
	/**
	 * Use to get a list of franchise images
	 * @see {@link FranchiseImageSearchModel}
	 * @public
	 */
	export interface GetFranchiseImagesDto extends FranchiseImageSearchModel {
	}
	/**
	 * Use to get a list of franchise image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetFranchiseImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of franchise inventory locations
	 * @see {@link FranchiseInventoryLocationSearchModel}
	 * @public
	 */
	export interface GetFranchiseInventoryLocationsDto extends FranchiseInventoryLocationSearchModel {
	}
	/**
	 * Use to get a list of franchise inventory location types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetFranchiseInventoryLocationTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of franchise languages
	 * @see {@link FranchiseLanguageSearchModel}
	 * @public
	 */
	export interface GetFranchiseLanguagesDto extends FranchiseLanguageSearchModel {
	}
	/**
	 * Use to get a list of franchise manufacturers
	 * @see {@link FranchiseManufacturerSearchModel}
	 * @public
	 */
	export interface GetFranchiseManufacturersDto extends FranchiseManufacturerSearchModel {
	}
	/**
	 * Use to get a list of franchise products
	 * @see {@link FranchiseProductSearchModel}
	 * @public
	 */
	export interface GetFranchiseProductsDto extends FranchiseProductSearchModel {
	}
	/**
	 * Use to get a list of franchise regions
	 * @see {@link FranchiseRegionSearchModel}
	 * @public
	 */
	export interface GetFranchiseRegionsDto extends FranchiseRegionSearchModel {
	}
	/**
	 * Use to get a list of franchises
	 * @see {@link FranchiseSearchModel}
	 * @public
	 */
	export interface GetFranchisesDto extends FranchiseSearchModel {
	}
	/**
	 * Use to get a list of franchise site domains
	 * @see {@link FranchiseSiteDomainSearchModel}
	 * @public
	 */
	export interface GetFranchiseSiteDomainsDto extends FranchiseSiteDomainSearchModel {
	}
	/**
	 * Use to get a list of franchise stores
	 * @see {@link FranchiseStoreSearchModel}
	 * @public
	 */
	export interface GetFranchiseStoresDto extends FranchiseStoreSearchModel {
	}
	/**
	 * Use to get a list of franchise types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetFranchiseTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of franchise users
	 * @see {@link FranchiseUserSearchModel}
	 * @public
	 */
	export interface GetFranchiseUsersDto extends FranchiseUserSearchModel {
	}
	/**
	 * Use to get a list of franchise vendors
	 * @see {@link FranchiseVendorSearchModel}
	 * @public
	 */
	export interface GetFranchiseVendorsDto extends FranchiseVendorSearchModel {
	}
	/**
	 * Use to update an existing franchise.
	 * @see {@link FranchiseModel}
	 * @public
	 */
	export interface UpdateFranchiseDto extends FranchiseModel {
	}
	/**
	 * Use to update an existing franchise account.
	 * @see {@link FranchiseAccountModel}
	 * @public
	 */
	export interface UpdateFranchiseAccountDto extends FranchiseAccountModel {
	}
	/**
	 * Use to update an existing franchise category.
	 * @see {@link FranchiseCategoryModel}
	 * @public
	 */
	export interface UpdateFranchiseCategoryDto extends FranchiseCategoryModel {
	}
	/**
	 * Use to update an existing franchise country.
	 * @see {@link FranchiseCountryModel}
	 * @public
	 */
	export interface UpdateFranchiseCountryDto extends FranchiseCountryModel {
	}
	/**
	 * Use to update an existing franchise currency.
	 * @see {@link FranchiseCurrencyModel}
	 * @public
	 */
	export interface UpdateFranchiseCurrencyDto extends FranchiseCurrencyModel {
	}
	/**
	 * Use to update an existing franchise district.
	 * @see {@link FranchiseDistrictModel}
	 * @public
	 */
	export interface UpdateFranchiseDistrictDto extends FranchiseDistrictModel {
	}
	/**
	 * Use to update an existing franchise image.
	 * @see {@link FranchiseImageModel}
	 * @public
	 */
	export interface UpdateFranchiseImageDto extends FranchiseImageModel {
	}
	/**
	 * Use to update an existing franchise image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateFranchiseImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing franchise inventory location.
	 * @see {@link FranchiseInventoryLocationModel}
	 * @public
	 */
	export interface UpdateFranchiseInventoryLocationDto extends FranchiseInventoryLocationModel {
	}
	/**
	 * Use to update an existing franchise inventory location type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateFranchiseInventoryLocationTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing franchise language.
	 * @see {@link FranchiseLanguageModel}
	 * @public
	 */
	export interface UpdateFranchiseLanguageDto extends FranchiseLanguageModel {
	}
	/**
	 * Use to update an existing franchise manufacturer.
	 * @see {@link FranchiseManufacturerModel}
	 * @public
	 */
	export interface UpdateFranchiseManufacturerDto extends FranchiseManufacturerModel {
	}
	/**
	 * Use to update an existing franchise product.
	 * @see {@link FranchiseProductModel}
	 * @public
	 */
	export interface UpdateFranchiseProductDto extends FranchiseProductModel {
	}
	/**
	 * Use to update an existing franchise region.
	 * @see {@link FranchiseRegionModel}
	 * @public
	 */
	export interface UpdateFranchiseRegionDto extends FranchiseRegionModel {
	}
	/**
	 * Use to update an existing franchise site domain.
	 * @see {@link FranchiseSiteDomainModel}
	 * @public
	 */
	export interface UpdateFranchiseSiteDomainDto extends FranchiseSiteDomainModel {
	}
	/**
	 * Use to update an existing franchise store.
	 * @see {@link FranchiseStoreModel}
	 * @public
	 */
	export interface UpdateFranchiseStoreDto extends FranchiseStoreModel {
	}
	/**
	 * Use to update an existing franchise type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateFranchiseTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing franchise user.
	 * @see {@link FranchiseUserModel}
	 * @public
	 */
	export interface UpdateFranchiseUserDto extends FranchiseUserModel {
	}
	/**
	 * Use to update an existing franchise vendor.
	 * @see {@link FranchiseVendorModel}
	 * @public
	 */
	export interface UpdateFranchiseVendorDto extends FranchiseVendorModel {
	}

	export class Franchises extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all franchise account calls.
		 * @param {@link cef.admin.api.ClearFranchiseAccountCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseAccountCache
		 * @path <API Root>/Franchises/FranchiseAccount/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseAccountCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseAccount", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise calls.
		 * @param {@link cef.admin.api.ClearFranchiseCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseCache
		 * @path <API Root>/Franchises/Franchise/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "Franchise", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise category calls.
		 * @param {@link cef.admin.api.ClearFranchiseCategoryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseCategoryCache
		 * @path <API Root>/Franchises/FranchiseCategory/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseCategoryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseCategory", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise country calls.
		 * @param {@link cef.admin.api.ClearFranchiseCountryCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseCountryCache
		 * @path <API Root>/Franchises/FranchiseCountry/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseCountryCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseCountry", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise currency calls.
		 * @param {@link cef.admin.api.ClearFranchiseCurrencyCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseCurrencyCache
		 * @path <API Root>/Franchises/FranchiseCurrency/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseCurrencyCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrency", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise district calls.
		 * @param {@link cef.admin.api.ClearFranchiseDistrictCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseDistrictCache
		 * @path <API Root>/Franchises/FranchiseDistrict/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseDistrictCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseDistrict", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise image calls.
		 * @param {@link cef.admin.api.ClearFranchiseImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseImageCache
		 * @path <API Root>/Franchises/FranchiseImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise image type calls.
		 * @param {@link cef.admin.api.ClearFranchiseImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseImageTypeCache
		 * @path <API Root>/Franchises/FranchiseImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise inventory location calls.
		 * @param {@link cef.admin.api.ClearFranchiseInventoryLocationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseInventoryLocationCache
		 * @path <API Root>/Franchises/FranchiseInventoryLocation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseInventoryLocationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise inventory location type calls.
		 * @param {@link cef.admin.api.ClearFranchiseInventoryLocationTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseInventoryLocationTypeCache
		 * @path <API Root>/Franchises/FranchiseInventoryLocationType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseInventoryLocationTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise language calls.
		 * @param {@link cef.admin.api.ClearFranchiseLanguageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseLanguageCache
		 * @path <API Root>/Franchises/FranchiseLanguage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseLanguageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise manufacturer calls.
		 * @param {@link cef.admin.api.ClearFranchiseManufacturerCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseManufacturerCache
		 * @path <API Root>/Franchises/FranchiseManufacturer/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseManufacturerCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturer", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise product calls.
		 * @param {@link cef.admin.api.ClearFranchiseProductCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseProductCache
		 * @path <API Root>/Franchises/FranchiseProduct/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseProductCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseProduct", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise region calls.
		 * @param {@link cef.admin.api.ClearFranchiseRegionCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseRegionCache
		 * @path <API Root>/Franchises/FranchiseRegion/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseRegionCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseRegion", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise site domain calls.
		 * @param {@link cef.admin.api.ClearFranchiseSiteDomainCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseSiteDomainCache
		 * @path <API Root>/Franchises/FranchiseSiteDomain/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseSiteDomainCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomain", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise store calls.
		 * @param {@link cef.admin.api.ClearFranchiseStoreCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseStoreCache
		 * @path <API Root>/Franchises/FranchiseStore/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseStoreCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseStore", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise type calls.
		 * @param {@link cef.admin.api.ClearFranchiseTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseTypeCache
		 * @path <API Root>/Franchises/FranchiseType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise user calls.
		 * @param {@link cef.admin.api.ClearFranchiseUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseUserCache
		 * @path <API Root>/Franchises/FranchiseUser/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseUser", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all franchise vendor calls.
		 * @param {@link cef.admin.api.ClearFranchiseVendorCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearFranchiseVendorCache
		 * @path <API Root>/Franchises/FranchiseVendor/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearFranchiseVendorCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Franchises", "FranchiseVendor", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new franchise.
		 * @param {@link cef.admin.api.CreateFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchise
		 * @path <API Root>/Franchises/Franchise/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchise = (routeParams?: CreateFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "Franchise", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise account.
		 * @param {@link cef.admin.api.CreateFranchiseAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseAccount
		 * @path <API Root>/Franchises/FranchiseAccount/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseAccount = (routeParams?: CreateFranchiseAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseAccount", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise category.
		 * @param {@link cef.admin.api.CreateFranchiseCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseCategory
		 * @path <API Root>/Franchises/FranchiseCategory/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseCategory = (routeParams?: CreateFranchiseCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseCategory", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise country.
		 * @param {@link cef.admin.api.CreateFranchiseCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseCountry
		 * @path <API Root>/Franchises/FranchiseCountry/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseCountry = (routeParams?: CreateFranchiseCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseCountry", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise currency.
		 * @param {@link cef.admin.api.CreateFranchiseCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseCurrency
		 * @path <API Root>/Franchises/FranchiseCurrency/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseCurrency = (routeParams?: CreateFranchiseCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrency", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise district.
		 * @param {@link cef.admin.api.CreateFranchiseDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseDistrict
		 * @path <API Root>/Franchises/FranchiseDistrict/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseDistrict = (routeParams?: CreateFranchiseDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseDistrict", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise image.
		 * @param {@link cef.admin.api.CreateFranchiseImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseImage
		 * @path <API Root>/Franchises/FranchiseImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseImage = (routeParams?: CreateFranchiseImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise image type.
		 * @param {@link cef.admin.api.CreateFranchiseImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseImageType
		 * @path <API Root>/Franchises/FranchiseImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseImageType = (routeParams?: CreateFranchiseImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise inventory location.
		 * @param {@link cef.admin.api.CreateFranchiseInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseInventoryLocation
		 * @path <API Root>/Franchises/FranchiseInventoryLocation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseInventoryLocation = (routeParams?: CreateFranchiseInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise inventory location type.
		 * @param {@link cef.admin.api.CreateFranchiseInventoryLocationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseInventoryLocationType
		 * @path <API Root>/Franchises/FranchiseInventoryLocationType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseInventoryLocationType = (routeParams?: CreateFranchiseInventoryLocationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise language.
		 * @param {@link cef.admin.api.CreateFranchiseLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseLanguage
		 * @path <API Root>/Franchises/FranchiseLanguage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseLanguage = (routeParams?: CreateFranchiseLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise manufacturer.
		 * @param {@link cef.admin.api.CreateFranchiseManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseManufacturer
		 * @path <API Root>/Franchises/FranchiseManufacturer/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseManufacturer = (routeParams?: CreateFranchiseManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturer", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise product.
		 * @param {@link cef.admin.api.CreateFranchiseProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseProduct
		 * @path <API Root>/Franchises/FranchiseProduct/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseProduct = (routeParams?: CreateFranchiseProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseProduct", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise region.
		 * @param {@link cef.admin.api.CreateFranchiseRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseRegion
		 * @path <API Root>/Franchises/FranchiseRegion/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseRegion = (routeParams?: CreateFranchiseRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseRegion", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise site domain.
		 * @param {@link cef.admin.api.CreateFranchiseSiteDomainDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseSiteDomain
		 * @path <API Root>/Franchises/FranchiseSiteDomain/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseSiteDomain = (routeParams?: CreateFranchiseSiteDomainDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomain", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise store.
		 * @param {@link cef.admin.api.CreateFranchiseStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseStore
		 * @path <API Root>/Franchises/FranchiseStore/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseStore = (routeParams?: CreateFranchiseStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseStore", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise type.
		 * @param {@link cef.admin.api.CreateFranchiseTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseType
		 * @path <API Root>/Franchises/FranchiseType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseType = (routeParams?: CreateFranchiseTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise user.
		 * @param {@link cef.admin.api.CreateFranchiseUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseUser
		 * @path <API Root>/Franchises/FranchiseUser/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseUser = (routeParams?: CreateFranchiseUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseUser", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new franchise vendor.
		 * @param {@link cef.admin.api.CreateFranchiseVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateFranchiseVendor
		 * @path <API Root>/Franchises/FranchiseVendor/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateFranchiseVendor = (routeParams?: CreateFranchiseVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseVendor", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific franchise account from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseAccountByID
		 * @path <API Root>/Franchises/FranchiseAccount/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseAccount", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseByID
		 * @path <API Root>/Franchises/Franchise/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "Franchise", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise category from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseCategoryByID
		 * @path <API Root>/Franchises/FranchiseCategory/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCategory", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise country from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseCountryByID
		 * @path <API Root>/Franchises/FranchiseCountry/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCountry", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise currency from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseCurrencyByID
		 * @path <API Root>/Franchises/FranchiseCurrency/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrency", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise district from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseDistrictByID
		 * @path <API Root>/Franchises/FranchiseDistrict/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseDistrict", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseImageByID
		 * @path <API Root>/Franchises/FranchiseImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseImageTypeByID
		 * @path <API Root>/Franchises/FranchiseImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise inventory location from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseInventoryLocationByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise inventory location type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseInventoryLocationTypeByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocationType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise language from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseLanguageByID
		 * @path <API Root>/Franchises/FranchiseLanguage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise manufacturer from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseManufacturerByID
		 * @path <API Root>/Franchises/FranchiseManufacturer/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturer", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise product from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseProductByID
		 * @path <API Root>/Franchises/FranchiseProduct/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseProduct", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise region from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseRegionByID
		 * @path <API Root>/Franchises/FranchiseRegion/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseRegion", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise site domain from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseSiteDomainByID
		 * @path <API Root>/Franchises/FranchiseSiteDomain/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomain", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise store from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseStoreByID
		 * @path <API Root>/Franchises/FranchiseStore/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseStore", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseTypeByID
		 * @path <API Root>/Franchises/FranchiseType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseUserByID
		 * @path <API Root>/Franchises/FranchiseUser/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseUser", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific franchise vendor from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateFranchiseVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateFranchiseVendorByID
		 * @path <API Root>/Franchises/FranchiseVendor/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateFranchiseVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseVendor", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific franchise account from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseAccountByID
		 * @path <API Root>/Franchises/FranchiseAccount/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseAccount", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseByID
		 * @path <API Root>/Franchises/Franchise/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "Franchise", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise category from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseCategoryByID
		 * @path <API Root>/Franchises/FranchiseCategory/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCategory", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise country from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseCountryByID
		 * @path <API Root>/Franchises/FranchiseCountry/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCountry", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise currency from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseCurrencyByID
		 * @path <API Root>/Franchises/FranchiseCurrency/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrency", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise district from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseDistrictByID
		 * @path <API Root>/Franchises/FranchiseDistrict/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseDistrict", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseImageByID
		 * @path <API Root>/Franchises/FranchiseImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseImageTypeByID
		 * @path <API Root>/Franchises/FranchiseImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise inventory location from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseInventoryLocationByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise inventory location type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseInventoryLocationTypeByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocationType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise language from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseLanguageByID
		 * @path <API Root>/Franchises/FranchiseLanguage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise manufacturer from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseManufacturerByID
		 * @path <API Root>/Franchises/FranchiseManufacturer/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturer", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise product from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseProductByID
		 * @path <API Root>/Franchises/FranchiseProduct/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseProduct", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise region from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseRegionByID
		 * @path <API Root>/Franchises/FranchiseRegion/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseRegion", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise site domain from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseSiteDomainByID
		 * @path <API Root>/Franchises/FranchiseSiteDomain/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomain", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise store from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseStoreByID
		 * @path <API Root>/Franchises/FranchiseStore/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseStore", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseTypeByID
		 * @path <API Root>/Franchises/FranchiseType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseUserByID
		 * @path <API Root>/Franchises/FranchiseUser/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseUser", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific franchise vendor from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteFranchiseVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteFranchiseVendorByID
		 * @path <API Root>/Franchises/FranchiseVendor/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteFranchiseVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseVendor", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific franchise account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseAccountByID
		 * @path <API Root>/Franchises/FranchiseAccount/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseAccountModel>}
		 * @public
		 */
		GetFranchiseAccountByID = (id: number) => this.$http<FranchiseAccountModel>({
			url: [this.rootUrl, "Franchises", "FranchiseAccount", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseAccounts
		 * @path <API Root>/Franchises/FranchiseAccounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseAccountPagedResults>}
		 * @public
		 */
		GetFranchiseAccounts = (routeParams?: GetFranchiseAccountsDto) => this.$http<FranchiseAccountPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseAccounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseByID
		 * @path <API Root>/Franchises/Franchise/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseModel>}
		 * @public
		 */
		GetFranchiseByID = (id: number) => this.$http<FranchiseModel>({
			url: [this.rootUrl, "Franchises", "Franchise", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCategories
		 * @path <API Root>/Franchises/FranchiseCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseCategoryPagedResults>}
		 * @public
		 */
		GetFranchiseCategories = (routeParams?: GetFranchiseCategoriesDto) => this.$http<FranchiseCategoryPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCategoryByID
		 * @path <API Root>/Franchises/FranchiseCategory/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseCategoryModel>}
		 * @public
		 */
		GetFranchiseCategoryByID = (id: number) => this.$http<FranchiseCategoryModel>({
			url: [this.rootUrl, "Franchises", "FranchiseCategory", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise countries
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCountries
		 * @path <API Root>/Franchises/FranchiseCountries
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseCountryPagedResults>}
		 * @public
		 */
		GetFranchiseCountries = (routeParams?: GetFranchiseCountriesDto) => this.$http<FranchiseCountryPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseCountries"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise country
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCountryByID
		 * @path <API Root>/Franchises/FranchiseCountry/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseCountryModel>}
		 * @public
		 */
		GetFranchiseCountryByID = (id: number) => this.$http<FranchiseCountryModel>({
			url: [this.rootUrl, "Franchises", "FranchiseCountry", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise currencies
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCurrencies
		 * @path <API Root>/Franchises/FranchiseCurrencies
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseCurrencyPagedResults>}
		 * @public
		 */
		GetFranchiseCurrencies = (routeParams?: GetFranchiseCurrenciesDto) => this.$http<FranchiseCurrencyPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrencies"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise currency
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCurrencyByID
		 * @path <API Root>/Franchises/FranchiseCurrency/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseCurrencyModel>}
		 * @public
		 */
		GetFranchiseCurrencyByID = (id: number) => this.$http<FranchiseCurrencyModel>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrency", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific franchise district
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseDistrictByID
		 * @path <API Root>/Franchises/FranchiseDistrict/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseDistrictModel>}
		 * @public
		 */
		GetFranchiseDistrictByID = (id: number) => this.$http<FranchiseDistrictModel>({
			url: [this.rootUrl, "Franchises", "FranchiseDistrict", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise districts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseDistricts
		 * @path <API Root>/Franchises/FranchiseDistricts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseDistrictPagedResults>}
		 * @public
		 */
		GetFranchiseDistricts = (routeParams?: GetFranchiseDistrictsDto) => this.$http<FranchiseDistrictPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseDistricts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseImageByID
		 * @path <API Root>/Franchises/FranchiseImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseImageModel>}
		 * @public
		 */
		GetFranchiseImageByID = (id: number) => this.$http<FranchiseImageModel>({
			url: [this.rootUrl, "Franchises", "FranchiseImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseImages
		 * @path <API Root>/Franchises/FranchiseImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseImagePagedResults>}
		 * @public
		 */
		GetFranchiseImages = (routeParams?: GetFranchiseImagesDto) => this.$http<FranchiseImagePagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseImageTypeByID
		 * @path <API Root>/Franchises/FranchiseImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetFranchiseImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Franchises", "FranchiseImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseImageTypes
		 * @path <API Root>/Franchises/FranchiseImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseImageTypePagedResults>}
		 * @public
		 */
		GetFranchiseImageTypes = (routeParams?: GetFranchiseImageTypesDto) => this.$http<FranchiseImageTypePagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise inventory location
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseInventoryLocationByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseInventoryLocationModel>}
		 * @public
		 */
		GetFranchiseInventoryLocationByID = (id: number) => this.$http<FranchiseInventoryLocationModel>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise inventory locations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseInventoryLocations
		 * @path <API Root>/Franchises/FranchiseInventoryLocations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseInventoryLocationPagedResults>}
		 * @public
		 */
		GetFranchiseInventoryLocations = (routeParams?: GetFranchiseInventoryLocationsDto) => this.$http<FranchiseInventoryLocationPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise inventory location type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseInventoryLocationTypeByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocationType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetFranchiseInventoryLocationTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise inventory location types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseInventoryLocationTypes
		 * @path <API Root>/Franchises/FranchiseInventoryLocationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseInventoryLocationTypePagedResults>}
		 * @public
		 */
		GetFranchiseInventoryLocationTypes = (routeParams?: GetFranchiseInventoryLocationTypesDto) => this.$http<FranchiseInventoryLocationTypePagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise language
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseLanguageByID
		 * @path <API Root>/Franchises/FranchiseLanguage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseLanguageModel>}
		 * @public
		 */
		GetFranchiseLanguageByID = (id: number) => this.$http<FranchiseLanguageModel>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise languages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseLanguages
		 * @path <API Root>/Franchises/FranchiseLanguages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseLanguagePagedResults>}
		 * @public
		 */
		GetFranchiseLanguages = (routeParams?: GetFranchiseLanguagesDto) => this.$http<FranchiseLanguagePagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise manufacturer
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseManufacturerByID
		 * @path <API Root>/Franchises/FranchiseManufacturer/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseManufacturerModel>}
		 * @public
		 */
		GetFranchiseManufacturerByID = (id: number) => this.$http<FranchiseManufacturerModel>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturer", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise manufacturers
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseManufacturers
		 * @path <API Root>/Franchises/FranchiseManufacturers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseManufacturerPagedResults>}
		 * @public
		 */
		GetFranchiseManufacturers = (routeParams?: GetFranchiseManufacturersDto) => this.$http<FranchiseManufacturerPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseProductByID
		 * @path <API Root>/Franchises/FranchiseProduct/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseProductModel>}
		 * @public
		 */
		GetFranchiseProductByID = (id: number) => this.$http<FranchiseProductModel>({
			url: [this.rootUrl, "Franchises", "FranchiseProduct", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseProducts
		 * @path <API Root>/Franchises/FranchiseProducts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseProductPagedResults>}
		 * @public
		 */
		GetFranchiseProducts = (routeParams?: GetFranchiseProductsDto) => this.$http<FranchiseProductPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseProducts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise region
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseRegionByID
		 * @path <API Root>/Franchises/FranchiseRegion/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseRegionModel>}
		 * @public
		 */
		GetFranchiseRegionByID = (id: number) => this.$http<FranchiseRegionModel>({
			url: [this.rootUrl, "Franchises", "FranchiseRegion", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise regions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseRegions
		 * @path <API Root>/Franchises/FranchiseRegions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseRegionPagedResults>}
		 * @public
		 */
		GetFranchiseRegions = (routeParams?: GetFranchiseRegionsDto) => this.$http<FranchiseRegionPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseRegions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of franchises
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchises
		 * @path <API Root>/Franchises/Franchises
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchisePagedResults>}
		 * @public
		 */
		GetFranchises = (routeParams?: GetFranchisesDto) => this.$http<FranchisePagedResults>({
			url: [this.rootUrl, "Franchises", "Franchises"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise site domain
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseSiteDomainByID
		 * @path <API Root>/Franchises/FranchiseSiteDomain/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseSiteDomainModel>}
		 * @public
		 */
		GetFranchiseSiteDomainByID = (id: number) => this.$http<FranchiseSiteDomainModel>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomain", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise site domains
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseSiteDomains
		 * @path <API Root>/Franchises/FranchiseSiteDomains
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseSiteDomainPagedResults>}
		 * @public
		 */
		GetFranchiseSiteDomains = (routeParams?: GetFranchiseSiteDomainsDto) => this.$http<FranchiseSiteDomainPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomains"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseStoreByID
		 * @path <API Root>/Franchises/FranchiseStore/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseStoreModel>}
		 * @public
		 */
		GetFranchiseStoreByID = (id: number) => this.$http<FranchiseStoreModel>({
			url: [this.rootUrl, "Franchises", "FranchiseStore", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise stores
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseStores
		 * @path <API Root>/Franchises/FranchiseStores
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseStorePagedResults>}
		 * @public
		 */
		GetFranchiseStores = (routeParams?: GetFranchiseStoresDto) => this.$http<FranchiseStorePagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseStores"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseTypeByID
		 * @path <API Root>/Franchises/FranchiseType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetFranchiseTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Franchises", "FranchiseType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseTypes
		 * @path <API Root>/Franchises/FranchiseTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseTypePagedResults>}
		 * @public
		 */
		GetFranchiseTypes = (routeParams?: GetFranchiseTypesDto) => this.$http<FranchiseTypePagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseUserByID
		 * @path <API Root>/Franchises/FranchiseUser/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseUserModel>}
		 * @public
		 */
		GetFranchiseUserByID = (id: number) => this.$http<FranchiseUserModel>({
			url: [this.rootUrl, "Franchises", "FranchiseUser", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseUsers
		 * @path <API Root>/Franchises/FranchiseUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseUserPagedResults>}
		 * @public
		 */
		GetFranchiseUsers = (routeParams?: GetFranchiseUsersDto) => this.$http<FranchiseUserPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise vendor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseVendorByID
		 * @path <API Root>/Franchises/FranchiseVendor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseVendorModel>}
		 * @public
		 */
		GetFranchiseVendorByID = (id: number) => this.$http<FranchiseVendorModel>({
			url: [this.rootUrl, "Franchises", "FranchiseVendor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise vendors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseVendors
		 * @path <API Root>/Franchises/FranchiseVendors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseVendorPagedResults>}
		 * @public
		 */
		GetFranchiseVendors = (routeParams?: GetFranchiseVendorsDto) => this.$http<FranchiseVendorPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseVendors"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific franchise account from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseAccountByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseAccountByID
		 * @path <API Root>/Franchises/FranchiseAccount/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseAccountByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseAccount", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseByID
		 * @path <API Root>/Franchises/Franchise/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "Franchise", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise category from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseCategoryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseCategoryByID
		 * @path <API Root>/Franchises/FranchiseCategory/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseCategoryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCategory", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise country from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseCountryByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseCountryByID
		 * @path <API Root>/Franchises/FranchiseCountry/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseCountryByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCountry", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise currency from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseCurrencyByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseCurrencyByID
		 * @path <API Root>/Franchises/FranchiseCurrency/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseCurrencyByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrency", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise district from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseDistrictByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseDistrictByID
		 * @path <API Root>/Franchises/FranchiseDistrict/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseDistrictByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseDistrict", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseImageByID
		 * @path <API Root>/Franchises/FranchiseImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseImageTypeByID
		 * @path <API Root>/Franchises/FranchiseImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise inventory location from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseInventoryLocationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseInventoryLocationByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseInventoryLocationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise inventory location type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseInventoryLocationTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseInventoryLocationTypeByID
		 * @path <API Root>/Franchises/FranchiseInventoryLocationType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseInventoryLocationTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise language from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseLanguageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseLanguageByID
		 * @path <API Root>/Franchises/FranchiseLanguage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseLanguageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise manufacturer from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseManufacturerByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseManufacturerByID
		 * @path <API Root>/Franchises/FranchiseManufacturer/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseManufacturerByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturer", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise product from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseProductByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseProductByID
		 * @path <API Root>/Franchises/FranchiseProduct/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseProductByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseProduct", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise region from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseRegionByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseRegionByID
		 * @path <API Root>/Franchises/FranchiseRegion/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseRegionByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseRegion", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise site domain from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseSiteDomainByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseSiteDomainByID
		 * @path <API Root>/Franchises/FranchiseSiteDomain/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseSiteDomainByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomain", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise store from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseStoreByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseStoreByID
		 * @path <API Root>/Franchises/FranchiseStore/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseStoreByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseStore", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseTypeByID
		 * @path <API Root>/Franchises/FranchiseType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseUserByID
		 * @path <API Root>/Franchises/FranchiseUser/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseUser", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific franchise vendor from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateFranchiseVendorByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateFranchiseVendorByID
		 * @path <API Root>/Franchises/FranchiseVendor/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateFranchiseVendorByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Franchises", "FranchiseVendor", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing franchise.
		 * @param {@link cef.admin.api.UpdateFranchiseDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchise
		 * @path <API Root>/Franchises/Franchise/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchise = (routeParams?: UpdateFranchiseDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "Franchise", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise account.
		 * @param {@link cef.admin.api.UpdateFranchiseAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseAccount
		 * @path <API Root>/Franchises/FranchiseAccount/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseAccount = (routeParams?: UpdateFranchiseAccountDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseAccount", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise category.
		 * @param {@link cef.admin.api.UpdateFranchiseCategoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseCategory
		 * @path <API Root>/Franchises/FranchiseCategory/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseCategory = (routeParams?: UpdateFranchiseCategoryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseCategory", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise country.
		 * @param {@link cef.admin.api.UpdateFranchiseCountryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseCountry
		 * @path <API Root>/Franchises/FranchiseCountry/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseCountry = (routeParams?: UpdateFranchiseCountryDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseCountry", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise currency.
		 * @param {@link cef.admin.api.UpdateFranchiseCurrencyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseCurrency
		 * @path <API Root>/Franchises/FranchiseCurrency/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseCurrency = (routeParams?: UpdateFranchiseCurrencyDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseCurrency", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise district.
		 * @param {@link cef.admin.api.UpdateFranchiseDistrictDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseDistrict
		 * @path <API Root>/Franchises/FranchiseDistrict/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseDistrict = (routeParams?: UpdateFranchiseDistrictDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseDistrict", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise image.
		 * @param {@link cef.admin.api.UpdateFranchiseImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseImage
		 * @path <API Root>/Franchises/FranchiseImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseImage = (routeParams?: UpdateFranchiseImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise image type.
		 * @param {@link cef.admin.api.UpdateFranchiseImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseImageType
		 * @path <API Root>/Franchises/FranchiseImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseImageType = (routeParams?: UpdateFranchiseImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise inventory location.
		 * @param {@link cef.admin.api.UpdateFranchiseInventoryLocationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseInventoryLocation
		 * @path <API Root>/Franchises/FranchiseInventoryLocation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseInventoryLocation = (routeParams?: UpdateFranchiseInventoryLocationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise inventory location type.
		 * @param {@link cef.admin.api.UpdateFranchiseInventoryLocationTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseInventoryLocationType
		 * @path <API Root>/Franchises/FranchiseInventoryLocationType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseInventoryLocationType = (routeParams?: UpdateFranchiseInventoryLocationTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseInventoryLocationType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise language.
		 * @param {@link cef.admin.api.UpdateFranchiseLanguageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseLanguage
		 * @path <API Root>/Franchises/FranchiseLanguage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseLanguage = (routeParams?: UpdateFranchiseLanguageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseLanguage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise manufacturer.
		 * @param {@link cef.admin.api.UpdateFranchiseManufacturerDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseManufacturer
		 * @path <API Root>/Franchises/FranchiseManufacturer/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseManufacturer = (routeParams?: UpdateFranchiseManufacturerDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseManufacturer", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise product.
		 * @param {@link cef.admin.api.UpdateFranchiseProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseProduct
		 * @path <API Root>/Franchises/FranchiseProduct/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseProduct = (routeParams?: UpdateFranchiseProductDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseProduct", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise region.
		 * @param {@link cef.admin.api.UpdateFranchiseRegionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseRegion
		 * @path <API Root>/Franchises/FranchiseRegion/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseRegion = (routeParams?: UpdateFranchiseRegionDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseRegion", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise site domain.
		 * @param {@link cef.admin.api.UpdateFranchiseSiteDomainDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseSiteDomain
		 * @path <API Root>/Franchises/FranchiseSiteDomain/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseSiteDomain = (routeParams?: UpdateFranchiseSiteDomainDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseSiteDomain", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise store.
		 * @param {@link cef.admin.api.UpdateFranchiseStoreDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseStore
		 * @path <API Root>/Franchises/FranchiseStore/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseStore = (routeParams?: UpdateFranchiseStoreDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseStore", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise type.
		 * @param {@link cef.admin.api.UpdateFranchiseTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseType
		 * @path <API Root>/Franchises/FranchiseType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseType = (routeParams?: UpdateFranchiseTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise user.
		 * @param {@link cef.admin.api.UpdateFranchiseUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseUser
		 * @path <API Root>/Franchises/FranchiseUser/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseUser = (routeParams?: UpdateFranchiseUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing franchise vendor.
		 * @param {@link cef.admin.api.UpdateFranchiseVendorDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateFranchiseVendor
		 * @path <API Root>/Franchises/FranchiseVendor/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateFranchiseVendor = (routeParams?: UpdateFranchiseVendorDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Franchises", "FranchiseVendor", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
