/**
 * @file framework/admin/_api/cvApi.Contacts.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckUserStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckUserStatusExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckUserTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckUserTypeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to create a new contact.
	 * @see {@link ContactModel}
	 * @public
	 */
	export interface CreateContactDto extends ContactModel {
	}
	/**
	 * Use to create a new contact image.
	 * @see {@link ContactImageModel}
	 * @public
	 */
	export interface CreateContactImageDto extends ContactImageModel {
	}
	/**
	 * Use to create a new contact image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateContactImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new contact type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateContactTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new profanity filter.
	 * @see {@link ProfanityFilterModel}
	 * @public
	 */
	export interface CreateProfanityFilterDto extends ProfanityFilterModel {
	}
	/**
	 * Use to create a new referral code.
	 * @see {@link ReferralCodeModel}
	 * @public
	 */
	export interface CreateReferralCodeDto extends ReferralCodeModel {
	}
	/**
	 * Use to create a new referral code status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateReferralCodeStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new referral code type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateReferralCodeTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new user.
	 * @see {@link UserModel}
	 * @public
	 */
	export interface CreateUserDto extends UserModel {
		/** Password */
		Password?: string;
		/** Should the system create a user on the CMS side */
		CreateCMSUser?: boolean;
		/** Should the system create a CEF User */
		CreateCEFUser?: boolean;
	}
	/**
	 * Use to create a new user file.
	 * @see {@link UserFileModel}
	 * @public
	 */
	export interface CreateUserFileDto extends UserFileModel {
	}
	/**
	 * Use to create a new user image.
	 * @see {@link UserImageModel}
	 * @public
	 */
	export interface CreateUserImageDto extends UserImageModel {
	}
	/**
	 * Use to create a new user image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateUserImageTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new user online status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateUserOnlineStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new user product type.
	 * @see {@link UserProductTypeModel}
	 * @public
	 */
	export interface CreateUserProductTypeDto extends UserProductTypeModel {
	}
	/**
	 * Use to create a new user status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateUserStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new user type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateUserTypeDto extends TypeModel {
	}
	/**
	 * Use to get a list of contact images
	 * @see {@link ContactImageSearchModel}
	 * @public
	 */
	export interface GetContactImagesDto extends ContactImageSearchModel {
	}
	/**
	 * Use to get a list of contact image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetContactImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of contacts
	 * @see {@link ContactSearchModel}
	 * @public
	 */
	export interface GetContactsDto extends ContactSearchModel {
	}
	/**
	 * Use to get a list of contact types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetContactTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of profanity filters
	 * @see {@link ProfanityFilterSearchModel}
	 * @public
	 */
	export interface GetProfanityFiltersDto extends ProfanityFilterSearchModel {
	}
	/**
	 * Use to get a list of referral codes
	 * @see {@link ReferralCodeSearchModel}
	 * @public
	 */
	export interface GetReferralCodesDto extends ReferralCodeSearchModel {
	}
	/**
	 * Use to get a list of referral code statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetReferralCodeStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of referral code types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetReferralCodeTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of user files
	 * @see {@link UserFileSearchModel}
	 * @public
	 */
	export interface GetUserFilesDto extends UserFileSearchModel {
	}
	/**
	 * Use to get a list of user images
	 * @see {@link UserImageSearchModel}
	 * @public
	 */
	export interface GetUserImagesDto extends UserImageSearchModel {
	}
	/**
	 * Use to get a list of user image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetUserImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of user online statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetUserOnlineStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of user product types
	 * @see {@link UserProductTypeSearchModel}
	 * @public
	 */
	export interface GetUserProductTypesDto extends UserProductTypeSearchModel {
	}
	/**
	 * Use to get a list of users
	 * @see {@link UserSearchModel}
	 * @public
	 */
	export interface GetUsersDto extends UserSearchModel {
	}
	/**
	 * Use to get a list of user statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetUserStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of user types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetUserTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to update an existing contact.
	 * @see {@link ContactModel}
	 * @public
	 */
	export interface UpdateContactDto extends ContactModel {
	}
	/**
	 * Use to update an existing contact image.
	 * @see {@link ContactImageModel}
	 * @public
	 */
	export interface UpdateContactImageDto extends ContactImageModel {
	}
	/**
	 * Use to update an existing contact image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateContactImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing contact type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateContactTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing profanity filter.
	 * @see {@link ProfanityFilterModel}
	 * @public
	 */
	export interface UpdateProfanityFilterDto extends ProfanityFilterModel {
	}
	/**
	 * Use to update an existing referral code.
	 * @see {@link ReferralCodeModel}
	 * @public
	 */
	export interface UpdateReferralCodeDto extends ReferralCodeModel {
	}
	/**
	 * Use to update an existing referral code status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateReferralCodeStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing referral code type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateReferralCodeTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing user.
	 * @see {@link UserModel}
	 * @public
	 */
	export interface UpdateUserDto extends UserModel {
		/** Password */
		Password?: string;
		/** Should the system create a user on the CMS side */
		CreateCMSUser?: boolean;
	}
	/**
	 * Use to update an existing user file.
	 * @see {@link UserFileModel}
	 * @public
	 */
	export interface UpdateUserFileDto extends UserFileModel {
	}
	/**
	 * Use to update an existing user image.
	 * @see {@link UserImageModel}
	 * @public
	 */
	export interface UpdateUserImageDto extends UserImageModel {
	}
	/**
	 * Use to update an existing user image type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateUserImageTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing user online status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateUserOnlineStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing user product type.
	 * @see {@link UserProductTypeModel}
	 * @public
	 */
	export interface UpdateUserProductTypeDto extends UserProductTypeModel {
	}
	/**
	 * Use to update an existing user status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateUserStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing user type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateUserTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new or update an existing contact (as needed).
	 * @see {@link ContactModel}
	 * @public
	 */
	export interface UpsertContactDto extends ContactModel {
	}

	export class Contacts extends ServiceStackRoute {
		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserExistsByKey
		 * @path <API Root>/Contacts/User/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "User", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserStatusExistsByDisplayName
		 * @path <API Root>/Contacts/UserStatus/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserStatusExistsByDisplayName = (routeParams?: CheckUserStatusExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserStatusExistsByKey
		 * @path <API Root>/Contacts/UserStatus/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserStatusExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserStatusExistsByName
		 * @path <API Root>/Contacts/UserStatus/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserStatusExistsByName = (routeParams?: CheckUserStatusExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserTypeExistsByDisplayName
		 * @path <API Root>/Contacts/UserType/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserTypeExistsByDisplayName = (routeParams?: CheckUserTypeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "UserType", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserTypeExistsByKey
		 * @path <API Root>/Contacts/UserType/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserTypeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "UserType", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserTypeExistsByName
		 * @path <API Root>/Contacts/UserType/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserTypeExistsByName = (routeParams?: CheckUserTypeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "UserType", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Empties the server-side data cache for all contact calls.
		 * @param {@link cef.admin.api.ClearContactCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearContactCache
		 * @path <API Root>/Contacts/Contact/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearContactCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "Contact", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all contact image calls.
		 * @param {@link cef.admin.api.ClearContactImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearContactImageCache
		 * @path <API Root>/Contacts/ContactImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearContactImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "ContactImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all contact image type calls.
		 * @param {@link cef.admin.api.ClearContactImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearContactImageTypeCache
		 * @path <API Root>/Contacts/ContactImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearContactImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "ContactImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all contact type calls.
		 * @param {@link cef.admin.api.ClearContactTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearContactTypeCache
		 * @path <API Root>/Contacts/ContactType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearContactTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "ContactType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all profanity filter calls.
		 * @param {@link cef.admin.api.ClearProfanityFilterCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProfanityFilterCache
		 * @path <API Root>/Contacts/ProfanityFilter/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProfanityFilterCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "ProfanityFilter", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all referral code calls.
		 * @param {@link cef.admin.api.ClearReferralCodeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearReferralCodeCache
		 * @path <API Root>/Contacts/ReferralCode/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearReferralCodeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "ReferralCode", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all referral code status calls.
		 * @param {@link cef.admin.api.ClearReferralCodeStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearReferralCodeStatusCache
		 * @path <API Root>/Contacts/ReferralCodeStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearReferralCodeStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all referral code type calls.
		 * @param {@link cef.admin.api.ClearReferralCodeTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearReferralCodeTypeCache
		 * @path <API Root>/Contacts/ReferralCodeType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearReferralCodeTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "ReferralCodeType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user calls.
		 * @param {@link cef.admin.api.ClearUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserCache
		 * @path <API Root>/Contacts/User/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "User", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user file calls.
		 * @param {@link cef.admin.api.ClearUserFileCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserFileCache
		 * @path <API Root>/Contacts/UserFile/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserFileCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "UserFile", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user image calls.
		 * @param {@link cef.admin.api.ClearUserImageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserImageCache
		 * @path <API Root>/Contacts/UserImage/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserImageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "UserImage", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user image type calls.
		 * @param {@link cef.admin.api.ClearUserImageTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserImageTypeCache
		 * @path <API Root>/Contacts/UserImageType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserImageTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "UserImageType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user online status calls.
		 * @param {@link cef.admin.api.ClearUserOnlineStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserOnlineStatusCache
		 * @path <API Root>/Contacts/UserOnlineStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserOnlineStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user product type calls.
		 * @param {@link cef.admin.api.ClearUserProductTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserProductTypeCache
		 * @path <API Root>/Contacts/UserProductType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserProductTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "UserProductType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user status calls.
		 * @param {@link cef.admin.api.ClearUserStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserStatusCache
		 * @path <API Root>/Contacts/UserStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "UserStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all user type calls.
		 * @param {@link cef.admin.api.ClearUserTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearUserTypeCache
		 * @path <API Root>/Contacts/UserType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearUserTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Contacts", "UserType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new contact.
		 * @param {@link cef.admin.api.CreateContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateContact
		 * @path <API Root>/Contacts/Contact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateContact = (routeParams?: CreateContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "Contact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new contact image.
		 * @param {@link cef.admin.api.CreateContactImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateContactImage
		 * @path <API Root>/Contacts/ContactImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateContactImage = (routeParams?: CreateContactImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ContactImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new contact image type.
		 * @param {@link cef.admin.api.CreateContactImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateContactImageType
		 * @path <API Root>/Contacts/ContactImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateContactImageType = (routeParams?: CreateContactImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ContactImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new contact type.
		 * @param {@link cef.admin.api.CreateContactTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateContactType
		 * @path <API Root>/Contacts/ContactType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateContactType = (routeParams?: CreateContactTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ContactType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new profanity filter.
		 * @param {@link cef.admin.api.CreateProfanityFilterDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProfanityFilter
		 * @path <API Root>/Contacts/ProfanityFilter/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProfanityFilter = (routeParams?: CreateProfanityFilterDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ProfanityFilter", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new referral code.
		 * @param {@link cef.admin.api.CreateReferralCodeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateReferralCode
		 * @path <API Root>/Contacts/ReferralCode/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateReferralCode = (routeParams?: CreateReferralCodeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ReferralCode", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new referral code status.
		 * @param {@link cef.admin.api.CreateReferralCodeStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateReferralCodeStatus
		 * @path <API Root>/Contacts/ReferralCodeStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateReferralCodeStatus = (routeParams?: CreateReferralCodeStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new referral code type.
		 * @param {@link cef.admin.api.CreateReferralCodeTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateReferralCodeType
		 * @path <API Root>/Contacts/ReferralCodeType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateReferralCodeType = (routeParams?: CreateReferralCodeTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ReferralCodeType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user.
		 * @param {@link cef.admin.api.CreateUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUser
		 * @path <API Root>/Contacts/User/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUser = (routeParams?: CreateUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "User", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user file.
		 * @param {@link cef.admin.api.CreateUserFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserFile
		 * @path <API Root>/Contacts/UserFile/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserFile = (routeParams?: CreateUserFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserFile", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user image.
		 * @param {@link cef.admin.api.CreateUserImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserImage
		 * @path <API Root>/Contacts/UserImage/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserImage = (routeParams?: CreateUserImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserImage", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user image type.
		 * @param {@link cef.admin.api.CreateUserImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserImageType
		 * @path <API Root>/Contacts/UserImageType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserImageType = (routeParams?: CreateUserImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserImageType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user online status.
		 * @param {@link cef.admin.api.CreateUserOnlineStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserOnlineStatus
		 * @path <API Root>/Contacts/UserOnlineStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserOnlineStatus = (routeParams?: CreateUserOnlineStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user product type.
		 * @param {@link cef.admin.api.CreateUserProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserProductType
		 * @path <API Root>/Contacts/UserProductType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserProductType = (routeParams?: CreateUserProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserProductType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user status.
		 * @param {@link cef.admin.api.CreateUserStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserStatus
		 * @path <API Root>/Contacts/UserStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserStatus = (routeParams?: CreateUserStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new user type.
		 * @param {@link cef.admin.api.CreateUserTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserType
		 * @path <API Root>/Contacts/UserType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUserType = (routeParams?: CreateUserTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific contact from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateContactByID
		 * @path <API Root>/Contacts/Contact/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "Contact", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific contact image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateContactImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateContactImageByID
		 * @path <API Root>/Contacts/ContactImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateContactImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific contact image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateContactImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateContactImageTypeByID
		 * @path <API Root>/Contacts/ContactImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateContactImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific contact type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateContactTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateContactTypeByID
		 * @path <API Root>/Contacts/ContactType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateContactTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific profanity filter from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProfanityFilterByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProfanityFilterByID
		 * @path <API Root>/Contacts/ProfanityFilter/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProfanityFilterByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ProfanityFilter", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific referral code from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateReferralCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateReferralCodeByID
		 * @path <API Root>/Contacts/ReferralCode/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateReferralCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCode", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific referral code status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateReferralCodeStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateReferralCodeStatusByID
		 * @path <API Root>/Contacts/ReferralCodeStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateReferralCodeStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific referral code type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateReferralCodeTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateReferralCodeTypeByID
		 * @path <API Root>/Contacts/ReferralCodeType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateReferralCodeTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCodeType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserByID
		 * @path <API Root>/Contacts/User/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "User", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user file from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserFileByID
		 * @path <API Root>/Contacts/UserFile/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserFile", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user image from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserImageByID
		 * @path <API Root>/Contacts/UserImage/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserImage", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user image type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserImageTypeByID
		 * @path <API Root>/Contacts/UserImageType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserImageType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user online status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserOnlineStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserOnlineStatusByID
		 * @path <API Root>/Contacts/UserOnlineStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserOnlineStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user product type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserProductTypeByID
		 * @path <API Root>/Contacts/UserProductType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserProductType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserStatusByID
		 * @path <API Root>/Contacts/UserStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific user type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateUserTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateUserTypeByID
		 * @path <API Root>/Contacts/UserType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateUserTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific contact from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteContactByID
		 * @path <API Root>/Contacts/Contact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "Contact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific contact image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteContactImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteContactImageByID
		 * @path <API Root>/Contacts/ContactImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteContactImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific contact image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteContactImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteContactImageTypeByID
		 * @path <API Root>/Contacts/ContactImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteContactImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific contact type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteContactTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteContactTypeByID
		 * @path <API Root>/Contacts/ContactType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteContactTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific profanity filter from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProfanityFilterByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProfanityFilterByID
		 * @path <API Root>/Contacts/ProfanityFilter/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProfanityFilterByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ProfanityFilter", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific referral code from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteReferralCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteReferralCodeByID
		 * @path <API Root>/Contacts/ReferralCode/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteReferralCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCode", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific referral code status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteReferralCodeStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteReferralCodeStatusByID
		 * @path <API Root>/Contacts/ReferralCodeStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteReferralCodeStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific referral code type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteReferralCodeTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteReferralCodeTypeByID
		 * @path <API Root>/Contacts/ReferralCodeType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteReferralCodeTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCodeType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserByID
		 * @path <API Root>/Contacts/User/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "User", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user file from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserFileByID
		 * @path <API Root>/Contacts/UserFile/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserFile", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user image from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserImageByID
		 * @path <API Root>/Contacts/UserImage/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserImage", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user image type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserImageTypeByID
		 * @path <API Root>/Contacts/UserImageType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserImageType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user online status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserOnlineStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserOnlineStatusByID
		 * @path <API Root>/Contacts/UserOnlineStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserOnlineStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user product type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserProductTypeByID
		 * @path <API Root>/Contacts/UserProductType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserProductType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserStatusByID
		 * @path <API Root>/Contacts/UserStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific user type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteUserTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteUserTypeByID
		 * @path <API Root>/Contacts/UserType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteUserTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactByID
		 * @path <API Root>/Contacts/Contact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactModel>}
		 * @public
		 */
		GetContactByID = (id: number) => this.$http<ContactModel>({
			url: [this.rootUrl, "Contacts", "Contact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific contact image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactImageByID
		 * @path <API Root>/Contacts/ContactImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactImageModel>}
		 * @public
		 */
		GetContactImageByID = (id: number) => this.$http<ContactImageModel>({
			url: [this.rootUrl, "Contacts", "ContactImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of contact images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactImages
		 * @path <API Root>/Contacts/ContactImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactImagePagedResults>}
		 * @public
		 */
		GetContactImages = (routeParams?: GetContactImagesDto) => this.$http<ContactImagePagedResults>({
			url: [this.rootUrl, "Contacts", "ContactImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific contact image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactImageTypeByID
		 * @path <API Root>/Contacts/ContactImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetContactImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Contacts", "ContactImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of contact image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactImageTypes
		 * @path <API Root>/Contacts/ContactImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactImageTypePagedResults>}
		 * @public
		 */
		GetContactImageTypes = (routeParams?: GetContactImageTypesDto) => this.$http<ContactImageTypePagedResults>({
			url: [this.rootUrl, "Contacts", "ContactImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of contacts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContacts
		 * @path <API Root>/Contacts/Contacts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactPagedResults>}
		 * @public
		 */
		GetContacts = (routeParams?: GetContactsDto) => this.$http<ContactPagedResults>({
			url: [this.rootUrl, "Contacts", "Contacts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific contact type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactTypeByID
		 * @path <API Root>/Contacts/ContactType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetContactTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Contacts", "ContactType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of contact types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactTypes
		 * @path <API Root>/Contacts/ContactTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactTypePagedResults>}
		 * @public
		 */
		GetContactTypes = (routeParams?: GetContactTypesDto) => this.$http<ContactTypePagedResults>({
			url: [this.rootUrl, "Contacts", "ContactTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the current user's details
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUser
		 * @path <API Root>/Contacts/CurrentUser
		 * @verb GET
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		GetCurrentUser = () => this.$http<UserModel>({
			url: [this.rootUrl, "Contacts", "CurrentUser"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the current user's Username. Note: this only returns the UserName in the UserModel, no additional data
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserName
		 * @path <API Root>/Contacts/CurrentUser/UserName
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.admin.Dictionary<any>>>}
		 * @public
		 */
		GetCurrentUserName = () => this.$http<CEFActionResponseT<cefalt.admin.Dictionary<any>>>({
			url: [this.rootUrl, "Contacts", "CurrentUser", "UserName"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific profanity filter
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProfanityFilterByID
		 * @path <API Root>/Contacts/ProfanityFilter/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProfanityFilterModel>}
		 * @public
		 */
		GetProfanityFilterByID = (id: number) => this.$http<ProfanityFilterModel>({
			url: [this.rootUrl, "Contacts", "ProfanityFilter", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of profanity filters
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProfanityFilters
		 * @path <API Root>/Contacts/ProfanityFilters
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProfanityFilterPagedResults>}
		 * @public
		 */
		GetProfanityFilters = (routeParams?: GetProfanityFiltersDto) => this.$http<ProfanityFilterPagedResults>({
			url: [this.rootUrl, "Contacts", "ProfanityFilters"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific referral code
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReferralCodeByID
		 * @path <API Root>/Contacts/ReferralCode/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ReferralCodeModel>}
		 * @public
		 */
		GetReferralCodeByID = (id: number) => this.$http<ReferralCodeModel>({
			url: [this.rootUrl, "Contacts", "ReferralCode", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of referral codes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReferralCodes
		 * @path <API Root>/Contacts/ReferralCodes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ReferralCodePagedResults>}
		 * @public
		 */
		GetReferralCodes = (routeParams?: GetReferralCodesDto) => this.$http<ReferralCodePagedResults>({
			url: [this.rootUrl, "Contacts", "ReferralCodes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific referral code status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReferralCodeStatusByID
		 * @path <API Root>/Contacts/ReferralCodeStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetReferralCodeStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of referral code statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReferralCodeStatuses
		 * @path <API Root>/Contacts/ReferralCodeStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ReferralCodeStatusPagedResults>}
		 * @public
		 */
		GetReferralCodeStatuses = (routeParams?: GetReferralCodeStatusesDto) => this.$http<ReferralCodeStatusPagedResults>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific referral code type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReferralCodeTypeByID
		 * @path <API Root>/Contacts/ReferralCodeType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetReferralCodeTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Contacts", "ReferralCodeType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of referral code types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetReferralCodeTypes
		 * @path <API Root>/Contacts/ReferralCodeTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ReferralCodeTypePagedResults>}
		 * @public
		 */
		GetReferralCodeTypes = (routeParams?: GetReferralCodeTypesDto) => this.$http<ReferralCodeTypePagedResults>({
			url: [this.rootUrl, "Contacts", "ReferralCodeTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserByID
		 * @path <API Root>/Contacts/User/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		GetUserByID = (id: number) => this.$http<UserModel>({
			url: [this.rootUrl, "Contacts", "User", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific user by the custom key
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserByKey
		 * @path <API Root>/Contacts/User/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		GetUserByKey = (key: string) => this.$http<UserModel>({
			url: [this.rootUrl, "Contacts", "User", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific user file
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserFileByID
		 * @path <API Root>/Contacts/UserFile/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserFileModel>}
		 * @public
		 */
		GetUserFileByID = (id: number) => this.$http<UserFileModel>({
			url: [this.rootUrl, "Contacts", "UserFile", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user files
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserFiles
		 * @path <API Root>/Contacts/UserFiles
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserFilePagedResults>}
		 * @public
		 */
		GetUserFiles = (routeParams?: GetUserFilesDto) => this.$http<UserFilePagedResults>({
			url: [this.rootUrl, "Contacts", "UserFiles"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserImageByID
		 * @path <API Root>/Contacts/UserImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserImageModel>}
		 * @public
		 */
		GetUserImageByID = (id: number) => this.$http<UserImageModel>({
			url: [this.rootUrl, "Contacts", "UserImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserImages
		 * @path <API Root>/Contacts/UserImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserImagePagedResults>}
		 * @public
		 */
		GetUserImages = (routeParams?: GetUserImagesDto) => this.$http<UserImagePagedResults>({
			url: [this.rootUrl, "Contacts", "UserImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user image type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserImageTypeByID
		 * @path <API Root>/Contacts/UserImageType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetUserImageTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Contacts", "UserImageType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserImageTypes
		 * @path <API Root>/Contacts/UserImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserImageTypePagedResults>}
		 * @public
		 */
		GetUserImageTypes = (routeParams?: GetUserImageTypesDto) => this.$http<UserImageTypePagedResults>({
			url: [this.rootUrl, "Contacts", "UserImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user online status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserOnlineStatusByID
		 * @path <API Root>/Contacts/UserOnlineStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetUserOnlineStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user online statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserOnlineStatuses
		 * @path <API Root>/Contacts/UserOnlineStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserOnlineStatusPagedResults>}
		 * @public
		 */
		GetUserOnlineStatuses = (routeParams?: GetUserOnlineStatusesDto) => this.$http<UserOnlineStatusPagedResults>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user product type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserProductTypeByID
		 * @path <API Root>/Contacts/UserProductType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserProductTypeModel>}
		 * @public
		 */
		GetUserProductTypeByID = (id: number) => this.$http<UserProductTypeModel>({
			url: [this.rootUrl, "Contacts", "UserProductType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user product types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserProductTypes
		 * @path <API Root>/Contacts/UserProductTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserProductTypePagedResults>}
		 * @public
		 */
		GetUserProductTypes = (routeParams?: GetUserProductTypesDto) => this.$http<UserProductTypePagedResults>({
			url: [this.rootUrl, "Contacts", "UserProductTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUsers
		 * @path <API Root>/Contacts/Users
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserPagedResults>}
		 * @public
		 */
		GetUsers = (routeParams?: GetUsersDto) => this.$http<UserPagedResults>({
			url: [this.rootUrl, "Contacts", "Users"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserStatusByID
		 * @path <API Root>/Contacts/UserStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetUserStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Contacts", "UserStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserStatuses
		 * @path <API Root>/Contacts/UserStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserStatusPagedResults>}
		 * @public
		 */
		GetUserStatuses = (routeParams?: GetUserStatusesDto) => this.$http<UserStatusPagedResults>({
			url: [this.rootUrl, "Contacts", "UserStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific user type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserTypeByID
		 * @path <API Root>/Contacts/UserType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetUserTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Contacts", "UserType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserTypes
		 * @path <API Root>/Contacts/UserTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserTypePagedResults>}
		 * @public
		 */
		GetUserTypes = (routeParams?: GetUserTypesDto) => this.$http<UserTypePagedResults>({
			url: [this.rootUrl, "Contacts", "UserTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific contact from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateContactByID
		 * @path <API Root>/Contacts/Contact/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "Contact", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific contact image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateContactImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateContactImageByID
		 * @path <API Root>/Contacts/ContactImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateContactImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific contact image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateContactImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateContactImageTypeByID
		 * @path <API Root>/Contacts/ContactImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateContactImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific contact type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateContactTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateContactTypeByID
		 * @path <API Root>/Contacts/ContactType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateContactTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ContactType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific profanity filter from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProfanityFilterByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProfanityFilterByID
		 * @path <API Root>/Contacts/ProfanityFilter/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProfanityFilterByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ProfanityFilter", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific referral code from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateReferralCodeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateReferralCodeByID
		 * @path <API Root>/Contacts/ReferralCode/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateReferralCodeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCode", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific referral code status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateReferralCodeStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateReferralCodeStatusByID
		 * @path <API Root>/Contacts/ReferralCodeStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateReferralCodeStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific referral code type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateReferralCodeTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateReferralCodeTypeByID
		 * @path <API Root>/Contacts/ReferralCodeType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateReferralCodeTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "ReferralCodeType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserByID
		 * @path <API Root>/Contacts/User/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "User", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user file from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserFileByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserFileByID
		 * @path <API Root>/Contacts/UserFile/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserFileByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserFile", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user image from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserImageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserImageByID
		 * @path <API Root>/Contacts/UserImage/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserImageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserImage", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user image type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserImageTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserImageTypeByID
		 * @path <API Root>/Contacts/UserImageType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserImageTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserImageType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user online status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserOnlineStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserOnlineStatusByID
		 * @path <API Root>/Contacts/UserOnlineStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserOnlineStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user product type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserProductTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserProductTypeByID
		 * @path <API Root>/Contacts/UserProductType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserProductTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserProductType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserStatusByID
		 * @path <API Root>/Contacts/UserStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific user type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateUserTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateUserTypeByID
		 * @path <API Root>/Contacts/UserType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateUserTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "UserType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing contact.
		 * @param {@link cef.admin.api.UpdateContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateContact
		 * @path <API Root>/Contacts/Contact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateContact = (routeParams?: UpdateContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "Contact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing contact image.
		 * @param {@link cef.admin.api.UpdateContactImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateContactImage
		 * @path <API Root>/Contacts/ContactImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateContactImage = (routeParams?: UpdateContactImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ContactImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing contact image type.
		 * @param {@link cef.admin.api.UpdateContactImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateContactImageType
		 * @path <API Root>/Contacts/ContactImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateContactImageType = (routeParams?: UpdateContactImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ContactImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing contact type.
		 * @param {@link cef.admin.api.UpdateContactTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateContactType
		 * @path <API Root>/Contacts/ContactType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateContactType = (routeParams?: UpdateContactTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ContactType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing profanity filter.
		 * @param {@link cef.admin.api.UpdateProfanityFilterDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProfanityFilter
		 * @path <API Root>/Contacts/ProfanityFilter/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProfanityFilter = (routeParams?: UpdateProfanityFilterDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ProfanityFilter", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing referral code.
		 * @param {@link cef.admin.api.UpdateReferralCodeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateReferralCode
		 * @path <API Root>/Contacts/ReferralCode/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateReferralCode = (routeParams?: UpdateReferralCodeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ReferralCode", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing referral code status.
		 * @param {@link cef.admin.api.UpdateReferralCodeStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateReferralCodeStatus
		 * @path <API Root>/Contacts/ReferralCodeStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateReferralCodeStatus = (routeParams?: UpdateReferralCodeStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ReferralCodeStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing referral code type.
		 * @param {@link cef.admin.api.UpdateReferralCodeTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateReferralCodeType
		 * @path <API Root>/Contacts/ReferralCodeType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateReferralCodeType = (routeParams?: UpdateReferralCodeTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "ReferralCodeType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user.
		 * @param {@link cef.admin.api.UpdateUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUser
		 * @path <API Root>/Contacts/User/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUser = (routeParams?: UpdateUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "User", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user file.
		 * @param {@link cef.admin.api.UpdateUserFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserFile
		 * @path <API Root>/Contacts/UserFile/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserFile = (routeParams?: UpdateUserFileDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserFile", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user image.
		 * @param {@link cef.admin.api.UpdateUserImageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserImage
		 * @path <API Root>/Contacts/UserImage/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserImage = (routeParams?: UpdateUserImageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserImage", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user image type.
		 * @param {@link cef.admin.api.UpdateUserImageTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserImageType
		 * @path <API Root>/Contacts/UserImageType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserImageType = (routeParams?: UpdateUserImageTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserImageType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user online status.
		 * @param {@link cef.admin.api.UpdateUserOnlineStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserOnlineStatus
		 * @path <API Root>/Contacts/UserOnlineStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserOnlineStatus = (routeParams?: UpdateUserOnlineStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user product type.
		 * @param {@link cef.admin.api.UpdateUserProductTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserProductType
		 * @path <API Root>/Contacts/UserProductType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserProductType = (routeParams?: UpdateUserProductTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserProductType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user status.
		 * @param {@link cef.admin.api.UpdateUserStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserStatus
		 * @path <API Root>/Contacts/UserStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserStatus = (routeParams?: UpdateUserStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing user type.
		 * @param {@link cef.admin.api.UpdateUserTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateUserType
		 * @path <API Root>/Contacts/UserType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateUserType = (routeParams?: UpdateUserTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "UserType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to create a new or update an existing contact (as needed).
		 * @param {@link cef.admin.api.UpsertContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertContact
		 * @path <API Root>/Contacts/Contact/Upsert
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpsertContact = (routeParams?: UpsertContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "Contact", "Upsert"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
