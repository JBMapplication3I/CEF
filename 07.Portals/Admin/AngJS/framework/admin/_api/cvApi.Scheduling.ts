/**
 * @file framework/admin/_api/cvApi.Scheduling.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new appointment.
	 * @see {@link AppointmentModel}
	 * @public
	 */
	export interface CreateAppointmentDto extends AppointmentModel {
	}
	/**
	 * Use to create a new appointment status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateAppointmentStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new appointment type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateAppointmentTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new calendar.
	 * @see {@link CalendarModel}
	 * @public
	 */
	export interface CreateCalendarDto extends CalendarModel {
	}
	/**
	 * Use to create a new calendar appointment.
	 * @see {@link CalendarAppointmentModel}
	 * @public
	 */
	export interface CreateCalendarAppointmentDto extends CalendarAppointmentModel {
	}
	/**
	 * Use to get a list of appointments
	 * @see {@link AppointmentSearchModel}
	 * @public
	 */
	export interface GetAppointmentsDto extends AppointmentSearchModel {
	}
	/**
	 * Use to get a list of appointment statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetAppointmentStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of appointment types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAppointmentTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of calendar appointments
	 * @see {@link CalendarAppointmentSearchModel}
	 * @public
	 */
	export interface GetCalendarAppointmentsDto extends CalendarAppointmentSearchModel {
	}
	/**
	 * Use to get a list of calendars
	 * @see {@link CalendarSearchModel}
	 * @public
	 */
	export interface GetCalendarsDto extends CalendarSearchModel {
	}
	/**
	 * Use to update an existing appointment.
	 * @see {@link AppointmentModel}
	 * @public
	 */
	export interface UpdateAppointmentDto extends AppointmentModel {
	}
	/**
	 * Use to update an existing appointment status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateAppointmentStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing appointment type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateAppointmentTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing calendar.
	 * @see {@link CalendarModel}
	 * @public
	 */
	export interface UpdateCalendarDto extends CalendarModel {
	}
	/**
	 * Use to update an existing calendar appointment.
	 * @see {@link CalendarAppointmentModel}
	 * @public
	 */
	export interface UpdateCalendarAppointmentDto extends CalendarAppointmentModel {
	}

	export class Scheduling extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all appointment calls.
		 * @param {@link cef.admin.api.ClearAppointmentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppointmentCache
		 * @path <API Root>/Scheduling/Appointment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppointmentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scheduling", "Appointment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all appointment status calls.
		 * @param {@link cef.admin.api.ClearAppointmentStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppointmentStatusCache
		 * @path <API Root>/Scheduling/AppointmentStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppointmentStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all appointment type calls.
		 * @param {@link cef.admin.api.ClearAppointmentTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearAppointmentTypeCache
		 * @path <API Root>/Scheduling/AppointmentType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearAppointmentTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scheduling", "AppointmentType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar appointment calls.
		 * @param {@link cef.admin.api.ClearCalendarAppointmentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarAppointmentCache
		 * @path <API Root>/Scheduling/CalendarAppointment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarAppointmentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all calendar calls.
		 * @param {@link cef.admin.api.ClearCalendarCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCalendarCache
		 * @path <API Root>/Scheduling/Calendar/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearCalendarCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Scheduling", "Calendar", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new appointment.
		 * @param {@link cef.admin.api.CreateAppointmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppointment
		 * @path <API Root>/Scheduling/Appointment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppointment = (routeParams?: CreateAppointmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "Appointment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new appointment status.
		 * @param {@link cef.admin.api.CreateAppointmentStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppointmentStatus
		 * @path <API Root>/Scheduling/AppointmentStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppointmentStatus = (routeParams?: CreateAppointmentStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new appointment type.
		 * @param {@link cef.admin.api.CreateAppointmentTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAppointmentType
		 * @path <API Root>/Scheduling/AppointmentType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAppointmentType = (routeParams?: CreateAppointmentTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "AppointmentType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar.
		 * @param {@link cef.admin.api.CreateCalendarDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendar
		 * @path <API Root>/Scheduling/Calendar/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendar = (routeParams?: CreateCalendarDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "Calendar", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new calendar appointment.
		 * @param {@link cef.admin.api.CreateCalendarAppointmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCalendarAppointment
		 * @path <API Root>/Scheduling/CalendarAppointment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateCalendarAppointment = (routeParams?: CreateCalendarAppointmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific appointment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppointmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppointmentByID
		 * @path <API Root>/Scheduling/Appointment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppointmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "Appointment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific appointment status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppointmentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppointmentStatusByID
		 * @path <API Root>/Scheduling/AppointmentStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppointmentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific appointment type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateAppointmentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateAppointmentTypeByID
		 * @path <API Root>/Scheduling/AppointmentType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateAppointmentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "AppointmentType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar appointment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarAppointmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarAppointmentByID
		 * @path <API Root>/Scheduling/CalendarAppointment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarAppointmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific calendar from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateCalendarByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateCalendarByID
		 * @path <API Root>/Scheduling/Calendar/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateCalendarByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "Calendar", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific appointment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppointmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppointmentByID
		 * @path <API Root>/Scheduling/Appointment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppointmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "Appointment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific appointment status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppointmentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppointmentStatusByID
		 * @path <API Root>/Scheduling/AppointmentStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppointmentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific appointment type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteAppointmentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAppointmentTypeByID
		 * @path <API Root>/Scheduling/AppointmentType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAppointmentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "AppointmentType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar appointment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarAppointmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarAppointmentByID
		 * @path <API Root>/Scheduling/CalendarAppointment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarAppointmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific calendar from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteCalendarByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCalendarByID
		 * @path <API Root>/Scheduling/Calendar/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteCalendarByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "Calendar", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific appointment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppointmentByID
		 * @path <API Root>/Scheduling/Appointment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppointmentModel>}
		 * @public
		 */
		GetAppointmentByID = (id: number) => this.$http<AppointmentModel>({
			url: [this.rootUrl, "Scheduling", "Appointment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of appointments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppointments
		 * @path <API Root>/Scheduling/Appointments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppointmentPagedResults>}
		 * @public
		 */
		GetAppointments = (routeParams?: GetAppointmentsDto) => this.$http<AppointmentPagedResults>({
			url: [this.rootUrl, "Scheduling", "Appointments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific appointment status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppointmentStatusByID
		 * @path <API Root>/Scheduling/AppointmentStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetAppointmentStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of appointment statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppointmentStatuses
		 * @path <API Root>/Scheduling/AppointmentStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppointmentStatusPagedResults>}
		 * @public
		 */
		GetAppointmentStatuses = (routeParams?: GetAppointmentStatusesDto) => this.$http<AppointmentStatusPagedResults>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific appointment type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppointmentTypeByID
		 * @path <API Root>/Scheduling/AppointmentType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetAppointmentTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Scheduling", "AppointmentType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of appointment types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAppointmentTypes
		 * @path <API Root>/Scheduling/AppointmentTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AppointmentTypePagedResults>}
		 * @public
		 */
		GetAppointmentTypes = (routeParams?: GetAppointmentTypesDto) => this.$http<AppointmentTypePagedResults>({
			url: [this.rootUrl, "Scheduling", "AppointmentTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar appointment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarAppointmentByID
		 * @path <API Root>/Scheduling/CalendarAppointment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarAppointmentModel>}
		 * @public
		 */
		GetCalendarAppointmentByID = (id: number) => this.$http<CalendarAppointmentModel>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendar appointments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarAppointments
		 * @path <API Root>/Scheduling/CalendarAppointments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarAppointmentPagedResults>}
		 * @public
		 */
		GetCalendarAppointments = (routeParams?: GetCalendarAppointmentsDto) => this.$http<CalendarAppointmentPagedResults>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific calendar
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendarByID
		 * @path <API Root>/Scheduling/Calendar/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarModel>}
		 * @public
		 */
		GetCalendarByID = (id: number) => this.$http<CalendarModel>({
			url: [this.rootUrl, "Scheduling", "Calendar", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of calendars
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCalendars
		 * @path <API Root>/Scheduling/Calendars
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CalendarPagedResults>}
		 * @public
		 */
		GetCalendars = (routeParams?: GetCalendarsDto) => this.$http<CalendarPagedResults>({
			url: [this.rootUrl, "Scheduling", "Calendars"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific appointment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppointmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppointmentByID
		 * @path <API Root>/Scheduling/Appointment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppointmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "Appointment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific appointment status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppointmentStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppointmentStatusByID
		 * @path <API Root>/Scheduling/AppointmentStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppointmentStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific appointment type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateAppointmentTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateAppointmentTypeByID
		 * @path <API Root>/Scheduling/AppointmentType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateAppointmentTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "AppointmentType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar appointment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarAppointmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarAppointmentByID
		 * @path <API Root>/Scheduling/CalendarAppointment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarAppointmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific calendar from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateCalendarByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateCalendarByID
		 * @path <API Root>/Scheduling/Calendar/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateCalendarByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Scheduling", "Calendar", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing appointment.
		 * @param {@link cef.admin.api.UpdateAppointmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppointment
		 * @path <API Root>/Scheduling/Appointment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppointment = (routeParams?: UpdateAppointmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "Appointment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing appointment status.
		 * @param {@link cef.admin.api.UpdateAppointmentStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppointmentStatus
		 * @path <API Root>/Scheduling/AppointmentStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppointmentStatus = (routeParams?: UpdateAppointmentStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "AppointmentStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing appointment type.
		 * @param {@link cef.admin.api.UpdateAppointmentTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAppointmentType
		 * @path <API Root>/Scheduling/AppointmentType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAppointmentType = (routeParams?: UpdateAppointmentTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "AppointmentType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar.
		 * @param {@link cef.admin.api.UpdateCalendarDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendar
		 * @path <API Root>/Scheduling/Calendar/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendar = (routeParams?: UpdateCalendarDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "Calendar", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing calendar appointment.
		 * @param {@link cef.admin.api.UpdateCalendarAppointmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCalendarAppointment
		 * @path <API Root>/Scheduling/CalendarAppointment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateCalendarAppointment = (routeParams?: UpdateCalendarAppointmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Scheduling", "CalendarAppointment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
