/**
 * @file framework/admin/_api/cvApi.Messaging.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new conversation.
	 * @see {@link ConversationModel}
	 * @public
	 */
	export interface CreateConversationDto extends ConversationModel {
	}
	/**
	 * Use to create a new conversation user.
	 * @see {@link ConversationUserModel}
	 * @public
	 */
	export interface CreateConversationUserDto extends ConversationUserModel {
	}
	/**
	 * Use to create a new email queue.
	 * @see {@link EmailQueueModel}
	 * @public
	 */
	export interface CreateEmailQueueDto extends EmailQueueModel {
	}
	/**
	 * Use to create a new email queue attachment.
	 * @see {@link EmailQueueAttachmentModel}
	 * @public
	 */
	export interface CreateEmailQueueAttachmentDto extends EmailQueueAttachmentModel {
	}
	/**
	 * Use to create a new email status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateEmailStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new email template.
	 * @see {@link EmailTemplateModel}
	 * @public
	 */
	export interface CreateEmailTemplateDto extends EmailTemplateModel {
	}
	/**
	 * Use to create a new email type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateEmailTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new message.
	 * @see {@link MessageModel}
	 * @public
	 */
	export interface CreateMessageDto extends MessageModel {
	}
	/**
	 * Use to create a new message attachment.
	 * @see {@link MessageAttachmentModel}
	 * @public
	 */
	export interface CreateMessageAttachmentDto extends MessageAttachmentModel {
	}
	/**
	 * Use to create a new message recipient.
	 * @see {@link MessageRecipientModel}
	 * @public
	 */
	export interface CreateMessageRecipientDto extends MessageRecipientModel {
	}
	/**
	 * Use to create a new product notification.
	 * @see {@link ProductNotificationModel}
	 * @public
	 */
	export interface CreateProductNotificationDto extends ProductNotificationModel {
	}
	/**
	 * Use to get a list of conversations
	 * @see {@link ConversationSearchModel}
	 * @public
	 */
	export interface GetConversationsDto extends ConversationSearchModel {
	}
	/**
	 * Use to get a list of conversation users
	 * @see {@link ConversationUserSearchModel}
	 * @public
	 */
	export interface GetConversationUsersDto extends ConversationUserSearchModel {
	}
	/**
	 * Use to get a list of email queue attachments
	 * @see {@link EmailQueueAttachmentSearchModel}
	 * @public
	 */
	export interface GetEmailQueueAttachmentsDto extends EmailQueueAttachmentSearchModel {
	}
	/**
	 * Use to get a list of email queues
	 * @see {@link EmailQueueSearchModel}
	 * @public
	 */
	export interface GetEmailQueuesDto extends EmailQueueSearchModel {
	}
	/**
	 * Use to get a list of email statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetEmailStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of email templates
	 * @see {@link EmailTemplateSearchModel}
	 * @public
	 */
	export interface GetEmailTemplatesDto extends EmailTemplateSearchModel {
	}
	/**
	 * Use to get a list of email types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetEmailTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of message attachments
	 * @see {@link MessageAttachmentSearchModel}
	 * @public
	 */
	export interface GetMessageAttachmentsDto extends MessageAttachmentSearchModel {
	}
	/**
	 * Use to get a list of message recipients
	 * @see {@link MessageRecipientSearchModel}
	 * @public
	 */
	export interface GetMessageRecipientsDto extends MessageRecipientSearchModel {
	}
	/**
	 * Use to get a list of messages
	 * @see {@link MessageSearchModel}
	 * @public
	 */
	export interface GetMessagesDto extends MessageSearchModel {
	}
	/**
	 * Use to get a list of product notifications
	 * @see {@link ProductNotificationSearchModel}
	 * @public
	 */
	export interface GetProductNotificationsDto extends ProductNotificationSearchModel {
	}
	/**
	 * Use to update an existing conversation.
	 * @see {@link ConversationModel}
	 * @public
	 */
	export interface UpdateConversationDto extends ConversationModel {
	}
	/**
	 * Use to update an existing conversation user.
	 * @see {@link ConversationUserModel}
	 * @public
	 */
	export interface UpdateConversationUserDto extends ConversationUserModel {
	}
	/**
	 * Use to update an existing email queue.
	 * @see {@link EmailQueueModel}
	 * @public
	 */
	export interface UpdateEmailQueueDto extends EmailQueueModel {
	}
	/**
	 * Use to update an existing email queue attachment.
	 * @see {@link EmailQueueAttachmentModel}
	 * @public
	 */
	export interface UpdateEmailQueueAttachmentDto extends EmailQueueAttachmentModel {
	}
	/**
	 * Use to update an existing email status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateEmailStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing email template.
	 * @see {@link EmailTemplateModel}
	 * @public
	 */
	export interface UpdateEmailTemplateDto extends EmailTemplateModel {
	}
	/**
	 * Use to update an existing email type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateEmailTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing message.
	 * @see {@link MessageModel}
	 * @public
	 */
	export interface UpdateMessageDto extends MessageModel {
	}
	/**
	 * Use to update an existing message attachment.
	 * @see {@link MessageAttachmentModel}
	 * @public
	 */
	export interface UpdateMessageAttachmentDto extends MessageAttachmentModel {
	}
	/**
	 * Use to update an existing message recipient.
	 * @see {@link MessageRecipientModel}
	 * @public
	 */
	export interface UpdateMessageRecipientDto extends MessageRecipientModel {
	}
	/**
	 * Use to update an existing product notification.
	 * @see {@link ProductNotificationModel}
	 * @public
	 */
	export interface UpdateProductNotificationDto extends ProductNotificationModel {
	}

	export class Messaging extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all conversation calls.
		 * @param {@link cef.admin.api.ClearConversationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearConversationCache
		 * @path <API Root>/Messaging/Conversation/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearConversationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "Conversation", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all conversation user calls.
		 * @param {@link cef.admin.api.ClearConversationUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearConversationUserCache
		 * @path <API Root>/Messaging/ConversationUser/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearConversationUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all email queue attachment calls.
		 * @param {@link cef.admin.api.ClearEmailQueueAttachmentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEmailQueueAttachmentCache
		 * @path <API Root>/Messaging/EmailQueueAttachment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEmailQueueAttachmentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all email queue calls.
		 * @param {@link cef.admin.api.ClearEmailQueueCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEmailQueueCache
		 * @path <API Root>/Messaging/EmailQueue/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEmailQueueCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "EmailQueue", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all email status calls.
		 * @param {@link cef.admin.api.ClearEmailStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEmailStatusCache
		 * @path <API Root>/Messaging/EmailStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEmailStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "EmailStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all email template calls.
		 * @param {@link cef.admin.api.ClearEmailTemplateCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEmailTemplateCache
		 * @path <API Root>/Messaging/EmailTemplate/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEmailTemplateCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "EmailTemplate", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all email type calls.
		 * @param {@link cef.admin.api.ClearEmailTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearEmailTypeCache
		 * @path <API Root>/Messaging/EmailType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearEmailTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "EmailType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all message attachment calls.
		 * @param {@link cef.admin.api.ClearMessageAttachmentCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMessageAttachmentCache
		 * @path <API Root>/Messaging/MessageAttachment/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMessageAttachmentCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "MessageAttachment", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all message calls.
		 * @param {@link cef.admin.api.ClearMessageCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMessageCache
		 * @path <API Root>/Messaging/Message/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMessageCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "Message", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all message recipient calls.
		 * @param {@link cef.admin.api.ClearMessageRecipientCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearMessageRecipientCache
		 * @path <API Root>/Messaging/MessageRecipient/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearMessageRecipientCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "MessageRecipient", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all product notification calls.
		 * @param {@link cef.admin.api.ClearProductNotificationCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearProductNotificationCache
		 * @path <API Root>/Messaging/ProductNotification/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearProductNotificationCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Messaging", "ProductNotification", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new conversation.
		 * @param {@link cef.admin.api.CreateConversationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateConversation
		 * @path <API Root>/Messaging/Conversation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateConversation = (routeParams?: CreateConversationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "Conversation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new conversation user.
		 * @param {@link cef.admin.api.CreateConversationUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateConversationUser
		 * @path <API Root>/Messaging/ConversationUser/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateConversationUser = (routeParams?: CreateConversationUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new email queue.
		 * @param {@link cef.admin.api.CreateEmailQueueDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEmailQueue
		 * @path <API Root>/Messaging/EmailQueue/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEmailQueue = (routeParams?: CreateEmailQueueDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailQueue", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new email queue attachment.
		 * @param {@link cef.admin.api.CreateEmailQueueAttachmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEmailQueueAttachment
		 * @path <API Root>/Messaging/EmailQueueAttachment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEmailQueueAttachment = (routeParams?: CreateEmailQueueAttachmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new email status.
		 * @param {@link cef.admin.api.CreateEmailStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEmailStatus
		 * @path <API Root>/Messaging/EmailStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEmailStatus = (routeParams?: CreateEmailStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new email template.
		 * @param {@link cef.admin.api.CreateEmailTemplateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEmailTemplate
		 * @path <API Root>/Messaging/EmailTemplate/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEmailTemplate = (routeParams?: CreateEmailTemplateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailTemplate", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new email type.
		 * @param {@link cef.admin.api.CreateEmailTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateEmailType
		 * @path <API Root>/Messaging/EmailType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateEmailType = (routeParams?: CreateEmailTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new message.
		 * @param {@link cef.admin.api.CreateMessageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMessage
		 * @path <API Root>/Messaging/Message/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMessage = (routeParams?: CreateMessageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "Message", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new message attachment.
		 * @param {@link cef.admin.api.CreateMessageAttachmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMessageAttachment
		 * @path <API Root>/Messaging/MessageAttachment/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMessageAttachment = (routeParams?: CreateMessageAttachmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "MessageAttachment", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new message recipient.
		 * @param {@link cef.admin.api.CreateMessageRecipientDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMessageRecipient
		 * @path <API Root>/Messaging/MessageRecipient/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMessageRecipient = (routeParams?: CreateMessageRecipientDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "MessageRecipient", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new product notification.
		 * @param {@link cef.admin.api.CreateProductNotificationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateProductNotification
		 * @path <API Root>/Messaging/ProductNotification/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateProductNotification = (routeParams?: CreateProductNotificationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "ProductNotification", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific conversation from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateConversationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateConversationByID
		 * @path <API Root>/Messaging/Conversation/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateConversationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Conversation", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific conversation user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateConversationUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateConversationUserByID
		 * @path <API Root>/Messaging/ConversationUser/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateConversationUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific email queue attachment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEmailQueueAttachmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEmailQueueAttachmentByID
		 * @path <API Root>/Messaging/EmailQueueAttachment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEmailQueueAttachmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific email queue from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEmailQueueByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEmailQueueByID
		 * @path <API Root>/Messaging/EmailQueue/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEmailQueueByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailQueue", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific email status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEmailStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEmailStatusByID
		 * @path <API Root>/Messaging/EmailStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEmailStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific email template from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEmailTemplateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEmailTemplateByID
		 * @path <API Root>/Messaging/EmailTemplate/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEmailTemplateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailTemplate", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific email type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateEmailTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateEmailTypeByID
		 * @path <API Root>/Messaging/EmailType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateEmailTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific message attachment from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMessageAttachmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMessageAttachmentByID
		 * @path <API Root>/Messaging/MessageAttachment/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMessageAttachmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "MessageAttachment", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific message from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMessageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMessageByID
		 * @path <API Root>/Messaging/Message/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMessageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Message", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific message recipient from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateMessageRecipientByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMessageRecipientByID
		 * @path <API Root>/Messaging/MessageRecipient/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMessageRecipientByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "MessageRecipient", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific product notification from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateProductNotificationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateProductNotificationByID
		 * @path <API Root>/Messaging/ProductNotification/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateProductNotificationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "ProductNotification", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific conversation from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteConversationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteConversationByID
		 * @path <API Root>/Messaging/Conversation/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteConversationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Conversation", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific conversation user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteConversationUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteConversationUserByID
		 * @path <API Root>/Messaging/ConversationUser/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteConversationUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific email queue attachment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEmailQueueAttachmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEmailQueueAttachmentByID
		 * @path <API Root>/Messaging/EmailQueueAttachment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEmailQueueAttachmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific email queue from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEmailQueueByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEmailQueueByID
		 * @path <API Root>/Messaging/EmailQueue/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEmailQueueByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailQueue", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific email status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEmailStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEmailStatusByID
		 * @path <API Root>/Messaging/EmailStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEmailStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific email template from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEmailTemplateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEmailTemplateByID
		 * @path <API Root>/Messaging/EmailTemplate/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEmailTemplateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailTemplate", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific email type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteEmailTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteEmailTypeByID
		 * @path <API Root>/Messaging/EmailType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteEmailTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific message attachment from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMessageAttachmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMessageAttachmentByID
		 * @path <API Root>/Messaging/MessageAttachment/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMessageAttachmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "MessageAttachment", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific message from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMessageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMessageByID
		 * @path <API Root>/Messaging/Message/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMessageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Message", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific message recipient from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteMessageRecipientByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteMessageRecipientByID
		 * @path <API Root>/Messaging/MessageRecipient/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteMessageRecipientByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "MessageRecipient", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific product notification from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteProductNotificationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteProductNotificationByID
		 * @path <API Root>/Messaging/ProductNotification/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteProductNotificationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "ProductNotification", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific conversation
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetConversationByID
		 * @path <API Root>/Messaging/Conversation/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ConversationModel>}
		 * @public
		 */
		GetConversationByID = (id: number) => this.$http<ConversationModel>({
			url: [this.rootUrl, "Messaging", "Conversation", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of conversations
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetConversations
		 * @path <API Root>/Messaging/Conversations
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ConversationPagedResults>}
		 * @public
		 */
		GetConversations = (routeParams?: GetConversationsDto) => this.$http<ConversationPagedResults>({
			url: [this.rootUrl, "Messaging", "Conversations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific conversation user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetConversationUserByID
		 * @path <API Root>/Messaging/ConversationUser/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ConversationUserModel>}
		 * @public
		 */
		GetConversationUserByID = (id: number) => this.$http<ConversationUserModel>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of conversation users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetConversationUsers
		 * @path <API Root>/Messaging/ConversationUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ConversationUserPagedResults>}
		 * @public
		 */
		GetConversationUsers = (routeParams?: GetConversationUsersDto) => this.$http<ConversationUserPagedResults>({
			url: [this.rootUrl, "Messaging", "ConversationUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific email queue attachment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailQueueAttachmentByID
		 * @path <API Root>/Messaging/EmailQueueAttachment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailQueueAttachmentModel>}
		 * @public
		 */
		GetEmailQueueAttachmentByID = (id: number) => this.$http<EmailQueueAttachmentModel>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of email queue attachments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailQueueAttachments
		 * @path <API Root>/Messaging/EmailQueueAttachments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailQueueAttachmentPagedResults>}
		 * @public
		 */
		GetEmailQueueAttachments = (routeParams?: GetEmailQueueAttachmentsDto) => this.$http<EmailQueueAttachmentPagedResults>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific email queue
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailQueueByID
		 * @path <API Root>/Messaging/EmailQueue/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailQueueModel>}
		 * @public
		 */
		GetEmailQueueByID = (id: number) => this.$http<EmailQueueModel>({
			url: [this.rootUrl, "Messaging", "EmailQueue", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of email queues
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailQueues
		 * @path <API Root>/Messaging/EmailQueues
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailQueuePagedResults>}
		 * @public
		 */
		GetEmailQueues = (routeParams?: GetEmailQueuesDto) => this.$http<EmailQueuePagedResults>({
			url: [this.rootUrl, "Messaging", "EmailQueues"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific email status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailStatusByID
		 * @path <API Root>/Messaging/EmailStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetEmailStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Messaging", "EmailStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of email statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailStatuses
		 * @path <API Root>/Messaging/EmailStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailStatusPagedResults>}
		 * @public
		 */
		GetEmailStatuses = (routeParams?: GetEmailStatusesDto) => this.$http<EmailStatusPagedResults>({
			url: [this.rootUrl, "Messaging", "EmailStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific email template
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailTemplateByID
		 * @path <API Root>/Messaging/EmailTemplate/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailTemplateModel>}
		 * @public
		 */
		GetEmailTemplateByID = (id: number) => this.$http<EmailTemplateModel>({
			url: [this.rootUrl, "Messaging", "EmailTemplate", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of email templates
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailTemplates
		 * @path <API Root>/Messaging/EmailTemplates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailTemplatePagedResults>}
		 * @public
		 */
		GetEmailTemplates = (routeParams?: GetEmailTemplatesDto) => this.$http<EmailTemplatePagedResults>({
			url: [this.rootUrl, "Messaging", "EmailTemplates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific email type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailTypeByID
		 * @path <API Root>/Messaging/EmailType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetEmailTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Messaging", "EmailType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of email types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetEmailTypes
		 * @path <API Root>/Messaging/EmailTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<EmailTypePagedResults>}
		 * @public
		 */
		GetEmailTypes = (routeParams?: GetEmailTypesDto) => this.$http<EmailTypePagedResults>({
			url: [this.rootUrl, "Messaging", "EmailTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific message attachment
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessageAttachmentByID
		 * @path <API Root>/Messaging/MessageAttachment/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MessageAttachmentModel>}
		 * @public
		 */
		GetMessageAttachmentByID = (id: number) => this.$http<MessageAttachmentModel>({
			url: [this.rootUrl, "Messaging", "MessageAttachment", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of message attachments
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessageAttachments
		 * @path <API Root>/Messaging/MessageAttachments
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MessageAttachmentPagedResults>}
		 * @public
		 */
		GetMessageAttachments = (routeParams?: GetMessageAttachmentsDto) => this.$http<MessageAttachmentPagedResults>({
			url: [this.rootUrl, "Messaging", "MessageAttachments"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific message
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessageByID
		 * @path <API Root>/Messaging/Message/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MessageModel>}
		 * @public
		 */
		GetMessageByID = (id: number) => this.$http<MessageModel>({
			url: [this.rootUrl, "Messaging", "Message", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific message recipient
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessageRecipientByID
		 * @path <API Root>/Messaging/MessageRecipient/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MessageRecipientModel>}
		 * @public
		 */
		GetMessageRecipientByID = (id: number) => this.$http<MessageRecipientModel>({
			url: [this.rootUrl, "Messaging", "MessageRecipient", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of message recipients
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessageRecipients
		 * @path <API Root>/Messaging/MessageRecipients
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MessageRecipientPagedResults>}
		 * @public
		 */
		GetMessageRecipients = (routeParams?: GetMessageRecipientsDto) => this.$http<MessageRecipientPagedResults>({
			url: [this.rootUrl, "Messaging", "MessageRecipients"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of messages
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessages
		 * @path <API Root>/Messaging/Messages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MessagePagedResults>}
		 * @public
		 */
		GetMessages = (routeParams?: GetMessagesDto) => this.$http<MessagePagedResults>({
			url: [this.rootUrl, "Messaging", "Messages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product notification
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductNotificationByID
		 * @path <API Root>/Messaging/ProductNotification/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductNotificationModel>}
		 * @public
		 */
		GetProductNotificationByID = (id: number) => this.$http<ProductNotificationModel>({
			url: [this.rootUrl, "Messaging", "ProductNotification", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product notifications
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductNotifications
		 * @path <API Root>/Messaging/ProductNotifications
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductNotificationPagedResults>}
		 * @public
		 */
		GetProductNotifications = (routeParams?: GetProductNotificationsDto) => this.$http<ProductNotificationPagedResults>({
			url: [this.rootUrl, "Messaging", "ProductNotifications"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific conversation from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateConversationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateConversationByID
		 * @path <API Root>/Messaging/Conversation/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateConversationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Conversation", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific conversation user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateConversationUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateConversationUserByID
		 * @path <API Root>/Messaging/ConversationUser/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateConversationUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific email queue attachment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEmailQueueAttachmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEmailQueueAttachmentByID
		 * @path <API Root>/Messaging/EmailQueueAttachment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEmailQueueAttachmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific email queue from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEmailQueueByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEmailQueueByID
		 * @path <API Root>/Messaging/EmailQueue/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEmailQueueByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailQueue", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific email status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEmailStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEmailStatusByID
		 * @path <API Root>/Messaging/EmailStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEmailStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific email template from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEmailTemplateByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEmailTemplateByID
		 * @path <API Root>/Messaging/EmailTemplate/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEmailTemplateByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailTemplate", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific email type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateEmailTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateEmailTypeByID
		 * @path <API Root>/Messaging/EmailType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateEmailTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "EmailType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific message attachment from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMessageAttachmentByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMessageAttachmentByID
		 * @path <API Root>/Messaging/MessageAttachment/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMessageAttachmentByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "MessageAttachment", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific message from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMessageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMessageByID
		 * @path <API Root>/Messaging/Message/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMessageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Message", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific message recipient from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateMessageRecipientByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateMessageRecipientByID
		 * @path <API Root>/Messaging/MessageRecipient/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateMessageRecipientByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "MessageRecipient", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific product notification from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateProductNotificationByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateProductNotificationByID
		 * @path <API Root>/Messaging/ProductNotification/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateProductNotificationByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "ProductNotification", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing conversation.
		 * @param {@link cef.admin.api.UpdateConversationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateConversation
		 * @path <API Root>/Messaging/Conversation/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateConversation = (routeParams?: UpdateConversationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "Conversation", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing conversation user.
		 * @param {@link cef.admin.api.UpdateConversationUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateConversationUser
		 * @path <API Root>/Messaging/ConversationUser/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateConversationUser = (routeParams?: UpdateConversationUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing email queue.
		 * @param {@link cef.admin.api.UpdateEmailQueueDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEmailQueue
		 * @path <API Root>/Messaging/EmailQueue/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEmailQueue = (routeParams?: UpdateEmailQueueDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailQueue", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing email queue attachment.
		 * @param {@link cef.admin.api.UpdateEmailQueueAttachmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEmailQueueAttachment
		 * @path <API Root>/Messaging/EmailQueueAttachment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEmailQueueAttachment = (routeParams?: UpdateEmailQueueAttachmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailQueueAttachment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing email status.
		 * @param {@link cef.admin.api.UpdateEmailStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEmailStatus
		 * @path <API Root>/Messaging/EmailStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEmailStatus = (routeParams?: UpdateEmailStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing email template.
		 * @param {@link cef.admin.api.UpdateEmailTemplateDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEmailTemplate
		 * @path <API Root>/Messaging/EmailTemplate/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEmailTemplate = (routeParams?: UpdateEmailTemplateDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailTemplate", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing email type.
		 * @param {@link cef.admin.api.UpdateEmailTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateEmailType
		 * @path <API Root>/Messaging/EmailType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateEmailType = (routeParams?: UpdateEmailTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "EmailType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing message.
		 * @param {@link cef.admin.api.UpdateMessageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMessage
		 * @path <API Root>/Messaging/Message/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMessage = (routeParams?: UpdateMessageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "Message", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing message attachment.
		 * @param {@link cef.admin.api.UpdateMessageAttachmentDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMessageAttachment
		 * @path <API Root>/Messaging/MessageAttachment/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMessageAttachment = (routeParams?: UpdateMessageAttachmentDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "MessageAttachment", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing message recipient.
		 * @param {@link cef.admin.api.UpdateMessageRecipientDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMessageRecipient
		 * @path <API Root>/Messaging/MessageRecipient/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMessageRecipient = (routeParams?: UpdateMessageRecipientDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "MessageRecipient", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing product notification.
		 * @param {@link cef.admin.api.UpdateProductNotificationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateProductNotification
		 * @path <API Root>/Messaging/ProductNotification/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateProductNotification = (routeParams?: UpdateProductNotificationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "ProductNotification", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
