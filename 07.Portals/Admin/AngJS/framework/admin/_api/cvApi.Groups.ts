/**
 * @file framework/admin/_api/cvApi.Groups.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Admin/AngJS/framework/admin/_api/
 */
module cef.admin.api {

	/**
	 * Use to create a new group.
	 * @see {@link GroupModel}
	 * @public
	 */
	export interface CreateGroupDto extends GroupModel {
	}
	/**
	 * Use to create a new group status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface CreateGroupStatusDto extends StatusModel {
	}
	/**
	 * Use to create a new group type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface CreateGroupTypeDto extends TypeModel {
	}
	/**
	 * Use to create a new group user.
	 * @see {@link GroupUserModel}
	 * @public
	 */
	export interface CreateGroupUserDto extends GroupUserModel {
	}
	/**
	 * Use to get a list of groups
	 * @see {@link GroupSearchModel}
	 * @public
	 */
	export interface GetGroupsDto extends GroupSearchModel {
	}
	/**
	 * Use to get a list of group statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetGroupStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of group types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetGroupTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of group users
	 * @see {@link GroupUserSearchModel}
	 * @public
	 */
	export interface GetGroupUsersDto extends GroupUserSearchModel {
	}
	/**
	 * Use to update an existing group.
	 * @see {@link GroupModel}
	 * @public
	 */
	export interface UpdateGroupDto extends GroupModel {
	}
	/**
	 * Use to update an existing group status.
	 * @see {@link StatusModel}
	 * @public
	 */
	export interface UpdateGroupStatusDto extends StatusModel {
	}
	/**
	 * Use to update an existing group type.
	 * @see {@link TypeModel}
	 * @public
	 */
	export interface UpdateGroupTypeDto extends TypeModel {
	}
	/**
	 * Use to update an existing group user.
	 * @see {@link GroupUserModel}
	 * @public
	 */
	export interface UpdateGroupUserDto extends GroupUserModel {
	}

	export class Groups extends ServiceStackRoute {
		/**
		 * Empties the server-side data cache for all group calls.
		 * @param {@link cef.admin.api.ClearGroupCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearGroupCache
		 * @path <API Root>/Groups/Group/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearGroupCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Groups", "Group", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all group status calls.
		 * @param {@link cef.admin.api.ClearGroupStatusCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearGroupStatusCache
		 * @path <API Root>/Groups/GroupStatus/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearGroupStatusCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Groups", "GroupStatus", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all group type calls.
		 * @param {@link cef.admin.api.ClearGroupTypeCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearGroupTypeCache
		 * @path <API Root>/Groups/GroupType/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearGroupTypeCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Groups", "GroupType", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Empties the server-side data cache for all group user calls.
		 * @param {@link cef.admin.api.ClearGroupUserCacheDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearGroupUserCache
		 * @path <API Root>/Groups/GroupUser/ClearCache
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		ClearGroupUserCache = () => this.$http<boolean>({
			url: [this.rootUrl, "Groups", "GroupUser", "ClearCache"].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to create a new group.
		 * @param {@link cef.admin.api.CreateGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateGroup
		 * @path <API Root>/Groups/Group/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateGroup = (routeParams?: CreateGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "Group", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new group status.
		 * @param {@link cef.admin.api.CreateGroupStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateGroupStatus
		 * @path <API Root>/Groups/GroupStatus/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateGroupStatus = (routeParams?: CreateGroupStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "GroupStatus", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new group type.
		 * @param {@link cef.admin.api.CreateGroupTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateGroupType
		 * @path <API Root>/Groups/GroupType/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateGroupType = (routeParams?: CreateGroupTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "GroupType", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new group user.
		 * @param {@link cef.admin.api.CreateGroupUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateGroupUser
		 * @path <API Root>/Groups/GroupUser/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateGroupUser = (routeParams?: CreateGroupUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "GroupUser", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific group from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateGroupByID
		 * @path <API Root>/Groups/Group/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "Group", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific group status from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateGroupStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateGroupStatusByID
		 * @path <API Root>/Groups/GroupStatus/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateGroupStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupStatus", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific group type from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateGroupTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateGroupTypeByID
		 * @path <API Root>/Groups/GroupType/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateGroupTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupType", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Deactivate a specific group user from the system [Soft-Delete]
		 * @param {@link cef.admin.api.DeactivateGroupUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateGroupUserByID
		 * @path <API Root>/Groups/GroupUser/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateGroupUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupUser", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Removes a specific group from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteGroupByID
		 * @path <API Root>/Groups/Group/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "Group", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific group status from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteGroupStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteGroupStatusByID
		 * @path <API Root>/Groups/GroupStatus/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteGroupStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupStatus", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific group type from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteGroupTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteGroupTypeByID
		 * @path <API Root>/Groups/GroupType/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteGroupTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupType", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Removes a specific group user from the system [Hard-Delete]
		 * @param {@link cef.admin.api.DeleteGroupUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteGroupUserByID
		 * @path <API Root>/Groups/GroupUser/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteGroupUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupUser", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a specific group
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroupByID
		 * @path <API Root>/Groups/Group/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GroupModel>}
		 * @public
		 */
		GetGroupByID = (id: number) => this.$http<GroupModel>({
			url: [this.rootUrl, "Groups", "Group", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of groups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroups
		 * @path <API Root>/Groups/Groups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GroupPagedResults>}
		 * @public
		 */
		GetGroups = (routeParams?: GetGroupsDto) => this.$http<GroupPagedResults>({
			url: [this.rootUrl, "Groups", "Groups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific group status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroupStatusByID
		 * @path <API Root>/Groups/GroupStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetGroupStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Groups", "GroupStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of group statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroupStatuses
		 * @path <API Root>/Groups/GroupStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GroupStatusPagedResults>}
		 * @public
		 */
		GetGroupStatuses = (routeParams?: GetGroupStatusesDto) => this.$http<GroupStatusPagedResults>({
			url: [this.rootUrl, "Groups", "GroupStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific group type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroupTypeByID
		 * @path <API Root>/Groups/GroupType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetGroupTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Groups", "GroupType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of group types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroupTypes
		 * @path <API Root>/Groups/GroupTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GroupTypePagedResults>}
		 * @public
		 */
		GetGroupTypes = (routeParams?: GetGroupTypesDto) => this.$http<GroupTypePagedResults>({
			url: [this.rootUrl, "Groups", "GroupTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific group user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroupUserByID
		 * @path <API Root>/Groups/GroupUser/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GroupUserModel>}
		 * @public
		 */
		GetGroupUserByID = (id: number) => this.$http<GroupUserModel>({
			url: [this.rootUrl, "Groups", "GroupUser", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of group users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGroupUsers
		 * @path <API Root>/Groups/GroupUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GroupUserPagedResults>}
		 * @public
		 */
		GetGroupUsers = (routeParams?: GetGroupUsersDto) => this.$http<GroupUserPagedResults>({
			url: [this.rootUrl, "Groups", "GroupUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Reactivate a specific group from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateGroupByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateGroupByID
		 * @path <API Root>/Groups/Group/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateGroupByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "Group", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific group status from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateGroupStatusByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateGroupStatusByID
		 * @path <API Root>/Groups/GroupStatus/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateGroupStatusByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupStatus", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific group type from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateGroupTypeByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateGroupTypeByID
		 * @path <API Root>/Groups/GroupType/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateGroupTypeByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupType", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Reactivate a specific group user from the system [Restore from Soft-Delete]
		 * @param {@link cef.admin.api.ReactivateGroupUserByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReactivateGroupUserByID
		 * @path <API Root>/Groups/GroupUser/Reactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ReactivateGroupUserByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Groups", "GroupUser", "Reactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to update an existing group.
		 * @param {@link cef.admin.api.UpdateGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateGroup
		 * @path <API Root>/Groups/Group/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateGroup = (routeParams?: UpdateGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "Group", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing group status.
		 * @param {@link cef.admin.api.UpdateGroupStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateGroupStatus
		 * @path <API Root>/Groups/GroupStatus/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateGroupStatus = (routeParams?: UpdateGroupStatusDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "GroupStatus", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing group type.
		 * @param {@link cef.admin.api.UpdateGroupTypeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateGroupType
		 * @path <API Root>/Groups/GroupType/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateGroupType = (routeParams?: UpdateGroupTypeDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "GroupType", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to update an existing group user.
		 * @param {@link cef.admin.api.UpdateGroupUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateGroupUser
		 * @path <API Root>/Groups/GroupUser/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateGroupUser = (routeParams?: UpdateGroupUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Groups", "GroupUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
