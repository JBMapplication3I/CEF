<#@ template debug="true" hostspecific="true" language="C#" #><#@
output extension=".tstxt" #><#@
assembly name="System.Core" #><#@
import namespace="System.Linq" #><#@
import namespace="System.Text" #><#@
import namespace="System.Collections.Generic" #><#@
assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll" #><#@
assembly name="$(SolutionDir)packages\ServiceStack.Interfaces.4.5.14\lib\portable-wp80+sl5+net45+win8+wpa81+monotouch+monoandroid+xamarin.ios10\ServiceStack.Interfaces.dll" #><#@
assembly name="$(SolutionDir)packages\ServiceStack.Text.Signed.4.5.14\lib\net45\ServiceStack.Text.dll" #><#@
assembly name="$(SolutionDir)00.Core\00.Clarity.Ecommerce.RegistryLoader\bin\Debug\net472\Clarity.Ecommerce.RegistryLoader.dll" #><#@
assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll" #><#@
assembly name="$(SolutionDir)02.Interfaces\02.Clarity.Ecommerce.Interfaces.Models\bin\Debug\net472\Clarity.Ecommerce.Interfaces.Models.dll" #><#@
assembly name="$(SolutionDir)03.ModelsAndMapping\03.Clarity.Ecommerce.Models\bin\Debug\net472\Clarity.Ecommerce.Models.dll" #><#@
assembly name="$(SolutionDir)06.Services\06.Clarity.Ecommerce.Service\bin\Clarity.Ecommerce.Service.dll" #><#@
assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll" #><#@
assembly name="$(SolutionDir)11.T4\11.T4.ServiceStack.CodeGenerator.TypeScript\bin\Debug\net472\ServiceStack.CodeGenerator.TypeScript.dll" #><#@
import namespace="System.Collections.Generic" #><#@
import namespace="System.ComponentModel.DataAnnotations" #><#@
import namespace="System.ComponentModel.DataAnnotations.Schema" #><#@
import namespace="System.Data.Entity" #><#@
import namespace="System.Linq" #><#@
import namespace="System.Reflection" #><#@
import namespace="System.Runtime.InteropServices" #><#@
import namespace="Clarity.Ecommerce.DataModel" #><#@
import namespace="Clarity.Ecommerce.Interfaces.DataModel" #><#@
import namespace="CodeGenerator" #><#@
import namespace="ServiceStack" #><#@
import namespace="ServiceStack.CodeGenerator.TypeScript" #><#@
include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude" #><#
var routeTypes = AppDomain.CurrentDomain.GetAssemblies()
.Where(a => a.FullName.StartsWith("Clarity.Ecommerce.Service"))
.SelectMany(a => a.GetTypes()
.Where(t => t.CustomAttributes.Any(attr => attr.AttributeType == typeof(RouteAttribute))));
TypescriptCodeGenerator cg = new TypescriptCodeGenerator(
"ClarityEcomService",
new string[] { "Clarity.Ecommerce.DataModel" },
"admin");
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
.Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
.SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
.OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
.GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
#>/**
* @file framework/admin/controls/system/clearCacheButtonsWidget.ts
* @author Copyright(c) 2018-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
* @desc NOTE: This file is generated via the clearCacheButtons.tt T4 in the UI Project
*/
module cef.admin {
class ClearCacheButtonsWidgetController extends core.TemplatedControllerBase {
// Properties
// <None>
// Functions
<#
foreach (IGrouping<string, Type> group in tableClasses)
{
foreach (Type table in group)
{
if (table.Name.Contains("Hangfire")
|| table.Name == "Report"
|| table.Name == "RoleUser"
|| table.Name == "RolePermission"
|| table.Name == "Permission"
|| table.Name == "UserClaim"
|| table.Name == "AccountUserRole"
|| table.Name == "UserRole"
|| table.Name == "UserLogin"
|| table.Name == "UserSupportRequest")
{
continue;
}
var pluralized = HelpFunctions.PluralizeName(table.Name); #>
clear<#= pluralized #>Cache(): void { this.clearAnySpecificCache("<#= pluralized #>", this.cvApi.<#= HelpFunctions.LowerFirstCharacter(group.Key == "System" ? "Structure" : group.Key) #>.Clear<#= table.Name #>Cache); }
<#  }
} #>
private clearAnySpecificCache(name: string, promise: () => ng.IHttpPromise<boolean>): void {
this.setRunning(`Clearing ${name}...`);
promise().then(response => {
if (!response || !response.data) {
this.finishRunning(false, `There was an issue clearing ${name}.`);
return;
}
this.finishRunning();
}, result => this.finishRunning(true, result)).catch(reason => this.finishRunning(true, reason));
}
// Events
// <None>
// Constructor
constructor(
private readonly $translate: ng.translate.ITranslateService,
private readonly $q: ng.IQService,
protected readonly cefConfig: core.CefConfig,
private readonly cvApi: api.ICEFAPI,
private readonly cvMessageModalFactory: modals.IMessageModalFactory) {
super(cefConfig);
}
}
adminApp.directive("clearCacheButtonsWidget", ($filter: ng.IFilterService): ng.IDirective => ({
restrict: "EA",
templateUrl: $filter("corsLink")("/framework/admin/controls/system/widgets/clearCacheButtonsWidget.html", "ui"),
controller: ClearCacheButtonsWidgetController,
controllerAs: "clearCacheButtonsWidgetCtrl"
}));
}
<# SaveOutput("clearCacheButtonsWidget", "ts", true); #>
<!-- NOTE: This file is generated via the clearCacheButtons.tt T4 in the UI Project -->
<div class="row">
<#
foreach (IGrouping<string, Type> group in tableClasses)
{ #>
<div class="col-sm-12"><h3><#= group.Key #></h3></div>
<div class="col-sm-12 mb-3">
<#
foreach (Type table in group)
{
if (table.Name.Contains("Hangfire")
|| table.Name == "Report"
|| table.Name == "RoleUser"
|| table.Name == "RolePermission"
|| table.Name == "Permission"
|| table.Name == "UserClaim"
|| table.Name == "AccountUserRole"
|| table.Name == "UserRole"
|| table.Name == "UserLogin")
{
continue;
}
var pluralized = HelpFunctions.PluralizeName(table.Name);
var split = HelpFunctions.SplitCamelCase(pluralized);
if (split != "Sales Groups" && split.Contains("Sales "))
{
split = split.Replace("Sales ", "");
}
#>
<button type="button" class="btn btn-info"
id="btn<#= pluralized #>" name="btn<#= pluralized #>"
title="Clear <#= split #> Cache" aria-label="Clear <#= split #> Cache"
ng-disabled="clearCacheButtonsWidgetCtrl.viewState.running"
ng-click="clearCacheButtonsWidgetCtrl.clear<#= pluralized #>Cache()">
<#= split #>
</button>
<#  } #>
</div>
<#}#>
</div>
<# SaveOutput("clearCacheButtonsWidget", "html", true); #>