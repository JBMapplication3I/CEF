<#@ assembly name="System.Core" #><#@
assembly name="System.Web.dll" #><#@
import namespace="System" #><#@
import namespace="System.Collections.Generic" #><#@
import namespace="System.Linq" #><#@
import namespace="System.Runtime.InteropServices" #><#@
import namespace="System.Reflection" #><#@
import namespace="ServiceStack" #><#@
import namespace="ServiceStack.CodeGenerator.TypeScript" #><#+
void GenerateDetailsTypeScriptFile(Type theType, string schema, TypescriptCodeGenerator generator)
{
var td = new TypeDeterminer(theType);
#>/**
* @file framework/admin/controls/types/<#= HelpFunctions.LowerFirstCharacter(theType.Name) #>.detail.ts
* @author Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
* @desc <#= HelpFunctions.PluralizeName(HelpFunctions.SplitCamelCase(theType.Name)).ToLower() #> detail/editor class
* @auto-generated This file was auto-generated by the T4 template types.tt in the UI project
*/
module cef.admin.controls.types {
class <#= theType.Name #>DetailController extends DetailBaseController<api.<#= HelpFunctions.SwapToModelType(theType.Name) #>Model> {
// Forced overrides
detailName = "<#= theType.Name.SplitCamelCase() #>";
// Collections
// <None>
// UI Data
// <None>
// Required Functions
loadNewRecord(): ng.IPromise<api.<#= HelpFunctions.SwapToModelType(theType.Name) #>Model> {
this.record = <api.<#= HelpFunctions.SwapToModelType(theType.Name) #>Model>{
// Base Properties
ID: null,
CustomKey: null,
Active: true,
CreatedDate: new Date(),
UpdatedDate: null,
JsonAttributes: null,
SerializableAttributes: new api.SerializableAttributesDictionary(),
Hash: null,
// NameableBase Properties
Name: null,
Description: null,
// Displayable Base Properties
DisplayName: null,
SortOrder: null,
TranslationKey: null,
<#+		if (td.IsIHaveAParentBase) { #>
// IHaveAParentBase Properties
ParentID: null,
Parent: null,
Children: null,
HasChildren: false,
<#+		} #>
// <#= theType.Name.SplitCamelCase() #> Specific Properties
<#+		foreach (PropertyInfo property in theType.GetProperties()
.Where(x => x.Name != "ID" && x.Name != "CustomKey" && x.Name != "CreatedDate" && x.Name != "UpdatedDate"
&& x.Name != "Active" && x.Name != "Hash" && x.Name != "JsonAttributes" && x.Name != "SerializableAttributes"
&& x.Name != "Name" && x.Name != "Description"
&& x.Name != "DisplayName" && x.Name != "SortOrder" && x.Name != "TranslationKey"
&& x.Name != "ParentID" && x.Name != "Parent" && x.Name != "Children" && x.Name != "HasChildren"))
{ #>
<#= property.Name #>: <#= generator.DetermineTsType(property.GetMethod.ReturnType) == "boolean" ? "false" : "null" #>,
<#+			} #>
};
return this.$q.resolve(this.record);
}
constructorPreAction(): ng.IPromise<void> {
this.detailName = "<#= theType.Name.SplitCamelCase() #>";
return this.$q.resolve();
}
loadRecordCall(id: number): ng.IHttpPromise<api.<#= HelpFunctions.SwapToModelType(theType.Name) #>Model> {
return this.cvApi.<#= HelpFunctions.LowerFirstCharacter(schema.Replace("System", "Structure")) #>.Get<#= theType.Name #>ByID(id);
}
createRecordCall(routeParams?: api.<#= HelpFunctions.SwapToModelType(theType.Name) #>Model): ng.IHttpPromise<api.CEFActionResponseT<number>> {
return this.cvApi.<#= HelpFunctions.LowerFirstCharacter(schema.Replace("System", "Structure")) #>.Create<#= theType.Name #>(routeParams);
}
updateRecordCall(routeParams?: api.<#= HelpFunctions.SwapToModelType(theType.Name) #>Model): ng.IHttpPromise<api.CEFActionResponseT<number>> {
return this.cvApi.<#= HelpFunctions.LowerFirstCharacter(schema.Replace("System", "Structure")) #>.Update<#= theType.Name #>(routeParams);
}
deactivateRecordCall(id: number): ng.IHttpPromise<api.CEFActionResponse> {
return this.cvApi.<#= HelpFunctions.LowerFirstCharacter(schema.Replace("System", "Structure")) #>.Deactivate<#= theType.Name #>ByID(id);
}
reactivateRecordCall(id: number): ng.IHttpPromise<api.CEFActionResponse> {
return this.cvApi.<#= HelpFunctions.LowerFirstCharacter(schema.Replace("System", "Structure")) #>.Reactivate<#= theType.Name #>ByID(id);
}
deleteRecordCall(id: number): ng.IHttpPromise<api.CEFActionResponse> {
return this.cvApi.<#= HelpFunctions.LowerFirstCharacter(schema.Replace("System", "Structure")) #>.Delete<#= theType.Name #>ByID(id);
}
// Supportive Functions
// <None>
// Constructor
constructor(
protected readonly $scope: ng.IScope,
protected readonly $translate: ng.translate.ITranslateService,
protected readonly $stateParams: ng.ui.IStateParamsService,
protected readonly $state: ng.ui.IStateService,
protected readonly $window: ng.IWindowService,
protected readonly $q: ng.IQService,
protected readonly cefConfig: core.CefConfig,
protected readonly cvApi: api.ICEFAPI,
protected readonly cvConfirmModalFactory: modals.IConfirmModalFactory,
protected readonly $filter: ng.IFilterService) {
super($scope, $q, $filter, $window, $state, $stateParams, $translate, cefConfig, cvApi, cvConfirmModalFactory);
}
}

adminApp.directive("<#= HelpFunctions.LowerFirstCharacter(theType.Name) #>Detail", ($filter: ng.IFilterService): ng.IDirective => ({
restrict: "A",
templateUrl: $filter("corsLink")("/framework/admin/controls/types/<#= HelpFunctions.LowerFirstCharacter(HelpFunctions.PluralizeName(theType.Name)) #>.detail.html", "ui"),
controller: <#= theType.Name #>DetailController,
controllerAs: "<#= HelpFunctions.LowerFirstCharacter(theType.Name) #>DetailCtrl",
bindToController: true
}));
}
<#+
} // End Function GenerateInterfaceFile #>