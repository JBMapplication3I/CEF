/**
 * @file _api/cvApi.Accounts.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	AccountContactModel,
	TypeSearchModel,
	AccountAssociationTypePagedResults,
	AccountSearchModel,
	AccountPagedResults,
	StatusSearchModel,
	AccountStatusPagedResults,
	AccountTypePagedResults,
	UserSearchModel,
	AccountModel,
	UserPagedResults,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponseT,
	CEFActionResponse,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Use to create a new account contact.
 * @see {@link AccountContactModel}
 * @public
 */
export interface CreateAccountContactDto extends AccountContactModel {
}

/**
 * Use to get a list of account association types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetAccountAssociationTypesDto extends TypeSearchModel {
}

/**
 * Use to get a list of accounts
 * @see {@link AccountSearchModel}
 * @public
 */
export interface GetAccountsDto extends AccountSearchModel {
}

/**
 * Get Accounts for the current account (as a local administrator)
 * @see {@link AccountSearchModel}
 * @public
 */
export interface GetAccountsForCurrentAccountDto extends AccountSearchModel {
}

/**
 * Use to get a list of account statuses
 * @see {@link StatusSearchModel}
 * @public
 */
export interface GetAccountStatusesDto extends StatusSearchModel {
}

/**
 * Use to get a list of account types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetAccountTypesDto extends TypeSearchModel {
}

/**
 * Get all User IDs for the current account (as a local administrator)
 * @see {@link UserSearchModel}
 * @public
 */
export interface GetAllUserIDsForCurrentAccountDto extends UserSearchModel {
}

/**
 * Get Users for the current account (as a local administrator)
 * @see {@link UserSearchModel}
 * @public
 */
export interface GetUsersForCurrentAccountDto extends UserSearchModel {
}

/**
 * Use to update an existing account contact.
 * @see {@link AccountContactModel}
 * @public
 */
export interface UpdateAccountContactDto extends AccountContactModel {
}

/**
 * Use to update the account associated to the user currently logged into the system
 * @see {@link AccountModel}
 * @public
 */
export interface UpdateCurrentAccountDto extends AccountModel {
}

export class Accounts {
	/**
	 * Use to create a new account contact.
	 * @param {@link cef.store.api.CreateAccountContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountContact
	 * @path <API Root>/Accounts/AccountContact/Create
	 * @verb POST
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	CreateAccountContact = (routeParams?: CreateAccountContactDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.post(["Accounts", "AccountContact", "Create"].join("/"), routeParams);

	/**
	 * Removes a specific account contact from the system [Hard-Delete]
	 * @param {@link cef.store.api.DeleteAccountContactByIDDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountContactByID
	 * @path <API Root>/Accounts/AccountContact/Delete/ID/{ID}
	 * @verb DELETE
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	DeleteAccountContactByID = (id: number): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Accounts", "AccountContact", "Delete", "ID", id].join("/"));

	/**
	 * Use to get a list of account association types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountAssociationTypes
	 * @path <API Root>/Accounts/AccountAssociationTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AccountAssociationTypePagedResults>}
	 * @public
	 */
	GetAccountAssociationTypes = (routeParams?: GetAccountAssociationTypesDto): IHttpPromise<AccountAssociationTypePagedResults> =>
		axios.get(["Accounts", "AccountAssociationTypes"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific account contact
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountContactByID
	 * @path <API Root>/Accounts/AccountContact/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AccountContactModel>}
	 * @public
	 */
	GetAccountContactByID = (id: number): IHttpPromise<AccountContactModel> =>
		axios.get(["Accounts", "AccountContact", "ID", id].join("/"));

	/**
	 * Use to get a list of accounts
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccounts
	 * @path <API Root>/Accounts/Accounts
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AccountPagedResults>}
	 * @public
	 */
	GetAccounts = (routeParams?: GetAccountsDto): IHttpPromise<AccountPagedResults> =>
		axios.get(["Accounts", "Accounts"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Get Accounts for the current account (as a local administrator)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountsForCurrentAccount
	 * @path <API Root>/Accounts/AccountsForCurrentAccount
	 * @verb GET
	 * @returns {ng.IHttpPromise<AccountPagedResults>}
	 * @public
	 */
	GetAccountsForCurrentAccount = (routeParams?: GetAccountsForCurrentAccountDto): IHttpPromise<AccountPagedResults> =>
		axios.get(["Accounts", "AccountsForCurrentAccount"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of account statuses
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountStatuses
	 * @path <API Root>/Accounts/AccountStatuses
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AccountStatusPagedResults>}
	 * @public
	 */
	GetAccountStatuses = (routeParams?: GetAccountStatusesDto): IHttpPromise<AccountStatusPagedResults> =>
		axios.get(["Accounts", "AccountStatuses"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of account types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountTypes
	 * @path <API Root>/Accounts/AccountTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AccountTypePagedResults>}
	 * @public
	 */
	GetAccountTypes = (routeParams?: GetAccountTypesDto): IHttpPromise<AccountTypePagedResults> =>
		axios.get(["Accounts", "AccountTypes"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Get all User IDs for the current account (as a local administrator)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAllUserIDsForCurrentAccount
	 * @path <API Root>/Accounts/AllUserIDsForCurrentAccount
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<number>>}
	 * @public
	 */
	GetAllUserIDsForCurrentAccount = (routeParams?: GetAllUserIDsForCurrentAccountDto): IHttpPromise<Array<number>> =>
		axios.get(["Accounts", "AllUserIDsForCurrentAccount"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Get account for the current user logged in
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccount
	 * @path <API Root>/Accounts/CurrentAccount
	 * @verb GET
	 * @returns {ng.IHttpPromise<AccountModel>}
	 * @public
	 */
	GetCurrentAccount = (): IHttpPromise<AccountModel> =>
		axios.get(["Accounts", "CurrentAccount"].join("/"));

	/**
	 * Get Users for the current account (as a local administrator)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUsersForCurrentAccount
	 * @path <API Root>/Accounts/UsersForCurrentAccount
	 * @verb GET
	 * @returns {ng.IHttpPromise<UserPagedResults>}
	 * @public
	 */
	GetUsersForCurrentAccount = (routeParams?: GetUsersForCurrentAccountDto): IHttpPromise<UserPagedResults> =>
		axios.get(["Accounts", "UsersForCurrentAccount"].join("/"),
		{
			params: routeParams
		});

	/**
	 * @param {@link cef.store.api.MarkAccountContactAsDefaultBillingDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsDefaultBilling
	 * @path <API Root>/Accounts/AccountContact/MarkAsDefaultBilling/ID/{ID}
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	MarkAccountContactAsDefaultBilling = (id: number): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Accounts", "AccountContact", "MarkAsDefaultBilling", "ID", id].join("/"));

	/**
	 * @param {@link cef.store.api.MarkAccountContactAsNeitherBillingNorShippingDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsNeitherBillingNorShipping
	 * @path <API Root>/Accounts/AccountContact/MarkAsNotBillingOrShipping/ID/{ID}
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	MarkAccountContactAsNeitherBillingNorShipping = (id: number): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Accounts", "AccountContact", "MarkAsNotBillingOrShipping", "ID", id].join("/"));

	/**
	 * @param {@link cef.store.api.MarkAccountContactAsPrimaryShippingDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsPrimaryShipping
	 * @path <API Root>/Accounts/AccountContact/MarkAsPrimaryShipping/ID/{ID}
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	MarkAccountContactAsPrimaryShipping = (id: number): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Accounts", "AccountContact", "MarkAsPrimaryShipping", "ID", id].join("/"));

	/**
	 * Use to update an existing account contact.
	 * @param {@link cef.store.api.UpdateAccountContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountContact
	 * @path <API Root>/Accounts/AccountContact/Update
	 * @verb PUT
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	UpdateAccountContact = (routeParams?: UpdateAccountContactDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.put(["Accounts", "AccountContact", "Update"].join("/"), routeParams);

	/**
	 * Use to update the account associated to the user currently logged into the system
	 * @param {@link cef.store.api.UpdateCurrentAccountDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrentAccount
	 * @path <API Root>/Accounts/CurrentAccount
	 * @verb PUT
	 * @returns {ng.IHttpPromise<AccountModel>}
	 * @public
	 */
	UpdateCurrentAccount = (routeParams?: UpdateCurrentAccountDto): IHttpPromise<AccountModel> =>
		axios.put(["Accounts", "CurrentAccount"].join("/"), routeParams);
}
