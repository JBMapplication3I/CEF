/**
 * @file _api/cvApi.Pricing.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	CalculatedPrice,
	PriceRuleModel,
	PricePointSearchModel,
	PricePointPagedResults,
	PriceRuleSearchModel,
	PriceRulePagedResults,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponseT,
	Dictionary,
	CEFActionResponse,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Calculate the prices for multiple products by IDs.
 * @public
 */
export interface CalculatePricesForProductsDto {
	ProductIDs: Array<number>;
}

/**
 * Use to create a new price rule.
 * @see {@link PriceRuleModel}
 * @public
 */
export interface CreatePriceRuleDto extends PriceRuleModel {
}

/**
 * Use to get a list of price points
 * @see {@link PricePointSearchModel}
 * @public
 */
export interface GetPricePointsDto extends PricePointSearchModel {
}

/**
 * Use to get a list of price rules
 * @see {@link PriceRuleSearchModel}
 * @public
 */
export interface GetPriceRulesDto extends PriceRuleSearchModel {
}

/**
 * Use to update an existing price rule.
 * @see {@link PriceRuleModel}
 * @public
 */
export interface UpdatePriceRuleDto extends PriceRuleModel {
}

export class Pricing {
	/**
	 * Calculate the price for a product by ID.
	 * @param {@link cef.store.api.CalculatePricesForProductDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CalculatePricesForProduct
	 * @path <API Root>/Pricing/Prices/ForProduct/{ProductID}/Quantity/{Quantity}
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<CalculatedPrice>>}
	 * @public
	 */
	CalculatePricesForProduct = (productID: number, quantity: number): IHttpPromise<CEFActionResponseT<CalculatedPrice>> =>
		axios.post(["Pricing", "Prices", "ForProduct", productID, "Quantity", quantity].join("/"));
	
	/**
	 * Calculate the prices for multiple products by IDs.
	 * @param {@link cef.store.api.CalculatePricesForProductsDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CalculatePricesForProducts
	 * @path <API Root>/Pricing/Prices/ForProducts
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<CalculatedPrice>>>}
	 * @public
	 */
	CalculatePricesForProducts = (routeParams: CalculatePricesForProductsDto): IHttpPromise<CEFActionResponseT<Dictionary<CalculatedPrice>>> =>
		axios.post(["Pricing", "Prices", "ForProducts"].join("/"), routeParams);
	/**
	 * Use to create a new price rule.
	 * @param {@link cef.store.api.CreatePriceRuleDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRule
	 * @path <API Root>/Pricing/PriceRule/Create
	 * @verb POST
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	CreatePriceRule = (routeParams?: CreatePriceRuleDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.post(["Pricing", "PriceRule", "Create"].join("/"), routeParams);
	/**
	 * Removes a specific price rule from the system [Hard-Delete]
	 * @param {@link cef.store.api.DeletePriceRuleByIDDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleByID
	 * @path <API Root>/Pricing/PriceRule/Delete/ID/{ID}
	 * @verb DELETE
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	DeletePriceRuleByID = (id: number): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Pricing", "PriceRule", "Delete", "ID", id].join("/"));
	
	/**
	 * Use to get a list of price points
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPricePoints
	 * @path <API Root>/Pricing/PricePoints
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<PricePointPagedResults>}
	 * @public
	 */
	GetPricePoints = (routeParams?: GetPricePointsDto): IHttpPromise<PricePointPagedResults> =>
		axios.get(["Pricing", "PricePoints"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to get a specific price rule
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleByID
	 * @path <API Root>/Pricing/PriceRule/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<PriceRuleModel>}
	 * @public
	 */
	GetPriceRuleByID = (id: number): IHttpPromise<PriceRuleModel> =>
		axios.get(["Pricing", "PriceRule", "ID", id].join("/"));
	
	/**
	 * Use to get a list of price rules
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRules
	 * @path <API Root>/Pricing/PriceRules
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<PriceRulePagedResults>}
	 * @public
	 */
	GetPriceRules = (routeParams?: GetPriceRulesDto): IHttpPromise<PriceRulePagedResults> =>
		axios.get(["Pricing", "PriceRules"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to update an existing price rule.
	 * @param {@link cef.store.api.UpdatePriceRuleDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRule
	 * @path <API Root>/Pricing/PriceRule/Update
	 * @verb PUT
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	UpdatePriceRule = (routeParams?: UpdatePriceRuleDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.put(["Pricing", "PriceRule", "Update"].join("/"), routeParams);
}
