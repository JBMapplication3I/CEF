/**
 * @file _api/cvApi.Invoicing.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsDisplayNameBase,
	ImplementsNameBase,
	SalesInvoiceModel,
	SalesInvoiceEventSearchModel,
	SalesInvoiceEventPagedResults,
	StateModel,
	StateSearchModel,
	SalesInvoiceStatePagedResults,
	StatusModel,
	StatusSearchModel,
	SalesInvoiceStatusPagedResults,
	TypeModel,
	TypeSearchModel,
	SalesInvoiceTypePagedResults,
} from "./cvApi._DtoClasses";

import {
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesInvoiceStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesInvoiceStateExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesInvoiceStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesInvoiceStatusExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesInvoiceTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesInvoiceTypeExistsByNameDto extends ImplementsNameBase {
}

/**
 * Use to get a list of sales invoice events
 * @see {@link SalesInvoiceEventSearchModel}
 * @public
 */
export interface GetSalesInvoiceEventsDto extends SalesInvoiceEventSearchModel {
}

/**
 * Use to get a list of sales invoice states
 * @see {@link StateSearchModel}
 * @public
 */
export interface GetSalesInvoiceStatesDto extends StateSearchModel {
}

/**
 * Use to get a list of sales invoice statuses
 * @see {@link StatusSearchModel}
 * @public
 */
export interface GetSalesInvoiceStatusesDto extends StatusSearchModel {
}

/**
 * Use to get a list of sales invoice types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetSalesInvoiceTypesDto extends TypeSearchModel {
}

export class Invoicing {
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByDisplayName
	 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceStateExistsByDisplayName = (routeParams?: CheckSalesInvoiceStateExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceState", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByKey
	 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceStateExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceState", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByName
	 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceStateExistsByName = (routeParams?: CheckSalesInvoiceStateExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceState", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByDisplayName
	 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceStatusExistsByDisplayName = (routeParams?: CheckSalesInvoiceStatusExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceStatus", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByKey
	 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceStatusExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceStatus", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByName
	 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceStatusExistsByName = (routeParams?: CheckSalesInvoiceStatusExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceStatus", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByDisplayName
	 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceTypeExistsByDisplayName = (routeParams?: CheckSalesInvoiceTypeExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceType", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByKey
	 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceTypeExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceType", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByName
	 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesInvoiceTypeExistsByName = (routeParams?: CheckSalesInvoiceTypeExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Invoicing", "SalesInvoiceType", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales invoice
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceByID
	 * @path <API Root>/Invoicing/SalesInvoice/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesInvoiceModel>}
	 * @public
	 */
	GetSalesInvoiceByID = (id: number): IHttpPromise<SalesInvoiceModel> =>
		axios.get(["Invoicing", "SalesInvoice", "ID", id].join("/"));

	/**
	 * Use to get a list of sales invoice events
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceEvents
	 * @path <API Root>/Invoicing/SalesInvoiceEvents
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesInvoiceEventPagedResults>}
	 * @public
	 */
	GetSalesInvoiceEvents = (routeParams?: GetSalesInvoiceEventsDto): IHttpPromise<SalesInvoiceEventPagedResults> =>
		axios.get(["Invoicing", "SalesInvoiceEvents"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales invoice state
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStateByID
	 * @path <API Root>/Invoicing/SalesInvoiceState/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StateModel>}
	 * @public
	 */
	GetSalesInvoiceStateByID = (id: number): IHttpPromise<StateModel> =>
		axios.get(["Invoicing", "SalesInvoiceState", "ID", id].join("/"));

	/**
	 * Use to get a list of sales invoice states
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStates
	 * @path <API Root>/Invoicing/SalesInvoiceStates
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesInvoiceStatePagedResults>}
	 * @public
	 */
	GetSalesInvoiceStates = (routeParams?: GetSalesInvoiceStatesDto): IHttpPromise<SalesInvoiceStatePagedResults> =>
		axios.get(["Invoicing", "SalesInvoiceStates"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales invoice status
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStatusByID
	 * @path <API Root>/Invoicing/SalesInvoiceStatus/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StatusModel>}
	 * @public
	 */
	GetSalesInvoiceStatusByID = (id: number): IHttpPromise<StatusModel> =>
		axios.get(["Invoicing", "SalesInvoiceStatus", "ID", id].join("/"));

	/**
	 * Use to get a list of sales invoice statuses
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStatuses
	 * @path <API Root>/Invoicing/SalesInvoiceStatuses
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesInvoiceStatusPagedResults>}
	 * @public
	 */
	GetSalesInvoiceStatuses = (routeParams?: GetSalesInvoiceStatusesDto): IHttpPromise<SalesInvoiceStatusPagedResults> =>
		axios.get(["Invoicing", "SalesInvoiceStatuses"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales invoice type
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceTypeByID
	 * @path <API Root>/Invoicing/SalesInvoiceType/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<TypeModel>}
	 * @public
	 */
	GetSalesInvoiceTypeByID = (id: number): IHttpPromise<TypeModel> =>
		axios.get(["Invoicing", "SalesInvoiceType", "ID", id].join("/"));

	/**
	 * Use to get a list of sales invoice types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceTypes
	 * @path <API Root>/Invoicing/SalesInvoiceTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesInvoiceTypePagedResults>}
	 * @public
	 */
	GetSalesInvoiceTypes = (routeParams?: GetSalesInvoiceTypesDto): IHttpPromise<SalesInvoiceTypePagedResults> =>
		axios.get(["Invoicing", "SalesInvoiceTypes"].join("/"),
		{
			params: routeParams
		});
}
