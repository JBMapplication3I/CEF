/**
 * @file _api/cvApi.Stores.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsNameBase,
	StoreModel,
	SiteDomainModel,
	SiteDomainSearchModel,
	SiteDomainPagedResults,
	UserModel,
	ImplementsSeoUrlBase,
	StoreInventoryLocationsMatrixModel,
	TypeSearchModel,
	StoreInventoryLocationTypePagedResults,
	StoreRegionSearchModel,
	StoreRegionPagedResults,
	StoreSearchModel,
	StorePagedResults,
	StoreTypePagedResults,
	StoreUserSearchModel,
	StoreUserPagedResults,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponseT,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckStoreExistsByNameDto extends ImplementsNameBase {
}

/**
 * Use to get a list of site domains
 * @see {@link SiteDomainSearchModel}
 * @public
 */
export interface GetSiteDomainsDto extends SiteDomainSearchModel {
}

/**
 * Use to get a specific store by the SEO URL
 * @see {@link ImplementsSeoUrlBase}
 * @public
 */
export interface GetStoreBySeoUrlDto extends ImplementsSeoUrlBase {
}

/**
 * Use to get a list of store inventory location types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetStoreInventoryLocationTypesDto extends TypeSearchModel {
}

/**
 * Get store regions by store ID
 * @see {@link StoreRegionSearchModel}
 * @public
 */
export interface GetStoreRegionsByStoreIDDto extends StoreRegionSearchModel {
}

/**
 * Use to get a list of stores
 * @see {@link StoreSearchModel}
 * @public
 */
export interface GetStoresDto extends StoreSearchModel {
}

/**
 * Use to get a list of store types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetStoreTypesDto extends TypeSearchModel {
}

/**
 * Use to get a list of store users
 * @see {@link StoreUserSearchModel}
 * @public
 */
export interface GetStoreUsersDto extends StoreUserSearchModel {
}

export class Stores {
	/**
	 * Check if this ID exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckStoreExistsByID
	 * @path <API Root>/Stores/Store/Exists/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckStoreExistsByID = (id: number): IHttpPromise<number> =>
		axios.get(["Stores", "Store", "Exists", "ID", id].join("/"));
	
	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckStoreExistsByKey
	 * @path <API Root>/Stores/Store/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckStoreExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Stores", "Store", "Exists", "Key", encodeURIComponent(key)].join("/"));
	
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckStoreExistsByName
	 * @path <API Root>/Stores/Store/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckStoreExistsByName = (routeParams?: CheckStoreExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Stores", "Store", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to get the current store based on url, sub-domain or sub-folder
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentStore
	 * @path <API Root>/Stores/Store/Current
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<StoreModel>>}
	 * @public
	 */
	GetCurrentStore = (): IHttpPromise<CEFActionResponseT<StoreModel>> =>
		axios.get(["Stores", "Store", "Current"].join("/"));
	
	/**
	 * Use to get a specific site domain
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomainByID
	 * @path <API Root>/Stores/SiteDomain/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SiteDomainModel>}
	 * @public
	 */
	GetSiteDomainByID = (id: number): IHttpPromise<SiteDomainModel> =>
		axios.get(["Stores", "SiteDomain", "ID", id].join("/"));
	
	/**
	 * Use to get a list of site domains
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomains
	 * @path <API Root>/Stores/SiteDomains
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SiteDomainPagedResults>}
	 * @public
	 */
	GetSiteDomains = (routeParams?: GetSiteDomainsDto): IHttpPromise<SiteDomainPagedResults> =>
		axios.get(["Stores", "SiteDomains"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to get the Administrator of the Store's User info
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreAdministratorUser
	 * @path <API Root>/Stores/StoreAdministratorUser/{StoreID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<UserModel>>}
	 * @public
	 */
	GetStoreAdministratorUser = (storeID: number): IHttpPromise<CEFActionResponseT<UserModel>> =>
		axios.get(["Stores", "StoreAdministratorUser", storeID].join("/"));
	
	/**
	 * Use to get a specific store
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreByID
	 * @path <API Root>/Stores/Store/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StoreModel>}
	 * @public
	 */
	GetStoreByID = (id: number): IHttpPromise<StoreModel> =>
		axios.get(["Stores", "Store", "ID", id].join("/"));
	
	/**
	 * Use to get a specific store by the SEO URL
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreBySeoUrl
	 * @path <API Root>/Stores/Store/SeoUrl
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StoreModel>}
	 * @public
	 */
	GetStoreBySeoUrl = (routeParams?: GetStoreBySeoUrlDto): IHttpPromise<StoreModel> =>
		axios.get(["Stores", "Store", "SeoUrl"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to get the store that the current user has administrative rights to (limited to store admins)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationsMatrix
	 * @path <API Root>/Stores/InventoryLocationsMatrix
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<StoreInventoryLocationsMatrixModel>>>}
	 * @public
	 */
	GetStoreInventoryLocationsMatrix = (): IHttpPromise<CEFActionResponseT<Array<StoreInventoryLocationsMatrixModel>>> =>
		axios.get(["Stores", "InventoryLocationsMatrix"].join("/"));
	
	/**
	 * Use to get a list of store inventory location types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationTypes
	 * @path <API Root>/Stores/StoreInventoryLocationTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StoreInventoryLocationTypePagedResults>}
	 * @public
	 */
	GetStoreInventoryLocationTypes = (routeParams?: GetStoreInventoryLocationTypesDto): IHttpPromise<StoreInventoryLocationTypePagedResults> =>
		axios.get(["Stores", "StoreInventoryLocationTypes"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Get store regions by store ID
	 * @param {@link cef.store.api.GetStoreRegionsByStoreIDDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreRegionsByStoreID
	 * @path <API Root>/Stores/StoreRegions/ByStoreID
	 * @verb POST
	 * @returns {ng.IHttpPromise<StoreRegionPagedResults>}
	 * @public
	 */
	GetStoreRegionsByStoreID = (routeParams?: GetStoreRegionsByStoreIDDto): IHttpPromise<StoreRegionPagedResults> =>
		axios.post(["Stores", "StoreRegions", "ByStoreID"].join("/"), routeParams);

	/**
	 * Use to get a list of stores
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStores
	 * @path <API Root>/Stores/Stores
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StorePagedResults>}
	 * @public
	 */
	GetStores = (routeParams?: GetStoresDto): IHttpPromise<StorePagedResults> =>
		axios.get(["Stores", "Stores"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to get a list of store types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreTypes
	 * @path <API Root>/Stores/StoreTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StoreTypePagedResults>}
	 * @public
	 */
	GetStoreTypes = (routeParams?: GetStoreTypesDto): IHttpPromise<StoreTypePagedResults> =>
		axios.get(["Stores", "StoreTypes"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to get a list of store users
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreUsers
	 * @path <API Root>/Stores/StoreUsers
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StoreUserPagedResults>}
	 * @public
	 */
	GetStoreUsers = (routeParams?: GetStoreUsersDto): IHttpPromise<StoreUserPagedResults> =>
		axios.get(["Stores", "StoreUsers"].join("/"),
		{
			params: routeParams
		});
}
