/**
 * @file _api/cvApi.Shopping.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsTypeNameForStorefrontBase,
	SerializableAttributesDictionary,
	SalesItemTargetBaseModel,
	AppliedCartItemDiscountModel,
	ImplementsCartLookupForStorefrontBase,
	ImplementsTypeNameBase,
	CartTypeModel,
	ContactModel,
	CartModel,
	SalesItemBaseSearchModel,
	CartItemPagedResults,
	StateSearchModel,
	CartStatePagedResults,
	StatusSearchModel,
	CartStatusPagedResults,
	ImplementsNameBase,
	CartTypeSearchModel,
	CartTypePagedResults,
	RateQuoteModel,
	BulkOrderHeadersModel,
	ImplementsIDOnBodyBase,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponseT,
	SalesItemBaseModel,
	CEFActionResponse,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Use to add the Buffer Sku in a quantity that will allow the requirements to be met in the specified session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface AddBufferSkuCartItemDto extends ImplementsTypeNameForStorefrontBase {
	/** Buffer Sku SEO URL */
	BufferSkuSEOURL: string;
	/** Amount to Fill (will divide cost of item to get quantity to add) */
	AmountToFill: string;
}

/**
 * Use to add an item to the specified session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface AddCartItemDto extends ImplementsTypeNameForStorefrontBase {
	/** The ID of the product to add */
	ProductID: number;
	/** The quantity of the product to add */
	Quantity: number;
	/** Cart Item Serializable JSON Attributes */
	SerializableAttributes?: SerializableAttributesDictionary;
	/** Shipment to add to item */
	Targets?: Array<SalesItemTargetBaseModel>;
	/** [Optional] */
	ForceUniqueLineItemKey?: string;
}

/**
 * Use to add multiple items to the specified session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface AddCartItemsDto extends ImplementsTypeNameForStorefrontBase {
	/** Cart items to add */
	Items: Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>;
}

/**
 * Use to add an item to the compare cart for the current user (or anon)
 * @see {@link ImplementsCartLookupForStorefrontBase}
 * @public
 */
export interface AddCompareCartItemDto extends ImplementsCartLookupForStorefrontBase {
	/** The ID of the product to add */
	ProductID: number;
	/** Cart Item Serializable JSON Attributes */
	SerializableAttributes?: SerializableAttributesDictionary;
}

/**
 * Use to add an item to the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface AddStaticCartItemDto extends ImplementsTypeNameForStorefrontBase {
	/** The ID of the product to add */
	ProductID: number;
	/** The quantity of the product to add (Only applicable to Notify Me When In Stock static cart */
	Quantity: number;
	/** Cart Item Serializable JSON Attributes */
	SerializableAttributes?: SerializableAttributesDictionary;
}

/**
 * Use to add a Lot to the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
 * @see {@link ImplementsTypeNameBase}
 * @public
 */
export interface AddStaticCartLotDto extends ImplementsTypeNameBase {
	/** The ID of the lot to add */
	LotID: number;
	/** The quantity of the product to add (Only applicable to Notify Me When In Stock static cart */
	Quantity: number;
}

/**
 * Use to get shipping rates for the current cart.
 * @public
 */
export interface ApplyCurrentCartShippingRateQuoteDto {
	/** The type name of the session cart to apply the selected rate quote to. */
	TypeName: string;
	/** The Key of the rate quote to select. Send null to un-assign the current rate quote. */
	RateQuoteID?: number;
	/** The requested ship by date from the Customer. */
	RequestedShipDate?: Date;
}

/**
 * Parse excel file and add item to temp cart
 * @public
 */
export interface BulkOrderDto {
	/** File name to be imported */
	FileName: string;
	/** Cart type to add items to */
	CartType: string;
	/** ID of the Vendor */
	VendorID: number;
}

/**
 * Use to clear a specific session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface ClearCurrentCartDto extends ImplementsTypeNameForStorefrontBase {
}

/**
 * Use to get shipping rates for the current cart.
 * @public
 */
export interface ClearCurrentCartShippingRateQuoteDto {
	/** The type name of the session cart to clear the selected rate quote from. */
	TypeName: string;
}

/**
 * Use to clear a specific compare cart for the current user (or anon)
 * @see {@link ImplementsCartLookupForStorefrontBase}
 * @public
 */
export interface ClearCurrentCompareCartDto extends ImplementsCartLookupForStorefrontBase {
}

/**
 * Use to clear a specific static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
 * @see {@link ImplementsTypeNameBase}
 * @public
 */
export interface ClearCurrentStaticCartDto extends ImplementsTypeNameBase {
}

/**
 * Create a custom cart type assigned to the current user (custom shopping lists).
 * @see {@link CartTypeModel}
 * @public
 */
export interface CreateCartTypeForCurrentUserDto extends CartTypeModel {
}

/**
 * Use to add the Buffer Sku in a quantity that will allow the requirements to be met for the current session Shopping cart (not available for any other cart types)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartAddBufferFeeDto extends ImplementsTypeNameForStorefrontBase {
	/** Amount to Fee */
	AmountToFee: string;
}

/**
 * Use to add and validate a discount code to the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartAddDiscountDto extends ImplementsTypeNameForStorefrontBase {
	/** Discount Code */
	Code: string;
}

/**
 * Clear the shipping contact on the current user's session cart (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartClearBillingContactDto extends ImplementsTypeNameForStorefrontBase {
}

/**
 * Clear the shipping contact on the current user's session cart (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartClearShippingContactDto extends ImplementsTypeNameForStorefrontBase {
}

/**
 * Get the shipping contact on the current user's session cart (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartGetShippingContactDto extends ImplementsTypeNameForStorefrontBase {
	/** The Cart ID (requires admin to set) */
	CartID?: number;
	/** The User ID (requires admin to set) */
	UserID?: number;
	/** The Account ID (requires admin to set) */
	AccountID?: number;
}

/**
 * Use to remove an Cart Discount Code from the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartRemoveDiscountDto extends ImplementsTypeNameForStorefrontBase {
	/** Cart Discount ID */
	ID: number;
}

/**
 * Set the billing contact on the current user's session cart (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartSetBillingContactDto extends ImplementsTypeNameForStorefrontBase {
	/** The Cart ID (requires admin to set) */
	CartID?: number;
	/** The User ID (requires admin to set) */
	UserID?: number;
	/** The billing contact */
	BillingContact?: ContactModel;
}

/**
 * Set the shipping contact on the current user's session cart to be the same as billing or not for shipping calculations (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartSetSetSameAsBillingDto extends ImplementsTypeNameForStorefrontBase {
	/** The Cart ID (requires admin to set) */
	CartID?: number;
	/** The User ID (requires admin to set) */
	UserID?: number;
	/** The flag value */
	IsSameAsBilling: boolean;
}

/**
 * Set the shipping contact on the current user's session cart (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface CurrentCartSetShippingContactDto extends ImplementsTypeNameForStorefrontBase {
	/** The Cart ID (requires admin to set) */
	CartID?: number;
	/** The User ID (requires admin to set) */
	UserID?: number;
	/** The shipping contact */
	ShippingContact?: ContactModel;
}

/**
 * Use to update the current user's session cart (Shopping, Quote, Samples) attributes
 * @see {@link CartModel}
 * @public
 */
export interface CurrentCartUpdateAttributesDto extends CartModel {
}

/**
 * Delete a custom cart type assigned to the current user (custom shopping lists).
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface DeleteCartTypeForCurrentUserDto extends ImplementsTypeNameForStorefrontBase {
}

/**
 * Use to get a list of cart items
 * @see {@link SalesItemBaseSearchModel}
 * @public
 */
export interface GetCartItemsDto extends SalesItemBaseSearchModel {
}

/**
 * Use to get a list of cart states
 * @see {@link StateSearchModel}
 * @public
 */
export interface GetCartStatesDto extends StateSearchModel {
}

/**
 * Use to get a list of cart statuses
 * @see {@link StatusSearchModel}
 * @public
 */
export interface GetCartStatusesDto extends StatusSearchModel {
}

/**
 * Use to get a specific cart type by the name
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface GetCartTypeByNameDto extends ImplementsNameBase {
}

/**
 * Gets a custom cart type assigned to the current user (custom shopping lists).
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface GetCartTypeForCurrentUserDto extends ImplementsTypeNameForStorefrontBase {
}

/**
 * Use to get a list of cart types
 * @see {@link CartTypeSearchModel}
 * @public
 */
export interface GetCartTypesDto extends CartTypeSearchModel {
}

/**
 * Use to get a specific session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface GetCurrentCartDto extends ImplementsTypeNameForStorefrontBase {
	Validate?: boolean;
}

/**
 * Use to access all items in the specified session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface GetCurrentCartItemsDto extends ImplementsTypeNameForStorefrontBase {
}

/**
 * Use to get shipping rates for the current cart.
 * @public
 */
export interface GetCurrentCartShippingRateQuotesDto {
	/** Cart Type Name */
	TypeName?: string;
	/** Adding the Expedited flag will activate the fee and change to target ship by with expedited timeline. */
	Expedited: boolean;
}

/**
 * Use to get a specific compare cart for the current user (or anon)
 * @see {@link ImplementsCartLookupForStorefrontBase}
 * @public
 */
export interface GetCurrentCompareCartDto extends ImplementsCartLookupForStorefrontBase {
}

/**
 * Use to get a specific compare cart for the current user (or anon)
 * @see {@link ImplementsCartLookupForStorefrontBase}
 * @public
 */
export interface GetCurrentCompareCartItemsDto extends ImplementsCartLookupForStorefrontBase {
}

/**
 * Use to get a specific static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
 * @see {@link ImplementsTypeNameBase}
 * @public
 */
export interface GetCurrentStaticCartDto extends ImplementsTypeNameBase {
}

/**
 * Use to access all items in the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
 * @see {@link ImplementsTypeNameBase}
 * @public
 */
export interface GetCurrentStaticCartItemsDto extends ImplementsTypeNameBase {
}

/**
 * Use to get a list of the cart types this user has.
 * @public
 */
export interface GetCurrentUserCartTypesDto {
	/** Include Cart Types not created by the User, such as the default Cart, Wish List, etc. Defaults to True if not set */
	IncludeNotCreated?: boolean;
}

/**
 * Get Excel Spreadsheet headers for mapping
 * @public
 */
export interface GetFileHeadersDto {
	/** File name to be imported */
	FileName: string;
}

/**
 * Use to deactivate an item from the specified session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface RemoveCartItemByProductIDAndTypeDto extends ImplementsTypeNameForStorefrontBase {
	/** Product ID */
	ProductID: number;
	/** [Optional] */
	ForceUniqueLineItemKey?: string;
}

/**
 * Removes a Discount from an item in the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
 * @see {@link ImplementsIDOnBodyBase}
 * @public
 */
export interface RemoveCartItemDiscountDto extends ImplementsIDOnBodyBase {
}

/**
 * Use to deactivate an item from the compare cart for the current user (or anon)
 * @see {@link ImplementsCartLookupForStorefrontBase}
 * @public
 */
export interface RemoveCompareCartItemByProductIDDto extends ImplementsCartLookupForStorefrontBase {
}

/**
 * Use to deactivate an item from the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
 * @see {@link ImplementsTypeNameBase}
 * @public
 */
export interface RemoveStaticCartItemByProductIDAndTypeDto extends ImplementsTypeNameBase {
	/** Product ID */
	ProductID: number;
	/** [Optional] */
	ForceUniqueLineItemKey?: string;
}

/**
 * Use to send an email containing the current user's cart items to an email address
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface ShareCurrentCartItemsByEmailDto extends ImplementsTypeNameForStorefrontBase {
	Email: string;
}

/**
 * Use to send an email containing the current user's static cart items from the specified type to an email address
 * @see {@link ImplementsTypeNameBase}
 * @public
 */
export interface ShareStaticCartItemsByEmailDto extends ImplementsTypeNameBase {
	Email: string;
}

/**
 * Updates only the Quantity value for the item, overrides any previous value, not trying to adjust by offset. Returns the value supplied unless it needed to be modified for purchasing or stock limits.
 * @public
 */
export interface UpdateCartItemQuantityDto {
	/** The identifier of the cart item to change the quantity value on. */
	CartItemID: number;
	/** The new Quantity value to set (actual number, not an offset). */
	Quantity: number;
	/** The new Quantity Back-Ordered value to set (actual number, not an offset). */
	QuantityBackOrdered: number;
	/** The new Quantity Pre-Sold value to set (actual number, not an offset). */
	QuantityPreSold: number;
}

/**
 * Use to update multiple items in the specified session cart for the current user (Shopping, Quote, Samples)
 * @see {@link ImplementsTypeNameForStorefrontBase}
 * @public
 */
export interface UpdateCartItemsDto extends ImplementsTypeNameForStorefrontBase {
	/** Cart items to update */
	Items: Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>;
}

/**
 * Use to update an existing cart type.
 * @see {@link CartTypeModel}
 * @public
 */
export interface UpdateCartTypeDto extends CartTypeModel {
}

export class Shopping {
	/**
	 * Use to add the Buffer Sku in a quantity that will allow the requirements to be met in the specified session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.AddBufferSkuCartItemDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.AddBufferSkuCartItem
	 * @path <API Root>/Shopping/CurrentCart/AddBufferSkuCartItem
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<boolean>}
	 * @public
	 */
	AddBufferSkuCartItem = (routeParams: AddBufferSkuCartItemDto): IHttpPromise<boolean> =>
		axios.patch(["Shopping", "CurrentCart", "AddBufferSkuCartItem"].join("/"), routeParams);

	/**
	 * Use to add an item to the specified session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.AddCartItemDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.AddCartItem
	 * @path <API Root>/Shopping/CurrentCart/Item/Add
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	AddCartItem = (routeParams: AddCartItemDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.post(["Shopping", "CurrentCart", "Item", "Add"].join("/"), routeParams);

	/**
	 * Use to add multiple items to the specified session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.AddCartItemsDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.AddCartItems
	 * @path <API Root>/Shopping/CurrentCart/Items/Add
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<number>>>}
	 * @public
	 */
	AddCartItems = (routeParams: AddCartItemsDto): IHttpPromise<CEFActionResponseT<Array<number>>> =>
		axios.post(["Shopping", "CurrentCart", "Items", "Add"].join("/"), routeParams);

	/**
	 * Use to add an item to the compare cart for the current user (or anon)
	 * @param {@link cef.store.api.AddCompareCartItemDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.AddCompareCartItem
	 * @path <API Root>/Shopping/CurrentCompareCart/Item/Add
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	AddCompareCartItem = (routeParams: AddCompareCartItemDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "CurrentCompareCart", "Item", "Add"].join("/"), routeParams);

	/**
	 * Use to add an item to the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
	 * @param {@link cef.store.api.AddStaticCartItemDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.AddStaticCartItem
	 * @path <API Root>/Shopping/CurrentStaticCart/Item/Add
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	AddStaticCartItem = (routeParams: AddStaticCartItemDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "CurrentStaticCart", "Item", "Add"].join("/"), routeParams);

	/**
	 * Use to add a Lot to the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
	 * @param {@link cef.store.api.AddStaticCartLotDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.AddStaticCartLot
	 * @path <API Root>/Shopping/CurrentStaticCart/Lot/Add
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	AddStaticCartLot = (routeParams: AddStaticCartLotDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "CurrentStaticCart", "Lot", "Add"].join("/"), routeParams);

	/**
	 * Use to get shipping rates for the current cart.
	 * @param {@link cef.store.api.ApplyCurrentCartShippingRateQuoteDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ApplyCurrentCartShippingRateQuote
	 * @path <API Root>/Shopping/CurrentCart/ShippingRateQuotes/Apply
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ApplyCurrentCartShippingRateQuote = (routeParams: ApplyCurrentCartShippingRateQuoteDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "CurrentCart", "ShippingRateQuotes", "Apply"].join("/"), routeParams);

	/**
	 * Parse excel file and add item to temp cart
	 * @param {@link cef.store.api.BulkOrderDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Providers.Importer.BulkOrder
	 * @path <API Root>/Shopping/Cart/BulkOrder
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	BulkOrder = (routeParams: BulkOrderDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "Cart", "BulkOrder"].join("/"), routeParams);

	/**
	 * Use to clear a specific session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.ClearCurrentCartDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrentCart
	 * @path <API Root>/Shopping/CurrentCart/Clear
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ClearCurrentCart = (routeParams?: ClearCurrentCartDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentCart", "Clear"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Use to get shipping rates for the current cart.
	 * @param {@link cef.store.api.ClearCurrentCartShippingRateQuoteDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrentCartShippingRateQuote
	 * @path <API Root>/Shopping/CurrentCart/ShippingRateQuotes/Clear
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ClearCurrentCartShippingRateQuote = (routeParams: ClearCurrentCartShippingRateQuoteDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "CurrentCart", "ShippingRateQuotes", "Clear"].join("/"), routeParams);

	/**
	 * Use to clear a specific compare cart for the current user (or anon)
	 * @param {@link cef.store.api.ClearCurrentCompareCartDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrentCompareCart
	 * @path <API Root>/Shopping/CurrentCompareCart/Clear
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ClearCurrentCompareCart = (routeParams?: ClearCurrentCompareCartDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentCompareCart", "Clear"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Use to clear a specific static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
	 * @param {@link cef.store.api.ClearCurrentStaticCartDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ClearCurrentStaticCart
	 * @path <API Root>/Shopping/CurrentStaticCart/Clear
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ClearCurrentStaticCart = (routeParams?: ClearCurrentStaticCartDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentStaticCart", "Clear"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Create a custom cart type assigned to the current user (custom shopping lists).
	 * @param {@link cef.store.api.CreateCartTypeForCurrentUserDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateCartTypeForCurrentUser
	 * @path <API Root>/Shopping/CurrentUser/CreateCartType
	 * @verb POST
	 * @returns {ng.IHttpPromise<CartTypeModel>}
	 * @public
	 */
	CreateCartTypeForCurrentUser = (routeParams?: CreateCartTypeForCurrentUserDto): IHttpPromise<CartTypeModel> =>
		axios.post(["Shopping", "CurrentUser", "CreateCartType"].join("/"), routeParams);

	/**
	 * Use to add the Buffer Sku in a quantity that will allow the requirements to be met for the current session Shopping cart (not available for any other cart types)
	 * @param {@link cef.store.api.CurrentCartAddBufferFeeDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartAddBufferFee
	 * @path <API Root>/Shopping/CurrentCart/AddBufferFee
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<boolean>}
	 * @public
	 */
	CurrentCartAddBufferFee = (routeParams: CurrentCartAddBufferFeeDto): IHttpPromise<boolean> =>
		axios.patch(["Shopping", "CurrentCart", "AddBufferFee"].join("/"), routeParams);
	/**
	 * Use to add and validate a discount code to the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
	 * @param {@link cef.store.api.CurrentCartAddDiscountDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartAddDiscount
	 * @path <API Root>/Shopping/CurrentCart/AddDiscount
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartAddDiscount = (routeParams: CurrentCartAddDiscountDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Shopping", "CurrentCart", "AddDiscount"].join("/"), routeParams);
	/**
	 * Clear the shipping contact on the current user's session cart (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.CurrentCartClearBillingContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartClearBillingContact
	 * @path <API Root>/Shopping/CurrentCart/ClearBillingContact
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartClearBillingContact = (routeParams?: CurrentCartClearBillingContactDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Shopping", "CurrentCart", "ClearBillingContact"].join("/"), routeParams);
	/**
	 * Clear the shipping contact on the current user's session cart (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.CurrentCartClearShippingContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartClearShippingContact
	 * @path <API Root>/Shopping/CurrentCart/ClearShippingContact
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartClearShippingContact = (routeParams?: CurrentCartClearShippingContactDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Shopping", "CurrentCart", "ClearShippingContact"].join("/"), routeParams);
	/**
	 * Get the shipping contact on the current user's session cart (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.CurrentCartGetShippingContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartGetShippingContact
	 * @path <API Root>/Shopping/CurrentCart/GetShippingContact
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<ContactModel>>}
	 * @public
	 */
	CurrentCartGetShippingContact = (routeParams?: CurrentCartGetShippingContactDto): IHttpPromise<CEFActionResponseT<ContactModel>> =>
		axios.post(["Shopping", "CurrentCart", "GetShippingContact"].join("/"), routeParams);

	/**
	 * Use to remove an Cart Discount Code from the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
	 * @param {@link cef.store.api.CurrentCartRemoveDiscountDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartRemoveDiscount
	 * @path <API Root>/Shopping/CurrentCart/RemoveDiscount
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartRemoveDiscount = (routeParams: CurrentCartRemoveDiscountDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentCart", "RemoveDiscount"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Set the billing contact on the current user's session cart (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.CurrentCartSetBillingContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartSetBillingContact
	 * @path <API Root>/Shopping/CurrentCart/SetBillingContact
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartSetBillingContact = (routeParams?: CurrentCartSetBillingContactDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Shopping", "CurrentCart", "SetBillingContact"].join("/"), routeParams);

	/**
	 * Set the shipping contact on the current user's session cart to be the same as billing or not for shipping calculations (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.CurrentCartSetSetSameAsBillingDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartSetSetSameAsBilling
	 * @path <API Root>/Shopping/CurrentCart/SetSameAsBilling
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartSetSetSameAsBilling = (routeParams: CurrentCartSetSetSameAsBillingDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Shopping", "CurrentCart", "SetSameAsBilling"].join("/"), routeParams);
	/**
	 * Set the shipping contact on the current user's session cart (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.CurrentCartSetShippingContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartSetShippingContact
	 * @path <API Root>/Shopping/CurrentCart/SetShippingContact
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartSetShippingContact = (routeParams?: CurrentCartSetShippingContactDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Shopping", "CurrentCart", "SetShippingContact"].join("/"), routeParams);

	/**
	 * Use to update the current user's session cart (Shopping, Quote, Samples) attributes
	 * @param {@link cef.store.api.CurrentCartUpdateAttributesDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentCartUpdateAttributes
	 * @path <API Root>/Shopping/CurrentCart/UpdateAttributes
	 * @verb PUT
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CurrentCartUpdateAttributes = (routeParams?: CurrentCartUpdateAttributesDto): IHttpPromise<CEFActionResponse> =>
		axios.put(["Shopping", "CurrentCart", "UpdateAttributes"].join("/"), routeParams);

	/**
	 * Removes a specific cart from the system [Hard-Delete]
	 * @param {@link cef.store.api.DeleteCartByIDDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartByID
	 * @path <API Root>/Shopping/Cart/Delete/ID/{ID}
	 * @verb DELETE
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	DeleteCartByID = (id: number): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "Cart", "Delete", "ID", id].join("/"));

	/**
	 * Removes a specific cart type from the system [Hard-Delete]
	 * @param {@link cef.store.api.DeleteCartTypeByIDDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartTypeByID
	 * @path <API Root>/Shopping/CartType/Delete/ID/{ID}
	 * @verb DELETE
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	DeleteCartTypeByID = (id: number): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CartType", "Delete", "ID", id].join("/"));

	/**
	 * Delete a custom cart type assigned to the current user (custom shopping lists).
	 * @param {@link cef.store.api.DeleteCartTypeForCurrentUserDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteCartTypeForCurrentUser
	 * @path <API Root>/Shopping/CurrentUser/DeleteCartType
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	DeleteCartTypeForCurrentUser = (routeParams?: DeleteCartTypeForCurrentUserDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentUser", "DeleteCartType"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Use to get a specific cart item
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartItemByID
	 * @path <API Root>/Shopping/CartItem/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesItemBaseModel<AppliedCartItemDiscountModel>>}
	 * @public
	 */
	GetCartItemByID = (id: number): IHttpPromise<SalesItemBaseModel<AppliedCartItemDiscountModel>> =>
		axios.get(["Shopping", "CartItem", "ID", id].join("/"));

	/**
	 * Use to get a list of cart items
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartItems
	 * @path <API Root>/Shopping/CartItems
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CartItemPagedResults>}
	 * @public
	 */
	GetCartItems = (routeParams?: GetCartItemsDto): IHttpPromise<CartItemPagedResults> =>
		axios.get(["Shopping", "CartItems"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of cart states
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartStates
	 * @path <API Root>/Shopping/CartStates
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CartStatePagedResults>}
	 * @public
	 */
	GetCartStates = (routeParams?: GetCartStatesDto): IHttpPromise<CartStatePagedResults> =>
		axios.get(["Shopping", "CartStates"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of cart statuses
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartStatuses
	 * @path <API Root>/Shopping/CartStatuses
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CartStatusPagedResults>}
	 * @public
	 */
	GetCartStatuses = (routeParams?: GetCartStatusesDto): IHttpPromise<CartStatusPagedResults> =>
		axios.get(["Shopping", "CartStatuses"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific cart type by the name
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartTypeByName
	 * @path <API Root>/Shopping/CartType/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CartTypeModel>}
	 * @public
	 */
	GetCartTypeByName = (routeParams?: GetCartTypeByNameDto): IHttpPromise<CartTypeModel> =>
		axios.get(["Shopping", "CartType", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Gets a custom cart type assigned to the current user (custom shopping lists).
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartTypeForCurrentUser
	 * @path <API Root>/Shopping/CurrentUser/CartType
	 * @verb GET
	 * @returns {ng.IHttpPromise<CEFActionResponseT<CartTypeModel>>}
	 * @public
	 */
	GetCartTypeForCurrentUser = (routeParams?: GetCartTypeForCurrentUserDto): IHttpPromise<CEFActionResponseT<CartTypeModel>> =>
		axios.get(["Shopping", "CurrentUser", "CartType"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of cart types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCartTypes
	 * @path <API Root>/Shopping/CartTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CartTypePagedResults>}
	 * @public
	 */
	GetCartTypes = (routeParams?: GetCartTypesDto): IHttpPromise<CartTypePagedResults> =>
		axios.get(["Shopping", "CartTypes"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.GetCurrentCartDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentCart
	 * @path <API Root>/Shopping/CurrentCart
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<CartModel>>}
	 * @public
	 */
	GetCurrentCart = (routeParams?: GetCurrentCartDto): IHttpPromise<CEFActionResponseT<CartModel>> =>
		axios.post(["Shopping", "CurrentCart"].join("/"), routeParams);

	/**
	 * Use to access all items in the specified session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.GetCurrentCartItemsDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentCartItems
	 * @path <API Root>/Shopping/CurrentCart/Items
	 * @verb POST
	 * @returns {ng.IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>>}
	 * @public
	 */
	GetCurrentCartItems = (routeParams?: GetCurrentCartItemsDto): IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>> =>
		axios.post(["Shopping", "CurrentCart", "Items"].join("/"), routeParams);

	/**
	 * Use to get shipping rates for the current cart.
	 * @param {@link cef.store.api.GetCurrentCartShippingRateQuotesDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentCartShippingRateQuotes
	 * @path <API Root>/Shopping/CurrentCart/ShippingRateQuotes
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<RateQuoteModel>>>}
	 * @public
	 */
	GetCurrentCartShippingRateQuotes = (routeParams: GetCurrentCartShippingRateQuotesDto): IHttpPromise<CEFActionResponseT<Array<RateQuoteModel>>> =>
		axios.post(["Shopping", "CurrentCart", "ShippingRateQuotes"].join("/"), routeParams);

	/**
	 * Use to get a specific compare cart for the current user (or anon)
	 * @param {@link cef.store.api.GetCurrentCompareCartDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentCompareCart
	 * @path <API Root>/Shopping/CurrentCompareCart
	 * @verb POST
	 * @returns {ng.IHttpPromise<CartModel>}
	 * @public
	 */
	GetCurrentCompareCart = (routeParams?: GetCurrentCompareCartDto): IHttpPromise<CartModel> =>
		axios.post(["Shopping", "CurrentCompareCart"].join("/"), routeParams);

	/**
	 * Use to get a specific compare cart for the current user (or anon)
	 * @param {@link cef.store.api.GetCurrentCompareCartItemsDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentCompareCartItems
	 * @path <API Root>/Shopping/CurrentCompareCart/Items
	 * @verb POST
	 * @returns {ng.IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>>}
	 * @public
	 */
	GetCurrentCompareCartItems = (routeParams?: GetCurrentCompareCartItemsDto): IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>> =>
		axios.post(["Shopping", "CurrentCompareCart", "Items"].join("/"), routeParams);

	/**
	 * Use to get a specific static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
	 * @param {@link cef.store.api.GetCurrentStaticCartDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentStaticCart
	 * @path <API Root>/Shopping/CurrentStaticCart
	 * @verb POST
	 * @returns {ng.IHttpPromise<CartModel>}
	 * @public
	 */
	GetCurrentStaticCart = (routeParams?: GetCurrentStaticCartDto): IHttpPromise<CartModel> =>
		axios.post(["Shopping", "CurrentStaticCart"].join("/"), routeParams);

	/**
	 * Use to access all items in the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
	 * @param {@link cef.store.api.GetCurrentStaticCartItemsDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentStaticCartItems
	 * @path <API Root>/Shopping/CurrentStaticCart/Items
	 * @verb POST
	 * @returns {ng.IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>>}
	 * @public
	 */
	GetCurrentStaticCartItems = (routeParams?: GetCurrentStaticCartItemsDto): IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>> =>
		axios.post(["Shopping", "CurrentStaticCart", "Items"].join("/"), routeParams);

	/**
	 * Use to get a list of the cart types this user has.
	 * @param {@link cef.store.api.GetCurrentUserCartTypesDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserCartTypes
	 * @path <API Root>/Shopping/CurrentUser/UsedCartTypes
	 * @verb POST
	 * @returns {ng.IHttpPromise<CartTypePagedResults>}
	 * @public
	 */
	GetCurrentUserCartTypes = (routeParams?: GetCurrentUserCartTypesDto): IHttpPromise<CartTypePagedResults> =>
		axios.post(["Shopping", "CurrentUser", "UsedCartTypes"].join("/"), routeParams);

	/**
	 * Get Excel Spreadsheet headers for mapping
	 * @param {@link cef.store.api.GetFileHeadersDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Providers.Importer.GetFileHeaders
	 * @path <API Root>/Shopping/Cart/GetHeaders
	 * @verb POST
	 * @returns {ng.IHttpPromise<BulkOrderHeadersModel>}
	 * @public
	 */
	GetFileHeaders = (routeParams: GetFileHeadersDto): IHttpPromise<BulkOrderHeadersModel> =>
		axios.post(["Shopping", "Cart", "GetHeaders"].join("/"), routeParams);

	/**
	 * Use to deactivate a specific cart item by it's identifier (regardless of cart type name or session vs static cart type)
	 * @param {@link cef.store.api.RemoveCartItemByIDDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RemoveCartItemByID
	 * @path <API Root>/Shopping/CurrentCart/Item/Remove/ByID/{ID}
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<boolean>}
	 * @public
	 */
	RemoveCartItemByID = (id: number): IHttpPromise<boolean> =>
		axios.delete(["Shopping", "CurrentCart", "Item", "Remove", "ByID", id].join("/"));

	/**
	 * Use to deactivate an item from the specified session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.RemoveCartItemByProductIDAndTypeDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RemoveCartItemByProductIDAndType
	 * @path <API Root>/Shopping/CurrentCart/Item/Remove/ByProductIDAndType
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<boolean>}
	 * @public
	 */
	RemoveCartItemByProductIDAndType = (routeParams: RemoveCartItemByProductIDAndTypeDto): IHttpPromise<boolean> =>
		axios.delete(["Shopping", "CurrentCart", "Item", "Remove", "ByProductIDAndType"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Removes a Discount from an item in the current user's session cart (Shopping, Quote) (Not available for Static carts or Samples carts)
	 * @param {@link cef.store.api.RemoveCartItemDiscountDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RemoveCartItemDiscount
	 * @path <API Root>/Shopping/CurrentCart/Item/Discount/Remove
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	RemoveCartItemDiscount = (routeParams?: RemoveCartItemDiscountDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentCart", "Item", "Discount", "Remove"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Use to deactivate an item from the compare cart for the current user (or anon)
	 * @param {@link cef.store.api.RemoveCompareCartItemByProductIDDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RemoveCompareCartItemByProductID
	 * @path <API Root>/Shopping/CurrentCompareCart/Item/Remove/ByProductID/{ProductID}
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	RemoveCompareCartItemByProductID = (productID: number, routeParams?: RemoveCompareCartItemByProductIDDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentCompareCart", "Item", "Remove", "ByProductID", productID].join("/"),
		{
			data: routeParams
		});

	/**
	 * Use to deactivate an item from the specified static cart for the current user (Wish List, Notify Me When In Stock, Favorites List)
	 * @param {@link cef.store.api.RemoveStaticCartItemByProductIDAndTypeDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RemoveStaticCartItemByProductIDAndType
	 * @path <API Root>/Shopping/CurrentStaticCart/Item/Remove
	 * @verb DELETE
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	RemoveStaticCartItemByProductIDAndType = (routeParams: RemoveStaticCartItemByProductIDAndTypeDto): IHttpPromise<CEFActionResponse> =>
		axios.delete(["Shopping", "CurrentStaticCart", "Item", "Remove"].join("/"),
		{
			data: routeParams
		});

	/**
	 * Use to send an email containing the current user's cart items to an email address
	 * @param {@link cef.store.api.ShareCurrentCartItemsByEmailDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ShareCurrentCartItemsByEmail
	 * @path <API Root>/Shopping/CurrentCart/ShareByEmail
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ShareCurrentCartItemsByEmail = (routeParams: ShareCurrentCartItemsByEmailDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "CurrentCart", "ShareByEmail"].join("/"), routeParams);

	/**
	 * Use to send an email containing the current user's static cart items from the specified type to an email address
	 * @param {@link cef.store.api.ShareStaticCartItemsByEmailDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ShareStaticCartItemsByEmail
	 * @path <API Root>/Shopping/CurrentStaticCart/ShareByEmail
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ShareStaticCartItemsByEmail = (routeParams: ShareStaticCartItemsByEmailDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Shopping", "CurrentStaticCart", "ShareByEmail"].join("/"), routeParams);

	/**
	 * Updates only the Quantity value for the item, overrides any previous value, not trying to adjust by offset. Returns the value supplied unless it needed to be modified for purchasing or stock limits.
	 * @param {@link cef.store.api.UpdateCartItemQuantityDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartItemQuantity
	 * @path <API Root>/Shopping/CurrentCart/Item/UpdateQuantity
	 * @verb PUT
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	UpdateCartItemQuantity = (routeParams: UpdateCartItemQuantityDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.put(["Shopping", "CurrentCart", "Item", "UpdateQuantity"].join("/"), routeParams);
	/**
	 * Use to update multiple items in the specified session cart for the current user (Shopping, Quote, Samples)
	 * @param {@link cef.store.api.UpdateCartItemsDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartItems
	 * @path <API Root>/Shopping/CurrentCart/Items/Update
	 * @verb PUT
	 * @returns {ng.IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>>}
	 * @public
	 */
	UpdateCartItems = (routeParams: UpdateCartItemsDto): IHttpPromise<Array<SalesItemBaseModel<AppliedCartItemDiscountModel>>> =>
		axios.put(["Shopping", "CurrentCart", "Items", "Update"].join("/"), routeParams);
	/**
	 * Use to update an existing cart type.
	 * @param {@link cef.store.api.UpdateCartTypeDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCartType
	 * @path <API Root>/Shopping/CartType/Update
	 * @verb PUT
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	UpdateCartType = (routeParams?: UpdateCartTypeDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.put(["Shopping", "CartType", "Update"].join("/"), routeParams);
}
