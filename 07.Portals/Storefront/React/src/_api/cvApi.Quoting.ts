/**
 * @file _api/cvApi.Quoting.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsDisplayNameBase,
	ImplementsNameBase,
	SalesQuoteModel,
	SalesQuoteEventSearchModel,
	SalesQuoteEventPagedResults,
	SalesQuoteSearchModel,
	SalesQuotePagedResults,
	StateModel,
	StateSearchModel,
	SalesQuoteStatePagedResults,
	StatusModel,
	StatusSearchModel,
	SalesQuoteStatusPagedResults,
	TypeModel,
	TypeSearchModel,
	SalesQuoteTypePagedResults,
} from "./cvApi._DtoClasses";

import {
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesQuoteStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesQuoteStateExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesQuoteStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesQuoteStatusExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesQuoteTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesQuoteTypeExistsByNameDto extends ImplementsNameBase {
}

/**
 * Use to get a list of sales quote events
 * @see {@link SalesQuoteEventSearchModel}
 * @public
 */
export interface GetSalesQuoteEventsDto extends SalesQuoteEventSearchModel {
}

/**
 * Use to get a list of sales quotes
 * @see {@link SalesQuoteSearchModel}
 * @public
 */
export interface GetSalesQuotesDto extends SalesQuoteSearchModel {
}

/**
 * Use to get a list of sales quote states
 * @see {@link StateSearchModel}
 * @public
 */
export interface GetSalesQuoteStatesDto extends StateSearchModel {
}

/**
 * Use to get a list of sales quote statuses
 * @see {@link StatusSearchModel}
 * @public
 */
export interface GetSalesQuoteStatusesDto extends StatusSearchModel {
}

/**
 * Use to get a list of sales quote types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetSalesQuoteTypesDto extends TypeSearchModel {
}

export class Quoting {
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStateExistsByDisplayName
	 * @path <API Root>/Quoting/SalesQuoteState/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteStateExistsByDisplayName = (routeParams?: CheckSalesQuoteStateExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteState", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStateExistsByKey
	 * @path <API Root>/Quoting/SalesQuoteState/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteStateExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteState", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStateExistsByName
	 * @path <API Root>/Quoting/SalesQuoteState/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteStateExistsByName = (routeParams?: CheckSalesQuoteStateExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteState", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStatusExistsByDisplayName
	 * @path <API Root>/Quoting/SalesQuoteStatus/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteStatusExistsByDisplayName = (routeParams?: CheckSalesQuoteStatusExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteStatus", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this ID exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStatusExistsByID
	 * @path <API Root>/Quoting/SalesQuoteStatus/Exists/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteStatusExistsByID = (id: number): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteStatus", "Exists", "ID", id].join("/"));

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStatusExistsByKey
	 * @path <API Root>/Quoting/SalesQuoteStatus/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteStatusExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteStatus", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteStatusExistsByName
	 * @path <API Root>/Quoting/SalesQuoteStatus/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteStatusExistsByName = (routeParams?: CheckSalesQuoteStatusExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteStatus", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteTypeExistsByDisplayName
	 * @path <API Root>/Quoting/SalesQuoteType/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteTypeExistsByDisplayName = (routeParams?: CheckSalesQuoteTypeExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteType", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteTypeExistsByKey
	 * @path <API Root>/Quoting/SalesQuoteType/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteTypeExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteType", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesQuoteTypeExistsByName
	 * @path <API Root>/Quoting/SalesQuoteType/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesQuoteTypeExistsByName = (routeParams?: CheckSalesQuoteTypeExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Quoting", "SalesQuoteType", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales quote
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteByID
	 * @path <API Root>/Quoting/SalesQuote/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesQuoteModel>}
	 * @public
	 */
	GetSalesQuoteByID = (id: number): IHttpPromise<SalesQuoteModel> =>
		axios.get(["Quoting", "SalesQuote", "ID", id].join("/"));

	/**
	 * Use to get a list of sales quote events
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteEvents
	 * @path <API Root>/Quoting/SalesQuoteEvents
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesQuoteEventPagedResults>}
	 * @public
	 */
	GetSalesQuoteEvents = (routeParams?: GetSalesQuoteEventsDto): IHttpPromise<SalesQuoteEventPagedResults> =>
		axios.get(["Quoting", "SalesQuoteEvents"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of sales quotes
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuotes
	 * @path <API Root>/Quoting/SalesQuotes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesQuotePagedResults>}
	 * @public
	 */
	GetSalesQuotes = (routeParams?: GetSalesQuotesDto): IHttpPromise<SalesQuotePagedResults> =>
		axios.get(["Quoting", "SalesQuotes"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales quote state
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStateByID
	 * @path <API Root>/Quoting/SalesQuoteState/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StateModel>}
	 * @public
	 */
	GetSalesQuoteStateByID = (id: number): IHttpPromise<StateModel> =>
		axios.get(["Quoting", "SalesQuoteState", "ID", id].join("/"));

	/**
	 * Use to get a list of sales quote states
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStates
	 * @path <API Root>/Quoting/SalesQuoteStates
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesQuoteStatePagedResults>}
	 * @public
	 */
	GetSalesQuoteStates = (routeParams?: GetSalesQuoteStatesDto): IHttpPromise<SalesQuoteStatePagedResults> =>
		axios.get(["Quoting", "SalesQuoteStates"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales quote status
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStatusByID
	 * @path <API Root>/Quoting/SalesQuoteStatus/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StatusModel>}
	 * @public
	 */
	GetSalesQuoteStatusByID = (id: number): IHttpPromise<StatusModel> =>
		axios.get(["Quoting", "SalesQuoteStatus", "ID", id].join("/"));

	/**
	 * Use to get a list of sales quote statuses
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteStatuses
	 * @path <API Root>/Quoting/SalesQuoteStatuses
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesQuoteStatusPagedResults>}
	 * @public
	 */
	GetSalesQuoteStatuses = (routeParams?: GetSalesQuoteStatusesDto): IHttpPromise<SalesQuoteStatusPagedResults> =>
		axios.get(["Quoting", "SalesQuoteStatuses"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales quote type
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteTypeByID
	 * @path <API Root>/Quoting/SalesQuoteType/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<TypeModel>}
	 * @public
	 */
	GetSalesQuoteTypeByID = (id: number): IHttpPromise<TypeModel> =>
		axios.get(["Quoting", "SalesQuoteType", "ID", id].join("/"));

	/**
	 * Use to get a list of sales quote types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesQuoteTypes
	 * @path <API Root>/Quoting/SalesQuoteTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesQuoteTypePagedResults>}
	 * @public
	 */
	GetSalesQuoteTypes = (routeParams?: GetSalesQuoteTypesDto): IHttpPromise<SalesQuoteTypePagedResults> =>
		axios.get(["Quoting", "SalesQuoteTypes"].join("/"),
		{
			params: routeParams
		});
}
