/**
 * @file _api/cvApi.Returning.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsDisplayNameBase,
	ImplementsNameBase,
	SalesReturnModel,
	SalesReturnEventSearchModel,
	SalesReturnEventPagedResults,
	SalesReturnReasonSearchModel,
	SalesReturnReasonPagedResults,
	SalesReturnSearchModel,
	SalesReturnPagedResults,
	StateModel,
	StateSearchModel,
	SalesReturnStatePagedResults,
	StatusModel,
	StatusSearchModel,
	SalesReturnStatusPagedResults,
	TypeModel,
	TypeSearchModel,
	SalesReturnTypePagedResults,
} from "./cvApi._DtoClasses";

import {
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesReturnStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesReturnStateExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesReturnStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesReturnStatusExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Display Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsDisplayNameBase}
 * @public
 */
export interface CheckSalesReturnTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckSalesReturnTypeExistsByNameDto extends ImplementsNameBase {
}

/**
 * Use to get a list of sales return events
 * @see {@link SalesReturnEventSearchModel}
 * @public
 */
export interface GetSalesReturnEventsDto extends SalesReturnEventSearchModel {
}

/**
 * Use to get a list of sales return reasons
 * @see {@link SalesReturnReasonSearchModel}
 * @public
 */
export interface GetSalesReturnReasonsDto extends SalesReturnReasonSearchModel {
}

/**
 * Use to get a list of sales returns
 * @see {@link SalesReturnSearchModel}
 * @public
 */
export interface GetSalesReturnsDto extends SalesReturnSearchModel {
}

/**
 * Use to get a list of sales return states
 * @see {@link StateSearchModel}
 * @public
 */
export interface GetSalesReturnStatesDto extends StateSearchModel {
}

/**
 * Use to get a list of sales return statuses
 * @see {@link StatusSearchModel}
 * @public
 */
export interface GetSalesReturnStatusesDto extends StatusSearchModel {
}

/**
 * Use to get a list of sales return types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetSalesReturnTypesDto extends TypeSearchModel {
}

export class Returning {
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByDisplayName
	 * @path <API Root>/Returning/SalesReturnState/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnStateExistsByDisplayName = (routeParams?: CheckSalesReturnStateExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnState", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByKey
	 * @path <API Root>/Returning/SalesReturnState/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnStateExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnState", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByName
	 * @path <API Root>/Returning/SalesReturnState/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnStateExistsByName = (routeParams?: CheckSalesReturnStateExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnState", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByDisplayName
	 * @path <API Root>/Returning/SalesReturnStatus/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnStatusExistsByDisplayName = (routeParams?: CheckSalesReturnStatusExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnStatus", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByKey
	 * @path <API Root>/Returning/SalesReturnStatus/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnStatusExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnStatus", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByName
	 * @path <API Root>/Returning/SalesReturnStatus/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnStatusExistsByName = (routeParams?: CheckSalesReturnStatusExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnStatus", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByDisplayName
	 * @path <API Root>/Returning/SalesReturnType/Exists/DisplayName
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnTypeExistsByDisplayName = (routeParams?: CheckSalesReturnTypeExistsByDisplayNameDto): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnType", "Exists", "DisplayName"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByKey
	 * @path <API Root>/Returning/SalesReturnType/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnTypeExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnType", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByName
	 * @path <API Root>/Returning/SalesReturnType/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckSalesReturnTypeExistsByName = (routeParams?: CheckSalesReturnTypeExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Returning", "SalesReturnType", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales return
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnByID
	 * @path <API Root>/Returning/SalesReturn/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesReturnModel>}
	 * @public
	 */
	GetSalesReturnByID = (id: number): IHttpPromise<SalesReturnModel> =>
		axios.get(["Returning", "SalesReturn", "ID", id].join("/"));

	/**
	 * Use to get a list of sales return events
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnEvents
	 * @path <API Root>/Returning/SalesReturnEvents
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesReturnEventPagedResults>}
	 * @public
	 */
	GetSalesReturnEvents = (routeParams?: GetSalesReturnEventsDto): IHttpPromise<SalesReturnEventPagedResults> =>
		axios.get(["Returning", "SalesReturnEvents"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of sales return reasons
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnReasons
	 * @path <API Root>/Returning/SalesReturnReasons
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesReturnReasonPagedResults>}
	 * @public
	 */
	GetSalesReturnReasons = (routeParams?: GetSalesReturnReasonsDto): IHttpPromise<SalesReturnReasonPagedResults> =>
		axios.get(["Returning", "SalesReturnReasons"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of sales returns
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturns
	 * @path <API Root>/Returning/SalesReturns
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesReturnPagedResults>}
	 * @public
	 */
	GetSalesReturns = (routeParams?: GetSalesReturnsDto): IHttpPromise<SalesReturnPagedResults> =>
		axios.get(["Returning", "SalesReturns"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales return state
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStateByID
	 * @path <API Root>/Returning/SalesReturnState/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StateModel>}
	 * @public
	 */
	GetSalesReturnStateByID = (id: number): IHttpPromise<StateModel> =>
		axios.get(["Returning", "SalesReturnState", "ID", id].join("/"));

	/**
	 * Use to get a list of sales return states
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStates
	 * @path <API Root>/Returning/SalesReturnStates
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesReturnStatePagedResults>}
	 * @public
	 */
	GetSalesReturnStates = (routeParams?: GetSalesReturnStatesDto): IHttpPromise<SalesReturnStatePagedResults> =>
		axios.get(["Returning", "SalesReturnStates"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales return status
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStatusByID
	 * @path <API Root>/Returning/SalesReturnStatus/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<StatusModel>}
	 * @public
	 */
	GetSalesReturnStatusByID = (id: number): IHttpPromise<StatusModel> =>
		axios.get(["Returning", "SalesReturnStatus", "ID", id].join("/"));

	/**
	 * Use to get a list of sales return statuses
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStatuses
	 * @path <API Root>/Returning/SalesReturnStatuses
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesReturnStatusPagedResults>}
	 * @public
	 */
	GetSalesReturnStatuses = (routeParams?: GetSalesReturnStatusesDto): IHttpPromise<SalesReturnStatusPagedResults> =>
		axios.get(["Returning", "SalesReturnStatuses"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific sales return type
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnTypeByID
	 * @path <API Root>/Returning/SalesReturnType/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<TypeModel>}
	 * @public
	 */
	GetSalesReturnTypeByID = (id: number): IHttpPromise<TypeModel> =>
		axios.get(["Returning", "SalesReturnType", "ID", id].join("/"));

	/**
	 * Use to get a list of sales return types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnTypes
	 * @path <API Root>/Returning/SalesReturnTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<SalesReturnTypePagedResults>}
	 * @public
	 */
	GetSalesReturnTypes = (routeParams?: GetSalesReturnTypesDto): IHttpPromise<SalesReturnTypePagedResults> =>
		axios.get(["Returning", "SalesReturnTypes"].join("/"),
		{
			params: routeParams
		});
}
