/**
 * @file _api/cvApi.Questionnaire.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	QuestionSearchModel,
	QuestionPagedResults,
	AnswerModel,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponseT,
	CEFActionResponse,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Checks if the current user has answered the given brand's questionnaire.
 * @public
 */
export interface CheckIfQuestionnaireIsAnsweredDto {
	/** Brand ID For Search, Note: This will be overridden on data calls automatically */
	BrandID?: number;
	BrandIDIncludeNull?: boolean;
	/** The Brand Key for objects */
	BrandKey?: string;
	/** The Brand Name for objects */
	BrandName?: string;
	BrandNameStrict?: boolean;
	BrandNameIncludeNull?: boolean;
	/** Match a store which uses this category */
	BrandCategoryID?: number;
}

/**
 * Use to get a list of questions
 * @see {@link QuestionSearchModel}
 * @public
 */
export interface GetQuestionsDto extends QuestionSearchModel {
}

/**
 * Securely creates many answers, ensures that the user ID on the answers is the current user.
 * @public
 */
export interface SecureCreateAnswersDto {
	Answers?: Array<AnswerModel>;
}

export class Questionnaire {
	/**
	 * Checks if the current user has answered the given brand's questionnaire.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckIfQuestionnaireIsAnswered
	 * @path <API Root>/Questionnaire/CurrentUser/HasAnswersForBrandQuestionnaire
	 * @verb GET
	 * @returns {ng.IHttpPromise<CEFActionResponseT<boolean>>}
	 * @public
	 */
	CheckIfQuestionnaireIsAnswered = (routeParams?: CheckIfQuestionnaireIsAnsweredDto): IHttpPromise<CEFActionResponseT<boolean>> =>
		axios.get(["Questionnaire", "CurrentUser", "HasAnswersForBrandQuestionnaire"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of questions
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetQuestions
	 * @path <API Root>/Questionnaire/Questions
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<QuestionPagedResults>}
	 * @public
	 */
	GetQuestions = (routeParams?: GetQuestionsDto): IHttpPromise<QuestionPagedResults> =>
		axios.get(["Questionnaire", "Questions"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Securely creates many answers, ensures that the user ID on the answers is the current user.
	 * @param {@link cef.store.api.SecureCreateAnswersDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.SecureCreateAnswers
	 * @path <API Root>/Questionnaire/Answers/CreateMany
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	SecureCreateAnswers = (routeParams?: SecureCreateAnswersDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Questionnaire", "Answers", "CreateMany"].join("/"), routeParams);
}
