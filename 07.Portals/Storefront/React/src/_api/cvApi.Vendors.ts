/**
 * @file _api/cvApi.Vendors.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsNameBase,
	VendorModel,
	VendorSearchModel,
	VendorPagedResults,
} from "./cvApi._DtoClasses";

import {
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckVendorExistsByNameDto extends ImplementsNameBase {
}

/**
 * Use to get a list of vendors
 * @see {@link VendorSearchModel}
 * @public
 */
export interface GetVendorsDto extends VendorSearchModel {
}

export class Vendors {
	/**
	 * Check if this ID exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckVendorExistsByID
	 * @path <API Root>/Vendors/Vendor/Exists/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckVendorExistsByID = (id: number): IHttpPromise<number> =>
		axios.get(["Vendors", "Vendor", "Exists", "ID", id].join("/"));

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckVendorExistsByKey
	 * @path <API Root>/Vendors/Vendor/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckVendorExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Vendors", "Vendor", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckVendorExistsByName
	 * @path <API Root>/Vendors/Vendor/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckVendorExistsByName = (routeParams?: CheckVendorExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Vendors", "Vendor", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific vendor
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorByID
	 * @path <API Root>/Vendors/Vendor/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<VendorModel>}
	 * @public
	 */
	GetVendorByID = (id: number): IHttpPromise<VendorModel> =>
		axios.get(["Vendors", "Vendor", "ID", id].join("/"));

	/**
	 * Use to get a list of vendors
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendors
	 * @path <API Root>/Vendors/Vendors
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<VendorPagedResults>}
	 * @public
	 */
	GetVendors = (routeParams?: GetVendorsDto): IHttpPromise<VendorPagedResults> =>
		axios.get(["Vendors", "Vendors"].join("/"),
		{
			params: routeParams
		});
}
