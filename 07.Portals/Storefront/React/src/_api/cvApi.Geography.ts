/**
 * @file _api/cvApi.Geography.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsNameBase,
	AccountContactModel,
	CountrySearchModel,
	CountryPagedResults,
	CountryModel,
	DistrictModel,
	DistrictSearchModel,
	DistrictPagedResults,
	RegionModel,
	RegionSearchModel,
	RegionPagedResults,
	PhonePrefixLookupPagedResults,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponse,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Code exists and return the id if it does (null if it does not)
 * @public
 */
export interface CheckCountryExistsByCodeDto {
	/** The Country Code to look up */
	Code: string;
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckCountryExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Code exists and return the id if it does (null if it does not)
 * @public
 */
export interface CheckRegionExistsByCodeDto {
	Code: string;
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckRegionExistsByNameDto extends ImplementsNameBase {
}

/**
 * Use to add an address in the address book
 * @see {@link AccountContactModel}
 * @public
 */
export interface CreateAddressInBookDto extends AccountContactModel {
}

/**
 * Use to get a list of countries
 * @see {@link CountrySearchModel}
 * @public
 */
export interface GetCountriesDto extends CountrySearchModel {
}

/**
 * Use to get the address book for the current Account
 * @public
 */
export interface GetCurrentAccountAddressBookDto {
	AccountID?: number;
}

/**
 * Use to get the address book for the current Account
 * @public
 */
export interface GetCurrentAccountPrimaryShippingAddressDto {
	AccountID?: number;
}

/**
 * Use to get the address book for the current Account
 * @public
 */
export interface GetCurrentUserAddressBookDto {
	AccountID?: number;
}

/**
 * Use to get a specific district by the name
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface GetDistrictByNameDto extends ImplementsNameBase {
}

/**
 * Use to get a list of districts
 * @see {@link DistrictSearchModel}
 * @public
 */
export interface GetDistrictsDto extends DistrictSearchModel {
}

/**
 * Use to get a specific region by the name
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface GetRegionByNameDto extends ImplementsNameBase {
}

/**
 * Use to get a list of regions
 * @see {@link RegionSearchModel}
 * @public
 */
export interface GetRegionsDto extends RegionSearchModel {
}

/**
 * Validates if the region is in a restricted region.
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface RestrictedRegionCheckDto extends ImplementsNameBase {
	CountryID: number;
	Code: string;
	RegionID: number;
}

/**
 * Use to get geographical data from the phone number
 * @public
 */
export interface ReversePhonePrefixToCityRegionCountryDto {
	/** The prefix, will be limited to 5 characters ignoring any symbols or spaces. */
	Prefix: string;
}

export class Geography {
	/**
	 * Check if this Code exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByCode
	 * @path <API Root>/Geography/Country/Exists/Code
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckCountryExistsByCode = (routeParams: CheckCountryExistsByCodeDto): IHttpPromise<number> =>
		axios.get(["Geography", "Country", "Exists", "Code"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByKey
	 * @path <API Root>/Geography/Country/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckCountryExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Geography", "Country", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByName
	 * @path <API Root>/Geography/Country/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckCountryExistsByName = (routeParams?: CheckCountryExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Geography", "Country", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this Code exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByCode
	 * @path <API Root>/Geography/Region/Exists/Code
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckRegionExistsByCode = (routeParams: CheckRegionExistsByCodeDto): IHttpPromise<number> =>
		axios.get(["Geography", "Region", "Exists", "Code"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByKey
	 * @path <API Root>/Geography/Region/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckRegionExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Geography", "Region", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByName
	 * @path <API Root>/Geography/Region/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckRegionExistsByName = (routeParams?: CheckRegionExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Geography", "Region", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to add an address in the address book
	 * @param {@link cef.store.api.CreateAddressInBookDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAddressInBook
	 * @path <API Root>/Geography/AddressBook/Create
	 * @verb POST
	 * @returns {ng.IHttpPromise<AccountContactModel>}
	 * @public
	 */
	CreateAddressInBook = (routeParams?: CreateAddressInBookDto): IHttpPromise<AccountContactModel> =>
		axios.post(["Geography", "AddressBook", "Create"].join("/"), routeParams);

	/**
	 * Use to get a list of countries
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountries
	 * @path <API Root>/Geography/Countries
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CountryPagedResults>}
	 * @public
	 */
	GetCountries = (routeParams?: GetCountriesDto): IHttpPromise<CountryPagedResults> =>
		axios.get(["Geography", "Countries"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific country
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryByID
	 * @path <API Root>/Geography/Country/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CountryModel>}
	 * @public
	 */
	GetCountryByID = (id: number): IHttpPromise<CountryModel> =>
		axios.get(["Geography", "Country", "ID", id].join("/"));

	/**
	 * Use to get the address book for the current Account
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccountAddressBook
	 * @path <API Root>/Geography/AddressBook/CurrentAccount
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<AccountContactModel>>}
	 * @public
	 */
	GetCurrentAccountAddressBook = (routeParams?: GetCurrentAccountAddressBookDto): IHttpPromise<Array<AccountContactModel>> =>
		axios.get(["Geography", "AddressBook", "CurrentAccount"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get the address book for the current Account
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccountPrimaryShippingAddress
	 * @path <API Root>/Geography/AddressBook/CurrentAccount/PrimaryShipping
	 * @verb GET
	 * @returns {ng.IHttpPromise<AccountContactModel>}
	 * @public
	 */
	GetCurrentAccountPrimaryShippingAddress = (routeParams?: GetCurrentAccountPrimaryShippingAddressDto): IHttpPromise<AccountContactModel> =>
		axios.get(["Geography", "AddressBook", "CurrentAccount", "PrimaryShipping"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get the address book for the current Account
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserAddressBook
	 * @path <API Root>/Geography/AddressBook/CurrentUser
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<AccountContactModel>>}
	 * @public
	 */
	GetCurrentUserAddressBook = (routeParams?: GetCurrentUserAddressBookDto): IHttpPromise<Array<AccountContactModel>> =>
		axios.get(["Geography", "AddressBook", "CurrentUser"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific district by the name
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictByName
	 * @path <API Root>/Geography/District/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<DistrictModel>}
	 * @public
	 */
	GetDistrictByName = (routeParams?: GetDistrictByNameDto): IHttpPromise<DistrictModel> =>
		axios.get(["Geography", "District", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of districts
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistricts
	 * @path <API Root>/Geography/Districts
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<DistrictPagedResults>}
	 * @public
	 */
	GetDistricts = (routeParams?: GetDistrictsDto): IHttpPromise<DistrictPagedResults> =>
		axios.get(["Geography", "Districts"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific region
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionByID
	 * @path <API Root>/Geography/Region/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<RegionModel>}
	 * @public
	 */
	GetRegionByID = (id: number): IHttpPromise<RegionModel> =>
		axios.get(["Geography", "Region", "ID", id].join("/"));

	/**
	 * Use to get a specific region by the name
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionByName
	 * @path <API Root>/Geography/Region/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<RegionModel>}
	 * @public
	 */
	GetRegionByName = (routeParams?: GetRegionByNameDto): IHttpPromise<RegionModel> =>
		axios.get(["Geography", "Region", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of regions
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegions
	 * @path <API Root>/Geography/Regions
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<RegionPagedResults>}
	 * @public
	 */
	GetRegions = (routeParams?: GetRegionsDto): IHttpPromise<RegionPagedResults> =>
		axios.get(["Geography", "Regions"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Validates if the region is in a restricted region.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RestrictedRegionCheck
	 * @path <API Root>/Geography/Region/RestrictedRegionCheck
	 * @verb GET
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	RestrictedRegionCheck = (routeParams: RestrictedRegionCheckDto): IHttpPromise<CEFActionResponse> =>
		axios.get(["Geography", "Region", "RestrictedRegionCheck"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get geographical data from the phone number
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ReversePhonePrefixToCityRegionCountry
	 * @path <API Root>/Geography/PhonePrefixLookups/ReversePhonePrefixToCityRegionCountry
	 * @verb GET
	 * @returns {ng.IHttpPromise<PhonePrefixLookupPagedResults>}
	 * @public
	 */
	ReversePhonePrefixToCityRegionCountry = (routeParams: ReversePhonePrefixToCityRegionCountryDto): IHttpPromise<PhonePrefixLookupPagedResults> =>
		axios.get(["Geography", "PhonePrefixLookups", "ReversePhonePrefixToCityRegionCountry"].join("/"),
		{
			params: routeParams
		});
}
