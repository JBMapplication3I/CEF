/**
 * @file _api/cvApi.Auctions.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsNameBase,
	BidModel,
	AuctionModel,
	AuctionCategorySearchModel,
	AuctionCategoryPagedResults,
	AuctionSearchModel,
	AuctionPagedResults,
	BidSearchModel,
	BidPagedResults,
	LotModel,
	LotSearchModel,
	LotPagedResults,
	CardPagedResults,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponse,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckAuctionExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckListingExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckLotExistsByNameDto extends ImplementsNameBase {
}

/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @see {@link BidModel}
 * @public
 */
export interface CreateSignalRBidDto extends BidModel {
}

/**
 * Use to get a list of auction categories
 * @see {@link AuctionCategorySearchModel}
 * @public
 */
export interface GetAuctionCategoriesDto extends AuctionCategorySearchModel {
}
/**
 * Use to get a list of auctions
 * @see {@link AuctionSearchModel}
 * @public
 */
export interface GetAuctionsDto extends AuctionSearchModel {
}

/**
 * Provides the same results as calling GetAuctionByID multiple times with separate IDs.
 * @public
 */
export interface GetAuctionsByIDsDto {
	/** The store the user has selected if present */
	StoreID?: number;
	/** The brand the user has selected if present */
	BrandID?: number;
	/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
	IsVendorAdmin?: boolean;
	/** The identifier of the vendor which is logged in. This can only be set by the server. */
	VendorAdminID?: number;
	/** The identifiers of auctions to read out */
	IDs: Array<number>;
}
/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @public
 */
export interface GetAuctionsByZipCodeRadiusDto {
	PostalCode: string;
	Radius: number;
}

/**
 * Use to get a list of bids
 * @see {@link BidSearchModel}
 * @public
 */
export interface GetBidsDto extends BidSearchModel {
}

/**
 * Use to get a list of lots
 * @see {@link LotSearchModel}
 * @public
 */
export interface GetLotsDto extends LotSearchModel {
}

/**
 * Provides the same results as calling GetLotByID multiple times with separate IDs.
 * @public
 */
export interface GetLotsByIDsDto {
	/** The store the user has selected if present */
	StoreID?: number;
	/** The brand the user has selected if present */
	BrandID?: number;
	/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
	IsVendorAdmin?: boolean;
	/** The identifier of the vendor which is logged in. This can only be set by the server. */
	VendorAdminID?: number;
	/** The identifiers of lots to read out */
	IDs: Array<number>;
}

/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @public
 */
export interface GetSignalRBidDto {
	UserID: number;
}

/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @public
 */
export interface GetSignalRHighestCurrentBidDto {
	ProductID: number;
}

/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @public
 */
export interface GetSortedProductIDsByHighestBidCountDto {
	IDs: Array<number>;
}

/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @public
 */
export interface LargeBidNotificationsDto {
	Bid: number;
}

/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @public
 */
export interface ProcessPaymentLotWonDto {
	UserID: number;
	LotID: number;
}

/**
 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
 * @public
 */
export interface SignalRQuickBidDto {
	UserID: number;
	ProductID: number;
	BidIncrement: number;
	MaxBid: number;
}

export class Auctions {
	/**
	 * Check if this ID exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckAuctionExistsByID
	 * @path <API Root>/Auctions/Auction/Exists/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckAuctionExistsByID = (id: number): IHttpPromise<number> =>
		axios.get(["Auctions", "Auction", "Exists", "ID", id].join("/"));

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckAuctionExistsByKey
	 * @path <API Root>/Auctions/Auction/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckAuctionExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Auctions", "Auction", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckAuctionExistsByName
	 * @path <API Root>/Auctions/Auction/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckAuctionExistsByName = (routeParams?: CheckAuctionExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Auctions", "Auction", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this ID exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckLotExistsByID
	 * @path <API Root>/Auctions/Lot/Exists/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckLotExistsByID = (id: number): IHttpPromise<number> =>
		axios.get(["Auctions", "Lot", "Exists", "ID", id].join("/"));

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckLotExistsByKey
	 * @path <API Root>/Auctions/Lot/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckLotExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Auctions", "Lot", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckLotExistsByName
	 * @path <API Root>/Auctions/Lot/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckLotExistsByName = (routeParams?: CheckLotExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Auctions", "Lot", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * @param {@link cef.store.api.CreateSignalRBidDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSignalRBid
	 * @path <API Root>/Auctions/Bid/CreateSignalRBid
	 * @verb POST
	 * @returns {ng.IHttpPromise<BidModel>}
	 * @public
	 */
	CreateSignalRBid = (routeParams?: CreateSignalRBidDto): IHttpPromise<BidModel> =>
		axios.post(["Auctions", "Bid", "CreateSignalRBid"].join("/"), routeParams);

	/**
	 * Endpoint for The Your Active Auctions Section.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetActiveAuctions
	 * @path <API Root>/Auctions/Auction/GetActiveAuctions
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<AuctionModel>>}
	 * @public
	 */
	GetActiveAuctionsForHomePage = (): IHttpPromise<Array<AuctionModel>> =>
		axios.get(["Auctions", "ActiveAuctionsSummary"].join("/"));

	/**
	 * Endpoint for The Your Active Auctions Section.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetActiveAuctions
	 * @path <API Root>/Auctions/Auction/GetActiveAuctions
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<AuctionModel>>}
	 * @public
	 */
	GetAuctionCards = (routeParams?: AuctionSearchModel): IHttpPromise<CardPagedResults> =>
		axios.get(["Auctions", "AuctionCards"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific auction
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionByID
	 * @path <API Root>/Auctions/Auction/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AuctionModel>}
	 * @public
	 */
	GetAuctionByID = (id: number): IHttpPromise<AuctionModel> =>
		axios.get(["Auctions", "Auction", "ID", id].join("/"));

	/**
	 * Use to get a list of auction categories
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionCategories
	 * @path <API Root>/Auctions/AuctionCategories
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AuctionCategoryPagedResults>}
	 * @public
	 */
	GetAuctionCategories = (routeParams?: GetAuctionCategoriesDto): IHttpPromise<AuctionCategoryPagedResults> =>
		axios.get(["Auctions", "AuctionCategories"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * Use to get a list of auctions
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctions
	 * @path <API Root>/Auctions/Auctions
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<AuctionPagedResults>}
	 * @public
	 */
	GetAuctions = (routeParams?: GetAuctionsDto): IHttpPromise<AuctionPagedResults> =>
		axios.get(["Auctions", "Auctions"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Provides the same results as calling GetAuctionByID multiple times with separate IDs.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionsByIDs
	 * @path <API Root>/Auctions/Auctions/ByIDs
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<AuctionModel>>}
	 * @public
	 */
	GetAuctionsByIDs = (routeParams: GetAuctionsByIDsDto): IHttpPromise<Array<AuctionModel>> =>
		axios.get(["Auctions", "Auctions", "ByIDs"].join("/"),
		{
			params: routeParams
		});
	
	/**
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionsByZipCodeRadius
	 * @path <API Root>/Auctions/Auction/GetAuctionsByPostalCodeRadius
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<AuctionModel>>}
	 * @public
	 */
	GetAuctionsByZipCodeRadius = (routeParams: GetAuctionsByZipCodeRadiusDto): IHttpPromise<Array<AuctionModel>> =>
		axios.get(["Auctions", "Auction", "GetAuctionsByPostalCodeRadius"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of bids
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBids
	 * @path <API Root>/Auctions/Bids
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<BidPagedResults>}
	 * @public
	 */
	GetBids = (routeParams?: GetBidsDto): IHttpPromise<BidPagedResults> =>
		axios.get(["Auctions", "Bids"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific lot
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotByID
	 * @path <API Root>/Auctions/Lot/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<LotModel>}
	 * @public
	 */
	GetLotByID = (id: number): IHttpPromise<LotModel> =>
		axios.get(["Auctions", "Lot", "ID", id].join("/"));

	/**
	 * Use to get a list of lots
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLots
	 * @path <API Root>/Auctions/Lots
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<LotPagedResults>}
	 * @public
	 */
	GetLots = (routeParams?: GetLotsDto): IHttpPromise<LotPagedResults> =>
		axios.get(["Auctions", "Lots"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Provides the same results as calling GetLotByID multiple times with separate IDs.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotsByIDs
	 * @path <API Root>/Auctions/Lots/ByIDs
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<LotModel>>}
	 * @public
	 */
	GetLotsByIDs = (routeParams: GetLotsByIDsDto): IHttpPromise<Array<LotModel>> =>
		axios.get(["Auctions", "Lots", "ByIDs"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Endpoint for More Items From Your Auctions Section.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMoreItemsFromYourAuctions
	 * @path <API Root>/Auctions/Auction/GetMoreItemsFromYourAuctions
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<LotModel>>}
	 * @public
	 */
	GetMoreItemsFromYourAuctions = (): IHttpPromise<Array<LotModel>> =>
		axios.get(["Auctions", "Auction", "GetMoreItemsFromYourAuctions"].join("/"));
	
	/**
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSignalRBid
	 * @path <API Root>/Auctions/Bid/GetSignalRBid
	 * @verb GET
	 * @returns {ng.IHttpPromise<BidModel>}
	 * @public
	 */
	GetSignalRBid = (routeParams: GetSignalRBidDto): IHttpPromise<BidModel> =>
		axios.get(["Auctions", "Bid", "GetSignalRBid"].join("/"),
		{
			params: routeParams
		});

	/**
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSignalRHighestCurrentBid
	 * @path <API Root>/Auctions/Bid/GetSignalRHighestCurrentBid
	 * @verb GET
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	GetSignalRHighestCurrentBid = (routeParams: GetSignalRHighestCurrentBidDto): IHttpPromise<number> =>
		axios.get(["Auctions", "Bid", "GetSignalRHighestCurrentBid"].join("/"),
		{
			params: routeParams
		});

	/**
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSortedProductIDsByHighestBidCount
	 * @path <API Root>/Auctions/Bid/GetSortedProductIDsByHighestBidCount
	 * @verb GET
	 * @returns {ng.IHttpPromise<BidModel>}
	 * @public
	 */
	GetSortedProductIDsByHighestBidCount = (routeParams: GetSortedProductIDsByHighestBidCountDto): IHttpPromise<BidModel> =>
		axios.get(["Auctions", "Bid", "GetSortedProductIDsByHighestBidCount"].join("/"),
		{
			params: routeParams
		});

	/**
	 * @generatedByCSharpType Clarity.Ecommerce.Service.LargeBidNotifications
	 * @path <API Root>/Auctions/Bid/LargeBidNotifications
	 * @verb GET
	 * @returns {ng.IHttpPromise<boolean>}
	 * @public
	 */
	LargeBidNotifications = (routeParams: LargeBidNotificationsDto): IHttpPromise<boolean> =>
		axios.get(["Auctions", "Bid", "LargeBidNotifications"].join("/"),
		{
			params: routeParams
		});

	/**
	 * @param {@link cef.store.api.ProcessPaymentLotWonDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ProcessPaymentLotWon
	 * @path <API Root>/Auctions/Bid/ProcessPaymentLotWon
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ProcessPaymentLotWon = (routeParams: ProcessPaymentLotWonDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Auctions", "Bid", "ProcessPaymentLotWon"].join("/"), routeParams);

	/**
	 * @generatedByCSharpType Clarity.Ecommerce.Service.SignalRQuickBid
	 * @path <API Root>/Auctions/Bid/SignalRQuickBid
	 * @verb GET
	 * @returns {ng.IHttpPromise<BidModel>}
	 * @public
	 */
	SignalRQuickBid = (routeParams: SignalRQuickBidDto): IHttpPromise<BidModel> =>
		axios.get(["Auctions", "Bid", "SignalRQuickBid"].join("/"),
		{
			params: routeParams
		});
}
