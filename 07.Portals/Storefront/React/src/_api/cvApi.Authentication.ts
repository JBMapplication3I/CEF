/**
 * @file _api/cvApi.Authentication.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	MFARequirementsModel,
	AddressModel,
	StoreContactModel,
	UserModel,
	AccountContactModel,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponse,
	CEFActionResponseT,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Membership Registration Process step 5: Administrator approves the user
 * @public
 */
export interface ApproveUserRegistrationDto {
	/** The encrypted token to use for validation */
	Token: string;
	/** CEF User ID */
	ID: number;
}

/**
 * When provided with the valid existing password, changes the password for a user to a new value.
 * @public
 */
export interface ChangePasswordDto {
	/** UserName */
	UserName: string;
	/** Current Password */
	Password: string;
	/** New Password */
	NewPassword: string;
}

/**
 * Membership Registration Process step 4: Validate Email and complete Registration
 * @public
 */
export interface CompleteRegistrationDto {
	/** First Name of the User */
	FirstName: string;
	/** Last Name of the User */
	LastName: string;
	/** Email to send the invitation to */
	Email: string;
	/** UserName */
	UserName: string;
	/** Password */
	Password: string;
	/** Reset Token */
	ResetToken: string;
	/** Phone */
	Phone: string;
	/** CompanyName */
	CompanyName: string;
	/** RoleName */
	RoleName?: string;
	/** Address */
	Address: AddressModel;
	/** TypeName */
	TypeName?: string;
	/** Website */
	Website?: string;
	/** ProfileType */
	ProfileType?: string;
	/** StoreContacts */
	StoreContacts?: Array<StoreContactModel>;
}

/**
 * Membership Registration Process step 3: Send Email confirmation Email (User gets an email with validation token)
 * @public
 */
export interface CreateLiteAccountAndSendValidationEmailDto {
	/** First Name of the User */
	FirstName: string;
	/** Last Name of the User */
	LastName: string;
	/** The UserName */
	UserName?: string;
	/** Email to send the invitation to */
	Email: string;
	/** Seller Type */
	SellerType: string;
	/** The Membership Level */
	Membership: string;
	/** The encrypted token to use for validation */
	Token: string;
	/** The Membership Type */
	MembershipType: string;
	/** The RootURL is used to override the settings generated RootURL */
	RootURL: string;
}

/**
 * Check if the currently logged in user has any Permissions by Regular Expression
 * @public
 */
export interface CurrentUserHasAnyPermissionDto {
	/** The Regular Expression of the Permissions to match against */
	Regex: string;
}

/**
 * Check if the currently logged in user has any Roles by Regular Expression
 * @public
 */
export interface CurrentUserHasAnyRoleDto {
	/** The Regular Expression of the Roles to match against */
	Regex: string;
}

/**
 * Check if the currently logged in user has a specific Permission by name
 * @public
 */
export interface CurrentUserHasPermissionDto {
	/** The Name of the Permission to check */
	Name: string;
}

/**
 * Check if the currently logged in user has a specific role by name.
 * @public
 */
export interface CurrentUserHasRoleDto {
	/** The Name of the Role to check */
	Name: string;
}

/**
 * When the user is required to reset their password, this endpoint handles it.
 * @public
 */
export interface ForcedPasswordResetDto {
	/** Email */
	Email: string;
	/** Old Password */
	OldPassword: string;
	/** New Password */
	NewPassword: string;
}

/**
 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
 * @public
 */
export interface ForgotPasswordDto {
	/** Email */
	Email: string;
}

/**
 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
 * @public
 */
export interface ForgotPasswordReturnDto {
	/** Email */
	Email: string;
	/** Token */
	Token: string;
	/** Password */
	Password: string;
}

/**
 * Sends an email to the user if the provided email matches an existing user with the Username in it.
 * @public
 */
export interface ForgotUsernameDto {
	/** Email */
	Email: string;
}

/**
 * Consumes the code response from Open ID Connect
 * @public
 */
export interface OktaCodeCallbackDto {
	id_token?: string; // Name format overridden
	access_token?: string; // Name format overridden
	code?: string; // Name format overridden
	expires_in: number; // Name format overridden
	resource?: string; // Name format overridden
	refresh_token?: string; // Name format overridden
	refresh_token_expires_in: number; // Name format overridden
	scope?: string; // Name format overridden
	error?: string; // Name format overridden
	errorDescription?: string; // Name format overridden
}

/**
 * Consumes the code response from Open ID Connect
 * @public
 */
export interface OpenIDConnectCodeCallbackDto {
	id_token?: string; // Name format overridden
	access_token?: string; // Name format overridden
	code?: string; // Name format overridden
	expires_in: number; // Name format overridden
	resource?: string; // Name format overridden
	refresh_token?: string; // Name format overridden
	refresh_token_expires_in: number; // Name format overridden
	scope?: string; // Name format overridden
	error?: string; // Name format overridden
	errorDescription?: string; // Name format overridden
}

/**
 * Registers a new user via the standard process
 * @see {@link UserModel}
 * @public
 */
export interface RegisterNewUserDto extends UserModel {
	AddressBook?: Array<AccountContactModel>;
	InService: boolean;
}

/**
 * Request a multi-factor authentication token for a specific user.
 * @public
 */
export interface RequestMFAForUsernameDto {
	/** If true, send over SMS instead of email. */
	UsePhone: boolean;
}

/**
 * Pass in user credentials to log into the site.
 * @public
 */
export interface ValidateEmailDto {
	/** Email to send the invitation to */
	Email: string;
	/** The encrypted token to use for validation */
	Token: string;
}

/**
 * Validate Email Is Unique
 * @public
 */
export interface ValidateEmailIsUniqueDto {
	Email: string;
}

/**
 * Membership Registration Process step 2: Validate Invitation (User clicked the link in the email with an invite token)
 * @public
 */
export interface ValidateInvitationDto {
	/** Email to send the invitation to */
	Email: string;
	/** The encrypted token to use for validation */
	Token: string;
}

/**
 * Validates that the password provided for a username is the correct one.
 * @public
 */
export interface ValidatePasswordDto {
	UserName: string;
	Password: string;
}

/**
 * Pass in user credentials to log into the site.
 * @public
 */
export interface ValidatePasswordIsGoodDto {
	Password: string;
}

/**
 * Pass in user credentials to log into the site.
 * @public
 */
export interface ValidateUserNameIsGoodDto {
	UserName: string;
}

export class Authentication {
	/**
	 * Membership Registration Process step 5: Administrator approves the user
	 * @param {@link cef.store.api.ApproveUserRegistrationDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ApproveUserRegistration
	 * @path <API Root>/Authentication/ApproveUser
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ApproveUserRegistration = (routeParams: ApproveUserRegistrationDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Authentication", "ApproveUser"].join("/"), routeParams);

	/**
	 * When provided with the valid existing password, changes the password for a user to a new value.
	 * @param {@link cef.store.api.ChangePasswordDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ChangePassword
	 * @path <API Root>/Authentication/ChangePassword
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ChangePassword = (routeParams: ChangePasswordDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ChangePassword"].join("/"), routeParams);

	/**
	 * Check if multi-factor authentication is enabled for a specific user.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckForMFAForUsername
	 * @path <API Root>/Authentication/CheckForMFA/{Username*}
	 * @verb GET
	 * @returns {ng.IHttpPromise<CEFActionResponseT<MFARequirementsModel>>}
	 * @public
	 */
	CheckForMFAForUsername = (username: string): IHttpPromise<CEFActionResponseT<MFARequirementsModel>> =>
		axios.get(["Authentication", "CheckForMFA", encodeURIComponent(username)].join("/"));

	/**
	 * Membership Registration Process step 4: Validate Email and complete Registration
	 * @param {@link cef.store.api.CompleteRegistrationDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CompleteRegistration
	 * @path <API Root>/Authentication/CompleteRegistration
	 * @verb PATCH
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CompleteRegistration = (routeParams: CompleteRegistrationDto): IHttpPromise<CEFActionResponse> =>
		axios.patch(["Authentication", "CompleteRegistration"].join("/"), routeParams);

	/**
	 * Membership Registration Process step 3: Send Email confirmation Email (User gets an email with validation token)
	 * @param {@link cef.store.api.CreateLiteAccountAndSendValidationEmailDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLiteAccountAndSendValidationEmail
	 * @path <API Root>/Authentication/CreateLiteAccountAndSendValidationEmail
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	CreateLiteAccountAndSendValidationEmail = (routeParams: CreateLiteAccountAndSendValidationEmailDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "CreateLiteAccountAndSendValidationEmail"].join("/"), routeParams);

	/**
	 * Check if the currently logged in user has any Permissions by Regular Expression
	 * @param {@link cef.store.api.CurrentUserHasAnyPermissionDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasAnyPermission
	 * @path <API Root>/Authentication/CurrentUser/HasAnyPermission
	 * @verb POST
	 * @returns {ng.IHttpPromise<void>}
	 * @public
	 */
	CurrentUserHasAnyPermission = (routeParams: CurrentUserHasAnyPermissionDto): IHttpPromise<void> =>
		axios.post(["Authentication", "CurrentUser", "HasAnyPermission"].join("/"), routeParams);

	/**
	 * Check if the currently logged in user has any Roles by Regular Expression
	 * @param {@link cef.store.api.CurrentUserHasAnyRoleDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasAnyRole
	 * @path <API Root>/Authentication/CurrentUser/HasAnyRole
	 * @verb POST
	 * @returns {ng.IHttpPromise<void>}
	 * @public
	 */
	CurrentUserHasAnyRole = (routeParams: CurrentUserHasAnyRoleDto): IHttpPromise<void> =>
		axios.post(["Authentication", "CurrentUser", "HasAnyRole"].join("/"), routeParams);

	/**
	 * Check if the currently logged in user has a specific Permission by name
	 * @param {@link cef.store.api.CurrentUserHasPermissionDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasPermission
	 * @path <API Root>/Authentication/CurrentUser/HasPermission
	 * @verb POST
	 * @returns {ng.IHttpPromise<void>}
	 * @public
	 */
	CurrentUserHasPermission = (routeParams: CurrentUserHasPermissionDto): IHttpPromise<void> =>
		axios.post(["Authentication", "CurrentUser", "HasPermission"].join("/"), routeParams);

	/**
	 * Check if the currently logged in user has a specific role by name.
	 * @param {@link cef.store.api.CurrentUserHasRoleDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasRole
	 * @path <API Root>/Authentication/CurrentUser/HasRole
	 * @verb POST
	 * @returns {ng.IHttpPromise<void>}
	 * @public
	 */
	CurrentUserHasRole = (routeParams: CurrentUserHasRoleDto): IHttpPromise<void> =>
		axios.post(["Authentication", "CurrentUser", "HasRole"].join("/"), routeParams);

	/**
	 * When the user is required to reset their password, this endpoint handles it.
	 * @param {@link cef.store.api.ForcedPasswordResetDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ForcedPasswordReset
	 * @path <API Root>/Authentication/ForcedPasswordReset
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ForcedPasswordReset = (routeParams: ForcedPasswordResetDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ForcedPasswordReset"].join("/"), routeParams);

	/**
	 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
	 * @param {@link cef.store.api.ForgotPasswordDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotPassword
	 * @path <API Root>/Authentication/ForgotPassword
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ForgotPassword = (routeParams: ForgotPasswordDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ForgotPassword"].join("/"), routeParams);

	/**
	 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
	 * @param {@link cef.store.api.ForgotPasswordReturnDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotPasswordReturn
	 * @path <API Root>/Authentication/ForgotPassword/Return
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<string>>}
	 * @public
	 */
	ForgotPasswordReturn = (routeParams: ForgotPasswordReturnDto): IHttpPromise<CEFActionResponseT<string>> =>
		axios.post(["Authentication", "ForgotPassword", "Return"].join("/"), routeParams);

	/**
	 * Sends an email to the user if the provided email matches an existing user with the Username in it.
	 * @param {@link cef.store.api.ForgotUsernameDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotUsername
	 * @path <API Root>/Authentication/ForgotUsername
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ForgotUsername = (routeParams: ForgotUsernameDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ForgotUsername"].join("/"), routeParams);

	/**
	 * Consumes the code response from Open ID Connect
	 * @param {@link cef.store.api.OktaCodeCallbackDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType ServiceStack.Auth.OktaCodeCallback
	 * @path <API Root>/Authentication/OktaCodeCallback
	 * @verb POST
	 * @returns {ng.IHttpPromise<void>}
	 * @public
	 */
	OktaCodeCallback = (routeParams: OktaCodeCallbackDto): IHttpPromise<void> =>
		axios.post(["Authentication", "OktaCodeCallback"].join("/"), routeParams);

	/**
	 * Consumes the code response from Open ID Connect
	 * @param {@link cef.store.api.OpenIDConnectCodeCallbackDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType ServiceStack.Auth.OpenIDConnectCodeCallback
	 * @path <API Root>/Authentication/OpenIDConnectCodeCallback
	 * @verb POST
	 * @returns {ng.IHttpPromise<void>}
	 * @public
	 */
	OpenIDConnectCodeCallback = (routeParams: OpenIDConnectCodeCallbackDto): IHttpPromise<void> =>
		axios.post(["Authentication", "OpenIDConnectCodeCallback"].join("/"), routeParams);

	/**
	 * Registers a new user via the standard process
	 * @param {@link cef.store.api.RegisterNewUserDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RegisterNewUser
	 * @path <API Root>/Authentication/RegisterNewUser
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	RegisterNewUser = (routeParams: RegisterNewUserDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "RegisterNewUser"].join("/"), routeParams);

	/**
	 * Request a multi-factor authentication token for a specific user.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.RequestMFAForUsername
	 * @path <API Root>/Authentication/RequestMFA/{Username*}
	 * @verb GET
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	RequestMFAForUsername = (username: string, routeParams: RequestMFAForUsernameDto): IHttpPromise<CEFActionResponse> =>
		axios.get(["Authentication", "RequestMFA", encodeURIComponent(username)].join("/"),
		{
			params: routeParams
		});

	/**
	 * Pass in user credentials to log into the site.
	 * @param {@link cef.store.api.ValidateEmailDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateEmail
	 * @path <API Root>/Authentication/ValidateEmail
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ValidateEmail = (routeParams: ValidateEmailDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ValidateEmail"].join("/"), routeParams);

	/**
	 * Validate Email Is Unique
	 * @param {@link cef.store.api.ValidateEmailIsUniqueDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateEmailIsUnique
	 * @path <API Root>/Authentication/ValidateEmailIsUnique
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ValidateEmailIsUnique = (routeParams: ValidateEmailIsUniqueDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ValidateEmailIsUnique"].join("/"), routeParams);

	/**
	 * Membership Registration Process step 2: Validate Invitation (User clicked the link in the email with an invite token)
	 * @param {@link cef.store.api.ValidateInvitationDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateInvitation
	 * @path <API Root>/Authentication/ValidateInvitation
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ValidateInvitation = (routeParams: ValidateInvitationDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ValidateInvitation"].join("/"), routeParams);

	/**
	 * Validates that the password provided for a username is the correct one.
	 * @param {@link cef.store.api.ValidatePasswordDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidatePassword
	 * @path <API Root>/Authentication/ValidatePassword
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ValidatePassword = (routeParams: ValidatePasswordDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ValidatePassword"].join("/"), routeParams);

	/**
	 * Pass in user credentials to log into the site.
	 * @param {@link cef.store.api.ValidatePasswordIsGoodDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidatePasswordIsGood
	 * @path <API Root>/Authentication/ValidatePasswordIsGood
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ValidatePasswordIsGood = (routeParams: ValidatePasswordIsGoodDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ValidatePasswordIsGood"].join("/"), routeParams);

	/**
	 * Pass in user credentials to log into the site.
	 * @param {@link cef.store.api.ValidateUserNameIsGoodDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateUserNameIsGood
	 * @path <API Root>/Authentication/ValidateUserNameIsGood
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	ValidateUserNameIsGood = (routeParams: ValidateUserNameIsGoodDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Authentication", "ValidateUserNameIsGood"].join("/"), routeParams);
}
