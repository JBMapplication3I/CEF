/**
 * @file _api/cvApi.Categories.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsNameBase,
	ImplementsSeoUrlBase,
	CategorySearchModel,
	CategoryPagedResults,
	CategoryModel,
	ImplementsKeyOnQueryBase,
	CategoryImageModel,
	CategoryImageSearchModel,
	CategoryImagePagedResults,
	ProductCategorySelectorModel,
	TypeSearchModel,
	CategoryTypePagedResults,
	MenuCategoryModel,
} from "./cvApi._DtoClasses";

import {
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckCategoryExistsByNameDto extends ImplementsNameBase {
}

/**
 * Check if this SEO URL exists and return the id if it does (null if it does not)
 * @see {@link ImplementsSeoUrlBase}
 * @public
 */
export interface CheckCategoryExistsBySeoUrlDto extends ImplementsSeoUrlBase {
}

/**
 * Use to get a list of categories
 * @see {@link CategorySearchModel}
 * @public
 */
export interface GetCategoriesDto extends CategorySearchModel {
}

/**
 * Use to get three levels of categories
 * @see {@link CategorySearchModel}
 * @public
 */
export interface GetCategoriesThreeLevelsDto extends CategorySearchModel {
}

/**
 * Use to get a specific category
 * @public
 */
export interface GetCategoryByIDDto {
	/** When true, don't map out the Product Categories (use when this would result in a lot of unnecessary data) */
	ExcludeProductCategories?: boolean;
}

/**
 * Use to get a specific category by the custom key
 * @see {@link ImplementsKeyOnQueryBase}
 * @public
 */
export interface GetCategoryByKeyDto extends ImplementsKeyOnQueryBase {
	/** When true, don't map out the Product Categories (use when this would result in a lot of unnecessary data) */
	ExcludeProductCategories?: boolean;
}

/**
 * Use to get a specific category by the SEO URL
 * @see {@link ImplementsSeoUrlBase}
 * @public
 */
export interface GetCategoryBySeoUrlDto extends ImplementsSeoUrlBase {
	/** When true, don't map out the Product Categories (use when this would result in a lot of unnecessary data) */
	ExcludeProductCategories?: boolean;
}

/**
 * Get Category by SEO URL for just the SEO Metadata
 * @public
 */
export interface GetCategoryForMetaDataDto {
	/** The SEO URL of the Category to locate */
	SeoUrl: string;
}

/**
 * Use to get a list of category images
 * @see {@link CategoryImageSearchModel}
 * @public
 */
export interface GetCategoryImagesDto extends CategoryImageSearchModel {
}

/**
 * Use to get a tree of categories. Include the ParentID and set IncludeChildrenInResults to false and this can function as lazy loading for Kendo Trees.
 * @see {@link CategorySearchModel}
 * @public
 */
export interface GetCategoryTreeDto extends CategorySearchModel {
}

/**
 * Use to get a list of category types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetCategoryTypesDto extends TypeSearchModel {
}

/**
 * Use to get three levels of categories
 * @see {@link CategorySearchModel}
 * @public
 */
export interface GetMenuCategoriesThreeLevelsDto extends CategorySearchModel {
}

export class Categories {
	/**
	 * Check if this ID exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsByID
	 * @path <API Root>/Categories/Category/Exists/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckCategoryExistsByID = (id: number): IHttpPromise<number> =>
		axios.get(["Categories", "Category", "Exists", "ID", id].join("/"));

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsByKey
	 * @path <API Root>/Categories/Category/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckCategoryExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Categories", "Category", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsByName
	 * @path <API Root>/Categories/Category/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckCategoryExistsByName = (routeParams?: CheckCategoryExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Categories", "Category", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Check if this SEO URL exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsBySeoUrl
	 * @path <API Root>/Categories/Category/Exists/SeoUrl
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckCategoryExistsBySeoUrl = (routeParams?: CheckCategoryExistsBySeoUrlDto): IHttpPromise<number> =>
		axios.get(["Categories", "Category", "Exists", "SeoUrl"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of categories
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategories
	 * @path <API Root>/Categories/Categories
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CategoryPagedResults>}
	 * @public
	 */
	GetCategories = (routeParams?: GetCategoriesDto): IHttpPromise<CategoryPagedResults> =>
		axios.get(["Categories", "Categories"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get three levels of categories
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoriesThreeLevels
	 * @path <API Root>/Categories/Levels/Three
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<CategoryModel>>}
	 * @public
	 */
	GetCategoriesThreeLevels = (routeParams?: GetCategoriesThreeLevelsDto): IHttpPromise<Array<CategoryModel>> =>
		axios.get(["Categories", "Levels", "Three"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific category
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryByID
	 * @path <API Root>/Categories/Category/ID
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CategoryModel>}
	 * @public
	 */
	GetCategoryByID = (routeParams?: GetCategoryByIDDto): IHttpPromise<CategoryModel> =>
		axios.get(["Categories", "Category", "ID"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific category by the custom key
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryByKey
	 * @path <API Root>/Categories/Category/Key
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CategoryModel>}
	 * @public
	 */
	GetCategoryByKey = (routeParams?: GetCategoryByKeyDto): IHttpPromise<CategoryModel> =>
		axios.get(["Categories", "Category", "Key"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific category by the SEO URL
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryBySeoUrl
	 * @path <API Root>/Categories/Category/SeoUrl
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CategoryModel>}
	 * @public
	 */
	GetCategoryBySeoUrl = (routeParams?: GetCategoryBySeoUrlDto): IHttpPromise<CategoryModel> =>
		axios.get(["Categories", "Category", "SeoUrl"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Get Category by SEO URL for just the SEO Metadata
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryForMetaData
	 * @path <API Root>/Categories/Category/Metadata
	 * @verb GET
	 * @returns {ng.IHttpPromise<void>}
	 * @public
	 */
	GetCategoryForMetaData = (routeParams: GetCategoryForMetaDataDto): IHttpPromise<void> =>
		axios.get(["Categories", "Category", "Metadata"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a specific category image
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryImageByID
	 * @path <API Root>/Categories/CategoryImage/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CategoryImageModel>}
	 * @public
	 */
	GetCategoryImageByID = (id: number): IHttpPromise<CategoryImageModel> =>
		axios.get(["Categories", "CategoryImage", "ID", id].join("/"));

	/**
	 * Use to get a list of category images
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryImages
	 * @path <API Root>/Categories/CategoryImages
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CategoryImagePagedResults>}
	 * @public
	 */
	GetCategoryImages = (routeParams?: GetCategoryImagesDto): IHttpPromise<CategoryImagePagedResults> =>
		axios.get(["Categories", "CategoryImages"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a tree of categories. Include the ParentID and set IncludeChildrenInResults to false and this can function as lazy loading for Kendo Trees.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryTree
	 * @path <API Root>/Categories/Tree
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<ProductCategorySelectorModel>>}
	 * @public
	 */
	GetCategoryTree = (routeParams?: GetCategoryTreeDto): IHttpPromise<Array<ProductCategorySelectorModel>> =>
		axios.get(["Categories", "Tree"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of category types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryTypes
	 * @path <API Root>/Categories/CategoryTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<CategoryTypePagedResults>}
	 * @public
	 */
	GetCategoryTypes = (routeParams?: GetCategoryTypesDto): IHttpPromise<CategoryTypePagedResults> =>
		axios.get(["Categories", "CategoryTypes"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get three levels of categories
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMenuCategoriesThreeLevels
	 * @path <API Root>/Categories/MenuLevels/Three
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<MenuCategoryModel>>}
	 * @public
	 */
	GetMenuCategoriesThreeLevels = (routeParams?: GetMenuCategoriesThreeLevelsDto): IHttpPromise<Array<MenuCategoryModel>> =>
		axios.get(["Categories", "MenuLevels", "Three"].join("/"),
		{
			params: routeParams
		});

	/**
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPersonalizedCategoriesForCurrentUser
	 * @path <API Root>/Categories/Personalization/ForCurrentUser
	 * @verb GET
	 * @returns {ng.IHttpPromise<Array<CategoryModel>>}
	 * @public
	 */
	GetPersonalizedCategoriesForCurrentUser = (): IHttpPromise<Array<CategoryModel>> =>
		axios.get(["Categories", "Personalization", "ForCurrentUser"].join("/"));
}
