/**
 * @file _api/cvApi.Contacts.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	UserModel,
	ContactModel,
	TypeSearchModel,
	ContactTypePagedResults,
	StatusModel,
	StatusSearchModel,
	UserOnlineStatusPagedResults,
	UserSearchModel,
	UserPagedResults,
	UserStatusPagedResults,
	UserTypePagedResults,
} from "./cvApi._DtoClasses";

import {
	CEFActionResponseT,
	Dictionary,
	CEFActionResponse,
	IHttpPromise
} from "./cvApi.shared";

/**
 * Use to create a new user.
 * @see {@link UserModel}
 * @public
 */
export interface CreateUserDto extends UserModel {
	/** Password */
	Password?: string;
	/** Should the system create a user on the CMS side */
	CreateCMSUser?: boolean;
	/** Should the system create a CEF User */
	CreateCEFUser?: boolean;
}

/**
 * Use to create user with invite code
 * @see {@link UserModel}
 * @public
 */
export interface CreateUserWithCodeDto extends UserModel {
	/** InvitationCode */
	InvitationCode: string;
}

/**
 * Use to get a list of contact types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetContactTypesDto extends TypeSearchModel {
}

/**
 * Use to get a list of user online statuses
 * @see {@link StatusSearchModel}
 * @public
 */
export interface GetUserOnlineStatusesDto extends StatusSearchModel {
}

/**
 * Use to get a list of users
 * @see {@link UserSearchModel}
 * @public
 */
export interface GetUsersDto extends UserSearchModel {
}

/**
 * Use to get a list of user statuses
 * @see {@link StatusSearchModel}
 * @public
 */
export interface GetUserStatusesDto extends StatusSearchModel {
}

/**
 * Use to get a list of user types
 * @see {@link TypeSearchModel}
 * @public
 */
export interface GetUserTypesDto extends TypeSearchModel {
}

/**
 * Use to import a list of users to the current account. Returns the IDs of all users upserted
 * @public
 */
export interface ImportUsersFromExcelToCurrentAccountDto {
	FileName: string;
	AccountID?: number;
}

/**
 * Use to set the current user's online status.
 * @public
 */
export interface SetCurrentUserOnlineStatusDto {
	OnlineStatus: string;
}

/**
 * Use to update the current user's details
 * @see {@link UserModel}
 * @public
 */
export interface UpdateCurrentUserDto extends UserModel {
}

/**
 * Use to create a new or update an existing contact (as needed).
 * @see {@link ContactModel}
 * @public
 */
export interface UpsertContactDto extends ContactModel {
}

export class Contacts {
	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserExistsByKey
	 * @path <API Root>/Contacts/User/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckUserExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Contacts", "User", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Use to create a new user.
	 * @param {@link cef.store.api.CreateUserDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUser
	 * @path <API Root>/Contacts/User/Create
	 * @verb POST
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	CreateUser = (routeParams?: CreateUserDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.post(["Contacts", "User", "Create"].join("/"), routeParams);

	/**
	 * Use to create user with invite code
	 * @param {@link cef.store.api.CreateUserWithCodeDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserWithCode
	 * @path <API Root>/Contacts/User/CreateWithCode
	 * @verb POST
	 * @priority 1
	 * @returns {ng.IHttpPromise<UserModel>}
	 * @public
	 */
	CreateUserWithCode = (routeParams: CreateUserWithCodeDto): IHttpPromise<UserModel> =>
		axios.post(["Contacts", "User", "CreateWithCode"].join("/"), routeParams);

	/**
	 * Use to get a specific contact
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactByID
	 * @path <API Root>/Contacts/Contact/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<ContactModel>}
	 * @public
	 */
	GetContactByID = (id: number): IHttpPromise<ContactModel> =>
		axios.get(["Contacts", "Contact", "ID", id].join("/"));

	/**
	 * Use to get a list of contact types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactTypes
	 * @path <API Root>/Contacts/ContactTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<ContactTypePagedResults>}
	 * @public
	 */
	GetContactTypes = (routeParams?: GetContactTypesDto): IHttpPromise<ContactTypePagedResults> =>
		axios.get(["Contacts", "ContactTypes"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get the current user's details
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUser
	 * @path <API Root>/Contacts/CurrentUser
	 * @verb GET
	 * @returns {ng.IHttpPromise<UserModel>}
	 * @public
	 */
	GetCurrentUser = (): IHttpPromise<UserModel> =>
		axios.get(["Contacts", "CurrentUser"].join("/"));

	/**
	 * Use to get the current user's Username. Note: this only returns the UserName in the UserModel, no additional data
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserName
	 * @path <API Root>/Contacts/CurrentUser/UserName
	 * @verb GET
	 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<any>>>}
	 * @public
	 */
	GetCurrentUserName = (): IHttpPromise<CEFActionResponseT<Dictionary<any>>> =>
		axios.get(["Contacts", "CurrentUser", "UserName"].join("/"));

	/**
	 * Use to get the current user's online status.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserOnlineStatus
	 * @path <API Root>/Contacts/CurrentUser/GetOnlineStatus
	 * @verb GET
	 * @returns {ng.IHttpPromise<StatusModel>}
	 * @public
	 */
	GetCurrentUserOnlineStatus = (): IHttpPromise<StatusModel> =>
		axios.get(["Contacts", "CurrentUser", "GetOnlineStatus"].join("/"));

	/**
	 * Use to get a specific user
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserByID
	 * @path <API Root>/Contacts/User/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<UserModel>}
	 * @public
	 */
	GetUserByID = (id: number): IHttpPromise<UserModel> =>
		axios.get(["Contacts", "User", "ID", id].join("/"));

	/**
	 * Use to get a specific user by the custom key
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserByKey
	 * @path <API Root>/Contacts/User/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<UserModel>}
	 * @public
	 */
	GetUserByKey = (key: string): IHttpPromise<UserModel> =>
		axios.get(["Contacts", "User", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Use to get a list of user online statuses
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserOnlineStatuses
	 * @path <API Root>/Contacts/UserOnlineStatuses
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<UserOnlineStatusPagedResults>}
	 * @public
	 */
	GetUserOnlineStatuses = (routeParams?: GetUserOnlineStatusesDto): IHttpPromise<UserOnlineStatusPagedResults> =>
		axios.get(["Contacts", "UserOnlineStatuses"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of users
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUsers
	 * @path <API Root>/Contacts/Users
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<UserPagedResults>}
	 * @public
	 */
	GetUsers = (routeParams?: GetUsersDto): IHttpPromise<UserPagedResults> =>
		axios.get(["Contacts", "Users"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of user statuses
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserStatuses
	 * @path <API Root>/Contacts/UserStatuses
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<UserStatusPagedResults>}
	 * @public
	 */
	GetUserStatuses = (routeParams?: GetUserStatusesDto): IHttpPromise<UserStatusPagedResults> =>
		axios.get(["Contacts", "UserStatuses"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of user types
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserTypes
	 * @path <API Root>/Contacts/UserTypes
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<UserTypePagedResults>}
	 * @public
	 */
	GetUserTypes = (routeParams?: GetUserTypesDto): IHttpPromise<UserTypePagedResults> =>
		axios.get(["Contacts", "UserTypes"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to import a list of users to the current account. Returns the IDs of all users upserted
	 * @param {@link cef.store.api.ImportUsersFromExcelToCurrentAccountDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Workflow.ImportUsersFromExcelToCurrentAccount
	 * @path <API Root>/Contacts/Users/ImportFromExcelToCurrentAccount
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<number>>>}
	 * @public
	 */
	ImportUsersFromExcelToCurrentAccount = (routeParams: ImportUsersFromExcelToCurrentAccountDto): IHttpPromise<CEFActionResponseT<Array<number>>> =>
		axios.post(["Contacts", "Users", "ImportFromExcelToCurrentAccount"].join("/"), routeParams);

	/**
	 * Use to set the current user's online status.
	 * @param {@link cef.store.api.SetCurrentUserOnlineStatusDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.SetCurrentUserOnlineStatus
	 * @path <API Root>/Contacts/CurrentUser/SetOnlineStatus
	 * @verb POST
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	SetCurrentUserOnlineStatus = (routeParams: SetCurrentUserOnlineStatusDto): IHttpPromise<CEFActionResponse> =>
		axios.post(["Contacts", "CurrentUser", "SetOnlineStatus"].join("/"), routeParams);

	/**
	 * Use to update the current user's details
	 * @param {@link cef.store.api.UpdateCurrentUserDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrentUser
	 * @path <API Root>/Contacts/CurrentUser/Update
	 * @verb PUT
	 * @returns {ng.IHttpPromise<CEFActionResponse>}
	 * @public
	 */
	UpdateCurrentUser = (routeParams?: UpdateCurrentUserDto): IHttpPromise<CEFActionResponse> =>
		axios.put(["Contacts", "CurrentUser", "Update"].join("/"), routeParams);

	/**
	 * Use to create a new or update an existing contact (as needed).
	 * @param {@link cef.store.api.UpsertContactDto} routeParams - The route parameters as a Body Object
	 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertContact
	 * @path <API Root>/Contacts/Contact/Upsert
	 * @verb POST
	 * @priority 1
	 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
	 * @public
	 */
	UpsertContact = (routeParams?: UpsertContactDto): IHttpPromise<CEFActionResponseT<number>> =>
		axios.post(["Contacts", "Contact", "Upsert"].join("/"), routeParams);
}
