/**
 * @file _api/cvApi.Franchises.ts
 * @author Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
 * @desc Endpoints generated based on C# routes.
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/React/src/_api/
 */

import axios from "../axios";

import {
	ImplementsNameBase,
	FranchiseModel,
	FranchiseCategorySearchModel,
	FranchiseCategoryPagedResults,
	FranchiseSearchModel,
	FranchisePagedResults,
} from "./cvApi._DtoClasses";

import {
	IHttpPromise
} from "./cvApi.shared";

/**
 * Check if this Name exists and return the id if it does (null if it does not)
 * @see {@link ImplementsNameBase}
 * @public
 */
export interface CheckFranchiseExistsByNameDto extends ImplementsNameBase {
}

/**
 * Returns the current franchise ID for the specified user identifier.
 * @public
 */
export interface GetCurrentFranchiseIDDto {
	/** User ID */
	UserID: number;
}

/**
 * Returns the current franchise ID for the specified user identifier.
 * @public
 */
export interface GetCurrentFranchiseIDDto {
	/** User ID */
	UserID: number;
}
/**
 * Use to get a list of franchise categories
 * @see {@link FranchiseCategorySearchModel}
 * @public
 */
export interface GetFranchiseCategoriesDto extends FranchiseCategorySearchModel {
}

/**
 * Use to get a list of franchises
 * @see {@link FranchiseSearchModel}
 * @public
 */
export interface GetFranchisesDto extends FranchiseSearchModel {
}

export class Franchises {
	/**
	 * Check if this ID exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckFranchiseExistsByID
	 * @path <API Root>/Franchises/Franchise/Exists/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckFranchiseExistsByID = (id: number): IHttpPromise<number> =>
		axios.get(["Franchises", "Franchise", "Exists", "ID", id].join("/"));

	/**
	 * Check if this key exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckFranchiseExistsByKey
	 * @path <API Root>/Franchises/Franchise/Exists/Key/{Key*}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckFranchiseExistsByKey = (key: string): IHttpPromise<number> =>
		axios.get(["Franchises", "Franchise", "Exists", "Key", encodeURIComponent(key)].join("/"));

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckFranchiseExistsByName
	 * @path <API Root>/Franchises/Franchise/Exists/Name
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	CheckFranchiseExistsByName = (routeParams?: CheckFranchiseExistsByNameDto): IHttpPromise<number> =>
		axios.get(["Franchises", "Franchise", "Exists", "Name"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Returns the current franchise ID for the specified user identifier.
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentFranchiseID
	 * @path <API Root>/Franchises/CurrentFranchise
	 * @verb GET
	 * @returns {ng.IHttpPromise<number>}
	 * @public
	 */
	GetCurrentFranchiseID = (routeParams: GetCurrentFranchiseIDDto): IHttpPromise<number> =>
		axios.get(["Franchises", "CurrentFranchise"].join("/"),
		{
			params: routeParams
		});
	/**
	 * Use to get a specific franchise
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseByID
	 * @path <API Root>/Franchises/Franchise/ID/{ID}
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<FranchiseModel>}
	 * @public
	 */
	GetFranchiseByID = (id: number): IHttpPromise<FranchiseModel> =>
		axios.get(["Franchises", "Franchise", "ID", id].join("/"));

	/**
	 * Use to get a list of franchise categories
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCategories
	 * @path <API Root>/Franchises/FranchiseCategories
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<FranchiseCategoryPagedResults>}
	 * @public
	 */
	GetFranchiseCategories = (routeParams?: GetFranchiseCategoriesDto): IHttpPromise<FranchiseCategoryPagedResults> =>
		axios.get(["Franchises", "FranchiseCategories"].join("/"),
		{
			params: routeParams
		});

	/**
	 * Use to get a list of franchises
	 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchises
	 * @path <API Root>/Franchises/Franchises
	 * @verb GET
	 * @priority 1
	 * @returns {ng.IHttpPromise<FranchisePagedResults>}
	 * @public
	 */
	GetFranchises = (routeParams?: GetFranchisesDto): IHttpPromise<FranchisePagedResults> =>
		axios.get(["Franchises", "Franchises"].join("/"),
		{
			params: routeParams
		});
}
