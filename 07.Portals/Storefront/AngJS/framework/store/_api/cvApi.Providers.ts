/**
 * @file framework/store/_api/cvApi.Providers.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Analyze the current cart and build target carts for it based on the internal rules.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface AnalyzeCurrentCartToTargetCartsDto extends CheckoutModel {
		/** Reset the analysis results so any previous target setups are removed. */
		ResetAnalysis: boolean;
	}
	/**
	 * Submit the current quote cart of the given session type
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface AnalyzeCurrentQuoteCartToTargetQuoteCartsDto extends CheckoutModel {
	}
	/**
	 * Calculates inventory for the given product identifier. Returns a model containing relevant information about how the inventory was calculated, limits to purchasing, etc.
	 * @public
	 */
	export interface BulkCalculateInventoryDto {
		ProductIDs: Array<number>;
	}
	/**
	 * Returns a boolean value indicating whether there is any available inventory for the given product identifier.
	 * @public
	 */
	export interface BulkCheckHasAnyAvailableInventoryDto {
		ProductIDs: Array<number>;
	}
	/**
	 * Use to cancel an active subscription.
	 * @see {@link ImplementsIDBase}
	 * @public
	 */
	export interface CancelSubscriptionDto extends ImplementsIDBase {
	}
	/**
	 * Clear the current target carts and start over.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ClearCurrentCartToTargetCartsAnalysisDto extends CheckoutModel {
	}
	/**
	 * Clear the current target carts and start over.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ClearCurrentQuoteCartToTargetCartsAnalysisDto extends CheckoutModel {
	}
	/**
	 * Generates a RMA for each item. An email notification will be sent to the customer.
	 * @see {@link SalesReturnModel}
	 * @public
	 */
	export interface CreateSalesReturnFromStorefrontDto extends SalesReturnModel {
	}
	/**
	 * Returns a total sum count of available inventory for the given product identifier.
	 * @public
	 */
	export interface GetBulkAvailableInventoryCountDto {
		ProductIDs: Array<number>;
	}
	/**
	 * Use to get history of invoices for this Account
	 * @see {@link SalesInvoiceSearchModel}
	 * @public
	 */
	export interface GetCurrentAccountSalesInvoicesDto extends SalesInvoiceSearchModel {
	}
	/**
	 * Use to get history of quotes for the current account
	 * @see {@link SalesQuoteSearchModel}
	 * @public
	 */
	export interface GetCurrentAccountSalesQuotesDto extends SalesQuoteSearchModel {
	}
	/**
	 * Use to get history of returns for the current account
	 * @see {@link SalesReturnSearchModel}
	 * @public
	 */
	export interface GetCurrentAccountSalesReturnsDto extends SalesReturnSearchModel {
	}
	/**
	 * Use to get history of sample request for the current account
	 * @see {@link SampleRequestSearchModel}
	 * @public
	 */
	export interface GetCurrentAccountSampleRequestsDto extends SampleRequestSearchModel {
	}
	/**
	 * Use to get history of invoices for this user
	 * @see {@link SalesInvoiceSearchModel}
	 * @public
	 */
	export interface GetCurrentUserSalesInvoicesDto extends SalesInvoiceSearchModel {
	}
	/**
	 * Use to get history of quotes for the current user.
	 * @see {@link SalesQuoteSearchModel}
	 * @public
	 */
	export interface GetCurrentUserSalesQuotesDto extends SalesQuoteSearchModel {
	}
	/**
	 * Use to get history of returns for the current user.
	 * @see {@link SalesReturnSearchModel}
	 * @public
	 */
	export interface GetCurrentUserSalesReturnsDto extends SalesReturnSearchModel {
	}
	/**
	 * Use to get history of sample requests for the current user
	 * @see {@link SampleRequestSearchModel}
	 * @public
	 */
	export interface GetCurrentUserSampleRequestsDto extends SampleRequestSearchModel {
	}
	/**
	 * Use to get the available upgrades.
	 * @public
	 */
	export interface ModifySubscriptionForCurrentUserDto {
		/** The identifier of the subscription to modify. */
		SubscriptionID: number;
		/** When set, will change the billing contact information for the subscription. When null, no action is taken against the Billing Contact. */
		BillingContactID?: number;
		/** When set, will change the shipping contact information for the subscription. When null, no action is taken against the Shipping Contact. */
		ShippingContactID?: number;
	}
	/**
	 * Use to pay multiple invoices, specifying the amount with each one
	 * @public
	 */
	export interface PayMultipleInvoicesByAmountsDto {
		Amounts: cefalt.store.Dictionary<number>;
		Payment: PaymentModel;
		Billing?: ContactModel;
	}
	/**
	 * Provide payment information to a specific invoice by ID.
	 * @public
	 */
	export interface PaySingleInvoiceByIDDto {
		InvoiceID: number;
		Payment: PaymentModel;
		Billing?: ContactModel;
	}
	/**
	 * Checkout the current shopping cart
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessCurrentCartToSingleOrderDto extends CheckoutModel {
	}
	/**
	 * Checkout the current cart of the given session type.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessCurrentCartToTargetOrdersDto extends CheckoutModel {
	}
	/**
	 * Submit the current quote cart of the given session type
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessCurrentQuoteCartToSingleQuoteDto extends CheckoutModel {
	}
	/**
	 * Submit the current quote cart of the given session type.
	 * @see {@link CheckoutModel}
	 * @public
	 */
	export interface ProcessCurrentQuoteCartToTargetQuotesDto extends CheckoutModel {
	}
	/**
	 * Search the auction catalog. Returns a range of data
	 * @see {@link AuctionCatalogSearchForm}
	 * @public
	 */
	export interface SearchAuctionCatalogWithProviderDto extends AuctionCatalogSearchForm {
	}
	/**
	 * Search the category catalog. Returns a range of data
	 * @see {@link CategoryCatalogSearchForm}
	 * @public
	 */
	export interface SearchCategoryCatalogWithProviderDto extends CategoryCatalogSearchForm {
	}
	/**
	 * Search the franchise catalog. Returns a range of data
	 * @see {@link FranchiseCatalogSearchForm}
	 * @public
	 */
	export interface SearchFranchiseCatalogWithProviderDto extends FranchiseCatalogSearchForm {
	}
	/**
	 * Search the lot catalog. Returns a range of data
	 * @see {@link LotCatalogSearchForm}
	 * @public
	 */
	export interface SearchLotCatalogWithProviderDto extends LotCatalogSearchForm {
	}
	/**
	 * Search the manufacturer catalog. Returns a range of data
	 * @see {@link ManufacturerCatalogSearchForm}
	 * @public
	 */
	export interface SearchManufacturerCatalogWithProviderDto extends ManufacturerCatalogSearchForm {
	}
	/**
	 * Search the product catalog. Returns a range of data
	 * @see {@link ProductCatalogSearchForm}
	 * @public
	 */
	export interface SearchProductCatalogWithProviderDto extends ProductCatalogSearchForm {
	}
	/**
	 * Search the store catalog. Returns a range of data
	 * @see {@link StoreCatalogSearchForm}
	 * @public
	 */
	export interface SearchStoreCatalogWithProviderDto extends StoreCatalogSearchForm {
	}
	/**
	 * Search the vendor catalog. Returns a range of data
	 * @see {@link VendorCatalogSearchForm}
	 * @public
	 */
	export interface SearchVendorCatalogWithProviderDto extends VendorCatalogSearchForm {
	}
	/**
	 * Membership Registration Process step 1: Send Invitation (User gets an email with an invite token)
	 * @public
	 */
	export interface SendInvitationDto {
		/** Email to send the invitation to */
		Email: string;
	}
	/**
	 * Use to update a specific sales order item
	 * @public
	 */
	export interface SendReceiptNotificationWithEmailDto {
		/** Order ID */
		OrderID: number;
		/** Email address to send the notification to */
		Email: string;
	}
	/**
	 * Submit a quote for processing by the store
	 * @see {@link SalesQuoteModel}
	 * @public
	 */
	export interface SubmitRequestForQuoteForGenericProductsDto extends SalesQuoteModel {
		DoShareBusinessCardWithSupplier?: boolean;
	}
	/**
	 * Submit a quote for processing by the store
	 * @see {@link SalesQuoteModel}
	 * @public
	 */
	export interface SubmitRequestForQuoteForSingleProductDto extends SalesQuoteModel {
		DoShareBusinessCardWithSupplier?: boolean;
		DoRecommendOtherSuppliers?: boolean;
	}
	/**
	 * Search the auction catalog. Returns a range of data
	 * @see {@link AuctionCatalogSearchForm}
	 * @public
	 */
	export interface SuggestAuctionCatalogWithProviderDto extends AuctionCatalogSearchForm {
	}
	/**
	 * Search the category catalog. Returns a range of data
	 * @see {@link CategoryCatalogSearchForm}
	 * @public
	 */
	export interface SuggestCategoryCatalogWithProviderDto extends CategoryCatalogSearchForm {
	}
	/**
	 * Search the franchise catalog. Returns a range of data
	 * @see {@link FranchiseCatalogSearchForm}
	 * @public
	 */
	export interface SuggestFranchiseCatalogWithProviderDto extends FranchiseCatalogSearchForm {
	}
	/**
	 * Search the lot catalog. Returns a range of data
	 * @see {@link LotCatalogSearchForm}
	 * @public
	 */
	export interface SuggestLotCatalogWithProviderDto extends LotCatalogSearchForm {
	}
	/**
	 * Search the manufacturer catalog. Returns a range of data
	 * @see {@link ManufacturerCatalogSearchForm}
	 * @public
	 */
	export interface SuggestManufacturerCatalogWithProviderDto extends ManufacturerCatalogSearchForm {
	}
	/**
	 * Search the product catalog. Returns a range of data
	 * @see {@link ProductCatalogSearchForm}
	 * @public
	 */
	export interface SuggestProductCatalogWithProviderDto extends ProductCatalogSearchForm {
	}
	/**
	 * Search the store catalog. Returns a range of data
	 * @see {@link StoreCatalogSearchForm}
	 * @public
	 */
	export interface SuggestStoreCatalogWithProviderDto extends StoreCatalogSearchForm {
	}
	/**
	 * Search the vendor catalog. Returns a range of data
	 * @see {@link VendorCatalogSearchForm}
	 * @public
	 */
	export interface SuggestVendorCatalogWithProviderDto extends VendorCatalogSearchForm {
	}
	/**
	 * Use to update a sales return
	 * @see {@link SalesReturnModel}
	 * @public
	 */
	export interface UpdateSalesReturnFromStorefrontDto extends SalesReturnModel {
	}
	/**
	 * Use to validate address with AddressProvider
	 * @public
	 */
	export interface ValidateAddressDto {
		AccountContactID?: number;
		ContactID?: number;
		AddressID?: number;
		Address?: AddressModel;
	}

	export class Providers extends ServiceStackRoute {
		/**
		 * Analyze the current cart and build target carts for it based on the internal rules.
		 * @param {@link cef.store.api.AnalyzeCurrentCartToTargetCartsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.AnalyzeCurrentCartToTargetCarts
		 * @path <API Root>/Providers/Checkout/AnalyzeCurrentCartToTargetCarts
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<CartModel>>>}
		 * @public
		 */
		AnalyzeCurrentCartToTargetCarts = (routeParams: AnalyzeCurrentCartToTargetCartsDto) => this.$http<CEFActionResponseT<Array<CartModel>>>({
			url: [this.rootUrl, "Providers", "Checkout", "AnalyzeCurrentCartToTargetCarts"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Submit the current quote cart of the given session type
		 * @param {@link cef.store.api.AnalyzeCurrentQuoteCartToTargetQuoteCartsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.AnalyzeCurrentQuoteCartToTargetQuoteCarts
		 * @path <API Root>/Providers/SubmitQuote/AnalyzeCurrentQuoteCartToTargetQuoteCarts
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<CartModel>>>}
		 * @public
		 */
		AnalyzeCurrentQuoteCartToTargetQuoteCarts = (routeParams?: AnalyzeCurrentQuoteCartToTargetQuoteCartsDto) => this.$http<CEFActionResponseT<Array<CartModel>>>({
			url: [this.rootUrl, "Providers", "SubmitQuote", "AnalyzeCurrentQuoteCartToTargetQuoteCarts"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Calculates inventory for the given product identifier. Returns a model containing relevant information about how the inventory was calculated, limits to purchasing, etc.
		 * @param {@link cef.store.api.BulkCalculateInventoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.BulkCalculateInventory
		 * @path <API Root>/Providers/Inventory/BulkCalculateInventory
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<CalculatedInventory>>>}
		 * @public
		 */
		BulkCalculateInventory = (routeParams: BulkCalculateInventoryDto) => this.$http<CEFActionResponseT<cefalt.store.Dictionary<CalculatedInventory>>>({
			url: [this.rootUrl, "Providers", "Inventory", "BulkCalculateInventory"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Returns a boolean value indicating whether there is any available inventory for the given product identifier.
		 * @param {@link cef.store.api.BulkCheckHasAnyAvailableInventoryDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.BulkCheckHasAnyAvailableInventory
		 * @path <API Root>/Providers/Inventory/BulkCheckHasAnyAvailableInventory
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<boolean>>>}
		 * @public
		 */
		BulkCheckHasAnyAvailableInventory = (routeParams: BulkCheckHasAnyAvailableInventoryDto) => this.$http<CEFActionResponseT<cefalt.store.Dictionary<boolean>>>({
			url: [this.rootUrl, "Providers", "Inventory", "BulkCheckHasAnyAvailableInventory"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Calculates inventory for the given product identifier. Returns a model containing relevant information about how the inventory was calculated, limits to purchasing, etc.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.CalculateInventory
		 * @path <API Root>/Providers/Inventory/CalculateInventory/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<CalculatedInventory>>}
		 * @public
		 */
		CalculateInventory = (id: number) => this.$http<CEFActionResponseT<CalculatedInventory>>({
			url: [this.rootUrl, "Providers", "Inventory", "CalculateInventory", id].join("/"),
			method: "GET",
		});

		/**
		 * Calculates inventory for the given product and existing units of measure. Returns a model containing relevant information about how the inventory was calculated, limits to purchasing, etc.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.CalculateInventoryForMultipleUOMs
		 * @path <API Root>/Providers/Inventory/CalculateInventoryForMultipleUOMs/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<CalculatedInventory>>>}
		 * @public
		 */
		CalculateInventoryForMultipleUOMs = (id: number) => this.$http<CEFActionResponseT<Array<CalculatedInventory>>>({
			url: [this.rootUrl, "Providers", "Inventory", "CalculateInventoryForMultipleUOMs", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to cancel an active subscription.
		 * @param {@link cef.store.api.CancelSubscriptionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Memberships.CancelSubscription
		 * @path <API Root>/Providers/Payments/CancelSubscription
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CancelSubscription = (routeParams?: CancelSubscriptionDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Payments", "CancelSubscription"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Returns a boolean value indicating whether there is any available inventory for the given product identifier.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.CheckHasAnyAvailableInventory
		 * @path <API Root>/Providers/Inventory/CheckHasAnyAvailableInventory/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<boolean>>}
		 * @public
		 */
		CheckHasAnyAvailableInventory = (id: number) => this.$http<CEFActionResponseT<boolean>>({
			url: [this.rootUrl, "Providers", "Inventory", "CheckHasAnyAvailableInventory", id].join("/"),
			method: "GET",
		});

		/**
		 * Clear the current target carts and start over.
		 * @param {@link cef.store.api.ClearCurrentCartToTargetCartsAnalysisDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ClearCurrentCartToTargetCartsAnalysis
		 * @path <API Root>/Providers/Checkout/ClearCurrentCartToTargetCartsAnalysis
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ClearCurrentCartToTargetCartsAnalysis = (routeParams?: ClearCurrentCartToTargetCartsAnalysisDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Checkout", "ClearCurrentCartToTargetCartsAnalysis"].join("/"),
			method: "DELETE",
			data: routeParams
		});

		/**
		 * Clear the current target carts and start over.
		 * @param {@link cef.store.api.ClearCurrentQuoteCartToTargetCartsAnalysisDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ClearCurrentQuoteCartToTargetCartsAnalysis
		 * @path <API Root>/Providers/SubmitQuote/ClearCurrentCartToTargetCartsAnalysis
		 * @verb DELETE
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ClearCurrentQuoteCartToTargetCartsAnalysis = (routeParams?: ClearCurrentQuoteCartToTargetCartsAnalysisDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "SubmitQuote", "ClearCurrentCartToTargetCartsAnalysis"].join("/"),
			method: "DELETE",
			data: routeParams
		});

		/**
		 * As the customer, convert a quote to an order. This action also marks the quote Approved.
		 * @param {@link cef.store.api.ConvertQuoteToOrderForCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.ConvertQuoteToOrderForCurrentUser
		 * @path <API Root>/Providers/Quoting/Actions/CurrentUser/ConvertToOrder/{ID}
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<{ item1: number, item2: number }>>}
		 * @public
		 */
		ConvertQuoteToOrderForCurrentUser = (id: number) => this.$http<CEFActionResponseT<{ item1: number, item2: number }>>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "CurrentUser", "ConvertToOrder", id].join("/"),
			method: "POST",
		});

		/**
		 * Generates a RMA for each item. An email notification will be sent to the customer.
		 * @param {@link cef.store.api.CreateSalesReturnFromStorefrontDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.CreateSalesReturnFromStorefront
		 * @path <API Root>/Providers/Returning/Actions/CreateSalesReturnFromStorefront
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateSalesReturnFromStorefront = (routeParams?: CreateSalesReturnFromStorefrontDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "CreateSalesReturnFromStorefront"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Returns a total sum count of available inventory for the given product identifier.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.GetAvailableInventoryCount
		 * @path <API Root>/Providers/Inventory/CalculateInventory/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		GetAvailableInventoryCount = (id: number) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Providers", "Inventory", "CalculateInventory", id].join("/"),
			method: "GET",
		});

		/**
		 * Returns a total sum count of available inventory for the given product identifier.
		 * @param {@link cef.store.api.GetBulkAvailableInventoryCountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Inventory.GetBulkAvailableInventoryCount
		 * @path <API Root>/Providers/Inventory/BulkCalculateInventoryCount
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<number>>>}
		 * @public
		 */
		GetBulkAvailableInventoryCount = (routeParams: GetBulkAvailableInventoryCountDto) => this.$http<CEFActionResponseT<cefalt.store.Dictionary<number>>>({
			url: [this.rootUrl, "Providers", "Inventory", "BulkCalculateInventoryCount"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of invoices for this Account
		 * @param {@link cef.store.api.GetCurrentAccountSalesInvoicesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Queries.Services.Endpoints.GetCurrentAccountSalesInvoices
		 * @path <API Root>/Providers/Invoicing/Queries/RecordsForCurrentAccount
		 * @verb POST
		 * @returns {ng.IHttpPromise<SalesInvoicePagedResults>}
		 * @public
		 */
		GetCurrentAccountSalesInvoices = (routeParams?: GetCurrentAccountSalesInvoicesDto) => this.$http<SalesInvoicePagedResults>({
			url: [this.rootUrl, "Providers", "Invoicing", "Queries", "RecordsForCurrentAccount"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of quotes for the current account
		 * @param {@link cef.store.api.GetCurrentAccountSalesQuotesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Queries.Services.Endpoints.GetCurrentAccountSalesQuotes
		 * @path <API Root>/Providers/Quoting/Queries/RecordsForCurrentAccount
		 * @verb POST
		 * @returns {ng.IHttpPromise<SalesQuotePagedResults>}
		 * @public
		 */
		GetCurrentAccountSalesQuotes = (routeParams?: GetCurrentAccountSalesQuotesDto) => this.$http<SalesQuotePagedResults>({
			url: [this.rootUrl, "Providers", "Quoting", "Queries", "RecordsForCurrentAccount"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of returns for the current account
		 * @param {@link cef.store.api.GetCurrentAccountSalesReturnsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Queries.Services.Endpoints.GetCurrentAccountSalesReturns
		 * @path <API Root>/Providers/Returning/Queries/CurrentAccountSalesReturns
		 * @verb POST
		 * @returns {ng.IHttpPromise<SalesReturnPagedResults>}
		 * @public
		 */
		GetCurrentAccountSalesReturns = (routeParams?: GetCurrentAccountSalesReturnsDto) => this.$http<SalesReturnPagedResults>({
			url: [this.rootUrl, "Providers", "Returning", "Queries", "CurrentAccountSalesReturns"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of sample request for the current account
		 * @param {@link cef.store.api.GetCurrentAccountSampleRequestsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Queries.Services.Endpoints.GetCurrentAccountSampleRequests
		 * @path <API Root>/Providers/Sampling/Queries/RecordsForCurrentAccount
		 * @verb POST
		 * @returns {ng.IHttpPromise<SampleRequestPagedResults>}
		 * @public
		 */
		GetCurrentAccountSampleRequests = (routeParams?: GetCurrentAccountSampleRequestsDto) => this.$http<SampleRequestPagedResults>({
			url: [this.rootUrl, "Providers", "Sampling", "Queries", "RecordsForCurrentAccount"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of invoices for this user
		 * @param {@link cef.store.api.GetCurrentUserSalesInvoicesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Queries.Services.Endpoints.GetCurrentUserSalesInvoices
		 * @path <API Root>/Providers/Invoicing/Queries/RecordsForCurrentUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<SalesInvoicePagedResults>}
		 * @public
		 */
		GetCurrentUserSalesInvoices = (routeParams?: GetCurrentUserSalesInvoicesDto) => this.$http<SalesInvoicePagedResults>({
			url: [this.rootUrl, "Providers", "Invoicing", "Queries", "RecordsForCurrentUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of quotes for the current user.
		 * @param {@link cef.store.api.GetCurrentUserSalesQuotesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Queries.Services.Endpoints.GetCurrentUserSalesQuotes
		 * @path <API Root>/Providers/Quoting/Queries/RecordsForCurrentUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<SalesQuotePagedResults>}
		 * @public
		 */
		GetCurrentUserSalesQuotes = (routeParams?: GetCurrentUserSalesQuotesDto) => this.$http<SalesQuotePagedResults>({
			url: [this.rootUrl, "Providers", "Quoting", "Queries", "RecordsForCurrentUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of returns for the current user.
		 * @param {@link cef.store.api.GetCurrentUserSalesReturnsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Queries.Services.Endpoints.GetCurrentUserSalesReturns
		 * @path <API Root>/Providers/Returning/Queries/RecordsForCurrentUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<SalesReturnPagedResults>}
		 * @public
		 */
		GetCurrentUserSalesReturns = (routeParams?: GetCurrentUserSalesReturnsDto) => this.$http<SalesReturnPagedResults>({
			url: [this.rootUrl, "Providers", "Returning", "Queries", "RecordsForCurrentUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get history of sample requests for the current user
		 * @param {@link cef.store.api.GetCurrentUserSampleRequestsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Queries.Services.Endpoints.GetCurrentUserSampleRequests
		 * @path <API Root>/Providers/Sampling/Queries/RecordsForCurrentUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<SampleRequestPagedResults>}
		 * @public
		 */
		GetCurrentUserSampleRequests = (routeParams?: GetCurrentUserSampleRequestsDto) => this.$http<SampleRequestPagedResults>({
			url: [this.rootUrl, "Providers", "Sampling", "Queries", "RecordsForCurrentUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get the discounts for the top level and item levels at the same time.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Queries.Services.Endpoints.GetDiscountsForInvoice
		 * @path <API Root>/Providers/Invoicing/Queries/Secured/DiscountsFor/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<DiscountsForInvoice>}
		 * @public
		 */
		GetDiscountsForInvoice = (id: number) => this.$http<DiscountsForInvoice>({
			url: [this.rootUrl, "Providers", "Invoicing", "Queries", "Secured", "DiscountsFor", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the discounts for the top level and item levels at the same time.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDiscountsForOrder
		 * @path <API Root>/Providers/Ordering/Queries/Secured/DiscountsFor/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<DiscountsForOrderResponse>}
		 * @public
		 */
		GetDiscountsForOrder = (id: number) => this.$http<DiscountsForOrderResponse>({
			url: [this.rootUrl, "Providers", "Ordering", "Queries", "Secured", "DiscountsFor", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the discounts for the top level and item levels at the same time.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Queries.Services.Endpoints.GetDiscountsForQuote
		 * @path <API Root>/Providers/Quoting/Queries/Secured/DiscountsFor/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<DiscountsForQuote>}
		 * @public
		 */
		GetDiscountsForQuote = (id: number) => this.$http<DiscountsForQuote>({
			url: [this.rootUrl, "Providers", "Quoting", "Queries", "Secured", "DiscountsFor", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sales invoice and check for ownership by the current Account.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Queries.Services.Endpoints.GetSecureSalesInvoice
		 * @path <API Root>/Providers/Invoicing/Queries/Secured/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceModel>}
		 * @public
		 */
		GetSecureSalesInvoice = (id: number) => this.$http<SalesInvoiceModel>({
			url: [this.rootUrl, "Providers", "Invoicing", "Queries", "Secured", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sales quote and check for ownership by the current Account.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Queries.Services.Endpoints.GetSecureSalesQuote
		 * @path <API Root>/Providers/Quoting/Queries/Secured/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<SalesQuoteModel>}
		 * @public
		 */
		GetSecureSalesQuote = (id: number) => this.$http<SalesQuoteModel>({
			url: [this.rootUrl, "Providers", "Quoting", "Queries", "Secured", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sales return and check for ownership by the current Account.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Queries.Services.Endpoints.GetSecureSalesReturn
		 * @path <API Root>/Providers/Returning/Queries/Secured/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<SalesReturnModel>}
		 * @public
		 */
		GetSecureSalesReturn = (id: number) => this.$http<SalesReturnModel>({
			url: [this.rootUrl, "Providers", "Returning", "Queries", "Secured", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific sample request and check for ownership by the current Account.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SampleRequestHandlers.Queries.Services.Endpoints.GetSecureSampleRequest
		 * @path <API Root>/Providers/Sampling/Queries/Secured/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<SampleRequestModel>}
		 * @public
		 */
		GetSecureSampleRequest = (id: number) => this.$http<SampleRequestModel>({
			url: [this.rootUrl, "Providers", "Sampling", "Queries", "Secured", id].join("/"),
			method: "GET",
		});

		/**
		 * Test if the Sales Order is eligible for return.
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Queries.Services.Endpoints.IsSalesOrderReadyForReturn
		 * @path <API Root>/Providers/Returning/Queries/IsSalesOrderReadyForReturn/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		IsSalesOrderReadyForReturn = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Queries", "IsSalesOrderReadyForReturn", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the available upgrades.
		 * @param {@link cef.store.api.ModifySubscriptionForCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Memberships.ModifySubscriptionForCurrentUser
		 * @path <API Root>/Providers/Payments/AvailableSubscriptionUpgrades
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ModifySubscriptionForCurrentUser = (routeParams: ModifySubscriptionForCurrentUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Payments", "AvailableSubscriptionUpgrades"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Use to pay multiple invoices, specifying the amount with each one
		 * @param {@link cef.store.api.PayMultipleInvoicesByAmountsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.PayMultipleInvoicesByAmounts
		 * @path <API Root>/Providers/Invoicing/Actions/PayMultiple
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		PayMultipleInvoicesByAmounts = (routeParams: PayMultipleInvoicesByAmountsDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "PayMultiple"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Provide payment information to a specific invoice by ID.
		 * @param {@link cef.store.api.PaySingleInvoiceByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesInvoiceHandlers.Actions.Services.Endpoints.PaySingleInvoiceByID
		 * @path <API Root>/Providers/Invoicing/Actions/Pay
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		PaySingleInvoiceByID = (routeParams: PaySingleInvoiceByIDDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Invoicing", "Actions", "Pay"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Checkout the current shopping cart
		 * @param {@link cef.store.api.ProcessCurrentCartToSingleOrderDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessCurrentCartToSingleOrder
		 * @path <API Root>/Providers/Checkout/ProcessCurrentCartToSingleOrder
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessCurrentCartToSingleOrder = (routeParams?: ProcessCurrentCartToSingleOrderDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "Checkout", "ProcessCurrentCartToSingleOrder"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Checkout the current cart of the given session type.
		 * @param {@link cef.store.api.ProcessCurrentCartToTargetOrdersDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessCurrentCartToTargetOrders
		 * @path <API Root>/Providers/Checkout/ProcessCurrentCartToTargetOrders
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessCurrentCartToTargetOrders = (routeParams?: ProcessCurrentCartToTargetOrdersDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "Checkout", "ProcessCurrentCartToTargetOrders"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Submit the current quote cart of the given session type
		 * @param {@link cef.store.api.ProcessCurrentQuoteCartToSingleQuoteDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessCurrentQuoteCartToSingleQuote
		 * @path <API Root>/Providers/SubmitQuote/ProcessCurrentQuoteCartToSingleQuote
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessCurrentQuoteCartToSingleQuote = (routeParams?: ProcessCurrentQuoteCartToSingleQuoteDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "SubmitQuote", "ProcessCurrentQuoteCartToSingleQuote"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Submit the current quote cart of the given session type.
		 * @param {@link cef.store.api.ProcessCurrentQuoteCartToTargetQuotesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Checkouts.ProcessCurrentQuoteCartToTargetQuotes
		 * @path <API Root>/Providers/SubmitQuote/ProcessCurrentCartToTargetOrders
		 * @verb POST
		 * @returns {ng.IHttpPromise<CheckoutResult>}
		 * @public
		 */
		ProcessCurrentQuoteCartToTargetQuotes = (routeParams?: ProcessCurrentQuoteCartToTargetQuotesDto) => this.$http<CheckoutResult>({
			url: [this.rootUrl, "Providers", "SubmitQuote", "ProcessCurrentCartToTargetOrders"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Search the auction catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchAuctionCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Auctions/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<AuctionSearchViewModel>}
		 * @public
		 */
		SearchAuctionCatalogWithProvider = (routeParams?: SearchAuctionCatalogWithProviderDto) => this.$http<AuctionSearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Auctions", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the category catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchCategoryCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Categories/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<CategorySearchViewModel>}
		 * @public
		 */
		SearchCategoryCatalogWithProvider = (routeParams?: SearchCategoryCatalogWithProviderDto) => this.$http<CategorySearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Categories", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the franchise catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchFranchiseCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Franchises/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<FranchiseSearchViewModel>}
		 * @public
		 */
		SearchFranchiseCatalogWithProvider = (routeParams?: SearchFranchiseCatalogWithProviderDto) => this.$http<FranchiseSearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Franchises", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the lot catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchLotCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Lots/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<LotSearchViewModel>}
		 * @public
		 */
		SearchLotCatalogWithProvider = (routeParams?: SearchLotCatalogWithProviderDto) => this.$http<LotSearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Lots", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the manufacturer catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchManufacturerCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Manufacturers/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<ManufacturerSearchViewModel>}
		 * @public
		 */
		SearchManufacturerCatalogWithProvider = (routeParams?: SearchManufacturerCatalogWithProviderDto) => this.$http<ManufacturerSearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Manufacturers", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the product catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchProductCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Products/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<ProductSearchViewModel>}
		 * @public
		 */
		SearchProductCatalogWithProvider = (routeParams?: SearchProductCatalogWithProviderDto) => this.$http<ProductSearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Products", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the store catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchStoreCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Stores/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<StoreSearchViewModel>}
		 * @public
		 */
		SearchStoreCatalogWithProvider = (routeParams?: SearchStoreCatalogWithProviderDto) => this.$http<StoreSearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Stores", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the vendor catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SearchVendorCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Vendors/Query
		 * @verb GET
		 * @returns {ng.IHttpPromise<VendorSearchViewModel>}
		 * @public
		 */
		SearchVendorCatalogWithProvider = (routeParams?: SearchVendorCatalogWithProviderDto) => this.$http<VendorSearchViewModel>({
			url: [this.rootUrl, "Providers", "Searching", "Vendors", "Query"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Membership Registration Process step 1: Send Invitation (User gets an email with an invite token)
		 * @param {@link cef.store.api.SendInvitationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Emails.SendInvitation
		 * @path <API Root>/Providers/Emails/Authentication/SendInvitation
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SendInvitation = (routeParams: SendInvitationDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Emails", "Authentication", "SendInvitation"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to update a specific sales order item
		 * @param {@link cef.store.api.SendReceiptNotificationWithEmailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Emails.SendReceiptNotificationWithEmail
		 * @path <API Root>/Providers/Emails/ReceiptNotificationToEmailAddress
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SendReceiptNotificationWithEmail = (routeParams: SendReceiptNotificationWithEmailDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Emails", "ReceiptNotificationToEmailAddress"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Approves the specified Quote
		 * @param {@link cef.store.api.SetSalesQuoteAsApprovedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsApproved
		 * @path <API Root>/Providers/Quoting/Actions/Approve/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsApproved = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Approve", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Rejects the specified Quote
		 * @param {@link cef.store.api.SetSalesQuoteAsRejectedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsRejected
		 * @path <API Root>/Providers/Quoting/Actions/Reject/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsRejected = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Reject", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Voids the specified Quote
		 * @param {@link cef.store.api.SetSalesQuoteAsVoidedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SetSalesQuoteAsVoided
		 * @path <API Root>/Providers/Quoting/Actions/Void/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesQuoteAsVoided = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "Void", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The return will be set to 'Canceled' status, no further modifications will be allowed. An email notification will be sent to the customer.
		 * @param {@link cef.store.api.SetSalesReturnAsCancelledDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.SetSalesReturnAsCancelled
		 * @path <API Root>/Providers/Returning/Actions/Cancel/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesReturnAsCancelled = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "Cancel", id].join("/"),
			method: "PATCH",
		});

		/**
		 * The return will be set to 'Shipped' status. An email notification will be sent to the customer.
		 * @param {@link cef.store.api.SetSalesReturnAsShippedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.SetSalesReturnAsShipped
		 * @path <API Root>/Providers/Returning/Actions/Shipped/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetSalesReturnAsShipped = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "Shipped", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Submit a quote for processing by the store
		 * @param {@link cef.store.api.SubmitRequestForQuoteForGenericProductsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SubmitRequestForQuoteForGenericProducts
		 * @path <API Root>/Providers/Quoting/Actions/SubmitForGenericProducts
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SubmitRequestForQuoteForGenericProducts = (routeParams?: SubmitRequestForQuoteForGenericProductsDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "SubmitForGenericProducts"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Submit a quote for processing by the store
		 * @param {@link cef.store.api.SubmitRequestForQuoteForSingleProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesQuoteHandlers.Actions.Services.Endpoints.SubmitRequestForQuoteForSingleProduct
		 * @path <API Root>/Providers/Quoting/Actions/SubmitForSingleProduct
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SubmitRequestForQuoteForSingleProduct = (routeParams?: SubmitRequestForQuoteForSingleProductDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Providers", "Quoting", "Actions", "SubmitForSingleProduct"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Search the auction catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestAuctionCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Auctions/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AuctionSuggestResult>>}
		 * @public
		 */
		SuggestAuctionCatalogWithProvider = (routeParams?: SuggestAuctionCatalogWithProviderDto) => this.$http<Array<AuctionSuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Auctions", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the category catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestCategoryCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Categories/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<CategorySuggestResult>>}
		 * @public
		 */
		SuggestCategoryCatalogWithProvider = (routeParams?: SuggestCategoryCatalogWithProviderDto) => this.$http<Array<CategorySuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Categories", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the franchise catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestFranchiseCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Franchises/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<FranchiseSuggestResult>>}
		 * @public
		 */
		SuggestFranchiseCatalogWithProvider = (routeParams?: SuggestFranchiseCatalogWithProviderDto) => this.$http<Array<FranchiseSuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Franchises", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the lot catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestLotCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Lots/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<LotSuggestResult>>}
		 * @public
		 */
		SuggestLotCatalogWithProvider = (routeParams?: SuggestLotCatalogWithProviderDto) => this.$http<Array<LotSuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Lots", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the manufacturer catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestManufacturerCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Manufacturers/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<ManufacturerSuggestResult>>}
		 * @public
		 */
		SuggestManufacturerCatalogWithProvider = (routeParams?: SuggestManufacturerCatalogWithProviderDto) => this.$http<Array<ManufacturerSuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Manufacturers", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the product catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestProductCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Products/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<ProductSuggestResult>>}
		 * @public
		 */
		SuggestProductCatalogWithProvider = (routeParams?: SuggestProductCatalogWithProviderDto) => this.$http<Array<ProductSuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Products", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the store catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestStoreCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Stores/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<StoreSuggestResult>>}
		 * @public
		 */
		SuggestStoreCatalogWithProvider = (routeParams?: SuggestStoreCatalogWithProviderDto) => this.$http<Array<StoreSuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Stores", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the vendor catalog. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.Searching.ElasticSearch.SuggestVendorCatalogWithProvider
		 * @path <API Root>/Providers/Searching/Vendors/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<VendorSuggestResult>>}
		 * @public
		 */
		SuggestVendorCatalogWithProvider = (routeParams?: SuggestVendorCatalogWithProviderDto) => this.$http<Array<VendorSuggestResult>>({
			url: [this.rootUrl, "Providers", "Searching", "Vendors", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to update a sales return
		 * @param {@link cef.store.api.UpdateSalesReturnFromStorefrontDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.SalesReturnHandlers.Actions.Services.Endpoints.UpdateSalesReturnFromStorefront
		 * @path <API Root>/Providers/Returning/Actions/UpdateSalesReturnFromStorefront
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateSalesReturnFromStorefront = (routeParams?: UpdateSalesReturnFromStorefrontDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Providers", "Returning", "Actions", "UpdateSalesReturnFromStorefront"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to validate address with AddressProvider
		 * @param {@link cef.store.api.ValidateAddressDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Providers.AddressValidation.ValidateAddress
		 * @path <API Root>/Providers/Geography/ValidateAddress
		 * @verb POST
		 * @returns {ng.IHttpPromise<AddressValidationResultModel>}
		 * @public
		 */
		ValidateAddress = (routeParams?: ValidateAddressDto) => this.$http<AddressValidationResultModel>({
			url: [this.rootUrl, "Providers", "Geography", "ValidateAddress"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
