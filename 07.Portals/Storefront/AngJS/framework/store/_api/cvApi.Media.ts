/**
 * @file framework/store/_api/cvApi.Media.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * FileUrl
	 * @public
	 */
	export interface GetStoredFileUrlDto {
		EntityType: FileEntityType;
		FileKey: string;
	}
	/**
	 * Upload stored files of any type and they will be injected with your model as you save them (e.g.- Create/Update Product, Category, etc)
	 * @public
	 */
	export interface UploadStoredFileDto {
		EntityFileType: FileEntityType;
		Name?: string;
		Async: boolean;
	}

	export class Media extends ServiceStackRoute {
		/**
		 * FileUrl
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoredFileUrl
		 * @path <API Root>/Media/StoredFiles/Url
		 * @verb GET
		 * @returns {ng.IHttpPromise<string>}
		 * @public
		 */
		GetStoredFileUrl = (routeParams: GetStoredFileUrlDto) => this.$http<string>({
			url: [this.rootUrl, "Media", "StoredFiles", "Url"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get Upload StoredFile Results
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUploadStoredFileResults
		 * @path <API Root>/Media/StoredFiles/UploadResults/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<IUploadResponse>}
		 * @public
		 */
		GetUploadStoredFileResults = (id: string) => this.$http<IUploadResponse>({
			url: [this.rootUrl, "Media", "StoredFiles", "UploadResults", encodeURIComponent(id)].join("/"),
			method: "GET",
		});

		/**
		 * Upload stored files of any type and they will be injected with your model as you save them (e.g.- Create/Update Product, Category, etc)
		 * @param {@link cef.store.api.UploadStoredFileDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UploadStoredFile
		 * @path <API Root>/Media/StoredFiles/Upload
		 * @verb POST
		 * @returns {ng.IHttpPromise<IUploadResponse>}
		 * @public
		 */
		UploadStoredFile = (routeParams: UploadStoredFileDto) => this.$http<IUploadResponse>({
			url: [this.rootUrl, "Media", "StoredFiles", "Upload"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
