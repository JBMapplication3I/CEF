/**
 * @file framework/store/_api/cvApi.Messaging.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Use to create a new conversation.
	 * @see {@link ConversationModel}
	 * @public
	 */
	export interface CreateConversationDto extends ConversationModel {
	}
	/**
	 * Use to create a new message.
	 * @see {@link MessageModel}
	 * @public
	 */
	export interface CreateMessageDto extends MessageModel {
	}
	/**
	 * Use to get conversation headers for the current user
	 * @see {@link ConversationSearchModel}
	 * @public
	 */
	export interface GetConversationHeadersForCurrentUserDto extends ConversationSearchModel {
	}
	/**
	 * Use to get all messages for all non-ended conversations with the current user. Include a PostedSince to limit by time-frame for monitoring calls.
	 * @public
	 */
	export interface GetMessagesForActiveConversationsForCurrentUserDto {
		PostedSince?: Date;
	}
	/**
	 * Use to get messages
	 * @see {@link MessageSearchModel}
	 * @public
	 */
	export interface GetMessagesForCurrentUserDto extends MessageSearchModel {
	}
	/**
	 * Use to get all messages for all ended conversations with the current user. Include a PostedSince to limit by time-frame for monitoring calls.
	 * @public
	 */
	export interface GetMessagesForEndedConversationsForCurrentUserDto {
		ID?: number;
		PostedSince?: Date;
	}
	/**
	 * Use to get messages
	 * @see {@link MessageSearchModel}
	 * @public
	 */
	export interface GetMessagesFromCurrentUserDto extends MessageSearchModel {
	}
	/**
	 * Use to add a message to a conversation, all message recipients in the conversation will see the message.
	 * @see {@link MessageModel}
	 * @public
	 */
	export interface PostMessageToConversationDto extends MessageModel {
	}
	/**
	 * Use to update an existing message.
	 * @see {@link MessageModel}
	 * @public
	 */
	export interface UpdateMessageDto extends MessageModel {
	}

	export class Messaging extends ServiceStackRoute {
		/**
		 * Use to create a new conversation.
		 * @param {@link cef.store.api.CreateConversationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateConversation
		 * @path <API Root>/Messaging/Conversation/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateConversation = (routeParams?: CreateConversationDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "Conversation", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new message.
		 * @param {@link cef.store.api.CreateMessageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateMessage
		 * @path <API Root>/Messaging/Message/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateMessage = (routeParams?: CreateMessageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "Message", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Deactivate a specific message from the system [Soft-Delete]
		 * @param {@link cef.store.api.DeactivateMessageByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeactivateMessageByID
		 * @path <API Root>/Messaging/Message/Deactivate/ID/{ID}
		 * @verb PATCH
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeactivateMessageByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Message", "Deactivate", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Use to set a conversation as ended. If it was set to copy, then an email of the conversation will be sent to the user.
		 * @param {@link cef.store.api.EndConversationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.EndConversation
		 * @path <API Root>/Messaging/Conversation/End/{ID}
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		EndConversation = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Conversation", "End", id].join("/"),
			method: "POST",
		});

		/**
		 * Use to get conversation headers for the current user
		 * @param {@link cef.store.api.GetConversationHeadersForCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetConversationHeadersForCurrentUser
		 * @path <API Root>/Messaging/CurrentUser/ConversationHeaders
		 * @verb POST
		 * @returns {ng.IHttpPromise<ConversationPagedResults>}
		 * @public
		 */
		GetConversationHeadersForCurrentUser = (routeParams?: GetConversationHeadersForCurrentUserDto) => this.$http<ConversationPagedResults>({
			url: [this.rootUrl, "Messaging", "CurrentUser", "ConversationHeaders"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a specific message
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessageByID
		 * @path <API Root>/Messaging/Message/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<MessageModel>}
		 * @public
		 */
		GetMessageByID = (id: number) => this.$http<MessageModel>({
			url: [this.rootUrl, "Messaging", "Message", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get all messages for all non-ended conversations with the current user. Include a PostedSince to limit by time-frame for monitoring calls.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessagesForActiveConversationsForCurrentUser
		 * @path <API Root>/Messaging/CurrentUser/Messages/ActiveConversations
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<Array<MessageModel>>>>}
		 * @public
		 */
		GetMessagesForActiveConversationsForCurrentUser = (routeParams?: GetMessagesForActiveConversationsForCurrentUserDto) => this.$http<CEFActionResponseT<cefalt.store.Dictionary<Array<MessageModel>>>>({
			url: [this.rootUrl, "Messaging", "CurrentUser", "Messages", "ActiveConversations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get messages
		 * @param {@link cef.store.api.GetMessagesForCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessagesForCurrentUser
		 * @path <API Root>/Messaging/CurrentUser/Messages
		 * @verb POST
		 * @returns {ng.IHttpPromise<MessagePagedResults>}
		 * @public
		 */
		GetMessagesForCurrentUser = (routeParams?: GetMessagesForCurrentUserDto) => this.$http<MessagePagedResults>({
			url: [this.rootUrl, "Messaging", "CurrentUser", "Messages"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get all messages for all ended conversations with the current user. Include a PostedSince to limit by time-frame for monitoring calls.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessagesForEndedConversationsForCurrentUser
		 * @path <API Root>/Messaging/CurrentUser/Messages/EndedConversations
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<Array<MessageModel>>>>}
		 * @public
		 */
		GetMessagesForEndedConversationsForCurrentUser = (routeParams?: GetMessagesForEndedConversationsForCurrentUserDto) => this.$http<CEFActionResponseT<cefalt.store.Dictionary<Array<MessageModel>>>>({
			url: [this.rootUrl, "Messaging", "CurrentUser", "Messages", "EndedConversations"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get messages
		 * @param {@link cef.store.api.GetMessagesFromCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMessagesFromCurrentUser
		 * @path <API Root>/Messaging/CurrentUser/Messages/From
		 * @verb POST
		 * @returns {ng.IHttpPromise<MessagePagedResults>}
		 * @public
		 */
		GetMessagesFromCurrentUser = (routeParams?: GetMessagesFromCurrentUserDto) => this.$http<MessagePagedResults>({
			url: [this.rootUrl, "Messaging", "CurrentUser", "Messages", "From"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get the typing states for other users in your non-ended conversations.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetOtherConversationUsersTypingStatuses
		 * @path <API Root>/Messaging/ConversationUser/GetTypingStateForOtherConversationUsers
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<UserTypingStatus>>>}
		 * @public
		 */
		GetOtherConversationUsersTypingStatuses = () => this.$http<CEFActionResponseT<Array<UserTypingStatus>>>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "GetTypingStateForOtherConversationUsers"].join("/"),
			method: "GET",
		});

		/**
		 * Use to add a message to a conversation, all message recipients in the conversation will see the message.
		 * @param {@link cef.store.api.PostMessageToConversationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.PostMessageToConversation
		 * @path <API Root>/Messaging/Conversation/PostMessage
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<MessageModel>>}
		 * @public
		 */
		PostMessageToConversation = (routeParams?: PostMessageToConversationDto) => this.$http<CEFActionResponseT<MessageModel>>({
			url: [this.rootUrl, "Messaging", "Conversation", "PostMessage"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to set a conversation that when it ends, it should send an email to the user
		 * @param {@link cef.store.api.SetConversationToCopyDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.SetConversationToCopy
		 * @path <API Root>/Messaging/Conversation/SetToCopy/{ID}
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetConversationToCopy = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "Conversation", "SetToCopy", id].join("/"),
			method: "PUT",
		});

		/**
		 * Use to set the typing state while the user is typing.
		 * @param {@link cef.store.api.SetConversationUserTypingStateForCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.SetConversationUserTypingStateForCurrentUser
		 * @path <API Root>/Messaging/ConversationUser/CurrentUser/SetTypingState/{IsTyping}
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetConversationUserTypingStateForCurrentUser = (isTyping: boolean) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Messaging", "ConversationUser", "CurrentUser", "SetTypingState", isTyping].join("/"),
			method: "POST",
		});

		/**
		 * Use to update an existing message.
		 * @param {@link cef.store.api.UpdateMessageDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateMessage
		 * @path <API Root>/Messaging/Message/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateMessage = (routeParams?: UpdateMessageDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Messaging", "Message", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
