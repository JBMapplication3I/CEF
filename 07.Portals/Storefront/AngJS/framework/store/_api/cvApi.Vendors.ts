/**
 * @file framework/store/_api/cvApi.Vendors.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckVendorExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to get a list of vendors
	 * @see {@link VendorSearchModel}
	 * @public
	 */
	export interface GetVendorsDto extends VendorSearchModel {
	}

	export class Vendors extends ServiceStackRoute {
		/**
		 * Check if this ID exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckVendorExistsByID
		 * @path <API Root>/Vendors/Vendor/Exists/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckVendorExistsByID = (id: number) => this.$http<number>({
			url: [this.rootUrl, "Vendors", "Vendor", "Exists", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckVendorExistsByKey
		 * @path <API Root>/Vendors/Vendor/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckVendorExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Vendors", "Vendor", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckVendorExistsByName
		 * @path <API Root>/Vendors/Vendor/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckVendorExistsByName = (routeParams?: CheckVendorExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Vendors", "Vendor", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific vendor
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendorByID
		 * @path <API Root>/Vendors/Vendor/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorModel>}
		 * @public
		 */
		GetVendorByID = (id: number) => this.$http<VendorModel>({
			url: [this.rootUrl, "Vendors", "Vendor", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of vendors
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetVendors
		 * @path <API Root>/Vendors/Vendors
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<VendorPagedResults>}
		 * @public
		 */
		GetVendors = (routeParams?: GetVendorsDto) => this.$http<VendorPagedResults>({
			url: [this.rootUrl, "Vendors", "Vendors"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
