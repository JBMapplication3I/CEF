/**
 * @file framework/store/_api/cvApi.Categories.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckCategoryExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this SEO URL exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsSeoUrlBase}
	 * @public
	 */
	export interface CheckCategoryExistsBySeoUrlDto extends ImplementsSeoUrlBase {
	}
	/**
	 * Use to get a list of categories
	 * @see {@link CategorySearchModel}
	 * @public
	 */
	export interface GetCategoriesDto extends CategorySearchModel {
	}
	/**
	 * Use to get three levels of categories
	 * @see {@link CategorySearchModel}
	 * @public
	 */
	export interface GetCategoriesThreeLevelsDto extends CategorySearchModel {
	}
	/**
	 * Use to get a specific category
	 * @public
	 */
	export interface GetCategoryByIDDto {
		/** When true, don't map out the Product Categories (use when this would result in a lot of unnecessary data) */
		ExcludeProductCategories?: boolean;
	}
	/**
	 * Use to get a specific category by the custom key
	 * @see {@link ImplementsKeyOnQueryBase}
	 * @public
	 */
	export interface GetCategoryByKeyDto extends ImplementsKeyOnQueryBase {
		/** When true, don't map out the Product Categories (use when this would result in a lot of unnecessary data) */
		ExcludeProductCategories?: boolean;
	}
	/**
	 * Use to get a specific category by the SEO URL
	 * @see {@link ImplementsSeoUrlBase}
	 * @public
	 */
	export interface GetCategoryBySeoUrlDto extends ImplementsSeoUrlBase {
		/** When true, don't map out the Product Categories (use when this would result in a lot of unnecessary data) */
		ExcludeProductCategories?: boolean;
	}
	/**
	 * Get Category by SEO URL for just the SEO Metadata
	 * @public
	 */
	export interface GetCategoryForMetaDataDto {
		/** The SEO URL of the Category to locate */
		SeoUrl: string;
	}
	/**
	 * Use to get a list of category images
	 * @see {@link CategoryImageSearchModel}
	 * @public
	 */
	export interface GetCategoryImagesDto extends CategoryImageSearchModel {
	}
	/**
	 * Use to get a tree of categories. Include the ParentID and set IncludeChildrenInResults to false and this can function as lazy loading for Kendo Trees.
	 * @see {@link CategorySearchModel}
	 * @public
	 */
	export interface GetCategoryTreeDto extends CategorySearchModel {
	}
	/**
	 * Use to get a list of category types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetCategoryTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get three levels of categories
	 * @see {@link CategorySearchModel}
	 * @public
	 */
	export interface GetMenuCategoriesThreeLevelsDto extends CategorySearchModel {
	}

	export class Categories extends ServiceStackRoute {
		/**
		 * Check if this ID exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsByID
		 * @path <API Root>/Categories/Category/Exists/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCategoryExistsByID = (id: number) => this.$http<number>({
			url: [this.rootUrl, "Categories", "Category", "Exists", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsByKey
		 * @path <API Root>/Categories/Category/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCategoryExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Categories", "Category", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsByName
		 * @path <API Root>/Categories/Category/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCategoryExistsByName = (routeParams?: CheckCategoryExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Categories", "Category", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this SEO URL exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCategoryExistsBySeoUrl
		 * @path <API Root>/Categories/Category/Exists/SeoUrl
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCategoryExistsBySeoUrl = (routeParams?: CheckCategoryExistsBySeoUrlDto) => this.$http<number>({
			url: [this.rootUrl, "Categories", "Category", "Exists", "SeoUrl"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategories
		 * @path <API Root>/Categories/Categories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CategoryPagedResults>}
		 * @public
		 */
		GetCategories = (routeParams?: GetCategoriesDto) => this.$http<CategoryPagedResults>({
			url: [this.rootUrl, "Categories", "Categories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get three levels of categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoriesThreeLevels
		 * @path <API Root>/Categories/Levels/Three
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<CategoryModel>>}
		 * @public
		 */
		GetCategoriesThreeLevels = (routeParams?: GetCategoriesThreeLevelsDto) => this.$http<Array<CategoryModel>>({
			url: [this.rootUrl, "Categories", "Levels", "Three"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryByID
		 * @path <API Root>/Categories/Category/ID
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CategoryModel>}
		 * @public
		 */
		GetCategoryByID = (routeParams?: GetCategoryByIDDto) => this.$http<CategoryModel>({
			url: [this.rootUrl, "Categories", "Category", "ID"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific category by the custom key
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryByKey
		 * @path <API Root>/Categories/Category/Key
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CategoryModel>}
		 * @public
		 */
		GetCategoryByKey = (routeParams?: GetCategoryByKeyDto) => this.$http<CategoryModel>({
			url: [this.rootUrl, "Categories", "Category", "Key"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific category by the SEO URL
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryBySeoUrl
		 * @path <API Root>/Categories/Category/SeoUrl
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CategoryModel>}
		 * @public
		 */
		GetCategoryBySeoUrl = (routeParams?: GetCategoryBySeoUrlDto) => this.$http<CategoryModel>({
			url: [this.rootUrl, "Categories", "Category", "SeoUrl"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get Category by SEO URL for just the SEO Metadata
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryForMetaData
		 * @path <API Root>/Categories/Category/Metadata
		 * @verb GET
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		GetCategoryForMetaData = (routeParams: GetCategoryForMetaDataDto) => this.$http<void>({
			url: [this.rootUrl, "Categories", "Category", "Metadata"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific category image
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryImageByID
		 * @path <API Root>/Categories/CategoryImage/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CategoryImageModel>}
		 * @public
		 */
		GetCategoryImageByID = (id: number) => this.$http<CategoryImageModel>({
			url: [this.rootUrl, "Categories", "CategoryImage", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of category images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryImages
		 * @path <API Root>/Categories/CategoryImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CategoryImagePagedResults>}
		 * @public
		 */
		GetCategoryImages = (routeParams?: GetCategoryImagesDto) => this.$http<CategoryImagePagedResults>({
			url: [this.rootUrl, "Categories", "CategoryImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a tree of categories. Include the ParentID and set IncludeChildrenInResults to false and this can function as lazy loading for Kendo Trees.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryTree
		 * @path <API Root>/Categories/Tree
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<ProductCategorySelectorModel>>}
		 * @public
		 */
		GetCategoryTree = (routeParams?: GetCategoryTreeDto) => this.$http<Array<ProductCategorySelectorModel>>({
			url: [this.rootUrl, "Categories", "Tree"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of category types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCategoryTypes
		 * @path <API Root>/Categories/CategoryTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CategoryTypePagedResults>}
		 * @public
		 */
		GetCategoryTypes = (routeParams?: GetCategoryTypesDto) => this.$http<CategoryTypePagedResults>({
			url: [this.rootUrl, "Categories", "CategoryTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get three levels of categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMenuCategoriesThreeLevels
		 * @path <API Root>/Categories/MenuLevels/Three
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<MenuCategoryModel>>}
		 * @public
		 */
		GetMenuCategoriesThreeLevels = (routeParams?: GetMenuCategoriesThreeLevelsDto) => this.$http<Array<MenuCategoryModel>>({
			url: [this.rootUrl, "Categories", "MenuLevels", "Three"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPersonalizedCategoriesForCurrentUser
		 * @path <API Root>/Categories/Personalization/ForCurrentUser
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<CategoryModel>>}
		 * @public
		 */
		GetPersonalizedCategoriesForCurrentUser = () => this.$http<Array<CategoryModel>>({
			url: [this.rootUrl, "Categories", "Personalization", "ForCurrentUser"].join("/"),
			method: "GET",
		});

	}
}
