/**
 * @file framework/store/_api/cvApi.Pricing.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Calculates the minimum and maximum price for variants
	 * @public
	 */
	export interface CalculateMinMaxVariantPricesDto {
		ProductID: number;
	}
	/**
	 * Calculate the prices for multiple products by IDs.
	 * @public
	 */
	export interface CalculatePricesForProductsDto {
		ProductIDs: Array<number>;
	}
	/**
	 * Use to create a new price rule.
	 * @see {@link PriceRuleModel}
	 * @public
	 */
	export interface CreatePriceRuleDto extends PriceRuleModel {
	}
	/**
	 * Use to get a list of price points
	 * @see {@link PricePointSearchModel}
	 * @public
	 */
	export interface GetPricePointsDto extends PricePointSearchModel {
	}
	/**
	 * Use to get a list of price rules
	 * @see {@link PriceRuleSearchModel}
	 * @public
	 */
	export interface GetPriceRulesDto extends PriceRuleSearchModel {
	}
	/**
	 * Updates the order's status from Fusion.
	 * @public
	 */
	export interface PriceListToAccountAndProductRolesDto {
		PriceListID: number;
		PriceListName: string;
		AccountKey: string;
	}
	/**
	 * Use to update an existing price rule.
	 * @see {@link PriceRuleModel}
	 * @public
	 */
	export interface UpdatePriceRuleDto extends PriceRuleModel {
	}

	export class Pricing extends ServiceStackRoute {
		/**
		 * Calculates the minimum and maximum price for variants
		 * @param {@link cef.store.api.CalculateMinMaxVariantPricesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CalculateMinMaxVariantPrices
		 * @path <API Root>/Pricing/Prices/RangeForVariants
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<MinMaxCalculatedPrices>>}
		 * @public
		 */
		CalculateMinMaxVariantPrices = (routeParams: CalculateMinMaxVariantPricesDto) => this.$http<CEFActionResponseT<IMinMaxCalculatedPrices>>({
			url: [this.rootUrl, "Pricing", "Prices", "RangeForVariants"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Calculate the price for a product by ID.
		 * @param {@link cef.store.api.CalculatePricesForProductDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CalculatePricesForProduct
		 * @path <API Root>/Pricing/Prices/ForProduct/{ProductID}/Quantity/{Quantity}
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<CalculatedPrice>>}
		 * @public
		 */
		CalculatePricesForProduct = (productID: number, quantity: number) => this.$http<CEFActionResponseT<CalculatedPrice>>({
			url: [this.rootUrl, "Pricing", "Prices", "ForProduct", productID, "Quantity", quantity].join("/"),
			method: "POST",
		});

		/**
		 * Calculate the prices for multiple products by IDs.
		 * @param {@link cef.store.api.CalculatePricesForProductsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CalculatePricesForProducts
		 * @path <API Root>/Pricing/Prices/ForProducts
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<CalculatedPrice>>>}
		 * @public
		 */
		CalculatePricesForProducts = (routeParams: CalculatePricesForProductsDto) => this.$http<CEFActionResponseT<cefalt.store.Dictionary<CalculatedPrice>>>({
			url: [this.rootUrl, "Pricing", "Prices", "ForProducts"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new price rule.
		 * @param {@link cef.store.api.CreatePriceRuleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreatePriceRule
		 * @path <API Root>/Pricing/PriceRule/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreatePriceRule = (routeParams?: CreatePriceRuleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Removes a specific price rule from the system [Hard-Delete]
		 * @param {@link cef.store.api.DeletePriceRuleByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeletePriceRuleByID
		 * @path <API Root>/Pricing/PriceRule/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeletePriceRuleByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a list of price points
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPricePoints
		 * @path <API Root>/Pricing/PricePoints
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PricePointPagedResults>}
		 * @public
		 */
		GetPricePoints = (routeParams?: GetPricePointsDto) => this.$http<PricePointPagedResults>({
			url: [this.rootUrl, "Pricing", "PricePoints"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific price rule
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRuleByID
		 * @path <API Root>/Pricing/PriceRule/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRuleModel>}
		 * @public
		 */
		GetPriceRuleByID = (id: number) => this.$http<PriceRuleModel>({
			url: [this.rootUrl, "Pricing", "PriceRule", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of price rules
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPriceRules
		 * @path <API Root>/Pricing/PriceRules
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<PriceRulePagedResults>}
		 * @public
		 */
		GetPriceRules = (routeParams?: GetPriceRulesDto) => this.$http<PriceRulePagedResults>({
			url: [this.rootUrl, "Pricing", "PriceRules"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Updates the order's status from Fusion.
		 * @param {@link cef.store.api.PriceListToAccountAndProductRolesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Clients.JBM.PriceListToAccountAndProductRoles
		 * @path <API Root>/Pricing/PriceListToAccountAndProductRoles
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		PriceListToAccountAndProductRoles = (routeParams: PriceListToAccountAndProductRolesDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Pricing", "PriceListToAccountAndProductRoles"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to update an existing price rule.
		 * @param {@link cef.store.api.UpdatePriceRuleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdatePriceRule
		 * @path <API Root>/Pricing/PriceRule/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdatePriceRule = (routeParams?: UpdatePriceRuleDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Pricing", "PriceRule", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
