/**
 * @file framework/store/_api/cvApi.Franchises.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckFranchiseExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Returns the current franchise ID for the specified user identifier.
	 * @public
	 */
	export interface GetCurrentFranchiseIDDto {
		/** User ID */
		UserID: number;
	}
	/**
	 * Use to get a list of franchise categories
	 * @see {@link FranchiseCategorySearchModel}
	 * @public
	 */
	export interface GetFranchiseCategoriesDto extends FranchiseCategorySearchModel {
	}
	/**
	 * Use to get a list of franchises
	 * @see {@link FranchiseSearchModel}
	 * @public
	 */
	export interface GetFranchisesDto extends FranchiseSearchModel {
	}

	export class Franchises extends ServiceStackRoute {
		/**
		 * Check if this ID exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckFranchiseExistsByID
		 * @path <API Root>/Franchises/Franchise/Exists/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckFranchiseExistsByID = (id: number) => this.$http<number>({
			url: [this.rootUrl, "Franchises", "Franchise", "Exists", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckFranchiseExistsByKey
		 * @path <API Root>/Franchises/Franchise/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckFranchiseExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Franchises", "Franchise", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckFranchiseExistsByName
		 * @path <API Root>/Franchises/Franchise/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckFranchiseExistsByName = (routeParams?: CheckFranchiseExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Franchises", "Franchise", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Returns the current franchise ID for the specified user identifier.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentFranchiseID
		 * @path <API Root>/Franchises/CurrentFranchise
		 * @verb GET
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		GetCurrentFranchiseID = (routeParams: GetCurrentFranchiseIDDto) => this.$http<number>({
			url: [this.rootUrl, "Franchises", "CurrentFranchise"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific franchise
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseByID
		 * @path <API Root>/Franchises/Franchise/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseModel>}
		 * @public
		 */
		GetFranchiseByID = (id: number) => this.$http<FranchiseModel>({
			url: [this.rootUrl, "Franchises", "Franchise", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of franchise categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchiseCategories
		 * @path <API Root>/Franchises/FranchiseCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchiseCategoryPagedResults>}
		 * @public
		 */
		GetFranchiseCategories = (routeParams?: GetFranchiseCategoriesDto) => this.$http<FranchiseCategoryPagedResults>({
			url: [this.rootUrl, "Franchises", "FranchiseCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of franchises
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetFranchises
		 * @path <API Root>/Franchises/Franchises
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<FranchisePagedResults>}
		 * @public
		 */
		GetFranchises = (routeParams?: GetFranchisesDto) => this.$http<FranchisePagedResults>({
			url: [this.rootUrl, "Franchises", "Franchises"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
