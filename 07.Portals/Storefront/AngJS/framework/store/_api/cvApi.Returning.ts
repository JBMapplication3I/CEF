/**
 * @file framework/store/_api/cvApi.Returning.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStateExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesReturnStatusExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesReturnTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesReturnTypeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to get a list of sales return events
	 * @see {@link SalesReturnEventSearchModel}
	 * @public
	 */
	export interface GetSalesReturnEventsDto extends SalesReturnEventSearchModel {
	}
	/**
	 * Use to get a list of sales return reasons
	 * @see {@link SalesReturnReasonSearchModel}
	 * @public
	 */
	export interface GetSalesReturnReasonsDto extends SalesReturnReasonSearchModel {
	}
	/**
	 * Use to get a list of sales returns
	 * @see {@link SalesReturnSearchModel}
	 * @public
	 */
	export interface GetSalesReturnsDto extends SalesReturnSearchModel {
	}
	/**
	 * Use to get a list of sales return states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetSalesReturnStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of sales return statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSalesReturnStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of sales return types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesReturnTypesDto extends TypeSearchModel {
	}

	export class Returning extends ServiceStackRoute {
		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByDisplayName
		 * @path <API Root>/Returning/SalesReturnState/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStateExistsByDisplayName = (routeParams?: CheckSalesReturnStateExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByKey
		 * @path <API Root>/Returning/SalesReturnState/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStateExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStateExistsByName
		 * @path <API Root>/Returning/SalesReturnState/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStateExistsByName = (routeParams?: CheckSalesReturnStateExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByDisplayName
		 * @path <API Root>/Returning/SalesReturnStatus/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStatusExistsByDisplayName = (routeParams?: CheckSalesReturnStatusExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByKey
		 * @path <API Root>/Returning/SalesReturnStatus/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStatusExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnStatusExistsByName
		 * @path <API Root>/Returning/SalesReturnStatus/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnStatusExistsByName = (routeParams?: CheckSalesReturnStatusExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByDisplayName
		 * @path <API Root>/Returning/SalesReturnType/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnTypeExistsByDisplayName = (routeParams?: CheckSalesReturnTypeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByKey
		 * @path <API Root>/Returning/SalesReturnType/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnTypeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesReturnTypeExistsByName
		 * @path <API Root>/Returning/SalesReturnType/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesReturnTypeExistsByName = (routeParams?: CheckSalesReturnTypeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnByID
		 * @path <API Root>/Returning/SalesReturn/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnModel>}
		 * @public
		 */
		GetSalesReturnByID = (id: number) => this.$http<SalesReturnModel>({
			url: [this.rootUrl, "Returning", "SalesReturn", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnEvents
		 * @path <API Root>/Returning/SalesReturnEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnEventPagedResults>}
		 * @public
		 */
		GetSalesReturnEvents = (routeParams?: GetSalesReturnEventsDto) => this.$http<SalesReturnEventPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of sales return reasons
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnReasons
		 * @path <API Root>/Returning/SalesReturnReasons
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnReasonPagedResults>}
		 * @public
		 */
		GetSalesReturnReasons = (routeParams?: GetSalesReturnReasonsDto) => this.$http<SalesReturnReasonPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnReasons"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of sales returns
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturns
		 * @path <API Root>/Returning/SalesReturns
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnPagedResults>}
		 * @public
		 */
		GetSalesReturns = (routeParams?: GetSalesReturnsDto) => this.$http<SalesReturnPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturns"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStateByID
		 * @path <API Root>/Returning/SalesReturnState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetSalesReturnStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Returning", "SalesReturnState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStates
		 * @path <API Root>/Returning/SalesReturnStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnStatePagedResults>}
		 * @public
		 */
		GetSalesReturnStates = (routeParams?: GetSalesReturnStatesDto) => this.$http<SalesReturnStatePagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStatusByID
		 * @path <API Root>/Returning/SalesReturnStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSalesReturnStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Returning", "SalesReturnStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnStatuses
		 * @path <API Root>/Returning/SalesReturnStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnStatusPagedResults>}
		 * @public
		 */
		GetSalesReturnStatuses = (routeParams?: GetSalesReturnStatusesDto) => this.$http<SalesReturnStatusPagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales return type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnTypeByID
		 * @path <API Root>/Returning/SalesReturnType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesReturnTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Returning", "SalesReturnType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales return types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesReturnTypes
		 * @path <API Root>/Returning/SalesReturnTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesReturnTypePagedResults>}
		 * @public
		 */
		GetSalesReturnTypes = (routeParams?: GetSalesReturnTypesDto) => this.$http<SalesReturnTypePagedResults>({
			url: [this.rootUrl, "Returning", "SalesReturnTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
