/**
 * @file framework/store/_api/cvApi.Products.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckProductExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this SEO URL exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsSeoUrlBase}
	 * @public
	 */
	export interface CheckProductExistsBySeoUrlDto extends ImplementsSeoUrlBase {
	}
	/**
	 * Use to get a list of product association types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductAssociationTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a specific product
	 * @see {@link ImplementsIDBase}
	 * @public
	 */
	export interface GetProductByIDDto extends ImplementsIDBase {
		/** The store the user has selected if present */
		StoreID?: number;
		/** The brand the user has selected if present */
		BrandID?: number;
		/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
		IsVendorAdmin?: boolean;
		/** The identifier of the vendor which is logged in. This can only be set by the server. */
		VendorAdminID?: number;
		/** The identifier of the preview version to load. */
		PreviewID?: number;
	}
	/**
	 * Use to get a specific product by the custom key
	 * @see {@link ImplementsKeyBase}
	 * @public
	 */
	export interface GetProductByKeyDto extends ImplementsKeyBase {
		/** The store the user has selected if present */
		StoreID?: number;
		/** The brand the user has selected if present */
		BrandID?: number;
		/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
		IsVendorAdmin?: boolean;
		/** The identifier of the vendor which is logged in. This can only be set by the server. */
		VendorAdminID?: number;
	}
	/**
	 * Use to get a list of product download types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductDownloadTypesDto extends TypeSearchModel {
	}
	/**
	 * Get Product by SEO URL for just the SEO Metadata
	 * @deprecated Use GetProductMetadataByURL instead
	 * @public
	 */
	export interface GetProductForMetaDataDto {
		/** The SEO URL of the Product to locate */
		SeoUrl: string;
	}
	/**
	 * Use to get a list of product images
	 * @see {@link ProductImageSearchModel}
	 * @public
	 */
	export interface GetProductImagesDto extends ProductImageSearchModel {
	}
	/**
	 * Use to get a list of product image types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductImageTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of product inventory location sections
	 * @see {@link ProductInventoryLocationSectionSearchModel}
	 * @public
	 */
	export interface GetProductInventoryLocationSectionsDto extends ProductInventoryLocationSectionSearchModel {
	}
	/**
	 * Get Product Metadata By SEO URL.
	 * @public
	 */
	export interface GetProductMetadataByURLDto {
		/** The SEO URL to perform the lookup with */
		SeoUrl: string;
	}
	/**
	 * Use to get a list of products
	 * @see {@link ProductSearchModel}
	 * @public
	 */
	export interface GetProductsDto extends ProductSearchModel {
	}
	/**
	 * GET Product By category
	 * @public
	 */
	export interface GetProductsByCategoryDto {
		/** Product type ID */
		ProductTypeIDs: Array<number>;
	}
	/**
	 * Provides the same results as calling GetProductByID multiple times with separate IDs. WARNING: You should not use this endpoint to get a large number of products, limit to a page size.
	 * @public
	 */
	export interface GetProductsByIDsDto {
		/** The store the user has selected if present */
		StoreID?: number;
		/** The brand the user has selected if present */
		BrandID?: number;
		/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
		IsVendorAdmin?: boolean;
		/** The identifier of the vendor which is logged in. This can only be set by the server. */
		VendorAdminID?: number;
		/** The identifiers of products to read out */
		IDs: Array<number>;
	}
	/**
	 * GET Product By category
	 * @see {@link ProductSearchModel}
	 * @public
	 */
	export interface GetProductsByPreviouslyOrderedDto extends ProductSearchModel {
	}
	/**
	 * Use to get a list of products (for the current store only)
	 * @see {@link ProductSearchModel}
	 * @public
	 */
	export interface GetProductsForCurrentStoreDto extends ProductSearchModel {
	}
	/**
	 * Use to get a list of product statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetProductStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of product types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetProductTypesDto extends TypeSearchModel {
	}
	/**
	 * Updates the items primary UOM.
	 * @public
	 */
	export interface ListProductsForGoLiveDto {
		offset: number;
		limit: number;
	}

	export class Products extends ServiceStackRoute {
		/**
		 * Check if this ID exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckProductExistsByID
		 * @path <API Root>/Products/Product/Exists/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckProductExistsByID = (id: number) => this.$http<number>({
			url: [this.rootUrl, "Products", "Product", "Exists", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckProductExistsByKey
		 * @path <API Root>/Products/Product/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckProductExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Products", "Product", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckProductExistsByName
		 * @path <API Root>/Products/Product/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckProductExistsByName = (routeParams?: CheckProductExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Products", "Product", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this SEO URL exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckProductExistsBySeoUrl
		 * @path <API Root>/Products/Product/Exists/SeoUrl
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckProductExistsBySeoUrl = (routeParams?: CheckProductExistsBySeoUrlDto) => this.$http<number>({
			url: [this.rootUrl, "Products", "Product", "Exists", "SeoUrl"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPersonalizationProductsForCurrentUser
		 * @path <API Root>/Products/Personalization/ForCurrentUser
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<ProductModel>>}
		 * @public
		 */
		GetPersonalizationProductsForCurrentUser = () => this.$http<Array<ProductModel>>({
			url: [this.rootUrl, "Products", "Personalization", "ForCurrentUser"].join("/"),
			method: "GET",
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetPersonalizedCategoryAndProductFeedForCurrentUser
		 * @path <API Root>/Products/Personalization/Feed/ForCurrentUser
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<KeyValuePair<CategoryModel,Array<ProductModel>>>>}
		 * @public
		 */
		GetPersonalizedCategoryAndProductFeedForCurrentUser = () => this.$http<Array<KeyValuePair<CategoryModel,Array<ProductModel>>>>({
			url: [this.rootUrl, "Products", "Personalization", "Feed", "ForCurrentUser"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of product association types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductAssociationTypes
		 * @path <API Root>/Products/ProductAssociationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductAssociationTypePagedResults>}
		 * @public
		 */
		GetProductAssociationTypes = (routeParams?: GetProductAssociationTypesDto) => this.$http<ProductAssociationTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductAssociationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductByID
		 * @path <API Root>/Products/Product/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductModel>}
		 * @public
		 */
		GetProductByID = (id: number, routeParams?: GetProductByIDDto) => this.$http<ProductModel>({
			url: [this.rootUrl, "Products", "Product", "ID", id].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific product by the custom key
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductByKey
		 * @path <API Root>/Products/Product/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductModel>}
		 * @public
		 */
		GetProductByKey = (key: string, routeParams?: GetProductByKeyDto) => this.$http<ProductModel>({
			url: [this.rootUrl, "Products", "Product", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of product download types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductDownloadTypes
		 * @path <API Root>/Products/ProductDownloadTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductDownloadTypePagedResults>}
		 * @public
		 */
		GetProductDownloadTypes = (routeParams?: GetProductDownloadTypesDto) => this.$http<ProductDownloadTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductDownloadTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get Product by SEO URL for just the SEO Metadata
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductForMetaData
		 * @path <API Root>/Products/Product/Metadata
		 * @verb GET
		 * @returns {ng.IHttpPromise<ProductModel>}
		 * @deprecated Use GetProductMetadataByURL instead
		 * @public
		 */
		GetProductForMetaData = (routeParams: GetProductForMetaDataDto) => this.$http<ProductModel>({
			url: [this.rootUrl, "Products", "Product", "Metadata"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of product images
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductImages
		 * @path <API Root>/Products/ProductImages
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductImagePagedResults>}
		 * @public
		 */
		GetProductImages = (routeParams?: GetProductImagesDto) => this.$http<ProductImagePagedResults>({
			url: [this.rootUrl, "Products", "ProductImages"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of product image types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductImageTypes
		 * @path <API Root>/Products/ProductImageTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductImageTypePagedResults>}
		 * @public
		 */
		GetProductImageTypes = (routeParams?: GetProductImageTypesDto) => this.$http<ProductImageTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductImageTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of product inventory location sections
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductInventoryLocationSections
		 * @path <API Root>/Products/ProductInventoryLocationSections
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductInventoryLocationSectionPagedResults>}
		 * @public
		 */
		GetProductInventoryLocationSections = (routeParams?: GetProductInventoryLocationSectionsDto) => this.$http<ProductInventoryLocationSectionPagedResults>({
			url: [this.rootUrl, "Products", "ProductInventoryLocationSections"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get Product Metadata By SEO URL.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductMetadataByURL
		 * @path <API Root>/Products/Product/URL/Metadata
		 * @verb GET
		 * @returns {ng.IHttpPromise<SerializableAttributesDictionary>}
		 * @public
		 */
		GetProductMetadataByURL = (routeParams: GetProductMetadataByURLDto) => this.$http<SerializableAttributesDictionary>({
			url: [this.rootUrl, "Products", "Product", "URL", "Metadata"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get product reviews summary information
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductReview
		 * @path <API Root>/Products/ReviewSummary/ByProductID/{ID}
		 * @verb GET
		 * @returns {ng.IHttpPromise<ProductReviewInformationModel>}
		 * @public
		 */
		GetProductReview = (id: number) => this.$http<ProductReviewInformationModel>({
			url: [this.rootUrl, "Products", "ReviewSummary", "ByProductID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of products
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProducts
		 * @path <API Root>/Products/Products
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductPagedResults>}
		 * @public
		 */
		GetProducts = (routeParams?: GetProductsDto) => this.$http<ProductPagedResults>({
			url: [this.rootUrl, "Products", "Products"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * GET Product By category
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductsByCategory
		 * @path <API Root>/Products/GetProductsByCategory
		 * @verb GET
		 * @returns {ng.IHttpPromise<QuickOrderFormProductsModel>}
		 * @public
		 */
		GetProductsByCategory = (routeParams: GetProductsByCategoryDto) => this.$http<QuickOrderFormProductsModel>({
			url: [this.rootUrl, "Products", "GetProductsByCategory"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Provides the same results as calling GetProductByID multiple times with separate IDs. WARNING: You should not use this endpoint to get a large number of products, limit to a page size.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductsByIDs
		 * @path <API Root>/Products/Products/ByIDs
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<ProductModel>>}
		 * @public
		 */
		GetProductsByIDs = (routeParams: GetProductsByIDsDto) => this.$http<Array<ProductModel>>({
			url: [this.rootUrl, "Products", "Products", "ByIDs"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * GET Product By category
		 * @param {@link cef.store.api.GetProductsByPreviouslyOrderedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductsByPreviouslyOrdered
		 * @path <API Root>/Products/GetProductsByPreviouslyOrdered
		 * @verb POST
		 * @returns {ng.IHttpPromise<PreviouslyOrderedProductPagedResults>}
		 * @public
		 */
		GetProductsByPreviouslyOrdered = (routeParams?: GetProductsByPreviouslyOrderedDto) => this.$http<PreviouslyOrderedProductPagedResults>({
			url: [this.rootUrl, "Products", "GetProductsByPreviouslyOrdered"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a list of products (for the current store only)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductsForCurrentStore
		 * @path <API Root>/Products/CurrentStore/Products
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductPagedResults>}
		 * @public
		 */
		GetProductsForCurrentStore = (routeParams?: GetProductsForCurrentStoreDto) => this.$http<ProductPagedResults>({
			url: [this.rootUrl, "Products", "CurrentStore", "Products"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of product statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductStatuses
		 * @path <API Root>/Products/ProductStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductStatusPagedResults>}
		 * @public
		 */
		GetProductStatuses = (routeParams?: GetProductStatusesDto) => this.$http<ProductStatusPagedResults>({
			url: [this.rootUrl, "Products", "ProductStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of product types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetProductTypes
		 * @path <API Root>/Products/ProductTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ProductTypePagedResults>}
		 * @public
		 */
		GetProductTypes = (routeParams?: GetProductTypesDto) => this.$http<ProductTypePagedResults>({
			url: [this.rootUrl, "Products", "ProductTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Updates the items primary UOM.
		 * @param {@link cef.store.api.InventoryItemDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Clients.JBM.InventoryItem
		 * @path <API Root>/Products/InventoryItem
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		InventoryItem = () => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Products", "InventoryItem"].join("/"),
			method: "POST",
		});

		/**
		 * Updates the items primary UOM.
		 * @generatedByCSharpType Clarity.Clients.JBM.ListProductsForGoLive
		 * @path <API Root>/Products/ListProductsForGoLive
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<string>>}
		 * @public
		 */
		ListProductsForGoLive = (routeParams: ListProductsForGoLiveDto) => this.$http<Array<string>>({
			url: [this.rootUrl, "Products", "ListProductsForGoLive"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
