/**
 * @file framework/store/_api/cvApi.Geography.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Code exists and return the id if it does (null if it does not)
	 * @public
	 */
	export interface CheckCountryExistsByCodeDto {
		/** The Country Code to look up */
		Code: string;
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckCountryExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Code exists and return the id if it does (null if it does not)
	 * @public
	 */
	export interface CheckRegionExistsByCodeDto {
		Code: string;
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckRegionExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to add an address in the address book
	 * @see {@link AccountContactModel}
	 * @public
	 */
	export interface CreateAddressInBookDto extends AccountContactModel {
	}
	/**
	 * Gets a paged address book.
	 * @see {@link AccountContactSearchModel}
	 * @public
	 */
	export interface GetAddressBookPagedDto extends AccountContactSearchModel {
	}
	/**
	 * Use to get a list of countries
	 * @see {@link CountrySearchModel}
	 * @public
	 */
	export interface GetCountriesDto extends CountrySearchModel {
	}
	/**
	 * Use to get the address book for the current Account
	 * @public
	 */
	export interface GetCurrentAccountAddressBookDto {
		AccountID?: number;
	}
	/**
	 * Use to get the address book for the current Account
	 * @public
	 */
	export interface GetCurrentAccountPrimaryBillingAddressDto {
		AccountID?: number;
	}
	/**
	 * Use to get the address book for the current Account
	 * @public
	 */
	export interface GetCurrentAccountPrimaryShippingAddressDto {
		AccountID?: number;
	}
	/**
	 * Use to get the address book for the current Account
	 * @public
	 */
	export interface GetCurrentUserAddressBookDto {
		AccountID?: number;
	}
	/**
	 * Use to get a specific district by the name
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface GetDistrictByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to get a list of districts
	 * @see {@link DistrictSearchModel}
	 * @public
	 */
	export interface GetDistrictsDto extends DistrictSearchModel {
	}
	/**
	 * Use to get a specific region by the name
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface GetRegionByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to get a list of regions
	 * @see {@link RegionSearchModel}
	 * @public
	 */
	export interface GetRegionsDto extends RegionSearchModel {
	}
	/**
	 * Validates if the region is in a restricted region.
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface RestrictedRegionCheckDto extends ImplementsNameBase {
		CountryID: number;
		Code: string;
		RegionID: number;
	}
	/**
	 * Use to get geographical data from the phone number
	 * @public
	 */
	export interface ReversePhonePrefixToCityRegionCountryDto {
		/** The prefix, will be limited to 5 characters ignoring any symbols or spaces. */
		Prefix: string;
	}
	/**
	 * Search the current account contacts. Returns a range of data
	 * @see {@link ContactSearchModel}
	 * @public
	 */
	export interface SuggestAddressBookCurrentAccountDto extends ContactSearchModel {
	}

	export class Geography extends ServiceStackRoute {
		/**
		 * Check if this Code exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByCode
		 * @path <API Root>/Geography/Country/Exists/Code
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCountryExistsByCode = (routeParams: CheckCountryExistsByCodeDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Country", "Exists", "Code"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByKey
		 * @path <API Root>/Geography/Country/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCountryExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Country", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckCountryExistsByName
		 * @path <API Root>/Geography/Country/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckCountryExistsByName = (routeParams?: CheckCountryExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Country", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Code exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByCode
		 * @path <API Root>/Geography/Region/Exists/Code
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckRegionExistsByCode = (routeParams: CheckRegionExistsByCodeDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Region", "Exists", "Code"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByKey
		 * @path <API Root>/Geography/Region/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckRegionExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Region", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckRegionExistsByName
		 * @path <API Root>/Geography/Region/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckRegionExistsByName = (routeParams?: CheckRegionExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Geography", "Region", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to add an address in the address book
		 * @param {@link cef.store.api.CreateAddressInBookDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAddressInBook
		 * @path <API Root>/Geography/AddressBook/Create
		 * @verb POST
		 * @returns {ng.IHttpPromise<AccountContactModel>}
		 * @public
		 */
		CreateAddressInBook = (routeParams?: CreateAddressInBookDto) => this.$http<AccountContactModel>({
			url: [this.rootUrl, "Geography", "AddressBook", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Gets a paged address book.
		 * @param {@link cef.store.api.GetAddressBookPagedDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAddressBookPaged
		 * @path <API Root>/Geography/AddressBookPaged/CurrentAccount
		 * @verb POST
		 * @returns {ng.IHttpPromise<AccountContactPagedResults>}
		 * @public
		 */
		GetAddressBookPaged = (routeParams?: GetAddressBookPagedDto) => this.$http<AccountContactPagedResults>({
			url: [this.rootUrl, "Geography", "AddressBookPaged", "CurrentAccount"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a list of countries
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountries
		 * @path <API Root>/Geography/Countries
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryPagedResults>}
		 * @public
		 */
		GetCountries = (routeParams?: GetCountriesDto) => this.$http<CountryPagedResults>({
			url: [this.rootUrl, "Geography", "Countries"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific country
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCountryByID
		 * @path <API Root>/Geography/Country/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CountryModel>}
		 * @public
		 */
		GetCountryByID = (id: number) => this.$http<CountryModel>({
			url: [this.rootUrl, "Geography", "Country", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the address book for the current Account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccountAddressBook
		 * @path <API Root>/Geography/AddressBook/CurrentAccount
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AccountContactModel>>}
		 * @public
		 */
		GetCurrentAccountAddressBook = (routeParams?: GetCurrentAccountAddressBookDto) => this.$http<Array<AccountContactModel>>({
			url: [this.rootUrl, "Geography", "AddressBook", "CurrentAccount"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the address book for the current Account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccountPrimaryBillingAddress
		 * @path <API Root>/Geography/AddressBook/CurrentAccount/PrimaryBilling
		 * @verb GET
		 * @returns {ng.IHttpPromise<AccountContactModel>}
		 * @public
		 */
		GetCurrentAccountPrimaryBillingAddress = (routeParams?: GetCurrentAccountPrimaryBillingAddressDto) => this.$http<AccountContactModel>({
			url: [this.rootUrl, "Geography", "AddressBook", "CurrentAccount", "PrimaryBilling"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the address book for the current Account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccountPrimaryShippingAddress
		 * @path <API Root>/Geography/AddressBook/CurrentAccount/PrimaryShipping
		 * @verb GET
		 * @returns {ng.IHttpPromise<AccountContactModel>}
		 * @public
		 */
		GetCurrentAccountPrimaryShippingAddress = (routeParams?: GetCurrentAccountPrimaryShippingAddressDto) => this.$http<AccountContactModel>({
			url: [this.rootUrl, "Geography", "AddressBook", "CurrentAccount", "PrimaryShipping"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the address book for the current Account
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserAddressBook
		 * @path <API Root>/Geography/AddressBook/CurrentUser
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AccountContactModel>>}
		 * @public
		 */
		GetCurrentUserAddressBook = (routeParams?: GetCurrentUserAddressBookDto) => this.$http<Array<AccountContactModel>>({
			url: [this.rootUrl, "Geography", "AddressBook", "CurrentUser"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific district by the name
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistrictByName
		 * @path <API Root>/Geography/District/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictModel>}
		 * @public
		 */
		GetDistrictByName = (routeParams?: GetDistrictByNameDto) => this.$http<DistrictModel>({
			url: [this.rootUrl, "Geography", "District", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of districts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetDistricts
		 * @path <API Root>/Geography/Districts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<DistrictPagedResults>}
		 * @public
		 */
		GetDistricts = (routeParams?: GetDistrictsDto) => this.$http<DistrictPagedResults>({
			url: [this.rootUrl, "Geography", "Districts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific region
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionByID
		 * @path <API Root>/Geography/Region/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionModel>}
		 * @public
		 */
		GetRegionByID = (id: number) => this.$http<RegionModel>({
			url: [this.rootUrl, "Geography", "Region", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific region by the name
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegionByName
		 * @path <API Root>/Geography/Region/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionModel>}
		 * @public
		 */
		GetRegionByName = (routeParams?: GetRegionByNameDto) => this.$http<RegionModel>({
			url: [this.rootUrl, "Geography", "Region", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of regions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRegions
		 * @path <API Root>/Geography/Regions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<RegionPagedResults>}
		 * @public
		 */
		GetRegions = (routeParams?: GetRegionsDto) => this.$http<RegionPagedResults>({
			url: [this.rootUrl, "Geography", "Regions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Validates if the region is in a restricted region.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RestrictedRegionCheck
		 * @path <API Root>/Geography/Region/RestrictedRegionCheck
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RestrictedRegionCheck = (routeParams: RestrictedRegionCheckDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Geography", "Region", "RestrictedRegionCheck"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get geographical data from the phone number
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ReversePhonePrefixToCityRegionCountry
		 * @path <API Root>/Geography/PhonePrefixLookups/ReversePhonePrefixToCityRegionCountry
		 * @verb GET
		 * @returns {ng.IHttpPromise<PhonePrefixLookupPagedResults>}
		 * @public
		 */
		ReversePhonePrefixToCityRegionCountry = (routeParams: ReversePhonePrefixToCityRegionCountryDto) => this.$http<PhonePrefixLookupPagedResults>({
			url: [this.rootUrl, "Geography", "PhonePrefixLookups", "ReversePhonePrefixToCityRegionCountry"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Search the current account contacts. Returns a range of data
		 * @generatedByCSharpType Clarity.Ecommerce.Service.SuggestAddressBookCurrentAccount
		 * @path <API Root>/Geography/AddressBook/CurrentAccount/Suggest
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AccountContactPagedResults>>}
		 * @public
		 */
		SuggestAddressBookCurrentAccount = (routeParams?: SuggestAddressBookCurrentAccountDto) => this.$http<Array<AccountContactPagedResults>>({
			url: [this.rootUrl, "Geography", "AddressBook", "CurrentAccount", "Suggest"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
