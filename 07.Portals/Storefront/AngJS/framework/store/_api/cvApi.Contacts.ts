/**
 * @file framework/store/_api/cvApi.Contacts.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Use to create a new user.
	 * @see {@link UserModel}
	 * @public
	 */
	export interface CreateUserDto extends UserModel {
		/** Password */
		Password?: string;
		/** Should the system create a user on the CMS side */
		CreateCMSUser?: boolean;
		/** Should the system create a CEF User */
		CreateCEFUser?: boolean;
	}
	/**
	 * Use to create user with invite code
	 * @see {@link UserModel}
	 * @public
	 */
	export interface CreateUserWithCodeDto extends UserModel {
		/** InvitationCode */
		InvitationCode: string;
	}
	/**
	 * Use to get a list of contact types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetContactTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of user online statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetUserOnlineStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of users
	 * @see {@link UserSearchModel}
	 * @public
	 */
	export interface GetUsersDto extends UserSearchModel {
	}
	/**
	 * Use to get a list of user statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetUserStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of user types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetUserTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to import a list of users to the current account. Returns the IDs of all users upserted
	 * @public
	 */
	export interface ImportUsersFromExcelToCurrentAccountDto {
		FileName: string;
		AccountID?: number;
	}
	/**
	 * Use to set the current user's online status.
	 * @public
	 */
	export interface SetCurrentUserOnlineStatusDto {
		OnlineStatus: string;
	}
	/**
	 * Use to update the current user's details
	 * @see {@link UserModel}
	 * @public
	 */
	export interface UpdateCurrentUserDto extends UserModel {
	}
	/**
	 * Use to create a new or update an existing contact (as needed).
	 * @see {@link ContactModel}
	 * @public
	 */
	export interface UpsertContactDto extends ContactModel {
	}

	export class Contacts extends ServiceStackRoute {
		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckUserExistsByKey
		 * @path <API Root>/Contacts/User/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckUserExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Contacts", "User", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Use to create a new user.
		 * @param {@link cef.store.api.CreateUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUser
		 * @path <API Root>/Contacts/User/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateUser = (routeParams?: CreateUserDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "User", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create user with invite code
		 * @param {@link cef.store.api.CreateUserWithCodeDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateUserWithCode
		 * @path <API Root>/Contacts/User/CreateWithCode
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		CreateUserWithCode = (routeParams: CreateUserWithCodeDto) => this.$http<UserModel>({
			url: [this.rootUrl, "Contacts", "User", "CreateWithCode"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a specific contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactByID
		 * @path <API Root>/Contacts/Contact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactModel>}
		 * @public
		 */
		GetContactByID = (id: number) => this.$http<ContactModel>({
			url: [this.rootUrl, "Contacts", "Contact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of contact types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetContactTypes
		 * @path <API Root>/Contacts/ContactTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<ContactTypePagedResults>}
		 * @public
		 */
		GetContactTypes = (routeParams?: GetContactTypesDto) => this.$http<ContactTypePagedResults>({
			url: [this.rootUrl, "Contacts", "ContactTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the current user's details
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUser
		 * @path <API Root>/Contacts/CurrentUser
		 * @verb GET
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		GetCurrentUser = () => this.$http<UserModel>({
			url: [this.rootUrl, "Contacts", "CurrentUser"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the current user's Username. Note: this only returns the UserName in the UserModel, no additional data
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserName
		 * @path <API Root>/Contacts/CurrentUser/UserName
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<cefalt.store.Dictionary<any>>>}
		 * @public
		 */
		GetCurrentUserName = () => this.$http<CEFActionResponseT<cefalt.store.Dictionary<any>>>({
			url: [this.rootUrl, "Contacts", "CurrentUser", "UserName"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the current user's online status.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentUserOnlineStatus
		 * @path <API Root>/Contacts/CurrentUser/GetOnlineStatus
		 * @verb GET
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetCurrentUserOnlineStatus = () => this.$http<StatusModel>({
			url: [this.rootUrl, "Contacts", "CurrentUser", "GetOnlineStatus"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get the current user's supervisor(s)
		 * @param {@link cef.store.api.GetSupervisorsForCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSupervisorsForCurrentUser
		 * @path <API Root>/Contacts/SupervisorsForCurrentUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<Array<UserModel>>}
		 * @public
		 */
		GetSupervisorsForCurrentUser = () => this.$http<Array<UserModel>>({
			url: [this.rootUrl, "Contacts", "SupervisorsForCurrentUser"].join("/"),
			method: "POST",
		});

		/**
		 * Use to get a specific user
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserByID
		 * @path <API Root>/Contacts/User/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		GetUserByID = (id: number) => this.$http<UserModel>({
			url: [this.rootUrl, "Contacts", "User", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific user by the custom key
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserByKey
		 * @path <API Root>/Contacts/User/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		GetUserByKey = (key: string) => this.$http<UserModel>({
			url: [this.rootUrl, "Contacts", "User", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of user online statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserOnlineStatuses
		 * @path <API Root>/Contacts/UserOnlineStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserOnlineStatusPagedResults>}
		 * @public
		 */
		GetUserOnlineStatuses = (routeParams?: GetUserOnlineStatusesDto) => this.$http<UserOnlineStatusPagedResults>({
			url: [this.rootUrl, "Contacts", "UserOnlineStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUsers
		 * @path <API Root>/Contacts/Users
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserPagedResults>}
		 * @public
		 */
		GetUsers = (routeParams?: GetUsersDto) => this.$http<UserPagedResults>({
			url: [this.rootUrl, "Contacts", "Users"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of user statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserStatuses
		 * @path <API Root>/Contacts/UserStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserStatusPagedResults>}
		 * @public
		 */
		GetUserStatuses = (routeParams?: GetUserStatusesDto) => this.$http<UserStatusPagedResults>({
			url: [this.rootUrl, "Contacts", "UserStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of user types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUserTypes
		 * @path <API Root>/Contacts/UserTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<UserTypePagedResults>}
		 * @public
		 */
		GetUserTypes = (routeParams?: GetUserTypesDto) => this.$http<UserTypePagedResults>({
			url: [this.rootUrl, "Contacts", "UserTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to import a list of users to the current account. Returns the IDs of all users upserted
		 * @param {@link cef.store.api.ImportUsersFromExcelToCurrentAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Workflow.ImportUsersFromExcelToCurrentAccount
		 * @path <API Root>/Contacts/Users/ImportFromExcelToCurrentAccount
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<number>>>}
		 * @public
		 */
		ImportUsersFromExcelToCurrentAccount = (routeParams: ImportUsersFromExcelToCurrentAccountDto) => this.$http<CEFActionResponseT<Array<number>>>({
			url: [this.rootUrl, "Contacts", "Users", "ImportFromExcelToCurrentAccount"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to set the current user's online status.
		 * @param {@link cef.store.api.SetCurrentUserOnlineStatusDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.SetCurrentUserOnlineStatus
		 * @path <API Root>/Contacts/CurrentUser/SetOnlineStatus
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		SetCurrentUserOnlineStatus = (routeParams: SetCurrentUserOnlineStatusDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "CurrentUser", "SetOnlineStatus"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to update the current user's details
		 * @param {@link cef.store.api.UpdateCurrentUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrentUser
		 * @path <API Root>/Contacts/CurrentUser/Update
		 * @verb PUT
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UpdateCurrentUser = (routeParams?: UpdateCurrentUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Contacts", "CurrentUser", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Use to create a new or update an existing contact (as needed).
		 * @param {@link cef.store.api.UpsertContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertContact
		 * @path <API Root>/Contacts/Contact/Upsert
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpsertContact = (routeParams?: UpsertContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Contacts", "Contact", "Upsert"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
