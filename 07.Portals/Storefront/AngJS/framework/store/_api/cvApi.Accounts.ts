/**
 * @file framework/store/_api/cvApi.Accounts.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Creates Accounts, Account Contacts, and Contacts for current accounts/users.
	 * @public
	 */
	export interface AccountSitesDto {
		CustomerAccountInformation: CustomerAccountInformation;
	}
	/**
	 * Use to create a new account contact.
	 * @see {@link AccountContactModel}
	 * @public
	 */
	export interface CreateAccountContactDto extends AccountContactModel {
	}
	/**
	 * Get the current price lists for an account.
	 * @public
	 */
	export interface CurrentAccountPriceListsDto {
		AccountKey: string;
	}
	/**
	 * Use to get a list of account association types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAccountAssociationTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of accounts
	 * @see {@link AccountSearchModel}
	 * @public
	 */
	export interface GetAccountsDto extends AccountSearchModel {
	}
	/**
	 * Get Accounts for the current account (as a local administrator)
	 * @see {@link AccountSearchModel}
	 * @public
	 */
	export interface GetAccountsForCurrentAccountDto extends AccountSearchModel {
	}
	/**
	 * Use to get a list of account statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetAccountStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of account types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetAccountTypesDto extends TypeSearchModel {
	}
	/**
	 * Get all User IDs for the current account (as a local administrator)
	 * @see {@link UserSearchModel}
	 * @public
	 */
	export interface GetAllUserIDsForCurrentAccountDto extends UserSearchModel {
	}
	/**
	 * Grabs the user by its username.
	 * @public
	 */
	export interface GetUserByUsernameDto {
		Username: string;
	}
	/**
	 * Get Users for the current account (as a local administrator)
	 * @see {@link UserSearchModel}
	 * @public
	 */
	export interface GetUsersForCurrentAccountDto extends UserSearchModel {
	}
	/**
	 * Use to update an existing account contact.
	 * @see {@link AccountContactModel}
	 * @public
	 */
	export interface UpdateAccountContactDto extends AccountContactModel {
	}
	/**
	 * Updates Accounts from Fusion.
	 * @public
	 */
	export interface UpdateAccountFromFusionDto {
		AccountID: number;
		CustomKey: string;
	}
	/**
	 * Use to update the account associated to the user currently logged into the system
	 * @see {@link AccountModel}
	 * @public
	 */
	export interface UpdateCurrentAccountDto extends AccountModel {
	}

	export class Accounts extends ServiceStackRoute {
		/**
		 * Creates Accounts, Account Contacts, and Contacts for current accounts/users.
		 * @param {@link cef.store.api.AccountSitesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Clients.JBM.AccountSites
		 * @path <API Root>/Accounts/AccountSites
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		AccountSites = (routeParams: AccountSitesDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountSites"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to create a new account contact.
		 * @param {@link cef.store.api.CreateAccountContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateAccountContact
		 * @path <API Root>/Accounts/AccountContact/Create
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		CreateAccountContact = (routeParams?: CreateAccountContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Create"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Get the current price lists for an account.
		 * @generatedByCSharpType Clarity.Clients.JBM.CurrentAccountPriceLists
		 * @path <API Root>/Accounts/PriceLists
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CurrentAccountPriceLists = (routeParams: CurrentAccountPriceListsDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "PriceLists"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Removes a specific account contact from the system [Hard-Delete]
		 * @param {@link cef.store.api.DeleteAccountContactByIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.DeleteAccountContactByID
		 * @path <API Root>/Accounts/AccountContact/Delete/ID/{ID}
		 * @verb DELETE
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		DeleteAccountContactByID = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Delete", "ID", id].join("/"),
			method: "DELETE",
		});

		/**
		 * Use to get a list of account association types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountAssociationTypes
		 * @path <API Root>/Accounts/AccountAssociationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountAssociationTypePagedResults>}
		 * @public
		 */
		GetAccountAssociationTypes = (routeParams?: GetAccountAssociationTypesDto) => this.$http<AccountAssociationTypePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountAssociationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific account contact
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountContactByID
		 * @path <API Root>/Accounts/AccountContact/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountContactModel>}
		 * @public
		 */
		GetAccountContactByID = (id: number) => this.$http<AccountContactModel>({
			url: [this.rootUrl, "Accounts", "AccountContact", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of accounts
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccounts
		 * @path <API Root>/Accounts/Accounts
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountPagedResults>}
		 * @public
		 */
		GetAccounts = (routeParams?: GetAccountsDto) => this.$http<AccountPagedResults>({
			url: [this.rootUrl, "Accounts", "Accounts"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get Accounts for the current account (as a local administrator)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountsForCurrentAccount
		 * @path <API Root>/Accounts/AccountsForCurrentAccount
		 * @verb GET
		 * @returns {ng.IHttpPromise<AccountPagedResults>}
		 * @public
		 */
		GetAccountsForCurrentAccount = (routeParams?: GetAccountsForCurrentAccountDto) => this.$http<AccountPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountsForCurrentAccount"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of account statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountStatuses
		 * @path <API Root>/Accounts/AccountStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountStatusPagedResults>}
		 * @public
		 */
		GetAccountStatuses = (routeParams?: GetAccountStatusesDto) => this.$http<AccountStatusPagedResults>({
			url: [this.rootUrl, "Accounts", "AccountStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of account types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAccountTypes
		 * @path <API Root>/Accounts/AccountTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AccountTypePagedResults>}
		 * @public
		 */
		GetAccountTypes = (routeParams?: GetAccountTypesDto) => this.$http<AccountTypePagedResults>({
			url: [this.rootUrl, "Accounts", "AccountTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get all User IDs for the current account (as a local administrator)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAllUserIDsForCurrentAccount
		 * @path <API Root>/Accounts/AllUserIDsForCurrentAccount
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<number>>}
		 * @public
		 */
		GetAllUserIDsForCurrentAccount = (routeParams?: GetAllUserIDsForCurrentAccountDto) => this.$http<Array<number>>({
			url: [this.rootUrl, "Accounts", "AllUserIDsForCurrentAccount"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get account for the current user logged in
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentAccount
		 * @path <API Root>/Accounts/CurrentAccount
		 * @verb GET
		 * @returns {ng.IHttpPromise<AccountModel>}
		 * @public
		 */
		GetCurrentAccount = () => this.$http<AccountModel>({
			url: [this.rootUrl, "Accounts", "CurrentAccount"].join("/"),
			method: "GET",
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetRolesForNamesAccount
		 * @path <API Root>/Accounts/Account/RolesForAccountByAccountID/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<Array<string>>}
		 * @public
		 */
		GetRolesForNamesAccount = (id: number) => this.$http<Array<string>>({
			url: [this.rootUrl, "Accounts", "Account", "RolesForAccountByAccountID", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Grabs the user by its username.
		 * @param {@link cef.store.api.GetUserByUsernameDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Clients.JBM.GetUserByUsername
		 * @path <API Root>/Accounts/GetUserByUsername
		 * @verb POST
		 * @returns {ng.IHttpPromise<UserModel>}
		 * @public
		 */
		GetUserByUsername = (routeParams: GetUserByUsernameDto) => this.$http<UserModel>({
			url: [this.rootUrl, "Accounts", "GetUserByUsername"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Get Users for the current account (as a local administrator)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetUsersForCurrentAccount
		 * @path <API Root>/Accounts/UsersForCurrentAccount
		 * @verb GET
		 * @returns {ng.IHttpPromise<UserPagedResults>}
		 * @public
		 */
		GetUsersForCurrentAccount = (routeParams?: GetUsersForCurrentAccountDto) => this.$http<UserPagedResults>({
			url: [this.rootUrl, "Accounts", "UsersForCurrentAccount"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @param {@link cef.store.api.MarkAccountContactAsDefaultBillingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsDefaultBilling
		 * @path <API Root>/Accounts/AccountContact/MarkAsDefaultBilling/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkAccountContactAsDefaultBilling = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "MarkAsDefaultBilling", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * @param {@link cef.store.api.MarkAccountContactAsNeitherBillingNorShippingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsNeitherBillingNorShipping
		 * @path <API Root>/Accounts/AccountContact/MarkAsNotBillingOrShipping/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkAccountContactAsNeitherBillingNorShipping = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "MarkAsNotBillingOrShipping", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * @param {@link cef.store.api.MarkAccountContactAsPrimaryShippingDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.MarkAccountContactAsPrimaryShipping
		 * @path <API Root>/Accounts/AccountContact/MarkAsPrimaryShipping/ID/{ID}
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		MarkAccountContactAsPrimaryShipping = (id: number) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "AccountContact", "MarkAsPrimaryShipping", "ID", id].join("/"),
			method: "PATCH",
		});

		/**
		 * Updates the items primary UOM.
		 * @generatedByCSharpType Clarity.Clients.JBM.MissingAccountNumbers
		 * @path <API Root>/Accounts/MissingAccountNumbers
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<number>>}
		 * @public
		 */
		MissingAccountNumbers = () => this.$http<Array<number>>({
			url: [this.rootUrl, "Accounts", "MissingAccountNumbers"].join("/"),
			method: "GET",
		});

		/**
		 * Use to update an existing account contact.
		 * @param {@link cef.store.api.UpdateAccountContactDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateAccountContact
		 * @path <API Root>/Accounts/AccountContact/Update
		 * @verb PUT
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpdateAccountContact = (routeParams?: UpdateAccountContactDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Accounts", "AccountContact", "Update"].join("/"),
			method: "PUT",
			data: routeParams
		});

		/**
		 * Updates Accounts from Fusion.
		 * @param {@link cef.store.api.UpdateAccountFromFusionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Clients.JBM.UpdateAccountFromFusion
		 * @path <API Root>/Accounts/UpdateFromFusion
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		UpdateAccountFromFusion = (routeParams: UpdateAccountFromFusionDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Accounts", "UpdateFromFusion"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to update the account associated to the user currently logged into the system
		 * @param {@link cef.store.api.UpdateCurrentAccountDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpdateCurrentAccount
		 * @path <API Root>/Accounts/CurrentAccount
		 * @verb PUT
		 * @returns {ng.IHttpPromise<AccountModel>}
		 * @public
		 */
		UpdateCurrentAccount = (routeParams?: UpdateCurrentAccountDto) => this.$http<AccountModel>({
			url: [this.rootUrl, "Accounts", "CurrentAccount"].join("/"),
			method: "PUT",
			data: routeParams
		});

	}
}
