/**
 * @file framework/store/_api/cvApi.Stores.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckStoreExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to get a list of site domains
	 * @see {@link SiteDomainSearchModel}
	 * @public
	 */
	export interface GetSiteDomainsDto extends SiteDomainSearchModel {
	}
	/**
	 * Use to get a specific store by the SEO URL
	 * @see {@link ImplementsSeoUrlBase}
	 * @public
	 */
	export interface GetStoreBySeoUrlDto extends ImplementsSeoUrlBase {
	}
	/**
	 * Use to get a list of store inventory location types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetStoreInventoryLocationTypesDto extends TypeSearchModel {
	}
	/**
	 * Get store regions by store ID
	 * @see {@link StoreRegionSearchModel}
	 * @public
	 */
	export interface GetStoreRegionsByStoreIDDto extends StoreRegionSearchModel {
	}
	/**
	 * Use to get a list of stores
	 * @see {@link StoreSearchModel}
	 * @public
	 */
	export interface GetStoresDto extends StoreSearchModel {
	}
	/**
	 * Use to get a list of store types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetStoreTypesDto extends TypeSearchModel {
	}
	/**
	 * Use to get a list of store users
	 * @see {@link StoreUserSearchModel}
	 * @public
	 */
	export interface GetStoreUsersDto extends StoreUserSearchModel {
	}

	export class Stores extends ServiceStackRoute {
		/**
		 * Check if this ID exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckStoreExistsByID
		 * @path <API Root>/Stores/Store/Exists/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckStoreExistsByID = (id: number) => this.$http<number>({
			url: [this.rootUrl, "Stores", "Store", "Exists", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckStoreExistsByKey
		 * @path <API Root>/Stores/Store/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckStoreExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Stores", "Store", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckStoreExistsByName
		 * @path <API Root>/Stores/Store/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckStoreExistsByName = (routeParams?: CheckStoreExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Stores", "Store", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the current store based on url, sub-domain or sub-folder
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetCurrentStore
		 * @path <API Root>/Stores/Store/Current
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<StoreModel>>}
		 * @public
		 */
		GetCurrentStore = () => this.$http<CEFActionResponseT<StoreModel>>({
			url: [this.rootUrl, "Stores", "Store", "Current"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific site domain
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomainByID
		 * @path <API Root>/Stores/SiteDomain/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SiteDomainModel>}
		 * @public
		 */
		GetSiteDomainByID = (id: number) => this.$http<SiteDomainModel>({
			url: [this.rootUrl, "Stores", "SiteDomain", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of site domains
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSiteDomains
		 * @path <API Root>/Stores/SiteDomains
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SiteDomainPagedResults>}
		 * @public
		 */
		GetSiteDomains = (routeParams?: GetSiteDomainsDto) => this.$http<SiteDomainPagedResults>({
			url: [this.rootUrl, "Stores", "SiteDomains"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the Administrator of the Store's User info
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreAdministratorUser
		 * @path <API Root>/Stores/StoreAdministratorUser/{StoreID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<UserModel>>}
		 * @public
		 */
		GetStoreAdministratorUser = (storeID: number) => this.$http<CEFActionResponseT<UserModel>>({
			url: [this.rootUrl, "Stores", "StoreAdministratorUser", storeID].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific store
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreByID
		 * @path <API Root>/Stores/Store/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreModel>}
		 * @public
		 */
		GetStoreByID = (id: number) => this.$http<StoreModel>({
			url: [this.rootUrl, "Stores", "Store", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific store by the SEO URL
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreBySeoUrl
		 * @path <API Root>/Stores/Store/SeoUrl
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreModel>}
		 * @public
		 */
		GetStoreBySeoUrl = (routeParams?: GetStoreBySeoUrlDto) => this.$http<StoreModel>({
			url: [this.rootUrl, "Stores", "Store", "SeoUrl"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get the store that the current user has administrative rights to (limited to store admins)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationsMatrix
		 * @path <API Root>/Stores/InventoryLocationsMatrix
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<Array<StoreInventoryLocationsMatrixModel>>>}
		 * @public
		 */
		GetStoreInventoryLocationsMatrix = () => this.$http<CEFActionResponseT<Array<StoreInventoryLocationsMatrixModel>>>({
			url: [this.rootUrl, "Stores", "InventoryLocationsMatrix"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of store inventory location types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreInventoryLocationTypes
		 * @path <API Root>/Stores/StoreInventoryLocationTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreInventoryLocationTypePagedResults>}
		 * @public
		 */
		GetStoreInventoryLocationTypes = (routeParams?: GetStoreInventoryLocationTypesDto) => this.$http<StoreInventoryLocationTypePagedResults>({
			url: [this.rootUrl, "Stores", "StoreInventoryLocationTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Get store regions by store ID
		 * @param {@link cef.store.api.GetStoreRegionsByStoreIDDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreRegionsByStoreID
		 * @path <API Root>/Stores/StoreRegions/ByStoreID
		 * @verb POST
		 * @returns {ng.IHttpPromise<StoreRegionPagedResults>}
		 * @public
		 */
		GetStoreRegionsByStoreID = (routeParams?: GetStoreRegionsByStoreIDDto) => this.$http<StoreRegionPagedResults>({
			url: [this.rootUrl, "Stores", "StoreRegions", "ByStoreID"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a list of stores
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStores
		 * @path <API Root>/Stores/Stores
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StorePagedResults>}
		 * @public
		 */
		GetStores = (routeParams?: GetStoresDto) => this.$http<StorePagedResults>({
			url: [this.rootUrl, "Stores", "Stores"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of store types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreTypes
		 * @path <API Root>/Stores/StoreTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreTypePagedResults>}
		 * @public
		 */
		GetStoreTypes = (routeParams?: GetStoreTypesDto) => this.$http<StoreTypePagedResults>({
			url: [this.rootUrl, "Stores", "StoreTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of store users
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetStoreUsers
		 * @path <API Root>/Stores/StoreUsers
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StoreUserPagedResults>}
		 * @public
		 */
		GetStoreUsers = (routeParams?: GetStoreUsersDto) => this.$http<StoreUserPagedResults>({
			url: [this.rootUrl, "Stores", "StoreUsers"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
