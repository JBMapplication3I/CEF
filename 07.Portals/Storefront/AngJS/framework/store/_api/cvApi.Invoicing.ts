/**
 * @file framework/store/_api/cvApi.Invoicing.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStateExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStateExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStatusExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceStatusExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceTypeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckSalesInvoiceTypeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Updates the product with associated brand(s) and categories.
	 * @see {@link FusionInvoiceResponse}
	 * @public
	 */
	export interface CreateInvoicesDto extends FusionInvoiceResponse {
	}
	/**
	 * Use to get a list of sales invoice events
	 * @see {@link SalesInvoiceEventSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceEventsDto extends SalesInvoiceEventSearchModel {
	}
	/**
	 * Use to get a list of sales invoice states
	 * @see {@link StateSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceStatesDto extends StateSearchModel {
	}
	/**
	 * Use to get a list of sales invoice statuses
	 * @see {@link StatusSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceStatusesDto extends StatusSearchModel {
	}
	/**
	 * Use to get a list of sales invoice types
	 * @see {@link TypeSearchModel}
	 * @public
	 */
	export interface GetSalesInvoiceTypesDto extends TypeSearchModel {
	}

	export class Invoicing extends ServiceStackRoute {
		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByDisplayName
		 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStateExistsByDisplayName = (routeParams?: CheckSalesInvoiceStateExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByKey
		 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStateExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStateExistsByName
		 * @path <API Root>/Invoicing/SalesInvoiceState/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStateExistsByName = (routeParams?: CheckSalesInvoiceStateExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByDisplayName
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStatusExistsByDisplayName = (routeParams?: CheckSalesInvoiceStatusExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByKey
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStatusExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceStatusExistsByName
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceStatusExistsByName = (routeParams?: CheckSalesInvoiceStatusExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByDisplayName
		 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceTypeExistsByDisplayName = (routeParams?: CheckSalesInvoiceTypeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByKey
		 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceTypeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckSalesInvoiceTypeExistsByName
		 * @path <API Root>/Invoicing/SalesInvoiceType/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckSalesInvoiceTypeExistsByName = (routeParams?: CheckSalesInvoiceTypeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Updates the product with associated brand(s) and categories.
		 * @param {@link cef.store.api.CreateInvoicesDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Clients.JBM.CreateInvoices
		 * @path <API Root>/Invoicing/CreateInvoices
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CreateInvoices = (routeParams?: CreateInvoicesDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Invoicing", "CreateInvoices"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Use to get a specific sales invoice
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceByID
		 * @path <API Root>/Invoicing/SalesInvoice/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceModel>}
		 * @public
		 */
		GetSalesInvoiceByID = (id: number) => this.$http<SalesInvoiceModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoice", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice events
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceEvents
		 * @path <API Root>/Invoicing/SalesInvoiceEvents
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceEventPagedResults>}
		 * @public
		 */
		GetSalesInvoiceEvents = (routeParams?: GetSalesInvoiceEventsDto) => this.$http<SalesInvoiceEventPagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceEvents"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice state
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStateByID
		 * @path <API Root>/Invoicing/SalesInvoiceState/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StateModel>}
		 * @public
		 */
		GetSalesInvoiceStateByID = (id: number) => this.$http<StateModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceState", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice states
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStates
		 * @path <API Root>/Invoicing/SalesInvoiceStates
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceStatePagedResults>}
		 * @public
		 */
		GetSalesInvoiceStates = (routeParams?: GetSalesInvoiceStatesDto) => this.$http<SalesInvoiceStatePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStates"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice status
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStatusByID
		 * @path <API Root>/Invoicing/SalesInvoiceStatus/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<StatusModel>}
		 * @public
		 */
		GetSalesInvoiceStatusByID = (id: number) => this.$http<StatusModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatus", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice statuses
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceStatuses
		 * @path <API Root>/Invoicing/SalesInvoiceStatuses
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceStatusPagedResults>}
		 * @public
		 */
		GetSalesInvoiceStatuses = (routeParams?: GetSalesInvoiceStatusesDto) => this.$http<SalesInvoiceStatusPagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceStatuses"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific sales invoice type
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceTypeByID
		 * @path <API Root>/Invoicing/SalesInvoiceType/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<TypeModel>}
		 * @public
		 */
		GetSalesInvoiceTypeByID = (id: number) => this.$http<TypeModel>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceType", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of sales invoice types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSalesInvoiceTypes
		 * @path <API Root>/Invoicing/SalesInvoiceTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<SalesInvoiceTypePagedResults>}
		 * @public
		 */
		GetSalesInvoiceTypes = (routeParams?: GetSalesInvoiceTypesDto) => this.$http<SalesInvoiceTypePagedResults>({
			url: [this.rootUrl, "Invoicing", "SalesInvoiceTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
