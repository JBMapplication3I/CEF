/**
 * @file framework/store/_api/cvApi.Authentication.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Membership Registration Process step 5: Administrator approves the user
	 * @public
	 */
	export interface ApproveUserRegistrationDto {
		/** The encrypted token to use for validation */
		Token: string;
		/** CEF User ID */
		ID: number;
	}
	/**
	 * When provided with the valid existing password, changes the password for a user to a new value.
	 * @public
	 */
	export interface ChangePasswordDto {
		/** UserName */
		UserName: string;
		/** Current Password */
		Password: string;
		/** New Password */
		NewPassword: string;
	}
	/**
	 * Check if the user is required to reset their password.
	 * @public
	 */
	export interface CheckForcedPasswordResetDto {
		/** UserName */
		UserName: string;
		/** Password */
		Password: string;
	}
	/**
	 * Membership Registration Process step 4: Validate Email and complete Registration
	 * @public
	 */
	export interface CompleteRegistrationDto {
		/** First Name of the User */
		FirstName: string;
		/** Last Name of the User */
		LastName: string;
		/** Email to send the invitation to */
		Email: string;
		/** UserName */
		UserName: string;
		/** Password */
		Password: string;
		/** Reset Token */
		ResetToken: string;
		/** Phone */
		Phone: string;
		/** CompanyName */
		CompanyName: string;
		/** RoleName */
		RoleName?: string;
		/** Address */
		Address: AddressModel;
		/** TypeName */
		TypeName?: string;
		/** Website */
		Website?: string;
		/** ProfileType */
		ProfileType?: string;
		/** StoreContacts */
		StoreContacts?: Array<StoreContactModel>;
	}
	/**
	 * Membership Registration Process step 3: Send Email confirmation Email (User gets an email with validation token)
	 * @public
	 */
	export interface CreateLiteAccountAndSendValidationEmailDto {
		/** First Name of the User */
		FirstName: string;
		/** Last Name of the User */
		LastName: string;
		/** The UserName */
		UserName?: string;
		/** Email to send the invitation to */
		Email: string;
		/** Seller Type */
		SellerType: string;
		/** The Membership Level */
		Membership: string;
		/** The encrypted token to use for validation */
		Token: string;
		/** The Membership Type */
		MembershipType: string;
		/** The RootURL is used to override the settings generated RootURL */
		RootURL: string;
	}
	/**
	 * Check if the currently logged in user has any Permissions by Regular Expression
	 * @public
	 */
	export interface CurrentUserHasAnyPermissionDto {
		/** The Regular Expression of the Permissions to match against */
		Regex: string;
	}
	/**
	 * Check if the currently logged in user has any Roles by Regular Expression
	 * @public
	 */
	export interface CurrentUserHasAnyRoleDto {
		/** The Regular Expression of the Roles to match against */
		Regex: string;
	}
	/**
	 * Check if the currently logged in user has a specific Permission by name
	 * @public
	 */
	export interface CurrentUserHasPermissionDto {
		/** The Name of the Permission to check */
		Name: string;
	}
	/**
	 * Check if the currently logged in user has a specific role by name.
	 * @public
	 */
	export interface CurrentUserHasRoleDto {
		/** The Name of the Role to check */
		Name: string;
	}
	/**
	 * When the user is required to reset their password, this endpoint handles it.
	 * @public
	 */
	export interface ForcedPasswordResetDto {
		/** Email */
		Email: string;
		/** Old Password */
		OldPassword: string;
		/** New Password */
		NewPassword: string;
	}
	/**
	 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
	 * @public
	 */
	export interface ForgotPasswordDto {
		/** Email */
		Email: string;
	}
	/**
	 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
	 * @public
	 */
	export interface ForgotPasswordReturnDto {
		/** Email */
		Email: string;
		/** Token */
		Token: string;
		/** Password */
		Password: string;
	}
	/**
	 * Sends an email to the user if the provided email matches an existing user with the Username in it.
	 * @public
	 */
	export interface ForgotUsernameDto {
		/** Email */
		Email: string;
	}
	/**
	 * Consumes the code response from Open ID Connect
	 * @public
	 */
	export interface OktaCodeCallbackDto {
		id_token?: string; // Name format overridden
		access_token?: string; // Name format overridden
		code?: string; // Name format overridden
		expires_in: number; // Name format overridden
		resource?: string; // Name format overridden
		refresh_token?: string; // Name format overridden
		refresh_token_expires_in: number; // Name format overridden
		scope?: string; // Name format overridden
		error?: string; // Name format overridden
		errorDescription?: string; // Name format overridden
	}
	/**
	 * Consumes the code response from Open ID Connect
	 * @public
	 */
	export interface OpenIDConnectCodeCallbackDto {
		id_token?: string; // Name format overridden
		access_token?: string; // Name format overridden
		code?: string; // Name format overridden
		expires_in: number; // Name format overridden
		resource?: string; // Name format overridden
		refresh_token?: string; // Name format overridden
		refresh_token_expires_in: number; // Name format overridden
		scope?: string; // Name format overridden
		error?: string; // Name format overridden
		errorDescription?: string; // Name format overridden
	}
	/**
	 * Registers a new user via the standard process
	 * @see {@link UserModel}
	 * @public
	 */
	export interface RegisterNewUserDto extends UserModel {
		AddressBook?: Array<AccountContactModel>;
		InService: boolean;
		RegistrationType?: string;
	}
	/**
	 * Request a multi-factor authentication token for a specific user.
	 * @public
	 */
	export interface RequestMFAForUsernameDto {
		/** If true, send over SMS instead of email. */
		UsePhone: boolean;
	}
	/**
	 * Pass in user credentials to log into the site.
	 * @public
	 */
	export interface ValidateEmailDto {
		/** Email to send the invitation to */
		Email: string;
		/** The encrypted token to use for validation */
		Token: string;
	}
	/**
	 * Validate Email Is Unique
	 * @public
	 */
	export interface ValidateEmailIsUniqueDto {
		Email: string;
	}
	/**
	 * Membership Registration Process step 2: Validate Invitation (User clicked the link in the email with an invite token)
	 * @public
	 */
	export interface ValidateInvitationDto {
		/** Email to send the invitation to */
		Email: string;
		/** The encrypted token to use for validation */
		Token: string;
	}
	/**
	 * Validates that the password provided for a username is the correct one.
	 * @public
	 */
	export interface ValidatePasswordDto {
		UserName: string;
		Password: string;
	}
	/**
	 * Pass in user credentials to log into the site.
	 * @public
	 */
	export interface ValidatePasswordIsGoodDto {
		Password: string;
	}
	/**
	 * Pass in user credentials to log into the site.
	 * @public
	 */
	export interface ValidateUserNameIsGoodDto {
		UserName: string;
	}

	export class Authentication extends ServiceStackRoute {
		/**
		 * Membership Registration Process step 5: Administrator approves the user
		 * @param {@link cef.store.api.ApproveUserRegistrationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ApproveUserRegistration
		 * @path <API Root>/Authentication/ApproveUser
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ApproveUserRegistration = (routeParams: ApproveUserRegistrationDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ApproveUser"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * When provided with the valid existing password, changes the password for a user to a new value.
		 * @param {@link cef.store.api.ChangePasswordDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ChangePassword
		 * @path <API Root>/Authentication/ChangePassword
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ChangePassword = (routeParams: ChangePasswordDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ChangePassword"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the user is required to reset their password.
		 * @param {@link cef.store.api.CheckForcedPasswordResetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckForcedPasswordReset
		 * @path <API Root>/Authentication/CheckForcedPasswordReset
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CheckForcedPasswordReset = (routeParams: CheckForcedPasswordResetDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "CheckForcedPasswordReset"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if multi-factor authentication is enabled for a specific user.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckForMFAForUsername
		 * @path <API Root>/Authentication/CheckForMFA/{Username*}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<MFARequirementsModel>>}
		 * @public
		 */
		CheckForMFAForUsername = (username: string) => this.$http<CEFActionResponseT<MFARequirementsModel>>({
			url: [this.rootUrl, "Authentication", "CheckForMFA", encodeURIComponent(username)].join("/"),
			method: "GET",
		});

		/**
		 * Membership Registration Process step 4: Validate Email and complete Registration
		 * @param {@link cef.store.api.CompleteRegistrationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CompleteRegistration
		 * @path <API Root>/Authentication/CompleteRegistration
		 * @verb PATCH
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CompleteRegistration = (routeParams: CompleteRegistrationDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "CompleteRegistration"].join("/"),
			method: "PATCH",
			data: routeParams
		});

		/**
		 * Membership Registration Process step 3: Send Email confirmation Email (User gets an email with validation token)
		 * @param {@link cef.store.api.CreateLiteAccountAndSendValidationEmailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateLiteAccountAndSendValidationEmail
		 * @path <API Root>/Authentication/CreateLiteAccountAndSendValidationEmail
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		CreateLiteAccountAndSendValidationEmail = (routeParams: CreateLiteAccountAndSendValidationEmailDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "CreateLiteAccountAndSendValidationEmail"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has any Permissions by Regular Expression
		 * @param {@link cef.store.api.CurrentUserHasAnyPermissionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasAnyPermission
		 * @path <API Root>/Authentication/CurrentUser/HasAnyPermission
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasAnyPermission = (routeParams: CurrentUserHasAnyPermissionDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasAnyPermission"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has any Roles by Regular Expression
		 * @param {@link cef.store.api.CurrentUserHasAnyRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasAnyRole
		 * @path <API Root>/Authentication/CurrentUser/HasAnyRole
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasAnyRole = (routeParams: CurrentUserHasAnyRoleDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasAnyRole"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has a specific Permission by name
		 * @param {@link cef.store.api.CurrentUserHasPermissionDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasPermission
		 * @path <API Root>/Authentication/CurrentUser/HasPermission
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasPermission = (routeParams: CurrentUserHasPermissionDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasPermission"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if the currently logged in user has a specific role by name.
		 * @param {@link cef.store.api.CurrentUserHasRoleDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CurrentUserHasRole
		 * @path <API Root>/Authentication/CurrentUser/HasRole
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		CurrentUserHasRole = (routeParams: CurrentUserHasRoleDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "CurrentUser", "HasRole"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * When the user is required to reset their password, this endpoint handles it.
		 * @param {@link cef.store.api.ForcedPasswordResetDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForcedPasswordReset
		 * @path <API Root>/Authentication/ForcedPasswordReset
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ForcedPasswordReset = (routeParams: ForcedPasswordResetDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ForcedPasswordReset"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
		 * @param {@link cef.store.api.ForgotPasswordDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotPassword
		 * @path <API Root>/Authentication/ForgotPassword
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ForgotPassword = (routeParams: ForgotPasswordDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ForgotPassword"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Sends an email to the user if the provided email matches an existing user with a Password Reset Token in it.
		 * @param {@link cef.store.api.ForgotPasswordReturnDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotPasswordReturn
		 * @path <API Root>/Authentication/ForgotPassword/Return
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponseT<string>>}
		 * @public
		 */
		ForgotPasswordReturn = (routeParams: ForgotPasswordReturnDto) => this.$http<CEFActionResponseT<string>>({
			url: [this.rootUrl, "Authentication", "ForgotPassword", "Return"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Sends an email to the user if the provided email matches an existing user with the Username in it.
		 * @param {@link cef.store.api.ForgotUsernameDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ForgotUsername
		 * @path <API Root>/Authentication/ForgotUsername
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ForgotUsername = (routeParams: ForgotUsernameDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ForgotUsername"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Consumes the code response from Open ID Connect
		 * @param {@link cef.store.api.OktaCodeCallbackDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType ServiceStack.Auth.OktaCodeCallback
		 * @path <API Root>/Authentication/OktaCodeCallback
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		OktaCodeCallback = (routeParams: OktaCodeCallbackDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "OktaCodeCallback"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Consumes the code response from Open ID Connect
		 * @param {@link cef.store.api.OpenIDConnectCodeCallbackDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType ServiceStack.Auth.OpenIDConnectCodeCallback
		 * @path <API Root>/Authentication/OpenIDConnectCodeCallback
		 * @verb POST
		 * @returns {ng.IHttpPromise<void>}
		 * @public
		 */
		OpenIDConnectCodeCallback = (routeParams: OpenIDConnectCodeCallbackDto) => this.$http<void>({
			url: [this.rootUrl, "Authentication", "OpenIDConnectCodeCallback"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Registers a new user via the standard process
		 * @param {@link cef.store.api.RegisterNewUserDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RegisterNewUser
		 * @path <API Root>/Authentication/RegisterNewUser
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RegisterNewUser = (routeParams: RegisterNewUserDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "RegisterNewUser"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Request a multi-factor authentication token for a specific user.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.RequestMFAForUsername
		 * @path <API Root>/Authentication/RequestMFA/{Username*}
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		RequestMFAForUsername = (username: string, routeParams: RequestMFAForUsernameDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "RequestMFA", encodeURIComponent(username)].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Pass in user credentials to log into the site.
		 * @param {@link cef.store.api.ValidateEmailDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateEmail
		 * @path <API Root>/Authentication/ValidateEmail
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateEmail = (routeParams: ValidateEmailDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateEmail"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Validate Email Is Unique
		 * @param {@link cef.store.api.ValidateEmailIsUniqueDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateEmailIsUnique
		 * @path <API Root>/Authentication/ValidateEmailIsUnique
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateEmailIsUnique = (routeParams: ValidateEmailIsUniqueDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateEmailIsUnique"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Membership Registration Process step 2: Validate Invitation (User clicked the link in the email with an invite token)
		 * @param {@link cef.store.api.ValidateInvitationDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateInvitation
		 * @path <API Root>/Authentication/ValidateInvitation
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateInvitation = (routeParams: ValidateInvitationDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateInvitation"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Validates that the password provided for a username is the correct one.
		 * @param {@link cef.store.api.ValidatePasswordDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidatePassword
		 * @path <API Root>/Authentication/ValidatePassword
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidatePassword = (routeParams: ValidatePasswordDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidatePassword"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Pass in user credentials to log into the site.
		 * @param {@link cef.store.api.ValidatePasswordIsGoodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidatePasswordIsGood
		 * @path <API Root>/Authentication/ValidatePasswordIsGood
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidatePasswordIsGood = (routeParams: ValidatePasswordIsGoodDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidatePasswordIsGood"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Pass in user credentials to log into the site.
		 * @param {@link cef.store.api.ValidateUserNameIsGoodDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateUserNameIsGood
		 * @path <API Root>/Authentication/ValidateUserNameIsGood
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ValidateUserNameIsGood = (routeParams: ValidateUserNameIsGoodDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Authentication", "ValidateUserNameIsGood"].join("/"),
			method: "POST",
			data: routeParams
		});

	}
}
