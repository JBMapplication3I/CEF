/**
 * @file framework/store/_api/cvApi.Auctions.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface BidOnGroupedLotsDto {
		/** The group ID */
		GroupID: number;
		/** The amount of the bid */
		Amount: number;
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckAuctionExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckLotExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @see {@link BidModel}
	 * @public
	 */
	export interface CreateSignalRBidDto extends BidModel {
	}
	/**
	 * Use to get a list of auction categories
	 * @see {@link AuctionCategorySearchModel}
	 * @public
	 */
	export interface GetAuctionCategoriesDto extends AuctionCategorySearchModel {
	}
	/**
	 * Use to get a list of auctions
	 * @see {@link AuctionSearchModel}
	 * @public
	 */
	export interface GetAuctionsDto extends AuctionSearchModel {
	}
	/**
	 * Provides the same results as calling GetAuctionByID multiple times with separate IDs.
	 * @public
	 */
	export interface GetAuctionsByIDsDto {
		/** The store the user has selected if present */
		StoreID?: number;
		/** The brand the user has selected if present */
		BrandID?: number;
		/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
		IsVendorAdmin?: boolean;
		/** The identifier of the vendor which is logged in. This can only be set by the server. */
		VendorAdminID?: number;
		/** The identifiers of auctions to read out */
		IDs: Array<number>;
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface GetAuctionsByZipCodeRadiusDto {
		PostalCode: string;
		Radius: number;
	}
	/**
	 * Use to get a list of bids
	 * @see {@link BidSearchModel}
	 * @public
	 */
	export interface GetBidsDto extends BidSearchModel {
	}
	/**
	 * Use to get a list of lot groups
	 * @see {@link LotGroupSearchModel}
	 * @public
	 */
	export interface GetLotGroupsDto extends LotGroupSearchModel {
	}
	/**
	 * Use to get a list of lots
	 * @see {@link LotSearchModel}
	 * @public
	 */
	export interface GetLotsDto extends LotSearchModel {
	}
	/**
	 * Provides the same results as calling GetLotByID multiple times with separate IDs.
	 * @public
	 */
	export interface GetLotsByIDsDto {
		/** The store the user has selected if present */
		StoreID?: number;
		/** The brand the user has selected if present */
		BrandID?: number;
		/** A flag indicating that this is a vendor admin request. This can only be set by the server. */
		IsVendorAdmin?: boolean;
		/** The identifier of the vendor which is logged in. This can only be set by the server. */
		VendorAdminID?: number;
		/** The identifiers of lots to read out */
		IDs: Array<number>;
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface GetSignalRBidDto {
		UserID: number;
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface GetSignalRHighestCurrentBidDto {
		LotID: number;
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface GetSortedProductIDsByHighestBidCountDto {
		IDs: Array<number>;
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface LargeBidNotificationsDto {
		Bid: number;
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface ProcessPaymentLotWonDto {
		UserID: number;
		LotID: number;
	}
	/**
	 * WARNING! There is no Summary value on this endpoint, please ask a Developer to add one
	 * @public
	 */
	export interface SignalRQuickBidDto {
		UserID: number;
		LotID: number;
		BidIncrement: number;
		MaxBid: number;
	}
	/**
	 * Use to create a new or update an existing lot group (as needed).
	 * @see {@link LotGroupModel}
	 * @public
	 */
	export interface UpsertLotGroupDto extends LotGroupModel {
	}
	/**
	 * Validates the VIN number and if valid, then sets the VIN on the product description.
	 * @public
	 */
	export interface ValidateVinNumberDto {
		/** The product ID */
		ProductID: number;
		/** The VIN Number of the Vehicle */
		VinNumber: string;
	}

	export class Auctions extends ServiceStackRoute {
		/**
		 * @param {@link cef.store.api.BidOnGroupedLotsDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.BidOnGroupedLots
		 * @path <API Root>/Auctions/Bid/BidOnGroupedLots
		 * @verb POST
		 * @returns {ng.IHttpPromise<BidModel>}
		 * @public
		 */
		BidOnGroupedLots = (routeParams: BidOnGroupedLotsDto) => this.$http<BidModel>({
			url: [this.rootUrl, "Auctions", "Bid", "BidOnGroupedLots"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Check if this ID exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckAuctionExistsByID
		 * @path <API Root>/Auctions/Auction/Exists/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckAuctionExistsByID = (id: number) => this.$http<number>({
			url: [this.rootUrl, "Auctions", "Auction", "Exists", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckAuctionExistsByKey
		 * @path <API Root>/Auctions/Auction/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckAuctionExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Auctions", "Auction", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckAuctionExistsByName
		 * @path <API Root>/Auctions/Auction/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckAuctionExistsByName = (routeParams?: CheckAuctionExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Auctions", "Auction", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this ID exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckLotExistsByID
		 * @path <API Root>/Auctions/Lot/Exists/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckLotExistsByID = (id: number) => this.$http<number>({
			url: [this.rootUrl, "Auctions", "Lot", "Exists", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckLotExistsByKey
		 * @path <API Root>/Auctions/Lot/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckLotExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Auctions", "Lot", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckLotExistsByName
		 * @path <API Root>/Auctions/Lot/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckLotExistsByName = (routeParams?: CheckLotExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Auctions", "Lot", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @param {@link cef.store.api.CreateSignalRBidDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CreateSignalRBid
		 * @path <API Root>/Auctions/Bid/CreateSignalRBid
		 * @verb POST
		 * @returns {ng.IHttpPromise<BidModel>}
		 * @public
		 */
		CreateSignalRBid = (routeParams?: CreateSignalRBidDto) => this.$http<BidModel>({
			url: [this.rootUrl, "Auctions", "Bid", "CreateSignalRBid"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Endpoint for The Your Active Auctions Section.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetActiveAuctions
		 * @path <API Root>/Auctions/Auction/GetActiveAuctions
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AuctionModel>>}
		 * @public
		 */
		GetActiveAuctions = () => this.$http<Array<AuctionModel>>({
			url: [this.rootUrl, "Auctions", "Auction", "GetActiveAuctions"].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a specific auction
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionByID
		 * @path <API Root>/Auctions/Auction/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionModel>}
		 * @public
		 */
		GetAuctionByID = (id: number) => this.$http<AuctionModel>({
			url: [this.rootUrl, "Auctions", "Auction", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of auction categories
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionCategories
		 * @path <API Root>/Auctions/AuctionCategories
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionCategoryPagedResults>}
		 * @public
		 */
		GetAuctionCategories = (routeParams?: GetAuctionCategoriesDto) => this.$http<AuctionCategoryPagedResults>({
			url: [this.rootUrl, "Auctions", "AuctionCategories"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of auctions
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctions
		 * @path <API Root>/Auctions/Auctions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AuctionPagedResults>}
		 * @public
		 */
		GetAuctions = (routeParams?: GetAuctionsDto) => this.$http<AuctionPagedResults>({
			url: [this.rootUrl, "Auctions", "Auctions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Provides the same results as calling GetAuctionByID multiple times with separate IDs.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionsByIDs
		 * @path <API Root>/Auctions/Auctions/ByIDs
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AuctionModel>>}
		 * @public
		 */
		GetAuctionsByIDs = (routeParams: GetAuctionsByIDsDto) => this.$http<Array<AuctionModel>>({
			url: [this.rootUrl, "Auctions", "Auctions", "ByIDs"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAuctionsByZipCodeRadius
		 * @path <API Root>/Auctions/Auction/GetAuctionsByPostalCodeRadius
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<AuctionModel>>}
		 * @public
		 */
		GetAuctionsByZipCodeRadius = (routeParams: GetAuctionsByZipCodeRadiusDto) => this.$http<Array<AuctionModel>>({
			url: [this.rootUrl, "Auctions", "Auction", "GetAuctionsByPostalCodeRadius"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of bids
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetBids
		 * @path <API Root>/Auctions/Bids
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<BidPagedResults>}
		 * @public
		 */
		GetBids = (routeParams?: GetBidsDto) => this.$http<BidPagedResults>({
			url: [this.rootUrl, "Auctions", "Bids"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific lot
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotByID
		 * @path <API Root>/Auctions/Lot/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotModel>}
		 * @public
		 */
		GetLotByID = (id: number) => this.$http<LotModel>({
			url: [this.rootUrl, "Auctions", "Lot", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of lot groups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotGroups
		 * @path <API Root>/Auctions/LotGroups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotGroupPagedResults>}
		 * @public
		 */
		GetLotGroups = (routeParams?: GetLotGroupsDto) => this.$http<LotGroupPagedResults>({
			url: [this.rootUrl, "Auctions", "LotGroups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of lots
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLots
		 * @path <API Root>/Auctions/Lots
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<LotPagedResults>}
		 * @public
		 */
		GetLots = (routeParams?: GetLotsDto) => this.$http<LotPagedResults>({
			url: [this.rootUrl, "Auctions", "Lots"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Provides the same results as calling GetLotByID multiple times with separate IDs.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetLotsByIDs
		 * @path <API Root>/Auctions/Lots/ByIDs
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<LotModel>>}
		 * @public
		 */
		GetLotsByIDs = (routeParams: GetLotsByIDsDto) => this.$http<Array<LotModel>>({
			url: [this.rootUrl, "Auctions", "Lots", "ByIDs"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Endpoint for More Items From Your Auctions Section.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetMoreItemsFromYourAuctions
		 * @path <API Root>/Auctions/Auction/GetMoreItemsFromYourAuctions
		 * @verb GET
		 * @returns {ng.IHttpPromise<Array<LotModel>>}
		 * @public
		 */
		GetMoreItemsFromYourAuctions = () => this.$http<Array<LotModel>>({
			url: [this.rootUrl, "Auctions", "Auction", "GetMoreItemsFromYourAuctions"].join("/"),
			method: "GET",
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSignalRBid
		 * @path <API Root>/Auctions/Bid/GetSignalRBid
		 * @verb GET
		 * @returns {ng.IHttpPromise<BidModel>}
		 * @public
		 */
		GetSignalRBid = (routeParams: GetSignalRBidDto) => this.$http<BidModel>({
			url: [this.rootUrl, "Auctions", "Bid", "GetSignalRBid"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSignalRHighestCurrentBid
		 * @path <API Root>/Auctions/Bid/GetSignalRHighestCurrentBid
		 * @verb GET
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		GetSignalRHighestCurrentBid = (routeParams: GetSignalRHighestCurrentBidDto) => this.$http<number>({
			url: [this.rootUrl, "Auctions", "Bid", "GetSignalRHighestCurrentBid"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetSortedProductIDsByHighestBidCount
		 * @path <API Root>/Auctions/Bid/GetSortedProductIDsByHighestBidCount
		 * @verb GET
		 * @returns {ng.IHttpPromise<BidModel>}
		 * @public
		 */
		GetSortedProductIDsByHighestBidCount = (routeParams: GetSortedProductIDsByHighestBidCountDto) => this.$http<BidModel>({
			url: [this.rootUrl, "Auctions", "Bid", "GetSortedProductIDsByHighestBidCount"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.LargeBidNotifications
		 * @path <API Root>/Auctions/Bid/LargeBidNotifications
		 * @verb GET
		 * @returns {ng.IHttpPromise<boolean>}
		 * @public
		 */
		LargeBidNotifications = (routeParams: LargeBidNotificationsDto) => this.$http<boolean>({
			url: [this.rootUrl, "Auctions", "Bid", "LargeBidNotifications"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * @param {@link cef.store.api.ProcessPaymentLotWonDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ProcessPaymentLotWon
		 * @path <API Root>/Auctions/Bid/ProcessPaymentLotWon
		 * @verb POST
		 * @returns {ng.IHttpPromise<CEFActionResponse>}
		 * @public
		 */
		ProcessPaymentLotWon = (routeParams: ProcessPaymentLotWonDto) => this.$http<CEFActionResponse>({
			url: [this.rootUrl, "Auctions", "Bid", "ProcessPaymentLotWon"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * @generatedByCSharpType Clarity.Ecommerce.Service.SignalRQuickBid
		 * @path <API Root>/Auctions/Bid/SignalRQuickBid
		 * @verb GET
		 * @returns {ng.IHttpPromise<BidModel>}
		 * @public
		 */
		SignalRQuickBid = (routeParams: SignalRQuickBidDto) => this.$http<BidModel>({
			url: [this.rootUrl, "Auctions", "Bid", "SignalRQuickBid"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to create a new or update an existing lot group (as needed).
		 * @param {@link cef.store.api.UpsertLotGroupDto} routeParams - The route parameters as a Body Object
		 * @generatedByCSharpType Clarity.Ecommerce.Service.UpsertLotGroup
		 * @path <API Root>/Auctions/LotGroup/Upsert
		 * @verb POST
		 * @priority 1
		 * @returns {ng.IHttpPromise<CEFActionResponseT<number>>}
		 * @public
		 */
		UpsertLotGroup = (routeParams?: UpsertLotGroupDto) => this.$http<CEFActionResponseT<number>>({
			url: [this.rootUrl, "Auctions", "LotGroup", "Upsert"].join("/"),
			method: "POST",
			data: routeParams
		});

		/**
		 * Validates the VIN number and if valid, then sets the VIN on the product description.
		 * @generatedByCSharpType Clarity.Ecommerce.Service.ValidateVinNumber
		 * @path <API Root>/Auctions/Lots/ValidateVinNumber
		 * @verb GET
		 * @returns {ng.IHttpPromise<CEFActionResponseT<boolean>>}
		 * @public
		 */
		ValidateVinNumber = (routeParams: ValidateVinNumberDto) => this.$http<CEFActionResponseT<boolean>>({
			url: [this.rootUrl, "Auctions", "Lots", "ValidateVinNumber"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
