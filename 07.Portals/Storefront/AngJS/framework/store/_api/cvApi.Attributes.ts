/**
 * @file framework/store/_api/cvApi.Attributes.ts
 * @author Copyright (c) 2015-2023 clarity-ventures.com. All rights reserved.
 * @desc The Angular Service module written in TypeScript
 * @remarks This file was auto-generated by cvApi.tt in 07.Portals/Storefront/AngJS/framework/store/_api/
 */
module cef.store.api {

	/**
	 * Check if this Display Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsDisplayNameBase}
	 * @public
	 */
	export interface CheckGeneralAttributeExistsByDisplayNameDto extends ImplementsDisplayNameBase {
	}
	/**
	 * Check if this Name exists and return the id if it does (null if it does not)
	 * @see {@link ImplementsNameBase}
	 * @public
	 */
	export interface CheckGeneralAttributeExistsByNameDto extends ImplementsNameBase {
	}
	/**
	 * Use to get a list of attribute groups
	 * @see {@link AttributeGroupSearchModel}
	 * @public
	 */
	export interface GetAttributeGroupsDto extends AttributeGroupSearchModel {
	}
	/**
	 * Use to get a list of attribute tabs
	 * @see {@link AttributeTabSearchModel}
	 * @public
	 */
	export interface GetAttributeTabsDto extends AttributeTabSearchModel {
	}
	/**
	 * Use to get a list of attribute types
	 * @see {@link AttributeTypeSearchModel}
	 * @public
	 */
	export interface GetAttributeTypesDto extends AttributeTypeSearchModel {
	}
	/**
	 * Use to get a list of general attribute predefined options
	 * @see {@link GeneralAttributePredefinedOptionSearchModel}
	 * @public
	 */
	export interface GetGeneralAttributePredefinedOptionsDto extends GeneralAttributePredefinedOptionSearchModel {
	}
	/**
	 * Use to get a list of general attributes
	 * @see {@link GeneralAttributeSearchModel}
	 * @public
	 */
	export interface GetGeneralAttributesDto extends GeneralAttributeSearchModel {
	}

	export class Attributes extends ServiceStackRoute {
		/**
		 * Check if this Display Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckGeneralAttributeExistsByDisplayName
		 * @path <API Root>/Attributes/GeneralAttribute/Exists/DisplayName
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckGeneralAttributeExistsByDisplayName = (routeParams?: CheckGeneralAttributeExistsByDisplayNameDto) => this.$http<number>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Exists", "DisplayName"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Check if this key exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckGeneralAttributeExistsByKey
		 * @path <API Root>/Attributes/GeneralAttribute/Exists/Key/{Key*}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckGeneralAttributeExistsByKey = (key: string) => this.$http<number>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Exists", "Key", encodeURIComponent(key)].join("/"),
			method: "GET",
		});

		/**
		 * Check if this Name exists and return the id if it does (null if it does not)
		 * @generatedByCSharpType Clarity.Ecommerce.Service.CheckGeneralAttributeExistsByName
		 * @path <API Root>/Attributes/GeneralAttribute/Exists/Name
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<number>}
		 * @public
		 */
		CheckGeneralAttributeExistsByName = (routeParams?: CheckGeneralAttributeExistsByNameDto) => this.$http<number>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "Exists", "Name"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of attribute groups
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeGroups
		 * @path <API Root>/Attributes/AttributeGroups
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeGroupPagedResults>}
		 * @public
		 */
		GetAttributeGroups = (routeParams?: GetAttributeGroupsDto) => this.$http<AttributeGroupPagedResults>({
			url: [this.rootUrl, "Attributes", "AttributeGroups"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of attribute tabs
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeTabs
		 * @path <API Root>/Attributes/AttributeTabs
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeTabPagedResults>}
		 * @public
		 */
		GetAttributeTabs = (routeParams?: GetAttributeTabsDto) => this.$http<AttributeTabPagedResults>({
			url: [this.rootUrl, "Attributes", "AttributeTabs"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of attribute types
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetAttributeTypes
		 * @path <API Root>/Attributes/AttributeTypes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<AttributeTypePagedResults>}
		 * @public
		 */
		GetAttributeTypes = (routeParams?: GetAttributeTypesDto) => this.$http<AttributeTypePagedResults>({
			url: [this.rootUrl, "Attributes", "AttributeTypes"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a specific general attribute
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGeneralAttributeByID
		 * @path <API Root>/Attributes/GeneralAttribute/ID/{ID}
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GeneralAttributeModel>}
		 * @public
		 */
		GetGeneralAttributeByID = (id: number) => this.$http<GeneralAttributeModel>({
			url: [this.rootUrl, "Attributes", "GeneralAttribute", "ID", id].join("/"),
			method: "GET",
		});

		/**
		 * Use to get a list of general attribute predefined options
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGeneralAttributePredefinedOptions
		 * @path <API Root>/Attributes/GeneralAttributePredefinedOptions
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GeneralAttributePredefinedOptionPagedResults>}
		 * @public
		 */
		GetGeneralAttributePredefinedOptions = (routeParams?: GetGeneralAttributePredefinedOptionsDto) => this.$http<GeneralAttributePredefinedOptionPagedResults>({
			url: [this.rootUrl, "Attributes", "GeneralAttributePredefinedOptions"].join("/"),
			method: "GET",
			params: routeParams
		});

		/**
		 * Use to get a list of general attributes
		 * @generatedByCSharpType Clarity.Ecommerce.Service.GetGeneralAttributes
		 * @path <API Root>/Attributes/GeneralAttributes
		 * @verb GET
		 * @priority 1
		 * @returns {ng.IHttpPromise<GeneralAttributePagedResults>}
		 * @public
		 */
		GetGeneralAttributes = (routeParams?: GetGeneralAttributesDto) => this.$http<GeneralAttributePagedResults>({
			url: [this.rootUrl, "Attributes", "GeneralAttributes"].join("/"),
			method: "GET",
			params: routeParams
		});

	}
}
