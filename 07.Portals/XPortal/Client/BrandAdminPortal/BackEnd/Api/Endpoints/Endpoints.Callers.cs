// <autogenerated>
// <copyright file="Endpoints.Callers.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the endpoints callers classes</summary>
// </autogenerated>
#nullable disable
// ReSharper disable InconsistentNaming, MissingXmlDoc, PartialTypeWithSinglePart, RedundantExtendsListEntry
// ReSharper disable RedundantTypeArgumentsOfMethod, StyleCop.SA1300, StyleCop.SA1402, StyleCop.SA1516
#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable SA1027 // Tabs vs Spaces
#pragma warning disable SA1117 // Parameter wrapping
#pragma warning disable SA1600 // XML Docs
namespace Clarity.Ecommerce.MVC.Api.Callers
{
	using System;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Core;
	using Endpoints;
	using JetBrains.Annotations;
	using Microsoft.JSInterop;
	using Models;
	using Service;

	[PublicAPI]
	public partial class CEFAPI
	{
		public CEFAPI(CEFService service)
		{
			CEFService = service;
		}

		public CEFService CEFService { get; }

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccount(
			CreateAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountByID(
			DeactivateAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountByID(
			DeleteAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountModel>> GetAccountByID(
			GetAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountModel>(
				await CEFService.RequestAsync<GetAccountByID, AccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountByID(
			ReactivateAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccount(
			UpdateAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountAssociationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountAssociationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountAssociation(
			CreateAccountAssociation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountAssociation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountAssociationByID(
			DeactivateAccountAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountAssociationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountAssociationByID(
			DeleteAccountAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountAssociationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountAssociationModel>> GetAccountAssociationByID(
			GetAccountAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountAssociationModel>(
				await CEFService.RequestAsync<GetAccountAssociationByID, AccountAssociationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountAssociationByID(
			ReactivateAccountAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountAssociationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountAssociation(
			UpdateAccountAssociation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountAssociation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountAssociationPagedResults>> GetAccountAssociations(
			GetAccountAssociations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountAssociationPagedResults>(
				await CEFService.RequestAsync<GetAccountAssociations, AccountAssociationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountAssociationTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountAssociationTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountAssociationType(
			CreateAccountAssociationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountAssociationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountAssociationTypeByID(
			DeactivateAccountAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountAssociationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountAssociationTypeByID(
			DeleteAccountAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountAssociationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAccountAssociationTypeByID(
			GetAccountAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAccountAssociationTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountAssociationTypeByID(
			ReactivateAccountAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountAssociationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountAssociationType(
			UpdateAccountAssociationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountAssociationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountAssociationTypePagedResults>> GetAccountAssociationTypes(
			GetAccountAssociationTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountAssociationTypePagedResults>(
				await CEFService.RequestAsync<GetAccountAssociationTypes, AccountAssociationTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountContact(
			CreateAccountContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountContactByID(
			DeactivateAccountContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountContactByID(
			DeleteAccountContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountContactModel>> GetAccountContactByID(
			GetAccountContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountContactModel>(
				await CEFService.RequestAsync<GetAccountContactByID, AccountContactModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> MarkAccountContactAsDefaultBilling(
			MarkAccountContactAsDefaultBilling request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<MarkAccountContactAsDefaultBilling, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> MarkAccountContactAsNeitherBillingNorShipping(
			MarkAccountContactAsNeitherBillingNorShipping request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<MarkAccountContactAsNeitherBillingNorShipping, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> MarkAccountContactAsPrimaryShipping(
			MarkAccountContactAsPrimaryShipping request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<MarkAccountContactAsPrimaryShipping, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountContactByID(
			ReactivateAccountContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountContact(
			UpdateAccountContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountContactPagedResults>> GetAccountContacts(
			GetAccountContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountContactPagedResults>(
				await CEFService.RequestAsync<GetAccountContacts, AccountContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountCurrencyPagedResults>> GetAccountCurrencies(
			GetAccountCurrencies request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountCurrencyPagedResults>(
				await CEFService.RequestAsync<GetAccountCurrencies, AccountCurrencyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountCurrencyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountCurrencyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountCurrency(
			CreateAccountCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountCurrencyByID(
			DeactivateAccountCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountCurrencyByID(
			DeleteAccountCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountCurrencyModel>> GetAccountCurrencyByID(
			GetAccountCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountCurrencyModel>(
				await CEFService.RequestAsync<GetAccountCurrencyByID, AccountCurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountCurrencyByID(
			ReactivateAccountCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountCurrency(
			UpdateAccountCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountFile(
			CreateAccountFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountFileByID(
			DeactivateAccountFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountFileByID(
			DeleteAccountFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountFileModel>> GetAccountFileByID(
			GetAccountFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountFileModel>(
				await CEFService.RequestAsync<GetAccountFileByID, AccountFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountFileByID(
			ReactivateAccountFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountFile(
			UpdateAccountFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountFilePagedResults>> GetAccountFiles(
			GetAccountFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountFilePagedResults>(
				await CEFService.RequestAsync<GetAccountFiles, AccountFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountImage(
			CreateAccountImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountImageByID(
			DeactivateAccountImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountImageByID(
			DeleteAccountImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountImageModel>> GetAccountImageByID(
			GetAccountImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountImageModel>(
				await CEFService.RequestAsync<GetAccountImageByID, AccountImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountImageByID(
			ReactivateAccountImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountImage(
			UpdateAccountImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountImagePagedResults>> GetAccountImages(
			GetAccountImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountImagePagedResults>(
				await CEFService.RequestAsync<GetAccountImages, AccountImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountImageType(
			CreateAccountImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountImageTypeByID(
			DeactivateAccountImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountImageTypeByID(
			DeleteAccountImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAccountImageTypeByID(
			GetAccountImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAccountImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountImageTypeByID(
			ReactivateAccountImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountImageType(
			UpdateAccountImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountImageTypePagedResults>> GetAccountImageTypes(
			GetAccountImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountImageTypePagedResults>(
				await CEFService.RequestAsync<GetAccountImageTypes, AccountImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountPricePointCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountPricePointCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountPricePoint(
			CreateAccountPricePoint request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountPricePoint, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountPricePointByID(
			DeactivateAccountPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountPricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountPricePointByID(
			DeleteAccountPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountPricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountPricePointModel>> GetAccountPricePointByID(
			GetAccountPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountPricePointModel>(
				await CEFService.RequestAsync<GetAccountPricePointByID, AccountPricePointModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountPricePointByID(
			ReactivateAccountPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountPricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountPricePoint(
			UpdateAccountPricePoint request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountPricePoint, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountPricePointPagedResults>> GetAccountPricePoints(
			GetAccountPricePoints request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountPricePointPagedResults>(
				await CEFService.RequestAsync<GetAccountPricePoints, AccountPricePointPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountProduct(
			CreateAccountProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountProductByID(
			DeactivateAccountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountProductByID(
			DeleteAccountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountProductModel>> GetAccountProductByID(
			GetAccountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountProductModel>(
				await CEFService.RequestAsync<GetAccountProductByID, AccountProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountProductByID(
			ReactivateAccountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountProduct(
			UpdateAccountProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountProductPagedResults>> GetAccountProducts(
			GetAccountProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountProductPagedResults>(
				await CEFService.RequestAsync<GetAccountProducts, AccountProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountProductTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountProductTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountProductType(
			CreateAccountProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountProductTypeByID(
			DeactivateAccountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountProductTypeByID(
			DeleteAccountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAccountProductTypeByID(
			GetAccountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAccountProductTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountProductTypeByID(
			ReactivateAccountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountProductType(
			UpdateAccountProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountProductTypePagedResults>> GetAccountProductTypes(
			GetAccountProductTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountProductTypePagedResults>(
				await CEFService.RequestAsync<GetAccountProductTypes, AccountProductTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountPagedResults>> GetAccounts(
			GetAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountPagedResults>(
				await CEFService.RequestAsync<GetAccounts, AccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountPagedResults>> GetAccountsForCurrentAccount(
			GetAccountsForCurrentAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountPagedResults>(
				await CEFService.RequestAsync<GetAccountsForCurrentAccount, AccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountStatus(
			CreateAccountStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountStatusByID(
			DeactivateAccountStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountStatusByID(
			DeleteAccountStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetAccountStatusByID(
			GetAccountStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetAccountStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountStatusByID(
			ReactivateAccountStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountStatus(
			UpdateAccountStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountStatusPagedResults>> GetAccountStatuses(
			GetAccountStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountStatusPagedResults>(
				await CEFService.RequestAsync<GetAccountStatuses, AccountStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountType(
			CreateAccountType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountTypeByID(
			DeactivateAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountTypeByID(
			DeleteAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAccountTypeByID(
			GetAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAccountTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountTypeByID(
			ReactivateAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountType(
			UpdateAccountType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountTypePagedResults>> GetAccountTypes(
			GetAccountTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountTypePagedResults>(
				await CEFService.RequestAsync<GetAccountTypes, AccountTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAccountUsageBalanceCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAccountUsageBalanceCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAccountUsageBalance(
			CreateAccountUsageBalance request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAccountUsageBalance, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAccountUsageBalanceByID(
			DeactivateAccountUsageBalanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAccountUsageBalanceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAccountUsageBalanceByID(
			DeleteAccountUsageBalanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAccountUsageBalanceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountUsageBalanceModel>> GetAccountUsageBalanceByID(
			GetAccountUsageBalanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountUsageBalanceModel>(
				await CEFService.RequestAsync<GetAccountUsageBalanceByID, AccountUsageBalanceModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAccountUsageBalanceByID(
			ReactivateAccountUsageBalanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAccountUsageBalanceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAccountUsageBalance(
			UpdateAccountUsageBalance request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAccountUsageBalance, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountUsageBalancePagedResults>> GetAccountUsageBalances(
			GetAccountUsageBalances request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountUsageBalancePagedResults>(
				await CEFService.RequestAsync<GetAccountUsageBalances, AccountUsageBalancePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<int>>> GetAllUserIDsForCurrentAccount(
			GetAllUserIDsForCurrentAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<int>>(
				await CEFService.RequestAsync<GetAllUserIDsForCurrentAccount, List<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearContractorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearContractorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateContractor(
			CreateContractor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateContractor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateContractorByID(
			DeactivateContractorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateContractorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteContractorByID(
			DeleteContractorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteContractorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContractorModel>> GetContractorByID(
			GetContractorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContractorModel>(
				await CEFService.RequestAsync<GetContractorByID, ContractorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateContractorByID(
			ReactivateContractorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateContractorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateContractor(
			UpdateContractor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateContractor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContractorPagedResults>> GetContractors(
			GetContractors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContractorPagedResults>(
				await CEFService.RequestAsync<GetContractors, ContractorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountModel>> GetCurrentAccount()
		{
			return new HttpPromiseCallbackArg<AccountModel>(
				await CEFService.RequestAsync<GetCurrentAccount, AccountModel>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountModel>> UpdateCurrentAccount(
			UpdateCurrentAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountModel>(
				await CEFService.RequestAsync<UpdateCurrentAccount, AccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearServiceAreaCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearServiceAreaCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateServiceArea(
			CreateServiceArea request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateServiceArea, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateServiceAreaByID(
			DeactivateServiceAreaByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateServiceAreaByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteServiceAreaByID(
			DeleteServiceAreaByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteServiceAreaByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ServiceAreaModel>> GetServiceAreaByID(
			GetServiceAreaByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ServiceAreaModel>(
				await CEFService.RequestAsync<GetServiceAreaByID, ServiceAreaModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateServiceAreaByID(
			ReactivateServiceAreaByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateServiceAreaByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateServiceArea(
			UpdateServiceArea request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateServiceArea, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ServiceAreaPagedResults>> GetServiceAreas(
			GetServiceAreas request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ServiceAreaPagedResults>(
				await CEFService.RequestAsync<GetServiceAreas, ServiceAreaPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserPagedResults>> GetUsersForCurrentAccount(
			GetUsersForCurrentAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserPagedResults>(
				await CEFService.RequestAsync<GetUsersForCurrentAccount, UserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAd(
			CreateAd request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAd, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdByID(
			DeactivateAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdByID(
			DeleteAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdModel>> GetAdByID(
			GetAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdModel>(
				await CEFService.RequestAsync<GetAdByID, AdModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdByID(
			ReactivateAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAd(
			UpdateAd request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAd, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdAccount(
			CreateAdAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdAccountByID(
			DeactivateAdAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdAccountByID(
			DeleteAdAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdAccountModel>> GetAdAccountByID(
			GetAdAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdAccountModel>(
				await CEFService.RequestAsync<GetAdAccountByID, AdAccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdAccountByID(
			ReactivateAdAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdAccount(
			UpdateAdAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdAccountPagedResults>> GetAdAccounts(
			GetAdAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdAccountPagedResults>(
				await CEFService.RequestAsync<GetAdAccounts, AdAccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdBrandCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdBrandCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdBrand(
			CreateAdBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdBrandByID(
			DeactivateAdBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdBrandByID(
			DeleteAdBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdBrandModel>> GetAdBrandByID(
			GetAdBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdBrandModel>(
				await CEFService.RequestAsync<GetAdBrandByID, AdBrandModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdBrandByID(
			ReactivateAdBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdBrand(
			UpdateAdBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdBrandPagedResults>> GetAdBrands(
			GetAdBrands request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdBrandPagedResults>(
				await CEFService.RequestAsync<GetAdBrands, AdBrandPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdFranchiseCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdFranchiseCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdFranchise(
			CreateAdFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdFranchiseByID(
			DeactivateAdFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdFranchiseByID(
			DeleteAdFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdFranchiseModel>> GetAdFranchiseByID(
			GetAdFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdFranchiseModel>(
				await CEFService.RequestAsync<GetAdFranchiseByID, AdFranchiseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdFranchiseByID(
			ReactivateAdFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdFranchise(
			UpdateAdFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdFranchisePagedResults>> GetAdFranchises(
			GetAdFranchises request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdFranchisePagedResults>(
				await CEFService.RequestAsync<GetAdFranchises, AdFranchisePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdImage(
			CreateAdImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdImageByID(
			DeactivateAdImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdImageByID(
			DeleteAdImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdImageModel>> GetAdImageByID(
			GetAdImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdImageModel>(
				await CEFService.RequestAsync<GetAdImageByID, AdImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdImageByID(
			ReactivateAdImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdImage(
			UpdateAdImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdImagePagedResults>> GetAdImages(
			GetAdImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdImagePagedResults>(
				await CEFService.RequestAsync<GetAdImages, AdImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdImageType(
			CreateAdImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdImageTypeByID(
			DeactivateAdImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdImageTypeByID(
			DeleteAdImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAdImageTypeByID(
			GetAdImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAdImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdImageTypeByID(
			ReactivateAdImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdImageType(
			UpdateAdImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdImageTypePagedResults>> GetAdImageTypes(
			GetAdImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdImageTypePagedResults>(
				await CEFService.RequestAsync<GetAdImageTypes, AdImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdPagedResults>> GetAds(
			GetAds request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdPagedResults>(
				await CEFService.RequestAsync<GetAds, AdPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdStatus(
			CreateAdStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdStatusByID(
			DeactivateAdStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdStatusByID(
			DeleteAdStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetAdStatusByID(
			GetAdStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetAdStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdStatusByID(
			ReactivateAdStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdStatus(
			UpdateAdStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdStatusPagedResults>> GetAdStatuses(
			GetAdStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdStatusPagedResults>(
				await CEFService.RequestAsync<GetAdStatuses, AdStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdStoreCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdStoreCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdStore(
			CreateAdStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdStoreByID(
			DeactivateAdStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdStoreByID(
			DeleteAdStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdStoreModel>> GetAdStoreByID(
			GetAdStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdStoreModel>(
				await CEFService.RequestAsync<GetAdStoreByID, AdStoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdStoreByID(
			ReactivateAdStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdStore(
			UpdateAdStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdStorePagedResults>> GetAdStores(
			GetAdStores request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdStorePagedResults>(
				await CEFService.RequestAsync<GetAdStores, AdStorePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdType(
			CreateAdType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdTypeByID(
			DeactivateAdTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdTypeByID(
			DeleteAdTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAdTypeByID(
			GetAdTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAdTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdTypeByID(
			ReactivateAdTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdType(
			UpdateAdType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdTypePagedResults>> GetAdTypes(
			GetAdTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdTypePagedResults>(
				await CEFService.RequestAsync<GetAdTypes, AdTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdZoneCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdZoneCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdZone(
			CreateAdZone request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdZone, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdZoneByID(
			DeactivateAdZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdZoneByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdZoneByID(
			DeleteAdZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdZoneByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdZoneModel>> GetAdZoneByID(
			GetAdZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdZoneModel>(
				await CEFService.RequestAsync<GetAdZoneByID, AdZoneModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdZoneByID(
			ReactivateAdZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdZoneByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdZone(
			UpdateAdZone request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdZone, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAdZoneAccessCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAdZoneAccessCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAdZoneAccess(
			CreateAdZoneAccess request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAdZoneAccess, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAdZoneAccessByID(
			DeactivateAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAdZoneAccessByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAdZoneAccessByID(
			DeleteAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAdZoneAccessByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdZoneAccessModel>> GetAdZoneAccessByID(
			GetAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdZoneAccessModel>(
				await CEFService.RequestAsync<GetAdZoneAccessByID, AdZoneAccessModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAdZoneAccessByID(
			ReactivateAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAdZoneAccessByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAdZoneAccess(
			UpdateAdZoneAccess request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAdZoneAccess, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdZoneAccessPagedResults>> GetAdZoneAccesses(
			GetAdZoneAccesses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdZoneAccessPagedResults>(
				await CEFService.RequestAsync<GetAdZoneAccesses, AdZoneAccessPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AdZonePagedResults>> GetAdZones(
			GetAdZones request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AdZonePagedResults>(
				await CEFService.RequestAsync<GetAdZones, AdZonePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearZoneCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearZoneCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateZone(
			CreateZone request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateZone, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateZoneByID(
			DeactivateZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateZoneByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteZoneByID(
			DeleteZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteZoneByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ZoneModel>> GetZoneByID(
			GetZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ZoneModel>(
				await CEFService.RequestAsync<GetZoneByID, ZoneModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateZoneByID(
			ReactivateZoneByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateZoneByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateZone(
			UpdateZone request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateZone, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ZonePagedResults>> GetZones(
			GetZones request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ZonePagedResults>(
				await CEFService.RequestAsync<GetZones, ZonePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearZoneStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearZoneStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateZoneStatus(
			CreateZoneStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateZoneStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateZoneStatusByID(
			DeactivateZoneStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateZoneStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteZoneStatusByID(
			DeleteZoneStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteZoneStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetZoneStatusByID(
			GetZoneStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetZoneStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateZoneStatusByID(
			ReactivateZoneStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateZoneStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateZoneStatus(
			UpdateZoneStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateZoneStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ZoneStatusPagedResults>> GetZoneStatuses(
			GetZoneStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ZoneStatusPagedResults>(
				await CEFService.RequestAsync<GetZoneStatuses, ZoneStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearZoneTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearZoneTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateZoneType(
			CreateZoneType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateZoneType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateZoneTypeByID(
			DeactivateZoneTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateZoneTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteZoneTypeByID(
			DeleteZoneTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteZoneTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetZoneTypeByID(
			GetZoneTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetZoneTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateZoneTypeByID(
			ReactivateZoneTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateZoneTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateZoneType(
			UpdateZoneType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateZoneType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ZoneTypePagedResults>> GetZoneTypes(
			GetZoneTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ZoneTypePagedResults>(
				await CEFService.RequestAsync<GetZoneTypes, ZoneTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAttributeGroupCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAttributeGroupCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAttributeGroup(
			CreateAttributeGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAttributeGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAttributeGroupByID(
			DeactivateAttributeGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAttributeGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAttributeGroupByID(
			DeleteAttributeGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAttributeGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AttributeGroupModel>> GetAttributeGroupByID(
			GetAttributeGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AttributeGroupModel>(
				await CEFService.RequestAsync<GetAttributeGroupByID, AttributeGroupModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAttributeGroupByID(
			ReactivateAttributeGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAttributeGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAttributeGroup(
			UpdateAttributeGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAttributeGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AttributeGroupPagedResults>> GetAttributeGroups(
			GetAttributeGroups request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AttributeGroupPagedResults>(
				await CEFService.RequestAsync<GetAttributeGroups, AttributeGroupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAttributeTabCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAttributeTabCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAttributeTab(
			CreateAttributeTab request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAttributeTab, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAttributeTabByID(
			DeactivateAttributeTabByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAttributeTabByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAttributeTabByID(
			DeleteAttributeTabByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAttributeTabByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AttributeTabModel>> GetAttributeTabByID(
			GetAttributeTabByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AttributeTabModel>(
				await CEFService.RequestAsync<GetAttributeTabByID, AttributeTabModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAttributeTabByID(
			ReactivateAttributeTabByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAttributeTabByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAttributeTab(
			UpdateAttributeTab request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAttributeTab, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AttributeTabPagedResults>> GetAttributeTabs(
			GetAttributeTabs request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AttributeTabPagedResults>(
				await CEFService.RequestAsync<GetAttributeTabs, AttributeTabPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAttributeTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAttributeTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAttributeType(
			CreateAttributeType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAttributeType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAttributeTypeByID(
			DeactivateAttributeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAttributeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAttributeTypeByID(
			DeleteAttributeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAttributeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AttributeTypeModel>> GetAttributeTypeByID(
			GetAttributeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AttributeTypeModel>(
				await CEFService.RequestAsync<GetAttributeTypeByID, AttributeTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAttributeTypeByID(
			ReactivateAttributeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAttributeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAttributeType(
			UpdateAttributeType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAttributeType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AttributeTypePagedResults>> GetAttributeTypes(
			GetAttributeTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AttributeTypePagedResults>(
				await CEFService.RequestAsync<GetAttributeTypes, AttributeTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearGeneralAttributeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearGeneralAttributeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateGeneralAttribute(
			CreateGeneralAttribute request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateGeneralAttribute, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateGeneralAttributeByID(
			DeactivateGeneralAttributeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateGeneralAttributeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteGeneralAttributeByID(
			DeleteGeneralAttributeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteGeneralAttributeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckGeneralAttributeExistsByDisplayName(
			CheckGeneralAttributeExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckGeneralAttributeExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckGeneralAttributeExistsByKey(
			CheckGeneralAttributeExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckGeneralAttributeExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckGeneralAttributeExistsByName(
			CheckGeneralAttributeExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckGeneralAttributeExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GeneralAttributeModel>> GetGeneralAttributeByID(
			GetGeneralAttributeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GeneralAttributeModel>(
				await CEFService.RequestAsync<GetGeneralAttributeByID, GeneralAttributeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateGeneralAttributeByID(
			ReactivateGeneralAttributeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateGeneralAttributeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateGeneralAttribute(
			UpdateGeneralAttribute request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateGeneralAttribute, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearGeneralAttributePredefinedOptionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearGeneralAttributePredefinedOptionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateGeneralAttributePredefinedOption(
			CreateGeneralAttributePredefinedOption request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateGeneralAttributePredefinedOption, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateGeneralAttributePredefinedOptionByID(
			DeactivateGeneralAttributePredefinedOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateGeneralAttributePredefinedOptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteGeneralAttributePredefinedOptionByID(
			DeleteGeneralAttributePredefinedOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteGeneralAttributePredefinedOptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GeneralAttributePredefinedOptionModel>> GetGeneralAttributePredefinedOptionByID(
			GetGeneralAttributePredefinedOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GeneralAttributePredefinedOptionModel>(
				await CEFService.RequestAsync<GetGeneralAttributePredefinedOptionByID, GeneralAttributePredefinedOptionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateGeneralAttributePredefinedOptionByID(
			ReactivateGeneralAttributePredefinedOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateGeneralAttributePredefinedOptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateGeneralAttributePredefinedOption(
			UpdateGeneralAttributePredefinedOption request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateGeneralAttributePredefinedOption, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GeneralAttributePredefinedOptionPagedResults>> GetGeneralAttributePredefinedOptions(
			GetGeneralAttributePredefinedOptions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GeneralAttributePredefinedOptionPagedResults>(
				await CEFService.RequestAsync<GetGeneralAttributePredefinedOptions, GeneralAttributePredefinedOptionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GeneralAttributePagedResults>> GetGeneralAttributes(
			GetGeneralAttributes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GeneralAttributePagedResults>(
				await CEFService.RequestAsync<GetGeneralAttributes, GeneralAttributePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<Clarity.Ecommerce.Clients.BID.AuctionCardModel>>> GetActiveAuctionsForHomePage()
		{
			return new HttpPromiseCallbackArg<List<Clarity.Ecommerce.Clients.BID.AuctionCardModel>>(
				await CEFService.RequestAsync<GetActiveAuctionsForHomePage, List<Clarity.Ecommerce.Clients.BID.AuctionCardModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionPagedResults>> AdminGetAuctionsForPortal(
			AdminGetAuctionsForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionPagedResults>(
				await CEFService.RequestAsync<AdminGetAuctionsForPortal, AuctionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAuctionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAuctionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAuction(
			CreateAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAuctionByID(
			DeactivateAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAuctionByID(
			DeleteAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckAuctionExistsByID(
			CheckAuctionExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckAuctionExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckAuctionExistsByKey(
			CheckAuctionExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckAuctionExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckAuctionExistsByName(
			CheckAuctionExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckAuctionExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<AuctionModel>>> GetActiveAuctions()
		{
			return new HttpPromiseCallbackArg<List<AuctionModel>>(
				await CEFService.RequestAsync<GetActiveAuctions, List<AuctionModel>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<AuctionModel>>> GetAuctionsByZipCodeRadius(
			GetAuctionsByZipCodeRadius request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<AuctionModel>>(
				await CEFService.RequestAsync<GetAuctionsByZipCodeRadius, List<AuctionModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<LotModel>>> GetMoreItemsFromYourAuctions()
		{
			return new HttpPromiseCallbackArg<List<LotModel>>(
				await CEFService.RequestAsync<GetMoreItemsFromYourAuctions, List<LotModel>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionModel>> GetAuctionByID(
			GetAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionModel>(
				await CEFService.RequestAsync<GetAuctionByID, AuctionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAuctionByID(
			ReactivateAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAuction(
			UpdateAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionCardPagedResults>> GetAuctionCards(
			GetAuctionCards request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionCardPagedResults>(
				await CEFService.RequestAsync<GetAuctionCards, AuctionCardPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionCategoryPagedResults>> GetAuctionCategories(
			GetAuctionCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionCategoryPagedResults>(
				await CEFService.RequestAsync<GetAuctionCategories, AuctionCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAuctionCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAuctionCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAuctionCategory(
			CreateAuctionCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAuctionCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAuctionCategoryByID(
			DeactivateAuctionCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAuctionCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAuctionCategoryByID(
			DeleteAuctionCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAuctionCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionCategoryModel>> GetAuctionCategoryByID(
			GetAuctionCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionCategoryModel>(
				await CEFService.RequestAsync<GetAuctionCategoryByID, AuctionCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAuctionCategoryByID(
			ReactivateAuctionCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAuctionCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAuctionCategory(
			UpdateAuctionCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAuctionCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionPagedResults>> GetAuctions(
			GetAuctions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionPagedResults>(
				await CEFService.RequestAsync<GetAuctions, AuctionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<AuctionModel>>> GetAuctionsByIDs(
			GetAuctionsByIDs request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<AuctionModel>>(
				await CEFService.RequestAsync<GetAuctionsByIDs, List<AuctionModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAuctionStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAuctionStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAuctionStatus(
			CreateAuctionStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAuctionStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAuctionStatusByID(
			DeactivateAuctionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAuctionStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAuctionStatusByID(
			DeleteAuctionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAuctionStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetAuctionStatusByID(
			GetAuctionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetAuctionStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAuctionStatusByID(
			ReactivateAuctionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAuctionStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAuctionStatus(
			UpdateAuctionStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAuctionStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionStatusPagedResults>> GetAuctionStatuses(
			GetAuctionStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionStatusPagedResults>(
				await CEFService.RequestAsync<GetAuctionStatuses, AuctionStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAuctionTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAuctionTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAuctionType(
			CreateAuctionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAuctionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAuctionTypeByID(
			DeactivateAuctionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAuctionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAuctionTypeByID(
			DeleteAuctionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAuctionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAuctionTypeByID(
			GetAuctionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAuctionTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAuctionTypeByID(
			ReactivateAuctionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAuctionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAuctionType(
			UpdateAuctionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAuctionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionTypePagedResults>> GetAuctionTypes(
			GetAuctionTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionTypePagedResults>(
				await CEFService.RequestAsync<GetAuctionTypes, AuctionTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidModel>> BidOnGroupedLots(
			BidOnGroupedLots request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidModel>(
				await CEFService.RequestAsync<BidOnGroupedLots, BidModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBidCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBidCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBid(
			CreateBid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBid, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidModel>> CreateSignalRBid(
			CreateSignalRBid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidModel>(
				await CEFService.RequestAsync<CreateSignalRBid, BidModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBidByID(
			DeactivateBidByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBidByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBidByID(
			DeleteBidByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBidByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidModel>> GetSignalRBid(
			GetSignalRBid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidModel>(
				await CEFService.RequestAsync<GetSignalRBid, BidModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<Nullable<decimal>>> GetSignalRHighestCurrentBid(
			GetSignalRHighestCurrentBid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<Nullable<decimal>>(
				await CEFService.RequestAsync<GetSignalRHighestCurrentBid, Nullable<decimal>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidModel>> GetSortedProductIDsByHighestBidCount(
			GetSortedProductIDsByHighestBidCount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidModel>(
				await CEFService.RequestAsync<GetSortedProductIDsByHighestBidCount, BidModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidModel>> GetBidByID(
			GetBidByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidModel>(
				await CEFService.RequestAsync<GetBidByID, BidModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> LargeBidNotifications(
			LargeBidNotifications request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<LargeBidNotifications, bool>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ProcessPaymentLotWon(
			ProcessPaymentLotWon request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ProcessPaymentLotWon, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBidByID(
			ReactivateBidByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBidByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidModel>> SignalRQuickBid(
			SignalRQuickBid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidModel>(
				await CEFService.RequestAsync<SignalRQuickBid, BidModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBid(
			UpdateBid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBid, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidPagedResults>> GetBids(
			GetBids request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidPagedResults>(
				await CEFService.RequestAsync<GetBids, BidPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidPagedResults>> AdminGetBidsForPortal(
			AdminGetBidsForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidPagedResults>(
				await CEFService.RequestAsync<AdminGetBidsForPortal, BidPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBidStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBidStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBidStatus(
			CreateBidStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBidStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBidStatusByID(
			DeactivateBidStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBidStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBidStatusByID(
			DeleteBidStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBidStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetBidStatusByID(
			GetBidStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetBidStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBidStatusByID(
			ReactivateBidStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBidStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBidStatus(
			UpdateBidStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBidStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BidStatusPagedResults>> GetBidStatuses(
			GetBidStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BidStatusPagedResults>(
				await CEFService.RequestAsync<GetBidStatuses, BidStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandAuctionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandAuctionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandAuction(
			CreateBrandAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandAuctionByID(
			DeactivateBrandAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandAuctionByID(
			DeleteBrandAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandAuctionModel>> GetBrandAuctionByID(
			GetBrandAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandAuctionModel>(
				await CEFService.RequestAsync<GetBrandAuctionByID, BrandAuctionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandAuctionByID(
			ReactivateBrandAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandAuction(
			UpdateBrandAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertBrandAuction(
			UpsertBrandAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertBrandAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandAuctionPagedResults>> GetBrandAuctions(
			GetBrandAuctions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandAuctionPagedResults>(
				await CEFService.RequestAsync<GetBrandAuctions, BrandAuctionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseAuctionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseAuctionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseAuction(
			CreateFranchiseAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseAuctionByID(
			DeactivateFranchiseAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseAuctionByID(
			DeleteFranchiseAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseAuctionModel>> GetFranchiseAuctionByID(
			GetFranchiseAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseAuctionModel>(
				await CEFService.RequestAsync<GetFranchiseAuctionByID, FranchiseAuctionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseAuctionByID(
			ReactivateFranchiseAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseAuction(
			UpdateFranchiseAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertFranchiseAuction(
			UpsertFranchiseAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertFranchiseAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseAuctionPagedResults>> GetFranchiseAuctions(
			GetFranchiseAuctions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseAuctionPagedResults>(
				await CEFService.RequestAsync<GetFranchiseAuctions, FranchiseAuctionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLotCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLotCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLot(
			CreateLot request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLot, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLotByID(
			DeactivateLotByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLotByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLotByID(
			DeleteLotByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLotByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckLotExistsByID(
			CheckLotExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckLotExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckLotExistsByKey(
			CheckLotExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckLotExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckLotExistsByName(
			CheckLotExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckLotExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotModel>> GetLotByID(
			GetLotByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotModel>(
				await CEFService.RequestAsync<GetLotByID, LotModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLotByID(
			ReactivateLotByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLotByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLot(
			UpdateLot request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLot, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotCategoryPagedResults>> GetLotCategories(
			GetLotCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotCategoryPagedResults>(
				await CEFService.RequestAsync<GetLotCategories, LotCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLotCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLotCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLotCategory(
			CreateLotCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLotCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLotCategoryByID(
			DeactivateLotCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLotCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLotCategoryByID(
			DeleteLotCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLotCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotCategoryModel>> GetLotCategoryByID(
			GetLotCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotCategoryModel>(
				await CEFService.RequestAsync<GetLotCategoryByID, LotCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLotCategoryByID(
			ReactivateLotCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLotCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLotCategory(
			UpdateLotCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLotCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLotGroupCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLotGroupCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLotGroup(
			CreateLotGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLotGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLotGroupByID(
			DeactivateLotGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLotGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLotGroupByID(
			DeleteLotGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLotGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotGroupModel>> GetLotGroupByID(
			GetLotGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotGroupModel>(
				await CEFService.RequestAsync<GetLotGroupByID, LotGroupModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLotGroupByID(
			ReactivateLotGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLotGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLotGroup(
			UpdateLotGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLotGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertLotGroup(
			UpsertLotGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertLotGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotGroupPagedResults>> GetLotGroups(
			GetLotGroups request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotGroupPagedResults>(
				await CEFService.RequestAsync<GetLotGroups, LotGroupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotPagedResults>> GetLots(
			GetLots request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotPagedResults>(
				await CEFService.RequestAsync<GetLots, LotPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotPagedResults>> AdminGetLotsForPortal(
			AdminGetLotsForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotPagedResults>(
				await CEFService.RequestAsync<AdminGetLotsForPortal, LotPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<LotModel>>> GetLotsByIDs(
			GetLotsByIDs request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<LotModel>>(
				await CEFService.RequestAsync<GetLotsByIDs, List<LotModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<bool>>> ValidateVinNumber(
			ValidateVinNumber request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<bool>>(
				await CEFService.RequestAsync<ValidateVinNumber, CEFActionResponse<bool>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLotStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLotStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLotStatus(
			CreateLotStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLotStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLotStatusByID(
			DeactivateLotStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLotStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLotStatusByID(
			DeleteLotStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLotStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetLotStatusByID(
			GetLotStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetLotStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLotStatusByID(
			ReactivateLotStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLotStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLotStatus(
			UpdateLotStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLotStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotStatusPagedResults>> GetLotStatuses(
			GetLotStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotStatusPagedResults>(
				await CEFService.RequestAsync<GetLotStatuses, LotStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLotTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLotTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLotType(
			CreateLotType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLotType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLotTypeByID(
			DeactivateLotTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLotTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLotTypeByID(
			DeleteLotTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLotTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetLotTypeByID(
			GetLotTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetLotTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLotTypeByID(
			ReactivateLotTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLotTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLotType(
			UpdateLotType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLotType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotTypePagedResults>> GetLotTypes(
			GetLotTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotTypePagedResults>(
				await CEFService.RequestAsync<GetLotTypes, LotTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreAuctionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreAuctionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreAuction(
			CreateStoreAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreAuctionByID(
			DeactivateStoreAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreAuctionByID(
			DeleteStoreAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreAuctionModel>> GetStoreAuctionByID(
			GetStoreAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreAuctionModel>(
				await CEFService.RequestAsync<GetStoreAuctionByID, StoreAuctionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreAuctionByID(
			ReactivateStoreAuctionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreAuctionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreAuction(
			UpdateStoreAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertStoreAuction(
			UpsertStoreAuction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertStoreAuction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreAuctionPagedResults>> GetStoreAuctions(
			GetStoreAuctions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreAuctionPagedResults>(
				await CEFService.RequestAsync<GetStoreAuctions, StoreAuctionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AssignRoleToAccount(
			AssignRoleToAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AssignRoleToAccount, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RemoveRoleFromAccount(
			RemoveRoleFromAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RemoveRoleFromAccount, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UpdateRoleForAccount(
			UpdateRoleForAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UpdateRoleForAccount, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ApproveUser(
			ApproveUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ApproveUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ApproveUserRegistration(
			ApproveUserRegistration request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ApproveUserRegistration, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ChangePassword(
			ChangePassword request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ChangePassword, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<MFARequirementsModel>>> CheckForMFAForUsername(
			CheckForMFAForUsername request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<MFARequirementsModel>>(
				await CEFService.RequestAsync<CheckForMFAForUsername, CEFActionResponse<MFARequirementsModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CompleteRegistration(
			CompleteRegistration request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CompleteRegistration, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CreateLiteAccountAndSendValidationEmail(
			CreateLiteAccountAndSendValidationEmail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CreateLiteAccountAndSendValidationEmail, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallback> CurrentUserHasAnyPermission(
			CurrentUserHasAnyPermission request = null)
		{
			request ??= new();
			await CEFService.RequestAsync(request).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallback> CurrentUserHasAnyRole(
			CurrentUserHasAnyRole request = null)
		{
			request ??= new();
			await CEFService.RequestAsync(request).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallback> CurrentUserHasPermission(
			CurrentUserHasPermission request = null)
		{
			request ??= new();
			await CEFService.RequestAsync(request).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallback> CurrentUserHasRole(
			CurrentUserHasRole request = null)
		{
			request ??= new();
			await CEFService.RequestAsync(request).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DontRequirePasswordResetOnNextLoginForUser(
			DontRequirePasswordResetOnNextLoginForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DontRequirePasswordResetOnNextLoginForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DoRequirePasswordResetOnNextLoginForUser(
			DoRequirePasswordResetOnNextLoginForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DoRequirePasswordResetOnNextLoginForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ForcedPasswordReset(
			ForcedPasswordReset request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ForcedPasswordReset, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ForgotPassword(
			ForgotPassword request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ForgotPassword, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> ForgotPasswordReturn(
			ForgotPasswordReturn request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<ForgotPasswordReturn, CEFActionResponse<string>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ForgotUsername(
			ForgotUsername request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ForgotUsername, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> LockUser(
			LockUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<LockUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallback> OktaCodeCallback(
			OktaCodeCallback request = null)
		{
			request ??= new();
			await CEFService.RequestAsync(request).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallback> OpenIDConnectCodeCallback(
			OpenIDConnectCodeCallback request = null)
		{
			request ??= new();
			await CEFService.RequestAsync(request).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<PermissionModel>>> GetPermissions()
		{
			return new HttpPromiseCallbackArg<List<PermissionModel>>(
				await CEFService.RequestAsync<GetPermissions, List<PermissionModel>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RegisterNewUser(
			RegisterNewUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RegisterNewUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RequestMFAForUsername(
			RequestMFAForUsername request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RequestMFAForUsername, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RoleUserModel>> GetRole(
			GetRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RoleUserModel>(
				await CEFService.RequestAsync<GetRole, RoleUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RoleUserModel>> CreateRole(
			CreateRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RoleUserModel>(
				await CEFService.RequestAsync<CreateRole, RoleUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRole(
			DeleteRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRole, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RoleUserModel>> UpdateRole(
			UpdateRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RoleUserModel>(
				await CEFService.RequestAsync<UpdateRole, RoleUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<Dictionary<string, int>>> GetRoles(
			GetRoles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<Dictionary<string, int>>(
				await CEFService.RequestAsync<GetRoles, Dictionary<string, int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RoleForAccountModel[]>> GetRolesForAccount(
			GetRolesForAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RoleForAccountModel[]>(
				await CEFService.RequestAsync<GetRolesForAccount, RoleForAccountModel[]>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RoleForUserModel[]>> GetRolesForUser(
			GetRolesForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RoleForUserModel[]>(
				await CEFService.RequestAsync<GetRolesForUser, RoleForUserModel[]>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RoleUserModel[]>> GetRolesAsListing(
			GetRolesAsListing request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RoleUserModel[]>(
				await CEFService.RequestAsync<GetRolesAsListing, RoleUserModel[]>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UnApproveUser(
			UnApproveUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UnApproveUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UnlockUser(
			UnlockUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UnlockUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AssignRoleToUser(
			AssignRoleToUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AssignRoleToUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RemoveRoleFromUser(
			RemoveRoleFromUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RemoveRoleFromUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UpdateRoleForUser(
			UpdateRoleForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UpdateRoleForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ValidateCustomKeyIsUnique(
			ValidateCustomKeyIsUnique request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ValidateCustomKeyIsUnique, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ValidateEmail(
			ValidateEmail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ValidateEmail, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ValidateEmailIsUnique(
			ValidateEmailIsUnique request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ValidateEmailIsUnique, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ValidateInvitation(
			ValidateInvitation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ValidateInvitation, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ValidatePassword(
			ValidatePassword request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ValidatePassword, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ValidatePasswordIsGood(
			ValidatePasswordIsGood request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ValidatePasswordIsGood, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ValidateUserNameIsGood(
			ValidateUserNameIsGood request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ValidateUserNameIsGood, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBadgeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBadgeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBadge(
			CreateBadge request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBadge, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBadgeByID(
			DeactivateBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBadgeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBadgeByID(
			DeleteBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBadgeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BadgeModel>> GetBadgeByID(
			GetBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BadgeModel>(
				await CEFService.RequestAsync<GetBadgeByID, BadgeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBadgeByID(
			ReactivateBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBadgeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBadge(
			UpdateBadge request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBadge, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBadgeImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBadgeImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBadgeImage(
			CreateBadgeImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBadgeImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBadgeImageByID(
			DeactivateBadgeImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBadgeImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBadgeImageByID(
			DeleteBadgeImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBadgeImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BadgeImageModel>> GetBadgeImageByID(
			GetBadgeImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BadgeImageModel>(
				await CEFService.RequestAsync<GetBadgeImageByID, BadgeImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBadgeImageByID(
			ReactivateBadgeImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBadgeImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBadgeImage(
			UpdateBadgeImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBadgeImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BadgeImagePagedResults>> GetBadgeImages(
			GetBadgeImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BadgeImagePagedResults>(
				await CEFService.RequestAsync<GetBadgeImages, BadgeImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBadgeImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBadgeImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBadgeImageType(
			CreateBadgeImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBadgeImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBadgeImageTypeByID(
			DeactivateBadgeImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBadgeImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBadgeImageTypeByID(
			DeleteBadgeImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBadgeImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetBadgeImageTypeByID(
			GetBadgeImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetBadgeImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBadgeImageTypeByID(
			ReactivateBadgeImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBadgeImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBadgeImageType(
			UpdateBadgeImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBadgeImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BadgeImageTypePagedResults>> GetBadgeImageTypes(
			GetBadgeImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BadgeImageTypePagedResults>(
				await CEFService.RequestAsync<GetBadgeImageTypes, BadgeImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BadgePagedResults>> GetBadges(
			GetBadges request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BadgePagedResults>(
				await CEFService.RequestAsync<GetBadges, BadgePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBadgeTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBadgeTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBadgeType(
			CreateBadgeType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBadgeType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBadgeTypeByID(
			DeactivateBadgeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBadgeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBadgeTypeByID(
			DeleteBadgeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBadgeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetBadgeTypeByID(
			GetBadgeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetBadgeTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBadgeTypeByID(
			ReactivateBadgeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBadgeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBadgeType(
			UpdateBadgeType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBadgeType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BadgeTypePagedResults>> GetBadgeTypes(
			GetBadgeTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BadgeTypePagedResults>(
				await CEFService.RequestAsync<GetBadgeTypes, BadgeTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminUpdateStatusForBrandOrders(
			AdminUpdateStatusForBrandOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminUpdateStatusForBrandOrders, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrand(
			CreateBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<BrandModel>>> GetCurrentBrand()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<BrandModel>>(
				await CEFService.RequestAsync<GetCurrentBrand, CEFActionResponse<BrandModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<BrandModel>>> GetCurrentBrandAdministration()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<BrandModel>>(
				await CEFService.RequestAsync<GetCurrentBrandAdministration, CEFActionResponse<BrandModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandByID(
			DeactivateBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandByID(
			DeleteBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandModel>> GetBrandByID(
			GetBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandModel>(
				await CEFService.RequestAsync<GetBrandByID, BrandModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandByID(
			ReactivateBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrand(
			UpdateBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandAccount(
			CreateBrandAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandAccountByID(
			DeactivateBrandAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandAccountByID(
			DeleteBrandAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandAccountModel>> GetBrandAccountByID(
			GetBrandAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandAccountModel>(
				await CEFService.RequestAsync<GetBrandAccountByID, BrandAccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandAccountByID(
			ReactivateBrandAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandAccount(
			UpdateBrandAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandAccountPagedResults>> GetBrandAccounts(
			GetBrandAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandAccountPagedResults>(
				await CEFService.RequestAsync<GetBrandAccounts, BrandAccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandCategoryPagedResults>> GetBrandCategories(
			GetBrandCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandCategoryPagedResults>(
				await CEFService.RequestAsync<GetBrandCategories, BrandCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandCategory(
			CreateBrandCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandCategoryByID(
			DeactivateBrandCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandCategoryByID(
			DeleteBrandCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandCategoryModel>> GetBrandCategoryByID(
			GetBrandCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandCategoryModel>(
				await CEFService.RequestAsync<GetBrandCategoryByID, BrandCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandCategoryByID(
			ReactivateBrandCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandCategory(
			UpdateBrandCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandCurrencyPagedResults>> GetBrandCurrencies(
			GetBrandCurrencies request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandCurrencyPagedResults>(
				await CEFService.RequestAsync<GetBrandCurrencies, BrandCurrencyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandCurrencyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandCurrencyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandCurrency(
			CreateBrandCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandCurrencyByID(
			DeactivateBrandCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandCurrencyByID(
			DeleteBrandCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandCurrencyModel>> GetBrandCurrencyByID(
			GetBrandCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandCurrencyModel>(
				await CEFService.RequestAsync<GetBrandCurrencyByID, BrandCurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandCurrencyByID(
			ReactivateBrandCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandCurrency(
			UpdateBrandCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandFranchiseCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandFranchiseCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandFranchise(
			CreateBrandFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandFranchiseByID(
			DeactivateBrandFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandFranchiseByID(
			DeleteBrandFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandFranchiseModel>> GetBrandFranchiseByID(
			GetBrandFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandFranchiseModel>(
				await CEFService.RequestAsync<GetBrandFranchiseByID, BrandFranchiseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandFranchiseByID(
			ReactivateBrandFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandFranchise(
			UpdateBrandFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandFranchisePagedResults>> GetBrandFranchises(
			GetBrandFranchises request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandFranchisePagedResults>(
				await CEFService.RequestAsync<GetBrandFranchises, BrandFranchisePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandImage(
			CreateBrandImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandImageByID(
			DeactivateBrandImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandImageByID(
			DeleteBrandImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandImageModel>> GetBrandImageByID(
			GetBrandImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandImageModel>(
				await CEFService.RequestAsync<GetBrandImageByID, BrandImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandImageByID(
			ReactivateBrandImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandImage(
			UpdateBrandImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandImagePagedResults>> GetBrandImages(
			GetBrandImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandImagePagedResults>(
				await CEFService.RequestAsync<GetBrandImages, BrandImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandImageType(
			CreateBrandImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandImageTypeByID(
			DeactivateBrandImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandImageTypeByID(
			DeleteBrandImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetBrandImageTypeByID(
			GetBrandImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetBrandImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandImageTypeByID(
			ReactivateBrandImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandImageType(
			UpdateBrandImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandImageTypePagedResults>> GetBrandImageTypes(
			GetBrandImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandImageTypePagedResults>(
				await CEFService.RequestAsync<GetBrandImageTypes, BrandImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandInventoryLocationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandInventoryLocationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandInventoryLocation(
			CreateBrandInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandInventoryLocationByID(
			DeactivateBrandInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandInventoryLocationByID(
			DeleteBrandInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandInventoryLocationModel>> GetBrandInventoryLocationByID(
			GetBrandInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandInventoryLocationModel>(
				await CEFService.RequestAsync<GetBrandInventoryLocationByID, BrandInventoryLocationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandInventoryLocationByID(
			ReactivateBrandInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandInventoryLocation(
			UpdateBrandInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandInventoryLocationPagedResults>> GetBrandInventoryLocations(
			GetBrandInventoryLocations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandInventoryLocationPagedResults>(
				await CEFService.RequestAsync<GetBrandInventoryLocations, BrandInventoryLocationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandInventoryLocationTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandInventoryLocationTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandInventoryLocationType(
			CreateBrandInventoryLocationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandInventoryLocationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandInventoryLocationTypeByID(
			DeactivateBrandInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandInventoryLocationTypeByID(
			DeleteBrandInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetBrandInventoryLocationTypeByID(
			GetBrandInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetBrandInventoryLocationTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandInventoryLocationTypeByID(
			ReactivateBrandInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandInventoryLocationType(
			UpdateBrandInventoryLocationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandInventoryLocationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandInventoryLocationTypePagedResults>> GetBrandInventoryLocationTypes(
			GetBrandInventoryLocationTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandInventoryLocationTypePagedResults>(
				await CEFService.RequestAsync<GetBrandInventoryLocationTypes, BrandInventoryLocationTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandLanguageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandLanguageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandLanguage(
			CreateBrandLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandLanguageByID(
			DeactivateBrandLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandLanguageByID(
			DeleteBrandLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandLanguageModel>> GetBrandLanguageByID(
			GetBrandLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandLanguageModel>(
				await CEFService.RequestAsync<GetBrandLanguageByID, BrandLanguageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandLanguageByID(
			ReactivateBrandLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandLanguage(
			UpdateBrandLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandLanguagePagedResults>> GetBrandLanguages(
			GetBrandLanguages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandLanguagePagedResults>(
				await CEFService.RequestAsync<GetBrandLanguages, BrandLanguagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandManufacturer(
			CreateBrandManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandManufacturerByID(
			DeactivateBrandManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandManufacturerByID(
			DeleteBrandManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandManufacturerModel>> GetBrandManufacturerByID(
			GetBrandManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandManufacturerModel>(
				await CEFService.RequestAsync<GetBrandManufacturerByID, BrandManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandManufacturerByID(
			ReactivateBrandManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandManufacturer(
			UpdateBrandManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandManufacturerPagedResults>> GetBrandManufacturers(
			GetBrandManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandManufacturerPagedResults>(
				await CEFService.RequestAsync<GetBrandManufacturers, BrandManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandProduct(
			CreateBrandProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandProductByID(
			DeactivateBrandProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandProductByID(
			DeleteBrandProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandProductModel>> GetBrandProductByID(
			GetBrandProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandProductModel>(
				await CEFService.RequestAsync<GetBrandProductByID, BrandProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandProductByID(
			ReactivateBrandProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandProduct(
			UpdateBrandProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertBrandProduct(
			UpsertBrandProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertBrandProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandProductPagedResults>> GetBrandProducts(
			GetBrandProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandProductPagedResults>(
				await CEFService.RequestAsync<GetBrandProducts, BrandProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandPagedResults>> GetBrands(
			GetBrands request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandPagedResults>(
				await CEFService.RequestAsync<GetBrands, BrandPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandSiteDomainCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandSiteDomainCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandSiteDomain(
			CreateBrandSiteDomain request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandSiteDomain, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandSiteDomainByID(
			DeactivateBrandSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandSiteDomainByID(
			DeleteBrandSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandSiteDomainModel>> GetBrandSiteDomainByID(
			GetBrandSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandSiteDomainModel>(
				await CEFService.RequestAsync<GetBrandSiteDomainByID, BrandSiteDomainModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandSiteDomainByID(
			ReactivateBrandSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandSiteDomain(
			UpdateBrandSiteDomain request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandSiteDomain, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandSiteDomainPagedResults>> GetBrandSiteDomains(
			GetBrandSiteDomains request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandSiteDomainPagedResults>(
				await CEFService.RequestAsync<GetBrandSiteDomains, BrandSiteDomainPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandStoreCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandStoreCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandStore(
			CreateBrandStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandStoreByID(
			DeactivateBrandStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandStoreByID(
			DeleteBrandStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandStoreModel>> GetBrandStoreByID(
			GetBrandStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandStoreModel>(
				await CEFService.RequestAsync<GetBrandStoreByID, BrandStoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandStoreByID(
			ReactivateBrandStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandStore(
			UpdateBrandStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandStorePagedResults>> GetBrandStores(
			GetBrandStores request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandStorePagedResults>(
				await CEFService.RequestAsync<GetBrandStores, BrandStorePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandUser(
			CreateBrandUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandUserByID(
			DeactivateBrandUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandUserByID(
			DeleteBrandUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandUserModel>> GetBrandUserByID(
			GetBrandUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandUserModel>(
				await CEFService.RequestAsync<GetBrandUserByID, BrandUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandUserByID(
			ReactivateBrandUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandUser(
			UpdateBrandUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandUserPagedResults>> GetBrandUsers(
			GetBrandUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandUserPagedResults>(
				await CEFService.RequestAsync<GetBrandUsers, BrandUserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearBrandVendorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearBrandVendorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateBrandVendor(
			CreateBrandVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateBrandVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateBrandVendorByID(
			DeactivateBrandVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateBrandVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteBrandVendorByID(
			DeleteBrandVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteBrandVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandVendorModel>> GetBrandVendorByID(
			GetBrandVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandVendorModel>(
				await CEFService.RequestAsync<GetBrandVendorByID, BrandVendorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateBrandVendorByID(
			ReactivateBrandVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateBrandVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateBrandVendor(
			UpdateBrandVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateBrandVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BrandVendorPagedResults>> GetBrandVendors(
			GetBrandVendors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BrandVendorPagedResults>(
				await CEFService.RequestAsync<GetBrandVendors, BrandVendorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEvent(
			CreateCalendarEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventByID(
			DeactivateCalendarEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventByID(
			DeleteCalendarEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventModel>> GetCalendarEventByID(
			GetCalendarEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventModel>(
				await CEFService.RequestAsync<GetCalendarEventByID, CalendarEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventByID(
			ReactivateCalendarEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEvent(
			UpdateCalendarEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventDetailCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventDetailCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEventDetail(
			CreateCalendarEventDetail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEventDetail, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventDetailByID(
			DeactivateCalendarEventDetailByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventDetailByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventDetailByID(
			DeleteCalendarEventDetailByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventDetailByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventDetailModel>> GetCalendarEventDetailByID(
			GetCalendarEventDetailByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventDetailModel>(
				await CEFService.RequestAsync<GetCalendarEventDetailByID, CalendarEventDetailModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventDetailByID(
			ReactivateCalendarEventDetailByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventDetailByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEventDetail(
			UpdateCalendarEventDetail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEventDetail, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventDetailPagedResults>> GetCalendarEventDetails(
			GetCalendarEventDetails request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventDetailPagedResults>(
				await CEFService.RequestAsync<GetCalendarEventDetails, CalendarEventDetailPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEventFile(
			CreateCalendarEventFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEventFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventFileByID(
			DeactivateCalendarEventFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventFileByID(
			DeleteCalendarEventFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventFileModel>> GetCalendarEventFileByID(
			GetCalendarEventFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventFileModel>(
				await CEFService.RequestAsync<GetCalendarEventFileByID, CalendarEventFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventFileByID(
			ReactivateCalendarEventFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEventFile(
			UpdateCalendarEventFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEventFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventFilePagedResults>> GetCalendarEventFiles(
			GetCalendarEventFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventFilePagedResults>(
				await CEFService.RequestAsync<GetCalendarEventFiles, CalendarEventFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEventImage(
			CreateCalendarEventImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEventImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventImageByID(
			DeactivateCalendarEventImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventImageByID(
			DeleteCalendarEventImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventImageModel>> GetCalendarEventImageByID(
			GetCalendarEventImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventImageModel>(
				await CEFService.RequestAsync<GetCalendarEventImageByID, CalendarEventImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventImageByID(
			ReactivateCalendarEventImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEventImage(
			UpdateCalendarEventImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEventImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventImagePagedResults>> GetCalendarEventImages(
			GetCalendarEventImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventImagePagedResults>(
				await CEFService.RequestAsync<GetCalendarEventImages, CalendarEventImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEventImageType(
			CreateCalendarEventImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEventImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventImageTypeByID(
			DeactivateCalendarEventImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventImageTypeByID(
			DeleteCalendarEventImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCalendarEventImageTypeByID(
			GetCalendarEventImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCalendarEventImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventImageTypeByID(
			ReactivateCalendarEventImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEventImageType(
			UpdateCalendarEventImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEventImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventImageTypePagedResults>> GetCalendarEventImageTypes(
			GetCalendarEventImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventImageTypePagedResults>(
				await CEFService.RequestAsync<GetCalendarEventImageTypes, CalendarEventImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEventProduct(
			CreateCalendarEventProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEventProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventProductByID(
			DeactivateCalendarEventProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventProductByID(
			DeleteCalendarEventProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventProductModel>> GetCalendarEventProductByID(
			GetCalendarEventProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventProductModel>(
				await CEFService.RequestAsync<GetCalendarEventProductByID, CalendarEventProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventProductByID(
			ReactivateCalendarEventProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEventProduct(
			UpdateCalendarEventProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEventProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventProductPagedResults>> GetCalendarEventProducts(
			GetCalendarEventProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventProductPagedResults>(
				await CEFService.RequestAsync<GetCalendarEventProducts, CalendarEventProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventPagedResults>> GetCalendarEvents(
			GetCalendarEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventPagedResults>(
				await CEFService.RequestAsync<GetCalendarEvents, CalendarEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEventStatus(
			CreateCalendarEventStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEventStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventStatusByID(
			DeactivateCalendarEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventStatusByID(
			DeleteCalendarEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetCalendarEventStatusByID(
			GetCalendarEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetCalendarEventStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventStatusByID(
			ReactivateCalendarEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEventStatus(
			UpdateCalendarEventStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEventStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventStatusPagedResults>> GetCalendarEventStatuses(
			GetCalendarEventStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventStatusPagedResults>(
				await CEFService.RequestAsync<GetCalendarEventStatuses, CalendarEventStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarEventType(
			CreateCalendarEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarEventTypeByID(
			DeactivateCalendarEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarEventTypeByID(
			DeleteCalendarEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCalendarEventTypeByID(
			GetCalendarEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCalendarEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarEventTypeByID(
			ReactivateCalendarEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarEventType(
			UpdateCalendarEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarEventTypePagedResults>> GetCalendarEventTypes(
			GetCalendarEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarEventTypePagedResults>(
				await CEFService.RequestAsync<GetCalendarEventTypes, CalendarEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserEventAttendanceCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserEventAttendanceCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserEventAttendance(
			CreateUserEventAttendance request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserEventAttendance, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserEventAttendanceByID(
			DeactivateUserEventAttendanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserEventAttendanceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserEventAttendanceByID(
			DeleteUserEventAttendanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserEventAttendanceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserEventAttendanceModel>> GetUserEventAttendanceByID(
			GetUserEventAttendanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserEventAttendanceModel>(
				await CEFService.RequestAsync<GetUserEventAttendanceByID, UserEventAttendanceModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserEventAttendanceByID(
			ReactivateUserEventAttendanceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserEventAttendanceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserEventAttendance(
			UpdateUserEventAttendance request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserEventAttendance, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserEventAttendancePagedResults>> GetUserEventAttendances(
			GetUserEventAttendances request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserEventAttendancePagedResults>(
				await CEFService.RequestAsync<GetUserEventAttendances, UserEventAttendancePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserEventAttendanceTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserEventAttendanceTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserEventAttendanceType(
			CreateUserEventAttendanceType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserEventAttendanceType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserEventAttendanceTypeByID(
			DeactivateUserEventAttendanceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserEventAttendanceTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserEventAttendanceTypeByID(
			DeleteUserEventAttendanceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserEventAttendanceTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetUserEventAttendanceTypeByID(
			GetUserEventAttendanceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetUserEventAttendanceTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserEventAttendanceTypeByID(
			ReactivateUserEventAttendanceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserEventAttendanceTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserEventAttendanceType(
			UpdateUserEventAttendanceType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserEventAttendanceType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserEventAttendanceTypePagedResults>> GetUserEventAttendanceTypes(
			GetUserEventAttendanceTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserEventAttendanceTypePagedResults>(
				await CEFService.RequestAsync<GetUserEventAttendanceTypes, UserEventAttendanceTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryPagedResults>> GetCategories(
			GetCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryPagedResults>(
				await CEFService.RequestAsync<GetCategories, CategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCategory(
			CreateCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCategoryByID(
			DeactivateCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCategoryByID(
			DeleteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckCategoryExistsByID(
			CheckCategoryExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckCategoryExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckCategoryExistsByKey(
			CheckCategoryExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckCategoryExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckCategoryExistsByName(
			CheckCategoryExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckCategoryExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckCategoryExistsBySeoUrl(
			CheckCategoryExistsBySeoUrl request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckCategoryExistsBySeoUrl, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryModel>> GetCategoryByID(
			GetCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryModel>(
				await CEFService.RequestAsync<GetCategoryByID, CategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryModel>> GetCategoryByKey(
			GetCategoryByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryModel>(
				await CEFService.RequestAsync<GetCategoryByKey, CategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallback> GetCategoryForMetaData(
			GetCategoryForMetaData request = null)
		{
			request ??= new();
			await CEFService.RequestAsync(request).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCategoryByID(
			ReactivateCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryModel>> GetCategoryBySeoUrl(
			GetCategoryBySeoUrl request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryModel>(
				await CEFService.RequestAsync<GetCategoryBySeoUrl, CategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCategory(
			UpdateCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCategoryFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCategoryFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCategoryFile(
			CreateCategoryFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCategoryFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCategoryFileByID(
			DeactivateCategoryFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCategoryFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCategoryFileByID(
			DeleteCategoryFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCategoryFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryFileModel>> GetCategoryFileByID(
			GetCategoryFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryFileModel>(
				await CEFService.RequestAsync<GetCategoryFileByID, CategoryFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCategoryFileByID(
			ReactivateCategoryFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCategoryFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCategoryFile(
			UpdateCategoryFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCategoryFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryFilePagedResults>> GetCategoryFiles(
			GetCategoryFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryFilePagedResults>(
				await CEFService.RequestAsync<GetCategoryFiles, CategoryFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCategoryImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCategoryImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCategoryImage(
			CreateCategoryImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCategoryImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCategoryImageByID(
			DeactivateCategoryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCategoryImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCategoryImageByID(
			DeleteCategoryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCategoryImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryImageModel>> GetCategoryImageByID(
			GetCategoryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryImageModel>(
				await CEFService.RequestAsync<GetCategoryImageByID, CategoryImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCategoryImageByID(
			ReactivateCategoryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCategoryImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCategoryImage(
			UpdateCategoryImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCategoryImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryImagePagedResults>> GetCategoryImages(
			GetCategoryImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryImagePagedResults>(
				await CEFService.RequestAsync<GetCategoryImages, CategoryImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCategoryImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCategoryImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCategoryImageType(
			CreateCategoryImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCategoryImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCategoryImageTypeByID(
			DeactivateCategoryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCategoryImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCategoryImageTypeByID(
			DeleteCategoryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCategoryImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCategoryImageTypeByID(
			GetCategoryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCategoryImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCategoryImageTypeByID(
			ReactivateCategoryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCategoryImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCategoryImageType(
			UpdateCategoryImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCategoryImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryImageTypePagedResults>> GetCategoryImageTypes(
			GetCategoryImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryImageTypePagedResults>(
				await CEFService.RequestAsync<GetCategoryImageTypes, CategoryImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCategoryTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCategoryTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCategoryType(
			CreateCategoryType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCategoryType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCategoryTypeByID(
			DeactivateCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCategoryTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCategoryTypeByID(
			DeleteCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCategoryTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCategoryTypeByID(
			GetCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCategoryTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCategoryTypeByID(
			ReactivateCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCategoryTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCategoryType(
			UpdateCategoryType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCategoryType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategoryTypePagedResults>> GetCategoryTypes(
			GetCategoryTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategoryTypePagedResults>(
				await CEFService.RequestAsync<GetCategoryTypes, CategoryTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<CategoryModel>>> GetCategoriesThreeLevels(
			GetCategoriesThreeLevels request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<CategoryModel>>(
				await CEFService.RequestAsync<GetCategoriesThreeLevels, List<CategoryModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<MenuCategoryModel>>> GetMenuCategoriesThreeLevels(
			GetMenuCategoriesThreeLevels request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<MenuCategoryModel>>(
				await CEFService.RequestAsync<GetMenuCategoriesThreeLevels, List<MenuCategoryModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<CategoryModel>>> GetPersonalizedCategoriesForCurrentUser()
		{
			return new HttpPromiseCallbackArg<List<CategoryModel>>(
				await CEFService.RequestAsync<GetPersonalizedCategoriesForCurrentUser, List<CategoryModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DownloadFileResult>> GetCategorySiteMapContent()
		{
			return new HttpPromiseCallbackArg<DownloadFileResult>(
				await CEFService.RequestAsync<GetCategorySiteMapContent, DownloadFileResult>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> RegenerateCategorySiteMap()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<RegenerateCategorySiteMap, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<ProductCategorySelectorModel>>> GetCategoryTree(
			GetCategoryTree request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<ProductCategorySelectorModel>>(
				await CEFService.RequestAsync<GetCategoryTree, List<ProductCategorySelectorModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DashboardDataForListerAdminResponse>> GetDashboardDataForListerAdmin(
			GetDashboardDataForListerAdmin request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DashboardDataForListerAdminResponse>(
				await CEFService.RequestAsync<GetDashboardDataForListerAdmin, DashboardDataForListerAdminResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateContact(
			CreateContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateContactByID(
			DeactivateContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteContactByID(
			DeleteContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContactModel>> GetContactByID(
			GetContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContactModel>(
				await CEFService.RequestAsync<GetContactByID, ContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateContactByID(
			ReactivateContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateContact(
			UpdateContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertContact(
			UpsertContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearContactImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearContactImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateContactImage(
			CreateContactImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateContactImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateContactImageByID(
			DeactivateContactImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateContactImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteContactImageByID(
			DeleteContactImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteContactImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContactImageModel>> GetContactImageByID(
			GetContactImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContactImageModel>(
				await CEFService.RequestAsync<GetContactImageByID, ContactImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateContactImageByID(
			ReactivateContactImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateContactImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateContactImage(
			UpdateContactImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateContactImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContactImagePagedResults>> GetContactImages(
			GetContactImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContactImagePagedResults>(
				await CEFService.RequestAsync<GetContactImages, ContactImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearContactImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearContactImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateContactImageType(
			CreateContactImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateContactImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateContactImageTypeByID(
			DeactivateContactImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateContactImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteContactImageTypeByID(
			DeleteContactImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteContactImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetContactImageTypeByID(
			GetContactImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetContactImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateContactImageTypeByID(
			ReactivateContactImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateContactImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateContactImageType(
			UpdateContactImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateContactImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContactImageTypePagedResults>> GetContactImageTypes(
			GetContactImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContactImageTypePagedResults>(
				await CEFService.RequestAsync<GetContactImageTypes, ContactImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContactPagedResults>> GetContacts(
			GetContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContactPagedResults>(
				await CEFService.RequestAsync<GetContacts, ContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearContactTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearContactTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateContactType(
			CreateContactType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateContactType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateContactTypeByID(
			DeactivateContactTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateContactTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteContactTypeByID(
			DeleteContactTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteContactTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetContactTypeByID(
			GetContactTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetContactTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateContactTypeByID(
			ReactivateContactTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateContactTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateContactType(
			UpdateContactType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateContactType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ContactTypePagedResults>> GetContactTypes(
			GetContactTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ContactTypePagedResults>(
				await CEFService.RequestAsync<GetContactTypes, ContactTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserModel>> GetCurrentUser()
		{
			return new HttpPromiseCallbackArg<UserModel>(
				await CEFService.RequestAsync<GetCurrentUser, UserModel>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetCurrentUserOnlineStatus()
		{
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetCurrentUserOnlineStatus, StatusModel>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetCurrentUserOnlineStatus(
			SetCurrentUserOnlineStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetCurrentUserOnlineStatus, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UpdateCurrentUser(
			UpdateCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UpdateCurrentUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<string, object>>>> GetCurrentUserName()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<string, object>>>(
				await CEFService.RequestAsync<GetCurrentUserName, CEFActionResponse<Dictionary<string, object>>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProfanityFilterCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProfanityFilterCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProfanityFilter(
			CreateProfanityFilter request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProfanityFilter, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProfanityFilterByID(
			DeactivateProfanityFilterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProfanityFilterByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProfanityFilterByID(
			DeleteProfanityFilterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProfanityFilterByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProfanityFilterModel>> GetProfanityFilterByID(
			GetProfanityFilterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProfanityFilterModel>(
				await CEFService.RequestAsync<GetProfanityFilterByID, ProfanityFilterModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProfanityFilterByID(
			ReactivateProfanityFilterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProfanityFilterByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProfanityFilter(
			UpdateProfanityFilter request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProfanityFilter, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProfanityFilterPagedResults>> GetProfanityFilters(
			GetProfanityFilters request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProfanityFilterPagedResults>(
				await CEFService.RequestAsync<GetProfanityFilters, ProfanityFilterPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearReferralCodeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearReferralCodeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateReferralCode(
			CreateReferralCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateReferralCode, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateReferralCodeByID(
			DeactivateReferralCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateReferralCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteReferralCodeByID(
			DeleteReferralCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteReferralCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReferralCodeModel>> GetReferralCodeByID(
			GetReferralCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReferralCodeModel>(
				await CEFService.RequestAsync<GetReferralCodeByID, ReferralCodeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateReferralCodeByID(
			ReactivateReferralCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateReferralCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateReferralCode(
			UpdateReferralCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateReferralCode, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReferralCodePagedResults>> GetReferralCodes(
			GetReferralCodes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReferralCodePagedResults>(
				await CEFService.RequestAsync<GetReferralCodes, ReferralCodePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearReferralCodeStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearReferralCodeStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateReferralCodeStatus(
			CreateReferralCodeStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateReferralCodeStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateReferralCodeStatusByID(
			DeactivateReferralCodeStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateReferralCodeStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteReferralCodeStatusByID(
			DeleteReferralCodeStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteReferralCodeStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetReferralCodeStatusByID(
			GetReferralCodeStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetReferralCodeStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateReferralCodeStatusByID(
			ReactivateReferralCodeStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateReferralCodeStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateReferralCodeStatus(
			UpdateReferralCodeStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateReferralCodeStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReferralCodeStatusPagedResults>> GetReferralCodeStatuses(
			GetReferralCodeStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReferralCodeStatusPagedResults>(
				await CEFService.RequestAsync<GetReferralCodeStatuses, ReferralCodeStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearReferralCodeTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearReferralCodeTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateReferralCodeType(
			CreateReferralCodeType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateReferralCodeType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateReferralCodeTypeByID(
			DeactivateReferralCodeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateReferralCodeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteReferralCodeTypeByID(
			DeleteReferralCodeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteReferralCodeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetReferralCodeTypeByID(
			GetReferralCodeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetReferralCodeTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateReferralCodeTypeByID(
			ReactivateReferralCodeTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateReferralCodeTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateReferralCodeType(
			UpdateReferralCodeType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateReferralCodeType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReferralCodeTypePagedResults>> GetReferralCodeTypes(
			GetReferralCodeTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReferralCodeTypePagedResults>(
				await CEFService.RequestAsync<GetReferralCodeTypes, ReferralCodeTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUser(
			CreateUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserModel>> CreateUserWithCode(
			CreateUserWithCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserModel>(
				await CEFService.RequestAsync<CreateUserWithCode, UserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserByID(
			DeactivateUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserByID(
			DeleteUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckUserExistsByKey(
			CheckUserExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckUserExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserModel>> GetUserByID(
			GetUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserModel>(
				await CEFService.RequestAsync<GetUserByID, UserModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserModel>> GetUserByKey(
			GetUserByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserModel>(
				await CEFService.RequestAsync<GetUserByKey, UserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserByID(
			ReactivateUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUser(
			UpdateUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserFile(
			CreateUserFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserFileByID(
			DeactivateUserFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserFileByID(
			DeleteUserFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserFileModel>> GetUserFileByID(
			GetUserFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserFileModel>(
				await CEFService.RequestAsync<GetUserFileByID, UserFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserFileByID(
			ReactivateUserFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserFile(
			UpdateUserFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserFilePagedResults>> GetUserFiles(
			GetUserFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserFilePagedResults>(
				await CEFService.RequestAsync<GetUserFiles, UserFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserImage(
			CreateUserImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserImageByID(
			DeactivateUserImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserImageByID(
			DeleteUserImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserImageModel>> GetUserImageByID(
			GetUserImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserImageModel>(
				await CEFService.RequestAsync<GetUserImageByID, UserImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserImageByID(
			ReactivateUserImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserImage(
			UpdateUserImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserImagePagedResults>> GetUserImages(
			GetUserImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserImagePagedResults>(
				await CEFService.RequestAsync<GetUserImages, UserImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserImageType(
			CreateUserImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserImageTypeByID(
			DeactivateUserImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserImageTypeByID(
			DeleteUserImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetUserImageTypeByID(
			GetUserImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetUserImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserImageTypeByID(
			ReactivateUserImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserImageType(
			UpdateUserImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserImageTypePagedResults>> GetUserImageTypes(
			GetUserImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserImageTypePagedResults>(
				await CEFService.RequestAsync<GetUserImageTypes, UserImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserOnlineStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserOnlineStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserOnlineStatus(
			CreateUserOnlineStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserOnlineStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserOnlineStatusByID(
			DeactivateUserOnlineStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserOnlineStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserOnlineStatusByID(
			DeleteUserOnlineStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserOnlineStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetUserOnlineStatusByID(
			GetUserOnlineStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetUserOnlineStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserOnlineStatusByID(
			ReactivateUserOnlineStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserOnlineStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserOnlineStatus(
			UpdateUserOnlineStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserOnlineStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserOnlineStatusPagedResults>> GetUserOnlineStatuses(
			GetUserOnlineStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserOnlineStatusPagedResults>(
				await CEFService.RequestAsync<GetUserOnlineStatuses, UserOnlineStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserProductTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserProductTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserProductType(
			CreateUserProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserProductTypeByID(
			DeactivateUserProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserProductTypeByID(
			DeleteUserProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserProductTypeModel>> GetUserProductTypeByID(
			GetUserProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserProductTypeModel>(
				await CEFService.RequestAsync<GetUserProductTypeByID, UserProductTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserProductTypeByID(
			ReactivateUserProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserProductType(
			UpdateUserProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserProductTypePagedResults>> GetUserProductTypes(
			GetUserProductTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserProductTypePagedResults>(
				await CEFService.RequestAsync<GetUserProductTypes, UserProductTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserPagedResults>> GetUsers(
			GetUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserPagedResults>(
				await CEFService.RequestAsync<GetUsers, UserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<int>>>> ImportUsersFromExcelToCurrentAccount(
			ImportUsersFromExcelToCurrentAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<int>>>(
				await CEFService.RequestAsync<ImportUsersFromExcelToCurrentAccount, CEFActionResponse<List<int>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserStatus(
			CreateUserStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserStatusByID(
			DeactivateUserStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserStatusByID(
			DeleteUserStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckUserStatusExistsByDisplayName(
			CheckUserStatusExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckUserStatusExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckUserStatusExistsByKey(
			CheckUserStatusExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckUserStatusExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckUserStatusExistsByName(
			CheckUserStatusExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckUserStatusExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetUserStatusByID(
			GetUserStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetUserStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserStatusByID(
			ReactivateUserStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserStatus(
			UpdateUserStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserStatusPagedResults>> GetUserStatuses(
			GetUserStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserStatusPagedResults>(
				await CEFService.RequestAsync<GetUserStatuses, UserStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUserTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUserTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUserType(
			CreateUserType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUserType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserTypeByID(
			DeactivateUserTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUserTypeByID(
			DeleteUserTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUserTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckUserTypeExistsByDisplayName(
			CheckUserTypeExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckUserTypeExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckUserTypeExistsByKey(
			CheckUserTypeExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckUserTypeExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckUserTypeExistsByName(
			CheckUserTypeExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckUserTypeExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetUserTypeByID(
			GetUserTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetUserTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUserTypeByID(
			ReactivateUserTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUserTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUserType(
			UpdateUserType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUserType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UserTypePagedResults>> GetUserTypes(
			GetUserTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UserTypePagedResults>(
				await CEFService.RequestAsync<GetUserTypes, UserTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCounterCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCounterCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCounter(
			CreateCounter request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCounter, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCounterByID(
			DeactivateCounterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCounterByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCounterByID(
			DeleteCounterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCounterByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CounterModel>> GetCounterByID(
			GetCounterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CounterModel>(
				await CEFService.RequestAsync<GetCounterByID, CounterModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCounterByID(
			ReactivateCounterByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCounterByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCounter(
			UpdateCounter request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCounter, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCounterLogCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCounterLogCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCounterLog(
			CreateCounterLog request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCounterLog, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCounterLogByID(
			DeactivateCounterLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCounterLogByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCounterLogByID(
			DeleteCounterLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCounterLogByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CounterLogModel>> GetCounterLogByID(
			GetCounterLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CounterLogModel>(
				await CEFService.RequestAsync<GetCounterLogByID, CounterLogModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCounterLogByID(
			ReactivateCounterLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCounterLogByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCounterLog(
			UpdateCounterLog request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCounterLog, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CounterLogPagedResults>> GetCounterLogs(
			GetCounterLogs request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CounterLogPagedResults>(
				await CEFService.RequestAsync<GetCounterLogs, CounterLogPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCounterLogTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCounterLogTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCounterLogType(
			CreateCounterLogType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCounterLogType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCounterLogTypeByID(
			DeactivateCounterLogTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCounterLogTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCounterLogTypeByID(
			DeleteCounterLogTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCounterLogTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCounterLogTypeByID(
			GetCounterLogTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCounterLogTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCounterLogTypeByID(
			ReactivateCounterLogTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCounterLogTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCounterLogType(
			UpdateCounterLogType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCounterLogType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CounterLogTypePagedResults>> GetCounterLogTypes(
			GetCounterLogTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CounterLogTypePagedResults>(
				await CEFService.RequestAsync<GetCounterLogTypes, CounterLogTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CounterPagedResults>> GetCounters(
			GetCounters request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CounterPagedResults>(
				await CEFService.RequestAsync<GetCounters, CounterPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCounterTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCounterTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCounterType(
			CreateCounterType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCounterType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCounterTypeByID(
			DeactivateCounterTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCounterTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCounterTypeByID(
			DeleteCounterTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCounterTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCounterTypeByID(
			GetCounterTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCounterTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCounterTypeByID(
			ReactivateCounterTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCounterTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCounterType(
			UpdateCounterType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCounterType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CounterTypePagedResults>> GetCounterTypes(
			GetCounterTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CounterTypePagedResults>(
				await CEFService.RequestAsync<GetCounterTypes, CounterTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<decimal>> ConvertCurrencyValueAtoB(
			ConvertCurrencyValueAtoB request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<decimal>(
				await CEFService.RequestAsync<ConvertCurrencyValueAtoB, decimal>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyPagedResults>> GetCurrencies(
			GetCurrencies request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyPagedResults>(
				await CEFService.RequestAsync<GetCurrencies, CurrencyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCurrencyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCurrencyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCurrency(
			CreateCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCurrencyByID(
			DeactivateCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCurrencyByID(
			DeleteCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyModel>> GetCurrencyByID(
			GetCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyModel>(
				await CEFService.RequestAsync<GetCurrencyByID, CurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyModel>> GetCurrencyByKey(
			GetCurrencyByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyModel>(
				await CEFService.RequestAsync<GetCurrencyByKey, CurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCurrencyByID(
			ReactivateCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCurrency(
			UpdateCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCurrencyConversionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCurrencyConversionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCurrencyConversion(
			CreateCurrencyConversion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCurrencyConversion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCurrencyConversionByID(
			DeactivateCurrencyConversionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCurrencyConversionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCurrencyConversionByID(
			DeleteCurrencyConversionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCurrencyConversionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyConversionModel>> GetCurrencyConversionByID(
			GetCurrencyConversionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyConversionModel>(
				await CEFService.RequestAsync<GetCurrencyConversionByID, CurrencyConversionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCurrencyConversionByID(
			ReactivateCurrencyConversionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCurrencyConversionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCurrencyConversion(
			UpdateCurrencyConversion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCurrencyConversion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyConversionPagedResults>> GetCurrencyConversions(
			GetCurrencyConversions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyConversionPagedResults>(
				await CEFService.RequestAsync<GetCurrencyConversions, CurrencyConversionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCurrencyImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCurrencyImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCurrencyImage(
			CreateCurrencyImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCurrencyImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCurrencyImageByID(
			DeactivateCurrencyImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCurrencyImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCurrencyImageByID(
			DeleteCurrencyImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCurrencyImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyImageModel>> GetCurrencyImageByID(
			GetCurrencyImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyImageModel>(
				await CEFService.RequestAsync<GetCurrencyImageByID, CurrencyImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCurrencyImageByID(
			ReactivateCurrencyImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCurrencyImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCurrencyImage(
			UpdateCurrencyImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCurrencyImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyImagePagedResults>> GetCurrencyImages(
			GetCurrencyImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyImagePagedResults>(
				await CEFService.RequestAsync<GetCurrencyImages, CurrencyImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCurrencyImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCurrencyImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCurrencyImageType(
			CreateCurrencyImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCurrencyImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCurrencyImageTypeByID(
			DeactivateCurrencyImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCurrencyImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCurrencyImageTypeByID(
			DeleteCurrencyImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCurrencyImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCurrencyImageTypeByID(
			GetCurrencyImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCurrencyImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCurrencyImageTypeByID(
			ReactivateCurrencyImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCurrencyImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCurrencyImageType(
			UpdateCurrencyImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCurrencyImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CurrencyImageTypePagedResults>> GetCurrencyImageTypes(
			GetCurrencyImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CurrencyImageTypePagedResults>(
				await CEFService.RequestAsync<GetCurrencyImageTypes, CurrencyImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearHistoricalCurrencyRateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearHistoricalCurrencyRateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateHistoricalCurrencyRate(
			CreateHistoricalCurrencyRate request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateHistoricalCurrencyRate, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateHistoricalCurrencyRateByID(
			DeactivateHistoricalCurrencyRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateHistoricalCurrencyRateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteHistoricalCurrencyRateByID(
			DeleteHistoricalCurrencyRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteHistoricalCurrencyRateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<HistoricalCurrencyRateModel>> GetHistoricalCurrencyRateByID(
			GetHistoricalCurrencyRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<HistoricalCurrencyRateModel>(
				await CEFService.RequestAsync<GetHistoricalCurrencyRateByID, HistoricalCurrencyRateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateHistoricalCurrencyRateByID(
			ReactivateHistoricalCurrencyRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateHistoricalCurrencyRateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateHistoricalCurrencyRate(
			UpdateHistoricalCurrencyRate request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateHistoricalCurrencyRate, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<HistoricalCurrencyRatePagedResults>> GetHistoricalCurrencyRates(
			GetHistoricalCurrencyRates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<HistoricalCurrencyRatePagedResults>(
				await CEFService.RequestAsync<GetHistoricalCurrencyRates, HistoricalCurrencyRatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedCartDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedCartDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedCartDiscount(
			CreateAppliedCartDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedCartDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedCartDiscountByID(
			DeactivateAppliedCartDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedCartDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedCartDiscountByID(
			DeleteAppliedCartDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedCartDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedCartDiscountModel>> GetAppliedCartDiscountByID(
			GetAppliedCartDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedCartDiscountModel>(
				await CEFService.RequestAsync<GetAppliedCartDiscountByID, AppliedCartDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedCartDiscountByID(
			ReactivateAppliedCartDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedCartDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedCartDiscount(
			UpdateAppliedCartDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedCartDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedCartDiscountPagedResults>> GetAppliedCartDiscounts(
			GetAppliedCartDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedCartDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedCartDiscounts, AppliedCartDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedCartItemDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedCartItemDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedCartItemDiscount(
			CreateAppliedCartItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedCartItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedCartItemDiscountByID(
			DeactivateAppliedCartItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedCartItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedCartItemDiscountByID(
			DeleteAppliedCartItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedCartItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedCartItemDiscountModel>> GetAppliedCartItemDiscountByID(
			GetAppliedCartItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedCartItemDiscountModel>(
				await CEFService.RequestAsync<GetAppliedCartItemDiscountByID, AppliedCartItemDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedCartItemDiscountByID(
			ReactivateAppliedCartItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedCartItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedCartItemDiscount(
			UpdateAppliedCartItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedCartItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedCartItemDiscountPagedResults>> GetAppliedCartItemDiscounts(
			GetAppliedCartItemDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedCartItemDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedCartItemDiscounts, AppliedCartItemDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedPurchaseOrderDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedPurchaseOrderDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedPurchaseOrderDiscount(
			CreateAppliedPurchaseOrderDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedPurchaseOrderDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedPurchaseOrderDiscountByID(
			DeactivateAppliedPurchaseOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedPurchaseOrderDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedPurchaseOrderDiscountByID(
			DeleteAppliedPurchaseOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedPurchaseOrderDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedPurchaseOrderDiscountModel>> GetAppliedPurchaseOrderDiscountByID(
			GetAppliedPurchaseOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedPurchaseOrderDiscountModel>(
				await CEFService.RequestAsync<GetAppliedPurchaseOrderDiscountByID, AppliedPurchaseOrderDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedPurchaseOrderDiscountByID(
			ReactivateAppliedPurchaseOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedPurchaseOrderDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedPurchaseOrderDiscount(
			UpdateAppliedPurchaseOrderDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedPurchaseOrderDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedPurchaseOrderDiscountPagedResults>> GetAppliedPurchaseOrderDiscounts(
			GetAppliedPurchaseOrderDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedPurchaseOrderDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedPurchaseOrderDiscounts, AppliedPurchaseOrderDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedPurchaseOrderItemDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedPurchaseOrderItemDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedPurchaseOrderItemDiscount(
			CreateAppliedPurchaseOrderItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedPurchaseOrderItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedPurchaseOrderItemDiscountByID(
			DeactivateAppliedPurchaseOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedPurchaseOrderItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedPurchaseOrderItemDiscountByID(
			DeleteAppliedPurchaseOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedPurchaseOrderItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedPurchaseOrderItemDiscountModel>> GetAppliedPurchaseOrderItemDiscountByID(
			GetAppliedPurchaseOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedPurchaseOrderItemDiscountModel>(
				await CEFService.RequestAsync<GetAppliedPurchaseOrderItemDiscountByID, AppliedPurchaseOrderItemDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedPurchaseOrderItemDiscountByID(
			ReactivateAppliedPurchaseOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedPurchaseOrderItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedPurchaseOrderItemDiscount(
			UpdateAppliedPurchaseOrderItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedPurchaseOrderItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedPurchaseOrderItemDiscountPagedResults>> GetAppliedPurchaseOrderItemDiscounts(
			GetAppliedPurchaseOrderItemDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedPurchaseOrderItemDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedPurchaseOrderItemDiscounts, AppliedPurchaseOrderItemDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesInvoiceDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesInvoiceDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesInvoiceDiscount(
			CreateAppliedSalesInvoiceDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesInvoiceDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesInvoiceDiscountByID(
			DeactivateAppliedSalesInvoiceDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesInvoiceDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesInvoiceDiscountByID(
			DeleteAppliedSalesInvoiceDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesInvoiceDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesInvoiceDiscountModel>> GetAppliedSalesInvoiceDiscountByID(
			GetAppliedSalesInvoiceDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesInvoiceDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesInvoiceDiscountByID, AppliedSalesInvoiceDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesInvoiceDiscountByID(
			ReactivateAppliedSalesInvoiceDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesInvoiceDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesInvoiceDiscount(
			UpdateAppliedSalesInvoiceDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesInvoiceDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesInvoiceDiscountPagedResults>> GetAppliedSalesInvoiceDiscounts(
			GetAppliedSalesInvoiceDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesInvoiceDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesInvoiceDiscounts, AppliedSalesInvoiceDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesInvoiceItemDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesInvoiceItemDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesInvoiceItemDiscount(
			CreateAppliedSalesInvoiceItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesInvoiceItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesInvoiceItemDiscountByID(
			DeactivateAppliedSalesInvoiceItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesInvoiceItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesInvoiceItemDiscountByID(
			DeleteAppliedSalesInvoiceItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesInvoiceItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesInvoiceItemDiscountModel>> GetAppliedSalesInvoiceItemDiscountByID(
			GetAppliedSalesInvoiceItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesInvoiceItemDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesInvoiceItemDiscountByID, AppliedSalesInvoiceItemDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesInvoiceItemDiscountByID(
			ReactivateAppliedSalesInvoiceItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesInvoiceItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesInvoiceItemDiscount(
			UpdateAppliedSalesInvoiceItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesInvoiceItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesInvoiceItemDiscountPagedResults>> GetAppliedSalesInvoiceItemDiscounts(
			GetAppliedSalesInvoiceItemDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesInvoiceItemDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesInvoiceItemDiscounts, AppliedSalesInvoiceItemDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesOrderDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesOrderDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesOrderDiscount(
			CreateAppliedSalesOrderDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesOrderDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesOrderDiscountByID(
			DeactivateAppliedSalesOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesOrderDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesOrderDiscountByID(
			DeleteAppliedSalesOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesOrderDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesOrderDiscountModel>> GetAppliedSalesOrderDiscountByID(
			GetAppliedSalesOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesOrderDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesOrderDiscountByID, AppliedSalesOrderDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesOrderDiscountByID(
			ReactivateAppliedSalesOrderDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesOrderDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesOrderDiscount(
			UpdateAppliedSalesOrderDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesOrderDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesOrderDiscountPagedResults>> GetAppliedSalesOrderDiscounts(
			GetAppliedSalesOrderDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesOrderDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesOrderDiscounts, AppliedSalesOrderDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesOrderItemDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesOrderItemDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesOrderItemDiscount(
			CreateAppliedSalesOrderItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesOrderItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesOrderItemDiscountByID(
			DeactivateAppliedSalesOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesOrderItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesOrderItemDiscountByID(
			DeleteAppliedSalesOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesOrderItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesOrderItemDiscountModel>> GetAppliedSalesOrderItemDiscountByID(
			GetAppliedSalesOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesOrderItemDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesOrderItemDiscountByID, AppliedSalesOrderItemDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesOrderItemDiscountByID(
			ReactivateAppliedSalesOrderItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesOrderItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesOrderItemDiscount(
			UpdateAppliedSalesOrderItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesOrderItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesOrderItemDiscountPagedResults>> GetAppliedSalesOrderItemDiscounts(
			GetAppliedSalesOrderItemDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesOrderItemDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesOrderItemDiscounts, AppliedSalesOrderItemDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesQuoteDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesQuoteDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesQuoteDiscount(
			CreateAppliedSalesQuoteDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesQuoteDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesQuoteDiscountByID(
			DeactivateAppliedSalesQuoteDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesQuoteDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesQuoteDiscountByID(
			DeleteAppliedSalesQuoteDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesQuoteDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesQuoteDiscountModel>> GetAppliedSalesQuoteDiscountByID(
			GetAppliedSalesQuoteDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesQuoteDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesQuoteDiscountByID, AppliedSalesQuoteDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesQuoteDiscountByID(
			ReactivateAppliedSalesQuoteDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesQuoteDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesQuoteDiscount(
			UpdateAppliedSalesQuoteDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesQuoteDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesQuoteDiscountPagedResults>> GetAppliedSalesQuoteDiscounts(
			GetAppliedSalesQuoteDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesQuoteDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesQuoteDiscounts, AppliedSalesQuoteDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesQuoteItemDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesQuoteItemDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesQuoteItemDiscount(
			CreateAppliedSalesQuoteItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesQuoteItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesQuoteItemDiscountByID(
			DeactivateAppliedSalesQuoteItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesQuoteItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesQuoteItemDiscountByID(
			DeleteAppliedSalesQuoteItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesQuoteItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesQuoteItemDiscountModel>> GetAppliedSalesQuoteItemDiscountByID(
			GetAppliedSalesQuoteItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesQuoteItemDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesQuoteItemDiscountByID, AppliedSalesQuoteItemDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesQuoteItemDiscountByID(
			ReactivateAppliedSalesQuoteItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesQuoteItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesQuoteItemDiscount(
			UpdateAppliedSalesQuoteItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesQuoteItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesQuoteItemDiscountPagedResults>> GetAppliedSalesQuoteItemDiscounts(
			GetAppliedSalesQuoteItemDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesQuoteItemDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesQuoteItemDiscounts, AppliedSalesQuoteItemDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesReturnDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesReturnDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesReturnDiscount(
			CreateAppliedSalesReturnDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesReturnDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesReturnDiscountByID(
			DeactivateAppliedSalesReturnDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesReturnDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesReturnDiscountByID(
			DeleteAppliedSalesReturnDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesReturnDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesReturnDiscountModel>> GetAppliedSalesReturnDiscountByID(
			GetAppliedSalesReturnDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesReturnDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesReturnDiscountByID, AppliedSalesReturnDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesReturnDiscountByID(
			ReactivateAppliedSalesReturnDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesReturnDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesReturnDiscount(
			UpdateAppliedSalesReturnDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesReturnDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesReturnDiscountPagedResults>> GetAppliedSalesReturnDiscounts(
			GetAppliedSalesReturnDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesReturnDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesReturnDiscounts, AppliedSalesReturnDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSalesReturnItemDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSalesReturnItemDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSalesReturnItemDiscount(
			CreateAppliedSalesReturnItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSalesReturnItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSalesReturnItemDiscountByID(
			DeactivateAppliedSalesReturnItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSalesReturnItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSalesReturnItemDiscountByID(
			DeleteAppliedSalesReturnItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSalesReturnItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesReturnItemDiscountModel>> GetAppliedSalesReturnItemDiscountByID(
			GetAppliedSalesReturnItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesReturnItemDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSalesReturnItemDiscountByID, AppliedSalesReturnItemDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSalesReturnItemDiscountByID(
			ReactivateAppliedSalesReturnItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSalesReturnItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSalesReturnItemDiscount(
			UpdateAppliedSalesReturnItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSalesReturnItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSalesReturnItemDiscountPagedResults>> GetAppliedSalesReturnItemDiscounts(
			GetAppliedSalesReturnItemDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSalesReturnItemDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSalesReturnItemDiscounts, AppliedSalesReturnItemDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSampleRequestDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSampleRequestDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSampleRequestDiscount(
			CreateAppliedSampleRequestDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSampleRequestDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSampleRequestDiscountByID(
			DeactivateAppliedSampleRequestDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSampleRequestDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSampleRequestDiscountByID(
			DeleteAppliedSampleRequestDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSampleRequestDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSampleRequestDiscountModel>> GetAppliedSampleRequestDiscountByID(
			GetAppliedSampleRequestDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSampleRequestDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSampleRequestDiscountByID, AppliedSampleRequestDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSampleRequestDiscountByID(
			ReactivateAppliedSampleRequestDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSampleRequestDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSampleRequestDiscount(
			UpdateAppliedSampleRequestDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSampleRequestDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSampleRequestDiscountPagedResults>> GetAppliedSampleRequestDiscounts(
			GetAppliedSampleRequestDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSampleRequestDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSampleRequestDiscounts, AppliedSampleRequestDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppliedSampleRequestItemDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppliedSampleRequestItemDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppliedSampleRequestItemDiscount(
			CreateAppliedSampleRequestItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppliedSampleRequestItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppliedSampleRequestItemDiscountByID(
			DeactivateAppliedSampleRequestItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppliedSampleRequestItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppliedSampleRequestItemDiscountByID(
			DeleteAppliedSampleRequestItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppliedSampleRequestItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSampleRequestItemDiscountModel>> GetAppliedSampleRequestItemDiscountByID(
			GetAppliedSampleRequestItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSampleRequestItemDiscountModel>(
				await CEFService.RequestAsync<GetAppliedSampleRequestItemDiscountByID, AppliedSampleRequestItemDiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppliedSampleRequestItemDiscountByID(
			ReactivateAppliedSampleRequestItemDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppliedSampleRequestItemDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppliedSampleRequestItemDiscount(
			UpdateAppliedSampleRequestItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppliedSampleRequestItemDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppliedSampleRequestItemDiscountPagedResults>> GetAppliedSampleRequestItemDiscounts(
			GetAppliedSampleRequestItemDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppliedSampleRequestItemDiscountPagedResults>(
				await CEFService.RequestAsync<GetAppliedSampleRequestItemDiscounts, AppliedSampleRequestItemDiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscount(
			CreateDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountByID(
			DeactivateDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountByID(
			DeleteDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountModel>> GetDiscountByID(
			GetDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountModel>(
				await CEFService.RequestAsync<GetDiscountByID, DiscountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountByID(
			ReactivateDiscountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscount(
			UpdateDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountAccount(
			CreateDiscountAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountAccountByID(
			DeactivateDiscountAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountAccountByID(
			DeleteDiscountAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountAccountModel>> GetDiscountAccountByID(
			GetDiscountAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountAccountModel>(
				await CEFService.RequestAsync<GetDiscountAccountByID, DiscountAccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountAccountByID(
			ReactivateDiscountAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountAccount(
			UpdateDiscountAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountAccountPagedResults>> GetDiscountAccounts(
			GetDiscountAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountAccountPagedResults>(
				await CEFService.RequestAsync<GetDiscountAccounts, DiscountAccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountAccountTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountAccountTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountAccountType(
			CreateDiscountAccountType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountAccountType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountAccountTypeByID(
			DeactivateDiscountAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountAccountTypeByID(
			DeleteDiscountAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountAccountTypeModel>> GetDiscountAccountTypeByID(
			GetDiscountAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountAccountTypeModel>(
				await CEFService.RequestAsync<GetDiscountAccountTypeByID, DiscountAccountTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountAccountTypeByID(
			ReactivateDiscountAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountAccountType(
			UpdateDiscountAccountType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountAccountType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountAccountTypePagedResults>> GetDiscountAccountTypes(
			GetDiscountAccountTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountAccountTypePagedResults>(
				await CEFService.RequestAsync<GetDiscountAccountTypes, DiscountAccountTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountBrandCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountBrandCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountBrand(
			CreateDiscountBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountBrandByID(
			DeactivateDiscountBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountBrandByID(
			DeleteDiscountBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountBrandModel>> GetDiscountBrandByID(
			GetDiscountBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountBrandModel>(
				await CEFService.RequestAsync<GetDiscountBrandByID, DiscountBrandModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountBrandByID(
			ReactivateDiscountBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountBrand(
			UpdateDiscountBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountBrandPagedResults>> GetDiscountBrands(
			GetDiscountBrands request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountBrandPagedResults>(
				await CEFService.RequestAsync<GetDiscountBrands, DiscountBrandPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountCategoryPagedResults>> GetDiscountCategories(
			GetDiscountCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountCategoryPagedResults>(
				await CEFService.RequestAsync<GetDiscountCategories, DiscountCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountCategory(
			CreateDiscountCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountCategoryByID(
			DeactivateDiscountCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountCategoryByID(
			DeleteDiscountCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountCategoryModel>> GetDiscountCategoryByID(
			GetDiscountCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountCategoryModel>(
				await CEFService.RequestAsync<GetDiscountCategoryByID, DiscountCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountCategoryByID(
			ReactivateDiscountCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountCategory(
			UpdateDiscountCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountCodeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountCodeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountCode(
			CreateDiscountCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountCode, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountCodeByID(
			DeactivateDiscountCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountCodeByID(
			DeleteDiscountCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountCodeModel>> GetDiscountCodeByID(
			GetDiscountCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountCodeModel>(
				await CEFService.RequestAsync<GetDiscountCodeByID, DiscountCodeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountCodeByID(
			ReactivateDiscountCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountCode(
			UpdateDiscountCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountCode, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountCodePagedResults>> GetDiscountCodes(
			GetDiscountCodes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountCodePagedResults>(
				await CEFService.RequestAsync<GetDiscountCodes, DiscountCodePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckDiscountCodeExistsByCode(
			CheckDiscountCodeExistsByCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckDiscountCodeExistsByCode, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountCountryPagedResults>> GetDiscountCountries(
			GetDiscountCountries request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountCountryPagedResults>(
				await CEFService.RequestAsync<GetDiscountCountries, DiscountCountryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountCountryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountCountryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountCountry(
			CreateDiscountCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountCountryByID(
			DeactivateDiscountCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountCountryByID(
			DeleteDiscountCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountCountryModel>> GetDiscountCountryByID(
			GetDiscountCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountCountryModel>(
				await CEFService.RequestAsync<GetDiscountCountryByID, DiscountCountryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountCountryByID(
			ReactivateDiscountCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountCountry(
			UpdateDiscountCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountFranchiseCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountFranchiseCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountFranchise(
			CreateDiscountFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountFranchiseByID(
			DeactivateDiscountFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountFranchiseByID(
			DeleteDiscountFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountFranchiseModel>> GetDiscountFranchiseByID(
			GetDiscountFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountFranchiseModel>(
				await CEFService.RequestAsync<GetDiscountFranchiseByID, DiscountFranchiseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountFranchiseByID(
			ReactivateDiscountFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountFranchise(
			UpdateDiscountFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountFranchisePagedResults>> GetDiscountFranchises(
			GetDiscountFranchises request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountFranchisePagedResults>(
				await CEFService.RequestAsync<GetDiscountFranchises, DiscountFranchisePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountManufacturer(
			CreateDiscountManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountManufacturerByID(
			DeactivateDiscountManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountManufacturerByID(
			DeleteDiscountManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountManufacturerModel>> GetDiscountManufacturerByID(
			GetDiscountManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountManufacturerModel>(
				await CEFService.RequestAsync<GetDiscountManufacturerByID, DiscountManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountManufacturerByID(
			ReactivateDiscountManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountManufacturer(
			UpdateDiscountManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountManufacturerPagedResults>> GetDiscountManufacturers(
			GetDiscountManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountManufacturerPagedResults>(
				await CEFService.RequestAsync<GetDiscountManufacturers, DiscountManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountProduct(
			CreateDiscountProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountProductByID(
			DeactivateDiscountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountProductByID(
			DeleteDiscountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountProductModel>> GetDiscountProductByID(
			GetDiscountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountProductModel>(
				await CEFService.RequestAsync<GetDiscountProductByID, DiscountProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountProductByID(
			ReactivateDiscountProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountProduct(
			UpdateDiscountProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountProductPagedResults>> GetDiscountProducts(
			GetDiscountProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountProductPagedResults>(
				await CEFService.RequestAsync<GetDiscountProducts, DiscountProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountProductTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountProductTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountProductType(
			CreateDiscountProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountProductTypeByID(
			DeactivateDiscountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountProductTypeByID(
			DeleteDiscountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountProductTypeModel>> GetDiscountProductTypeByID(
			GetDiscountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountProductTypeModel>(
				await CEFService.RequestAsync<GetDiscountProductTypeByID, DiscountProductTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountProductTypeByID(
			ReactivateDiscountProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountProductType(
			UpdateDiscountProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountProductTypePagedResults>> GetDiscountProductTypes(
			GetDiscountProductTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountProductTypePagedResults>(
				await CEFService.RequestAsync<GetDiscountProductTypes, DiscountProductTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountPagedResults>> GetDiscounts(
			GetDiscounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountPagedResults>(
				await CEFService.RequestAsync<GetDiscounts, DiscountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountShipCarrierMethodCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountShipCarrierMethodCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountShipCarrierMethod(
			CreateDiscountShipCarrierMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountShipCarrierMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountShipCarrierMethodByID(
			DeactivateDiscountShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountShipCarrierMethodByID(
			DeleteDiscountShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountShipCarrierMethodModel>> GetDiscountShipCarrierMethodByID(
			GetDiscountShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountShipCarrierMethodModel>(
				await CEFService.RequestAsync<GetDiscountShipCarrierMethodByID, DiscountShipCarrierMethodModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountShipCarrierMethodByID(
			ReactivateDiscountShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountShipCarrierMethod(
			UpdateDiscountShipCarrierMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountShipCarrierMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountShipCarrierMethodPagedResults>> GetDiscountShipCarrierMethods(
			GetDiscountShipCarrierMethods request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountShipCarrierMethodPagedResults>(
				await CEFService.RequestAsync<GetDiscountShipCarrierMethods, DiscountShipCarrierMethodPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountStoreCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountStoreCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountStore(
			CreateDiscountStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountStoreByID(
			DeactivateDiscountStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountStoreByID(
			DeleteDiscountStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountStoreModel>> GetDiscountStoreByID(
			GetDiscountStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountStoreModel>(
				await CEFService.RequestAsync<GetDiscountStoreByID, DiscountStoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountStoreByID(
			ReactivateDiscountStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountStore(
			UpdateDiscountStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountStorePagedResults>> GetDiscountStores(
			GetDiscountStores request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountStorePagedResults>(
				await CEFService.RequestAsync<GetDiscountStores, DiscountStorePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountUser(
			CreateDiscountUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountUserByID(
			DeactivateDiscountUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountUserByID(
			DeleteDiscountUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountUserModel>> GetDiscountUserByID(
			GetDiscountUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountUserModel>(
				await CEFService.RequestAsync<GetDiscountUserByID, DiscountUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountUserByID(
			ReactivateDiscountUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountUser(
			UpdateDiscountUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountUserRoleCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountUserRoleCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountUserRole(
			CreateDiscountUserRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountUserRole, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountUserRoleByID(
			DeactivateDiscountUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountUserRoleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountUserRoleByID(
			DeleteDiscountUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountUserRoleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountUserRoleModel>> GetDiscountUserRoleByID(
			GetDiscountUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountUserRoleModel>(
				await CEFService.RequestAsync<GetDiscountUserRoleByID, DiscountUserRoleModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountUserRoleByID(
			ReactivateDiscountUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountUserRoleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountUserRole(
			UpdateDiscountUserRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountUserRole, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountUserRolePagedResults>> GetDiscountUserRoles(
			GetDiscountUserRoles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountUserRolePagedResults>(
				await CEFService.RequestAsync<GetDiscountUserRoles, DiscountUserRolePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountUserPagedResults>> GetDiscountUsers(
			GetDiscountUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountUserPagedResults>(
				await CEFService.RequestAsync<GetDiscountUsers, DiscountUserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDiscountVendorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDiscountVendorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDiscountVendor(
			CreateDiscountVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDiscountVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDiscountVendorByID(
			DeactivateDiscountVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDiscountVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDiscountVendorByID(
			DeleteDiscountVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDiscountVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountVendorModel>> GetDiscountVendorByID(
			GetDiscountVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountVendorModel>(
				await CEFService.RequestAsync<GetDiscountVendorByID, DiscountVendorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDiscountVendorByID(
			ReactivateDiscountVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDiscountVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDiscountVendor(
			UpdateDiscountVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDiscountVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountVendorPagedResults>> GetDiscountVendors(
			GetDiscountVendors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountVendorPagedResults>(
				await CEFService.RequestAsync<GetDiscountVendors, DiscountVendorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteCategoryPagedResults>> GetFavoriteCategories(
			GetFavoriteCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteCategoryPagedResults>(
				await CEFService.RequestAsync<GetFavoriteCategories, FavoriteCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFavoriteCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFavoriteCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFavoriteCategory(
			CreateFavoriteCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFavoriteCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFavoriteCategoryByID(
			DeactivateFavoriteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFavoriteCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFavoriteCategoryByID(
			DeleteFavoriteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFavoriteCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteCategoryModel>> GetFavoriteCategoryByID(
			GetFavoriteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteCategoryModel>(
				await CEFService.RequestAsync<GetFavoriteCategoryByID, FavoriteCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFavoriteCategoryByID(
			ReactivateFavoriteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFavoriteCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFavoriteCategory(
			UpdateFavoriteCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFavoriteCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFavoriteManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFavoriteManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFavoriteManufacturer(
			CreateFavoriteManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFavoriteManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFavoriteManufacturerByID(
			DeactivateFavoriteManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFavoriteManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFavoriteManufacturerByID(
			DeleteFavoriteManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFavoriteManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteManufacturerModel>> GetFavoriteManufacturerByID(
			GetFavoriteManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteManufacturerModel>(
				await CEFService.RequestAsync<GetFavoriteManufacturerByID, FavoriteManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFavoriteManufacturerByID(
			ReactivateFavoriteManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFavoriteManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFavoriteManufacturer(
			UpdateFavoriteManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFavoriteManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteManufacturerPagedResults>> GetFavoriteManufacturers(
			GetFavoriteManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteManufacturerPagedResults>(
				await CEFService.RequestAsync<GetFavoriteManufacturers, FavoriteManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFavoriteShipCarrierCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFavoriteShipCarrierCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFavoriteShipCarrier(
			CreateFavoriteShipCarrier request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFavoriteShipCarrier, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFavoriteShipCarrierByID(
			DeactivateFavoriteShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFavoriteShipCarrierByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFavoriteShipCarrierByID(
			DeleteFavoriteShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFavoriteShipCarrierByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteShipCarrierModel>> GetFavoriteShipCarrierByID(
			GetFavoriteShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteShipCarrierModel>(
				await CEFService.RequestAsync<GetFavoriteShipCarrierByID, FavoriteShipCarrierModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFavoriteShipCarrierByID(
			ReactivateFavoriteShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFavoriteShipCarrierByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFavoriteShipCarrier(
			UpdateFavoriteShipCarrier request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFavoriteShipCarrier, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteShipCarrierPagedResults>> GetFavoriteShipCarriers(
			GetFavoriteShipCarriers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteShipCarrierPagedResults>(
				await CEFService.RequestAsync<GetFavoriteShipCarriers, FavoriteShipCarrierPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFavoriteStoreCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFavoriteStoreCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFavoriteStore(
			CreateFavoriteStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFavoriteStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFavoriteStoreByID(
			DeactivateFavoriteStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFavoriteStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFavoriteStoreByID(
			DeleteFavoriteStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFavoriteStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteStoreModel>> GetFavoriteStoreByID(
			GetFavoriteStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteStoreModel>(
				await CEFService.RequestAsync<GetFavoriteStoreByID, FavoriteStoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFavoriteStoreByID(
			ReactivateFavoriteStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFavoriteStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFavoriteStore(
			UpdateFavoriteStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFavoriteStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteStorePagedResults>> GetFavoriteStores(
			GetFavoriteStores request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteStorePagedResults>(
				await CEFService.RequestAsync<GetFavoriteStores, FavoriteStorePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFavoriteVendorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFavoriteVendorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFavoriteVendor(
			CreateFavoriteVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFavoriteVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFavoriteVendorByID(
			DeactivateFavoriteVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFavoriteVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFavoriteVendorByID(
			DeleteFavoriteVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFavoriteVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteVendorModel>> GetFavoriteVendorByID(
			GetFavoriteVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteVendorModel>(
				await CEFService.RequestAsync<GetFavoriteVendorByID, FavoriteVendorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFavoriteVendorByID(
			ReactivateFavoriteVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFavoriteVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFavoriteVendor(
			UpdateFavoriteVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFavoriteVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FavoriteVendorPagedResults>> GetFavoriteVendors(
			GetFavoriteVendors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FavoriteVendorPagedResults>(
				await CEFService.RequestAsync<GetFavoriteVendors, FavoriteVendorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> GetCurrentFranchiseID(
			GetCurrentFranchiseID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<GetCurrentFranchiseID, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchise(
			CreateFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<FranchiseModel>>> GetCurrentFranchiseAdministration()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<FranchiseModel>>(
				await CEFService.RequestAsync<GetCurrentFranchiseAdministration, CEFActionResponse<FranchiseModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseByID(
			DeactivateFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseByID(
			DeleteFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckFranchiseExistsByID(
			CheckFranchiseExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckFranchiseExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckFranchiseExistsByKey(
			CheckFranchiseExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckFranchiseExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckFranchiseExistsByName(
			CheckFranchiseExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckFranchiseExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminUpdateStatusForFranchiseOrders(
			AdminUpdateStatusForFranchiseOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminUpdateStatusForFranchiseOrders, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseModel>> GetFranchiseByID(
			GetFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseModel>(
				await CEFService.RequestAsync<GetFranchiseByID, FranchiseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseByID(
			ReactivateFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchise(
			UpdateFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseAccount(
			CreateFranchiseAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseAccountByID(
			DeactivateFranchiseAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseAccountByID(
			DeleteFranchiseAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseAccountModel>> GetFranchiseAccountByID(
			GetFranchiseAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseAccountModel>(
				await CEFService.RequestAsync<GetFranchiseAccountByID, FranchiseAccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseAccountByID(
			ReactivateFranchiseAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseAccount(
			UpdateFranchiseAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseAccountPagedResults>> GetFranchiseAccounts(
			GetFranchiseAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseAccountPagedResults>(
				await CEFService.RequestAsync<GetFranchiseAccounts, FranchiseAccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseCategoryPagedResults>> GetFranchiseCategories(
			GetFranchiseCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseCategoryPagedResults>(
				await CEFService.RequestAsync<GetFranchiseCategories, FranchiseCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseCategory(
			CreateFranchiseCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseCategoryByID(
			DeactivateFranchiseCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseCategoryByID(
			DeleteFranchiseCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseCategoryModel>> GetFranchiseCategoryByID(
			GetFranchiseCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseCategoryModel>(
				await CEFService.RequestAsync<GetFranchiseCategoryByID, FranchiseCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseCategoryByID(
			ReactivateFranchiseCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseCategory(
			UpdateFranchiseCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseCountryPagedResults>> GetFranchiseCountries(
			GetFranchiseCountries request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseCountryPagedResults>(
				await CEFService.RequestAsync<GetFranchiseCountries, FranchiseCountryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseCountryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseCountryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseCountry(
			CreateFranchiseCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseCountryByID(
			DeactivateFranchiseCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseCountryByID(
			DeleteFranchiseCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseCountryModel>> GetFranchiseCountryByID(
			GetFranchiseCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseCountryModel>(
				await CEFService.RequestAsync<GetFranchiseCountryByID, FranchiseCountryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseCountryByID(
			ReactivateFranchiseCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseCountry(
			UpdateFranchiseCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseCurrencyPagedResults>> GetFranchiseCurrencies(
			GetFranchiseCurrencies request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseCurrencyPagedResults>(
				await CEFService.RequestAsync<GetFranchiseCurrencies, FranchiseCurrencyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseCurrencyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseCurrencyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseCurrency(
			CreateFranchiseCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseCurrencyByID(
			DeactivateFranchiseCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseCurrencyByID(
			DeleteFranchiseCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseCurrencyModel>> GetFranchiseCurrencyByID(
			GetFranchiseCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseCurrencyModel>(
				await CEFService.RequestAsync<GetFranchiseCurrencyByID, FranchiseCurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseCurrencyByID(
			ReactivateFranchiseCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseCurrency(
			UpdateFranchiseCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseDistrictCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseDistrictCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseDistrict(
			CreateFranchiseDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseDistrictByID(
			DeactivateFranchiseDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseDistrictByID(
			DeleteFranchiseDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseDistrictModel>> GetFranchiseDistrictByID(
			GetFranchiseDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseDistrictModel>(
				await CEFService.RequestAsync<GetFranchiseDistrictByID, FranchiseDistrictModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseDistrictByID(
			ReactivateFranchiseDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseDistrict(
			UpdateFranchiseDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseDistrictPagedResults>> GetFranchiseDistricts(
			GetFranchiseDistricts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseDistrictPagedResults>(
				await CEFService.RequestAsync<GetFranchiseDistricts, FranchiseDistrictPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseImage(
			CreateFranchiseImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseImageByID(
			DeactivateFranchiseImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseImageByID(
			DeleteFranchiseImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseImageModel>> GetFranchiseImageByID(
			GetFranchiseImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseImageModel>(
				await CEFService.RequestAsync<GetFranchiseImageByID, FranchiseImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseImageByID(
			ReactivateFranchiseImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseImage(
			UpdateFranchiseImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseImagePagedResults>> GetFranchiseImages(
			GetFranchiseImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseImagePagedResults>(
				await CEFService.RequestAsync<GetFranchiseImages, FranchiseImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseImageType(
			CreateFranchiseImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseImageTypeByID(
			DeactivateFranchiseImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseImageTypeByID(
			DeleteFranchiseImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetFranchiseImageTypeByID(
			GetFranchiseImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetFranchiseImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseImageTypeByID(
			ReactivateFranchiseImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseImageType(
			UpdateFranchiseImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseImageTypePagedResults>> GetFranchiseImageTypes(
			GetFranchiseImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseImageTypePagedResults>(
				await CEFService.RequestAsync<GetFranchiseImageTypes, FranchiseImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseInventoryLocationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseInventoryLocationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseInventoryLocation(
			CreateFranchiseInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseInventoryLocationByID(
			DeactivateFranchiseInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseInventoryLocationByID(
			DeleteFranchiseInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseInventoryLocationModel>> GetFranchiseInventoryLocationByID(
			GetFranchiseInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseInventoryLocationModel>(
				await CEFService.RequestAsync<GetFranchiseInventoryLocationByID, FranchiseInventoryLocationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseInventoryLocationByID(
			ReactivateFranchiseInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseInventoryLocation(
			UpdateFranchiseInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseInventoryLocationPagedResults>> GetFranchiseInventoryLocations(
			GetFranchiseInventoryLocations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseInventoryLocationPagedResults>(
				await CEFService.RequestAsync<GetFranchiseInventoryLocations, FranchiseInventoryLocationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseInventoryLocationTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseInventoryLocationTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseInventoryLocationType(
			CreateFranchiseInventoryLocationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseInventoryLocationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseInventoryLocationTypeByID(
			DeactivateFranchiseInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseInventoryLocationTypeByID(
			DeleteFranchiseInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetFranchiseInventoryLocationTypeByID(
			GetFranchiseInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetFranchiseInventoryLocationTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseInventoryLocationTypeByID(
			ReactivateFranchiseInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseInventoryLocationType(
			UpdateFranchiseInventoryLocationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseInventoryLocationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseInventoryLocationTypePagedResults>> GetFranchiseInventoryLocationTypes(
			GetFranchiseInventoryLocationTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseInventoryLocationTypePagedResults>(
				await CEFService.RequestAsync<GetFranchiseInventoryLocationTypes, FranchiseInventoryLocationTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseLanguageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseLanguageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseLanguage(
			CreateFranchiseLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseLanguageByID(
			DeactivateFranchiseLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseLanguageByID(
			DeleteFranchiseLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseLanguageModel>> GetFranchiseLanguageByID(
			GetFranchiseLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseLanguageModel>(
				await CEFService.RequestAsync<GetFranchiseLanguageByID, FranchiseLanguageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseLanguageByID(
			ReactivateFranchiseLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseLanguage(
			UpdateFranchiseLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseLanguagePagedResults>> GetFranchiseLanguages(
			GetFranchiseLanguages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseLanguagePagedResults>(
				await CEFService.RequestAsync<GetFranchiseLanguages, FranchiseLanguagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseManufacturer(
			CreateFranchiseManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseManufacturerByID(
			DeactivateFranchiseManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseManufacturerByID(
			DeleteFranchiseManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseManufacturerModel>> GetFranchiseManufacturerByID(
			GetFranchiseManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseManufacturerModel>(
				await CEFService.RequestAsync<GetFranchiseManufacturerByID, FranchiseManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseManufacturerByID(
			ReactivateFranchiseManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseManufacturer(
			UpdateFranchiseManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseManufacturerPagedResults>> GetFranchiseManufacturers(
			GetFranchiseManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseManufacturerPagedResults>(
				await CEFService.RequestAsync<GetFranchiseManufacturers, FranchiseManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseProduct(
			CreateFranchiseProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseProductByID(
			DeactivateFranchiseProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseProductByID(
			DeleteFranchiseProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseProductModel>> GetFranchiseProductByID(
			GetFranchiseProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseProductModel>(
				await CEFService.RequestAsync<GetFranchiseProductByID, FranchiseProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseProductByID(
			ReactivateFranchiseProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseProduct(
			UpdateFranchiseProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseProductPagedResults>> GetFranchiseProducts(
			GetFranchiseProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseProductPagedResults>(
				await CEFService.RequestAsync<GetFranchiseProducts, FranchiseProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseRegionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseRegionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseRegion(
			CreateFranchiseRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseRegionByID(
			DeactivateFranchiseRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseRegionByID(
			DeleteFranchiseRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseRegionModel>> GetFranchiseRegionByID(
			GetFranchiseRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseRegionModel>(
				await CEFService.RequestAsync<GetFranchiseRegionByID, FranchiseRegionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseRegionByID(
			ReactivateFranchiseRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseRegion(
			UpdateFranchiseRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseRegionPagedResults>> GetFranchiseRegions(
			GetFranchiseRegions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseRegionPagedResults>(
				await CEFService.RequestAsync<GetFranchiseRegions, FranchiseRegionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchisePagedResults>> GetFranchises(
			GetFranchises request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchisePagedResults>(
				await CEFService.RequestAsync<GetFranchises, FranchisePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseSiteDomainCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseSiteDomainCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseSiteDomain(
			CreateFranchiseSiteDomain request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseSiteDomain, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseSiteDomainByID(
			DeactivateFranchiseSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseSiteDomainByID(
			DeleteFranchiseSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseSiteDomainModel>> GetFranchiseSiteDomainByID(
			GetFranchiseSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseSiteDomainModel>(
				await CEFService.RequestAsync<GetFranchiseSiteDomainByID, FranchiseSiteDomainModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseSiteDomainByID(
			ReactivateFranchiseSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseSiteDomain(
			UpdateFranchiseSiteDomain request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseSiteDomain, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseSiteDomainPagedResults>> GetFranchiseSiteDomains(
			GetFranchiseSiteDomains request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseSiteDomainPagedResults>(
				await CEFService.RequestAsync<GetFranchiseSiteDomains, FranchiseSiteDomainPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseStoreCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseStoreCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseStore(
			CreateFranchiseStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseStoreByID(
			DeactivateFranchiseStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseStoreByID(
			DeleteFranchiseStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseStoreModel>> GetFranchiseStoreByID(
			GetFranchiseStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseStoreModel>(
				await CEFService.RequestAsync<GetFranchiseStoreByID, FranchiseStoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseStoreByID(
			ReactivateFranchiseStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseStore(
			UpdateFranchiseStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseStorePagedResults>> GetFranchiseStores(
			GetFranchiseStores request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseStorePagedResults>(
				await CEFService.RequestAsync<GetFranchiseStores, FranchiseStorePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseType(
			CreateFranchiseType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseTypeByID(
			DeactivateFranchiseTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseTypeByID(
			DeleteFranchiseTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetFranchiseTypeByID(
			GetFranchiseTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetFranchiseTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseTypeByID(
			ReactivateFranchiseTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseType(
			UpdateFranchiseType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseTypePagedResults>> GetFranchiseTypes(
			GetFranchiseTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseTypePagedResults>(
				await CEFService.RequestAsync<GetFranchiseTypes, FranchiseTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseUser(
			CreateFranchiseUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseUserByID(
			DeactivateFranchiseUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseUserByID(
			DeleteFranchiseUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseUserModel>> GetFranchiseUserByID(
			GetFranchiseUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseUserModel>(
				await CEFService.RequestAsync<GetFranchiseUserByID, FranchiseUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseUserByID(
			ReactivateFranchiseUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseUser(
			UpdateFranchiseUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseUserPagedResults>> GetFranchiseUsers(
			GetFranchiseUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseUserPagedResults>(
				await CEFService.RequestAsync<GetFranchiseUsers, FranchiseUserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFranchiseVendorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFranchiseVendorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFranchiseVendor(
			CreateFranchiseVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFranchiseVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFranchiseVendorByID(
			DeactivateFranchiseVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFranchiseVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFranchiseVendorByID(
			DeleteFranchiseVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFranchiseVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseVendorModel>> GetFranchiseVendorByID(
			GetFranchiseVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseVendorModel>(
				await CEFService.RequestAsync<GetFranchiseVendorByID, FranchiseVendorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFranchiseVendorByID(
			ReactivateFranchiseVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFranchiseVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFranchiseVendor(
			UpdateFranchiseVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFranchiseVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseVendorPagedResults>> GetFranchiseVendors(
			GetFranchiseVendors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseVendorPagedResults>(
				await CEFService.RequestAsync<GetFranchiseVendors, FranchiseVendorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAddressCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAddressCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAddress(
			CreateAddress request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAddress, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAddressByID(
			DeactivateAddressByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAddressByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAddressByID(
			DeleteAddressByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAddressByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AddressModel>> GetAddressByID(
			GetAddressByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AddressModel>(
				await CEFService.RequestAsync<GetAddressByID, AddressModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAddressByID(
			ReactivateAddressByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAddressByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAddress(
			UpdateAddress request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAddress, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountContactModel>> CreateAddressInBook(
			CreateAddressInBook request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountContactModel>(
				await CEFService.RequestAsync<CreateAddressInBook, AccountContactModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<AccountContactModel>>> GetCurrentAccountAddressBook(
			GetCurrentAccountAddressBook request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<AccountContactModel>>(
				await CEFService.RequestAsync<GetCurrentAccountAddressBook, List<AccountContactModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AccountContactModel>> GetCurrentAccountPrimaryShippingAddress(
			GetCurrentAccountPrimaryShippingAddress request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AccountContactModel>(
				await CEFService.RequestAsync<GetCurrentAccountPrimaryShippingAddress, AccountContactModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<AccountContactModel>>> GetCurrentUserAddressBook(
			GetCurrentUserAddressBook request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<AccountContactModel>>(
				await CEFService.RequestAsync<GetCurrentUserAddressBook, List<AccountContactModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<AccountContactModel>>> GetAddressBookAsAdmin(
			GetAddressBookAsAdmin request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<AccountContactModel>>(
				await CEFService.RequestAsync<GetAddressBookAsAdmin, List<AccountContactModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AddressPagedResults>> GetAddresses(
			GetAddresses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AddressPagedResults>(
				await CEFService.RequestAsync<GetAddresses, AddressPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryPagedResults>> GetCountries(
			GetCountries request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryPagedResults>(
				await CEFService.RequestAsync<GetCountries, CountryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCountryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCountryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCountry(
			CreateCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCountryByID(
			DeactivateCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCountryByID(
			DeleteCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckCountryExistsByCode(
			CheckCountryExistsByCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckCountryExistsByCode, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckCountryExistsByKey(
			CheckCountryExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckCountryExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckCountryExistsByName(
			CheckCountryExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckCountryExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryModel>> GetCountryByID(
			GetCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryModel>(
				await CEFService.RequestAsync<GetCountryByID, CountryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCountryByID(
			ReactivateCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCountry(
			UpdateCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryCurrencyPagedResults>> GetCountryCurrencies(
			GetCountryCurrencies request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryCurrencyPagedResults>(
				await CEFService.RequestAsync<GetCountryCurrencies, CountryCurrencyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCountryCurrencyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCountryCurrencyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCountryCurrency(
			CreateCountryCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCountryCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCountryCurrencyByID(
			DeactivateCountryCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCountryCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCountryCurrencyByID(
			DeleteCountryCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCountryCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryCurrencyModel>> GetCountryCurrencyByID(
			GetCountryCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryCurrencyModel>(
				await CEFService.RequestAsync<GetCountryCurrencyByID, CountryCurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCountryCurrencyByID(
			ReactivateCountryCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCountryCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCountryCurrency(
			UpdateCountryCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCountryCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCountryImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCountryImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCountryImage(
			CreateCountryImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCountryImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCountryImageByID(
			DeactivateCountryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCountryImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCountryImageByID(
			DeleteCountryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCountryImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryImageModel>> GetCountryImageByID(
			GetCountryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryImageModel>(
				await CEFService.RequestAsync<GetCountryImageByID, CountryImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCountryImageByID(
			ReactivateCountryImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCountryImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCountryImage(
			UpdateCountryImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCountryImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryImagePagedResults>> GetCountryImages(
			GetCountryImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryImagePagedResults>(
				await CEFService.RequestAsync<GetCountryImages, CountryImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCountryImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCountryImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCountryImageType(
			CreateCountryImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCountryImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCountryImageTypeByID(
			DeactivateCountryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCountryImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCountryImageTypeByID(
			DeleteCountryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCountryImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCountryImageTypeByID(
			GetCountryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCountryImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCountryImageTypeByID(
			ReactivateCountryImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCountryImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCountryImageType(
			UpdateCountryImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCountryImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryImageTypePagedResults>> GetCountryImageTypes(
			GetCountryImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryImageTypePagedResults>(
				await CEFService.RequestAsync<GetCountryImageTypes, CountryImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCountryLanguageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCountryLanguageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCountryLanguage(
			CreateCountryLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCountryLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCountryLanguageByID(
			DeactivateCountryLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCountryLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCountryLanguageByID(
			DeleteCountryLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCountryLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryLanguageModel>> GetCountryLanguageByID(
			GetCountryLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryLanguageModel>(
				await CEFService.RequestAsync<GetCountryLanguageByID, CountryLanguageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCountryLanguageByID(
			ReactivateCountryLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCountryLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCountryLanguage(
			UpdateCountryLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCountryLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CountryLanguagePagedResults>> GetCountryLanguages(
			GetCountryLanguages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CountryLanguagePagedResults>(
				await CEFService.RequestAsync<GetCountryLanguages, CountryLanguagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDistrictCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDistrictCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDistrict(
			CreateDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDistrictByID(
			DeactivateDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDistrictByID(
			DeleteDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictModel>> GetDistrictByID(
			GetDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictModel>(
				await CEFService.RequestAsync<GetDistrictByID, DistrictModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictModel>> GetDistrictByName(
			GetDistrictByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictModel>(
				await CEFService.RequestAsync<GetDistrictByName, DistrictModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDistrictByID(
			ReactivateDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDistrict(
			UpdateDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictCurrencyPagedResults>> GetDistrictCurrencies(
			GetDistrictCurrencies request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictCurrencyPagedResults>(
				await CEFService.RequestAsync<GetDistrictCurrencies, DistrictCurrencyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDistrictCurrencyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDistrictCurrencyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDistrictCurrency(
			CreateDistrictCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDistrictCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDistrictCurrencyByID(
			DeactivateDistrictCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDistrictCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDistrictCurrencyByID(
			DeleteDistrictCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDistrictCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictCurrencyModel>> GetDistrictCurrencyByID(
			GetDistrictCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictCurrencyModel>(
				await CEFService.RequestAsync<GetDistrictCurrencyByID, DistrictCurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDistrictCurrencyByID(
			ReactivateDistrictCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDistrictCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDistrictCurrency(
			UpdateDistrictCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDistrictCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDistrictImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDistrictImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDistrictImage(
			CreateDistrictImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDistrictImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDistrictImageByID(
			DeactivateDistrictImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDistrictImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDistrictImageByID(
			DeleteDistrictImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDistrictImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictImageModel>> GetDistrictImageByID(
			GetDistrictImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictImageModel>(
				await CEFService.RequestAsync<GetDistrictImageByID, DistrictImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDistrictImageByID(
			ReactivateDistrictImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDistrictImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDistrictImage(
			UpdateDistrictImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDistrictImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictImagePagedResults>> GetDistrictImages(
			GetDistrictImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictImagePagedResults>(
				await CEFService.RequestAsync<GetDistrictImages, DistrictImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDistrictImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDistrictImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDistrictImageType(
			CreateDistrictImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDistrictImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDistrictImageTypeByID(
			DeactivateDistrictImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDistrictImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDistrictImageTypeByID(
			DeleteDistrictImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDistrictImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetDistrictImageTypeByID(
			GetDistrictImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetDistrictImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDistrictImageTypeByID(
			ReactivateDistrictImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDistrictImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDistrictImageType(
			UpdateDistrictImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDistrictImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictImageTypePagedResults>> GetDistrictImageTypes(
			GetDistrictImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictImageTypePagedResults>(
				await CEFService.RequestAsync<GetDistrictImageTypes, DistrictImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearDistrictLanguageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearDistrictLanguageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateDistrictLanguage(
			CreateDistrictLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateDistrictLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateDistrictLanguageByID(
			DeactivateDistrictLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateDistrictLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteDistrictLanguageByID(
			DeleteDistrictLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteDistrictLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictLanguageModel>> GetDistrictLanguageByID(
			GetDistrictLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictLanguageModel>(
				await CEFService.RequestAsync<GetDistrictLanguageByID, DistrictLanguageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateDistrictLanguageByID(
			ReactivateDistrictLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateDistrictLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateDistrictLanguage(
			UpdateDistrictLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateDistrictLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictLanguagePagedResults>> GetDistrictLanguages(
			GetDistrictLanguages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictLanguagePagedResults>(
				await CEFService.RequestAsync<GetDistrictLanguages, DistrictLanguagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DistrictPagedResults>> GetDistricts(
			GetDistricts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DistrictPagedResults>(
				await CEFService.RequestAsync<GetDistricts, DistrictPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearHistoricalAddressValidationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearHistoricalAddressValidationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateHistoricalAddressValidation(
			CreateHistoricalAddressValidation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateHistoricalAddressValidation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateHistoricalAddressValidationByID(
			DeactivateHistoricalAddressValidationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateHistoricalAddressValidationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteHistoricalAddressValidationByID(
			DeleteHistoricalAddressValidationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteHistoricalAddressValidationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<HistoricalAddressValidationModel>> GetHistoricalAddressValidationByID(
			GetHistoricalAddressValidationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<HistoricalAddressValidationModel>(
				await CEFService.RequestAsync<GetHistoricalAddressValidationByID, HistoricalAddressValidationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateHistoricalAddressValidationByID(
			ReactivateHistoricalAddressValidationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateHistoricalAddressValidationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateHistoricalAddressValidation(
			UpdateHistoricalAddressValidation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateHistoricalAddressValidation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<HistoricalAddressValidationPagedResults>> GetHistoricalAddressValidations(
			GetHistoricalAddressValidations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<HistoricalAddressValidationPagedResults>(
				await CEFService.RequestAsync<GetHistoricalAddressValidations, HistoricalAddressValidationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPhonePrefixLookupCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPhonePrefixLookupCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePhonePrefixLookup(
			CreatePhonePrefixLookup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePhonePrefixLookup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePhonePrefixLookupByID(
			DeactivatePhonePrefixLookupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePhonePrefixLookupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePhonePrefixLookupByID(
			DeletePhonePrefixLookupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePhonePrefixLookupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PhonePrefixLookupModel>> GetPhonePrefixLookupByID(
			GetPhonePrefixLookupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PhonePrefixLookupModel>(
				await CEFService.RequestAsync<GetPhonePrefixLookupByID, PhonePrefixLookupModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePhonePrefixLookupByID(
			ReactivatePhonePrefixLookupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePhonePrefixLookupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePhonePrefixLookup(
			UpdatePhonePrefixLookup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePhonePrefixLookup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PhonePrefixLookupPagedResults>> GetPhonePrefixLookups(
			GetPhonePrefixLookups request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PhonePrefixLookupPagedResults>(
				await CEFService.RequestAsync<GetPhonePrefixLookups, PhonePrefixLookupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PhonePrefixLookupPagedResults>> ReversePhonePrefixToCityRegionCountry(
			ReversePhonePrefixToCityRegionCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PhonePrefixLookupPagedResults>(
				await CEFService.RequestAsync<ReversePhonePrefixToCityRegionCountry, PhonePrefixLookupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRegionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRegionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRegion(
			CreateRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRegionByID(
			DeactivateRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRegionByID(
			DeleteRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckRegionExistsByCode(
			CheckRegionExistsByCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckRegionExistsByCode, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckRegionExistsByKey(
			CheckRegionExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckRegionExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckRegionExistsByName(
			CheckRegionExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckRegionExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionModel>> GetRegionByID(
			GetRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionModel>(
				await CEFService.RequestAsync<GetRegionByID, RegionModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionModel>> GetRegionByName(
			GetRegionByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionModel>(
				await CEFService.RequestAsync<GetRegionByName, RegionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRegionByID(
			ReactivateRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RestrictedRegionCheck(
			RestrictedRegionCheck request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RestrictedRegionCheck, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRegion(
			UpdateRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionCurrencyPagedResults>> GetRegionCurrencies(
			GetRegionCurrencies request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionCurrencyPagedResults>(
				await CEFService.RequestAsync<GetRegionCurrencies, RegionCurrencyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRegionCurrencyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRegionCurrencyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRegionCurrency(
			CreateRegionCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRegionCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRegionCurrencyByID(
			DeactivateRegionCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRegionCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRegionCurrencyByID(
			DeleteRegionCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRegionCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionCurrencyModel>> GetRegionCurrencyByID(
			GetRegionCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionCurrencyModel>(
				await CEFService.RequestAsync<GetRegionCurrencyByID, RegionCurrencyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRegionCurrencyByID(
			ReactivateRegionCurrencyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRegionCurrencyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRegionCurrency(
			UpdateRegionCurrency request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRegionCurrency, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRegionImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRegionImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRegionImage(
			CreateRegionImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRegionImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRegionImageByID(
			DeactivateRegionImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRegionImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRegionImageByID(
			DeleteRegionImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRegionImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionImageModel>> GetRegionImageByID(
			GetRegionImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionImageModel>(
				await CEFService.RequestAsync<GetRegionImageByID, RegionImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRegionImageByID(
			ReactivateRegionImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRegionImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRegionImage(
			UpdateRegionImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRegionImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionImagePagedResults>> GetRegionImages(
			GetRegionImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionImagePagedResults>(
				await CEFService.RequestAsync<GetRegionImages, RegionImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRegionImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRegionImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRegionImageType(
			CreateRegionImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRegionImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRegionImageTypeByID(
			DeactivateRegionImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRegionImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRegionImageTypeByID(
			DeleteRegionImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRegionImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetRegionImageTypeByID(
			GetRegionImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetRegionImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRegionImageTypeByID(
			ReactivateRegionImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRegionImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRegionImageType(
			UpdateRegionImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRegionImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionImageTypePagedResults>> GetRegionImageTypes(
			GetRegionImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionImageTypePagedResults>(
				await CEFService.RequestAsync<GetRegionImageTypes, RegionImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRegionLanguageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRegionLanguageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRegionLanguage(
			CreateRegionLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRegionLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRegionLanguageByID(
			DeactivateRegionLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRegionLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRegionLanguageByID(
			DeleteRegionLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRegionLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionLanguageModel>> GetRegionLanguageByID(
			GetRegionLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionLanguageModel>(
				await CEFService.RequestAsync<GetRegionLanguageByID, RegionLanguageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRegionLanguageByID(
			ReactivateRegionLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRegionLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRegionLanguage(
			UpdateRegionLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRegionLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionLanguagePagedResults>> GetRegionLanguages(
			GetRegionLanguages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionLanguagePagedResults>(
				await CEFService.RequestAsync<GetRegionLanguages, RegionLanguagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RegionPagedResults>> GetRegions(
			GetRegions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RegionPagedResults>(
				await CEFService.RequestAsync<GetRegions, RegionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<TimeZoneInfo>>> GetTimeZonesList()
		{
			return new HttpPromiseCallbackArg<List<TimeZoneInfo>>(
				await CEFService.RequestAsync<GetTimeZonesList, List<TimeZoneInfo>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearZipCodeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearZipCodeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateZipCode(
			CreateZipCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateZipCode, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateZipCodeByID(
			DeactivateZipCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateZipCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteZipCodeByID(
			DeleteZipCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteZipCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ZipCodeModel>> GetZipCodeByID(
			GetZipCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ZipCodeModel>(
				await CEFService.RequestAsync<GetZipCodeByID, ZipCodeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateZipCodeByID(
			ReactivateZipCodeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateZipCodeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateZipCode(
			UpdateZipCode request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateZipCode, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ZipCodePagedResults>> GetZipCodes(
			GetZipCodes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ZipCodePagedResults>(
				await CEFService.RequestAsync<GetZipCodes, ZipCodePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLanguageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLanguageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLanguage(
			CreateLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLanguageByID(
			DeactivateLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLanguageByID(
			DeleteLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LanguageModel>> GetLanguageByID(
			GetLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LanguageModel>(
				await CEFService.RequestAsync<GetLanguageByID, LanguageModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LanguageModel>> GetLanguageByKey(
			GetLanguageByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LanguageModel>(
				await CEFService.RequestAsync<GetLanguageByKey, LanguageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLanguageByID(
			ReactivateLanguageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLanguageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLanguage(
			UpdateLanguage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLanguage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLanguageImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLanguageImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLanguageImage(
			CreateLanguageImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLanguageImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLanguageImageByID(
			DeactivateLanguageImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLanguageImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLanguageImageByID(
			DeleteLanguageImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLanguageImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LanguageImageModel>> GetLanguageImageByID(
			GetLanguageImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LanguageImageModel>(
				await CEFService.RequestAsync<GetLanguageImageByID, LanguageImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLanguageImageByID(
			ReactivateLanguageImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLanguageImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLanguageImage(
			UpdateLanguageImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLanguageImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LanguageImagePagedResults>> GetLanguageImages(
			GetLanguageImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LanguageImagePagedResults>(
				await CEFService.RequestAsync<GetLanguageImages, LanguageImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearLanguageImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearLanguageImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateLanguageImageType(
			CreateLanguageImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateLanguageImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateLanguageImageTypeByID(
			DeactivateLanguageImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateLanguageImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteLanguageImageTypeByID(
			DeleteLanguageImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteLanguageImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetLanguageImageTypeByID(
			GetLanguageImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetLanguageImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateLanguageImageTypeByID(
			ReactivateLanguageImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateLanguageImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateLanguageImageType(
			UpdateLanguageImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateLanguageImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LanguageImageTypePagedResults>> GetLanguageImageTypes(
			GetLanguageImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LanguageImageTypePagedResults>(
				await CEFService.RequestAsync<GetLanguageImageTypes, LanguageImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LanguagePagedResults>> GetLanguages(
			GetLanguages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LanguagePagedResults>(
				await CEFService.RequestAsync<GetLanguages, LanguagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUiKeyCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUiKeyCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUiKey(
			CreateUiKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUiKey, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUiKeyByID(
			DeactivateUiKeyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUiKeyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUiKeyByID(
			DeleteUiKeyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUiKeyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UiKeyModel>> GetUiKeyByID(
			GetUiKeyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UiKeyModel>(
				await CEFService.RequestAsync<GetUiKeyByID, UiKeyModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUiKeyByID(
			ReactivateUiKeyByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUiKeyByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUiKey(
			UpdateUiKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUiKey, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UiKeyPagedResults>> GetUiKeys(
			GetUiKeys request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UiKeyPagedResults>(
				await CEFService.RequestAsync<GetUiKeys, UiKeyPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearUiTranslationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearUiTranslationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateUiTranslation(
			CreateUiTranslation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateUiTranslation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUiTranslationByID(
			DeactivateUiTranslationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUiTranslationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteUiTranslationByID(
			DeleteUiTranslationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteUiTranslationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UiTranslationModel>> GetUiTranslationByID(
			GetUiTranslationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UiTranslationModel>(
				await CEFService.RequestAsync<GetUiTranslationByID, UiTranslationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateUiTranslationByID(
			ReactivateUiTranslationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateUiTranslationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateUiTranslation(
			UpdateUiTranslation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateUiTranslation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<UiTranslationPagedResults>> GetUiTranslations(
			GetUiTranslations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<UiTranslationPagedResults>(
				await CEFService.RequestAsync<GetUiTranslations, UiTranslationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearGroupCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearGroupCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateGroup(
			CreateGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateGroupByID(
			DeactivateGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteGroupByID(
			DeleteGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GroupModel>> GetGroupByID(
			GetGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GroupModel>(
				await CEFService.RequestAsync<GetGroupByID, GroupModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateGroupByID(
			ReactivateGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateGroup(
			UpdateGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GroupPagedResults>> GetGroups(
			GetGroups request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GroupPagedResults>(
				await CEFService.RequestAsync<GetGroups, GroupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearGroupStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearGroupStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateGroupStatus(
			CreateGroupStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateGroupStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateGroupStatusByID(
			DeactivateGroupStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateGroupStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteGroupStatusByID(
			DeleteGroupStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteGroupStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetGroupStatusByID(
			GetGroupStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetGroupStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateGroupStatusByID(
			ReactivateGroupStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateGroupStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateGroupStatus(
			UpdateGroupStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateGroupStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GroupStatusPagedResults>> GetGroupStatuses(
			GetGroupStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GroupStatusPagedResults>(
				await CEFService.RequestAsync<GetGroupStatuses, GroupStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearGroupTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearGroupTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateGroupType(
			CreateGroupType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateGroupType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateGroupTypeByID(
			DeactivateGroupTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateGroupTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteGroupTypeByID(
			DeleteGroupTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteGroupTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetGroupTypeByID(
			GetGroupTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetGroupTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateGroupTypeByID(
			ReactivateGroupTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateGroupTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateGroupType(
			UpdateGroupType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateGroupType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GroupTypePagedResults>> GetGroupTypes(
			GetGroupTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GroupTypePagedResults>(
				await CEFService.RequestAsync<GetGroupTypes, GroupTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearGroupUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearGroupUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateGroupUser(
			CreateGroupUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateGroupUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateGroupUserByID(
			DeactivateGroupUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateGroupUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteGroupUserByID(
			DeleteGroupUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteGroupUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GroupUserModel>> GetGroupUserByID(
			GetGroupUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GroupUserModel>(
				await CEFService.RequestAsync<GetGroupUserByID, GroupUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateGroupUserByID(
			ReactivateGroupUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateGroupUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateGroupUser(
			UpdateGroupUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateGroupUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<GroupUserPagedResults>> GetGroupUsers(
			GetGroupUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<GroupUserPagedResults>(
				await CEFService.RequestAsync<GetGroupUsers, GroupUserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearScheduledJobConfigurationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearScheduledJobConfigurationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateScheduledJobConfiguration(
			CreateScheduledJobConfiguration request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateScheduledJobConfiguration, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateScheduledJobConfigurationByID(
			DeactivateScheduledJobConfigurationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateScheduledJobConfigurationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteScheduledJobConfigurationByID(
			DeleteScheduledJobConfigurationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteScheduledJobConfigurationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScheduledJobConfigurationModel>> GetScheduledJobConfigurationByID(
			GetScheduledJobConfigurationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScheduledJobConfigurationModel>(
				await CEFService.RequestAsync<GetScheduledJobConfigurationByID, ScheduledJobConfigurationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateScheduledJobConfigurationByID(
			ReactivateScheduledJobConfigurationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateScheduledJobConfigurationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateScheduledJobConfiguration(
			UpdateScheduledJobConfiguration request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateScheduledJobConfiguration, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScheduledJobConfigurationPagedResults>> GetScheduledJobConfigurations(
			GetScheduledJobConfigurations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScheduledJobConfigurationPagedResults>(
				await CEFService.RequestAsync<GetScheduledJobConfigurations, ScheduledJobConfigurationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearScheduledJobConfigurationSettingCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearScheduledJobConfigurationSettingCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateScheduledJobConfigurationSetting(
			CreateScheduledJobConfigurationSetting request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateScheduledJobConfigurationSetting, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateScheduledJobConfigurationSettingByID(
			DeactivateScheduledJobConfigurationSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateScheduledJobConfigurationSettingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteScheduledJobConfigurationSettingByID(
			DeleteScheduledJobConfigurationSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteScheduledJobConfigurationSettingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScheduledJobConfigurationSettingModel>> GetScheduledJobConfigurationSettingByID(
			GetScheduledJobConfigurationSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScheduledJobConfigurationSettingModel>(
				await CEFService.RequestAsync<GetScheduledJobConfigurationSettingByID, ScheduledJobConfigurationSettingModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateScheduledJobConfigurationSettingByID(
			ReactivateScheduledJobConfigurationSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateScheduledJobConfigurationSettingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateScheduledJobConfigurationSetting(
			UpdateScheduledJobConfigurationSetting request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateScheduledJobConfigurationSetting, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScheduledJobConfigurationSettingPagedResults>> GetScheduledJobConfigurationSettings(
			GetScheduledJobConfigurationSettings request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScheduledJobConfigurationSettingPagedResults>(
				await CEFService.RequestAsync<GetScheduledJobConfigurationSettings, ScheduledJobConfigurationSettingPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearInventoryLocationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearInventoryLocationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateInventoryLocation(
			CreateInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateInventoryLocationByID(
			DeactivateInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteInventoryLocationByID(
			DeleteInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationModel>> GetInventoryLocationByID(
			GetInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationModel>(
				await CEFService.RequestAsync<GetInventoryLocationByID, InventoryLocationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateInventoryLocationByID(
			ReactivateInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationRegionPagedResults>> GetInventoryLocationRegionsByInventoryLocationID(
			GetInventoryLocationRegionsByInventoryLocationID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationRegionPagedResults>(
				await CEFService.RequestAsync<GetInventoryLocationRegionsByInventoryLocationID, InventoryLocationRegionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateInventoryLocation(
			UpdateInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertInventoryLocation(
			UpsertInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearInventoryLocationRegionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearInventoryLocationRegionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateInventoryLocationRegion(
			CreateInventoryLocationRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateInventoryLocationRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateInventoryLocationRegionByID(
			DeactivateInventoryLocationRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateInventoryLocationRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteInventoryLocationRegionByID(
			DeleteInventoryLocationRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteInventoryLocationRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationRegionModel>> GetInventoryLocationRegionByID(
			GetInventoryLocationRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationRegionModel>(
				await CEFService.RequestAsync<GetInventoryLocationRegionByID, InventoryLocationRegionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateInventoryLocationRegionByID(
			ReactivateInventoryLocationRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateInventoryLocationRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateInventoryLocationRegion(
			UpdateInventoryLocationRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateInventoryLocationRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationRegionPagedResults>> GetInventoryLocationRegions(
			GetInventoryLocationRegions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationRegionPagedResults>(
				await CEFService.RequestAsync<GetInventoryLocationRegions, InventoryLocationRegionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationPagedResults>> GetInventoryLocations(
			GetInventoryLocations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationPagedResults>(
				await CEFService.RequestAsync<GetInventoryLocations, InventoryLocationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearInventoryLocationSectionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearInventoryLocationSectionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateInventoryLocationSection(
			CreateInventoryLocationSection request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateInventoryLocationSection, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateInventoryLocationSectionByID(
			DeactivateInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateInventoryLocationSectionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteInventoryLocationSectionByID(
			DeleteInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteInventoryLocationSectionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationSectionModel>> GetInventoryLocationSectionByID(
			GetInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationSectionModel>(
				await CEFService.RequestAsync<GetInventoryLocationSectionByID, InventoryLocationSectionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateInventoryLocationSectionByID(
			ReactivateInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateInventoryLocationSectionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateInventoryLocationSection(
			UpdateInventoryLocationSection request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateInventoryLocationSection, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationSectionPagedResults>> GetInventoryLocationSections(
			GetInventoryLocationSections request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationSectionPagedResults>(
				await CEFService.RequestAsync<GetInventoryLocationSections, InventoryLocationSectionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearInventoryLocationUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearInventoryLocationUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateInventoryLocationUser(
			CreateInventoryLocationUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateInventoryLocationUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateInventoryLocationUserByID(
			DeactivateInventoryLocationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateInventoryLocationUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteInventoryLocationUserByID(
			DeleteInventoryLocationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteInventoryLocationUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationUserModel>> GetInventoryLocationUserByID(
			GetInventoryLocationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationUserModel>(
				await CEFService.RequestAsync<GetInventoryLocationUserByID, InventoryLocationUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateInventoryLocationUserByID(
			ReactivateInventoryLocationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateInventoryLocationUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateInventoryLocationUser(
			UpdateInventoryLocationUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateInventoryLocationUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<InventoryLocationUserPagedResults>> GetInventoryLocationUsers(
			GetInventoryLocationUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<InventoryLocationUserPagedResults>(
				await CEFService.RequestAsync<GetInventoryLocationUsers, InventoryLocationUserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoice(
			CreateSalesInvoice request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoice, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceByID(
			DeactivateSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceByID(
			DeleteSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceModel>> GetSalesInvoiceByID(
			GetSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceModel>(
				await CEFService.RequestAsync<GetSalesInvoiceByID, SalesInvoiceModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceByID(
			ReactivateSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoice(
			UpdateSalesInvoice request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoice, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceContact(
			CreateSalesInvoiceContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceContactByID(
			DeactivateSalesInvoiceContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceContactByID(
			DeleteSalesInvoiceContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceContactModel>> GetSalesInvoiceContactByID(
			GetSalesInvoiceContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceContactModel>(
				await CEFService.RequestAsync<GetSalesInvoiceContactByID, SalesInvoiceContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceContactByID(
			ReactivateSalesInvoiceContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceContact(
			UpdateSalesInvoiceContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceContactPagedResults>> GetSalesInvoiceContacts(
			GetSalesInvoiceContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceContactPagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceContacts, SalesInvoiceContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceEvent(
			CreateSalesInvoiceEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceEventByID(
			DeactivateSalesInvoiceEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceEventByID(
			DeleteSalesInvoiceEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceEventModel>> GetSalesInvoiceEventByID(
			GetSalesInvoiceEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceEventModel>(
				await CEFService.RequestAsync<GetSalesInvoiceEventByID, SalesInvoiceEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceEventByID(
			ReactivateSalesInvoiceEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceEvent(
			UpdateSalesInvoiceEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceEventPagedResults>> GetSalesInvoiceEvents(
			GetSalesInvoiceEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceEventPagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceEvents, SalesInvoiceEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceEventType(
			CreateSalesInvoiceEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceEventTypeByID(
			DeactivateSalesInvoiceEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceEventTypeByID(
			DeleteSalesInvoiceEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesInvoiceEventTypeByID(
			GetSalesInvoiceEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesInvoiceEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceEventTypeByID(
			ReactivateSalesInvoiceEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceEventType(
			UpdateSalesInvoiceEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceEventTypePagedResults>> GetSalesInvoiceEventTypes(
			GetSalesInvoiceEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceEventTypePagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceEventTypes, SalesInvoiceEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceFile(
			CreateSalesInvoiceFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceFileByID(
			DeactivateSalesInvoiceFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceFileByID(
			DeleteSalesInvoiceFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceFileModel>> GetSalesInvoiceFileByID(
			GetSalesInvoiceFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceFileModel>(
				await CEFService.RequestAsync<GetSalesInvoiceFileByID, SalesInvoiceFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceFileByID(
			ReactivateSalesInvoiceFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceFile(
			UpdateSalesInvoiceFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceFilePagedResults>> GetSalesInvoiceFiles(
			GetSalesInvoiceFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceFilePagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceFiles, SalesInvoiceFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceItemCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceItemCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceItem(
			CreateSalesInvoiceItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceItemByID(
			DeactivateSalesInvoiceItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceItemByID(
			DeleteSalesInvoiceItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesInvoiceItemDiscountModel, AppliedSalesInvoiceItemDiscountModel>>> GetSalesInvoiceItemByID(
			GetSalesInvoiceItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesInvoiceItemDiscountModel, AppliedSalesInvoiceItemDiscountModel>>(
				await CEFService.RequestAsync<GetSalesInvoiceItemByID, SalesItemBaseModel<IAppliedSalesInvoiceItemDiscountModel, AppliedSalesInvoiceItemDiscountModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceItemByID(
			ReactivateSalesInvoiceItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceItem(
			UpdateSalesInvoiceItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceItemPagedResults>> GetSalesInvoiceItems(
			GetSalesInvoiceItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceItemPagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceItems, SalesInvoiceItemPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceItemTargetCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceItemTargetCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceItemTarget(
			CreateSalesInvoiceItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceItemTargetByID(
			DeactivateSalesInvoiceItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceItemTargetByID(
			DeleteSalesInvoiceItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetBaseModel>> GetSalesInvoiceItemTargetByID(
			GetSalesInvoiceItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetBaseModel>(
				await CEFService.RequestAsync<GetSalesInvoiceItemTargetByID, SalesItemTargetBaseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceItemTargetByID(
			ReactivateSalesInvoiceItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceItemTarget(
			UpdateSalesInvoiceItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceItemTargetPagedResults>> GetSalesInvoiceItemTargets(
			GetSalesInvoiceItemTargets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceItemTargetPagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceItemTargets, SalesInvoiceItemTargetPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoicePagedResults>> GetSalesInvoices(
			GetSalesInvoices request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoicePagedResults>(
				await CEFService.RequestAsync<GetSalesInvoices, SalesInvoicePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceStateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceStateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceState(
			CreateSalesInvoiceState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceStateByID(
			DeactivateSalesInvoiceStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceStateByID(
			DeleteSalesInvoiceStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceStateExistsByDisplayName(
			CheckSalesInvoiceStateExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceStateExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceStateExistsByKey(
			CheckSalesInvoiceStateExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceStateExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceStateExistsByName(
			CheckSalesInvoiceStateExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceStateExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StateModel>> GetSalesInvoiceStateByID(
			GetSalesInvoiceStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StateModel>(
				await CEFService.RequestAsync<GetSalesInvoiceStateByID, StateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceStateByID(
			ReactivateSalesInvoiceStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceState(
			UpdateSalesInvoiceState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceStatePagedResults>> GetSalesInvoiceStates(
			GetSalesInvoiceStates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceStatePagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceStates, SalesInvoiceStatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceStatus(
			CreateSalesInvoiceStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceStatusByID(
			DeactivateSalesInvoiceStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceStatusByID(
			DeleteSalesInvoiceStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceStatusExistsByDisplayName(
			CheckSalesInvoiceStatusExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceStatusExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceStatusExistsByKey(
			CheckSalesInvoiceStatusExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceStatusExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceStatusExistsByName(
			CheckSalesInvoiceStatusExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceStatusExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetSalesInvoiceStatusByID(
			GetSalesInvoiceStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetSalesInvoiceStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceStatusByID(
			ReactivateSalesInvoiceStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceStatus(
			UpdateSalesInvoiceStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceStatusPagedResults>> GetSalesInvoiceStatuses(
			GetSalesInvoiceStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceStatusPagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceStatuses, SalesInvoiceStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoiceTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoiceTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoiceType(
			CreateSalesInvoiceType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoiceType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoiceTypeByID(
			DeactivateSalesInvoiceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoiceTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoiceTypeByID(
			DeleteSalesInvoiceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoiceTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceTypeExistsByDisplayName(
			CheckSalesInvoiceTypeExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceTypeExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceTypeExistsByKey(
			CheckSalesInvoiceTypeExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceTypeExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesInvoiceTypeExistsByName(
			CheckSalesInvoiceTypeExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesInvoiceTypeExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesInvoiceTypeByID(
			GetSalesInvoiceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesInvoiceTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoiceTypeByID(
			ReactivateSalesInvoiceTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoiceTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoiceType(
			UpdateSalesInvoiceType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoiceType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceTypePagedResults>> GetSalesInvoiceTypes(
			GetSalesInvoiceTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceTypePagedResults>(
				await CEFService.RequestAsync<GetSalesInvoiceTypes, SalesInvoiceTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderSalesInvoiceCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderSalesInvoiceCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderSalesInvoice(
			CreateSalesOrderSalesInvoice request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderSalesInvoice, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderSalesInvoiceByID(
			DeactivateSalesOrderSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderSalesInvoiceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderSalesInvoiceByID(
			DeleteSalesOrderSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderSalesInvoiceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderSalesInvoiceModel>> GetSalesOrderSalesInvoiceByID(
			GetSalesOrderSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderSalesInvoiceModel>(
				await CEFService.RequestAsync<GetSalesOrderSalesInvoiceByID, SalesOrderSalesInvoiceModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderSalesInvoiceByID(
			ReactivateSalesOrderSalesInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderSalesInvoiceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderSalesInvoice(
			UpdateSalesOrderSalesInvoice request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderSalesInvoice, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderSalesInvoicePagedResults>> GetSalesOrderSalesInvoices(
			GetSalesOrderSalesInvoices request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderSalesInvoicePagedResults>(
				await CEFService.RequestAsync<GetSalesOrderSalesInvoices, SalesOrderSalesInvoicePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallback> GetAdminCEFConfig()
		{
			await CEFService.RequestAsync(new GetAdminCEFConfig()).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallback> GetBrandAdminCEFConfig()
		{
			await CEFService.RequestAsync(new GetBrandAdminCEFConfig()).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFConfig>> GetBrandAdminCEFConfigAlt()
		{
			return new HttpPromiseCallbackArg<CEFConfig>(
				await CEFService.RequestAsync<GetBrandAdminCEFConfigAlt, CEFConfig>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearJSConfigsCaches()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearJSConfigsCaches, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFConfig>> GetFranchiseAdminCEFConfigAlt()
		{
			return new HttpPromiseCallbackArg<CEFConfig>(
				await CEFService.RequestAsync<GetFranchiseAdminCEFConfigAlt, CEFConfig>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<Type, Dictionary<string, object>>>>> GetAppSettings()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<Type, Dictionary<string, object>>>>(
				await CEFService.RequestAsync<GetAppSettings, CEFActionResponse<Dictionary<Type, Dictionary<string, object>>>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || MANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFConfig>> GetManufacturerAdminCEFConfigAlt()
		{
			return new HttpPromiseCallbackArg<CEFConfig>(
				await CEFService.RequestAsync<GetManufacturerAdminCEFConfigAlt, CEFConfig>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallback> GetStoreAdminCEFConfig()
		{
			await CEFService.RequestAsync(new GetStoreAdminCEFConfig()).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFConfig>> GetStoreAdminCEFConfigAlt()
		{
			return new HttpPromiseCallbackArg<CEFConfig>(
				await CEFService.RequestAsync<GetStoreAdminCEFConfigAlt, CEFConfig>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallback> GetStoreFrontCEFConfig()
		{
			await CEFService.RequestAsync(new GetStoreFrontCEFConfig()).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<string>> GetStoreFrontCEFConfigAlt()
		{
			return new HttpPromiseCallbackArg<string>(
				await CEFService.RequestAsync<GetStoreFrontCEFConfigAlt, string>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UpdateAppSettings(
			UpdateAppSettings request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UpdateAppSettings, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallback> GetVendorAdminCEFConfig()
		{
			await CEFService.RequestAsync(new GetVendorAdminCEFConfig()).ConfigureAwait(false);
			return new HttpPromiseCallback();
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFConfig>> GetVendorAdminCEFConfigAlt()
		{
			return new HttpPromiseCallbackArg<CEFConfig>(
				await CEFService.RequestAsync<GetVendorAdminCEFConfigAlt, CEFConfig>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateManufacturer(
			CreateManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || MANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<ManufacturerModel>>> GetCurrentManufacturerAdministration()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<ManufacturerModel>>(
				await CEFService.RequestAsync<GetCurrentManufacturerAdministration, CEFActionResponse<ManufacturerModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateManufacturerByID(
			DeactivateManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteManufacturerByID(
			DeleteManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckManufacturerExistsByID(
			CheckManufacturerExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckManufacturerExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckManufacturerExistsByKey(
			CheckManufacturerExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckManufacturerExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckManufacturerExistsByName(
			CheckManufacturerExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckManufacturerExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerModel>> GetManufacturerByID(
			GetManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerModel>(
				await CEFService.RequestAsync<GetManufacturerByID, ManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateManufacturerByID(
			ReactivateManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || MANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateManufacturer(
			UpdateManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearManufacturerImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearManufacturerImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateManufacturerImage(
			CreateManufacturerImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateManufacturerImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateManufacturerImageByID(
			DeactivateManufacturerImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateManufacturerImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteManufacturerImageByID(
			DeleteManufacturerImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteManufacturerImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerImageModel>> GetManufacturerImageByID(
			GetManufacturerImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerImageModel>(
				await CEFService.RequestAsync<GetManufacturerImageByID, ManufacturerImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateManufacturerImageByID(
			ReactivateManufacturerImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateManufacturerImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateManufacturerImage(
			UpdateManufacturerImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateManufacturerImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerImagePagedResults>> GetManufacturerImages(
			GetManufacturerImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerImagePagedResults>(
				await CEFService.RequestAsync<GetManufacturerImages, ManufacturerImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearManufacturerImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearManufacturerImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateManufacturerImageType(
			CreateManufacturerImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateManufacturerImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateManufacturerImageTypeByID(
			DeactivateManufacturerImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateManufacturerImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteManufacturerImageTypeByID(
			DeleteManufacturerImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteManufacturerImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetManufacturerImageTypeByID(
			GetManufacturerImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetManufacturerImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateManufacturerImageTypeByID(
			ReactivateManufacturerImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateManufacturerImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateManufacturerImageType(
			UpdateManufacturerImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateManufacturerImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerImageTypePagedResults>> GetManufacturerImageTypes(
			GetManufacturerImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerImageTypePagedResults>(
				await CEFService.RequestAsync<GetManufacturerImageTypes, ManufacturerImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearManufacturerProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearManufacturerProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateManufacturerProduct(
			CreateManufacturerProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateManufacturerProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateManufacturerProductByID(
			DeactivateManufacturerProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateManufacturerProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteManufacturerProductByID(
			DeleteManufacturerProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteManufacturerProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerProductModel>> GetManufacturerProductByID(
			GetManufacturerProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerProductModel>(
				await CEFService.RequestAsync<GetManufacturerProductByID, ManufacturerProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateManufacturerProductByID(
			ReactivateManufacturerProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateManufacturerProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateManufacturerProduct(
			UpdateManufacturerProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateManufacturerProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerProductPagedResults>> GetManufacturerProducts(
			GetManufacturerProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerProductPagedResults>(
				await CEFService.RequestAsync<GetManufacturerProducts, ManufacturerProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerPagedResults>> GetManufacturers(
			GetManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerPagedResults>(
				await CEFService.RequestAsync<GetManufacturers, ManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearManufacturerTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearManufacturerTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateManufacturerType(
			CreateManufacturerType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateManufacturerType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateManufacturerTypeByID(
			DeactivateManufacturerTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateManufacturerTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteManufacturerTypeByID(
			DeleteManufacturerTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteManufacturerTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetManufacturerTypeByID(
			GetManufacturerTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetManufacturerTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateManufacturerTypeByID(
			ReactivateManufacturerTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateManufacturerTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateManufacturerType(
			UpdateManufacturerType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateManufacturerType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerTypePagedResults>> GetManufacturerTypes(
			GetManufacturerTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerTypePagedResults>(
				await CEFService.RequestAsync<GetManufacturerTypes, ManufacturerTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoredFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoredFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoredFile(
			CreateStoredFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoredFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoredFileByID(
			DeactivateStoredFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoredFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoredFileByID(
			DeleteStoredFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoredFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoredFileModel>> GetStoredFileByID(
			GetStoredFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoredFileModel>(
				await CEFService.RequestAsync<GetStoredFileByID, StoredFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoredFileByID(
			ReactivateStoredFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoredFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoredFile(
			UpdateStoredFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoredFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoredFilePagedResults>> GetStoredFiles(
			GetStoredFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoredFilePagedResults>(
				await CEFService.RequestAsync<GetStoredFiles, StoredFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<IUploadResponse>> UploadStoredFile(
			UploadStoredFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<IUploadResponse>(
				await CEFService.RequestAsync<UploadStoredFile, IUploadResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<IUploadResponse>> GetUploadStoredFileResults(
			GetUploadStoredFileResults request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<IUploadResponse>(
				await CEFService.RequestAsync<GetUploadStoredFileResults, IUploadResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<string>> GetStoredFileUrl(
			GetStoredFileUrl request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<string>(
				await CEFService.RequestAsync<GetStoredFileUrl, string>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearConversationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearConversationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateConversation(
			CreateConversation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateConversation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateConversationByID(
			DeactivateConversationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateConversationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteConversationByID(
			DeleteConversationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteConversationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> EndConversation(
			EndConversation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<EndConversation, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ConversationModel>> GetConversationByID(
			GetConversationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ConversationModel>(
				await CEFService.RequestAsync<GetConversationByID, ConversationModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<MessageModel>>> PostMessageToConversation(
			PostMessageToConversation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<MessageModel>>(
				await CEFService.RequestAsync<PostMessageToConversation, CEFActionResponse<MessageModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateConversationByID(
			ReactivateConversationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateConversationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetConversationToCopy(
			SetConversationToCopy request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetConversationToCopy, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateConversation(
			UpdateConversation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateConversation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ConversationPagedResults>> GetConversations(
			GetConversations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ConversationPagedResults>(
				await CEFService.RequestAsync<GetConversations, ConversationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearConversationUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearConversationUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateConversationUser(
			CreateConversationUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateConversationUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetConversationUserTypingStateForCurrentUser(
			SetConversationUserTypingStateForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetConversationUserTypingStateForCurrentUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateConversationUserByID(
			DeactivateConversationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateConversationUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteConversationUserByID(
			DeleteConversationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteConversationUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<UserTypingStatus>>>> GetOtherConversationUsersTypingStatuses()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<List<UserTypingStatus>>>(
				await CEFService.RequestAsync<GetOtherConversationUsersTypingStatuses, CEFActionResponse<List<UserTypingStatus>>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ConversationUserModel>> GetConversationUserByID(
			GetConversationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ConversationUserModel>(
				await CEFService.RequestAsync<GetConversationUserByID, ConversationUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateConversationUserByID(
			ReactivateConversationUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateConversationUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateConversationUser(
			UpdateConversationUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateConversationUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ConversationUserPagedResults>> GetConversationUsers(
			GetConversationUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ConversationUserPagedResults>(
				await CEFService.RequestAsync<GetConversationUsers, ConversationUserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ConversationPagedResults>> GetConversationHeadersForCurrentUser(
			GetConversationHeadersForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ConversationPagedResults>(
				await CEFService.RequestAsync<GetConversationHeadersForCurrentUser, ConversationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessagePagedResults>> GetMessagesForCurrentUser(
			GetMessagesForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessagePagedResults>(
				await CEFService.RequestAsync<GetMessagesForCurrentUser, MessagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, List<MessageModel>>>>> GetMessagesForActiveConversationsForCurrentUser(
			GetMessagesForActiveConversationsForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, List<MessageModel>>>>(
				await CEFService.RequestAsync<GetMessagesForActiveConversationsForCurrentUser, CEFActionResponse<Dictionary<int, List<MessageModel>>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, List<MessageModel>>>>> GetMessagesForEndedConversationsForCurrentUser(
			GetMessagesForEndedConversationsForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, List<MessageModel>>>>(
				await CEFService.RequestAsync<GetMessagesForEndedConversationsForCurrentUser, CEFActionResponse<Dictionary<int, List<MessageModel>>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessagePagedResults>> GetMessagesFromCurrentUser(
			GetMessagesFromCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessagePagedResults>(
				await CEFService.RequestAsync<GetMessagesFromCurrentUser, MessagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEmailQueueCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEmailQueueCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEmailQueue(
			CreateEmailQueue request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEmailQueue, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEmailQueueByID(
			DeactivateEmailQueueByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEmailQueueByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEmailQueueByID(
			DeleteEmailQueueByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEmailQueueByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailQueueModel>> GetEmailQueueByID(
			GetEmailQueueByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailQueueModel>(
				await CEFService.RequestAsync<GetEmailQueueByID, EmailQueueModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEmailQueueByID(
			ReactivateEmailQueueByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEmailQueueByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEmailQueue(
			UpdateEmailQueue request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEmailQueue, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEmailQueueAttachmentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEmailQueueAttachmentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEmailQueueAttachment(
			CreateEmailQueueAttachment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEmailQueueAttachment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEmailQueueAttachmentByID(
			DeactivateEmailQueueAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEmailQueueAttachmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEmailQueueAttachmentByID(
			DeleteEmailQueueAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEmailQueueAttachmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailQueueAttachmentModel>> GetEmailQueueAttachmentByID(
			GetEmailQueueAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailQueueAttachmentModel>(
				await CEFService.RequestAsync<GetEmailQueueAttachmentByID, EmailQueueAttachmentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEmailQueueAttachmentByID(
			ReactivateEmailQueueAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEmailQueueAttachmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEmailQueueAttachment(
			UpdateEmailQueueAttachment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEmailQueueAttachment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailQueueAttachmentPagedResults>> GetEmailQueueAttachments(
			GetEmailQueueAttachments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailQueueAttachmentPagedResults>(
				await CEFService.RequestAsync<GetEmailQueueAttachments, EmailQueueAttachmentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailQueuePagedResults>> GetEmailQueues(
			GetEmailQueues request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailQueuePagedResults>(
				await CEFService.RequestAsync<GetEmailQueues, EmailQueuePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEmailStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEmailStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEmailStatus(
			CreateEmailStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEmailStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEmailStatusByID(
			DeactivateEmailStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEmailStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEmailStatusByID(
			DeleteEmailStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEmailStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetEmailStatusByID(
			GetEmailStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetEmailStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEmailStatusByID(
			ReactivateEmailStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEmailStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEmailStatus(
			UpdateEmailStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEmailStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailStatusPagedResults>> GetEmailStatuses(
			GetEmailStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailStatusPagedResults>(
				await CEFService.RequestAsync<GetEmailStatuses, EmailStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEmailTemplateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEmailTemplateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEmailTemplate(
			CreateEmailTemplate request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEmailTemplate, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEmailTemplateByID(
			DeactivateEmailTemplateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEmailTemplateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEmailTemplateByID(
			DeleteEmailTemplateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEmailTemplateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailTemplateModel>> GetEmailTemplateByID(
			GetEmailTemplateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailTemplateModel>(
				await CEFService.RequestAsync<GetEmailTemplateByID, EmailTemplateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEmailTemplateByID(
			ReactivateEmailTemplateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEmailTemplateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEmailTemplate(
			UpdateEmailTemplate request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEmailTemplate, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailTemplatePagedResults>> GetEmailTemplates(
			GetEmailTemplates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailTemplatePagedResults>(
				await CEFService.RequestAsync<GetEmailTemplates, EmailTemplatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEmailTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEmailTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEmailType(
			CreateEmailType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEmailType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEmailTypeByID(
			DeactivateEmailTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEmailTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEmailTypeByID(
			DeleteEmailTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEmailTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetEmailTypeByID(
			GetEmailTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetEmailTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEmailTypeByID(
			ReactivateEmailTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEmailTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEmailType(
			UpdateEmailType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEmailType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EmailTypePagedResults>> GetEmailTypes(
			GetEmailTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EmailTypePagedResults>(
				await CEFService.RequestAsync<GetEmailTypes, EmailTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMessageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMessageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMessage(
			CreateMessage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMessage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMessageByID(
			DeactivateMessageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMessageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMessageByID(
			DeleteMessageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMessageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessageModel>> GetMessageByID(
			GetMessageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessageModel>(
				await CEFService.RequestAsync<GetMessageByID, MessageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMessageByID(
			ReactivateMessageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMessageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMessage(
			UpdateMessage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMessage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMessageAttachmentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMessageAttachmentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMessageAttachment(
			CreateMessageAttachment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMessageAttachment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMessageAttachmentByID(
			DeactivateMessageAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMessageAttachmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMessageAttachmentByID(
			DeleteMessageAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMessageAttachmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessageAttachmentModel>> GetMessageAttachmentByID(
			GetMessageAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessageAttachmentModel>(
				await CEFService.RequestAsync<GetMessageAttachmentByID, MessageAttachmentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMessageAttachmentByID(
			ReactivateMessageAttachmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMessageAttachmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMessageAttachment(
			UpdateMessageAttachment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMessageAttachment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessageAttachmentPagedResults>> GetMessageAttachments(
			GetMessageAttachments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessageAttachmentPagedResults>(
				await CEFService.RequestAsync<GetMessageAttachments, MessageAttachmentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMessageRecipientCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMessageRecipientCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMessageRecipient(
			CreateMessageRecipient request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMessageRecipient, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMessageRecipientByID(
			DeactivateMessageRecipientByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMessageRecipientByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMessageRecipientByID(
			DeleteMessageRecipientByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMessageRecipientByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessageRecipientModel>> GetMessageRecipientByID(
			GetMessageRecipientByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessageRecipientModel>(
				await CEFService.RequestAsync<GetMessageRecipientByID, MessageRecipientModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMessageRecipientByID(
			ReactivateMessageRecipientByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMessageRecipientByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMessageRecipient(
			UpdateMessageRecipient request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMessageRecipient, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessageRecipientPagedResults>> GetMessageRecipients(
			GetMessageRecipients request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessageRecipientPagedResults>(
				await CEFService.RequestAsync<GetMessageRecipients, MessageRecipientPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MessagePagedResults>> GetMessages(
			GetMessages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MessagePagedResults>(
				await CEFService.RequestAsync<GetMessages, MessagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductNotificationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductNotificationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductNotification(
			CreateProductNotification request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductNotification, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductNotificationByID(
			DeactivateProductNotificationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductNotificationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductNotificationByID(
			DeleteProductNotificationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductNotificationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductNotificationModel>> GetProductNotificationByID(
			GetProductNotificationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductNotificationModel>(
				await CEFService.RequestAsync<GetProductNotificationByID, ProductNotificationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductNotificationByID(
			ReactivateProductNotificationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductNotificationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductNotification(
			UpdateProductNotification request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductNotification, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductNotificationPagedResults>> GetProductNotifications(
			GetProductNotifications request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductNotificationPagedResults>(
				await CEFService.RequestAsync<GetProductNotifications, ProductNotificationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPagedResults>> AdminGetSalesOrdersForPortal(
			AdminGetSalesOrdersForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPagedResults>(
				await CEFService.RequestAsync<AdminGetSalesOrdersForPortal, SalesOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPagedResults>> GetCurrentAccountSalesOrders(
			GetCurrentAccountSalesOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPagedResults>(
				await CEFService.RequestAsync<GetCurrentAccountSalesOrders, SalesOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPagedResults>> GetCurrentStoreSalesOrders(
			GetCurrentStoreSalesOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPagedResults>(
				await CEFService.RequestAsync<GetCurrentStoreSalesOrders, SalesOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPagedResults>> GetCurrentUserSalesOrders(
			GetCurrentUserSalesOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPagedResults>(
				await CEFService.RequestAsync<GetCurrentUserSalesOrders, SalesOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AddPaymentToSalesOrder(
			AddPaymentToSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AddPaymentToSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> BackorderSalesOrder(
			BackorderSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<BackorderSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CapturePaymentForSalesOrder(
			CapturePaymentForSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CapturePaymentForSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CompleteSalesOrder(
			CompleteSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CompleteSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ConfirmSalesOrder(
			ConfirmSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ConfirmSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrder(
			CreateSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>>>>> CreatePickTicketForSalesOrder(
			CreatePickTicketForSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>>>>(
				await CEFService.RequestAsync<CreatePickTicketForSalesOrder, CEFActionResponse<List<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderByID(
			DeactivateSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderByID(
			DeleteSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionModel>> GetSubscriptionBySalesOrderID(
			GetSubscriptionBySalesOrderID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionModel>(
				await CEFService.RequestAsync<GetSubscriptionBySalesOrderID, SubscriptionModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionHistoryPagedResults>> GetSubscriptionHistoryBySubscriptionID(
			GetSubscriptionHistoryBySubscriptionID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionHistoryPagedResults>(
				await CEFService.RequestAsync<GetSubscriptionHistoryBySubscriptionID, SubscriptionHistoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<PurchaseOrderModel>>> DropShipSalesOrder(
			DropShipSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<PurchaseOrderModel>>(
				await CEFService.RequestAsync<DropShipSalesOrder, CEFActionResponse<PurchaseOrderModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> HoldSalesOrder(
			HoldSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<HoldSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderModel>> GetSalesOrderByID(
			GetSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderModel>(
				await CEFService.RequestAsync<GetSalesOrderByID, SalesOrderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> MarkSalesOrderItemsInStock(
			MarkSalesOrderItemsInStock request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<MarkSalesOrderItemsInStock, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> MarkSalesOrderItemsNotInStock(
			MarkSalesOrderItemsNotInStock request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<MarkSalesOrderItemsNotInStock, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> PendingSalesOrder(
			PendingSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<PendingSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UpdateStatusOfSalesOrder(
			UpdateStatusOfSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UpdateStatusOfSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderByID(
			ReactivateSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReadyForPickupSalesOrder(
			ReadyForPickupSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReadyForPickupSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SendSalesOrderConfirmationEmail(
			SendSalesOrderConfirmationEmail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SendSalesOrderConfirmationEmail, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ShipSalesOrder(
			ShipSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ShipSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrder(
			UpdateSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> VoidSalesOrder(
			VoidSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<VoidSalesOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderContact(
			CreateSalesOrderContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderContactByID(
			DeactivateSalesOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderContactByID(
			DeleteSalesOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderContactModel>> GetSalesOrderContactByID(
			GetSalesOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderContactModel>(
				await CEFService.RequestAsync<GetSalesOrderContactByID, SalesOrderContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderContactByID(
			ReactivateSalesOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderContact(
			UpdateSalesOrderContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderContactPagedResults>> GetSalesOrderContacts(
			GetSalesOrderContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderContactPagedResults>(
				await CEFService.RequestAsync<GetSalesOrderContacts, SalesOrderContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderEvent(
			CreateSalesOrderEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderEventByID(
			DeactivateSalesOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderEventByID(
			DeleteSalesOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderEventModel>> GetSalesOrderEventByID(
			GetSalesOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderEventModel>(
				await CEFService.RequestAsync<GetSalesOrderEventByID, SalesOrderEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderEventByID(
			ReactivateSalesOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderEvent(
			UpdateSalesOrderEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderEventPagedResults>> GetSalesOrderEvents(
			GetSalesOrderEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderEventPagedResults>(
				await CEFService.RequestAsync<GetSalesOrderEvents, SalesOrderEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderEventType(
			CreateSalesOrderEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderEventTypeByID(
			DeactivateSalesOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderEventTypeByID(
			DeleteSalesOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesOrderEventTypeByID(
			GetSalesOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesOrderEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderEventTypeByID(
			ReactivateSalesOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderEventType(
			UpdateSalesOrderEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderEventTypePagedResults>> GetSalesOrderEventTypes(
			GetSalesOrderEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderEventTypePagedResults>(
				await CEFService.RequestAsync<GetSalesOrderEventTypes, SalesOrderEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderFile(
			CreateSalesOrderFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderFileByID(
			DeactivateSalesOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderFileByID(
			DeleteSalesOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderFileModel>> GetSalesOrderFileByID(
			GetSalesOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderFileModel>(
				await CEFService.RequestAsync<GetSalesOrderFileByID, SalesOrderFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderFileByID(
			ReactivateSalesOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderFile(
			UpdateSalesOrderFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderFilePagedResults>> GetSalesOrderFiles(
			GetSalesOrderFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderFilePagedResults>(
				await CEFService.RequestAsync<GetSalesOrderFiles, SalesOrderFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderModel>> EditSalesOrder(
			EditSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderModel>(
				await CEFService.RequestAsync<EditSalesOrder, SalesOrderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderItemCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderItemCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderItem(
			CreateSalesOrderItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderItemByID(
			DeactivateSalesOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderItemByID(
			DeleteSalesOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>>> GetSalesOrderItemByID(
			GetSalesOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>>(
				await CEFService.RequestAsync<GetSalesOrderItemByID, SalesItemBaseModel<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderItemByID(
			ReactivateSalesOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderItem(
			UpdateSalesOrderItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderItemPagedResults>> GetSalesOrderItems(
			GetSalesOrderItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderItemPagedResults>(
				await CEFService.RequestAsync<GetSalesOrderItems, SalesOrderItemPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderItemTargetCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderItemTargetCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderItemTarget(
			CreateSalesOrderItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderItemTargetByID(
			DeactivateSalesOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderItemTargetByID(
			DeleteSalesOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetBaseModel>> GetSalesOrderItemTargetByID(
			GetSalesOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetBaseModel>(
				await CEFService.RequestAsync<GetSalesOrderItemTargetByID, SalesItemTargetBaseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderItemTargetByID(
			ReactivateSalesOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderItemTarget(
			UpdateSalesOrderItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderItemTargetPagedResults>> GetSalesOrderItemTargets(
			GetSalesOrderItemTargets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderItemTargetPagedResults>(
				await CEFService.RequestAsync<GetSalesOrderItemTargets, SalesOrderItemTargetPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPagedResults>> GetSalesOrders(
			GetSalesOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPagedResults>(
				await CEFService.RequestAsync<GetSalesOrders, SalesOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderStateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderStateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderState(
			CreateSalesOrderState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderStateByID(
			DeactivateSalesOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderStateByID(
			DeleteSalesOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderStateExistsByDisplayName(
			CheckSalesOrderStateExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderStateExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderStateExistsByKey(
			CheckSalesOrderStateExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderStateExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderStateExistsByName(
			CheckSalesOrderStateExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderStateExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StateModel>> GetSalesOrderStateByID(
			GetSalesOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StateModel>(
				await CEFService.RequestAsync<GetSalesOrderStateByID, StateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderStateByID(
			ReactivateSalesOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderState(
			UpdateSalesOrderState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderStatePagedResults>> GetSalesOrderStates(
			GetSalesOrderStates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderStatePagedResults>(
				await CEFService.RequestAsync<GetSalesOrderStates, SalesOrderStatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderStatus(
			CreateSalesOrderStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderStatusByID(
			DeactivateSalesOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderStatusByID(
			DeleteSalesOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderStatusExistsByDisplayName(
			CheckSalesOrderStatusExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderStatusExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderStatusExistsByKey(
			CheckSalesOrderStatusExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderStatusExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderStatusExistsByName(
			CheckSalesOrderStatusExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderStatusExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetSalesOrderStatusByID(
			GetSalesOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetSalesOrderStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderStatusByID(
			ReactivateSalesOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderStatus(
			UpdateSalesOrderStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderStatusPagedResults>> GetSalesOrderStatuses(
			GetSalesOrderStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderStatusPagedResults>(
				await CEFService.RequestAsync<GetSalesOrderStatuses, SalesOrderStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderType(
			CreateSalesOrderType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderTypeByID(
			DeactivateSalesOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderTypeByID(
			DeleteSalesOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderTypeExistsByDisplayName(
			CheckSalesOrderTypeExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderTypeExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderTypeExistsByKey(
			CheckSalesOrderTypeExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderTypeExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesOrderTypeExistsByName(
			CheckSalesOrderTypeExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesOrderTypeExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesOrderTypeByID(
			GetSalesOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesOrderTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderTypeByID(
			ReactivateSalesOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderType(
			UpdateSalesOrderType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderTypePagedResults>> GetSalesOrderTypes(
			GetSalesOrderTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderTypePagedResults>(
				await CEFService.RequestAsync<GetSalesOrderTypes, SalesOrderTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderModel>> GetSecureSalesOrder(
			GetSecureSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderModel>(
				await CEFService.RequestAsync<GetSecureSalesOrder, SalesOrderModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AssignPayoneerAccountUserForCurrentStore()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AssignPayoneerAccountUserForCurrentStore, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> CreateAPayoneerAccountForCurrentStore()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<CreateAPayoneerAccountForCurrentStore, CEFActionResponse<string>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> GetAuthedURLForBuyerToSetUpPaymentAccounts()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<GetAuthedURLForBuyerToSetUpPaymentAccounts, CEFActionResponse<string>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> GetAuthedURLForStoreOwnerToSetUpPayoutAccountsForCurrentStore()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<GetAuthedURLForStoreOwnerToSetUpPayoutAccountsForCurrentStore, CEFActionResponse<string>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AssignPayoneerAccountUserForCurrentUser()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AssignPayoneerAccountUserForCurrentUser, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> CreateAPayoneerAccountForCurrentUser()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<CreateAPayoneerAccountForCurrentUser, CEFActionResponse<string>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionPagedResults>> GetCurrentUserSubscriptions(
			GetCurrentUserSubscriptions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionPagedResults>(
				await CEFService.RequestAsync<GetCurrentUserSubscriptions, SubscriptionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionPagedResults>> ViewOnDemandSubscriptions(
			ViewOnDemandSubscriptions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionPagedResults>(
				await CEFService.RequestAsync<ViewOnDemandSubscriptions, SubscriptionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RefillOnDemandSubscription(
			RefillOnDemandSubscription request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RefillOnDemandSubscription, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> GetPaymentInstructionsUrlForEscrowOrder(
			GetPaymentInstructionsUrlForEscrowOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<GetPaymentInstructionsUrlForEscrowOrder, CEFActionResponse<string>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> GetPaymentsProviderAuthenticationToken(
			GetPaymentsProviderAuthenticationToken request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<GetPaymentsProviderAuthenticationToken, CEFActionResponse<string>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Clarity.Ecommerce.Interfaces.Providers.Payments.ITransactionResponse>>> GetPaymentTransactionReport(
			GetPaymentTransactionReport request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Clarity.Ecommerce.Interfaces.Providers.Payments.ITransactionResponse>>(
				await CEFService.RequestAsync<GetPaymentTransactionReport, CEFActionResponse<Clarity.Ecommerce.Interfaces.Providers.Payments.ITransactionResponse>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> GetAuthedURLForStoreOwnerToAddATrackingNumberToTheEscrowOrder(
			GetAuthedURLForStoreOwnerToAddATrackingNumberToTheEscrowOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<GetAuthedURLForStoreOwnerToAddATrackingNumberToTheEscrowOrder, CEFActionResponse<string>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<string>>> GetAuthedURLToReleaseFundsForEscrowOrder(
			GetAuthedURLToReleaseFundsForEscrowOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<string>>(
				await CEFService.RequestAsync<GetAuthedURLToReleaseFundsForEscrowOrder, CEFActionResponse<string>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMembershipCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMembershipCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMembership(
			CreateMembership request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMembership, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMembershipByID(
			DeactivateMembershipByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMembershipByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMembershipByID(
			DeleteMembershipByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMembershipByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipModel>> GetMembershipByID(
			GetMembershipByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipModel>(
				await CEFService.RequestAsync<GetMembershipByID, MembershipModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMembershipByID(
			ReactivateMembershipByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMembershipByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMembership(
			UpdateMembership request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMembership, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMembershipAdZoneAccessCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMembershipAdZoneAccessCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMembershipAdZoneAccess(
			CreateMembershipAdZoneAccess request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMembershipAdZoneAccess, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMembershipAdZoneAccessByID(
			DeactivateMembershipAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMembershipAdZoneAccessByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMembershipAdZoneAccessByID(
			DeleteMembershipAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMembershipAdZoneAccessByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipAdZoneAccessModel>> GetMembershipAdZoneAccessByID(
			GetMembershipAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipAdZoneAccessModel>(
				await CEFService.RequestAsync<GetMembershipAdZoneAccessByID, MembershipAdZoneAccessModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMembershipAdZoneAccessByID(
			ReactivateMembershipAdZoneAccessByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMembershipAdZoneAccessByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMembershipAdZoneAccess(
			UpdateMembershipAdZoneAccess request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMembershipAdZoneAccess, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMembershipAdZoneAccessByLevelCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMembershipAdZoneAccessByLevelCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMembershipAdZoneAccessByLevel(
			CreateMembershipAdZoneAccessByLevel request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMembershipAdZoneAccessByLevel, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMembershipAdZoneAccessByLevelByID(
			DeactivateMembershipAdZoneAccessByLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMembershipAdZoneAccessByLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMembershipAdZoneAccessByLevelByID(
			DeleteMembershipAdZoneAccessByLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMembershipAdZoneAccessByLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipAdZoneAccessByLevelModel>> GetMembershipAdZoneAccessByLevelByID(
			GetMembershipAdZoneAccessByLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipAdZoneAccessByLevelModel>(
				await CEFService.RequestAsync<GetMembershipAdZoneAccessByLevelByID, MembershipAdZoneAccessByLevelModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMembershipAdZoneAccessByLevelByID(
			ReactivateMembershipAdZoneAccessByLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMembershipAdZoneAccessByLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMembershipAdZoneAccessByLevel(
			UpdateMembershipAdZoneAccessByLevel request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMembershipAdZoneAccessByLevel, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipAdZoneAccessByLevelPagedResults>> GetMembershipAdZoneAccessByLevels(
			GetMembershipAdZoneAccessByLevels request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipAdZoneAccessByLevelPagedResults>(
				await CEFService.RequestAsync<GetMembershipAdZoneAccessByLevels, MembershipAdZoneAccessByLevelPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipAdZoneAccessPagedResults>> GetMembershipAdZoneAccesses(
			GetMembershipAdZoneAccesses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipAdZoneAccessPagedResults>(
				await CEFService.RequestAsync<GetMembershipAdZoneAccesses, MembershipAdZoneAccessPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMembershipLevelCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMembershipLevelCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMembershipLevel(
			CreateMembershipLevel request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMembershipLevel, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMembershipLevelByID(
			DeactivateMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMembershipLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMembershipLevelByID(
			DeleteMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMembershipLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipLevelModel>> GetMembershipLevelByID(
			GetMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipLevelModel>(
				await CEFService.RequestAsync<GetMembershipLevelByID, MembershipLevelModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMembershipLevelByID(
			ReactivateMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMembershipLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMembershipLevel(
			UpdateMembershipLevel request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMembershipLevel, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipLevelPagedResults>> GetMembershipLevels(
			GetMembershipLevels request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipLevelPagedResults>(
				await CEFService.RequestAsync<GetMembershipLevels, MembershipLevelPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearMembershipRepeatTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearMembershipRepeatTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateMembershipRepeatType(
			CreateMembershipRepeatType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateMembershipRepeatType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateMembershipRepeatTypeByID(
			DeactivateMembershipRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateMembershipRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteMembershipRepeatTypeByID(
			DeleteMembershipRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteMembershipRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipRepeatTypeModel>> GetMembershipRepeatTypeByID(
			GetMembershipRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipRepeatTypeModel>(
				await CEFService.RequestAsync<GetMembershipRepeatTypeByID, MembershipRepeatTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateMembershipRepeatTypeByID(
			ReactivateMembershipRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateMembershipRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateMembershipRepeatType(
			UpdateMembershipRepeatType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateMembershipRepeatType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipRepeatTypePagedResults>> GetMembershipRepeatTypes(
			GetMembershipRepeatTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipRepeatTypePagedResults>(
				await CEFService.RequestAsync<GetMembershipRepeatTypes, MembershipRepeatTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<MembershipPagedResults>> GetMemberships(
			GetMemberships request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<MembershipPagedResults>(
				await CEFService.RequestAsync<GetMemberships, MembershipPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPaymentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPaymentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePayment(
			CreatePayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePaymentByID(
			DeactivatePaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePaymentByID(
			DeletePaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PaymentModel>> GetPaymentByID(
			GetPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PaymentModel>(
				await CEFService.RequestAsync<GetPaymentByID, PaymentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePaymentByID(
			ReactivatePaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePayment(
			UpdatePayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPaymentMethodCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPaymentMethodCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePaymentMethod(
			CreatePaymentMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePaymentMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePaymentMethodByID(
			DeactivatePaymentMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePaymentMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePaymentMethodByID(
			DeletePaymentMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePaymentMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PaymentMethodModel>> GetPaymentMethodByID(
			GetPaymentMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PaymentMethodModel>(
				await CEFService.RequestAsync<GetPaymentMethodByID, PaymentMethodModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePaymentMethodByID(
			ReactivatePaymentMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePaymentMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePaymentMethod(
			UpdatePaymentMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePaymentMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PaymentMethodPagedResults>> GetPaymentMethods(
			GetPaymentMethods request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PaymentMethodPagedResults>(
				await CEFService.RequestAsync<GetPaymentMethods, PaymentMethodPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PaymentPagedResults>> GetPayments(
			GetPayments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PaymentPagedResults>(
				await CEFService.RequestAsync<GetPayments, PaymentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPaymentStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPaymentStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePaymentStatus(
			CreatePaymentStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePaymentStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePaymentStatusByID(
			DeactivatePaymentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePaymentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePaymentStatusByID(
			DeletePaymentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePaymentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetPaymentStatusByID(
			GetPaymentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetPaymentStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePaymentStatusByID(
			ReactivatePaymentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePaymentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePaymentStatus(
			UpdatePaymentStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePaymentStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PaymentStatusPagedResults>> GetPaymentStatuses(
			GetPaymentStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PaymentStatusPagedResults>(
				await CEFService.RequestAsync<GetPaymentStatuses, PaymentStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPaymentTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPaymentTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePaymentType(
			CreatePaymentType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePaymentType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePaymentTypeByID(
			DeactivatePaymentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePaymentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePaymentTypeByID(
			DeletePaymentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePaymentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetPaymentTypeByID(
			GetPaymentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetPaymentTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePaymentTypeByID(
			ReactivatePaymentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePaymentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePaymentType(
			UpdatePaymentType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePaymentType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PaymentTypePagedResults>> GetPaymentTypes(
			GetPaymentTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PaymentTypePagedResults>(
				await CEFService.RequestAsync<GetPaymentTypes, PaymentTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRepeatTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRepeatTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRepeatType(
			CreateRepeatType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRepeatType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRepeatTypeByID(
			DeactivateRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRepeatTypeByID(
			DeleteRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RepeatTypeModel>> GetRepeatTypeByID(
			GetRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RepeatTypeModel>(
				await CEFService.RequestAsync<GetRepeatTypeByID, RepeatTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRepeatTypeByID(
			ReactivateRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRepeatType(
			UpdateRepeatType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRepeatType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RepeatTypePagedResults>> GetRepeatTypes(
			GetRepeatTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RepeatTypePagedResults>(
				await CEFService.RequestAsync<GetRepeatTypes, RepeatTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesInvoicePaymentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesInvoicePaymentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesInvoicePayment(
			CreateSalesInvoicePayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesInvoicePayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesInvoicePaymentByID(
			DeactivateSalesInvoicePaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesInvoicePaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesInvoicePaymentByID(
			DeleteSalesInvoicePaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesInvoicePaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoicePaymentModel>> GetSalesInvoicePaymentByID(
			GetSalesInvoicePaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoicePaymentModel>(
				await CEFService.RequestAsync<GetSalesInvoicePaymentByID, SalesInvoicePaymentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesInvoicePaymentByID(
			ReactivateSalesInvoicePaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesInvoicePaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesInvoicePayment(
			UpdateSalesInvoicePayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesInvoicePayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoicePaymentPagedResults>> GetSalesInvoicePayments(
			GetSalesInvoicePayments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoicePaymentPagedResults>(
				await CEFService.RequestAsync<GetSalesInvoicePayments, SalesInvoicePaymentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderPaymentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderPaymentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderPayment(
			CreateSalesOrderPayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderPayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderPaymentByID(
			DeactivateSalesOrderPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderPaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderPaymentByID(
			DeleteSalesOrderPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderPaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPaymentModel>> GetSalesOrderPaymentByID(
			GetSalesOrderPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPaymentModel>(
				await CEFService.RequestAsync<GetSalesOrderPaymentByID, SalesOrderPaymentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderPaymentByID(
			ReactivateSalesOrderPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderPaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderPayment(
			UpdateSalesOrderPayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderPayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPaymentPagedResults>> GetSalesOrderPayments(
			GetSalesOrderPayments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPaymentPagedResults>(
				await CEFService.RequestAsync<GetSalesOrderPayments, SalesOrderPaymentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnPaymentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnPaymentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnPayment(
			CreateSalesReturnPayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnPayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnPaymentByID(
			DeactivateSalesReturnPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnPaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnPaymentByID(
			DeleteSalesReturnPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnPaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnPaymentModel>> GetSalesReturnPaymentByID(
			GetSalesReturnPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnPaymentModel>(
				await CEFService.RequestAsync<GetSalesReturnPaymentByID, SalesReturnPaymentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnPaymentByID(
			ReactivateSalesReturnPaymentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnPaymentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnPayment(
			UpdateSalesReturnPayment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnPayment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnPaymentPagedResults>> GetSalesReturnPayments(
			GetSalesReturnPayments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnPaymentPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnPayments, SalesReturnPaymentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSubscriptionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSubscriptionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSubscription(
			CreateSubscription request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSubscription, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSubscriptionByID(
			DeactivateSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSubscriptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSubscriptionByID(
			DeleteSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSubscriptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionModel>> GetSubscriptionByID(
			GetSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionModel>(
				await CEFService.RequestAsync<GetSubscriptionByID, SubscriptionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSubscriptionByID(
			ReactivateSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSubscriptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSubscription(
			UpdateSubscription request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSubscription, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionHistoryPagedResults>> GetSubscriptionHistories(
			GetSubscriptionHistories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionHistoryPagedResults>(
				await CEFService.RequestAsync<GetSubscriptionHistories, SubscriptionHistoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSubscriptionHistoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSubscriptionHistoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSubscriptionHistory(
			CreateSubscriptionHistory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSubscriptionHistory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSubscriptionHistoryByID(
			DeactivateSubscriptionHistoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSubscriptionHistoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSubscriptionHistoryByID(
			DeleteSubscriptionHistoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSubscriptionHistoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionHistoryModel>> GetSubscriptionHistoryByID(
			GetSubscriptionHistoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionHistoryModel>(
				await CEFService.RequestAsync<GetSubscriptionHistoryByID, SubscriptionHistoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSubscriptionHistoryByID(
			ReactivateSubscriptionHistoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSubscriptionHistoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSubscriptionHistory(
			UpdateSubscriptionHistory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSubscriptionHistory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionPagedResults>> GetSubscriptions(
			GetSubscriptions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionPagedResults>(
				await CEFService.RequestAsync<GetSubscriptions, SubscriptionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSubscriptionStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSubscriptionStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSubscriptionStatus(
			CreateSubscriptionStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSubscriptionStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSubscriptionStatusByID(
			DeactivateSubscriptionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSubscriptionStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSubscriptionStatusByID(
			DeleteSubscriptionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSubscriptionStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetSubscriptionStatusByID(
			GetSubscriptionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetSubscriptionStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSubscriptionStatusByID(
			ReactivateSubscriptionStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSubscriptionStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSubscriptionStatus(
			UpdateSubscriptionStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSubscriptionStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionStatusPagedResults>> GetSubscriptionStatuses(
			GetSubscriptionStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionStatusPagedResults>(
				await CEFService.RequestAsync<GetSubscriptionStatuses, SubscriptionStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSubscriptionTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSubscriptionTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSubscriptionType(
			CreateSubscriptionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSubscriptionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSubscriptionTypeByID(
			DeactivateSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSubscriptionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSubscriptionTypeByID(
			DeleteSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSubscriptionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionTypeModel>> GetSubscriptionTypeByID(
			GetSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionTypeModel>(
				await CEFService.RequestAsync<GetSubscriptionTypeByID, SubscriptionTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSubscriptionTypeByID(
			ReactivateSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSubscriptionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSubscriptionType(
			UpdateSubscriptionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSubscriptionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSubscriptionTypeRepeatTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSubscriptionTypeRepeatTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSubscriptionTypeRepeatType(
			CreateSubscriptionTypeRepeatType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSubscriptionTypeRepeatType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSubscriptionTypeRepeatTypeByID(
			DeactivateSubscriptionTypeRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSubscriptionTypeRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSubscriptionTypeRepeatTypeByID(
			DeleteSubscriptionTypeRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSubscriptionTypeRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionTypeRepeatTypeModel>> GetSubscriptionTypeRepeatTypeByID(
			GetSubscriptionTypeRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionTypeRepeatTypeModel>(
				await CEFService.RequestAsync<GetSubscriptionTypeRepeatTypeByID, SubscriptionTypeRepeatTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSubscriptionTypeRepeatTypeByID(
			ReactivateSubscriptionTypeRepeatTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSubscriptionTypeRepeatTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSubscriptionTypeRepeatType(
			UpdateSubscriptionTypeRepeatType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSubscriptionTypeRepeatType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionTypeRepeatTypePagedResults>> GetSubscriptionTypeRepeatTypes(
			GetSubscriptionTypeRepeatTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionTypeRepeatTypePagedResults>(
				await CEFService.RequestAsync<GetSubscriptionTypeRepeatTypes, SubscriptionTypeRepeatTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SubscriptionTypePagedResults>> GetSubscriptionTypes(
			GetSubscriptionTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SubscriptionTypePagedResults>(
				await CEFService.RequestAsync<GetSubscriptionTypes, SubscriptionTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearWalletCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearWalletCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateWallet(
			CreateWallet request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateWallet, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<WalletModel>>> GetCurrentUserWalletEntryByID(
			GetCurrentUserWalletEntryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<WalletModel>>(
				await CEFService.RequestAsync<GetCurrentUserWalletEntryByID, CEFActionResponse<WalletModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<WalletModel>>> CreateCurrentUserWalletEntry(
			CreateCurrentUserWalletEntry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<WalletModel>>(
				await CEFService.RequestAsync<CreateCurrentUserWalletEntry, CEFActionResponse<WalletModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCurrentUserWalletEntry(
			DeactivateCurrentUserWalletEntry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCurrentUserWalletEntry, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentUserMarkWalletEntryAsDefault(
			CurrentUserMarkWalletEntryAsDefault request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentUserMarkWalletEntryAsDefault, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<WalletModel>>> UpdateCurrentUserWalletEntry(
			UpdateCurrentUserWalletEntry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<WalletModel>>(
				await CEFService.RequestAsync<UpdateCurrentUserWalletEntry, CEFActionResponse<WalletModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<WalletModel>>>> GetCurrentUserWallet()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<List<WalletModel>>>(
				await CEFService.RequestAsync<GetCurrentUserWallet, CEFActionResponse<List<WalletModel>>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateWalletByID(
			DeactivateWalletByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateWalletByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteWalletByID(
			DeleteWalletByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteWalletByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<WalletModel>> GetWalletByID(
			GetWalletByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<WalletModel>(
				await CEFService.RequestAsync<GetWalletByID, WalletModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateWalletByID(
			ReactivateWalletByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateWalletByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateWallet(
			UpdateWallet request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateWallet, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<WalletModel>>> GetUserWalletEntryByIDAsCSR(
			GetUserWalletEntryByIDAsCSR request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<WalletModel>>(
				await CEFService.RequestAsync<GetUserWalletEntryByIDAsCSR, CEFActionResponse<WalletModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<WalletModel>>> CreateUserWalletEntryAsCSR(
			CreateUserWalletEntryAsCSR request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<WalletModel>>(
				await CEFService.RequestAsync<CreateUserWalletEntryAsCSR, CEFActionResponse<WalletModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateUserWalletEntryAsCSR(
			DeactivateUserWalletEntryAsCSR request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateUserWalletEntryAsCSR, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<WalletModel>>> UpdateUserWalletEntryAsCSR(
			UpdateUserWalletEntryAsCSR request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<WalletModel>>(
				await CEFService.RequestAsync<UpdateUserWalletEntryAsCSR, CEFActionResponse<WalletModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<WalletModel>>>> GetUserWalletAsCSR(
			GetUserWalletAsCSR request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<WalletModel>>>(
				await CEFService.RequestAsync<GetUserWalletAsCSR, CEFActionResponse<List<WalletModel>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<WalletModel>>>> GetUserWallet(
			GetUserWallet request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<WalletModel>>>(
				await CEFService.RequestAsync<GetUserWallet, CEFActionResponse<List<WalletModel>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<WalletPagedResults>> GetWallets(
			GetWallets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<WalletPagedResults>(
				await CEFService.RequestAsync<GetWallets, WalletPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearPriceCache()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearPriceCache, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPricePointCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPricePointCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePricePoint(
			CreatePricePoint request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePricePoint, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePricePointByID(
			DeactivatePricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePricePointByID(
			DeletePricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PricePointModel>> GetPricePointByID(
			GetPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PricePointModel>(
				await CEFService.RequestAsync<GetPricePointByID, PricePointModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePricePointByID(
			ReactivatePricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePricePoint(
			UpdatePricePoint request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePricePoint, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PricePointPagedResults>> GetPricePoints(
			GetPricePoints request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PricePointPagedResults>(
				await CEFService.RequestAsync<GetPricePoints, PricePointPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRoundingCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRoundingCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRounding(
			CreatePriceRounding request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRounding, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRoundingByID(
			DeactivatePriceRoundingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRoundingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRoundingByID(
			DeletePriceRoundingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRoundingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRoundingModel>> GetPriceRoundingByID(
			GetPriceRoundingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRoundingModel>(
				await CEFService.RequestAsync<GetPriceRoundingByID, PriceRoundingModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRoundingByID(
			ReactivatePriceRoundingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRoundingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRounding(
			UpdatePriceRounding request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRounding, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRoundingPagedResults>> GetPriceRoundings(
			GetPriceRoundings request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRoundingPagedResults>(
				await CEFService.RequestAsync<GetPriceRoundings, PriceRoundingPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRule(
			CreatePriceRule request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRule, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleByID(
			DeactivatePriceRuleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleByID(
			DeletePriceRuleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleModel>> GetPriceRuleByID(
			GetPriceRuleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleModel>(
				await CEFService.RequestAsync<GetPriceRuleByID, PriceRuleModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleByID(
			ReactivatePriceRuleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRule(
			UpdatePriceRule request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRule, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleAccount(
			CreatePriceRuleAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleAccountByID(
			DeactivatePriceRuleAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleAccountByID(
			DeletePriceRuleAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleAccountModel>> GetPriceRuleAccountByID(
			GetPriceRuleAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleAccountModel>(
				await CEFService.RequestAsync<GetPriceRuleAccountByID, PriceRuleAccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleAccountByID(
			ReactivatePriceRuleAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleAccount(
			UpdatePriceRuleAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleAccountPagedResults>> GetPriceRuleAccounts(
			GetPriceRuleAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleAccountPagedResults>(
				await CEFService.RequestAsync<GetPriceRuleAccounts, PriceRuleAccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleAccountTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleAccountTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleAccountType(
			CreatePriceRuleAccountType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleAccountType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleAccountTypeByID(
			DeactivatePriceRuleAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleAccountTypeByID(
			DeletePriceRuleAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleAccountTypeModel>> GetPriceRuleAccountTypeByID(
			GetPriceRuleAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleAccountTypeModel>(
				await CEFService.RequestAsync<GetPriceRuleAccountTypeByID, PriceRuleAccountTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleAccountTypeByID(
			ReactivatePriceRuleAccountTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleAccountTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleAccountType(
			UpdatePriceRuleAccountType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleAccountType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleAccountTypePagedResults>> GetPriceRuleAccountTypes(
			GetPriceRuleAccountTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleAccountTypePagedResults>(
				await CEFService.RequestAsync<GetPriceRuleAccountTypes, PriceRuleAccountTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleBrandCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleBrandCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleBrand(
			CreatePriceRuleBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleBrandByID(
			DeactivatePriceRuleBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleBrandByID(
			DeletePriceRuleBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleBrandModel>> GetPriceRuleBrandByID(
			GetPriceRuleBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleBrandModel>(
				await CEFService.RequestAsync<GetPriceRuleBrandByID, PriceRuleBrandModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleBrandByID(
			ReactivatePriceRuleBrandByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleBrandByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleBrand(
			UpdatePriceRuleBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleBrand, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleBrandPagedResults>> GetPriceRuleBrands(
			GetPriceRuleBrands request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleBrandPagedResults>(
				await CEFService.RequestAsync<GetPriceRuleBrands, PriceRuleBrandPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleCategoryPagedResults>> GetPriceRuleCategories(
			GetPriceRuleCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleCategoryPagedResults>(
				await CEFService.RequestAsync<GetPriceRuleCategories, PriceRuleCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleCategory(
			CreatePriceRuleCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleCategoryByID(
			DeactivatePriceRuleCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleCategoryByID(
			DeletePriceRuleCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleCategoryModel>> GetPriceRuleCategoryByID(
			GetPriceRuleCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleCategoryModel>(
				await CEFService.RequestAsync<GetPriceRuleCategoryByID, PriceRuleCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleCategoryByID(
			ReactivatePriceRuleCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleCategory(
			UpdatePriceRuleCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleCountryPagedResults>> GetPriceRuleCountries(
			GetPriceRuleCountries request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleCountryPagedResults>(
				await CEFService.RequestAsync<GetPriceRuleCountries, PriceRuleCountryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleCountryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleCountryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleCountry(
			CreatePriceRuleCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleCountryByID(
			DeactivatePriceRuleCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleCountryByID(
			DeletePriceRuleCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleCountryModel>> GetPriceRuleCountryByID(
			GetPriceRuleCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleCountryModel>(
				await CEFService.RequestAsync<GetPriceRuleCountryByID, PriceRuleCountryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleCountryByID(
			ReactivatePriceRuleCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleCountry(
			UpdatePriceRuleCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleFranchiseCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleFranchiseCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleFranchise(
			CreatePriceRuleFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleFranchiseByID(
			DeactivatePriceRuleFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleFranchiseByID(
			DeletePriceRuleFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleFranchiseModel>> GetPriceRuleFranchiseByID(
			GetPriceRuleFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleFranchiseModel>(
				await CEFService.RequestAsync<GetPriceRuleFranchiseByID, PriceRuleFranchiseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleFranchiseByID(
			ReactivatePriceRuleFranchiseByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleFranchiseByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleFranchise(
			UpdatePriceRuleFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleFranchise, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleFranchisePagedResults>> GetPriceRuleFranchises(
			GetPriceRuleFranchises request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleFranchisePagedResults>(
				await CEFService.RequestAsync<GetPriceRuleFranchises, PriceRuleFranchisePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleManufacturer(
			CreatePriceRuleManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleManufacturerByID(
			DeactivatePriceRuleManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleManufacturerByID(
			DeletePriceRuleManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleManufacturerModel>> GetPriceRuleManufacturerByID(
			GetPriceRuleManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleManufacturerModel>(
				await CEFService.RequestAsync<GetPriceRuleManufacturerByID, PriceRuleManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleManufacturerByID(
			ReactivatePriceRuleManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleManufacturer(
			UpdatePriceRuleManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleManufacturerPagedResults>> GetPriceRuleManufacturers(
			GetPriceRuleManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleManufacturerPagedResults>(
				await CEFService.RequestAsync<GetPriceRuleManufacturers, PriceRuleManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleProduct(
			CreatePriceRuleProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleProductByID(
			DeactivatePriceRuleProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleProductByID(
			DeletePriceRuleProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleProductModel>> GetPriceRuleProductByID(
			GetPriceRuleProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleProductModel>(
				await CEFService.RequestAsync<GetPriceRuleProductByID, PriceRuleProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleProductByID(
			ReactivatePriceRuleProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleProduct(
			UpdatePriceRuleProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleProductPagedResults>> GetPriceRuleProducts(
			GetPriceRuleProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleProductPagedResults>(
				await CEFService.RequestAsync<GetPriceRuleProducts, PriceRuleProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleProductTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleProductTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleProductType(
			CreatePriceRuleProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleProductTypeByID(
			DeactivatePriceRuleProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleProductTypeByID(
			DeletePriceRuleProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleProductTypeModel>> GetPriceRuleProductTypeByID(
			GetPriceRuleProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleProductTypeModel>(
				await CEFService.RequestAsync<GetPriceRuleProductTypeByID, PriceRuleProductTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleProductTypeByID(
			ReactivatePriceRuleProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleProductType(
			UpdatePriceRuleProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleProductTypePagedResults>> GetPriceRuleProductTypes(
			GetPriceRuleProductTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleProductTypePagedResults>(
				await CEFService.RequestAsync<GetPriceRuleProductTypes, PriceRuleProductTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRulePagedResults>> GetPriceRules(
			GetPriceRules request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRulePagedResults>(
				await CEFService.RequestAsync<GetPriceRules, PriceRulePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleStoreCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleStoreCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleStore(
			CreatePriceRuleStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleStoreByID(
			DeactivatePriceRuleStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleStoreByID(
			DeletePriceRuleStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleStoreModel>> GetPriceRuleStoreByID(
			GetPriceRuleStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleStoreModel>(
				await CEFService.RequestAsync<GetPriceRuleStoreByID, PriceRuleStoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleStoreByID(
			ReactivatePriceRuleStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleStore(
			UpdatePriceRuleStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleStorePagedResults>> GetPriceRuleStores(
			GetPriceRuleStores request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleStorePagedResults>(
				await CEFService.RequestAsync<GetPriceRuleStores, PriceRuleStorePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleUserRoleCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleUserRoleCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleUserRole(
			CreatePriceRuleUserRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleUserRole, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleUserRoleByID(
			DeactivatePriceRuleUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleUserRoleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleUserRoleByID(
			DeletePriceRuleUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleUserRoleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleUserRoleModel>> GetPriceRuleUserRoleByID(
			GetPriceRuleUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleUserRoleModel>(
				await CEFService.RequestAsync<GetPriceRuleUserRoleByID, PriceRuleUserRoleModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleUserRoleByID(
			ReactivatePriceRuleUserRoleByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleUserRoleByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleUserRole(
			UpdatePriceRuleUserRole request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleUserRole, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleUserRolePagedResults>> GetPriceRuleUserRoles(
			GetPriceRuleUserRoles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleUserRolePagedResults>(
				await CEFService.RequestAsync<GetPriceRuleUserRoles, PriceRuleUserRolePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPriceRuleVendorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPriceRuleVendorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePriceRuleVendor(
			CreatePriceRuleVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePriceRuleVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePriceRuleVendorByID(
			DeactivatePriceRuleVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePriceRuleVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePriceRuleVendorByID(
			DeletePriceRuleVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePriceRuleVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleVendorModel>> GetPriceRuleVendorByID(
			GetPriceRuleVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleVendorModel>(
				await CEFService.RequestAsync<GetPriceRuleVendorByID, PriceRuleVendorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePriceRuleVendorByID(
			ReactivatePriceRuleVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePriceRuleVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePriceRuleVendor(
			UpdatePriceRuleVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePriceRuleVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PriceRuleVendorPagedResults>> GetPriceRuleVendors(
			GetPriceRuleVendors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PriceRuleVendorPagedResults>(
				await CEFService.RequestAsync<GetPriceRuleVendors, PriceRuleVendorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<CalculatedPrice>>> CalculatePricesForProduct(
			CalculatePricesForProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<CalculatedPrice>>(
				await CEFService.RequestAsync<CalculatePricesForProduct, CEFActionResponse<CalculatedPrice>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<CalculatedPrice>>> GetPricesForProductAsUser(
			GetPricesForProductAsUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<CalculatedPrice>>(
				await CEFService.RequestAsync<GetPricesForProductAsUser, CEFActionResponse<CalculatedPrice>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, CalculatedPrice>>>> CalculatePricesForProducts(
			CalculatePricesForProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, CalculatedPrice>>>(
				await CEFService.RequestAsync<CalculatePricesForProducts, CEFActionResponse<Dictionary<int, CalculatedPrice>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, CalculatedPrice>>>> GetPricesForProductsAsUser(
			GetPricesForProductsAsUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, CalculatedPrice>>>(
				await CEFService.RequestAsync<GetPricesForProductsAsUser, CEFActionResponse<Dictionary<int, CalculatedPrice>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> BulkUpdateRawPricesForProduct(
			BulkUpdateRawPricesForProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<BulkUpdateRawPricesForProduct, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<RawProductPricesModel>>> GetRawPricesForProduct(
			GetRawPricesForProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<RawProductPricesModel>>(
				await CEFService.RequestAsync<GetRawPricesForProduct, CEFActionResponse<RawProductPricesModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UpdateRawPricesForProduct(
			UpdateRawPricesForProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UpdateRawPricesForProduct, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductPagedResults>> AdminGetProductsForPortal(
			AdminGetProductsForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductPagedResults>(
				await CEFService.RequestAsync<AdminGetProductsForPortal, ProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductPagedResults>> GetProductsForCurrentStore(
			GetProductsForCurrentStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductPagedResults>(
				await CEFService.RequestAsync<GetProductsForCurrentStore, ProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DownloadFileResult>> GetProductsAsExcelDoc()
		{
			return new HttpPromiseCallbackArg<DownloadFileResult>(
				await CEFService.RequestAsync<GetProductsAsExcelDoc, DownloadFileResult>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFutureImportCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFutureImportCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFutureImport(
			CreateFutureImport request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFutureImport, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFutureImportByID(
			DeactivateFutureImportByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFutureImportByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFutureImportByID(
			DeleteFutureImportByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFutureImportByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FutureImportModel>> GetFutureImportByID(
			GetFutureImportByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FutureImportModel>(
				await CEFService.RequestAsync<GetFutureImportByID, FutureImportModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFutureImportByID(
			ReactivateFutureImportByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFutureImportByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFutureImport(
			UpdateFutureImport request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFutureImport, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FutureImportPagedResults>> GetFutureImports(
			GetFutureImports request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FutureImportPagedResults>(
				await CEFService.RequestAsync<GetFutureImports, FutureImportPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearFutureImportStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearFutureImportStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateFutureImportStatus(
			CreateFutureImportStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateFutureImportStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateFutureImportStatusByID(
			DeactivateFutureImportStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateFutureImportStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteFutureImportStatusByID(
			DeleteFutureImportStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteFutureImportStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetFutureImportStatusByID(
			GetFutureImportStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetFutureImportStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateFutureImportStatusByID(
			ReactivateFutureImportStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateFutureImportStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateFutureImportStatus(
			UpdateFutureImportStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateFutureImportStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FutureImportStatusPagedResults>> GetFutureImportStatuses(
			GetFutureImportStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FutureImportStatusPagedResults>(
				await CEFService.RequestAsync<GetFutureImportStatuses, FutureImportStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<QuickOrderFormProductsModel>> GetProductsByCategory(
			GetProductsByCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<QuickOrderFormProductsModel>(
				await CEFService.RequestAsync<GetProductsByCategory, QuickOrderFormProductsModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PreviouslyOrderedProductPagedResults>> GetProductsByPreviouslyOrdered(
			GetProductsByPreviouslyOrdered request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PreviouslyOrderedProductPagedResults>(
				await CEFService.RequestAsync<GetProductsByPreviouslyOrdered, PreviouslyOrderedProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ImportResponse>> ImportProductsFromExcel(
			ImportProductsFromExcel request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ImportResponse>(
				await CEFService.RequestAsync<ImportProductsFromExcel, ImportResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ImportResponse>> ImportProductsFromExcelForBrand(
			ImportProductsFromExcelForBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ImportResponse>(
				await CEFService.RequestAsync<ImportProductsFromExcelForBrand, ImportResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ImportResponse>> ImportProductsFromExcelForStore(
			ImportProductsFromExcelForStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ImportResponse>(
				await CEFService.RequestAsync<ImportProductsFromExcelForStore, ImportResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ImportResponse>> ImportProductsFromExcelForVendor(
			ImportProductsFromExcelForVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ImportResponse>(
				await CEFService.RequestAsync<ImportProductsFromExcelForVendor, ImportResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<KeyValuePair<CategoryModel, List<ProductModel>>>>> GetPersonalizedCategoryAndProductFeedForCurrentUser()
		{
			return new HttpPromiseCallbackArg<List<KeyValuePair<CategoryModel, List<ProductModel>>>>(
				await CEFService.RequestAsync<GetPersonalizedCategoryAndProductFeedForCurrentUser, List<KeyValuePair<CategoryModel, List<ProductModel>>>>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<ProductModel>>> GetPersonalizationProductsForCurrentUser()
		{
			return new HttpPromiseCallbackArg<List<ProductModel>>(
				await CEFService.RequestAsync<GetPersonalizationProductsForCurrentUser, List<ProductModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProduct(
			CreateProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductByID(
			DeactivateProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductByID(
			DeleteProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckProductExistsByID(
			CheckProductExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckProductExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckProductExistsByKey(
			CheckProductExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckProductExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckProductExistsByName(
			CheckProductExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckProductExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckProductExistsBySeoUrl(
			CheckProductExistsBySeoUrl request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckProductExistsBySeoUrl, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductModel>> AdminGetProductFull(
			AdminGetProductFull request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductModel>(
				await CEFService.RequestAsync<AdminGetProductFull, ProductModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductModel>> GetProductByID(
			GetProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductModel>(
				await CEFService.RequestAsync<GetProductByID, ProductModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductModel>> GetProductByKey(
			GetProductByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductModel>(
				await CEFService.RequestAsync<GetProductByKey, ProductModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductModel>> GetProductForMetaData(
			GetProductForMetaData request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductModel>(
				await CEFService.RequestAsync<GetProductForMetaData, ProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductByID(
			ReactivateProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProduct(
			UpdateProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SerializableAttributesDictionary>> GetProductMetadataByURL(
			GetProductMetadataByURL request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SerializableAttributesDictionary>(
				await CEFService.RequestAsync<GetProductMetadataByURL, SerializableAttributesDictionary>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductAssociationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductAssociationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductAssociation(
			CreateProductAssociation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductAssociation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductAssociationByID(
			DeactivateProductAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductAssociationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductAssociationByID(
			DeleteProductAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductAssociationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductAssociationModel>> GetProductAssociationByID(
			GetProductAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductAssociationModel>(
				await CEFService.RequestAsync<GetProductAssociationByID, ProductAssociationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductAssociationByID(
			ReactivateProductAssociationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductAssociationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductAssociation(
			UpdateProductAssociation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductAssociation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductAssociationPagedResults>> GetProductAssociations(
			GetProductAssociations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductAssociationPagedResults>(
				await CEFService.RequestAsync<GetProductAssociations, ProductAssociationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductAssociationTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductAssociationTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductAssociationType(
			CreateProductAssociationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductAssociationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductAssociationTypeByID(
			DeactivateProductAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductAssociationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductAssociationTypeByID(
			DeleteProductAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductAssociationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetProductAssociationTypeByID(
			GetProductAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetProductAssociationTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductAssociationTypeByID(
			ReactivateProductAssociationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductAssociationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductAssociationType(
			UpdateProductAssociationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductAssociationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductAssociationTypePagedResults>> GetProductAssociationTypes(
			GetProductAssociationTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductAssociationTypePagedResults>(
				await CEFService.RequestAsync<GetProductAssociationTypes, ProductAssociationTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductCategoryPagedResults>> GetProductCategories(
			GetProductCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductCategoryPagedResults>(
				await CEFService.RequestAsync<GetProductCategories, ProductCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductCategory(
			CreateProductCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductCategoryByID(
			DeactivateProductCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductCategoryByID(
			DeleteProductCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductCategoryModel>> GetProductCategoryByID(
			GetProductCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductCategoryModel>(
				await CEFService.RequestAsync<GetProductCategoryByID, ProductCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductCategoryByID(
			ReactivateProductCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductCategory(
			UpdateProductCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductDownloadCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductDownloadCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductDownload(
			CreateProductDownload request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductDownload, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductDownloadByID(
			DeactivateProductDownloadByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductDownloadByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductDownloadByID(
			DeleteProductDownloadByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductDownloadByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductDownloadModel>> GetProductDownloadByID(
			GetProductDownloadByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductDownloadModel>(
				await CEFService.RequestAsync<GetProductDownloadByID, ProductDownloadModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductDownloadByID(
			ReactivateProductDownloadByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductDownloadByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductDownload(
			UpdateProductDownload request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductDownload, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductDownloadPagedResults>> GetProductDownloads(
			GetProductDownloads request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductDownloadPagedResults>(
				await CEFService.RequestAsync<GetProductDownloads, ProductDownloadPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductDownloadTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductDownloadTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductDownloadType(
			CreateProductDownloadType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductDownloadType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductDownloadTypeByID(
			DeactivateProductDownloadTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductDownloadTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductDownloadTypeByID(
			DeleteProductDownloadTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductDownloadTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetProductDownloadTypeByID(
			GetProductDownloadTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetProductDownloadTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductDownloadTypeByID(
			ReactivateProductDownloadTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductDownloadTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductDownloadType(
			UpdateProductDownloadType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductDownloadType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductDownloadTypePagedResults>> GetProductDownloadTypes(
			GetProductDownloadTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductDownloadTypePagedResults>(
				await CEFService.RequestAsync<GetProductDownloadTypes, ProductDownloadTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductFile(
			CreateProductFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductFileByID(
			DeactivateProductFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductFileByID(
			DeleteProductFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductFileModel>> GetProductFileByID(
			GetProductFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductFileModel>(
				await CEFService.RequestAsync<GetProductFileByID, ProductFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductFileByID(
			ReactivateProductFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductFile(
			UpdateProductFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductFilePagedResults>> GetProductFiles(
			GetProductFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductFilePagedResults>(
				await CEFService.RequestAsync<GetProductFiles, ProductFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductImage(
			CreateProductImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductImageByID(
			DeactivateProductImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductImageByID(
			DeleteProductImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductImageModel>> GetProductImageByID(
			GetProductImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductImageModel>(
				await CEFService.RequestAsync<GetProductImageByID, ProductImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductImageByID(
			ReactivateProductImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductImage(
			UpdateProductImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductImagePagedResults>> GetProductImages(
			GetProductImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductImagePagedResults>(
				await CEFService.RequestAsync<GetProductImages, ProductImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductImageType(
			CreateProductImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductImageTypeByID(
			DeactivateProductImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductImageTypeByID(
			DeleteProductImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetProductImageTypeByID(
			GetProductImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetProductImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductImageTypeByID(
			ReactivateProductImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductImageType(
			UpdateProductImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductImageTypePagedResults>> GetProductImageTypes(
			GetProductImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductImageTypePagedResults>(
				await CEFService.RequestAsync<GetProductImageTypes, ProductImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductInventoryLocationSectionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductInventoryLocationSectionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductInventoryLocationSection(
			CreateProductInventoryLocationSection request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductInventoryLocationSection, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductInventoryLocationSectionByID(
			DeactivateProductInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductInventoryLocationSectionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductInventoryLocationSectionByID(
			DeleteProductInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductInventoryLocationSectionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductInventoryLocationSectionModel>> GetProductInventoryLocationSectionByID(
			GetProductInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductInventoryLocationSectionModel>(
				await CEFService.RequestAsync<GetProductInventoryLocationSectionByID, ProductInventoryLocationSectionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductInventoryLocationSectionByID(
			ReactivateProductInventoryLocationSectionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductInventoryLocationSectionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductInventoryLocationSection(
			UpdateProductInventoryLocationSection request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductInventoryLocationSection, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductInventoryLocationSectionPagedResults>> GetProductInventoryLocationSections(
			GetProductInventoryLocationSections request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductInventoryLocationSectionPagedResults>(
				await CEFService.RequestAsync<GetProductInventoryLocationSections, ProductInventoryLocationSectionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductMembershipLevelCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductMembershipLevelCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductMembershipLevel(
			CreateProductMembershipLevel request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductMembershipLevel, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductMembershipLevelByID(
			DeactivateProductMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductMembershipLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductMembershipLevelByID(
			DeleteProductMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductMembershipLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductMembershipLevelModel>> GetProductMembershipLevelByID(
			GetProductMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductMembershipLevelModel>(
				await CEFService.RequestAsync<GetProductMembershipLevelByID, ProductMembershipLevelModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductMembershipLevelByID(
			ReactivateProductMembershipLevelByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductMembershipLevelByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductMembershipLevel(
			UpdateProductMembershipLevel request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductMembershipLevel, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductMembershipLevelPagedResults>> GetProductMembershipLevels(
			GetProductMembershipLevels request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductMembershipLevelPagedResults>(
				await CEFService.RequestAsync<GetProductMembershipLevels, ProductMembershipLevelPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductPricePointCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductPricePointCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductPricePoint(
			CreateProductPricePoint request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductPricePoint, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductPricePointByID(
			DeactivateProductPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductPricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductPricePointByID(
			DeleteProductPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductPricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductPricePointModel>> GetProductPricePointByID(
			GetProductPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductPricePointModel>(
				await CEFService.RequestAsync<GetProductPricePointByID, ProductPricePointModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductPricePointByID(
			ReactivateProductPricePointByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductPricePointByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductPricePoint(
			UpdateProductPricePoint request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductPricePoint, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductPricePointPagedResults>> GetProductPricePoints(
			GetProductPricePoints request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductPricePointPagedResults>(
				await CEFService.RequestAsync<GetProductPricePoints, ProductPricePointPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductRestrictionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductRestrictionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductRestriction(
			CreateProductRestriction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductRestriction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductRestrictionByID(
			DeactivateProductRestrictionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductRestrictionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductRestrictionByID(
			DeleteProductRestrictionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductRestrictionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductRestrictionModel>> GetProductRestrictionByID(
			GetProductRestrictionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductRestrictionModel>(
				await CEFService.RequestAsync<GetProductRestrictionByID, ProductRestrictionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductRestrictionByID(
			ReactivateProductRestrictionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductRestrictionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductRestriction(
			UpdateProductRestriction request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductRestriction, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductRestrictionPagedResults>> GetProductRestrictions(
			GetProductRestrictions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductRestrictionPagedResults>(
				await CEFService.RequestAsync<GetProductRestrictions, ProductRestrictionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductPagedResults>> GetProducts(
			GetProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductPagedResults>(
				await CEFService.RequestAsync<GetProducts, ProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<ProductModel>>> GetProductsByIDs(
			GetProductsByIDs request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<ProductModel>>(
				await CEFService.RequestAsync<GetProductsByIDs, List<ProductModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductShipCarrierMethodCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductShipCarrierMethodCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductShipCarrierMethod(
			CreateProductShipCarrierMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductShipCarrierMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductShipCarrierMethodByID(
			DeactivateProductShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductShipCarrierMethodByID(
			DeleteProductShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductShipCarrierMethodModel>> GetProductShipCarrierMethodByID(
			GetProductShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductShipCarrierMethodModel>(
				await CEFService.RequestAsync<GetProductShipCarrierMethodByID, ProductShipCarrierMethodModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductShipCarrierMethodByID(
			ReactivateProductShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductShipCarrierMethod(
			UpdateProductShipCarrierMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductShipCarrierMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductShipCarrierMethodPagedResults>> GetProductShipCarrierMethods(
			GetProductShipCarrierMethods request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductShipCarrierMethodPagedResults>(
				await CEFService.RequestAsync<GetProductShipCarrierMethods, ProductShipCarrierMethodPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductStatus(
			CreateProductStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductStatusByID(
			DeactivateProductStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductStatusByID(
			DeleteProductStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetProductStatusByID(
			GetProductStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetProductStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductStatusByID(
			ReactivateProductStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductStatus(
			UpdateProductStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductStatusPagedResults>> GetProductStatuses(
			GetProductStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductStatusPagedResults>(
				await CEFService.RequestAsync<GetProductStatuses, ProductStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductSubscriptionTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductSubscriptionTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductSubscriptionType(
			CreateProductSubscriptionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductSubscriptionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductSubscriptionTypeByID(
			DeactivateProductSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductSubscriptionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductSubscriptionTypeByID(
			DeleteProductSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductSubscriptionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductSubscriptionTypeModel>> GetProductSubscriptionTypeByID(
			GetProductSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductSubscriptionTypeModel>(
				await CEFService.RequestAsync<GetProductSubscriptionTypeByID, ProductSubscriptionTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductSubscriptionTypeByID(
			ReactivateProductSubscriptionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductSubscriptionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductSubscriptionType(
			UpdateProductSubscriptionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductSubscriptionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductSubscriptionTypePagedResults>> GetProductSubscriptionTypes(
			GetProductSubscriptionTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductSubscriptionTypePagedResults>(
				await CEFService.RequestAsync<GetProductSubscriptionTypes, ProductSubscriptionTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearProductTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearProductTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateProductType(
			CreateProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateProductTypeByID(
			DeactivateProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteProductTypeByID(
			DeleteProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetProductTypeByID(
			GetProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetProductTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateProductTypeByID(
			ReactivateProductTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateProductTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateProductType(
			UpdateProductType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateProductType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductTypePagedResults>> GetProductTypes(
			GetProductTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductTypePagedResults>(
				await CEFService.RequestAsync<GetProductTypes, ProductTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<string>>> RetrieveExcelWorkbookInfoForBrand(
			RetrieveExcelWorkbookInfoForBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<string>>(
				await CEFService.RequestAsync<RetrieveExcelWorkbookInfoForBrand, List<string>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<string>>> RetrieveExcelWorkbookInfoForStore(
			RetrieveExcelWorkbookInfoForStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<string>>(
				await CEFService.RequestAsync<RetrieveExcelWorkbookInfoForStore, List<string>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<string>>> RetrieveExcelWorkbookInfoForVendor(
			RetrieveExcelWorkbookInfoForVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<string>>(
				await CEFService.RequestAsync<RetrieveExcelWorkbookInfoForVendor, List<string>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductReviewInformationModel>> GetProductReview(
			GetProductReview request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductReviewInformationModel>(
				await CEFService.RequestAsync<GetProductReview, ProductReviewInformationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DownloadFileResult>> GetProductSiteMapContent()
		{
			return new HttpPromiseCallbackArg<DownloadFileResult>(
				await CEFService.RequestAsync<GetProductSiteMapContent, DownloadFileResult>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> RegenerateProductSiteMap()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<RegenerateProductSiteMap, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>> AnalyzeCurrentCartToTargetCarts(
			AnalyzeCurrentCartToTargetCarts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>(
				await CEFService.RequestAsync<AnalyzeCurrentCartToTargetCarts, CEFActionResponse<List<CartModel>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>> AnalyzeSpecificCartToTargetCarts(
			AnalyzeSpecificCartToTargetCarts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>(
				await CEFService.RequestAsync<AnalyzeSpecificCartToTargetCarts, CEFActionResponse<List<CartModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearCurrentCartToTargetCartsAnalysis(
			ClearCurrentCartToTargetCartsAnalysis request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearCurrentCartToTargetCartsAnalysis, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessCurrentCartToSingleOrder(
			ProcessCurrentCartToSingleOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessCurrentCartToSingleOrder, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessCurrentCartToTargetOrders(
			ProcessCurrentCartToTargetOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessCurrentCartToTargetOrders, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessSpecificCartToSingleOrder(
			ProcessSpecificCartToSingleOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessSpecificCartToSingleOrder, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessSpecificCartToTargetOrders(
			ProcessSpecificCartToTargetOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessSpecificCartToTargetOrders, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SendInvitation(
			SendInvitation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SendInvitation, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SendReceiptNotificationWithEmail(
			SendReceiptNotificationWithEmail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SendReceiptNotificationWithEmail, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AddressValidationResultModel>> ValidateAddress(
			ValidateAddress request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AddressValidationResultModel>(
				await CEFService.RequestAsync<ValidateAddress, AddressValidationResultModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, CalculatedInventory>>>> BulkCalculateInventory(
			BulkCalculateInventory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, CalculatedInventory>>>(
				await CEFService.RequestAsync<BulkCalculateInventory, CEFActionResponse<Dictionary<int, CalculatedInventory>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, decimal>>>> GetBulkAvailableInventoryCount(
			GetBulkAvailableInventoryCount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, decimal>>>(
				await CEFService.RequestAsync<GetBulkAvailableInventoryCount, CEFActionResponse<Dictionary<int, decimal>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, bool>>>> BulkCheckHasAnyAvailableInventory(
			BulkCheckHasAnyAvailableInventory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<Dictionary<int, bool>>>(
				await CEFService.RequestAsync<BulkCheckHasAnyAvailableInventory, CEFActionResponse<Dictionary<int, bool>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> BulkUpdateInventoryForProducts(
			BulkUpdateInventoryForProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<BulkUpdateInventoryForProducts, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<CalculatedInventory>>> CalculateInventory(
			CalculateInventory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<CalculatedInventory>>(
				await CEFService.RequestAsync<CalculateInventory, CEFActionResponse<CalculatedInventory>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<decimal>>> GetAvailableInventoryCount(
			GetAvailableInventoryCount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<decimal>>(
				await CEFService.RequestAsync<GetAvailableInventoryCount, CEFActionResponse<decimal>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<bool>>> CheckHasAnyAvailableInventory(
			CheckHasAnyAvailableInventory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<bool>>(
				await CEFService.RequestAsync<CheckHasAnyAvailableInventory, CEFActionResponse<bool>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UpdateInventoryForProduct(
			UpdateInventoryForProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UpdateInventoryForProduct, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<SalesInvoiceModel>>> CreateInvoiceForSalesOrder(
			CreateInvoiceForSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<SalesInvoiceModel>>(
				await CEFService.RequestAsync<CreateInvoiceForSalesOrder, CEFActionResponse<SalesInvoiceModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesInvoiceAsPaid(
			SetSalesInvoiceAsPaid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesInvoiceAsPaid, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesInvoiceAsPartiallyPaid(
			SetSalesInvoiceAsPartiallyPaid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesInvoiceAsPartiallyPaid, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> PaySingleInvoiceByID(
			PaySingleInvoiceByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<PaySingleInvoiceByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> PayMultipleInvoicesByAmounts(
			PayMultipleInvoicesByAmounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<PayMultipleInvoicesByAmounts, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesInvoiceAsUnpaid(
			SetSalesInvoiceAsUnpaid request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesInvoiceAsUnpaid, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesInvoiceAsVoided(
			SetSalesInvoiceAsVoided request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesInvoiceAsVoided, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoicePagedResults>> AdminGetSalesInvoicesForPortal(
			AdminGetSalesInvoicesForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoicePagedResults>(
				await CEFService.RequestAsync<AdminGetSalesInvoicesForPortal, SalesInvoicePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoicePagedResults>> GetCurrentAccountSalesInvoices(
			GetCurrentAccountSalesInvoices request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoicePagedResults>(
				await CEFService.RequestAsync<GetCurrentAccountSalesInvoices, SalesInvoicePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoicePagedResults>> GetCurrentUserSalesInvoices(
			GetCurrentUserSalesInvoices request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoicePagedResults>(
				await CEFService.RequestAsync<GetCurrentUserSalesInvoices, SalesInvoicePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesInvoiceModel>> GetSecureSalesInvoice(
			GetSecureSalesInvoice request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesInvoiceModel>(
				await CEFService.RequestAsync<GetSecureSalesInvoice, SalesInvoiceModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountsForInvoice>> GetDiscountsForInvoice(
			GetDiscountsForInvoice request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountsForInvoice>(
				await CEFService.RequestAsync<GetDiscountsForInvoice, DiscountsForInvoice>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountsForOrderResponse>> GetDiscountsForOrder(
			GetDiscountsForOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountsForOrderResponse>(
				await CEFService.RequestAsync<GetDiscountsForOrder, DiscountsForOrderResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ModifySubscriptionForCurrentUser(
			ModifySubscriptionForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ModifySubscriptionForCurrentUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CancelSubscription(
			CancelSubscription request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CancelSubscription, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesQuoteAsApproved(
			SetSalesQuoteAsApproved request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesQuoteAsApproved, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AwardSalesQuoteLineItem(
			AwardSalesQuoteLineItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AwardSalesQuoteLineItem, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<ValueTuple<int, int?>>>> ConvertQuoteToOrderForCurrentUser(
			ConvertQuoteToOrderForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<ValueTuple<int, int?>>>(
				await CEFService.RequestAsync<ConvertQuoteToOrderForCurrentUser, CEFActionResponse<ValueTuple<int, int?>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesQuoteAsInProcess(
			SetSalesQuoteAsInProcess request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesQuoteAsInProcess, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesQuoteAsProcessed(
			SetSalesQuoteAsProcessed request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesQuoteAsProcessed, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesQuoteAsRejected(
			SetSalesQuoteAsRejected request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesQuoteAsRejected, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<ValueTuple<int, int?>>>> ConvertSpecificQuoteToOrder(
			ConvertSpecificQuoteToOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<ValueTuple<int, int?>>>(
				await CEFService.RequestAsync<ConvertSpecificQuoteToOrder, CEFActionResponse<ValueTuple<int, int?>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SubmitRequestForQuoteForGenericProducts(
			SubmitRequestForQuoteForGenericProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SubmitRequestForQuoteForGenericProducts, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SubmitRequestForQuoteForSingleProduct(
			SubmitRequestForQuoteForSingleProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SubmitRequestForQuoteForSingleProduct, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesQuoteAsVoided(
			SetSalesQuoteAsVoided request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesQuoteAsVoided, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuotePagedResults>> AdminGetSalesQuotesForPortal(
			AdminGetSalesQuotesForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuotePagedResults>(
				await CEFService.RequestAsync<AdminGetSalesQuotesForPortal, SalesQuotePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuotePagedResults>> GetCurrentAccountSalesQuotes(
			GetCurrentAccountSalesQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuotePagedResults>(
				await CEFService.RequestAsync<GetCurrentAccountSalesQuotes, SalesQuotePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuotePagedResults>> GetCurrentUserSalesQuotes(
			GetCurrentUserSalesQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuotePagedResults>(
				await CEFService.RequestAsync<GetCurrentUserSalesQuotes, SalesQuotePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteModel>> GetSecureSalesQuote(
			GetSecureSalesQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteModel>(
				await CEFService.RequestAsync<GetSecureSalesQuote, SalesQuoteModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<DiscountsForQuote>> GetDiscountsForQuote(
			GetDiscountsForQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<DiscountsForQuote>(
				await CEFService.RequestAsync<GetDiscountsForQuote, DiscountsForQuote>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesReturnAsCancelled(
			SetSalesReturnAsCancelled request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesReturnAsCancelled, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesReturnAsConfirmed(
			SetSalesReturnAsConfirmed request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesReturnAsConfirmed, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnAsAdmin(
			CreateSalesReturnAsAdmin request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnAsAdmin, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnFromStorefront(
			CreateSalesReturnFromStorefront request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnFromStorefront, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ManuallyRefundSalesReturn(
			ManuallyRefundSalesReturn request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ManuallyRefundSalesReturn, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesReturnAsRefunded(
			SetSalesReturnAsRefunded request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesReturnAsRefunded, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesReturnAsRejected(
			SetSalesReturnAsRejected request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesReturnAsRejected, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesReturnAsShipped(
			SetSalesReturnAsShipped request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesReturnAsShipped, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnFromStorefront(
			UpdateSalesReturnFromStorefront request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnFromStorefront, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSalesReturnAsVoided(
			SetSalesReturnAsVoided request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSalesReturnAsVoided, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnPagedResults>> AdminGetSalesReturnsForPortal(
			AdminGetSalesReturnsForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnPagedResults>(
				await CEFService.RequestAsync<AdminGetSalesReturnsForPortal, SalesReturnPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnPagedResults>> GetCurrentAccountSalesReturns(
			GetCurrentAccountSalesReturns request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnPagedResults>(
				await CEFService.RequestAsync<GetCurrentAccountSalesReturns, SalesReturnPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IsSalesOrderReadyForReturn(
			IsSalesOrderReadyForReturn request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IsSalesOrderReadyForReturn, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnPagedResults>> GetCurrentUserSalesReturns(
			GetCurrentUserSalesReturns request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnPagedResults>(
				await CEFService.RequestAsync<GetCurrentUserSalesReturns, SalesReturnPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnModel>> GetSecureSalesReturn(
			GetSecureSalesReturn request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnModel>(
				await CEFService.RequestAsync<GetSecureSalesReturn, SalesReturnModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSampleRequestAsBackordered(
			SetSampleRequestAsBackordered request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSampleRequestAsBackordered, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSampleRequestAsCompleted(
			SetSampleRequestAsCompleted request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSampleRequestAsCompleted, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSampleRequestAsConfirmed(
			SetSampleRequestAsConfirmed request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSampleRequestAsConfirmed, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<SalesInvoiceModel>>> CreateInvoiceForSampleRequest(
			CreateInvoiceForSampleRequest request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<SalesInvoiceModel>>(
				await CEFService.RequestAsync<CreateInvoiceForSampleRequest, CEFActionResponse<SalesInvoiceModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>>>>> CreatePickTicketForSampleRequest(
			CreatePickTicketForSampleRequest request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>>>>(
				await CEFService.RequestAsync<CreatePickTicketForSampleRequest, CEFActionResponse<List<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<PurchaseOrderModel>>> SetSampleRequestAsDropShipped(
			SetSampleRequestAsDropShipped request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<PurchaseOrderModel>>(
				await CEFService.RequestAsync<SetSampleRequestAsDropShipped, CEFActionResponse<PurchaseOrderModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSampleRequestAsShipped(
			SetSampleRequestAsShipped request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSampleRequestAsShipped, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SetSampleRequestAsVoided(
			SetSampleRequestAsVoided request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SetSampleRequestAsVoided, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestPagedResults>> GetCurrentAccountSampleRequests(
			GetCurrentAccountSampleRequests request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestPagedResults>(
				await CEFService.RequestAsync<GetCurrentAccountSampleRequests, SampleRequestPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestPagedResults>> AdminGetSampleRequestsForBrand(
			AdminGetSampleRequestsForBrand request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestPagedResults>(
				await CEFService.RequestAsync<AdminGetSampleRequestsForBrand, SampleRequestPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestPagedResults>> AdminGetSampleRequestsForFranchise(
			AdminGetSampleRequestsForFranchise request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestPagedResults>(
				await CEFService.RequestAsync<AdminGetSampleRequestsForFranchise, SampleRequestPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestPagedResults>> AdminGetSampleRequestsForStore(
			AdminGetSampleRequestsForStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestPagedResults>(
				await CEFService.RequestAsync<AdminGetSampleRequestsForStore, SampleRequestPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestPagedResults>> GetCurrentUserSampleRequests(
			GetCurrentUserSampleRequests request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestPagedResults>(
				await CEFService.RequestAsync<GetCurrentUserSampleRequests, SampleRequestPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestModel>> GetSecureSampleRequest(
			GetSecureSampleRequest request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestModel>(
				await CEFService.RequestAsync<GetSecureSampleRequest, SampleRequestModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexAuctions()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexAuctions, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AuctionSearchViewModel>> SearchAuctionCatalogWithProvider(
			SearchAuctionCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AuctionSearchViewModel>(
				await CEFService.RequestAsync<SearchAuctionCatalogWithProvider, AuctionSearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<AuctionSuggestResult>>> SuggestAuctionCatalogWithProvider(
			SuggestAuctionCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<AuctionSuggestResult>>(
				await CEFService.RequestAsync<SuggestAuctionCatalogWithProvider, List<AuctionSuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexCategories()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexCategories, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CategorySearchViewModel>> SearchCategoryCatalogWithProvider(
			SearchCategoryCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CategorySearchViewModel>(
				await CEFService.RequestAsync<SearchCategoryCatalogWithProvider, CategorySearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<CategorySuggestResult>>> SuggestCategoryCatalogWithProvider(
			SuggestCategoryCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<CategorySuggestResult>>(
				await CEFService.RequestAsync<SuggestCategoryCatalogWithProvider, List<CategorySuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexFranchises()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexFranchises, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<FranchiseSearchViewModel>> SearchFranchiseCatalogWithProvider(
			SearchFranchiseCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<FranchiseSearchViewModel>(
				await CEFService.RequestAsync<SearchFranchiseCatalogWithProvider, FranchiseSearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<FranchiseSuggestResult>>> SuggestFranchiseCatalogWithProvider(
			SuggestFranchiseCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<FranchiseSuggestResult>>(
				await CEFService.RequestAsync<SuggestFranchiseCatalogWithProvider, List<FranchiseSuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexLots()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexLots, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<LotSearchViewModel>> SearchLotCatalogWithProvider(
			SearchLotCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<LotSearchViewModel>(
				await CEFService.RequestAsync<SearchLotCatalogWithProvider, LotSearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<LotSuggestResult>>> SuggestLotCatalogWithProvider(
			SuggestLotCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<LotSuggestResult>>(
				await CEFService.RequestAsync<SuggestLotCatalogWithProvider, List<LotSuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexManufacturers()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexManufacturers, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ManufacturerSearchViewModel>> SearchManufacturerCatalogWithProvider(
			SearchManufacturerCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ManufacturerSearchViewModel>(
				await CEFService.RequestAsync<SearchManufacturerCatalogWithProvider, ManufacturerSearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<ManufacturerSuggestResult>>> SuggestManufacturerCatalogWithProvider(
			SuggestManufacturerCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<ManufacturerSuggestResult>>(
				await CEFService.RequestAsync<SuggestManufacturerCatalogWithProvider, List<ManufacturerSuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexProducts()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexProducts, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ProductSearchViewModel>> SearchProductCatalogWithProvider(
			SearchProductCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ProductSearchViewModel>(
				await CEFService.RequestAsync<SearchProductCatalogWithProvider, ProductSearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<ProductSuggestResult>>> SuggestProductCatalogWithProvider(
			SuggestProductCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<ProductSuggestResult>>(
				await CEFService.RequestAsync<SuggestProductCatalogWithProvider, List<ProductSuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexStores()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexStores, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreSearchViewModel>> SearchStoreCatalogWithProvider(
			SearchStoreCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreSearchViewModel>(
				await CEFService.RequestAsync<SearchStoreCatalogWithProvider, StoreSearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<StoreSuggestResult>>> SuggestStoreCatalogWithProvider(
			SuggestStoreCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<StoreSuggestResult>>(
				await CEFService.RequestAsync<SuggestStoreCatalogWithProvider, List<StoreSuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> IndexVendors()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<IndexVendors, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorSearchViewModel>> SearchVendorCatalogWithProvider(
			SearchVendorCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorSearchViewModel>(
				await CEFService.RequestAsync<SearchVendorCatalogWithProvider, VendorSearchViewModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<VendorSuggestResult>>> SuggestVendorCatalogWithProvider(
			SuggestVendorCatalogWithProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<VendorSuggestResult>>(
				await CEFService.RequestAsync<SuggestVendorCatalogWithProvider, List<VendorSuggestResult>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>> AnalyzeCurrentQuoteCartToTargetQuoteCarts(
			AnalyzeCurrentQuoteCartToTargetQuoteCarts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>(
				await CEFService.RequestAsync<AnalyzeCurrentQuoteCartToTargetQuoteCarts, CEFActionResponse<List<CartModel>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>> AnalyzeSpecificQuoteCartToTargetQuotes(
			AnalyzeSpecificQuoteCartToTargetQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<CartModel>>>(
				await CEFService.RequestAsync<AnalyzeSpecificQuoteCartToTargetQuotes, CEFActionResponse<List<CartModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearCurrentQuoteCartToTargetCartsAnalysis(
			ClearCurrentQuoteCartToTargetCartsAnalysis request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearCurrentQuoteCartToTargetCartsAnalysis, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessCurrentQuoteCartToTargetQuotes(
			ProcessCurrentQuoteCartToTargetQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessCurrentQuoteCartToTargetQuotes, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessCurrentQuoteCartToSingleQuote(
			ProcessCurrentQuoteCartToSingleQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessCurrentQuoteCartToSingleQuote, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessSpecificQuoteCartToSingleQuote(
			ProcessSpecificQuoteCartToSingleQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessSpecificQuoteCartToSingleQuote, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CheckoutResult>> ProcessSpecificQuoteCartToTargetQuotes(
			ProcessSpecificQuoteCartToTargetQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CheckoutResult>(
				await CEFService.RequestAsync<ProcessSpecificQuoteCartToTargetQuotes, CheckoutResult>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderPagedResults>> AdminGetPurchaseOrdersForPortal(
			AdminGetPurchaseOrdersForPortal request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderPagedResults>(
				await CEFService.RequestAsync<AdminGetPurchaseOrdersForPortal, PurchaseOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrder(
			CreatePurchaseOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderByID(
			DeactivatePurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderByID(
			DeletePurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderModel>> GetPurchaseOrderByID(
			GetPurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderModel>(
				await CEFService.RequestAsync<GetPurchaseOrderByID, PurchaseOrderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderByID(
			ReactivatePurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrder(
			UpdatePurchaseOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderContact(
			CreatePurchaseOrderContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderContactByID(
			DeactivatePurchaseOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderContactByID(
			DeletePurchaseOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderContactModel>> GetPurchaseOrderContactByID(
			GetPurchaseOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderContactModel>(
				await CEFService.RequestAsync<GetPurchaseOrderContactByID, PurchaseOrderContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderContactByID(
			ReactivatePurchaseOrderContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderContact(
			UpdatePurchaseOrderContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderContactPagedResults>> GetPurchaseOrderContacts(
			GetPurchaseOrderContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderContactPagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderContacts, PurchaseOrderContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderEvent(
			CreatePurchaseOrderEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderEventByID(
			DeactivatePurchaseOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderEventByID(
			DeletePurchaseOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderEventModel>> GetPurchaseOrderEventByID(
			GetPurchaseOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderEventModel>(
				await CEFService.RequestAsync<GetPurchaseOrderEventByID, PurchaseOrderEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderEventByID(
			ReactivatePurchaseOrderEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderEvent(
			UpdatePurchaseOrderEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderEventPagedResults>> GetPurchaseOrderEvents(
			GetPurchaseOrderEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderEventPagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderEvents, PurchaseOrderEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderEventType(
			CreatePurchaseOrderEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderEventTypeByID(
			DeactivatePurchaseOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderEventTypeByID(
			DeletePurchaseOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetPurchaseOrderEventTypeByID(
			GetPurchaseOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetPurchaseOrderEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderEventTypeByID(
			ReactivatePurchaseOrderEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderEventType(
			UpdatePurchaseOrderEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderEventTypePagedResults>> GetPurchaseOrderEventTypes(
			GetPurchaseOrderEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderEventTypePagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderEventTypes, PurchaseOrderEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderFile(
			CreatePurchaseOrderFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderFileByID(
			DeactivatePurchaseOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderFileByID(
			DeletePurchaseOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderFileModel>> GetPurchaseOrderFileByID(
			GetPurchaseOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderFileModel>(
				await CEFService.RequestAsync<GetPurchaseOrderFileByID, PurchaseOrderFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderFileByID(
			ReactivatePurchaseOrderFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderFile(
			UpdatePurchaseOrderFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderFilePagedResults>> GetPurchaseOrderFiles(
			GetPurchaseOrderFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderFilePagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderFiles, PurchaseOrderFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderItemCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderItemCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderItem(
			CreatePurchaseOrderItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderItemByID(
			DeactivatePurchaseOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderItemByID(
			DeletePurchaseOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel, AppliedPurchaseOrderItemDiscountModel>>> GetPurchaseOrderItemByID(
			GetPurchaseOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel, AppliedPurchaseOrderItemDiscountModel>>(
				await CEFService.RequestAsync<GetPurchaseOrderItemByID, SalesItemBaseModel<IAppliedPurchaseOrderItemDiscountModel, AppliedPurchaseOrderItemDiscountModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderItemByID(
			ReactivatePurchaseOrderItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderItem(
			UpdatePurchaseOrderItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderItemPagedResults>> GetPurchaseOrderItems(
			GetPurchaseOrderItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderItemPagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderItems, PurchaseOrderItemPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderItemTargetCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderItemTargetCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderItemTarget(
			CreatePurchaseOrderItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderItemTargetByID(
			DeactivatePurchaseOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderItemTargetByID(
			DeletePurchaseOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetBaseModel>> GetPurchaseOrderItemTargetByID(
			GetPurchaseOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetBaseModel>(
				await CEFService.RequestAsync<GetPurchaseOrderItemTargetByID, SalesItemTargetBaseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderItemTargetByID(
			ReactivatePurchaseOrderItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderItemTarget(
			UpdatePurchaseOrderItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderItemTargetPagedResults>> GetPurchaseOrderItemTargets(
			GetPurchaseOrderItemTargets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderItemTargetPagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderItemTargets, PurchaseOrderItemTargetPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderPagedResults>> GetPurchaseOrders(
			GetPurchaseOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderPagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrders, PurchaseOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderStateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderStateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderState(
			CreatePurchaseOrderState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderStateByID(
			DeactivatePurchaseOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderStateByID(
			DeletePurchaseOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StateModel>> GetPurchaseOrderStateByID(
			GetPurchaseOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StateModel>(
				await CEFService.RequestAsync<GetPurchaseOrderStateByID, StateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderStateByID(
			ReactivatePurchaseOrderStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderState(
			UpdatePurchaseOrderState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderStatePagedResults>> GetPurchaseOrderStates(
			GetPurchaseOrderStates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderStatePagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderStates, PurchaseOrderStatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderStatus(
			CreatePurchaseOrderStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderStatusByID(
			DeactivatePurchaseOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderStatusByID(
			DeletePurchaseOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetPurchaseOrderStatusByID(
			GetPurchaseOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetPurchaseOrderStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderStatusByID(
			ReactivatePurchaseOrderStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderStatus(
			UpdatePurchaseOrderStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderStatusPagedResults>> GetPurchaseOrderStatuses(
			GetPurchaseOrderStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderStatusPagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderStatuses, PurchaseOrderStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPurchaseOrderTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPurchaseOrderTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePurchaseOrderType(
			CreatePurchaseOrderType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePurchaseOrderType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePurchaseOrderTypeByID(
			DeactivatePurchaseOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePurchaseOrderTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePurchaseOrderTypeByID(
			DeletePurchaseOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePurchaseOrderTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetPurchaseOrderTypeByID(
			GetPurchaseOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetPurchaseOrderTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePurchaseOrderTypeByID(
			ReactivatePurchaseOrderTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePurchaseOrderTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePurchaseOrderType(
			UpdatePurchaseOrderType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePurchaseOrderType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PurchaseOrderTypePagedResults>> GetPurchaseOrderTypes(
			GetPurchaseOrderTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PurchaseOrderTypePagedResults>(
				await CEFService.RequestAsync<GetPurchaseOrderTypes, PurchaseOrderTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesOrderPurchaseOrderCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesOrderPurchaseOrderCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesOrderPurchaseOrder(
			CreateSalesOrderPurchaseOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesOrderPurchaseOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesOrderPurchaseOrderByID(
			DeactivateSalesOrderPurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesOrderPurchaseOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesOrderPurchaseOrderByID(
			DeleteSalesOrderPurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesOrderPurchaseOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPurchaseOrderModel>> GetSalesOrderPurchaseOrderByID(
			GetSalesOrderPurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPurchaseOrderModel>(
				await CEFService.RequestAsync<GetSalesOrderPurchaseOrderByID, SalesOrderPurchaseOrderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesOrderPurchaseOrderByID(
			ReactivateSalesOrderPurchaseOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesOrderPurchaseOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesOrderPurchaseOrder(
			UpdateSalesOrderPurchaseOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesOrderPurchaseOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesOrderPurchaseOrderPagedResults>> GetSalesOrderPurchaseOrders(
			GetSalesOrderPurchaseOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesOrderPurchaseOrderPagedResults>(
				await CEFService.RequestAsync<GetSalesOrderPurchaseOrders, SalesOrderPurchaseOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAnswerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAnswerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAnswer(
			CreateAnswer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAnswer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAnswerByID(
			DeactivateAnswerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAnswerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAnswerByID(
			DeleteAnswerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAnswerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AnswerModel>> GetAnswerByID(
			GetAnswerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AnswerModel>(
				await CEFService.RequestAsync<GetAnswerByID, AnswerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAnswerByID(
			ReactivateAnswerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAnswerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAnswer(
			UpdateAnswer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAnswer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AnswerPagedResults>> GetAnswers(
			GetAnswers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AnswerPagedResults>(
				await CEFService.RequestAsync<GetAnswers, AnswerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> SecureCreateAnswers(
			SecureCreateAnswers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<SecureCreateAnswers, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<bool>>> CheckIfQuestionnaireIsAnswered(
			CheckIfQuestionnaireIsAnswered request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<bool>>(
				await CEFService.RequestAsync<CheckIfQuestionnaireIsAnswered, CEFActionResponse<bool>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearQuestionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearQuestionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateQuestion(
			CreateQuestion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateQuestion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateQuestionByID(
			DeactivateQuestionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateQuestionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteQuestionByID(
			DeleteQuestionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteQuestionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<QuestionModel>> GetQuestionByID(
			GetQuestionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<QuestionModel>(
				await CEFService.RequestAsync<GetQuestionByID, QuestionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateQuestionByID(
			ReactivateQuestionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateQuestionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateQuestion(
			UpdateQuestion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateQuestion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearQuestionOptionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearQuestionOptionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateQuestionOption(
			CreateQuestionOption request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateQuestionOption, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateQuestionOptionByID(
			DeactivateQuestionOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateQuestionOptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteQuestionOptionByID(
			DeleteQuestionOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteQuestionOptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<QuestionOptionModel>> GetQuestionOptionByID(
			GetQuestionOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<QuestionOptionModel>(
				await CEFService.RequestAsync<GetQuestionOptionByID, QuestionOptionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateQuestionOptionByID(
			ReactivateQuestionOptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateQuestionOptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateQuestionOption(
			UpdateQuestionOption request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateQuestionOption, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<QuestionOptionPagedResults>> GetQuestionOptions(
			GetQuestionOptions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<QuestionOptionPagedResults>(
				await CEFService.RequestAsync<GetQuestionOptions, QuestionOptionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<QuestionPagedResults>> GetQuestions(
			GetQuestions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<QuestionPagedResults>(
				await CEFService.RequestAsync<GetQuestions, QuestionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearQuestionTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearQuestionTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateQuestionType(
			CreateQuestionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateQuestionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateQuestionTypeByID(
			DeactivateQuestionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateQuestionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteQuestionTypeByID(
			DeleteQuestionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteQuestionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetQuestionTypeByID(
			GetQuestionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetQuestionTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateQuestionTypeByID(
			ReactivateQuestionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateQuestionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateQuestionType(
			UpdateQuestionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateQuestionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<QuestionTypePagedResults>> GetQuestionTypes(
			GetQuestionTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<QuestionTypePagedResults>(
				await CEFService.RequestAsync<GetQuestionTypes, QuestionTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuote(
			CreateSalesQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuote, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteByID(
			DeactivateSalesQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteByID(
			DeleteSalesQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteExistsByKey(
			CheckSalesQuoteExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteModel>> GetSalesQuoteByID(
			GetSalesQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteModel>(
				await CEFService.RequestAsync<GetSalesQuoteByID, SalesQuoteModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteByID(
			ReactivateSalesQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuote(
			UpdateSalesQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuote, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertSalesQuote(
			UpsertSalesQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertSalesQuote, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteCategoryPagedResults>> GetSalesQuoteCategories(
			GetSalesQuoteCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteCategoryPagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteCategories, SalesQuoteCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteCategory(
			CreateSalesQuoteCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteCategoryByID(
			DeactivateSalesQuoteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteCategoryByID(
			DeleteSalesQuoteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteCategoryModel>> GetSalesQuoteCategoryByID(
			GetSalesQuoteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteCategoryModel>(
				await CEFService.RequestAsync<GetSalesQuoteCategoryByID, SalesQuoteCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteCategoryByID(
			ReactivateSalesQuoteCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteCategory(
			UpdateSalesQuoteCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteContact(
			CreateSalesQuoteContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteContactByID(
			DeactivateSalesQuoteContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteContactByID(
			DeleteSalesQuoteContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteContactModel>> GetSalesQuoteContactByID(
			GetSalesQuoteContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteContactModel>(
				await CEFService.RequestAsync<GetSalesQuoteContactByID, SalesQuoteContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteContactByID(
			ReactivateSalesQuoteContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteContact(
			UpdateSalesQuoteContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteContactPagedResults>> GetSalesQuoteContacts(
			GetSalesQuoteContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteContactPagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteContacts, SalesQuoteContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteEvent(
			CreateSalesQuoteEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteEventByID(
			DeactivateSalesQuoteEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteEventByID(
			DeleteSalesQuoteEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteEventModel>> GetSalesQuoteEventByID(
			GetSalesQuoteEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteEventModel>(
				await CEFService.RequestAsync<GetSalesQuoteEventByID, SalesQuoteEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteEventByID(
			ReactivateSalesQuoteEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteEvent(
			UpdateSalesQuoteEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteEventPagedResults>> GetSalesQuoteEvents(
			GetSalesQuoteEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteEventPagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteEvents, SalesQuoteEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteEventType(
			CreateSalesQuoteEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteEventTypeByID(
			DeactivateSalesQuoteEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteEventTypeByID(
			DeleteSalesQuoteEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesQuoteEventTypeByID(
			GetSalesQuoteEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesQuoteEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteEventTypeByID(
			ReactivateSalesQuoteEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteEventType(
			UpdateSalesQuoteEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteEventTypePagedResults>> GetSalesQuoteEventTypes(
			GetSalesQuoteEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteEventTypePagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteEventTypes, SalesQuoteEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteFile(
			CreateSalesQuoteFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteFileByID(
			DeactivateSalesQuoteFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteFileByID(
			DeleteSalesQuoteFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteFileModel>> GetSalesQuoteFileByID(
			GetSalesQuoteFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteFileModel>(
				await CEFService.RequestAsync<GetSalesQuoteFileByID, SalesQuoteFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteFileByID(
			ReactivateSalesQuoteFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteFile(
			UpdateSalesQuoteFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteFilePagedResults>> GetSalesQuoteFiles(
			GetSalesQuoteFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteFilePagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteFiles, SalesQuoteFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteItemCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteItemCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteItem(
			CreateSalesQuoteItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteItemByID(
			DeactivateSalesQuoteItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteItemByID(
			DeleteSalesQuoteItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>>> GetSalesQuoteItemByID(
			GetSalesQuoteItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>>(
				await CEFService.RequestAsync<GetSalesQuoteItemByID, SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteItemByID(
			ReactivateSalesQuoteItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteItem(
			UpdateSalesQuoteItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteItemPagedResults>> GetSalesQuoteItems(
			GetSalesQuoteItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteItemPagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteItems, SalesQuoteItemPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteItemTargetCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteItemTargetCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteItemTarget(
			CreateSalesQuoteItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteItemTargetByID(
			DeactivateSalesQuoteItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteItemTargetByID(
			DeleteSalesQuoteItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetBaseModel>> GetSalesQuoteItemTargetByID(
			GetSalesQuoteItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetBaseModel>(
				await CEFService.RequestAsync<GetSalesQuoteItemTargetByID, SalesItemTargetBaseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteItemTargetByID(
			ReactivateSalesQuoteItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteItemTarget(
			UpdateSalesQuoteItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteItemTargetPagedResults>> GetSalesQuoteItemTargets(
			GetSalesQuoteItemTargets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteItemTargetPagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteItemTargets, SalesQuoteItemTargetPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuotePagedResults>> GetSalesQuotes(
			GetSalesQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuotePagedResults>(
				await CEFService.RequestAsync<GetSalesQuotes, SalesQuotePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteSalesOrderCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteSalesOrderCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteSalesOrder(
			CreateSalesQuoteSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteSalesOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteSalesOrderByID(
			DeactivateSalesQuoteSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteSalesOrderByID(
			DeleteSalesQuoteSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteSalesOrderModel>> GetSalesQuoteSalesOrderByID(
			GetSalesQuoteSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteSalesOrderModel>(
				await CEFService.RequestAsync<GetSalesQuoteSalesOrderByID, SalesQuoteSalesOrderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteSalesOrderByID(
			ReactivateSalesQuoteSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteSalesOrder(
			UpdateSalesQuoteSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteSalesOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteSalesOrderPagedResults>> GetSalesQuoteSalesOrders(
			GetSalesQuoteSalesOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteSalesOrderPagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteSalesOrders, SalesQuoteSalesOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteStateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteStateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteState(
			CreateSalesQuoteState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteStateByID(
			DeactivateSalesQuoteStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteStateByID(
			DeleteSalesQuoteStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteStateExistsByDisplayName(
			CheckSalesQuoteStateExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteStateExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteStateExistsByKey(
			CheckSalesQuoteStateExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteStateExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteStateExistsByName(
			CheckSalesQuoteStateExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteStateExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StateModel>> GetSalesQuoteStateByID(
			GetSalesQuoteStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StateModel>(
				await CEFService.RequestAsync<GetSalesQuoteStateByID, StateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteStateByID(
			ReactivateSalesQuoteStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteState(
			UpdateSalesQuoteState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteStatePagedResults>> GetSalesQuoteStates(
			GetSalesQuoteStates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteStatePagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteStates, SalesQuoteStatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteStatus(
			CreateSalesQuoteStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteStatusByID(
			DeactivateSalesQuoteStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteStatusByID(
			DeleteSalesQuoteStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteStatusExistsByDisplayName(
			CheckSalesQuoteStatusExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteStatusExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteStatusExistsByID(
			CheckSalesQuoteStatusExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteStatusExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteStatusExistsByKey(
			CheckSalesQuoteStatusExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteStatusExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteStatusExistsByName(
			CheckSalesQuoteStatusExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteStatusExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetSalesQuoteStatusByID(
			GetSalesQuoteStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetSalesQuoteStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteStatusByID(
			ReactivateSalesQuoteStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteStatus(
			UpdateSalesQuoteStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteStatusPagedResults>> GetSalesQuoteStatuses(
			GetSalesQuoteStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteStatusPagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteStatuses, SalesQuoteStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesQuoteTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesQuoteTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesQuoteType(
			CreateSalesQuoteType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesQuoteType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesQuoteTypeByID(
			DeactivateSalesQuoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesQuoteTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesQuoteTypeByID(
			DeleteSalesQuoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesQuoteTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteTypeExistsByDisplayName(
			CheckSalesQuoteTypeExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteTypeExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteTypeExistsByKey(
			CheckSalesQuoteTypeExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteTypeExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesQuoteTypeExistsByName(
			CheckSalesQuoteTypeExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesQuoteTypeExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesQuoteTypeByID(
			GetSalesQuoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesQuoteTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesQuoteTypeByID(
			ReactivateSalesQuoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesQuoteTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesQuoteType(
			UpdateSalesQuoteType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesQuoteType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesQuoteTypePagedResults>> GetSalesQuoteTypes(
			GetSalesQuoteTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesQuoteTypePagedResults>(
				await CEFService.RequestAsync<GetSalesQuoteTypes, SalesQuoteTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearReportTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearReportTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateReportType(
			CreateReportType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateReportType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateReportTypeByID(
			DeactivateReportTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateReportTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteReportTypeByID(
			DeleteReportTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteReportTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReportTypeModel>> GetReportTypeByID(
			GetReportTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReportTypeModel>(
				await CEFService.RequestAsync<GetReportTypeByID, ReportTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateReportTypeByID(
			ReactivateReportTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateReportTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateReportType(
			UpdateReportType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateReportType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReportTypePagedResults>> GetReportTypes(
			GetReportTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReportTypePagedResults>(
				await CEFService.RequestAsync<GetReportTypes, ReportTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturn(
			CreateSalesReturn request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturn, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnByID(
			DeactivateSalesReturnByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnByID(
			DeleteSalesReturnByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnModel>> GetSalesReturnByID(
			GetSalesReturnByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnModel>(
				await CEFService.RequestAsync<GetSalesReturnByID, SalesReturnModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnByID(
			ReactivateSalesReturnByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturn(
			UpdateSalesReturn request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturn, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnContact(
			CreateSalesReturnContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnContactByID(
			DeactivateSalesReturnContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnContactByID(
			DeleteSalesReturnContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnContactModel>> GetSalesReturnContactByID(
			GetSalesReturnContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnContactModel>(
				await CEFService.RequestAsync<GetSalesReturnContactByID, SalesReturnContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnContactByID(
			ReactivateSalesReturnContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnContact(
			UpdateSalesReturnContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnContactPagedResults>> GetSalesReturnContacts(
			GetSalesReturnContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnContactPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnContacts, SalesReturnContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnEvent(
			CreateSalesReturnEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnEventByID(
			DeactivateSalesReturnEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnEventByID(
			DeleteSalesReturnEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnEventModel>> GetSalesReturnEventByID(
			GetSalesReturnEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnEventModel>(
				await CEFService.RequestAsync<GetSalesReturnEventByID, SalesReturnEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnEventByID(
			ReactivateSalesReturnEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnEvent(
			UpdateSalesReturnEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnEventPagedResults>> GetSalesReturnEvents(
			GetSalesReturnEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnEventPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnEvents, SalesReturnEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnEventType(
			CreateSalesReturnEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnEventTypeByID(
			DeactivateSalesReturnEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnEventTypeByID(
			DeleteSalesReturnEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesReturnEventTypeByID(
			GetSalesReturnEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesReturnEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnEventTypeByID(
			ReactivateSalesReturnEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnEventType(
			UpdateSalesReturnEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnEventTypePagedResults>> GetSalesReturnEventTypes(
			GetSalesReturnEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnEventTypePagedResults>(
				await CEFService.RequestAsync<GetSalesReturnEventTypes, SalesReturnEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnFile(
			CreateSalesReturnFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnFileByID(
			DeactivateSalesReturnFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnFileByID(
			DeleteSalesReturnFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnFileModel>> GetSalesReturnFileByID(
			GetSalesReturnFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnFileModel>(
				await CEFService.RequestAsync<GetSalesReturnFileByID, SalesReturnFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnFileByID(
			ReactivateSalesReturnFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnFile(
			UpdateSalesReturnFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnFilePagedResults>> GetSalesReturnFiles(
			GetSalesReturnFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnFilePagedResults>(
				await CEFService.RequestAsync<GetSalesReturnFiles, SalesReturnFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnItemCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnItemCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnItem(
			CreateSalesReturnItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnItemByID(
			DeactivateSalesReturnItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnItemByID(
			DeleteSalesReturnItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>>> GetSalesReturnItemByID(
			GetSalesReturnItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>>(
				await CEFService.RequestAsync<GetSalesReturnItemByID, SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnItemByID(
			ReactivateSalesReturnItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnItem(
			UpdateSalesReturnItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnItemPagedResults>> GetSalesReturnItems(
			GetSalesReturnItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnItemPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnItems, SalesReturnItemPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnItemTargetCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnItemTargetCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnItemTarget(
			CreateSalesReturnItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnItemTargetByID(
			DeactivateSalesReturnItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnItemTargetByID(
			DeleteSalesReturnItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetBaseModel>> GetSalesReturnItemTargetByID(
			GetSalesReturnItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetBaseModel>(
				await CEFService.RequestAsync<GetSalesReturnItemTargetByID, SalesItemTargetBaseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnItemTargetByID(
			ReactivateSalesReturnItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnItemTarget(
			UpdateSalesReturnItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnItemTargetPagedResults>> GetSalesReturnItemTargets(
			GetSalesReturnItemTargets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnItemTargetPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnItemTargets, SalesReturnItemTargetPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnReasonCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnReasonCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnReason(
			CreateSalesReturnReason request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnReason, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnReasonByID(
			DeactivateSalesReturnReasonByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnReasonByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnReasonByID(
			DeleteSalesReturnReasonByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnReasonByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnReasonModel>> GetSalesReturnReasonByID(
			GetSalesReturnReasonByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnReasonModel>(
				await CEFService.RequestAsync<GetSalesReturnReasonByID, SalesReturnReasonModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnReasonByID(
			ReactivateSalesReturnReasonByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnReasonByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnReason(
			UpdateSalesReturnReason request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnReason, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnReasonPagedResults>> GetSalesReturnReasons(
			GetSalesReturnReasons request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnReasonPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnReasons, SalesReturnReasonPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnPagedResults>> GetSalesReturns(
			GetSalesReturns request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnPagedResults>(
				await CEFService.RequestAsync<GetSalesReturns, SalesReturnPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnSalesOrderCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnSalesOrderCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnSalesOrder(
			CreateSalesReturnSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnSalesOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnSalesOrderByID(
			DeactivateSalesReturnSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnSalesOrderByID(
			DeleteSalesReturnSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnSalesOrderModel>> GetSalesReturnSalesOrderByID(
			GetSalesReturnSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnSalesOrderModel>(
				await CEFService.RequestAsync<GetSalesReturnSalesOrderByID, SalesReturnSalesOrderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnSalesOrderByID(
			ReactivateSalesReturnSalesOrderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnSalesOrderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnSalesOrder(
			UpdateSalesReturnSalesOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnSalesOrder, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnSalesOrderPagedResults>> GetSalesReturnSalesOrders(
			GetSalesReturnSalesOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnSalesOrderPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnSalesOrders, SalesReturnSalesOrderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnStateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnStateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnState(
			CreateSalesReturnState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnStateByID(
			DeactivateSalesReturnStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnStateByID(
			DeleteSalesReturnStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnStateExistsByDisplayName(
			CheckSalesReturnStateExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnStateExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnStateExistsByKey(
			CheckSalesReturnStateExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnStateExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnStateExistsByName(
			CheckSalesReturnStateExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnStateExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StateModel>> GetSalesReturnStateByID(
			GetSalesReturnStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StateModel>(
				await CEFService.RequestAsync<GetSalesReturnStateByID, StateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnStateByID(
			ReactivateSalesReturnStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnState(
			UpdateSalesReturnState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnStatePagedResults>> GetSalesReturnStates(
			GetSalesReturnStates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnStatePagedResults>(
				await CEFService.RequestAsync<GetSalesReturnStates, SalesReturnStatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnStatus(
			CreateSalesReturnStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnStatusByID(
			DeactivateSalesReturnStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnStatusByID(
			DeleteSalesReturnStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnStatusExistsByDisplayName(
			CheckSalesReturnStatusExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnStatusExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnStatusExistsByKey(
			CheckSalesReturnStatusExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnStatusExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnStatusExistsByName(
			CheckSalesReturnStatusExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnStatusExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetSalesReturnStatusByID(
			GetSalesReturnStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetSalesReturnStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnStatusByID(
			ReactivateSalesReturnStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnStatus(
			UpdateSalesReturnStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnStatusPagedResults>> GetSalesReturnStatuses(
			GetSalesReturnStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnStatusPagedResults>(
				await CEFService.RequestAsync<GetSalesReturnStatuses, SalesReturnStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesReturnTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesReturnTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesReturnType(
			CreateSalesReturnType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesReturnType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesReturnTypeByID(
			DeactivateSalesReturnTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesReturnTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesReturnTypeByID(
			DeleteSalesReturnTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesReturnTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnTypeExistsByDisplayName(
			CheckSalesReturnTypeExistsByDisplayName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnTypeExistsByDisplayName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnTypeExistsByKey(
			CheckSalesReturnTypeExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnTypeExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckSalesReturnTypeExistsByName(
			CheckSalesReturnTypeExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckSalesReturnTypeExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesReturnTypeByID(
			GetSalesReturnTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesReturnTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesReturnTypeByID(
			ReactivateSalesReturnTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesReturnTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesReturnType(
			UpdateSalesReturnType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesReturnType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesReturnTypePagedResults>> GetSalesReturnTypes(
			GetSalesReturnTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesReturnTypePagedResults>(
				await CEFService.RequestAsync<GetSalesReturnTypes, SalesReturnTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ApproveReview(
			ApproveReview request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ApproveReview, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearReviewCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearReviewCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateReview(
			CreateReview request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateReview, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateReviewByID(
			DeactivateReviewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateReviewByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteReviewByID(
			DeleteReviewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteReviewByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReviewModel>> GetReviewByID(
			GetReviewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReviewModel>(
				await CEFService.RequestAsync<GetReviewByID, ReviewModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateReviewByID(
			ReactivateReviewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateReviewByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> UnapproveReview(
			UnapproveReview request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<UnapproveReview, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateReview(
			UpdateReview request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateReview, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReviewPagedResults>> GetReviews(
			GetReviews request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReviewPagedResults>(
				await CEFService.RequestAsync<GetReviews, ReviewPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearReviewTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearReviewTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateReviewType(
			CreateReviewType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateReviewType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateReviewTypeByID(
			DeactivateReviewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateReviewTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteReviewTypeByID(
			DeleteReviewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteReviewTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetReviewTypeByID(
			GetReviewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetReviewTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateReviewTypeByID(
			ReactivateReviewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateReviewTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateReviewType(
			UpdateReviewType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateReviewType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ReviewTypePagedResults>> GetReviewTypes(
			GetReviewTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ReviewTypePagedResults>(
				await CEFService.RequestAsync<GetReviewTypes, ReviewTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesGroupPagedResults>> GetCurrentAccountSalesGroups(
			GetCurrentAccountSalesGroups request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesGroupPagedResults>(
				await CEFService.RequestAsync<GetCurrentAccountSalesGroups, SalesGroupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesGroupCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesGroupCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesGroup(
			CreateSalesGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesGroupByID(
			DeactivateSalesGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesGroupByID(
			DeleteSalesGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesGroupModel>> GetSalesGroupByID(
			GetSalesGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesGroupModel>(
				await CEFService.RequestAsync<GetSalesGroupByID, SalesGroupModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesGroupByID(
			ReactivateSalesGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesGroup(
			UpdateSalesGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesGroupPagedResults>> GetSalesGroups(
			GetSalesGroups request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesGroupPagedResults>(
				await CEFService.RequestAsync<GetSalesGroups, SalesGroupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSalesItemTargetTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSalesItemTargetTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSalesItemTargetType(
			CreateSalesItemTargetType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSalesItemTargetType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSalesItemTargetTypeByID(
			DeactivateSalesItemTargetTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSalesItemTargetTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSalesItemTargetTypeByID(
			DeleteSalesItemTargetTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSalesItemTargetTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSalesItemTargetTypeByID(
			GetSalesItemTargetTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSalesItemTargetTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSalesItemTargetTypeByID(
			ReactivateSalesItemTargetTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSalesItemTargetTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSalesItemTargetType(
			UpdateSalesItemTargetType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSalesItemTargetType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetTypePagedResults>> GetSalesItemTargetTypes(
			GetSalesItemTargetTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetTypePagedResults>(
				await CEFService.RequestAsync<GetSalesItemTargetTypes, SalesItemTargetTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesGroupModel>> GetSecureSalesGroup(
			GetSecureSalesGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesGroupModel>(
				await CEFService.RequestAsync<GetSecureSalesGroup, SalesGroupModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequest(
			CreateSampleRequest request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequest, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestByID(
			DeactivateSampleRequestByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestByID(
			DeleteSampleRequestByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestModel>> GetSampleRequestByID(
			GetSampleRequestByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestModel>(
				await CEFService.RequestAsync<GetSampleRequestByID, SampleRequestModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestByID(
			ReactivateSampleRequestByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequest(
			UpdateSampleRequest request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequest, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestContact(
			CreateSampleRequestContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestContactByID(
			DeactivateSampleRequestContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestContactByID(
			DeleteSampleRequestContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestContactModel>> GetSampleRequestContactByID(
			GetSampleRequestContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestContactModel>(
				await CEFService.RequestAsync<GetSampleRequestContactByID, SampleRequestContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestContactByID(
			ReactivateSampleRequestContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestContact(
			UpdateSampleRequestContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestContactPagedResults>> GetSampleRequestContacts(
			GetSampleRequestContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestContactPagedResults>(
				await CEFService.RequestAsync<GetSampleRequestContacts, SampleRequestContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestEvent(
			CreateSampleRequestEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestEventByID(
			DeactivateSampleRequestEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestEventByID(
			DeleteSampleRequestEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestEventModel>> GetSampleRequestEventByID(
			GetSampleRequestEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestEventModel>(
				await CEFService.RequestAsync<GetSampleRequestEventByID, SampleRequestEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestEventByID(
			ReactivateSampleRequestEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestEvent(
			UpdateSampleRequestEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestEventPagedResults>> GetSampleRequestEvents(
			GetSampleRequestEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestEventPagedResults>(
				await CEFService.RequestAsync<GetSampleRequestEvents, SampleRequestEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestEventType(
			CreateSampleRequestEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestEventTypeByID(
			DeactivateSampleRequestEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestEventTypeByID(
			DeleteSampleRequestEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSampleRequestEventTypeByID(
			GetSampleRequestEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSampleRequestEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestEventTypeByID(
			ReactivateSampleRequestEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestEventType(
			UpdateSampleRequestEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestEventTypePagedResults>> GetSampleRequestEventTypes(
			GetSampleRequestEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestEventTypePagedResults>(
				await CEFService.RequestAsync<GetSampleRequestEventTypes, SampleRequestEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestFile(
			CreateSampleRequestFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestFileByID(
			DeactivateSampleRequestFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestFileByID(
			DeleteSampleRequestFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestFileModel>> GetSampleRequestFileByID(
			GetSampleRequestFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestFileModel>(
				await CEFService.RequestAsync<GetSampleRequestFileByID, SampleRequestFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestFileByID(
			ReactivateSampleRequestFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestFile(
			UpdateSampleRequestFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestFilePagedResults>> GetSampleRequestFiles(
			GetSampleRequestFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestFilePagedResults>(
				await CEFService.RequestAsync<GetSampleRequestFiles, SampleRequestFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestItemCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestItemCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestItem(
			CreateSampleRequestItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestItemByID(
			DeactivateSampleRequestItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestItemByID(
			DeleteSampleRequestItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>>> GetSampleRequestItemByID(
			GetSampleRequestItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>>(
				await CEFService.RequestAsync<GetSampleRequestItemByID, SalesItemBaseModel<IAppliedSampleRequestItemDiscountModel, AppliedSampleRequestItemDiscountModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestItemByID(
			ReactivateSampleRequestItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestItem(
			UpdateSampleRequestItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestItemPagedResults>> GetSampleRequestItems(
			GetSampleRequestItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestItemPagedResults>(
				await CEFService.RequestAsync<GetSampleRequestItems, SampleRequestItemPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestItemTargetCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestItemTargetCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestItemTarget(
			CreateSampleRequestItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestItemTargetByID(
			DeactivateSampleRequestItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestItemTargetByID(
			DeleteSampleRequestItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetBaseModel>> GetSampleRequestItemTargetByID(
			GetSampleRequestItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetBaseModel>(
				await CEFService.RequestAsync<GetSampleRequestItemTargetByID, SalesItemTargetBaseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestItemTargetByID(
			ReactivateSampleRequestItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestItemTarget(
			UpdateSampleRequestItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestItemTargetPagedResults>> GetSampleRequestItemTargets(
			GetSampleRequestItemTargets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestItemTargetPagedResults>(
				await CEFService.RequestAsync<GetSampleRequestItemTargets, SampleRequestItemTargetPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestPagedResults>> GetSampleRequests(
			GetSampleRequests request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestPagedResults>(
				await CEFService.RequestAsync<GetSampleRequests, SampleRequestPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestStateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestStateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestState(
			CreateSampleRequestState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestStateByID(
			DeactivateSampleRequestStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestStateByID(
			DeleteSampleRequestStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StateModel>> GetSampleRequestStateByID(
			GetSampleRequestStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StateModel>(
				await CEFService.RequestAsync<GetSampleRequestStateByID, StateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestStateByID(
			ReactivateSampleRequestStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestState(
			UpdateSampleRequestState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestStatePagedResults>> GetSampleRequestStates(
			GetSampleRequestStates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestStatePagedResults>(
				await CEFService.RequestAsync<GetSampleRequestStates, SampleRequestStatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestStatus(
			CreateSampleRequestStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestStatusByID(
			DeactivateSampleRequestStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestStatusByID(
			DeleteSampleRequestStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetSampleRequestStatusByID(
			GetSampleRequestStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetSampleRequestStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestStatusByID(
			ReactivateSampleRequestStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestStatus(
			UpdateSampleRequestStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestStatusPagedResults>> GetSampleRequestStatuses(
			GetSampleRequestStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestStatusPagedResults>(
				await CEFService.RequestAsync<GetSampleRequestStatuses, SampleRequestStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSampleRequestTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSampleRequestTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSampleRequestType(
			CreateSampleRequestType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSampleRequestType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSampleRequestTypeByID(
			DeactivateSampleRequestTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSampleRequestTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSampleRequestTypeByID(
			DeleteSampleRequestTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSampleRequestTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSampleRequestTypeByID(
			GetSampleRequestTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSampleRequestTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSampleRequestTypeByID(
			ReactivateSampleRequestTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSampleRequestTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSampleRequestType(
			UpdateSampleRequestType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSampleRequestType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SampleRequestTypePagedResults>> GetSampleRequestTypes(
			GetSampleRequestTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SampleRequestTypePagedResults>(
				await CEFService.RequestAsync<GetSampleRequestTypes, SampleRequestTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppointmentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppointmentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppointment(
			CreateAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppointment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppointmentByID(
			DeactivateAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppointmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppointmentByID(
			DeleteAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppointmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppointmentModel>> GetAppointmentByID(
			GetAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppointmentModel>(
				await CEFService.RequestAsync<GetAppointmentByID, AppointmentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppointmentByID(
			ReactivateAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppointmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppointment(
			UpdateAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppointment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppointmentPagedResults>> GetAppointments(
			GetAppointments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppointmentPagedResults>(
				await CEFService.RequestAsync<GetAppointments, AppointmentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppointmentStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppointmentStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppointmentStatus(
			CreateAppointmentStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppointmentStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppointmentStatusByID(
			DeactivateAppointmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppointmentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppointmentStatusByID(
			DeleteAppointmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppointmentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetAppointmentStatusByID(
			GetAppointmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetAppointmentStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppointmentStatusByID(
			ReactivateAppointmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppointmentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppointmentStatus(
			UpdateAppointmentStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppointmentStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppointmentStatusPagedResults>> GetAppointmentStatuses(
			GetAppointmentStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppointmentStatusPagedResults>(
				await CEFService.RequestAsync<GetAppointmentStatuses, AppointmentStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearAppointmentTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearAppointmentTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateAppointmentType(
			CreateAppointmentType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateAppointmentType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateAppointmentTypeByID(
			DeactivateAppointmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateAppointmentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteAppointmentTypeByID(
			DeleteAppointmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteAppointmentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetAppointmentTypeByID(
			GetAppointmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetAppointmentTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateAppointmentTypeByID(
			ReactivateAppointmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateAppointmentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateAppointmentType(
			UpdateAppointmentType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateAppointmentType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<AppointmentTypePagedResults>> GetAppointmentTypes(
			GetAppointmentTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<AppointmentTypePagedResults>(
				await CEFService.RequestAsync<GetAppointmentTypes, AppointmentTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendar(
			CreateCalendar request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendar, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarByID(
			DeactivateCalendarByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarByID(
			DeleteCalendarByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarModel>> GetCalendarByID(
			GetCalendarByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarModel>(
				await CEFService.RequestAsync<GetCalendarByID, CalendarModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarByID(
			ReactivateCalendarByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendar(
			UpdateCalendar request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendar, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCalendarAppointmentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCalendarAppointmentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCalendarAppointment(
			CreateCalendarAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCalendarAppointment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCalendarAppointmentByID(
			DeactivateCalendarAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCalendarAppointmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCalendarAppointmentByID(
			DeleteCalendarAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCalendarAppointmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarAppointmentModel>> GetCalendarAppointmentByID(
			GetCalendarAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarAppointmentModel>(
				await CEFService.RequestAsync<GetCalendarAppointmentByID, CalendarAppointmentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCalendarAppointmentByID(
			ReactivateCalendarAppointmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCalendarAppointmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCalendarAppointment(
			UpdateCalendarAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCalendarAppointment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarAppointmentPagedResults>> GetCalendarAppointments(
			GetCalendarAppointments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarAppointmentPagedResults>(
				await CEFService.RequestAsync<GetCalendarAppointments, CalendarAppointmentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CalendarPagedResults>> GetCalendars(
			GetCalendars request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CalendarPagedResults>(
				await CEFService.RequestAsync<GetCalendars, CalendarPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CancelAppointment(
			CancelAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CancelAppointment, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ConfirmAppointment(
			ConfirmAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ConfirmAppointment, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<AppointmentModel>>>> GetCurrentAccountAppointments(
			GetCurrentAccountAppointments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<AppointmentModel>>>(
				await CEFService.RequestAsync<GetCurrentAccountAppointments, CEFActionResponse<List<AppointmentModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> ReserveAppointment(
			ReserveAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<ReserveAppointment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<AppointmentModel>>> GetSecureAppointment(
			GetSecureAppointment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<AppointmentModel>>(
				await CEFService.RequestAsync<GetSecureAppointment, CEFActionResponse<AppointmentModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearScoutCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearScoutCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateScout(
			CreateScout request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateScout, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateScoutByID(
			DeactivateScoutByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateScoutByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteScoutByID(
			DeleteScoutByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteScoutByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScoutModel>> GetScoutByID(
			GetScoutByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScoutModel>(
				await CEFService.RequestAsync<GetScoutByID, ScoutModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateScoutByID(
			ReactivateScoutByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateScoutByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateScout(
			UpdateScout request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateScout, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScoutCategoryPagedResults>> GetScoutCategories(
			GetScoutCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScoutCategoryPagedResults>(
				await CEFService.RequestAsync<GetScoutCategories, ScoutCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearScoutCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearScoutCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateScoutCategory(
			CreateScoutCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateScoutCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateScoutCategoryByID(
			DeactivateScoutCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateScoutCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteScoutCategoryByID(
			DeleteScoutCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteScoutCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScoutCategoryModel>> GetScoutCategoryByID(
			GetScoutCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScoutCategoryModel>(
				await CEFService.RequestAsync<GetScoutCategoryByID, ScoutCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateScoutCategoryByID(
			ReactivateScoutCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateScoutCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateScoutCategory(
			UpdateScoutCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateScoutCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearScoutCategoryTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearScoutCategoryTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateScoutCategoryType(
			CreateScoutCategoryType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateScoutCategoryType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateScoutCategoryTypeByID(
			DeactivateScoutCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateScoutCategoryTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteScoutCategoryTypeByID(
			DeleteScoutCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteScoutCategoryTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetScoutCategoryTypeByID(
			GetScoutCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetScoutCategoryTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateScoutCategoryTypeByID(
			ReactivateScoutCategoryTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateScoutCategoryTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateScoutCategoryType(
			UpdateScoutCategoryType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateScoutCategoryType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScoutCategoryTypePagedResults>> GetScoutCategoryTypes(
			GetScoutCategoryTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScoutCategoryTypePagedResults>(
				await CEFService.RequestAsync<GetScoutCategoryTypes, ScoutCategoryTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ScoutPagedResults>> GetScouts(
			GetScouts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ScoutPagedResults>(
				await CEFService.RequestAsync<GetScouts, ScoutPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPackageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPackageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePackage(
			CreatePackage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePackage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePackageByID(
			DeactivatePackageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePackageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePackageByID(
			DeletePackageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePackageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PackageModel>> GetPackageByID(
			GetPackageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PackageModel>(
				await CEFService.RequestAsync<GetPackageByID, PackageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePackageByID(
			ReactivatePackageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePackageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePackage(
			UpdatePackage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePackage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || MANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PackagePagedResults>> GetPackages(
			GetPackages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PackagePagedResults>(
				await CEFService.RequestAsync<GetPackages, PackagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPackageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPackageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePackageType(
			CreatePackageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePackageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePackageTypeByID(
			DeactivatePackageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePackageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePackageTypeByID(
			DeletePackageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePackageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetPackageTypeByID(
			GetPackageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetPackageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePackageTypeByID(
			ReactivatePackageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePackageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePackageType(
			UpdatePackageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePackageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PackageTypePagedResults>> GetPackageTypes(
			GetPackageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PackageTypePagedResults>(
				await CEFService.RequestAsync<GetPackageTypes, PackageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRateQuoteCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRateQuoteCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRateQuote(
			CreateRateQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRateQuote, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRateQuoteByID(
			DeactivateRateQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRateQuoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRateQuoteByID(
			DeleteRateQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRateQuoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RateQuoteModel>> GetRateQuoteByID(
			GetRateQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RateQuoteModel>(
				await CEFService.RequestAsync<GetRateQuoteByID, RateQuoteModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRateQuoteByID(
			ReactivateRateQuoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRateQuoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRateQuote(
			UpdateRateQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRateQuote, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RateQuotePagedResults>> GetRateQuotes(
			GetRateQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RateQuotePagedResults>(
				await CEFService.RequestAsync<GetRateQuotes, RateQuotePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearShipCarrierCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearShipCarrierCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateShipCarrier(
			CreateShipCarrier request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateShipCarrier, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateShipCarrierByID(
			DeactivateShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateShipCarrierByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteShipCarrierByID(
			DeleteShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteShipCarrierByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipCarrierModel>> GetShipCarrierByID(
			GetShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipCarrierModel>(
				await CEFService.RequestAsync<GetShipCarrierByID, ShipCarrierModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateShipCarrierByID(
			ReactivateShipCarrierByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateShipCarrierByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateShipCarrier(
			UpdateShipCarrier request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateShipCarrier, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearShipCarrierMethodCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearShipCarrierMethodCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateShipCarrierMethod(
			CreateShipCarrierMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateShipCarrierMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateShipCarrierMethodByID(
			DeactivateShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteShipCarrierMethodByID(
			DeleteShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipCarrierMethodModel>> GetShipCarrierMethodByID(
			GetShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipCarrierMethodModel>(
				await CEFService.RequestAsync<GetShipCarrierMethodByID, ShipCarrierMethodModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateShipCarrierMethodByID(
			ReactivateShipCarrierMethodByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateShipCarrierMethodByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateShipCarrierMethod(
			UpdateShipCarrierMethod request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateShipCarrierMethod, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipCarrierMethodPagedResults>> GetShipCarrierMethods(
			GetShipCarrierMethods request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipCarrierMethodPagedResults>(
				await CEFService.RequestAsync<GetShipCarrierMethods, ShipCarrierMethodPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipCarrierPagedResults>> GetShipCarriers(
			GetShipCarriers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipCarrierPagedResults>(
				await CEFService.RequestAsync<GetShipCarriers, ShipCarrierPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearShipmentCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearShipmentCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateShipment(
			CreateShipment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateShipment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateShipmentByID(
			DeactivateShipmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateShipmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteShipmentByID(
			DeleteShipmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteShipmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipmentModel>> GetShipmentByID(
			GetShipmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipmentModel>(
				await CEFService.RequestAsync<GetShipmentByID, ShipmentModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateShipmentByID(
			ReactivateShipmentByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateShipmentByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateShipment(
			UpdateShipment request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateShipment, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearShipmentEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearShipmentEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateShipmentEvent(
			CreateShipmentEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateShipmentEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateShipmentEventByID(
			DeactivateShipmentEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateShipmentEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteShipmentEventByID(
			DeleteShipmentEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteShipmentEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipmentEventModel>> GetShipmentEventByID(
			GetShipmentEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipmentEventModel>(
				await CEFService.RequestAsync<GetShipmentEventByID, ShipmentEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateShipmentEventByID(
			ReactivateShipmentEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateShipmentEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateShipmentEvent(
			UpdateShipmentEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateShipmentEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipmentEventPagedResults>> GetShipmentEvents(
			GetShipmentEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipmentEventPagedResults>(
				await CEFService.RequestAsync<GetShipmentEvents, ShipmentEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipmentPagedResults>> GetShipments(
			GetShipments request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipmentPagedResults>(
				await CEFService.RequestAsync<GetShipments, ShipmentPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearShipmentStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearShipmentStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateShipmentStatus(
			CreateShipmentStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateShipmentStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateShipmentStatusByID(
			DeactivateShipmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateShipmentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteShipmentStatusByID(
			DeleteShipmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteShipmentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetShipmentStatusByID(
			GetShipmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetShipmentStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateShipmentStatusByID(
			ReactivateShipmentStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateShipmentStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateShipmentStatus(
			UpdateShipmentStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateShipmentStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipmentStatusPagedResults>> GetShipmentStatuses(
			GetShipmentStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipmentStatusPagedResults>(
				await CEFService.RequestAsync<GetShipmentStatuses, ShipmentStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearShipmentTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearShipmentTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateShipmentType(
			CreateShipmentType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateShipmentType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateShipmentTypeByID(
			DeactivateShipmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateShipmentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteShipmentTypeByID(
			DeleteShipmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteShipmentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetShipmentTypeByID(
			GetShipmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetShipmentTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateShipmentTypeByID(
			ReactivateShipmentTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateShipmentTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateShipmentType(
			UpdateShipmentType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateShipmentType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ShipmentTypePagedResults>> GetShipmentTypes(
			GetShipmentTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ShipmentTypePagedResults>(
				await CEFService.RequestAsync<GetShipmentTypes, ShipmentTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminAddCartDiscountForUser(
			AdminAddCartDiscountForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminAddCartDiscountForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminClearCartForUser(
			AdminClearCartForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminClearCartForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearHardSoftStopsCaches(
			ClearHardSoftStopsCaches request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearHardSoftStopsCaches, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<CartModel>>> AdminGetCartsForUser(
			AdminGetCartsForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<CartModel>>(
				await CEFService.RequestAsync<AdminGetCartsForUser, List<CartModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<ContactModel>>> AdminGetCartShippingContactForUser(
			AdminGetCartShippingContactForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<ContactModel>>(
				await CEFService.RequestAsync<AdminGetCartShippingContactForUser, CEFActionResponse<ContactModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<CartModel>>> AdminGetUserCartByID(
			AdminGetUserCartByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<CartModel>>(
				await CEFService.RequestAsync<AdminGetUserCartByID, CEFActionResponse<CartModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminRemoveCartDiscountForUser(
			AdminRemoveCartDiscountForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminRemoveCartDiscountForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminSetCartBillingContactForUser(
			AdminSetCartBillingContactForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminSetCartBillingContactForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminSetCartShippingContactForUser(
			AdminSetCartShippingContactForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminSetCartShippingContactForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminUpdateCartAttributesForUser(
			AdminUpdateCartAttributesForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminUpdateCartAttributesForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminUpdateUserCart(
			AdminUpdateUserCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminUpdateUserCart, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> AdminUpsertCartForUser(
			AdminUpsertCartForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<AdminUpsertCartForUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<RateQuoteModel>>>> GetCartShippingRateQuotes(
			GetCartShippingRateQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<RateQuoteModel>>>(
				await CEFService.RequestAsync<GetCartShippingRateQuotes, CEFActionResponse<List<RateQuoteModel>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int?>>> AdminAddCartItemForUser(
			AdminAddCartItemForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int?>>(
				await CEFService.RequestAsync<AdminAddCartItemForUser, CEFActionResponse<int?>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminRemoveCartItemDiscountForUser(
			AdminRemoveCartItemDiscountForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminRemoveCartItemDiscountForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> AdminRemoveCartItemByIDForUser(
			AdminRemoveCartItemByIDForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<AdminRemoveCartItemByIDForUser, bool>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<decimal>>> AdminUpdateCartItemQuantityForUser(
			AdminUpdateCartItemQuantityForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<decimal>>(
				await CEFService.RequestAsync<AdminUpdateCartItemQuantityForUser, CEFActionResponse<decimal>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>> AdminGetCartItemsForUser(
			AdminGetCartItemsForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(
				await CEFService.RequestAsync<AdminGetCartItemsForUser, List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<int?>>>> AdminAddCartItemsForUser(
			AdminAddCartItemsForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<int?>>>(
				await CEFService.RequestAsync<AdminAddCartItemsForUser, CEFActionResponse<List<int?>>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminUpdateCartItemsForUser(
			AdminUpdateCartItemsForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminUpdateCartItemsForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminClearCartShippingRateQuoteForUser(
			AdminClearCartShippingRateQuoteForUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminClearCartShippingRateQuoteForUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> BulkOrder(
			BulkOrder request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<BulkOrder, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCart(
			CreateCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCart, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartByID(
			DeactivateCartByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartByID(
			DeleteCartByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<BulkOrderHeadersModel>> GetFileHeaders(
			GetFileHeaders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<BulkOrderHeadersModel>(
				await CEFService.RequestAsync<GetFileHeaders, BulkOrderHeadersModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartModel>> GetCartByID(
			GetCartByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartModel>(
				await CEFService.RequestAsync<GetCartByID, CartModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartByID(
			ReactivateCartByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ApplyCartShippingRateQuote(
			ApplyCartShippingRateQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ApplyCartShippingRateQuote, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCart(
			UpdateCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCart, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartContact(
			CreateCartContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartContactByID(
			DeactivateCartContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartContactByID(
			DeleteCartContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartContactModel>> GetCartContactByID(
			GetCartContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartContactModel>(
				await CEFService.RequestAsync<GetCartContactByID, CartContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartContactByID(
			ReactivateCartContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartContact(
			UpdateCartContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartContactPagedResults>> GetCartContacts(
			GetCartContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartContactPagedResults>(
				await CEFService.RequestAsync<GetCartContacts, CartContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartEvent(
			CreateCartEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartEventByID(
			DeactivateCartEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartEventByID(
			DeleteCartEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartEventModel>> GetCartEventByID(
			GetCartEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartEventModel>(
				await CEFService.RequestAsync<GetCartEventByID, CartEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartEventByID(
			ReactivateCartEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartEvent(
			UpdateCartEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartEventPagedResults>> GetCartEvents(
			GetCartEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartEventPagedResults>(
				await CEFService.RequestAsync<GetCartEvents, CartEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartEventType(
			CreateCartEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartEventTypeByID(
			DeactivateCartEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartEventTypeByID(
			DeleteCartEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCartEventTypeByID(
			GetCartEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCartEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartEventTypeByID(
			ReactivateCartEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartEventType(
			UpdateCartEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartEventTypePagedResults>> GetCartEventTypes(
			GetCartEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartEventTypePagedResults>(
				await CEFService.RequestAsync<GetCartEventTypes, CartEventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartFileCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartFileCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartFile(
			CreateCartFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartFileByID(
			DeactivateCartFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartFileByID(
			DeleteCartFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartFileModel>> GetCartFileByID(
			GetCartFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartFileModel>(
				await CEFService.RequestAsync<GetCartFileByID, CartFileModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartFileByID(
			ReactivateCartFileByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartFileByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartFile(
			UpdateCartFile request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartFile, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartFilePagedResults>> GetCartFiles(
			GetCartFiles request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartFilePagedResults>(
				await CEFService.RequestAsync<GetCartFiles, CartFilePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartItemCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartItemCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartItem(
			CreateCartItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartItemByID(
			DeactivateCartItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartItemByID(
			DeleteCartItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>> GetCartItemByID(
			GetCartItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>(
				await CEFService.RequestAsync<GetCartItemByID, SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartItemByID(
			ReactivateCartItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartItemByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartItem(
			UpdateCartItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartItem, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartItemPagedResults>> GetCartItems(
			GetCartItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartItemPagedResults>(
				await CEFService.RequestAsync<GetCartItems, CartItemPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartItemTargetCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartItemTargetCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartItemTarget(
			CreateCartItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartItemTargetByID(
			DeactivateCartItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartItemTargetByID(
			DeleteCartItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SalesItemTargetBaseModel>> GetCartItemTargetByID(
			GetCartItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SalesItemTargetBaseModel>(
				await CEFService.RequestAsync<GetCartItemTargetByID, SalesItemTargetBaseModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartItemTargetByID(
			ReactivateCartItemTargetByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartItemTargetByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartItemTarget(
			UpdateCartItemTarget request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartItemTarget, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartItemTargetPagedResults>> GetCartItemTargets(
			GetCartItemTargets request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartItemTargetPagedResults>(
				await CEFService.RequestAsync<GetCartItemTargets, CartItemTargetPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartPagedResults>> GetCarts(
			GetCarts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartPagedResults>(
				await CEFService.RequestAsync<GetCarts, CartPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartStateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartStateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartState(
			CreateCartState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartStateByID(
			DeactivateCartStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartStateByID(
			DeleteCartStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StateModel>> GetCartStateByID(
			GetCartStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StateModel>(
				await CEFService.RequestAsync<GetCartStateByID, StateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartStateByID(
			ReactivateCartStateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartStateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartState(
			UpdateCartState request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartState, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartStatePagedResults>> GetCartStates(
			GetCartStates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartStatePagedResults>(
				await CEFService.RequestAsync<GetCartStates, CartStatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartStatus(
			CreateCartStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartStatusByID(
			DeactivateCartStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartStatusByID(
			DeleteCartStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetCartStatusByID(
			GetCartStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetCartStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartStatusByID(
			ReactivateCartStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartStatus(
			UpdateCartStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartStatusPagedResults>> GetCartStatuses(
			GetCartStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartStatusPagedResults>(
				await CEFService.RequestAsync<GetCartStatuses, CartStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCartTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCartTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCartType(
			CreateCartType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCartType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCartTypeByID(
			DeactivateCartTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCartTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartTypeByID(
			DeleteCartTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartTypeModel>> GetCartTypeByID(
			GetCartTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartTypeModel>(
				await CEFService.RequestAsync<GetCartTypeByID, CartTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartTypeModel>> GetCartTypeByName(
			GetCartTypeByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartTypeModel>(
				await CEFService.RequestAsync<GetCartTypeByName, CartTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCartTypeByID(
			ReactivateCartTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCartTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCartType(
			UpdateCartType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCartType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartTypePagedResults>> GetCartTypes(
			GetCartTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartTypePagedResults>(
				await CEFService.RequestAsync<GetCartTypes, CartTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<CartModel>>> GetCurrentCart(
			GetCurrentCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<CartModel>>(
				await CEFService.RequestAsync<GetCurrentCart, CEFActionResponse<CartModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> CurrentCartAddBufferFee(
			CurrentCartAddBufferFee request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<CurrentCartAddBufferFee, bool>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> AddBufferSkuCartItem(
			AddBufferSkuCartItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<AddBufferSkuCartItem, bool>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartAddDiscount(
			CurrentCartAddDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartAddDiscount, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearCurrentCart(
			ClearCurrentCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearCurrentCart, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartClearBillingContact(
			CurrentCartClearBillingContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartClearBillingContact, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartClearShippingContact(
			CurrentCartClearShippingContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartClearShippingContact, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<ContactModel>>> CurrentCartGetShippingContact(
			CurrentCartGetShippingContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<ContactModel>>(
				await CEFService.RequestAsync<CurrentCartGetShippingContact, CEFActionResponse<ContactModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int?>>> AddCartItem(
			AddCartItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int?>>(
				await CEFService.RequestAsync<AddCartItem, CEFActionResponse<int?>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RemoveCartItemDiscount(
			RemoveCartItemDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RemoveCartItemDiscount, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> RemoveCartItemByID(
			RemoveCartItemByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<RemoveCartItemByID, bool>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> RemoveCartItemByProductIDAndType(
			RemoveCartItemByProductIDAndType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<RemoveCartItemByProductIDAndType, bool>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<decimal>>> UpdateCartItemQuantity(
			UpdateCartItemQuantity request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<decimal>>(
				await CEFService.RequestAsync<UpdateCartItemQuantity, CEFActionResponse<decimal>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>> GetCurrentCartItems(
			GetCurrentCartItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(
				await CEFService.RequestAsync<GetCurrentCartItems, List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<int?>>>> AddCartItems(
			AddCartItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<int?>>>(
				await CEFService.RequestAsync<AddCartItems, CEFActionResponse<List<int?>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>> UpdateCartItems(
			UpdateCartItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(
				await CEFService.RequestAsync<UpdateCartItems, List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartRemoveDiscount(
			CurrentCartRemoveDiscount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartRemoveDiscount, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartSetBillingContact(
			CurrentCartSetBillingContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartSetBillingContact, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartSetSetSameAsBilling(
			CurrentCartSetSetSameAsBilling request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartSetSetSameAsBilling, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartSetShippingContact(
			CurrentCartSetShippingContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartSetShippingContact, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ShareCurrentCartItemsByEmail(
			ShareCurrentCartItemsByEmail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ShareCurrentCartItemsByEmail, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<RateQuoteModel>>>> GetCurrentCartShippingRateQuotes(
			GetCurrentCartShippingRateQuotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<List<RateQuoteModel>>>(
				await CEFService.RequestAsync<GetCurrentCartShippingRateQuotes, CEFActionResponse<List<RateQuoteModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ApplyCurrentCartShippingRateQuote(
			ApplyCurrentCartShippingRateQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ApplyCurrentCartShippingRateQuote, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearCurrentCartShippingRateQuote(
			ClearCurrentCartShippingRateQuote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearCurrentCartShippingRateQuote, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> CurrentCartUpdateAttributes(
			CurrentCartUpdateAttributes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<CurrentCartUpdateAttributes, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartModel>> GetCurrentCompareCart(
			GetCurrentCompareCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartModel>(
				await CEFService.RequestAsync<GetCurrentCompareCart, CartModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearCurrentCompareCart(
			ClearCurrentCompareCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearCurrentCompareCart, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AddCompareCartItem(
			AddCompareCartItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AddCompareCartItem, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RemoveCompareCartItemByProductID(
			RemoveCompareCartItemByProductID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RemoveCompareCartItemByProductID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>> GetCurrentCompareCartItems(
			GetCurrentCompareCartItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(
				await CEFService.RequestAsync<GetCurrentCompareCartItems, List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartModel>> GetCurrentStaticCart(
			GetCurrentStaticCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartModel>(
				await CEFService.RequestAsync<GetCurrentStaticCart, CartModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ClearCurrentStaticCart(
			ClearCurrentStaticCart request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ClearCurrentStaticCart, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AddStaticCartItem(
			AddStaticCartItem request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AddStaticCartItem, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RemoveStaticCartItemByProductIDAndType(
			RemoveStaticCartItemByProductIDAndType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RemoveStaticCartItemByProductIDAndType, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>> GetCurrentStaticCartItems(
			GetCurrentStaticCartItems request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(
				await CEFService.RequestAsync<GetCurrentStaticCartItems, List<SalesItemBaseModel<IAppliedCartItemDiscountModel, AppliedCartItemDiscountModel>>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AddStaticCartLot(
			AddStaticCartLot request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AddStaticCartLot, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ShareStaticCartItemsByEmail(
			ShareStaticCartItemsByEmail request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ShareStaticCartItemsByEmail, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<CartTypeModel>>> GetCartTypeForCurrentUser(
			GetCartTypeForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<CartTypeModel>>(
				await CEFService.RequestAsync<GetCartTypeForCurrentUser, CEFActionResponse<CartTypeModel>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartTypeModel>> CreateCartTypeForCurrentUser(
			CreateCartTypeForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartTypeModel>(
				await CEFService.RequestAsync<CreateCartTypeForCurrentUser, CartTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCartTypeForCurrentUser(
			DeleteCartTypeForCurrentUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCartTypeForCurrentUser, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CartTypePagedResults>> GetCurrentUserCartTypes(
			GetCurrentUserCartTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CartTypePagedResults>(
				await CEFService.RequestAsync<GetCurrentUserCartTypes, CartTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<List<StoreInventoryLocationsMatrixModel>>>> GetStoreInventoryLocationsMatrix()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<List<StoreInventoryLocationsMatrixModel>>>(
				await CEFService.RequestAsync<GetStoreInventoryLocationsMatrix, CEFActionResponse<List<StoreInventoryLocationsMatrixModel>>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSiteDomainCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSiteDomainCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSiteDomain(
			CreateSiteDomain request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSiteDomain, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSiteDomainByID(
			DeactivateSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSiteDomainByID(
			DeleteSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SiteDomainModel>> GetSiteDomainByID(
			GetSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SiteDomainModel>(
				await CEFService.RequestAsync<GetSiteDomainByID, SiteDomainModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSiteDomainByID(
			ReactivateSiteDomainByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSiteDomainByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSiteDomain(
			UpdateSiteDomain request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSiteDomain, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SiteDomainPagedResults>> GetSiteDomains(
			GetSiteDomains request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SiteDomainPagedResults>(
				await CEFService.RequestAsync<GetSiteDomains, SiteDomainPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSiteDomainSocialProviderCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSiteDomainSocialProviderCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSiteDomainSocialProvider(
			CreateSiteDomainSocialProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSiteDomainSocialProvider, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSiteDomainSocialProviderByID(
			DeactivateSiteDomainSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSiteDomainSocialProviderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSiteDomainSocialProviderByID(
			DeleteSiteDomainSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSiteDomainSocialProviderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SiteDomainSocialProviderModel>> GetSiteDomainSocialProviderByID(
			GetSiteDomainSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SiteDomainSocialProviderModel>(
				await CEFService.RequestAsync<GetSiteDomainSocialProviderByID, SiteDomainSocialProviderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSiteDomainSocialProviderByID(
			ReactivateSiteDomainSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSiteDomainSocialProviderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSiteDomainSocialProvider(
			UpdateSiteDomainSocialProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSiteDomainSocialProvider, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SiteDomainSocialProviderPagedResults>> GetSiteDomainSocialProviders(
			GetSiteDomainSocialProviders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SiteDomainSocialProviderPagedResults>(
				await CEFService.RequestAsync<GetSiteDomainSocialProviders, SiteDomainSocialProviderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSocialProviderCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSocialProviderCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSocialProvider(
			CreateSocialProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSocialProvider, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSocialProviderByID(
			DeactivateSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSocialProviderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSocialProviderByID(
			DeleteSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSocialProviderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SocialProviderModel>> GetSocialProviderByID(
			GetSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SocialProviderModel>(
				await CEFService.RequestAsync<GetSocialProviderByID, SocialProviderModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSocialProviderByID(
			ReactivateSocialProviderByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSocialProviderByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSocialProvider(
			UpdateSocialProvider request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSocialProvider, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SocialProviderPagedResults>> GetSocialProviders(
			GetSocialProviders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SocialProviderPagedResults>(
				await CEFService.RequestAsync<GetSocialProviders, SocialProviderPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<StoreModel>>> CloneStore(
			CloneStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<StoreModel>>(
				await CEFService.RequestAsync<CloneStore, CEFActionResponse<StoreModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStore(
			CreateStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<StoreModel>>> GetCurrentStore()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<StoreModel>>(
				await CEFService.RequestAsync<GetCurrentStore, CEFActionResponse<StoreModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<StoreModel>>> GetCurrentStoreAdministration()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<StoreModel>>(
				await CEFService.RequestAsync<GetCurrentStoreAdministration, CEFActionResponse<StoreModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreByID(
			DeactivateStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreByID(
			DeleteStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckStoreExistsByID(
			CheckStoreExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckStoreExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckStoreExistsByKey(
			CheckStoreExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckStoreExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckStoreExistsByName(
			CheckStoreExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckStoreExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreModel>> AdminGetStoreFull(
			AdminGetStoreFull request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreModel>(
				await CEFService.RequestAsync<AdminGetStoreFull, StoreModel>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreModel>> GetStoreByID(
			GetStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreModel>(
				await CEFService.RequestAsync<GetStoreByID, StoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreByID(
			ReactivateStoreByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreModel>> GetStoreBySeoUrl(
			GetStoreBySeoUrl request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreModel>(
				await CEFService.RequestAsync<GetStoreBySeoUrl, StoreModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> AdminUpdateStatusForStoreOrders(
			AdminUpdateStatusForStoreOrders request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<AdminUpdateStatusForStoreOrders, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStore(
			UpdateStore request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStore, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreAccount(
			CreateStoreAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreAccountByID(
			DeactivateStoreAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreAccountByID(
			DeleteStoreAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreAccountModel>> GetStoreAccountByID(
			GetStoreAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreAccountModel>(
				await CEFService.RequestAsync<GetStoreAccountByID, StoreAccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreAccountByID(
			ReactivateStoreAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreAccount(
			UpdateStoreAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreAccountPagedResults>> GetStoreAccounts(
			GetStoreAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreAccountPagedResults>(
				await CEFService.RequestAsync<GetStoreAccounts, StoreAccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<UserModel>>> GetStoreAdministratorUser(
			GetStoreAdministratorUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<UserModel>>(
				await CEFService.RequestAsync<GetStoreAdministratorUser, CEFActionResponse<UserModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreBadgeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreBadgeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreBadge(
			CreateStoreBadge request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreBadge, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreBadgeByID(
			DeactivateStoreBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreBadgeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreBadgeByID(
			DeleteStoreBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreBadgeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreBadgeModel>> GetStoreBadgeByID(
			GetStoreBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreBadgeModel>(
				await CEFService.RequestAsync<GetStoreBadgeByID, StoreBadgeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreBadgeByID(
			ReactivateStoreBadgeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreBadgeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreBadge(
			UpdateStoreBadge request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreBadge, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreBadgePagedResults>> GetStoreBadges(
			GetStoreBadges request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreBadgePagedResults>(
				await CEFService.RequestAsync<GetStoreBadges, StoreBadgePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreCategoryPagedResults>> GetStoreCategories(
			GetStoreCategories request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreCategoryPagedResults>(
				await CEFService.RequestAsync<GetStoreCategories, StoreCategoryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreCategoryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreCategoryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreCategory(
			CreateStoreCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreCategoryByID(
			DeactivateStoreCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreCategoryByID(
			DeleteStoreCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreCategoryModel>> GetStoreCategoryByID(
			GetStoreCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreCategoryModel>(
				await CEFService.RequestAsync<GetStoreCategoryByID, StoreCategoryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreCategoryByID(
			ReactivateStoreCategoryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreCategoryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreCategory(
			UpdateStoreCategory request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreCategory, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreContactCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreContactCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreContact(
			CreateStoreContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreContactByID(
			DeactivateStoreContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreContactByID(
			DeleteStoreContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreContactModel>> GetStoreContactByID(
			GetStoreContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreContactModel>(
				await CEFService.RequestAsync<GetStoreContactByID, StoreContactModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreContactByID(
			ReactivateStoreContactByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreContactByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreContact(
			UpdateStoreContact request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreContact, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreContactPagedResults>> GetStoreContacts(
			GetStoreContacts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreContactPagedResults>(
				await CEFService.RequestAsync<GetStoreContacts, StoreContactPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreCountryPagedResults>> GetStoreCountries(
			GetStoreCountries request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreCountryPagedResults>(
				await CEFService.RequestAsync<GetStoreCountries, StoreCountryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreCountryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreCountryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreCountry(
			CreateStoreCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreCountryByID(
			DeactivateStoreCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreCountryByID(
			DeleteStoreCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreCountryModel>> GetStoreCountryByID(
			GetStoreCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreCountryModel>(
				await CEFService.RequestAsync<GetStoreCountryByID, StoreCountryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreCountryByID(
			ReactivateStoreCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreCountry(
			UpdateStoreCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreDistrictCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreDistrictCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreDistrict(
			CreateStoreDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreDistrictByID(
			DeactivateStoreDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreDistrictByID(
			DeleteStoreDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreDistrictModel>> GetStoreDistrictByID(
			GetStoreDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreDistrictModel>(
				await CEFService.RequestAsync<GetStoreDistrictByID, StoreDistrictModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreDistrictByID(
			ReactivateStoreDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreDistrict(
			UpdateStoreDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreDistrictPagedResults>> GetStoreDistricts(
			GetStoreDistricts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreDistrictPagedResults>(
				await CEFService.RequestAsync<GetStoreDistricts, StoreDistrictPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreImage(
			CreateStoreImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreImageByID(
			DeactivateStoreImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreImageByID(
			DeleteStoreImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreImageModel>> GetStoreImageByID(
			GetStoreImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreImageModel>(
				await CEFService.RequestAsync<GetStoreImageByID, StoreImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreImageByID(
			ReactivateStoreImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreImage(
			UpdateStoreImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreImagePagedResults>> GetStoreImages(
			GetStoreImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreImagePagedResults>(
				await CEFService.RequestAsync<GetStoreImages, StoreImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreImageType(
			CreateStoreImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreImageTypeByID(
			DeactivateStoreImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreImageTypeByID(
			DeleteStoreImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetStoreImageTypeByID(
			GetStoreImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetStoreImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreImageTypeByID(
			ReactivateStoreImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreImageType(
			UpdateStoreImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreImageTypePagedResults>> GetStoreImageTypes(
			GetStoreImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreImageTypePagedResults>(
				await CEFService.RequestAsync<GetStoreImageTypes, StoreImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreInventoryLocationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreInventoryLocationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreInventoryLocation(
			CreateStoreInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreInventoryLocationByID(
			DeactivateStoreInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreInventoryLocationByID(
			DeleteStoreInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreInventoryLocationModel>> GetStoreInventoryLocationByID(
			GetStoreInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreInventoryLocationModel>(
				await CEFService.RequestAsync<GetStoreInventoryLocationByID, StoreInventoryLocationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreInventoryLocationByID(
			ReactivateStoreInventoryLocationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreInventoryLocationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreInventoryLocation(
			UpdateStoreInventoryLocation request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreInventoryLocation, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreInventoryLocationPagedResults>> GetStoreInventoryLocations(
			GetStoreInventoryLocations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreInventoryLocationPagedResults>(
				await CEFService.RequestAsync<GetStoreInventoryLocations, StoreInventoryLocationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreInventoryLocationTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreInventoryLocationTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreInventoryLocationType(
			CreateStoreInventoryLocationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreInventoryLocationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreInventoryLocationTypeByID(
			DeactivateStoreInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreInventoryLocationTypeByID(
			DeleteStoreInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetStoreInventoryLocationTypeByID(
			GetStoreInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetStoreInventoryLocationTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreInventoryLocationTypeByID(
			ReactivateStoreInventoryLocationTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreInventoryLocationTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreInventoryLocationType(
			UpdateStoreInventoryLocationType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreInventoryLocationType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreInventoryLocationTypePagedResults>> GetStoreInventoryLocationTypes(
			GetStoreInventoryLocationTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreInventoryLocationTypePagedResults>(
				await CEFService.RequestAsync<GetStoreInventoryLocationTypes, StoreInventoryLocationTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreManufacturer(
			CreateStoreManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreManufacturerByID(
			DeactivateStoreManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreManufacturerByID(
			DeleteStoreManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreManufacturerModel>> GetStoreManufacturerByID(
			GetStoreManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreManufacturerModel>(
				await CEFService.RequestAsync<GetStoreManufacturerByID, StoreManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreManufacturerByID(
			ReactivateStoreManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreManufacturer(
			UpdateStoreManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreManufacturerPagedResults>> GetStoreManufacturers(
			GetStoreManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreManufacturerPagedResults>(
				await CEFService.RequestAsync<GetStoreManufacturers, StoreManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreProduct(
			CreateStoreProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreProductByID(
			DeactivateStoreProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreProductByID(
			DeleteStoreProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreProductModel>> GetStoreProductByID(
			GetStoreProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreProductModel>(
				await CEFService.RequestAsync<GetStoreProductByID, StoreProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreProductByID(
			ReactivateStoreProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreProduct(
			UpdateStoreProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertStoreProduct(
			UpsertStoreProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertStoreProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreProductPagedResults>> GetStoreProducts(
			GetStoreProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreProductPagedResults>(
				await CEFService.RequestAsync<GetStoreProducts, StoreProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreRegionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreRegionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreRegion(
			CreateStoreRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreRegionByID(
			DeactivateStoreRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreRegionByID(
			DeleteStoreRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreRegionModel>> GetStoreRegionByID(
			GetStoreRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreRegionModel>(
				await CEFService.RequestAsync<GetStoreRegionByID, StoreRegionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreRegionByID(
			ReactivateStoreRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreRegion(
			UpdateStoreRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreRegionPagedResults>> GetStoreRegions(
			GetStoreRegions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreRegionPagedResults>(
				await CEFService.RequestAsync<GetStoreRegions, StoreRegionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreRegionPagedResults>> GetStoreRegionsByStoreID(
			GetStoreRegionsByStoreID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreRegionPagedResults>(
				await CEFService.RequestAsync<GetStoreRegionsByStoreID, StoreRegionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StorePagedResults>> GetStores(
			GetStores request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StorePagedResults>(
				await CEFService.RequestAsync<GetStores, StorePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreSubscriptionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreSubscriptionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreSubscription(
			CreateStoreSubscription request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreSubscription, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreSubscriptionByID(
			DeactivateStoreSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreSubscriptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreSubscriptionByID(
			DeleteStoreSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreSubscriptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreSubscriptionModel>> GetStoreSubscriptionByID(
			GetStoreSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreSubscriptionModel>(
				await CEFService.RequestAsync<GetStoreSubscriptionByID, StoreSubscriptionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreSubscriptionByID(
			ReactivateStoreSubscriptionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreSubscriptionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreSubscription(
			UpdateStoreSubscription request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreSubscription, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreSubscriptionPagedResults>> GetStoreSubscriptions(
			GetStoreSubscriptions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreSubscriptionPagedResults>(
				await CEFService.RequestAsync<GetStoreSubscriptions, StoreSubscriptionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreType(
			CreateStoreType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreTypeByID(
			DeactivateStoreTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreTypeByID(
			DeleteStoreTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetStoreTypeByID(
			GetStoreTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetStoreTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreTypeByID(
			ReactivateStoreTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreType(
			UpdateStoreType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreTypePagedResults>> GetStoreTypes(
			GetStoreTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreTypePagedResults>(
				await CEFService.RequestAsync<GetStoreTypes, StoreTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreUserCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreUserCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreUser(
			CreateStoreUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreUserByID(
			DeactivateStoreUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreUserByID(
			DeleteStoreUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreUserModel>> GetStoreUserByID(
			GetStoreUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreUserModel>(
				await CEFService.RequestAsync<GetStoreUserByID, StoreUserModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreUserByID(
			ReactivateStoreUserByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreUserByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreUser(
			UpdateStoreUser request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreUser, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreUserPagedResults>> GetStoreUsers(
			GetStoreUsers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreUserPagedResults>(
				await CEFService.RequestAsync<GetStoreUsers, StoreUserPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearStoreVendorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearStoreVendorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateStoreVendor(
			CreateStoreVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateStoreVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateStoreVendorByID(
			DeactivateStoreVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateStoreVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteStoreVendorByID(
			DeleteStoreVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteStoreVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreVendorModel>> GetStoreVendorByID(
			GetStoreVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreVendorModel>(
				await CEFService.RequestAsync<GetStoreVendorByID, StoreVendorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateStoreVendorByID(
			ReactivateStoreVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateStoreVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateStoreVendor(
			UpdateStoreVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateStoreVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StoreVendorPagedResults>> GetStoreVendors(
			GetStoreVendors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StoreVendorPagedResults>(
				await CEFService.RequestAsync<GetStoreVendors, StoreVendorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEventLogCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEventLogCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEventLog(
			CreateEventLog request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEventLog, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEventLogByID(
			DeactivateEventLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEventLogByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEventLogByID(
			DeleteEventLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEventLogByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EventLogModel>> GetEventLogByID(
			GetEventLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EventLogModel>(
				await CEFService.RequestAsync<GetEventLogByID, EventLogModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEventLogByID(
			ReactivateEventLogByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEventLogByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEventLog(
			UpdateEventLog request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEventLog, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EventLogPagedResults>> GetEventLogs(
			GetEventLogs request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EventLogPagedResults>(
				await CEFService.RequestAsync<GetEventLogs, EventLogPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearImportExportMappingCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearImportExportMappingCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateImportExportMapping(
			CreateImportExportMapping request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateImportExportMapping, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateImportExportMappingByID(
			DeactivateImportExportMappingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateImportExportMappingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteImportExportMappingByID(
			DeleteImportExportMappingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteImportExportMappingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ImportExportMappingModel>> GetImportExportMappingByID(
			GetImportExportMappingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ImportExportMappingModel>(
				await CEFService.RequestAsync<GetImportExportMappingByID, ImportExportMappingModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateImportExportMappingByID(
			ReactivateImportExportMappingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateImportExportMappingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateImportExportMapping(
			UpdateImportExportMapping request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateImportExportMapping, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<ImportExportMappingPagedResults>> GetImportExportMappings(
			GetImportExportMappings request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<ImportExportMappingPagedResults>(
				await CEFService.RequestAsync<GetImportExportMappings, ImportExportMappingPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearNoteCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearNoteCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateNote(
			CreateNote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateNote, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateNoteByID(
			DeactivateNoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateNoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteNoteByID(
			DeleteNoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteNoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<NoteModel>> GetNoteByID(
			GetNoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<NoteModel>(
				await CEFService.RequestAsync<GetNoteByID, NoteModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateNoteByID(
			ReactivateNoteByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateNoteByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateNote(
			UpdateNote request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateNote, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<NotePagedResults>> GetNotes(
			GetNotes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<NotePagedResults>(
				await CEFService.RequestAsync<GetNotes, NotePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearNoteTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearNoteTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateNoteType(
			CreateNoteType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateNoteType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateNoteTypeByID(
			DeactivateNoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateNoteTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteNoteTypeByID(
			DeleteNoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteNoteTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<NoteTypeModel>> GetNoteTypeByID(
			GetNoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<NoteTypeModel>(
				await CEFService.RequestAsync<GetNoteTypeByID, NoteTypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateNoteTypeByID(
			ReactivateNoteTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateNoteTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateNoteType(
			UpdateNoteType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateNoteType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<NoteTypePagedResults>> GetNoteTypes(
			GetNoteTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<NoteTypePagedResults>(
				await CEFService.RequestAsync<GetNoteTypes, NoteTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRecordVersionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRecordVersionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRecordVersion(
			CreateRecordVersion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRecordVersion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRecordVersionByID(
			DeactivateRecordVersionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRecordVersionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRecordVersionByID(
			DeleteRecordVersionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRecordVersionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckRecordVersionExistsByName(
			CheckRecordVersionExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckRecordVersionExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RecordVersionModel>> GetRecordVersionByID(
			GetRecordVersionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RecordVersionModel>(
				await CEFService.RequestAsync<GetRecordVersionByID, RecordVersionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRecordVersionByID(
			ReactivateRecordVersionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRecordVersionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRecordVersion(
			UpdateRecordVersion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRecordVersion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpsertRecordVersion(
			UpsertRecordVersion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpsertRecordVersion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RecordVersionPagedResults>> GetRecordVersions(
			GetRecordVersions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RecordVersionPagedResults>(
				await CEFService.RequestAsync<GetRecordVersions, RecordVersionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearRecordVersionTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearRecordVersionTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateRecordVersionType(
			CreateRecordVersionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateRecordVersionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateRecordVersionTypeByID(
			DeactivateRecordVersionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateRecordVersionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteRecordVersionTypeByID(
			DeleteRecordVersionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteRecordVersionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetRecordVersionTypeByID(
			GetRecordVersionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetRecordVersionTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateRecordVersionTypeByID(
			ReactivateRecordVersionTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateRecordVersionTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateRecordVersionType(
			UpdateRecordVersionType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateRecordVersionType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<RecordVersionTypePagedResults>> GetRecordVersionTypes(
			GetRecordVersionTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<RecordVersionTypePagedResults>(
				await CEFService.RequestAsync<GetRecordVersionTypes, RecordVersionTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<SettingModel>>> GetSettingsByGroupName(
			GetSettingsByGroupName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<SettingModel>>(
				await CEFService.RequestAsync<GetSettingsByGroupName, List<SettingModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SettingModel>> GetSettingByName(
			GetSettingByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SettingModel>(
				await CEFService.RequestAsync<GetSettingByName, SettingModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSettingCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSettingCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSetting(
			CreateSetting request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSetting, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSettingByID(
			DeactivateSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSettingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSettingByID(
			DeleteSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSettingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SettingModel>> GetSettingByID(
			GetSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SettingModel>(
				await CEFService.RequestAsync<GetSettingByID, SettingModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSettingByID(
			ReactivateSettingByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSettingByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSetting(
			UpdateSetting request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSetting, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSettingGroupCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSettingGroupCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSettingGroup(
			CreateSettingGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSettingGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSettingGroupByID(
			DeactivateSettingGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSettingGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSettingGroupByID(
			DeleteSettingGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSettingGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SettingGroupModel>> GetSettingGroupByID(
			GetSettingGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SettingGroupModel>(
				await CEFService.RequestAsync<GetSettingGroupByID, SettingGroupModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSettingGroupByID(
			ReactivateSettingGroupByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSettingGroupByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSettingGroup(
			UpdateSettingGroup request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSettingGroup, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SettingGroupPagedResults>> GetSettingGroups(
			GetSettingGroups request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SettingGroupPagedResults>(
				await CEFService.RequestAsync<GetSettingGroups, SettingGroupPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SettingPagedResults>> GetSettings(
			GetSettings request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SettingPagedResults>(
				await CEFService.RequestAsync<GetSettings, SettingPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearSettingTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearSettingTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateSettingType(
			CreateSettingType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateSettingType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateSettingTypeByID(
			DeactivateSettingTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateSettingTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteSettingTypeByID(
			DeleteSettingTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteSettingTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetSettingTypeByID(
			GetSettingTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetSettingTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateSettingTypeByID(
			ReactivateSettingTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateSettingTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateSettingType(
			UpdateSettingType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateSettingType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<SettingTypePagedResults>> GetSettingTypes(
			GetSettingTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<SettingTypePagedResults>(
				await CEFService.RequestAsync<GetSettingTypes, SettingTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> RunEmailBatchManually()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<RunEmailBatchManually, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearHistoricalTaxRateCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearHistoricalTaxRateCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateHistoricalTaxRate(
			CreateHistoricalTaxRate request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateHistoricalTaxRate, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateHistoricalTaxRateByID(
			DeactivateHistoricalTaxRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateHistoricalTaxRateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteHistoricalTaxRateByID(
			DeleteHistoricalTaxRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteHistoricalTaxRateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<HistoricalTaxRateModel>> GetHistoricalTaxRateByID(
			GetHistoricalTaxRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<HistoricalTaxRateModel>(
				await CEFService.RequestAsync<GetHistoricalTaxRateByID, HistoricalTaxRateModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateHistoricalTaxRateByID(
			ReactivateHistoricalTaxRateByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateHistoricalTaxRateByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateHistoricalTaxRate(
			UpdateHistoricalTaxRate request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateHistoricalTaxRate, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<HistoricalTaxRatePagedResults>> GetHistoricalTaxRates(
			GetHistoricalTaxRates request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<HistoricalTaxRatePagedResults>(
				await CEFService.RequestAsync<GetHistoricalTaxRates, HistoricalTaxRatePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TaxCountryPagedResults>> GetTaxCountries(
			GetTaxCountries request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TaxCountryPagedResults>(
				await CEFService.RequestAsync<GetTaxCountries, TaxCountryPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearTaxCountryCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearTaxCountryCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateTaxCountry(
			CreateTaxCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateTaxCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateTaxCountryByID(
			DeactivateTaxCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateTaxCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteTaxCountryByID(
			DeleteTaxCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteTaxCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TaxCountryModel>> GetTaxCountryByID(
			GetTaxCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TaxCountryModel>(
				await CEFService.RequestAsync<GetTaxCountryByID, TaxCountryModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateTaxCountryByID(
			ReactivateTaxCountryByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateTaxCountryByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateTaxCountry(
			UpdateTaxCountry request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateTaxCountry, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearTaxDistrictCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearTaxDistrictCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateTaxDistrict(
			CreateTaxDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateTaxDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateTaxDistrictByID(
			DeactivateTaxDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateTaxDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteTaxDistrictByID(
			DeleteTaxDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteTaxDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TaxDistrictModel>> GetTaxDistrictByID(
			GetTaxDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TaxDistrictModel>(
				await CEFService.RequestAsync<GetTaxDistrictByID, TaxDistrictModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateTaxDistrictByID(
			ReactivateTaxDistrictByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateTaxDistrictByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateTaxDistrict(
			UpdateTaxDistrict request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateTaxDistrict, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TaxDistrictPagedResults>> GetTaxDistricts(
			GetTaxDistricts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TaxDistrictPagedResults>(
				await CEFService.RequestAsync<GetTaxDistricts, TaxDistrictPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearTaxRegionCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearTaxRegionCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateTaxRegion(
			CreateTaxRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateTaxRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateTaxRegionByID(
			DeactivateTaxRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateTaxRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteTaxRegionByID(
			DeleteTaxRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteTaxRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TaxRegionModel>> GetTaxRegionByID(
			GetTaxRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TaxRegionModel>(
				await CEFService.RequestAsync<GetTaxRegionByID, TaxRegionModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateTaxRegionByID(
			ReactivateTaxRegionByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateTaxRegionByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateTaxRegion(
			UpdateTaxRegion request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateTaxRegion, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TaxRegionPagedResults>> GetTaxRegions(
			GetTaxRegions request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TaxRegionPagedResults>(
				await CEFService.RequestAsync<GetTaxRegions, TaxRegionPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> TestConnection()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<TestConnection, CEFActionResponse>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<Dictionary<string, int>>> GetCommonKeywords(
			GetCommonKeywords request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<Dictionary<string, int>>(
				await CEFService.RequestAsync<GetCommonKeywords, Dictionary<string, int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCampaignCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCampaignCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCampaign(
			CreateCampaign request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCampaign, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCampaignByID(
			DeactivateCampaignByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCampaignByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCampaignByID(
			DeleteCampaignByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCampaignByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CampaignModel>> GetCampaignByID(
			GetCampaignByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CampaignModel>(
				await CEFService.RequestAsync<GetCampaignByID, CampaignModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCampaignByID(
			ReactivateCampaignByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCampaignByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCampaign(
			UpdateCampaign request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCampaign, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCampaignAdCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCampaignAdCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCampaignAd(
			CreateCampaignAd request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCampaignAd, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCampaignAdByID(
			DeactivateCampaignAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCampaignAdByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCampaignAdByID(
			DeleteCampaignAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCampaignAdByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CampaignAdModel>> GetCampaignAdByID(
			GetCampaignAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CampaignAdModel>(
				await CEFService.RequestAsync<GetCampaignAdByID, CampaignAdModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCampaignAdByID(
			ReactivateCampaignAdByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCampaignAdByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCampaignAd(
			UpdateCampaignAd request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCampaignAd, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CampaignAdPagedResults>> GetCampaignAds(
			GetCampaignAds request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CampaignAdPagedResults>(
				await CEFService.RequestAsync<GetCampaignAds, CampaignAdPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CampaignPagedResults>> GetCampaigns(
			GetCampaigns request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CampaignPagedResults>(
				await CEFService.RequestAsync<GetCampaigns, CampaignPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCampaignStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCampaignStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCampaignStatus(
			CreateCampaignStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCampaignStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCampaignStatusByID(
			DeactivateCampaignStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCampaignStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCampaignStatusByID(
			DeleteCampaignStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCampaignStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetCampaignStatusByID(
			GetCampaignStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetCampaignStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCampaignStatusByID(
			ReactivateCampaignStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCampaignStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCampaignStatus(
			UpdateCampaignStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCampaignStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CampaignStatusPagedResults>> GetCampaignStatuses(
			GetCampaignStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CampaignStatusPagedResults>(
				await CEFService.RequestAsync<GetCampaignStatuses, CampaignStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearCampaignTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearCampaignTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateCampaignType(
			CreateCampaignType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateCampaignType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateCampaignTypeByID(
			DeactivateCampaignTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateCampaignTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteCampaignTypeByID(
			DeleteCampaignTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteCampaignTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetCampaignTypeByID(
			GetCampaignTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetCampaignTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateCampaignTypeByID(
			ReactivateCampaignTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateCampaignTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateCampaignType(
			UpdateCampaignType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateCampaignType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CampaignTypePagedResults>> GetCampaignTypes(
			GetCampaignTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CampaignTypePagedResults>(
				await CEFService.RequestAsync<GetCampaignTypes, CampaignTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEvent(
			CreateEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEventByID(
			DeactivateEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEventByID(
			DeleteEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EventModel>> GetEventByID(
			GetEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EventModel>(
				await CEFService.RequestAsync<GetEventByID, EventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEventByID(
			ReactivateEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEvent(
			UpdateEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EventPagedResults>> GetEvents(
			GetEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EventPagedResults>(
				await CEFService.RequestAsync<GetEvents, EventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEventStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEventStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEventStatus(
			CreateEventStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEventStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEventStatusByID(
			DeactivateEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEventStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEventStatusByID(
			DeleteEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEventStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetEventStatusByID(
			GetEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetEventStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEventStatusByID(
			ReactivateEventStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEventStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEventStatus(
			UpdateEventStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEventStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EventStatusPagedResults>> GetEventStatuses(
			GetEventStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EventStatusPagedResults>(
				await CEFService.RequestAsync<GetEventStatuses, EventStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearEventTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearEventTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateEventType(
			CreateEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateEventTypeByID(
			DeactivateEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteEventTypeByID(
			DeleteEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetEventTypeByID(
			GetEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetEventTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateEventTypeByID(
			ReactivateEventTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateEventTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateEventType(
			UpdateEventType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateEventType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<EventTypePagedResults>> GetEventTypes(
			GetEventTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<EventTypePagedResults>(
				await CEFService.RequestAsync<GetEventTypes, EventTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearIPOrganizationCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearIPOrganizationCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateIPOrganization(
			CreateIPOrganization request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateIPOrganization, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateIPOrganizationByID(
			DeactivateIPOrganizationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateIPOrganizationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteIPOrganizationByID(
			DeleteIPOrganizationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteIPOrganizationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<IPOrganizationModel>> GetIPOrganizationByID(
			GetIPOrganizationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<IPOrganizationModel>(
				await CEFService.RequestAsync<GetIPOrganizationByID, IPOrganizationModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateIPOrganizationByID(
			ReactivateIPOrganizationByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateIPOrganizationByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateIPOrganization(
			UpdateIPOrganization request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateIPOrganization, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<IPOrganizationPagedResults>> GetIPOrganizations(
			GetIPOrganizations request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<IPOrganizationPagedResults>(
				await CEFService.RequestAsync<GetIPOrganizations, IPOrganizationPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearIPOrganizationStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearIPOrganizationStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateIPOrganizationStatus(
			CreateIPOrganizationStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateIPOrganizationStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateIPOrganizationStatusByID(
			DeactivateIPOrganizationStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateIPOrganizationStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteIPOrganizationStatusByID(
			DeleteIPOrganizationStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteIPOrganizationStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetIPOrganizationStatusByID(
			GetIPOrganizationStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetIPOrganizationStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateIPOrganizationStatusByID(
			ReactivateIPOrganizationStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateIPOrganizationStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateIPOrganizationStatus(
			UpdateIPOrganizationStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateIPOrganizationStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<IPOrganizationStatusPagedResults>> GetIPOrganizationStatuses(
			GetIPOrganizationStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<IPOrganizationStatusPagedResults>(
				await CEFService.RequestAsync<GetIPOrganizationStatuses, IPOrganizationStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPageViewCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPageViewCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePageView(
			CreatePageView request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePageView, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePageViewByID(
			DeactivatePageViewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePageViewByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePageViewByID(
			DeletePageViewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePageViewByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PageViewModel>> GetPageViewByID(
			GetPageViewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PageViewModel>(
				await CEFService.RequestAsync<GetPageViewByID, PageViewModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePageViewByID(
			ReactivatePageViewByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePageViewByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePageView(
			UpdatePageView request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePageView, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPageViewEventCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPageViewEventCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePageViewEvent(
			CreatePageViewEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePageViewEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<EndUserEventModel>>> CreateFullPageViewEvent(
			CreateFullPageViewEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<EndUserEventModel>>(
				await CEFService.RequestAsync<CreateFullPageViewEvent, CEFActionResponse<EndUserEventModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePageViewEventByID(
			DeactivatePageViewEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePageViewEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePageViewEventByID(
			DeletePageViewEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePageViewEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PageViewEventModel>> GetPageViewEventByID(
			GetPageViewEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PageViewEventModel>(
				await CEFService.RequestAsync<GetPageViewEventByID, PageViewEventModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePageViewEventByID(
			ReactivatePageViewEventByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePageViewEventByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePageViewEvent(
			UpdatePageViewEvent request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePageViewEvent, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PageViewEventPagedResults>> GetPageViewEvents(
			GetPageViewEvents request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PageViewEventPagedResults>(
				await CEFService.RequestAsync<GetPageViewEvents, PageViewEventPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PageViewPagedResults>> GetPageViews(
			GetPageViews request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PageViewPagedResults>(
				await CEFService.RequestAsync<GetPageViews, PageViewPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPageViewStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPageViewStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePageViewStatus(
			CreatePageViewStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePageViewStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePageViewStatusByID(
			DeactivatePageViewStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePageViewStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePageViewStatusByID(
			DeletePageViewStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePageViewStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetPageViewStatusByID(
			GetPageViewStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetPageViewStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePageViewStatusByID(
			ReactivatePageViewStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePageViewStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePageViewStatus(
			UpdatePageViewStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePageViewStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PageViewStatusPagedResults>> GetPageViewStatuses(
			GetPageViewStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PageViewStatusPagedResults>(
				await CEFService.RequestAsync<GetPageViewStatuses, PageViewStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearPageViewTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearPageViewTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreatePageViewType(
			CreatePageViewType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreatePageViewType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivatePageViewTypeByID(
			DeactivatePageViewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivatePageViewTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeletePageViewTypeByID(
			DeletePageViewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeletePageViewTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetPageViewTypeByID(
			GetPageViewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetPageViewTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivatePageViewTypeByID(
			ReactivatePageViewTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivatePageViewTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdatePageViewType(
			UpdatePageViewType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdatePageViewType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<PageViewTypePagedResults>> GetPageViewTypes(
			GetPageViewTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<PageViewTypePagedResults>(
				await CEFService.RequestAsync<GetPageViewTypes, PageViewTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<List<ProductModel>>> GetRecentlyViewedProducts(
			GetRecentlyViewedProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<List<ProductModel>>(
				await CEFService.RequestAsync<GetRecentlyViewedProducts, List<ProductModel>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVisitCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVisitCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVisit(
			CreateVisit request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVisit, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVisitByID(
			DeactivateVisitByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVisitByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVisitByID(
			DeleteVisitByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVisitByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VisitModel>> GetVisitByID(
			GetVisitByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VisitModel>(
				await CEFService.RequestAsync<GetVisitByID, VisitModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVisitByID(
			ReactivateVisitByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVisitByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVisit(
			UpdateVisit request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVisit, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVisitorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVisitorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVisitor(
			CreateVisitor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVisitor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVisitorByID(
			DeactivateVisitorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVisitorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVisitorByID(
			DeleteVisitorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVisitorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VisitorModel>> GetVisitorByID(
			GetVisitorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VisitorModel>(
				await CEFService.RequestAsync<GetVisitorByID, VisitorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVisitorByID(
			ReactivateVisitorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVisitorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVisitor(
			UpdateVisitor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVisitor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VisitorPagedResults>> GetVisitors(
			GetVisitors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VisitorPagedResults>(
				await CEFService.RequestAsync<GetVisitors, VisitorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VisitPagedResults>> GetVisits(
			GetVisits request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VisitPagedResults>(
				await CEFService.RequestAsync<GetVisits, VisitPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVisitStatusCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVisitStatusCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVisitStatus(
			CreateVisitStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVisitStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVisitStatusByID(
			DeactivateVisitStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVisitStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVisitStatusByID(
			DeleteVisitStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVisitStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<StatusModel>> GetVisitStatusByID(
			GetVisitStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<StatusModel>(
				await CEFService.RequestAsync<GetVisitStatusByID, StatusModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVisitStatusByID(
			ReactivateVisitStatusByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVisitStatusByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVisitStatus(
			UpdateVisitStatus request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVisitStatus, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VisitStatusPagedResults>> GetVisitStatuses(
			GetVisitStatuses request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VisitStatusPagedResults>(
				await CEFService.RequestAsync<GetVisitStatuses, VisitStatusPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVendorCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVendorCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVendor(
			CreateVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<VendorModel>>> GetCurrentVendorAdministration()
		{
			return new HttpPromiseCallbackArg<CEFActionResponse<VendorModel>>(
				await CEFService.RequestAsync<GetCurrentVendorAdministration, CEFActionResponse<VendorModel>>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVendorByID(
			DeactivateVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVendorByID(
			DeleteVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckVendorExistsByID(
			CheckVendorExistsByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckVendorExistsByID, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckVendorExistsByKey(
			CheckVendorExistsByKey request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckVendorExistsByKey, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || NOTADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<int?>> CheckVendorExistsByName(
			CheckVendorExistsByName request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<int?>(
				await CEFService.RequestAsync<CheckVendorExistsByName, int?>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorModel>> GetVendorByID(
			GetVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorModel>(
				await CEFService.RequestAsync<GetVendorByID, VendorModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVendorByID(
			ReactivateVendorByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVendorByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVendor(
			UpdateVendor request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVendor, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVendorAccountCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVendorAccountCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVendorAccount(
			CreateVendorAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVendorAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVendorAccountByID(
			DeactivateVendorAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVendorAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVendorAccountByID(
			DeleteVendorAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVendorAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorAccountModel>> GetVendorAccountByID(
			GetVendorAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorAccountModel>(
				await CEFService.RequestAsync<GetVendorAccountByID, VendorAccountModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVendorAccountByID(
			ReactivateVendorAccountByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVendorAccountByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVendorAccount(
			UpdateVendorAccount request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVendorAccount, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorAccountPagedResults>> GetVendorAccounts(
			GetVendorAccounts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorAccountPagedResults>(
				await CEFService.RequestAsync<GetVendorAccounts, VendorAccountPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVendorImageCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVendorImageCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVendorImage(
			CreateVendorImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVendorImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVendorImageByID(
			DeactivateVendorImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVendorImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVendorImageByID(
			DeleteVendorImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVendorImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorImageModel>> GetVendorImageByID(
			GetVendorImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorImageModel>(
				await CEFService.RequestAsync<GetVendorImageByID, VendorImageModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVendorImageByID(
			ReactivateVendorImageByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVendorImageByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVendorImage(
			UpdateVendorImage request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVendorImage, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorImagePagedResults>> GetVendorImages(
			GetVendorImages request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorImagePagedResults>(
				await CEFService.RequestAsync<GetVendorImages, VendorImagePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVendorImageTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVendorImageTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVendorImageType(
			CreateVendorImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVendorImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVendorImageTypeByID(
			DeactivateVendorImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVendorImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVendorImageTypeByID(
			DeleteVendorImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVendorImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetVendorImageTypeByID(
			GetVendorImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetVendorImageTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVendorImageTypeByID(
			ReactivateVendorImageTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVendorImageTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVendorImageType(
			UpdateVendorImageType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVendorImageType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorImageTypePagedResults>> GetVendorImageTypes(
			GetVendorImageTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorImageTypePagedResults>(
				await CEFService.RequestAsync<GetVendorImageTypes, VendorImageTypePagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVendorManufacturerCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVendorManufacturerCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVendorManufacturer(
			CreateVendorManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVendorManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVendorManufacturerByID(
			DeactivateVendorManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVendorManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVendorManufacturerByID(
			DeleteVendorManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVendorManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorManufacturerModel>> GetVendorManufacturerByID(
			GetVendorManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorManufacturerModel>(
				await CEFService.RequestAsync<GetVendorManufacturerByID, VendorManufacturerModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVendorManufacturerByID(
			ReactivateVendorManufacturerByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVendorManufacturerByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVendorManufacturer(
			UpdateVendorManufacturer request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVendorManufacturer, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorManufacturerPagedResults>> GetVendorManufacturers(
			GetVendorManufacturers request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorManufacturerPagedResults>(
				await CEFService.RequestAsync<GetVendorManufacturers, VendorManufacturerPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVendorProductCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVendorProductCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || VENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVendorProduct(
			CreateVendorProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVendorProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVendorProductByID(
			DeactivateVendorProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVendorProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVendorProductByID(
			DeleteVendorProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVendorProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorProductModel>> GetVendorProductByID(
			GetVendorProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorProductModel>(
				await CEFService.RequestAsync<GetVendorProductByID, VendorProductModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVendorProductByID(
			ReactivateVendorProductByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVendorProductByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVendorProduct(
			UpdateVendorProduct request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVendorProduct, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorProductPagedResults>> GetVendorProducts(
			GetVendorProducts request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorProductPagedResults>(
				await CEFService.RequestAsync<GetVendorProducts, VendorProductPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if STOREFRONT || ADMIN || BRANDADMIN || FRANCHISEADMIN || NOTMANUFACTURERADMIN || STOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorPagedResults>> GetVendors(
			GetVendors request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorPagedResults>(
				await CEFService.RequestAsync<GetVendors, VendorPagedResults>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<bool>> ClearVendorTypeCache()
		{
			return new HttpPromiseCallbackArg<bool>(
				await CEFService.RequestAsync<ClearVendorTypeCache, bool>(new()).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> CreateVendorType(
			CreateVendorType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<CreateVendorType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeactivateVendorTypeByID(
			DeactivateVendorTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeactivateVendorTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> DeleteVendorTypeByID(
			DeleteVendorTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<DeleteVendorTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<TypeModel>> GetVendorTypeByID(
			GetVendorTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<TypeModel>(
				await CEFService.RequestAsync<GetVendorTypeByID, TypeModel>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse>> ReactivateVendorTypeByID(
			ReactivateVendorTypeByID request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse>(
				await CEFService.RequestAsync<ReactivateVendorTypeByID, CEFActionResponse>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<CEFActionResponse<int>>> UpdateVendorType(
			UpdateVendorType request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<CEFActionResponse<int>>(
				await CEFService.RequestAsync<UpdateVendorType, CEFActionResponse<int>>(request).ConfigureAwait(false));
		}
#endif

#if NOTSTOREFRONT || ADMIN || NOTBRANDADMIN || NOTFRANCHISEADMIN || NOTMANUFACTURERADMIN || NOTSTOREADMIN || NOTVENDORADMIN
		public async Task<IHttpPromiseCallbackArg<VendorTypePagedResults>> GetVendorTypes(
			GetVendorTypes request = null)
		{
			request ??= new();
			return new HttpPromiseCallbackArg<VendorTypePagedResults>(
				await CEFService.RequestAsync<GetVendorTypes, VendorTypePagedResults>(request).ConfigureAwait(false));
		}
#endif
	}
}
