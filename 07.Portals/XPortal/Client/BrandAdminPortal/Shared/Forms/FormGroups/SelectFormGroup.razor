@inherits MVC.Core.InputFormGroupControllerBase<TValue>
@typeparam TValue

<Validation>
  <Tooltip
    Inline="false"
    Text="@Tooltip"
    Placement="TooltipPlacement.Top"
    Fade="true"
    AlwaysActive="TooltipIsOpen">
    <Field
      Horizontal="@IsHorizontal"
      sid="@("field_" + InputName)"
      Class="@AllFormClasses">
      @if (!NoLabel)
      {
        <FieldLabel
          For="@InputName"
          title="@Tooltip"
          sid="@("fieldLabel_" + InputName)">
          <Span>
            @LabelText
            @if (Required)
            {
              <Span TextColor="TextColor.Danger">&nbsp;*</Span>
            }
            @if (Contract.CheckValidKey(Tooltip) && Tooltip != LabelText)
            {
              <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.QuestionCircle" TextColor="TextColor.Info" Class="ml-1" />
            }
          </Span>
        </FieldLabel>
      }
      <FieldBody
        sid="@("fieldBody_" + InputName)">
        @if (UseAddons)
        {
          <Addons>
            @if (Contract.CheckValidKey(LeftIcon))
            {
              <Addon AddonType="AddonType.Start">
                <AddonLabel>
                  <Blazorise.Icons.FontAwesome.Icon Name="@LeftIcon" Class="fa-fw" />
                </AddonLabel>
              </Addon>
            }
            <Addon AddonType="AddonType.Body">
              <Select
                TValue="TValue"
                sid="@("input_" + InputName)"
                ElementId="@InputName"
                Class="@AllInputClasses"
                Disabled="@Disabled"
                required="@Required"
                SelectedValueExpression="ValueExpression"
                SelectedValueChanged="ValueChanged"
                autocomplete="@Autocomplete"
                Autofocus="@Autofocus"
                FocusOut="@ExtraOnFocusOut"
                FocusIn="@ExtraOnFocusIn"
                KeyDown="@ExtraOnKeyDown"
                KeyPress="@ExtraOnKeyPress"
                KeyUp="@ExtraOnKeyUp">
                <ChildContent>
                  <SelectItem TValue="TValue" Value="@(default(TValue))" Disabled="DontAllowNull">
                    @(PlaceholderText ?? "Please select...")
                  </SelectItem>
                  @if (OptionsList is not null)
                  {
                    <Repeater Items="OptionsList">
                      <SelectItem TValue="TValue" Value="@ItemValueFunc(context)">@ItemLabelFunc(context)</SelectItem>
                    </Repeater>
                  }
                </ChildContent>
                <Feedback>
                  @if (FormInvalid == true && !HideInvalidTooltip)
                  {
                    <ValidationError />
                  }
                  @if (FormValid == true && ShowValidTooltip)
                  {
                    <ValidationSuccess />
                  }
                </Feedback>
              </Select>
              @if (Contract.CheckValidKey(RightIcon))
              {
                <Addon AddonType="AddonType.End" Class="rounded-right">
                  <AddonLabel>
                    <Blazorise.Icons.FontAwesome.Icon Name="@RightIcon" Class="fa-fw" />
                  </AddonLabel>
                </Addon>
              }
            </Addon>
          </Addons>
        }
        else
        {
          <Select
            TValue="TValue"
            sid="@("input_" + InputName)"
            ElementId="@InputName"
            Class="@AllInputClasses"
            Disabled="@Disabled"
            required="@Required"
            SelectedValueExpression="ValueExpression"
            SelectedValueChanged="ValueChanged"
            SelectedValue="@Value"
            ReadOnly="@ReadOnly"
            autocomplete="@Autocomplete"
            Autofocus="@Autofocus"
            FocusOut="@ExtraOnFocusOut"
            FocusIn="@ExtraOnFocusIn"
            KeyDown="@ExtraOnKeyDown"
            KeyPress="@ExtraOnKeyPress"
            KeyUp="@ExtraOnKeyUp">
            <ChildContent>
              <SelectItem TValue="TValue" Value="@(default(TValue))" Disabled="DontAllowNull">Please select...</SelectItem>
              @if (OptionsList is not null)
              {
                <Repeater Items="OptionsList!/*.OrderBy(x => x.SortOrder).ThenBy(x => x.DisplayName ?? x.Name).ThenBy(x => x.CustomKey)*/">
                  <SelectItem TValue="TValue" Value="@ItemValueFunc(context)">@ItemLabelFunc(context)</SelectItem>
                </Repeater>
              }
            </ChildContent>
            <Feedback>
              @if (FormInvalid == true && !HideInvalidTooltip)
              {
                <ValidationError />
              }
              @if (FormValid == true && ShowValidTooltip)
              {
                <ValidationSuccess />
              }
            </Feedback>
          </Select>
        }
      </FieldBody>
    </Field>
  </Tooltip>
</Validation>

@code
{
  #region Parameters
#pragma warning disable CS8618 // Ignored: Parameters set by implementer
  /// <summary>Gets or sets a value indicating whether this object is horizontal.</summary>
  /// <value>True if this object is horizontal, false if not.</value>
  [Parameter]
  public bool IsHorizontal { get; set; }

  /// <summary>Gets or sets the placeholder text.</summary>
  /// <value>The placeholder text.</value>
  [Parameter]
  public string? PlaceholderText { get; set; }

  /// <summary>Gets or sets a value indicating whether the don't allow null.</summary>
  /// <value>True if don't allow null, false if not.</value>
  [Parameter]
  public bool DontAllowNull { get; set; }

  /// <summary>Gets or sets a list of options.</summary>
  /// <value>A List of options.</value>
  [Parameter, EditorRequired]
  public IEnumerable<object>? OptionsList { get; set; }

  /// <summary>Gets or sets the item value function.</summary>
  /// <value>The item value function.</value>
  [Parameter, EditorRequired]
  public Func<object, TValue> ItemValueFunc { get; set; }

  /// <summary>Gets or sets the item label function.</summary>
  /// <value>The item label function.</value>
  [Parameter, EditorRequired]
  public Func<object, string> ItemLabelFunc { get; set; }
#pragma warning restore CS8618 // Ignored: Parameters set by implementer
  #endregion

  /// <summary>Gets the input prefix.</summary>
  /// <value>The input prefix.</value>
  protected override string InputPrefix => "ddl";

  /// <summary>Gets all input classes.</summary>
  /// <value>all input classes.</value>
  private string AllInputClasses => (FieldCssClasses
    + (Contract.CheckValidKey(InputClasses) ? " " + InputClasses : string.Empty)
    + (Contract.CheckValidKey(RightIcon) ? string.Empty : " rounded-right"))
    .Trim();

  /// <summary>Gets all form classes.</summary>
  /// <value>all form classes.</value>
  private string AllFormClasses => ("form-group"
    + (Contract.CheckValidKey(FormClasses) ? " " + FormClasses : string.Empty)
    + (FormInvalid == true ? " has-error" : string.Empty))
    .Trim();

  /// <summary>Gets a value indicating whether this object use addons.</summary>
  /// <value>True if use addons, false if not.</value>
  private bool UseAddons => Contract.CheckAnyValidKey(LeftIcon, RightIcon);
}
