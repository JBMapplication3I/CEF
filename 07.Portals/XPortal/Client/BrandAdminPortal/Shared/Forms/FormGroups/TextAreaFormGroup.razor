@inherits MVC.Core.InputFormGroupControllerBase<string>

<Validation>
  <Tooltip
    Inline="false"
    Text="@Tooltip"
    Placement="TooltipPlacement.Top"
    Fade="true"
    AlwaysActive="TooltipIsOpen">
    <Field
      Horizontal="@IsHorizontal"
      sid="@("field_" + InputName)"
      Class="@AllFormClasses">
      @if (!NoLabel)
      {
        <FieldLabel
          For="@InputName"
          title="@Tooltip"
          sid="@("fieldLabel_" + InputName)">
          <Span>
            @LabelText
            @if (Required)
            {
              <Span TextColor="TextColor.Danger">&nbsp;*</Span>
            }
            @if (Contract.CheckValidKey(Tooltip) && Tooltip != LabelText)
            {
              <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.QuestionCircle" TextColor="TextColor.Info" Class="ml-1" />
            }
          </Span>
        </FieldLabel>
      }
      <FieldBody
        sid="@("fieldBody_" + InputName)">
        <MemoEdit
          sid="@("input_" + InputName)"
          ElementId="@InputName"
          Class="@AllInputClasses"
          Placeholder="@PlaceholderText"
          MinLength="@MinLength"
          MaxLength="@MaxLength"
          Disabled="@Disabled"
          required="@Required"
          TextExpression="ValueExpression"
          TextChanged="ValueChanged"
          Text="@Value"
          Rows="4"
          autocomplete="@Autocomplete"
          Autofocus="@Autofocus"
          FocusOut="@ExtraOnFocusOut"
          FocusIn="@ExtraOnFocusIn"
          KeyDown="@ExtraOnKeyDown"
          KeyPress="@ExtraOnKeyPress"
          KeyUp="@ExtraOnKeyUp">
          @*
          onmousedown="@ExtraOnMouseDown"
          onmouseup="@ExtraOnMouseUp"
          onmousemove="@ExtraOnMouseMove"
          onmouseover="@ExtraOnMouseOver"
          onmouseout="@ExtraOnMouseOut"
          onmousein="@ExtraOnMouseIn"
          *@
          <Feedback>
            @if (FormInvalid == true && !HideInvalidTooltip)
            {
              <ValidationError />
            }
            @if (FormValid == true && ShowValidTooltip)
            {
              <ValidationSuccess />
            }
          </Feedback>
        </MemoEdit>
      </FieldBody>
      @if (ShowCharacterCounter && MaxLength > 0)
      {
        <Div>
          @((Value ?? string.Empty).Length + " of " + MaxLength)
        </Div>
      }
    </Field>
  </Tooltip>
</Validation>

@code
{
  #region Parameters
#pragma warning disable CS8618 // Ignored: Parameters set by implementer
  /// <summary>Gets or sets a value indicating whether this object is horizontal.</summary>
  /// <value>True if this object is horizontal, false if not.</value>
  [Parameter]
  public bool IsHorizontal { get; set; }

  /// <summary>Gets or sets the placeholder text.</summary>
  /// <value>The placeholder text.</value>
  [Parameter]
  public string? PlaceholderText { get; set; }

  /// <summary>Gets or sets the length of the minimum.</summary>
  /// <value>The length of the minimum.</value>
  [Parameter]
  public int? MinLength { get; set; }

  /// <summary>Gets or sets the length of the maximum.</summary>
  /// <value>The length of the maximum.</value>
  [Parameter]
  public int? MaxLength { get; set; }

  /// <summary>Gets or sets a value indicating whether the character counter is shown.</summary>
  /// <value>True if show character counter, false if not.</value>
  [Parameter]
  public bool ShowCharacterCounter { get; set; }
#pragma warning restore CS8618 // Ignored: Parameters set by implementer
  #endregion

  /// <summary>Gets the input prefix.</summary>
  /// <value>The input prefix.</value>
  protected override string InputPrefix => "txta";

  /// <summary>Gets all input classes.</summary>
  /// <value>all input classes.</value>
  private string AllInputClasses => (FieldCssClasses
    + (Contract.CheckValidKey(InputClasses) ? " " + InputClasses : string.Empty)
    + (Contract.CheckValidKey(RightIcon) ? string.Empty : " rounded-right"))
    .Trim();

  /// <summary>Gets all form classes.</summary>
  /// <value>all form classes.</value>
  private string AllFormClasses => ("form-group"
    + (Contract.CheckValidKey(FormClasses) ? " " + FormClasses : string.Empty)
    + (FormInvalid == true ? " has-error" : string.Empty))
    .Trim();
}
