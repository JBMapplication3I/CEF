@*
* <copyright file="RecordCategories.razor" company="clarity-ventures.com">
* Copyright (c) 2022-2023 clarity-ventures.com. All rights reserved.
* </copyright>
* <summary>Record categories component. Manages assignments of categories to a master record.</summary>
*@
@typeparam TMaster where TMaster : class, IAmFilterableByCategoryModel<TSlave>
@typeparam TSlave where TSlave : class, IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel, new()

<Heading Size="HeadingSize.Is2">Categories</Heading>
<Row Class="flex-lg-row flex-sm-column-reverse row">
  <Column>
    <Heading Size="HeadingSize.Is3">Add Assignment using the plus sign</Heading>
    <Blazorise.Table Striped="true" Hoverable="true" Narrow="true">
      <TableHeader>
        <TableRow>
          <TableHeaderCell Class="w-0" Style="width:43px"></TableHeaderCell>
          <TableHeaderCell Class="w-15"></TableHeaderCell>
          <TableHeaderCell Class="w-65"></TableHeaderCell>
        </TableRow>
      </TableHeader>
      <TableBody>
        <Repeater Items="AvailableCollection">
          <TableRow>
            <TableRowCell>
              <Blazorise.Button
                Type="ButtonType.Button"
                Color="Color.Primary"
                Size="Size.Small"
                Clicked="_ => Add(context)">
                <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Plus" />
                <Span Class="sr-only">Add Assignment</Span>
              </Blazorise.Button>
            </TableRowCell>
            <TableRowCell>@context.ID</TableRowCell>
            <TableRowCell>@context.Name</TableRowCell>
          </TableRow>
        </Repeater>
      </TableBody>
    </Blazorise.Table>
  </Column>
  <Column>
    <Heading Size="HeadingSize.Is3">Assigned</Heading>
    <Blazorise.Table Striped="true" Hoverable="true" Narrow="true">
      <TableHeader>
        <TableRow>
          <TableHeaderCell Class="w-10">ID</TableHeaderCell>
          <TableHeaderCell Class="w-35">Name</TableHeaderCell>
          <TableHeaderCell Class="w-35">Key</TableHeaderCell>
          <TableHeaderCell Class="w-0" Style="width:43px"></TableHeaderCell>
        </TableRow>
      </TableHeader>
      <TableBody>
        @if (Contract.CheckEmpty(Record.Categories))
        {
          <TableRow>
            <TableRowCell ColumnSpan="4">None</TableRowCell>
          </TableRow>
        }
        else
        {
          <Repeater Items="Record.Categories">
            <TableRow>
              <TableRowCell>@context.SlaveID</TableRowCell>
              <TableRowCell>@context.SlaveName</TableRowCell>
              <TableRowCell>@(context.SlaveKey ?? context.CustomKey)</TableRowCell>
              <TableRowCell>
                <Blazorise.Button
                  Type="ButtonType.Button"
                  Color="Color.Danger"
                  Size="Size.Small"
                  Clicked="_ => { Record.Categories!.Remove(context); StateHasChanged(); }">
                  <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Trash" />
                  <Span Class="sr-only">Remove Assignment</Span>
                </Blazorise.Button>
              </TableRowCell>
            </TableRow>
          </Repeater>
        }
      </TableBody>
    </Blazorise.Table>
  </Column>
</Row>

@code
{
  #region Parameters
#pragma warning disable CS8618 // Ignored: Parameters set by implementer
  /// <summary>Gets or sets the record.</summary>
  /// <value>The record.</value>
  [Parameter, EditorRequired]
  public TMaster Record { get; set; }

  /// <summary>Gets or sets the collection of available assignments.</summary>
  /// <value>The assignments.</value>
  [Parameter, EditorRequired]
  public List<ProductCategorySelectorModel> AvailableCollection { get; set; }
#pragma warning restore CS8618 // Ignored: Parameters set by implementer
  #endregion

  /// <summary>Adds a link record to the collection.</summary>
  /// <param name="pcs">The product category selector model.</param>
  private void Add(ProductCategorySelectorModel pcs)
  {
    Record.Categories ??= new();
    if (Record.Categories.Any(x => x.ID == pcs.ID))
    {
      // Prevent Duplicates
      return;
    }
    Record.Categories.Add(new()
    {
      Active = true,
      CreatedDate = DateTime.Now,
      MasterID = Record.ID,
      SlaveID = pcs.ID,
      SlaveKey = pcs.CustomKey,
    });
  }
}
