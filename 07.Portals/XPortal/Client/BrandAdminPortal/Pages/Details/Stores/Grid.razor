@page "/details/stores"
@inherits MVC.Core.GridViewTemplatedControllerBase<StorePagedResults, StoreModel, MVC.Api.Endpoints.GetStores>

@if (PortalRoute is not null)
{
  <CEFPageTitle Value="@(PortalRoute.Title + RoutingOptions.PageTitleSuffix)" />
}
<CascadingValue Value="ViewState">
  <Div Class="page h-100" ElementId="storeDetailsPage">
    @if (ViewState.loading || CurrentDataCollection is null && !ViewState.hasError)
    {
      <Div Class="page-content p-3">
        <LoadingBlock />
      </Div>
    }
    else if (ViewState.hasError)
    {
      <Div Class="page-content p-3 w-100">
        <ErrorBlock />
      </Div>
    }
    else if (CurrentDataCollection is not null)
    {
      <Div Class="page-content w-100">
        <Container Fluid="true">
          <Row>
            <Column>
              <Div Class="d-flex justify-content-between align-items-center">
                <Heading Size="HeadingSize.Is1">
                  <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Store" Class="mr-1" />
                  @(PortalRoute?.HeaderText ?? PortalRoute?.Title ?? "Stores")
                </Heading>
                <Div>
                  <Button
                    Type="ButtonType.Button"
                    Color="Color.Primary"
                    Clicked="@(() => NavigationManager.NavigateToPortalRouteFor(RoutingOptions, CreatorRouteBase))">
                    Add Store
                  </Button>
                </Div>
              </Div>
              <DataGrid
                TItem="StoreModel"
                Data="@CurrentDataCollection.Results"
                Responsive="Responsive"
                Narrow="Narrow"
                Hoverable="Hoverable"
                Striped="Striped"
                Bordered="Bordered"
                Borderless="Borderless"
                Filterable="Filterable"
                ShowCaptions="ShowCaptions"
                Sortable="Sortable"
                Resizable="Resizable"
                ShowPageSizes="ShowPageSizes"
                ShowPager="ShowPager"
                PageSizes="PageSizes"
                PageSize="CurrentPageSize"
                PageSizeChanged="@(i => { CurrentPageSize = i; StateHasChanged(); })"
                CurrentPage="CurrentPage"
                PageChanged="@(e => { CurrentPage = e.Page; StateHasChanged(); })"
                MaxPaginationLinks="MaxPaginationLinks"
                TotalItems="@CurrentDataCollection.TotalCount"
                ReadData="@OnReadData"
                SelectedRowChanged="@OnSelectedRowChanged"
                CommandMode="DataGridCommandMode.Default"
                SelectionMode="DataGridSelectionMode.Single"
                SortMode="DataGridSortMode.Multiple"
                PagerPosition="DataGridPagerPosition.Bottom"
                FixedHeader="true"
                FixedHeaderDataGridHeight="100%"
                FixedHeaderDataGridMaxHeight="100%"
                ResizeMode="TableResizeMode.Header">
                <DataGridColumns>
                  <DataGridNumericColumn
                    TItem="StoreModel"
                    Field="@nameof(BaseModel.ID)"
                    Caption="#"
                    Sortable="true"
                    Filterable="true"
                    FilterCellClass="text-right"
                    DisplayFormat="{0:00000}"
                    Width="5%">
                    <FilterTemplate>
                      <NumericEdit
                        Style="min-width: 90px;"
                        TValue="int?"
                        Value="@dto.ID"
                        ValueExpression="@(() => dto.ID)"
                        ValueChanged="@(val => { dto.ID = val; OnFilter(); })"
                      />
                    </FilterTemplate>
                  </DataGridNumericColumn>
                  <DataGridColumn
                    TItem="StoreModel"
                    Field="@nameof(BaseModel.CustomKey)"
                    Caption="Key"
                    Sortable="true"
                    Filterable="true"
                    Width="10%">
                    <FilterTemplate>
                      <TextEdit
                        Style="min-width: 200px;"
                        Text="@dto.CustomKey"
                        TextExpression="@(() => dto.CustomKey)"
                        TextChanged="@(val => { dto.CustomKey = val; OnFilter(); })"
                      />
                    </FilterTemplate>
                  </DataGridColumn>
                  <DataGridColumn
                    TItem="StoreModel"
                    Field="@nameof(NameableBaseModel.Name)"
                    Caption="Name"
                    Sortable="true"
                    Filterable="true">
                    <FilterTemplate>
                      <TextEdit
                        Style="min-width: 200px;"
                        Text="@dto.Name"
                        TextExpression="@(() => dto.Name)"
                        TextChanged="@(val => { dto.Name = val; OnFilter(); })"
                      />
                    </FilterTemplate>
                  </DataGridColumn>
                  <DataGridColumn
                    TItem="StoreModel"
                    Field="@nameof(StoreModel.TypeID)"
                    Caption="Type"
                    Sortable="true"
                    Filterable="true"
                    Width="7%">
                    <DisplayTemplate>@TypeIDToDisplayName(context.TypeID)</DisplayTemplate>
                    <FilterTemplate>
                      <Select
                        TValue="int?"
                        Style="min-width: 150px;"
                        SelectedValue="@dto.TypeID"
                        SelectedValueExpression="@(() => dto.TypeID)"
                        SelectedValueChanged="@(val => { dto.TypeID = val; OnFilter(); })">
                        <SelectItem TValue="int?" Value="@(0)">Any</SelectItem>
                        @if (Contract.CheckNotEmpty(Types))
                        {
                          <Repeater Items="Types">
                            <ChildContent Context="type">
                              <SelectItem TValue="int?" Value="@type.ID">@TypeIDToDisplayName(type.ID)</SelectItem>
                            </ChildContent>
                          </Repeater>
                        }
                      </Select>
                    </FilterTemplate>
                  </DataGridColumn>
                  <DataGridColumn
                    TItem="StoreModel"
                    Field="@nameof(StoreModel.Contact)"
                    Caption="Location"
                    Sortable="false"
                    Filterable="false">
                    <DisplayTemplate Context="context">
                      @($"{context.Contact.Address.Street1},"
                        + $" {context.Contact.Address.City}, "
                        + $"{context.Contact.Address.RegionCode}, "
                        + $"{context.Contact.Address.CountryCode}, "
                        + $"{context.Contact.Address.PostalCode}")
                    </DisplayTemplate>
                  </DataGridColumn>
                  <DataGridColumn
                    TItem="StoreModel"
                    Field="@nameof(StoreModel.StoreDistricts)"
                    Caption="County"
                    Sortable="false"
                    Filterable="false"
                    Width="10%">
                    <DisplayTemplate Context="context">
                      @($"{context.StoreDistricts?.FirstOrDefault()?.SlaveName ?? string.Empty}")
                    </DisplayTemplate>
                  </DataGridColumn>
                  <DataGridColumn
                    TItem="StoreModel"
                    Field="@nameof(BaseModel.ID)"
                    Caption=""
                    Sortable="false"
                    Filterable="false"
                    Width="10%">
                    <DisplayTemplate>
                      <Button
                        Type="ButtonType.Button"
                        Color="Color.Link"
                        Clicked="@(() => OnItemViewClicked(context.ID))">
                        View
                      </Button>
                    </DisplayTemplate>
                  </DataGridColumn>
                </DataGridColumns>
                <EmptyTemplate><Div Class="box p-3">No records found.</Div></EmptyTemplate>
                <LoadingTemplate><Div Class="box p-3"><Progress Size="Size.Small" Color="Color.Primary" Value="35"></Progress></Div></LoadingTemplate>
                <FirstPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleLeft" /></Span></FirstPageButtonTemplate>
                <PreviousPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleLeft" /></Span></PreviousPageButtonTemplate>
                <NextPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleRight" /></Span></NextPageButtonTemplate>
                <LastPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleRight" /></Span></LastPageButtonTemplate>
              </DataGrid>
            </Column>
          </Row>
        </Container>
      </Div>
    }
  </Div>
</CascadingValue>

@code
{
  #region Properties
  /// <inheritdoc />
  protected override string GridViewRouteBase => "/details/stores";

  /// <inheritdoc />
  protected override string EditorRouteBase => GridViewRouteBase + "/editor/";

  /// <inheritdoc />
  protected override string CreatorRouteBase => GridViewRouteBase + "/creator/";

  #region Dynamic Properties for UI
  private List<TypeModel>? Types { get; set; }
  #endregion
  #endregion

  /// <inheritdoc />
  protected override Task LoadExtendedInitialDataAsync()
  {
    return Task.WhenAll(LoadTypesAsync());
  }

  /// <inheritdoc />
#pragma warning disable CS1998
  protected override async Task<MVC.Core.IHttpPromiseCallbackArg<StorePagedResults?>> FilteredDataLoadCallAsync(
    DataGridReadDataEventArgs<StoreModel>? e)
#pragma warning restore CS1998
  {
    DebugBeginMethod();
#if MANUFACTURERADMIN || VENDORADMIN || STOREADMIN
    throw new InvalidOperationException();
#else
    var dto = new MVC.Api.Endpoints.GetStores
    {
      Active = true,
      Paging = new() { Size = CurrentPageSize, StartIndex = CurrentPage },
      // NOTE: Appropriate MasterID check is enforced api-side
    };
    dto = await ExtendSearchDTOAsync(e, dto).ConfigureAwait(false);
    DebugEndMethod();
    return await cvApi.GetStores(dto).ConfigureAwait(false);
#endif
  }

  /// <inheritdoc />
  protected override Task<MVC.Core.IHttpPromiseCallbackArg<StorePagedResults?>> InitialDataLoadCallAsync()
  {
    return FilteredDataLoadCallAsync(null);
  }

  /// <inheritdoc />
  protected override bool CustomFilterCheck(StoreModel model)
  {
    return true;
  }

  /// <summary>Extend search data transfer object.</summary>
  /// <typeparam name="TDTO">Type of the data transfer object model.</typeparam>
  /// <param name="e">  The DataGridReadDataEventArgs{StoreModel}? to process.</param>
  /// <param name="dto">The data transfer object.</param>
  /// <returns>A Task.</returns>
  protected /*override*/ Task<TDTO> ExtendSearchDTOAsync<TDTO>(
      DataGridReadDataEventArgs<StoreModel>? e,
      TDTO dto)
    where TDTO : NameableBaseSearchModel
  {
    DebugBeginMethod();
    if (e is null)
    {
      return Task.FromResult(dto);
    }
    var sorts = (
      from dataGridColumnInfo in e.Columns
      where dataGridColumnInfo.SortDirection != SortDirection.None
      select new Sort
      {
        Dir = dataGridColumnInfo.SortDirection == SortDirection.Ascending ? "asc" : "desc",
        Order = dataGridColumnInfo.SortIndex,
        Field = dataGridColumnInfo.Field,
      })
      .ToList();
    dto.Sorts = Contract.CheckEmpty(sorts) ? null : sorts.ToArray();
    // NOTE: MasterID, Active, AsListing are enforced on api-side
    // Copy from AdminGet model to SearchModel
    dto.ID = dto.ID;
    dto.CustomKey = dto.CustomKey;
    dto.Name = dto.Name;
    DebugEndMethod();
    return Task.FromResult(dto);
  }

  private string TypeIDToDisplayName(int id)
  {
    if (!Contract.CheckValidID(id) || Contract.CheckEmpty(Types))
    {
      return "Unknown";
    }
    var found = Types!.SingleOrDefault(x => x.ID == id);
    if (found is not null)
    {
      return found.DisplayName ?? found.Name ?? "Unknown";
    }
    return "Unknown";
  }

  private async Task LoadTypesAsync()
  {
    DebugBeginMethod();
    var result = await cvApi.GetStoreTypes(new() { Active = true }).ConfigureAwait(false);
    if (result.data is not null)
    {
      Types = result.data.Results;
    }
    DebugEndMethod();
  }
}
