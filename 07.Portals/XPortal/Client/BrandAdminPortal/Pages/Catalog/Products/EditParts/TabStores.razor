@using Clarity.Ecommerce.MVC.Core
@using Clarity.Ecommerce.MVC.Api.Endpoints

@inherits TabAssociationBase<
  ProductModel,
  StoreModel,
  StorePagedResults,
  GetStores,
  StoreProductModel,
  StoreProductPagedResults,
  GetStoreProducts,
  CreateStoreProduct,
  DeactivateStoreProductByID,
  ModalEditStoreProduct>

@{
  /* Write the base component content here */
  base.BuildRenderTree(__builder);
}

<ModalEditStoreProduct @ref="modalEdit" />


@*
@using Clarity.Ecommerce.MVC.Core;
@inherits TemplatedControllerBase
@inject CEFConfig cefConfig
@inject CEFAPI cvApi
@inject IMapper mapper

<Heading Size="HeadingSize.Is2">Stores</Heading>
<Row>
  <Column ColumnSize="ColumnSize.Is8.OnTablet">
    <Heading Size="HeadingSize.Is3">Available</Heading>
    @if (available is not null)
    {
      <ServerSidePagingHeader
        TRecord="StoreModel"
        TPagedRecord="StorePagedResults"
        TEndpoint="MVC.Api.Endpoints.GetStores"
        Paging="available"
        Disabled="ViewState.InputDisable"
        Narrow="true"
        @bind-QuickFilter="quickFilter"
      />
    }
    <Blazorise.Table
      Striped="true"
      Narrow="true"
      Hoverable="true"
      Responsive="true"
      Class="mb-3 table-cells-valign-middle">
      <TableHeader>
        <TableRow>
          <TableHeaderCell Class="w-5">#</TableHeaderCell>
          <TableHeaderCell Class="w-35">Key</TableHeaderCell>
          <TableHeaderCell Class="w-60">Name</TableHeaderCell>
          <TableHeaderCell Style="width:43px;"></TableHeaderCell>
        </TableRow>
      </TableHeader>
      <TableBody>
        @if (available is not null)
        {
          @if (available.FilteredCount <= 0)
          {
            <TableRow>
              <TableRowCell ColumnSpan="4">No results found.</TableRowCell>
            </TableRow>
          }
          else
          {
            <Repeater Items="available.FilteredData[available.CurrentPage]">
              <TableRow>
                <TableRowCell>@context.ID</TableRowCell>
                <TableRowCell>@context.CustomKey</TableRowCell>
                <TableRowCell>@context.Name</TableRowCell>
                <TableRowCell>
                  <Blazorise.Button
                    Type="ButtonType.Button"
                    Color="Color.Success"
                    ElementId="@("btnAdd_productToStores_" + context.ID)"
                    Disabled="ViewState.InputDisable"
                    Clicked="() => AddAssociationAsync(context.ID)">
                    <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Plus" />
                    <Span Class="sr-only">Add</Span>
                  </Blazorise.Button>
                </TableRowCell>
              </TableRow>
            </Repeater>
          }
        }
      </TableBody>
    </Blazorise.Table>
  </Column>
  <Column ColumnSize="ColumnSize.Is4.OnTablet">
    <Heading Size="HeadingSize.Is3">Assigned</Heading>
    @if (assigned is not null)
    {
      <ServerSidePagingHeader
        TRecord="StoreProductModel"
        TPagedRecord="StoreProductPagedResults"
        TEndpoint="MVC.Api.Endpoints.GetStoreProducts"
        Paging="assigned"
        Disabled="ViewState.InputDisable"
        Narrow="true"
      />
    }
    <Blazorise.Table
      Striped="true"
      Hoverable="true"
      Narrow="true"
      Responsive="true"
      Class="mb-3 table-cells-valign-middle">
      <TableHeader>
        <TableRow>
          <TableHeaderCell>Name</TableHeaderCell>
          <TableHeaderCell Style="width:43px;"></TableHeaderCell>
          * <TableHeaderCell Style="width:43px;"></TableHeaderCell> *
        </TableRow>
      </TableHeader>
      <TableBody Style="min-height: 200px;">
        @if (assigned is not null)
        {
          @if (assigned.FilteredCount <= 0)
          {
            <TableRow>
              <TableRowCell ColumnSpan="2">No Results Found</TableRowCell>
            </TableRow>
          }
          else
          {
            <Repeater Items="assigned.FilteredData[assigned.CurrentPage]">
              <TableRow>
                <TableRowCell>
                  <Tooltip
                    Text="@(context.MasterID + " " + (context.MasterKey ?? context.Master?.CustomKey) + " " + (context.MasterName ?? context.Master?.Name))">
                    <Span>@(context.MasterName ?? context.Master?.Name)</Span>
                  </Tooltip>
                </TableRowCell>
                <TableRowCell>
                  <Blazorise.Button
                    Type="ButtonType.Button"
                    Color="Color.Info"
                    ElementId="@("btnEdit_productToVendors_" + context.ID)"
                    Disabled="ViewState.InputDisable"
                    Clicked="() => EditAssociationAsync(context)">
                    <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.PencilAlt" />
                    <Span Class="sr-only">Edit</Span>
                  </Blazorise.Button>
                </TableRowCell>
                <TableRowCell>
                  <Blazorise.Button
                    Type="ButtonType.Button"
                    Color="Color.Danger"
                    ElementId="@("btnRemove_productToStores_" + context.ID)"
                    Disabled="ViewState.InputDisable"
                    Clicked="() => RemoveAssociationAsync(context)">
                    <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Trash" />
                    <Span Class="sr-only">Remove</Span>
                  </Blazorise.Button>
                </TableRowCell>
              </TableRow>
            </Repeater>
          }
        }
      </TableBody>
    </Blazorise.Table>
  </Column>
</Row>
<MessageModalFactory @ref="messageModalFactory" />
<ConfirmModalFactory @ref="confirmModalFactory" />
<ModalEditStoreProduct @ref="modalEdit" />

@code
{
  #region Parameters
  /// <summary>Gets or sets the record.</summary>
  /// <value>The record.</value>
  [Parameter, EditorRequired]
  public ProductModel Record { get; set; } = null!;

  /// <summary>Gets or sets the mapper.</summary>
  /// <value>The mapper.</value>
  [Inject]
  public IMapper Mapper { get; set; } = null!;
  #endregion

  private string? quickFilter;
  private ServerSidePaging<StoreModel, StorePagedResults, MVC.Api.Endpoints.GetStores>? available;
  private ServerSidePaging<StoreProductModel, StoreProductPagedResults, MVC.Api.Endpoints.GetStoreProducts>? assigned;
  private MessageModalFactory? messageModalFactory;
  private ConfirmModalFactory? confirmModalFactory;
  private ModalEditStoreProduct? modalEdit;

  /// <inheritdoc />
  protected override async Task OnInitializedAsync()
  {
    DebugBeginMethod();
    await base.OnInitializedAsync().ConfigureAwait(false);
    available = new(
      searchCall: cvApi.GetStores,
      size: 8,
      name: $"product-{Record.ID}.to.Stores.available",
      searchParameterName: null,
      searchParamsToMerge: () => new MVC.Api.Endpoints.GetStores
      {
        Active = true,
        AsListing = true,
        Sorts = new[]
        {
          new Sort { Field = "Name", Order = 0, Dir = "asc" },
          new Sort { Field = "CustomKey", Order = 1, Dir = "asc" },
          new Sort { Field = "ID", Order = 2, Dir = "asc" }
        },
      },
      waitCondition: () => !Contract.CheckValidID(Record.ID),
      callback: StateHasChanged);
    assigned = new(
      searchCall: cvApi.GetStoreProducts,
      size: 8,
      name: $"product-{Record.ID}.to.Stores.assigned",
      searchParameterName: null,
      searchParamsToMerge: () => new MVC.Api.Endpoints.GetStoreProducts
      {
        Active = true,
        AsListing = true,
        SlaveID = Record.ID,
        Sorts = new[]
        {
          new Sort { Field = "CustomKey", Order = 0, Dir = "asc" },
          new Sort { Field = "ID", Order = 1, Dir = "asc" }
        },
      },
      waitCondition: () => !Contract.CheckValidID(Record.ID),
      callback: StateHasChanged);
    await FinishRunningAsync().ConfigureAwait(false);
    ViewState.loading = false;
    DebugEndMethod();
  }

  /// <summary>Extended record data enforcement on save.</summary>
  /// <param name="timestamp">The timestamp Date/Time.</param>
  /// <returns>A Task.</returns>
  public Task ExtendedRecordDataEnforcementOnSaveAsync(DateTime timestamp)
  {
    DebugBeginMethod();
    DebugEndMethod();
    return Task.CompletedTask;
  }

  /// <summary>Extended record data calls on after save.</summary>
  /// <param name="timestamp">The timestamp Date/Time.</param>
  /// <returns>A Task.</returns>
  public Task ExtendedRecordDataCallsOnAfterSaveAsync(DateTime timestamp)
  {
    DebugBeginMethod();
    DebugEndMethod();
    return Task.CompletedTask;
  }

  private async Task AddAssociationAsync(int idToAssociate)
  {
    DebugBeginMethod();
    if (!Contract.CheckValidID(idToAssociate))
    {
      DebugEndMethod();
      return;
    }
    /* This check isn't necessary
    if (!record || !record.ID)
    {
      cvMessageModalFactory.show("You must save the record first");
      DebugEndMethod();
      return;
    }
    */
    // Ensure the data is loaded
    var model = available!.DataUnpaged.SingleOrDefault(x => x.ID == idToAssociate);
    if (model is null)
    {
      DebugEndMethod();
      return;
    }
    // Ensure it's not already in the collection
    if (assigned!.DataUnpaged.Any(x => x.Active && x.MasterID == model.ID))
    {
      // cvMessageModalFactory.show("This is already associated");
      DebugEndMethod();
      return;
    }
    await SetRunningAsync().ConfigureAwait(false);
    MVC.Api.Endpoints.GetStoreProducts dupeCheckDto = new()
    {
      Active = true,
      AsListing = true,
      MasterID = idToAssociate,
      SlaveID = Record.ID,
    };
    var r = await cvApi.GetStoreProducts(dupeCheckDto).ConfigureAwait(false);
    if (r?.data?.Results is null)
    {
      await messageModalFactory!.ShowAsync(
          message: "Could not retrieve data from duplicate check",
          callback: () => FinishRunningAsync(true, "Could not retrieve data from duplicate check"))
        .ConfigureAwait(false);
      DebugEndMethod();
      return;
    }
    if (Contract.CheckNotEmpty(r.data.Results))
    {
      await messageModalFactory!.ShowAsync(
          message: "This is already in the collection.",
          callback: () => FinishRunningAsync(true, "This is already in the collection."))
        .ConfigureAwait(false);
      DebugEndMethod();
      return;
    }
    // Add it
    var rc = await cvApi.CreateStoreProduct(
      new()
      {
        Active = true,
        CreatedDate = DateTime.Now,
        MasterID = model.ID,
        SlaveID = Record.ID,
      })
      .ConfigureAwait(false);
    if (rc?.data is null)
    {
      await FinishRunningAsync(true, "ERROR! Failed to create the association in the server").ConfigureAwait(false);
      DebugEndMethod();
      return;
    }
    // Ensure we are only setting the new way
    Record.Stores = null;
    assigned.ResetAll(); // Pull updated data
    assigned.Search(); // Pull updated data
    ViewState.MakeDirty();
    await FinishRunningAsync().ConfigureAwait(false);
    StateHasChanged();
    DebugEndMethod();
  }

  private Task EditAssociationAsync(StoreProductModel toEdit)
  {
    DebugBeginMethod();
    DebugEndMethod();
    return modalEdit!.ShowAsync(
      association: toEdit,
      callback: async (accept, toSend) =>
      {
        DebugBeginMethod();
        if (accept)
        {
          var r = await cvApi.UpdateStoreProduct(
              Mapper.Map<MVC.Api.Endpoints.UpdateStoreProduct>(toSend))
            .ConfigureAwait(false);
          if (r.data?.ActionSucceeded != true)
          {
            await FinishRunningAsync(true, errorMessages: r.data?.Messages.ToArray()).ConfigureAwait(false);
            StateHasChanged();
            DebugEndMethod();
            return;
          }
          // Ensure we are only setting the new way
          Record.Stores = null;
          assigned!.ResetAll(); // Pull updated data
          assigned.Search(); // Pull updated data
          ViewState.MakeDirty();
        }
        await FinishRunningAsync().ConfigureAwait(false);
        StateHasChanged();
        DebugEndMethod();
      });
  }

  private Task RemoveAssociationAsync(StoreProductModel toRemove)
  {
    DebugBeginMethod();
    DebugEndMethod();
    return confirmModalFactory!.ShowAsync(
      message: "Are you sure you want to remove this association?",
      callback: async result =>
      {
        DebugBeginMethod();
        if (!result)
        {
          DebugEndMethod();
          return;
        }
        var r = await cvApi.DeactivateStoreProductByID(new() { ID = toRemove.ID }).ConfigureAwait(false);
        if (r?.data is not { ActionSucceeded: true })
        {
          await FinishRunningAsync(true, "ERROR! Failed to disassociate the record in the server.").ConfigureAwait(false);
          DebugEndMethod();
          return;
        }
        // Ensure we are only setting the new way
        Record.Stores = null;
        assigned!.ResetAll(); // Pull updated data
        assigned.Search(); // Pull updated data
        await messageModalFactory!.ShowAsync(
            message: "The record has been disassociated on the server",
            callback: () => FinishRunningAsync())
          .ConfigureAwait(false);
        StateHasChanged();
        DebugEndMethod();
      });
  }
}
*@
