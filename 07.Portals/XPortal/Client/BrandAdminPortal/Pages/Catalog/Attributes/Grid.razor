@page "/catalog/attributes"
@inherits MVC.Core.GridViewTemplatedControllerBase<GeneralAttributePagedResults, GeneralAttributeModel, MVC.Api.Endpoints.GetGeneralAttributes>

@if (PortalRoute is not null)
{
  <CEFPageTitle Value="@(PortalRoute.Title + RoutingOptions.PageTitleSuffix)" />
}
<CascadingValue Value="ViewState">
  <Div Class="page h-100" ElementId="attributeCatalogPage">
    @if (ViewState.loading || CurrentDataCollection is null && !ViewState.hasError)
    {
      <Div Class="page-content p-3">
        <LoadingBlock />
      </Div>
    }
    else if (ViewState.hasError)
    {
      <Div Class="page-content p-3 w-100">
        <ErrorBlock />
      </Div>
    }
    else if (CurrentDataCollection is not null)
    {
      <Div Class="page-content w-100">
        <Container Fluid="true">
          <Row>
            <Column>
              <Div Class="d-flex justify-content-between align-items-center">
                <Heading Size="HeadingSize.Is1">
                  <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Table" Class="mr-2" />
                  @(PortalRoute?.HeaderText ?? PortalRoute?.Title ?? "Attributes")
                </Heading>
                <Div>
                  <Blazorise.Button
                    Type="ButtonType.Button"
                    Color="Color.Primary"
                    Clicked="@(() => NavigationManager.NavigateToPortalRouteFor(RoutingOptions, CreatorRouteBase))">
                    Add Attribute
                  </Blazorise.Button>
                </Div>
              </Div>
              <Validations
                EditContext="EditContext"
                Mode="ValidationMode.Manual"
                ValidateOnLoad="true">
                <DataGrid
                  TItem="GeneralAttributeModel"
                  Data="@CurrentDataCollection.Results"
                  Responsive="Responsive"
                  Narrow="Narrow"
                  Hoverable="Hoverable"
                  Striped="Striped"
                  Bordered="Bordered"
                  Borderless="Borderless"
                  Filterable="Filterable"
                  ShowCaptions="ShowCaptions"
                  Sortable="Sortable"
                  Resizable="Resizable"
                  ShowPageSizes="ShowPageSizes"
                  ShowPager="ShowPager"
                  PageSizes="PageSizes"
                  PageSize="CurrentPageSize"
                  PageSizeChanged="@(i => { CurrentPageSize = i; StateHasChanged(); })"
                  CurrentPage="CurrentPage"
                  PageChanged="e => { CurrentPage = e.Page; StateHasChanged(); }"
                  MaxPaginationLinks="MaxPaginationLinks"
                  TotalItems="@CurrentDataCollection.TotalCount"
                  ReadData="@OnReadData"
                  SelectedRowChanged="@OnSelectedRowChanged"
                  CommandMode="DataGridCommandMode.Default"
                  SelectionMode="DataGridSelectionMode.Single"
                  SortMode="DataGridSortMode.Multiple"
                  PagerPosition="DataGridPagerPosition.Bottom"
                  FixedHeader="true"
                  FixedHeaderDataGridHeight="100%"
                  FixedHeaderDataGridMaxHeight="100%"
                  ResizeMode="TableResizeMode.Header">
                  <DataGridColumns>
                    <DataGridNumericColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption="#"
                      Sortable="true"
                      Filterable="true"
                      FilterCellClass="text-right"
                      DisplayFormat="{0:00000}"
                      Width="5%">
                      <FilterTemplate>
                        <NumericEdit
                          TValue="int"
                          Value="@(dto.ID ?? 0)"
                          ValueChanged="@(val => { dto.ID = val; context.TriggerFilterChange(val); })"
                        />
                      </FilterTemplate>
                    </DataGridNumericColumn>
                    <DataGridColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(BaseModel.CustomKey)"
                      Caption="Key"
                      Sortable="true"
                      Filterable="true"
                      Width="10%">
                      <FilterTemplate>
                        <TextEdit
                          Text="@dto.CustomKey"
                          TextChanged="@(val => { dto.CustomKey = val; context.TriggerFilterChange(val); })"
                        />
                      </FilterTemplate>
                    </DataGridColumn>
                    <DataGridColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(NameableBaseModel.Name)"
                      Caption="Name"
                      Sortable="true"
                      Filterable="true">
                      <FilterTemplate>
                        <TextEdit
                          Text="@dto.Name"
                          TextChanged="@(val => { dto.Name = val; context.TriggerFilterChange(val); })"
                        />
                      </FilterTemplate>
                    </DataGridColumn>
                    <DataGridColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(DisplayableBaseModel.DisplayName)"
                      Caption="Display Name"
                      Sortable="true"
                      Filterable="true">
                      <FilterTemplate>
                        <TextEdit
                          Text="@dto.DisplayName"
                          TextChanged="@(val => { dto.DisplayName = val; context.TriggerFilterChange(val); })"
                        />
                      </FilterTemplate>
                    </DataGridColumn>
                    <DataGridCheckColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(GeneralAttributeModel.HideFromStorefront)"
                      Caption="Hidden"
                      Sortable="true"
                      Filterable="true"
                      Width="7%">
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Checked="context.HideFromStorefront"
                          Disabled="true" />
                      </DisplayTemplate>
                      <FilterTemplate>
                        <Div class="float-left">
                          <Check
                            TValue="bool"
                            Checked="@(dto.HideFromStorefront ?? false)"
                            CheckedChanged="@(val => { dto.HideFromStorefront = val; context.TriggerFilterChange(val); })"
                          />
                        </Div>
                        <Blazorise.Button
                          Class="float-left p-0"
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Visibility="@(dto.HideFromStorefront == null ? Visibility.Invisible : Visibility.Visible)"
                          Clicked="@(val => { dto.HideFromStorefront = null; context.TriggerFilterChange(null); })">
                          Clear
                        </Blazorise.Button>
                      </FilterTemplate>
                    </DataGridCheckColumn>
                    <DataGridCheckColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(GeneralAttributeModel.IsComparable)"
                      Caption="Compare"
                      Sortable="true"
                      Filterable="true"
                      Width="7%">
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Checked="context.IsComparable"
                          Disabled="true"
                        />
                      </DisplayTemplate>
                      <FilterTemplate>
                        <Div class="float-left">
                          <Check
                            TValue="bool"
                            Checked="@(dto.IsComparable ?? false)"
                            CheckedChanged="@(val => { dto.IsComparable = val; context.TriggerFilterChange(val); })" />
                        </Div>
                        <Blazorise.Button
                          Class="float-left p-0"
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Visibility="@(dto.IsComparable == null ? Visibility.Invisible : Visibility.Visible)"
                          Clicked="@(val => { dto.IsComparable = null; context.TriggerFilterChange(null); })">
                          Clear
                        </Blazorise.Button>
                      </FilterTemplate>
                    </DataGridCheckColumn>
                    <DataGridCheckColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(GeneralAttributeModel.IsFilter)"
                      Caption="Filter"
                      Sortable="true"
                      Filterable="true"
                      Width="7%">
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Checked="context.IsFilter"
                          Disabled="true"
                        />
                      </DisplayTemplate>
                      <FilterTemplate>
                        <Div class="float-left">
                          <Check
                            TValue="bool"
                            Checked="@(dto.IsFilter ?? false)"
                            CheckedChanged="@(val => { dto.IsFilter = val; context.TriggerFilterChange(val); })" />
                        </Div>
                        <Blazorise.Button
                          Class="float-left p-0"
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Visibility="@(dto.IsFilter == null ? Visibility.Invisible : Visibility.Visible)"
                          Clicked="@(val => { dto.IsFilter = null; context.TriggerFilterChange(null); })">
                          Clear
                        </Blazorise.Button>
                      </FilterTemplate>
                    </DataGridCheckColumn>
                    <DataGridCheckColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(GeneralAttributeModel.IsPredefined)"
                      Caption="Predefined"
                      Sortable="true"
                      Filterable="true"
                      Width="7%">
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Checked="context.IsPredefined"
                          Disabled="true"
                        />
                      </DisplayTemplate>
                      <FilterTemplate>
                        <div class="float-left">
                          <Check
                            TValue="bool"
                            Checked="@(dto.IsPredefined ?? false)"
                            CheckedChanged="@(val => { dto.IsPredefined = val; context.TriggerFilterChange(val); })"
                          />
                        </div>
                        <Blazorise.Button
                          Class="float-left p-0"
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Visibility="@(dto.IsPredefined == null ? Visibility.Invisible : Visibility.Visible)"
                          Clicked="@(val => { dto.IsPredefined = null; context.TriggerFilterChange(null); })">
                          Clear
                        </Blazorise.Button>
                      </FilterTemplate>
                    </DataGridCheckColumn>
                    <DataGridCheckColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(GeneralAttributeModel.IsMarkup)"
                      Caption="Markup"
                      Sortable="true"
                      Filterable="true"
                      Width="7%">
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Checked="context.IsMarkup"
                          Disabled="true"
                        />
                      </DisplayTemplate>
                      <FilterTemplate>
                        <div class="float-left">
                          <Check
                            TValue="bool"
                            Checked="@(dto.IsMarkup ?? false)"
                            CheckedChanged="@(val => { dto.IsMarkup = val; context.TriggerFilterChange(val); })"
                          />
                        </div>
                        <Blazorise.Button
                          Class="float-left p-0"
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Visibility="@(dto.IsMarkup == null ? Visibility.Invisible : Visibility.Visible)"
                          Clicked="@(val => { dto.IsMarkup = null; context.TriggerFilterChange(null); })">
                          Clear
                        </Blazorise.Button>
                      </FilterTemplate>
                    </DataGridCheckColumn>
                    <DataGridCheckColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(GeneralAttributeModel.IsTab)"
                      Caption="Tab"
                      Sortable="true"
                      Filterable="true"
                      Width="7%">
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Checked="context.IsTab"
                          Disabled="true"
                        />
                      </DisplayTemplate>
                      <FilterTemplate>
                        <div class="float-left">
                          <Check
                            TValue="bool"
                            Checked="@(dto.IsTab ?? false)"
                            CheckedChanged="@(val => { dto.IsTab = val; context.TriggerFilterChange(val); })"
                          />
                        </div>
                        <Blazorise.Button
                          Class="float-left p-0"
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Visibility="@(dto.IsTab == null ? Visibility.Invisible : Visibility.Visible)"
                          Clicked="@(val => { dto.IsTab = null; context.TriggerFilterChange(null); })">
                          Clear
                        </Blazorise.Button>
                      </FilterTemplate>
                    </DataGridCheckColumn>
                    <DataGridColumn
                      TItem="GeneralAttributeModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption=""
                      Sortable="false"
                      Filterable="false"
                      Width="5%">
                      <DisplayTemplate>
                        <Blazorise.Button
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Clicked="@(() => OnItemViewClicked(context.ID))">
                          View
                        </Blazorise.Button>
                      </DisplayTemplate>
                    </DataGridColumn>
                  </DataGridColumns>
                  <EmptyTemplate><Div Class="box p-3">No records found.</Div></EmptyTemplate>
                  <LoadingTemplate><Div Class="box p-3"><Progress Size="Size.Small" Color="Color.Primary" Value="35"></Progress></Div></LoadingTemplate>
                  <FirstPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleLeft" /></Span></FirstPageButtonTemplate>
                  <PreviousPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleLeft" /></Span></PreviousPageButtonTemplate>
                  <NextPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleRight" /></Span></NextPageButtonTemplate>
                  <LastPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleRight" /></Span></LastPageButtonTemplate>
                </DataGrid>
              </Validations>
            </Column>
          </Row>
        </Container>
      </Div>
    }
  </Div>
</CascadingValue>

@code
{
  #region Properties
  /// <inheritdoc />
  protected override string GridViewRouteBase => "/catalog/attributes";

  /// <inheritdoc />
  protected override string EditorRouteBase => GridViewRouteBase + "/editor/";

  /// <inheritdoc />
  protected override string CreatorRouteBase => GridViewRouteBase + "/creator/";
  #endregion

  /// <inheritdoc />
  protected override Task LoadExtendedInitialDataAsync()
  {
    return Task.CompletedTask;
  }

  /// <inheritdoc />
  protected override async Task<MVC.Core.IHttpPromiseCallbackArg<GeneralAttributePagedResults?>> FilteredDataLoadCallAsync(
    DataGridReadDataEventArgs<GeneralAttributeModel>? e)
  {
    DebugBeginMethod();
    var dto = new MVC.Api.Endpoints.GetGeneralAttributes
    {
      Active = true,
      Paging = new() { Size = CurrentPageSize, StartIndex = CurrentPage },
      // NOTE: Appropriate MasterID check is enforced api-side
    };
    dto = await ExtendSearchDTOAsync(e, dto).ConfigureAwait(false);
    DebugEndMethod();
    return await cvApi.GetGeneralAttributes(dto).ConfigureAwait(false);
  }

  /// <inheritdoc />
  protected override Task<MVC.Core.IHttpPromiseCallbackArg<GeneralAttributePagedResults?>> InitialDataLoadCallAsync()
  {
    return FilteredDataLoadCallAsync(null);
  }

  /// <inheritdoc />
  protected override bool CustomFilterCheck(GeneralAttributeModel model)
  {
    return true;
  }

  /// <summary>Extend search data transfer object.</summary>
  /// <typeparam name="TDTO">Type of the data transfer object model.</typeparam>
  /// <param name="e">  The DataGridReadDataEventArgs{GeneralAttributeModel}? to process.</param>
  /// <param name="dto">The data transfer object.</param>
  /// <returns>A Task.</returns>
  protected /*override*/ Task<TDTO> ExtendSearchDTOAsync<TDTO>(
      DataGridReadDataEventArgs<GeneralAttributeModel>? e,
      TDTO dto)
    where TDTO : GeneralAttributeSearchModel
  {
    DebugBeginMethod();
    if (e is null)
    {
      return Task.FromResult(dto);
    }
    var sorts = (
      from dataGridColumnInfo in e.Columns
      where dataGridColumnInfo.SortDirection != SortDirection.None
      select new Sort
      {
        Dir = dataGridColumnInfo.SortDirection == SortDirection.Ascending ? "asc" : "desc",
        Order = dataGridColumnInfo.SortIndex,
        Field = dataGridColumnInfo.Field,
      })
      .ToList();
    dto.Sorts = Contract.CheckEmpty(sorts) ? null : sorts.ToArray();
    // NOTE: MasterID, Active, AsListing are enforced on api-side
    // Copy from AdminGet model to SearchModel
    dto.ID = dto.ID;
    dto.CustomKey = dto.CustomKey;
    dto.Name = dto.Name;
    dto.DisplayName = dto.DisplayName;
    dto.HideFromStorefront = dto.HideFromStorefront;
    dto.IsComparable = dto.IsComparable;
    dto.IsFilter = dto.IsFilter;
    dto.IsPredefined = dto.IsPredefined;
    dto.IsMarkup = dto.IsMarkup;
    DebugEndMethod();
    return Task.FromResult(dto);
  }
}
