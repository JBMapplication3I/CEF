@page "/sales/orders"
@inherits MVC.Core.GridViewTemplatedControllerBase<SalesOrderPagedResults, SalesOrderModel, MVC.Api.Endpoints.AdminGetSalesOrdersForPortal>

@if (PortalRoute is not null)
{
  <CEFPageTitle Value="@(PortalRoute.Title + RoutingOptions.PageTitleSuffix)" />
}
<CascadingValue Value="ViewState">
  <Div Class="page h-100" ElementId="salesOrdersPage">
    @if (ViewState.loading || CurrentDataCollection is null && !ViewState.hasError)
    {
      <Div Class="page-content p-3">
        <LoadingBlock />
      </Div>
    }
    else if (ViewState.hasError)
    {
      <Div Class="page-content p-3 w-100">
        <ErrorBlock />
      </Div>
    }
    else if (CurrentDataCollection is not null)
    {
      <Div Class="page-content-with-footer">
        <Container Fluid="true">
          <Row>
            <Column>
              <Div Class="d-flex justify-content-between align-items-center">
                <Heading Size="HeadingSize.Is1">
                  <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Receipt" Class="mr-2" />
                  @(PortalRoute?.HeaderText ?? PortalRoute?.Title ?? "Orders")
                </Heading>
                @* TODO: CSR New Order Wizard
                <Div>
                  <Button
                    Type="ButtonType.Button"
                    Color="Color.Primary"
                    Clicked="@(() => NavigationManager.NavigateToPortalRouteFor(RoutingOptions, CreatorRouteBase))">
                    Create Order
                  </Button>
                </Div>
                *@
              </Div>
              <Validations
                EditContext="EditContext"
                Mode="ValidationMode.Manual"
                ValidateOnLoad="true">
                <DataGrid
                  TItem="SalesOrderModel"
                  Data="@CurrentDataCollection.Results"
                  Responsive="Responsive"
                  Narrow="Narrow"
                  Hoverable="Hoverable"
                  Striped="Striped"
                  Bordered="Bordered"
                  Borderless="Borderless"
                  Filterable="Filterable"
                  ShowCaptions="ShowCaptions"
                  Sortable="Sortable"
                  Resizable="Resizable"
                  ShowPageSizes="ShowPageSizes"
                  ShowPager="ShowPager"
                  PageSizes="PageSizes"
                  PageSize="CurrentPageSize"
                  PageSizeChanged="@(i => { CurrentPageSize = i; StateHasChanged(); })"
                  CurrentPage="CurrentPage"
                  PageChanged="e => { CurrentPage = e.Page; StateHasChanged(); }"
                  MaxPaginationLinks="MaxPaginationLinks"
                  TotalItems="@CurrentDataCollection.TotalCount"
                  ReadData="@OnReadData"
                  CustomFilter="@OnCustomFilter"
                  SelectedRowChanged="@OnSelectedRowChanged"
                  FilterMethod="DataGridFilterMethod.Contains"
                  CommandMode="DataGridCommandMode.Default"
                  SelectionMode="DataGridSelectionMode.Single"
                  SortMode="DataGridSortMode.Multiple"
                  PagerPosition="DataGridPagerPosition.Bottom"
                  FixedHeader="true"
                  FixedHeaderDataGridHeight="100%"
                  FixedHeaderDataGridMaxHeight="100%"
                  ResizeMode="TableResizeMode.Header">
                  <DataGridColumns>
                    <DataGridNumericColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption=""
                      Sortable="true"
                      Filterable="true"
                      FilterCellClass="text-right"
                      Context="curr"
                      Width="5%"
                      DisplayFormat="{0:00000}"
                      CellClass="@(_ => "text-right")">
                      <FilterTemplate></FilterTemplate>
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Disabled="false"
                          Checked="@(selectedModels.ContainsKey(curr.ID))"
                          CheckedChanged="@(e => ModelChecked(curr, e))"
                        />
                      </DisplayTemplate>
                    </DataGridNumericColumn>
                    <DataGridNumericColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption="#"
                      Sortable="true"
                      Filterable="true"
                      FilterCellClass="text-right"
                      DisplayFormat="{0:00000}"
                      CellClass="@(_ => "text-right")"
                      Width="5%">
                      <FilterTemplate>
                        <NumericFormGroup
                          TValue="int?"
                          FormClasses="m-0"
                          ValueExpression="@(() => IDFilterValue)"
                          Value="@IDFilterValue"
                          ValueChanged="@(value => { IDFilterValue = value; })"
                        />
                      </FilterTemplate>
                    </DataGridNumericColumn>
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.CustomKey)"
                      Caption="Key"
                      Sortable="true"
                      Filterable="true"
                      Width="10%">
                      <FilterTemplate>
                        <TextEdit
                          TextExpression="@(() => CustomKeyFilterValue)"
                          Text="@CustomKeyFilterValue"
                          TextChanged="@(val => { CustomKeyFilterValue = val; })"
                        />
                      </FilterTemplate>
                    </DataGridColumn>
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="Totals.Total"
                      Caption="Total"
                      DisplayFormat="{0:C}"
                      Sortable="false"
                      Filterable="false">
                    </DataGridColumn>
                    <DataGridDateColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.CreatedDate)"
                      Caption="Date"
                      Sortable="true"
                      Filterable="true"
                      DisplayFormat="{0:yyyy-MM-dd hh:mm a}">
                      <FilterTemplate>
                        <DateEdit
                          Class="w-45 d-inline"
                          TValue="DateTime?"
                          DisplayFormat="{0:yyyy-MM-dd hh:mm a}"
                          Placeholder="Select a date"
                          DateChanged="@(value => { MinDateFilterValue = value; })"
                        />
                        <span class="px-2">to</span>
                        <DateEdit
                          Class="w-45 d-inline"
                          TValue="DateTime?"
                          DisplayFormat="{0:yyyy-MM-dd hh:mm a}"
                          Placeholder="Select a date"
                          DateChanged="@(value => { MaxDateFilterValue = value; })"
                        />
                      </FilterTemplate>
                    </DataGridDateColumn>
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(SalesOrderModel.StatusID)"
                      Caption="Status"
                      Sortable="true"
                      Filterable="true">
                      <DisplayTemplate>@StatusIDToDisplayName(context.StatusID)</DisplayTemplate>
                      <FilterTemplate>
                        <Select
                          TValue="int?"
                          SelectedValue="@SelectedStatusFilterValue"
                          SelectedValueChanged="@(value => { SelectedStatusFilterValue = value; context.TriggerFilterChange(SelectedStatusFilterValue); })">
                          <SelectItem TValue="int" Value="@(0)">Any</SelectItem>
                          @if (Contract.CheckNotEmpty(Statuses))
                          {
                            <Repeater Items="Statuses">
                              <ChildContent Context="status">
                                <SelectItem TValue="int?" Value="@status.ID">@StatusIDToDisplayName(status.ID)</SelectItem>
                              </ChildContent>
                            </Repeater>
                          }
                        </Select>
                      </FilterTemplate>
                    </DataGridColumn>
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption=""
                      Width="48px"
                      Sortable="false"
                      Filterable="false">
                      <DisplayTemplate>
                        <Blazorise.Button
                          Color="Color.Danger"
                          Class="rounded-0"
                          Clicked="@(() => OnItemViewClicked(context.ID))">
                          View
                        </Blazorise.Button>
                      </DisplayTemplate>
                    </DataGridColumn>
                  </DataGridColumns>
                  <EmptyTemplate><Div Class="box p-3">No records found.</Div></EmptyTemplate>
                  <LoadingTemplate><Div Class="box p-3"><LoadingBar /></Div></LoadingTemplate>
                  <FirstPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleLeft" /></Span></FirstPageButtonTemplate>
                  <PreviousPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleLeft" /></Span></PreviousPageButtonTemplate>
                  <NextPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleRight" /></Span></NextPageButtonTemplate>
                  <LastPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleRight" /></Span></LastPageButtonTemplate>
                </DataGrid>
                <hr />
                <EditForm EditContext="EditContext">
                  <SelectList
                    TItem="StatusModel"
                    TValue="int?"
                    Data="@Statuses"
                    TextField="@(item => item.DisplayName ?? item.Name)"
                    ValueField="@(item => item.ID)"
                    @bind-SelectedValue="@dto.StatusID"
                    DefaultItemText="Select a Status"
                    Style="width: 175px"
                  />
                </EditForm>
                <Blazorise.Button
                  Color="Color.Primary"
                  Class="rounded-0"
                  Disabled="@(SelectedStatusID is null)"
                  Clicked="@ChangeOrderStatuses">
                  Change Status
                </Blazorise.Button>
                <hr />
                <DataGrid
                  TItem="SalesOrderModel"
                  @ref="selectedGrid"
                  Data="@selectedModels.Values"
                  Responsive="Responsive"
                  Narrow="Narrow"
                  Hoverable="Hoverable"
                  Striped="Striped"
                  Bordered="Bordered"
                  Borderless="Borderless"
                  Filterable="Filterable"
                  ShowCaptions="ShowCaptions"
                  Sortable="Sortable"
                  Resizable="Resizable"
                  ShowPageSizes="ShowPageSizes"
                  ShowPager="ShowPager"
                  PageSizes="PageSizes"
                  PageSize="CurrentPageSize"
                  PageSizeChanged="@(i => { CurrentPageSize = i; StateHasChanged(); })"
                  CurrentPage="CurrentPage"
                  PageChanged="@(e => { CurrentPage = e.Page; StateHasChanged(); })"
                  MaxPaginationLinks="MaxPaginationLinks"
                  TotalItems="@selectedModels.Count"
                  FilterMethod="DataGridFilterMethod.Contains"
                  CommandMode="DataGridCommandMode.Default"
                  SelectionMode="DataGridSelectionMode.Single"
                  SortMode="DataGridSortMode.Multiple"
                  PagerPosition="DataGridPagerPosition.Bottom">
                  <DataGridColumns>
                    <DataGridNumericColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption=""
                      Sortable="true"
                      Filterable="true"
                      FilterCellClass="text-right"
                      Context="curr"
                      Width="5%"
                      DisplayFormat="{0:00000}"
                      CellClass="@(_ => "text-right")">
                      <DisplayTemplate>
                        <Check
                          TValue="bool"
                          Checked="@(selectedModels.ContainsKey(curr.ID))"
                          CheckedChanged="@(e => ModelChecked(curr, e))"
                        />
                      </DisplayTemplate>
                    </DataGridNumericColumn>
                    <DataGridNumericColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption="#"
                      Sortable="true"
                      Filterable="true"
                      FilterCellClass="text-right"
                      DisplayFormat="{0:00000}"
                      CellClass="@(_ => "text-right")"
                      Width="5%" />
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.CustomKey)"
                      Caption="Key"
                      Sortable="true"
                      Filterable="true"
                      Width="10%" />
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="Totals.Total"
                      Caption="Total"
                      DisplayFormat="{0:C}"
                      Sortable="false"
                      Filterable="false"
                    />
                    <DataGridDateColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.CreatedDate)"
                      Caption="Date"
                      Sortable="true"
                      Filterable="true"
                      DisplayFormat="{0:MMM dd, yyyy hh:mm a}"
                    />
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(SalesOrderModel.StatusID)"
                      Caption="Status"
                      Sortable="true"
                      Filterable="true">
                      <DisplayTemplate>@StatusIDToDisplayName(context.StatusID)</DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn
                      TItem="SalesOrderModel"
                      Field="@nameof(BaseModel.ID)"
                      Caption=""
                      Width="5%"
                      Sortable="false"
                      Filterable="false">
                      <DisplayTemplate>
                        <Blazorise.Button
                          Type="ButtonType.Button"
                          Color="Color.Link"
                          Clicked="@(() => OnItemViewClicked(context.ID))">
                          View
                        </Blazorise.Button>
                      </DisplayTemplate>
                    </DataGridColumn>
                  </DataGridColumns>
                  <EmptyTemplate><Div Class="box p-3">No records found.</Div></EmptyTemplate>
                  <LoadingTemplate><Div Class="box p-3"><Progress Size="Size.Small" Color="Color.Primary" Value="35"></Progress></Div></LoadingTemplate>
                  <FirstPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleLeft" /></Span></FirstPageButtonTemplate>
                  <PreviousPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleLeft" /></Span></PreviousPageButtonTemplate>
                  <NextPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleRight" /></Span></NextPageButtonTemplate>
                  <LastPageButtonTemplate><Span><Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.AngleDoubleRight" /></Span></LastPageButtonTemplate>
                </DataGrid>
              </Validations>
            </Column>
          </Row>
        </Container>
      </Div>
    }
  </Div>
</CascadingValue>

@code
{
  #region Properties
  /// <inheritdoc />
  protected override string GridViewRouteBase => "/sales/orders";

  /// <inheritdoc />
  protected override string EditorRouteBase => GridViewRouteBase + "/editor/";

  /// <inheritdoc />
  protected override string CreatorRouteBase => GridViewRouteBase + "/creator/";

  private List<StatusModel>? Statuses { get; set; }

  private readonly Dictionary<int, SalesOrderModel> selectedModels = new();

  private DataGrid<SalesOrderModel>? selectedGrid;

  private int? SelectedStatusID { get; set; }

  private int? SelectedStatusFilterValue { get; set; }

  private DateTime? MinDateFilterValue { get; set; }

  private DateTime? MaxDateFilterValue { get; set; }

  private int? IDFilterValue { get; set; }
  private string? CustomKeyFilterValue { get; set; }
  #endregion

  /// <inheritdoc />
  protected override Task LoadExtendedInitialDataAsync()
  {
    return Task.WhenAll(LoadStatusesAsync());
  }

  /// <inheritdoc />
  protected override async Task<MVC.Core.IHttpPromiseCallbackArg<SalesOrderPagedResults?>> FilteredDataLoadCallAsync(
    DataGridReadDataEventArgs<SalesOrderModel>? e)
  {
#if MANUFACTURERADMIN || VENDORADMIN
    throw new InvalidOperationException();
#else
    var dto = new MVC.Api.Endpoints.AdminGetSalesOrdersForPortal
    {
      Active = true,
      Paging = new() { Size = CurrentPageSize, StartIndex = CurrentPage, },
    };
    await ExtendSearchDTOAsync(e, dto).ConfigureAwait(false);
    return await cvApi.AdminGetSalesOrdersForPortal(dto).ConfigureAwait(false);
#endif
  }

  /// <inheritdoc />
  protected override Task<MVC.Core.IHttpPromiseCallbackArg<SalesOrderPagedResults?>> InitialDataLoadCallAsync()
  {
    return FilteredDataLoadCallAsync(null);
  }

  /// <inheritdoc />
  protected override bool CustomFilterCheck(SalesOrderModel model)
  {
    return model.CustomKey?.Contains(CustomFilterValue!, StringComparison.OrdinalIgnoreCase) == true;
  }

  /// <summary>Extend search data transfer object.</summary>
  /// <typeparam name="TDTO">Type of the data transfer object model.</typeparam>
  /// <param name="e">  The DataGridReadDataEventArgs{SalesOrderModel}? to process.</param>
  /// <param name="dto">The data transfer object.</param>
  /// <returns>A Task.</returns>
  protected /*override*/ Task ExtendSearchDTOAsync<TDTO>(
      DataGridReadDataEventArgs<SalesOrderModel>? e,
      TDTO dto)
    where TDTO : BaseSearchModel
  {
    DebugBeginMethod();
    if (e is null)
    {
      return Task.CompletedTask;
    }
    var sorts = (
      from dataGridColumnInfo in e.Columns
      where dataGridColumnInfo.SortDirection != SortDirection.None
      select new Sort
      {
        Dir = dataGridColumnInfo.SortDirection == SortDirection.Ascending ? "asc" : "desc",
        Order = dataGridColumnInfo.SortIndex,
        Field = dataGridColumnInfo.Field,
      })
      .ToList();
    dto.Sorts = Contract.CheckEmpty(sorts) ? null : sorts.ToArray();
    foreach (var dataGridColumnInfo in e.Columns.Where(x => x.SearchValue is not null))
    {
      switch (dataGridColumnInfo.Field)
      {
        case nameof(BaseModel.ID):
        {
          dto.ID = dataGridColumnInfo.SearchValue as int?;
          break;
        }
        case nameof(BaseModel.CustomKey):
        {
          dto.CustomKey = dataGridColumnInfo.SearchValue as string;
          break;
        }
      }
    }
    // NOTE: MasterID, Active, AsListing are enforced on api-side
    dto.ID = IDFilterValue;
    dto.CustomKey = CustomKeyFilterValue;
    dto.MinUpdatedOrCreatedDate = MinDateFilterValue;
    dto.MaxUpdatedOrCreatedDate = MaxDateFilterValue;
    DebugEndMethod();
    return Task.CompletedTask;
  }

  private Task ModelChecked(SalesOrderModel current, bool val)
  {
    DebugBeginMethod();
    if (val)
    {
      selectedModels[current.ID] = current;
    }
    else
    {
      selectedModels.Remove(current.ID);
    }
    StateHasChanged();
    DebugEndMethod();
    return Task.CompletedTask;
    @*.Where(p => !selectedModels.ContainsKey(p.ID))*@
  }

  private string StatusIDToDisplayName(int id)
  {
    DebugBeginMethod();
    if (!Contract.CheckValidID(id) || Contract.CheckEmpty(Statuses))
    {
      return "Unknown";
    }
    var found = Statuses!.SingleOrDefault(x => x.ID == id);
    if (found is not null)
    {
      return found.DisplayName ?? found.Name ?? "Unknown";
    }
    DebugEndMethod();
    return "Unknown";
  }

  private async Task LoadStatusesAsync()
  {
    DebugBeginMethod();
    var result = await cvApi.GetSalesOrderStatuses(new() { Active = true }).ConfigureAwait(false);
    ////ConsoleDebug(result.data);
    if (result.data is not null)
    {
      Statuses = result.data.Results;
    }
    DebugEndMethod();
  }

  private async Task ChangeOrderStatuses()
  {
#if MANUFACTURERADMIN || VENDORADMIN
    throw new InvalidOperationException();
#else
    DebugBeginMethod();
#if BRANDADMIN
    var response = await cvApi.AdminUpdateStatusForBrandOrders(
      new()
      {
        StatusID = Contract.RequiresValidID(dto.StatusID),
        OrderIDs = selectedModels.Select(x => x.Key).ToArray(),
      })
      .ConfigureAwait(false);
#elif FRANCHISEADMIN
    var response = await cvApi.AdminUpdateStatusForFranchiseOrders(
      new()
      {
        StatusID = Contract.RequiresValidID(dto.StatusID),
        OrderIDs = selectedModels.Select(x => x.Key).ToArray(),
      })
      .ConfigureAwait(false);
#elif STOREADMIN
    var response = await cvApi.AdminUpdateStatusForStoreOrders(
      new()
      {
        StatusID = Contract.RequiresValidID(dto.StatusID),
        OrderIDs = selectedModels.Select(x => x.Key).ToArray(),
      })
      .ConfigureAwait(false);
#endif
    if (response.data is { ActionSucceeded: true })
    {
      ConsoleDebug($"{response.data.Messages[0]}");
    }
    ConsoleDebug("Success");
    await LoadInitialDataAsync().ConfigureAwait(false);
    selectedModels.Clear();
    dto.StatusID = null;
    StateHasChanged();
    DebugEndMethod();
#endif
  }
}
