// <autogenerated>
// <copyright file="Favorites.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Favorites section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoFavorites { private get; set; }

        // Enable the tables specifically on run
        public bool DoFavoriteCategoryTable { private get; set; }
        public bool DoFavoriteManufacturerTable { private get; set; }
        public bool DoFavoriteShipCarrierTable { private get; set; }
        public bool DoFavoriteStoreTable { private get; set; }
        public bool DoFavoriteVendorTable { private get; set; }

        // Dirty Checking
        public bool FavoriteCategoryDirty { private get; set; }
        public bool FavoriteManufacturerDirty { private get; set; }
        public bool FavoriteShipCarrierDirty { private get; set; }
        public bool FavoriteStoreDirty { private get; set; }
        public bool FavoriteVendorDirty { private get; set; }

        // Sets
        public Mock<DbSet<FavoriteCategory>>? FavoriteCategories { get; private set; }
        public Mock<DbSet<FavoriteManufacturer>>? FavoriteManufacturers { get; private set; }
        public Mock<DbSet<FavoriteShipCarrier>>? FavoriteShipCarriers { get; private set; }
        public Mock<DbSet<FavoriteStore>>? FavoriteStores { get; private set; }
        public Mock<DbSet<FavoriteVendor>>? FavoriteVendors { get; private set; }

        // Raw Data
        public List<Mock<FavoriteCategory>>? RawFavoriteCategories { get; private set; }
        public List<Mock<FavoriteManufacturer>>? RawFavoriteManufacturers { get; private set; }
        public List<Mock<FavoriteShipCarrier>>? RawFavoriteShipCarriers { get; private set; }
        public List<Mock<FavoriteStore>>? RawFavoriteStores { get; private set; }
        public List<Mock<FavoriteVendor>>? RawFavoriteVendors { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksFavoritesAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoFavorites || (DoFavoriteCategoryTable && (!dirtyOnly || FavoriteCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFavoriteCategories == null) { throw new InvalidOperationException("Raw FavoriteCategories was null"); }
                    await InitializeMockSetFromListAsync(FavoriteCategories, RawFavoriteCategories).ConfigureAwait(false);
                    context.Setup(m => m.FavoriteCategories).Returns(() => FavoriteCategories?.Object!);
                    context.Setup(m => m.Set<FavoriteCategory>()).Returns(() => FavoriteCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFavorites || (DoFavoriteManufacturerTable && (!dirtyOnly || FavoriteManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFavoriteManufacturers == null) { throw new InvalidOperationException("Raw FavoriteManufacturers was null"); }
                    await InitializeMockSetFromListAsync(FavoriteManufacturers, RawFavoriteManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.FavoriteManufacturers).Returns(() => FavoriteManufacturers?.Object!);
                    context.Setup(m => m.Set<FavoriteManufacturer>()).Returns(() => FavoriteManufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFavorites || (DoFavoriteShipCarrierTable && (!dirtyOnly || FavoriteShipCarrierDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFavoriteShipCarriers == null) { throw new InvalidOperationException("Raw FavoriteShipCarriers was null"); }
                    await InitializeMockSetFromListAsync(FavoriteShipCarriers, RawFavoriteShipCarriers).ConfigureAwait(false);
                    context.Setup(m => m.FavoriteShipCarriers).Returns(() => FavoriteShipCarriers?.Object!);
                    context.Setup(m => m.Set<FavoriteShipCarrier>()).Returns(() => FavoriteShipCarriers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFavorites || (DoFavoriteStoreTable && (!dirtyOnly || FavoriteStoreDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFavoriteStores == null) { throw new InvalidOperationException("Raw FavoriteStores was null"); }
                    await InitializeMockSetFromListAsync(FavoriteStores, RawFavoriteStores).ConfigureAwait(false);
                    context.Setup(m => m.FavoriteStores).Returns(() => FavoriteStores?.Object!);
                    context.Setup(m => m.Set<FavoriteStore>()).Returns(() => FavoriteStores?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFavorites || (DoFavoriteVendorTable && (!dirtyOnly || FavoriteVendorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFavoriteVendors == null) { throw new InvalidOperationException("Raw FavoriteVendors was null"); }
                    await InitializeMockSetFromListAsync(FavoriteVendors, RawFavoriteVendors).ConfigureAwait(false);
                    context.Setup(m => m.FavoriteVendors).Returns(() => FavoriteVendors?.Object!);
                    context.Setup(m => m.Set<FavoriteVendor>()).Returns(() => FavoriteVendors?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFavoriteCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FavoriteCategory>> data)
        {
            if (!DoAll && !DoFavorites && !DoFavoriteCategoryTable) { return; }
            FavoriteCategories ??= new Mock<DbSet<FavoriteCategory>>();
            await InitializeMockSetFromListAsync(FavoriteCategories, data).ConfigureAwait(false);
            context.Setup(m => m.FavoriteCategories).Returns(() => FavoriteCategories.Object);
            context.Setup(m => m.Set<FavoriteCategory>()).Returns(() => FavoriteCategories.Object);
            TableRecordCounts[typeof(FavoriteCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FavoriteCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FavoriteCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFavoriteManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FavoriteManufacturer>> data)
        {
            if (!DoAll && !DoFavorites && !DoFavoriteManufacturerTable) { return; }
            FavoriteManufacturers ??= new Mock<DbSet<FavoriteManufacturer>>();
            await InitializeMockSetFromListAsync(FavoriteManufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.FavoriteManufacturers).Returns(() => FavoriteManufacturers.Object);
            context.Setup(m => m.Set<FavoriteManufacturer>()).Returns(() => FavoriteManufacturers.Object);
            TableRecordCounts[typeof(FavoriteManufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FavoriteManufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FavoriteManufacturer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFavoriteShipCarriersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FavoriteShipCarrier>> data)
        {
            if (!DoAll && !DoFavorites && !DoFavoriteShipCarrierTable) { return; }
            FavoriteShipCarriers ??= new Mock<DbSet<FavoriteShipCarrier>>();
            await InitializeMockSetFromListAsync(FavoriteShipCarriers, data).ConfigureAwait(false);
            context.Setup(m => m.FavoriteShipCarriers).Returns(() => FavoriteShipCarriers.Object);
            context.Setup(m => m.Set<FavoriteShipCarrier>()).Returns(() => FavoriteShipCarriers.Object);
            TableRecordCounts[typeof(FavoriteShipCarrier)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FavoriteShipCarrier)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FavoriteShipCarrier)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFavoriteStoresAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FavoriteStore>> data)
        {
            if (!DoAll && !DoFavorites && !DoFavoriteStoreTable) { return; }
            FavoriteStores ??= new Mock<DbSet<FavoriteStore>>();
            await InitializeMockSetFromListAsync(FavoriteStores, data).ConfigureAwait(false);
            context.Setup(m => m.FavoriteStores).Returns(() => FavoriteStores.Object);
            context.Setup(m => m.Set<FavoriteStore>()).Returns(() => FavoriteStores.Object);
            TableRecordCounts[typeof(FavoriteStore)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FavoriteStore)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FavoriteStore)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFavoriteVendorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FavoriteVendor>> data)
        {
            if (!DoAll && !DoFavorites && !DoFavoriteVendorTable) { return; }
            FavoriteVendors ??= new Mock<DbSet<FavoriteVendor>>();
            await InitializeMockSetFromListAsync(FavoriteVendors, data).ConfigureAwait(false);
            context.Setup(m => m.FavoriteVendors).Returns(() => FavoriteVendors.Object);
            context.Setup(m => m.Set<FavoriteVendor>()).Returns(() => FavoriteVendors.Object);
            TableRecordCounts[typeof(FavoriteVendor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FavoriteVendor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FavoriteVendor)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy FavoriteCategory.</summary>
        /// <returns>The new FavoriteCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FavoriteCategory>> CreateADummyFavoriteCategoryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FavoriteCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FavoriteCategory Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FavoriteCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FavoriteManufacturer.</summary>
        /// <returns>The new FavoriteManufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FavoriteManufacturer>> CreateADummyFavoriteManufacturerAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FavoriteManufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FavoriteManufacturer Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FavoriteManufacturer's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteManufacturer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FavoriteShipCarrier.</summary>
        /// <returns>The new FavoriteShipCarrier.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FavoriteShipCarrier>> CreateADummyFavoriteShipCarrierAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FavoriteShipCarrier>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FavoriteShipCarrier Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FavoriteShipCarrier's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteShipCarrier's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FavoriteStore.</summary>
        /// <returns>The new FavoriteStore.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FavoriteStore>> CreateADummyFavoriteStoreAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FavoriteStore>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FavoriteStore Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FavoriteStore's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteStore's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FavoriteVendor.</summary>
        /// <returns>The new FavoriteVendor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FavoriteVendor>> CreateADummyFavoriteVendorAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FavoriteVendor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FavoriteVendor Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FavoriteVendor's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteVendor's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForFavorites(MockingSetup mockingSetup)
        {
            Func<FavoriteCategory> mockFuncFavoriteCategory = () =>
            {
                var mock = new Mock<FavoriteCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FavoriteCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteCategory's Associated Objects
                // FavoriteCategory's Related Objects
                return mock.Object;
            };
            For<IFavoriteCategory>().Use(() => mockFuncFavoriteCategory());
            For<FavoriteCategory>().Use(() => mockFuncFavoriteCategory());
            Func<FavoriteManufacturer> mockFuncFavoriteManufacturer = () =>
            {
                var mock = new Mock<FavoriteManufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FavoriteManufacturer Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteManufacturer's Associated Objects
                // FavoriteManufacturer's Related Objects
                return mock.Object;
            };
            For<IFavoriteManufacturer>().Use(() => mockFuncFavoriteManufacturer());
            For<FavoriteManufacturer>().Use(() => mockFuncFavoriteManufacturer());
            Func<FavoriteShipCarrier> mockFuncFavoriteShipCarrier = () =>
            {
                var mock = new Mock<FavoriteShipCarrier>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FavoriteShipCarrier Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteShipCarrier's Associated Objects
                // FavoriteShipCarrier's Related Objects
                return mock.Object;
            };
            For<IFavoriteShipCarrier>().Use(() => mockFuncFavoriteShipCarrier());
            For<FavoriteShipCarrier>().Use(() => mockFuncFavoriteShipCarrier());
            Func<FavoriteStore> mockFuncFavoriteStore = () =>
            {
                var mock = new Mock<FavoriteStore>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FavoriteStore Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteStore's Associated Objects
                // FavoriteStore's Related Objects
                return mock.Object;
            };
            For<IFavoriteStore>().Use(() => mockFuncFavoriteStore());
            For<FavoriteStore>().Use(() => mockFuncFavoriteStore());
            Func<FavoriteVendor> mockFuncFavoriteVendor = () =>
            {
                var mock = new Mock<FavoriteVendor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FavoriteVendor Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FavoriteVendor's Associated Objects
                // FavoriteVendor's Related Objects
                return mock.Object;
            };
            For<IFavoriteVendor>().Use(() => mockFuncFavoriteVendor());
            For<FavoriteVendor>().Use(() => mockFuncFavoriteVendor());
        }
    }
}
