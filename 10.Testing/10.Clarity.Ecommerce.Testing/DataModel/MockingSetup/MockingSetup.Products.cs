// <autogenerated>
// <copyright file="Products.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Products section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoProducts { private get; set; }

        // Enable the tables specifically on run
        public bool DoFutureImportTable { private get; set; }
        public bool DoFutureImportStatusTable { private get; set; }
        public bool DoProductTable { private get; set; }
        public bool DoProductAssociationTable { private get; set; }
        public bool DoProductAssociationTypeTable { private get; set; }
        public bool DoProductCategoryTable { private get; set; }
        public bool DoProductDownloadTable { private get; set; }
        public bool DoProductDownloadTypeTable { private get; set; }
        public bool DoProductFileTable { private get; set; }
        public bool DoProductImageTable { private get; set; }
        public bool DoProductImageTypeTable { private get; set; }
        public bool DoProductInventoryLocationSectionTable { private get; set; }
        public bool DoProductMembershipLevelTable { private get; set; }
        public bool DoProductPricePointTable { private get; set; }
        public bool DoProductRestrictionTable { private get; set; }
        public bool DoProductShipCarrierMethodTable { private get; set; }
        public bool DoProductStatusTable { private get; set; }
        public bool DoProductSubscriptionTypeTable { private get; set; }
        public bool DoProductTypeTable { private get; set; }

        // Dirty Checking
        public bool FutureImportDirty { private get; set; }
        public bool FutureImportStatusDirty { private get; set; }
        public bool ProductDirty { private get; set; }
        public bool ProductAssociationDirty { private get; set; }
        public bool ProductAssociationTypeDirty { private get; set; }
        public bool ProductCategoryDirty { private get; set; }
        public bool ProductDownloadDirty { private get; set; }
        public bool ProductDownloadTypeDirty { private get; set; }
        public bool ProductFileDirty { private get; set; }
        public bool ProductImageDirty { private get; set; }
        public bool ProductImageTypeDirty { private get; set; }
        public bool ProductInventoryLocationSectionDirty { private get; set; }
        public bool ProductMembershipLevelDirty { private get; set; }
        public bool ProductPricePointDirty { private get; set; }
        public bool ProductRestrictionDirty { private get; set; }
        public bool ProductShipCarrierMethodDirty { private get; set; }
        public bool ProductStatusDirty { private get; set; }
        public bool ProductSubscriptionTypeDirty { private get; set; }
        public bool ProductTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<FutureImport>>? FutureImports { get; private set; }
        public Mock<DbSet<FutureImportStatus>>? FutureImportStatuses { get; private set; }
        public Mock<DbSet<Product>>? Products { get; private set; }
        public Mock<DbSet<ProductAssociation>>? ProductAssociations { get; private set; }
        public Mock<DbSet<ProductAssociationType>>? ProductAssociationTypes { get; private set; }
        public Mock<DbSet<ProductCategory>>? ProductCategories { get; private set; }
        public Mock<DbSet<ProductDownload>>? ProductDownloads { get; private set; }
        public Mock<DbSet<ProductDownloadType>>? ProductDownloadTypes { get; private set; }
        public Mock<DbSet<ProductFile>>? ProductFiles { get; private set; }
        public Mock<DbSet<ProductImage>>? ProductImages { get; private set; }
        public Mock<DbSet<ProductImageType>>? ProductImageTypes { get; private set; }
        public Mock<DbSet<ProductInventoryLocationSection>>? ProductInventoryLocationSections { get; private set; }
        public Mock<DbSet<ProductMembershipLevel>>? ProductMembershipLevels { get; private set; }
        public Mock<DbSet<ProductPricePoint>>? ProductPricePoints { get; private set; }
        public Mock<DbSet<ProductRestriction>>? ProductRestrictions { get; private set; }
        public Mock<DbSet<ProductShipCarrierMethod>>? ProductShipCarrierMethods { get; private set; }
        public Mock<DbSet<ProductStatus>>? ProductStatuses { get; private set; }
        public Mock<DbSet<ProductSubscriptionType>>? ProductSubscriptionTypes { get; private set; }
        public Mock<DbSet<ProductType>>? ProductTypes { get; private set; }

        // Raw Data
        public List<Mock<FutureImport>>? RawFutureImports { get; private set; }
        public List<Mock<FutureImportStatus>>? RawFutureImportStatuses { get; private set; }
        public List<Mock<Product>>? RawProducts { get; private set; }
        public List<Mock<ProductAssociation>>? RawProductAssociations { get; private set; }
        public List<Mock<ProductAssociationType>>? RawProductAssociationTypes { get; private set; }
        public List<Mock<ProductCategory>>? RawProductCategories { get; private set; }
        public List<Mock<ProductDownload>>? RawProductDownloads { get; private set; }
        public List<Mock<ProductDownloadType>>? RawProductDownloadTypes { get; private set; }
        public List<Mock<ProductFile>>? RawProductFiles { get; private set; }
        public List<Mock<ProductImage>>? RawProductImages { get; private set; }
        public List<Mock<ProductImageType>>? RawProductImageTypes { get; private set; }
        public List<Mock<ProductInventoryLocationSection>>? RawProductInventoryLocationSections { get; private set; }
        public List<Mock<ProductMembershipLevel>>? RawProductMembershipLevels { get; private set; }
        public List<Mock<ProductPricePoint>>? RawProductPricePoints { get; private set; }
        public List<Mock<ProductRestriction>>? RawProductRestrictions { get; private set; }
        public List<Mock<ProductShipCarrierMethod>>? RawProductShipCarrierMethods { get; private set; }
        public List<Mock<ProductStatus>>? RawProductStatuses { get; private set; }
        public List<Mock<ProductSubscriptionType>>? RawProductSubscriptionTypes { get; private set; }
        public List<Mock<ProductType>>? RawProductTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksProductsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoProducts || (DoFutureImportTable && (!dirtyOnly || FutureImportDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFutureImports == null) { throw new InvalidOperationException("Raw FutureImports was null"); }
                    await InitializeMockSetFromListAsync(FutureImports, RawFutureImports).ConfigureAwait(false);
                    context.Setup(m => m.FutureImports).Returns(() => FutureImports?.Object!);
                    context.Setup(m => m.Set<FutureImport>()).Returns(() => FutureImports?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoFutureImportStatusTable && (!dirtyOnly || FutureImportStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFutureImportStatuses == null) { throw new InvalidOperationException("Raw FutureImportStatuses was null"); }
                    await InitializeMockSetFromListAsync(FutureImportStatuses, RawFutureImportStatuses).ConfigureAwait(false);
                    context.Setup(m => m.FutureImportStatuses).Returns(() => FutureImportStatuses?.Object!);
                    context.Setup(m => m.Set<FutureImportStatus>()).Returns(() => FutureImportStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductTable && (!dirtyOnly || ProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProducts == null) { throw new InvalidOperationException("Raw Products was null"); }
                    await InitializeMockSetFromListAsync(Products, RawProducts).ConfigureAwait(false);
                    context.Setup(m => m.Products).Returns(() => Products?.Object!);
                    context.Setup(m => m.Set<Product>()).Returns(() => Products?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductAssociationTable && (!dirtyOnly || ProductAssociationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductAssociations == null) { throw new InvalidOperationException("Raw ProductAssociations was null"); }
                    await InitializeMockSetFromListAsync(ProductAssociations, RawProductAssociations).ConfigureAwait(false);
                    context.Setup(m => m.ProductAssociations).Returns(() => ProductAssociations?.Object!);
                    context.Setup(m => m.Set<ProductAssociation>()).Returns(() => ProductAssociations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductAssociationTypeTable && (!dirtyOnly || ProductAssociationTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductAssociationTypes == null) { throw new InvalidOperationException("Raw ProductAssociationTypes was null"); }
                    await InitializeMockSetFromListAsync(ProductAssociationTypes, RawProductAssociationTypes).ConfigureAwait(false);
                    context.Setup(m => m.ProductAssociationTypes).Returns(() => ProductAssociationTypes?.Object!);
                    context.Setup(m => m.Set<ProductAssociationType>()).Returns(() => ProductAssociationTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductCategoryTable && (!dirtyOnly || ProductCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductCategories == null) { throw new InvalidOperationException("Raw ProductCategories was null"); }
                    await InitializeMockSetFromListAsync(ProductCategories, RawProductCategories).ConfigureAwait(false);
                    context.Setup(m => m.ProductCategories).Returns(() => ProductCategories?.Object!);
                    context.Setup(m => m.Set<ProductCategory>()).Returns(() => ProductCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductDownloadTable && (!dirtyOnly || ProductDownloadDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductDownloads == null) { throw new InvalidOperationException("Raw ProductDownloads was null"); }
                    await InitializeMockSetFromListAsync(ProductDownloads, RawProductDownloads).ConfigureAwait(false);
                    context.Setup(m => m.ProductDownloads).Returns(() => ProductDownloads?.Object!);
                    context.Setup(m => m.Set<ProductDownload>()).Returns(() => ProductDownloads?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductDownloadTypeTable && (!dirtyOnly || ProductDownloadTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductDownloadTypes == null) { throw new InvalidOperationException("Raw ProductDownloadTypes was null"); }
                    await InitializeMockSetFromListAsync(ProductDownloadTypes, RawProductDownloadTypes).ConfigureAwait(false);
                    context.Setup(m => m.ProductDownloadTypes).Returns(() => ProductDownloadTypes?.Object!);
                    context.Setup(m => m.Set<ProductDownloadType>()).Returns(() => ProductDownloadTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductFileTable && (!dirtyOnly || ProductFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductFiles == null) { throw new InvalidOperationException("Raw ProductFiles was null"); }
                    await InitializeMockSetFromListAsync(ProductFiles, RawProductFiles).ConfigureAwait(false);
                    context.Setup(m => m.ProductFiles).Returns(() => ProductFiles?.Object!);
                    context.Setup(m => m.Set<ProductFile>()).Returns(() => ProductFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductImageTable && (!dirtyOnly || ProductImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductImages == null) { throw new InvalidOperationException("Raw ProductImages was null"); }
                    await InitializeMockSetFromListAsync(ProductImages, RawProductImages).ConfigureAwait(false);
                    context.Setup(m => m.ProductImages).Returns(() => ProductImages?.Object!);
                    context.Setup(m => m.Set<ProductImage>()).Returns(() => ProductImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductImageTypeTable && (!dirtyOnly || ProductImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductImageTypes == null) { throw new InvalidOperationException("Raw ProductImageTypes was null"); }
                    await InitializeMockSetFromListAsync(ProductImageTypes, RawProductImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.ProductImageTypes).Returns(() => ProductImageTypes?.Object!);
                    context.Setup(m => m.Set<ProductImageType>()).Returns(() => ProductImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductInventoryLocationSectionTable && (!dirtyOnly || ProductInventoryLocationSectionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductInventoryLocationSections == null) { throw new InvalidOperationException("Raw ProductInventoryLocationSections was null"); }
                    await InitializeMockSetFromListAsync(ProductInventoryLocationSections, RawProductInventoryLocationSections).ConfigureAwait(false);
                    context.Setup(m => m.ProductInventoryLocationSections).Returns(() => ProductInventoryLocationSections?.Object!);
                    context.Setup(m => m.Set<ProductInventoryLocationSection>()).Returns(() => ProductInventoryLocationSections?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductMembershipLevelTable && (!dirtyOnly || ProductMembershipLevelDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductMembershipLevels == null) { throw new InvalidOperationException("Raw ProductMembershipLevels was null"); }
                    await InitializeMockSetFromListAsync(ProductMembershipLevels, RawProductMembershipLevels).ConfigureAwait(false);
                    context.Setup(m => m.ProductMembershipLevels).Returns(() => ProductMembershipLevels?.Object!);
                    context.Setup(m => m.Set<ProductMembershipLevel>()).Returns(() => ProductMembershipLevels?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductPricePointTable && (!dirtyOnly || ProductPricePointDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductPricePoints == null) { throw new InvalidOperationException("Raw ProductPricePoints was null"); }
                    await InitializeMockSetFromListAsync(ProductPricePoints, RawProductPricePoints).ConfigureAwait(false);
                    context.Setup(m => m.ProductPricePoints).Returns(() => ProductPricePoints?.Object!);
                    context.Setup(m => m.Set<ProductPricePoint>()).Returns(() => ProductPricePoints?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductRestrictionTable && (!dirtyOnly || ProductRestrictionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductRestrictions == null) { throw new InvalidOperationException("Raw ProductRestrictions was null"); }
                    await InitializeMockSetFromListAsync(ProductRestrictions, RawProductRestrictions).ConfigureAwait(false);
                    context.Setup(m => m.ProductRestrictions).Returns(() => ProductRestrictions?.Object!);
                    context.Setup(m => m.Set<ProductRestriction>()).Returns(() => ProductRestrictions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductShipCarrierMethodTable && (!dirtyOnly || ProductShipCarrierMethodDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductShipCarrierMethods == null) { throw new InvalidOperationException("Raw ProductShipCarrierMethods was null"); }
                    await InitializeMockSetFromListAsync(ProductShipCarrierMethods, RawProductShipCarrierMethods).ConfigureAwait(false);
                    context.Setup(m => m.ProductShipCarrierMethods).Returns(() => ProductShipCarrierMethods?.Object!);
                    context.Setup(m => m.Set<ProductShipCarrierMethod>()).Returns(() => ProductShipCarrierMethods?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductStatusTable && (!dirtyOnly || ProductStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductStatuses == null) { throw new InvalidOperationException("Raw ProductStatuses was null"); }
                    await InitializeMockSetFromListAsync(ProductStatuses, RawProductStatuses).ConfigureAwait(false);
                    context.Setup(m => m.ProductStatuses).Returns(() => ProductStatuses?.Object!);
                    context.Setup(m => m.Set<ProductStatus>()).Returns(() => ProductStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductSubscriptionTypeTable && (!dirtyOnly || ProductSubscriptionTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductSubscriptionTypes == null) { throw new InvalidOperationException("Raw ProductSubscriptionTypes was null"); }
                    await InitializeMockSetFromListAsync(ProductSubscriptionTypes, RawProductSubscriptionTypes).ConfigureAwait(false);
                    context.Setup(m => m.ProductSubscriptionTypes).Returns(() => ProductSubscriptionTypes?.Object!);
                    context.Setup(m => m.Set<ProductSubscriptionType>()).Returns(() => ProductSubscriptionTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoProducts || (DoProductTypeTable && (!dirtyOnly || ProductTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductTypes == null) { throw new InvalidOperationException("Raw ProductTypes was null"); }
                    await InitializeMockSetFromListAsync(ProductTypes, RawProductTypes).ConfigureAwait(false);
                    context.Setup(m => m.ProductTypes).Returns(() => ProductTypes?.Object!);
                    context.Setup(m => m.Set<ProductType>()).Returns(() => ProductTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFutureImportsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FutureImport>> data)
        {
            if (!DoAll && !DoProducts && !DoFutureImportTable) { return; }
            FutureImports ??= new Mock<DbSet<FutureImport>>();
            await InitializeMockSetFromListAsync(FutureImports, data).ConfigureAwait(false);
            context.Setup(m => m.FutureImports).Returns(() => FutureImports.Object);
            context.Setup(m => m.Set<FutureImport>()).Returns(() => FutureImports.Object);
            TableRecordCounts[typeof(FutureImport)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FutureImport)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FutureImport)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(FutureImport)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFutureImportStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FutureImportStatus>> data)
        {
            if (!DoAll && !DoProducts && !DoFutureImportStatusTable) { return; }
            FutureImportStatuses ??= new Mock<DbSet<FutureImportStatus>>();
            await InitializeMockSetFromListAsync(FutureImportStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.FutureImportStatuses).Returns(() => FutureImportStatuses.Object);
            context.Setup(m => m.Set<FutureImportStatus>()).Returns(() => FutureImportStatuses.Object);
            TableRecordCounts[typeof(FutureImportStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FutureImportStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FutureImportStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(FutureImportStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(FutureImportStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Product>> data)
        {
            if (!DoAll && !DoProducts && !DoProductTable) { return; }
            Products ??= new Mock<DbSet<Product>>();
            await InitializeMockSetFromListAsync(Products, data).ConfigureAwait(false);
            context.Setup(m => m.Products).Returns(() => Products.Object);
            context.Setup(m => m.Set<Product>()).Returns(() => Products.Object);
            TableRecordCounts[typeof(Product)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Product)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Product)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Product)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductAssociationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductAssociation>> data)
        {
            if (!DoAll && !DoProducts && !DoProductAssociationTable) { return; }
            ProductAssociations ??= new Mock<DbSet<ProductAssociation>>();
            await InitializeMockSetFromListAsync(ProductAssociations, data).ConfigureAwait(false);
            context.Setup(m => m.ProductAssociations).Returns(() => ProductAssociations.Object);
            context.Setup(m => m.Set<ProductAssociation>()).Returns(() => ProductAssociations.Object);
            TableRecordCounts[typeof(ProductAssociation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductAssociation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductAssociation)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductAssociationTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductAssociationType>> data)
        {
            if (!DoAll && !DoProducts && !DoProductAssociationTypeTable) { return; }
            ProductAssociationTypes ??= new Mock<DbSet<ProductAssociationType>>();
            await InitializeMockSetFromListAsync(ProductAssociationTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ProductAssociationTypes).Returns(() => ProductAssociationTypes.Object);
            context.Setup(m => m.Set<ProductAssociationType>()).Returns(() => ProductAssociationTypes.Object);
            TableRecordCounts[typeof(ProductAssociationType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductAssociationType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductAssociationType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductAssociationType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ProductAssociationType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductCategory>> data)
        {
            if (!DoAll && !DoProducts && !DoProductCategoryTable) { return; }
            ProductCategories ??= new Mock<DbSet<ProductCategory>>();
            await InitializeMockSetFromListAsync(ProductCategories, data).ConfigureAwait(false);
            context.Setup(m => m.ProductCategories).Returns(() => ProductCategories.Object);
            context.Setup(m => m.Set<ProductCategory>()).Returns(() => ProductCategories.Object);
            TableRecordCounts[typeof(ProductCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductDownloadsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductDownload>> data)
        {
            if (!DoAll && !DoProducts && !DoProductDownloadTable) { return; }
            ProductDownloads ??= new Mock<DbSet<ProductDownload>>();
            await InitializeMockSetFromListAsync(ProductDownloads, data).ConfigureAwait(false);
            context.Setup(m => m.ProductDownloads).Returns(() => ProductDownloads.Object);
            context.Setup(m => m.Set<ProductDownload>()).Returns(() => ProductDownloads.Object);
            TableRecordCounts[typeof(ProductDownload)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductDownload)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductDownload)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductDownload)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductDownloadTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductDownloadType>> data)
        {
            if (!DoAll && !DoProducts && !DoProductDownloadTypeTable) { return; }
            ProductDownloadTypes ??= new Mock<DbSet<ProductDownloadType>>();
            await InitializeMockSetFromListAsync(ProductDownloadTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ProductDownloadTypes).Returns(() => ProductDownloadTypes.Object);
            context.Setup(m => m.Set<ProductDownloadType>()).Returns(() => ProductDownloadTypes.Object);
            TableRecordCounts[typeof(ProductDownloadType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductDownloadType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductDownloadType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductDownloadType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ProductDownloadType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductFile>> data)
        {
            if (!DoAll && !DoProducts && !DoProductFileTable) { return; }
            ProductFiles ??= new Mock<DbSet<ProductFile>>();
            await InitializeMockSetFromListAsync(ProductFiles, data).ConfigureAwait(false);
            context.Setup(m => m.ProductFiles).Returns(() => ProductFiles.Object);
            context.Setup(m => m.Set<ProductFile>()).Returns(() => ProductFiles.Object);
            TableRecordCounts[typeof(ProductFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductImage>> data)
        {
            if (!DoAll && !DoProducts && !DoProductImageTable) { return; }
            ProductImages ??= new Mock<DbSet<ProductImage>>();
            await InitializeMockSetFromListAsync(ProductImages, data).ConfigureAwait(false);
            context.Setup(m => m.ProductImages).Returns(() => ProductImages.Object);
            context.Setup(m => m.Set<ProductImage>()).Returns(() => ProductImages.Object);
            TableRecordCounts[typeof(ProductImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductImageType>> data)
        {
            if (!DoAll && !DoProducts && !DoProductImageTypeTable) { return; }
            ProductImageTypes ??= new Mock<DbSet<ProductImageType>>();
            await InitializeMockSetFromListAsync(ProductImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ProductImageTypes).Returns(() => ProductImageTypes.Object);
            context.Setup(m => m.Set<ProductImageType>()).Returns(() => ProductImageTypes.Object);
            TableRecordCounts[typeof(ProductImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ProductImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductInventoryLocationSectionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductInventoryLocationSection>> data)
        {
            if (!DoAll && !DoProducts && !DoProductInventoryLocationSectionTable) { return; }
            ProductInventoryLocationSections ??= new Mock<DbSet<ProductInventoryLocationSection>>();
            await InitializeMockSetFromListAsync(ProductInventoryLocationSections, data).ConfigureAwait(false);
            context.Setup(m => m.ProductInventoryLocationSections).Returns(() => ProductInventoryLocationSections.Object);
            context.Setup(m => m.Set<ProductInventoryLocationSection>()).Returns(() => ProductInventoryLocationSections.Object);
            TableRecordCounts[typeof(ProductInventoryLocationSection)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductInventoryLocationSection)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductInventoryLocationSection)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductMembershipLevelsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductMembershipLevel>> data)
        {
            if (!DoAll && !DoProducts && !DoProductMembershipLevelTable) { return; }
            ProductMembershipLevels ??= new Mock<DbSet<ProductMembershipLevel>>();
            await InitializeMockSetFromListAsync(ProductMembershipLevels, data).ConfigureAwait(false);
            context.Setup(m => m.ProductMembershipLevels).Returns(() => ProductMembershipLevels.Object);
            context.Setup(m => m.Set<ProductMembershipLevel>()).Returns(() => ProductMembershipLevels.Object);
            TableRecordCounts[typeof(ProductMembershipLevel)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductMembershipLevel)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductMembershipLevel)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductPricePointsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductPricePoint>> data)
        {
            if (!DoAll && !DoProducts && !DoProductPricePointTable) { return; }
            ProductPricePoints ??= new Mock<DbSet<ProductPricePoint>>();
            await InitializeMockSetFromListAsync(ProductPricePoints, data).ConfigureAwait(false);
            context.Setup(m => m.ProductPricePoints).Returns(() => ProductPricePoints.Object);
            context.Setup(m => m.Set<ProductPricePoint>()).Returns(() => ProductPricePoints.Object);
            TableRecordCounts[typeof(ProductPricePoint)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductPricePoint)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductPricePoint)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductRestrictionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductRestriction>> data)
        {
            if (!DoAll && !DoProducts && !DoProductRestrictionTable) { return; }
            ProductRestrictions ??= new Mock<DbSet<ProductRestriction>>();
            await InitializeMockSetFromListAsync(ProductRestrictions, data).ConfigureAwait(false);
            context.Setup(m => m.ProductRestrictions).Returns(() => ProductRestrictions.Object);
            context.Setup(m => m.Set<ProductRestriction>()).Returns(() => ProductRestrictions.Object);
            TableRecordCounts[typeof(ProductRestriction)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductRestriction)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductRestriction)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductShipCarrierMethodsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductShipCarrierMethod>> data)
        {
            if (!DoAll && !DoProducts && !DoProductShipCarrierMethodTable) { return; }
            ProductShipCarrierMethods ??= new Mock<DbSet<ProductShipCarrierMethod>>();
            await InitializeMockSetFromListAsync(ProductShipCarrierMethods, data).ConfigureAwait(false);
            context.Setup(m => m.ProductShipCarrierMethods).Returns(() => ProductShipCarrierMethods.Object);
            context.Setup(m => m.Set<ProductShipCarrierMethod>()).Returns(() => ProductShipCarrierMethods.Object);
            TableRecordCounts[typeof(ProductShipCarrierMethod)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductShipCarrierMethod)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductShipCarrierMethod)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductStatus>> data)
        {
            if (!DoAll && !DoProducts && !DoProductStatusTable) { return; }
            ProductStatuses ??= new Mock<DbSet<ProductStatus>>();
            await InitializeMockSetFromListAsync(ProductStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.ProductStatuses).Returns(() => ProductStatuses.Object);
            context.Setup(m => m.Set<ProductStatus>()).Returns(() => ProductStatuses.Object);
            TableRecordCounts[typeof(ProductStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ProductStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductSubscriptionTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductSubscriptionType>> data)
        {
            if (!DoAll && !DoProducts && !DoProductSubscriptionTypeTable) { return; }
            ProductSubscriptionTypes ??= new Mock<DbSet<ProductSubscriptionType>>();
            await InitializeMockSetFromListAsync(ProductSubscriptionTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ProductSubscriptionTypes).Returns(() => ProductSubscriptionTypes.Object);
            context.Setup(m => m.Set<ProductSubscriptionType>()).Returns(() => ProductSubscriptionTypes.Object);
            TableRecordCounts[typeof(ProductSubscriptionType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductSubscriptionType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductSubscriptionType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductType>> data)
        {
            if (!DoAll && !DoProducts && !DoProductTypeTable) { return; }
            ProductTypes ??= new Mock<DbSet<ProductType>>();
            await InitializeMockSetFromListAsync(ProductTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ProductTypes).Returns(() => ProductTypes.Object);
            context.Setup(m => m.Set<ProductType>()).Returns(() => ProductTypes.Object);
            TableRecordCounts[typeof(ProductType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ProductType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy FutureImport.</summary>
        /// <returns>The new FutureImport.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FutureImport>> CreateADummyFutureImportAsync(int id, string? key, string? name, string? desc = null, int statusID = 1, string? jsonAttributes = null, int attempts = 1, string fileName = null!, bool hasError = false, DateTime runImportAt = default, int? storeID = null!, int? vendorID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FutureImport>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // FutureImport Properties
                mock.Object.Attempts = attempts;
                mock.Object.FileName = fileName;
                mock.Object.HasError = hasError;
                mock.Object.RunImportAt = runImportAt;
                mock.Object.StoreID = storeID;
                mock.Object.VendorID = vendorID;
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawFutureImportStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // FutureImport's Related Objects
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // FutureImport's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FutureImportStatus.</summary>
        /// <returns>The new FutureImportStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FutureImportStatus>> CreateADummyFutureImportStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FutureImportStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // FutureImportStatus Properties
                // Dynamic Linking
                // FutureImportStatus's Related Objects
                // FutureImportStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Product.</summary>
        /// <returns>The new Product.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Product>> CreateADummyProductAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, bool allowBackOrder = false, bool allowPreSale = false, DateTime? availableEndDate = null!, DateTime? availableStartDate = null!, string brandName = null!, decimal? depth = null!, string depthUnitOfMeasure = null!, string documentRequiredForPurchase = null!, string documentRequiredForPurchaseExpiredWarningMessage = null!, string documentRequiredForPurchaseMissingWarningMessage = null!, decimal? documentRequiredForPurchaseOverrideFee = null!, string documentRequiredForPurchaseOverrideFeeAcceptedMessage = null!, bool documentRequiredForPurchaseOverrideFeeIsPercent = false, string documentRequiredForPurchaseOverrideFeeWarningMessage = null!, bool dropShipOnly = false, decimal? flatShippingCharge = null!, decimal? handlingCharge = null!, decimal? height = null!, string heightUnitOfMeasure = null!, string indexSynonyms = null!, bool isDiscontinued = false, bool isEligibleForReturn = false, bool isFreeShipping = false, bool isTaxable = false, bool isUnlimitedStock = false, bool isVisible = false, decimal? kitBaseQuantityPriceMultiplier = null!, string manufacturerPartNumber = null!, int? masterPackID = null!, decimal? maximumBackOrderPurchaseQuantity = null!, decimal? maximumBackOrderPurchaseQuantityGlobal = null!, decimal? maximumBackOrderPurchaseQuantityIfPastPurchased = null!, decimal? maximumPrePurchaseQuantity = null!, decimal? maximumPrePurchaseQuantityGlobal = null!, decimal? maximumPrePurchaseQuantityIfPastPurchased = null!, decimal? maximumPurchaseQuantity = null!, decimal? maximumPurchaseQuantityIfPastPurchased = null!, decimal? minimumPurchaseQuantity = null!, decimal? minimumPurchaseQuantityIfPastPurchased = null!, decimal? mustPurchaseInMultiplesOfAmount = null!, decimal? mustPurchaseInMultiplesOfAmountOverrideFee = null!, string mustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage = null!, bool mustPurchaseInMultiplesOfAmountOverrideFeeIsPercent = false, string mustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage = null!, string mustPurchaseInMultiplesOfAmountWarningMessage = null!, bool nothingToShip = false, int? packageID = null!, int? palletID = null!, DateTime? preSellEndDate = null!, decimal? priceBase = null!, decimal? priceMsrp = null!, decimal? priceReduction = null!, decimal? priceSale = null!, decimal? quantityLayersPerPallet = null!, decimal? quantityMasterPackLayersPerPallet = null!, decimal? quantityMasterPackPerLayer = null!, decimal? quantityMasterPackPerPallet = null!, decimal? quantityPerLayer = null!, decimal? quantityPerMasterPack = null!, decimal? quantityPerPallet = null!, string requiresRoles = null!, string requiresRolesAlt = null!, decimal? restockingFeeAmount = null!, int? restockingFeeAmountCurrencyID = null!, decimal? restockingFeePercent = null!, int? shippingLeadTimeDays = null!, bool shippingLeadTimeIsCalendarDays = false, string shortDescription = null!, int? sortOrder = null!, decimal? stockQuantity = null!, decimal? stockQuantityAllocated = null!, decimal? stockQuantityPreSold = null!, string taxCode = null!, decimal? totalPurchasedAmount = null!, int? totalPurchasedAmountCurrencyID = null!, decimal? totalPurchasedQuantity = null!, string unitOfMeasure = null!, decimal? weight = null!, string weightUnitOfMeasure = null!, decimal? width = null!, string widthUnitOfMeasure = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Product>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // Product Properties
                mock.Object.AllowBackOrder = allowBackOrder;
                mock.Object.AllowPreSale = allowPreSale;
                mock.Object.AvailableEndDate = availableEndDate;
                mock.Object.AvailableStartDate = availableStartDate;
                mock.Object.BrandName = brandName;
                mock.Object.Depth = depth;
                mock.Object.DepthUnitOfMeasure = depthUnitOfMeasure;
                mock.Object.DocumentRequiredForPurchase = documentRequiredForPurchase;
                mock.Object.DocumentRequiredForPurchaseExpiredWarningMessage = documentRequiredForPurchaseExpiredWarningMessage;
                mock.Object.DocumentRequiredForPurchaseMissingWarningMessage = documentRequiredForPurchaseMissingWarningMessage;
                mock.Object.DocumentRequiredForPurchaseOverrideFee = documentRequiredForPurchaseOverrideFee;
                mock.Object.DocumentRequiredForPurchaseOverrideFeeAcceptedMessage = documentRequiredForPurchaseOverrideFeeAcceptedMessage;
                mock.Object.DocumentRequiredForPurchaseOverrideFeeIsPercent = documentRequiredForPurchaseOverrideFeeIsPercent;
                mock.Object.DocumentRequiredForPurchaseOverrideFeeWarningMessage = documentRequiredForPurchaseOverrideFeeWarningMessage;
                mock.Object.DropShipOnly = dropShipOnly;
                mock.Object.FlatShippingCharge = flatShippingCharge;
                mock.Object.HandlingCharge = handlingCharge;
                mock.Object.Height = height;
                mock.Object.HeightUnitOfMeasure = heightUnitOfMeasure;
                mock.Object.IndexSynonyms = indexSynonyms;
                mock.Object.IsDiscontinued = isDiscontinued;
                mock.Object.IsEligibleForReturn = isEligibleForReturn;
                mock.Object.IsFreeShipping = isFreeShipping;
                mock.Object.IsTaxable = isTaxable;
                mock.Object.IsUnlimitedStock = isUnlimitedStock;
                mock.Object.IsVisible = isVisible;
                mock.Object.KitBaseQuantityPriceMultiplier = kitBaseQuantityPriceMultiplier;
                mock.Object.ManufacturerPartNumber = manufacturerPartNumber;
                mock.Object.MasterPackID = masterPackID;
                mock.Object.MaximumBackOrderPurchaseQuantity = maximumBackOrderPurchaseQuantity;
                mock.Object.MaximumBackOrderPurchaseQuantityGlobal = maximumBackOrderPurchaseQuantityGlobal;
                mock.Object.MaximumBackOrderPurchaseQuantityIfPastPurchased = maximumBackOrderPurchaseQuantityIfPastPurchased;
                mock.Object.MaximumPrePurchaseQuantity = maximumPrePurchaseQuantity;
                mock.Object.MaximumPrePurchaseQuantityGlobal = maximumPrePurchaseQuantityGlobal;
                mock.Object.MaximumPrePurchaseQuantityIfPastPurchased = maximumPrePurchaseQuantityIfPastPurchased;
                mock.Object.MaximumPurchaseQuantity = maximumPurchaseQuantity;
                mock.Object.MaximumPurchaseQuantityIfPastPurchased = maximumPurchaseQuantityIfPastPurchased;
                mock.Object.MinimumPurchaseQuantity = minimumPurchaseQuantity;
                mock.Object.MinimumPurchaseQuantityIfPastPurchased = minimumPurchaseQuantityIfPastPurchased;
                mock.Object.MustPurchaseInMultiplesOfAmount = mustPurchaseInMultiplesOfAmount;
                mock.Object.MustPurchaseInMultiplesOfAmountOverrideFee = mustPurchaseInMultiplesOfAmountOverrideFee;
                mock.Object.MustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage = mustPurchaseInMultiplesOfAmountOverrideFeeAcceptedMessage;
                mock.Object.MustPurchaseInMultiplesOfAmountOverrideFeeIsPercent = mustPurchaseInMultiplesOfAmountOverrideFeeIsPercent;
                mock.Object.MustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage = mustPurchaseInMultiplesOfAmountOverrideFeeWarningMessage;
                mock.Object.MustPurchaseInMultiplesOfAmountWarningMessage = mustPurchaseInMultiplesOfAmountWarningMessage;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.PackageID = packageID;
                mock.Object.PalletID = palletID;
                mock.Object.PreSellEndDate = preSellEndDate;
                mock.Object.PriceBase = priceBase;
                mock.Object.PriceMsrp = priceMsrp;
                mock.Object.PriceReduction = priceReduction;
                mock.Object.PriceSale = priceSale;
                mock.Object.QuantityLayersPerPallet = quantityLayersPerPallet;
                mock.Object.QuantityMasterPackLayersPerPallet = quantityMasterPackLayersPerPallet;
                mock.Object.QuantityMasterPackPerLayer = quantityMasterPackPerLayer;
                mock.Object.QuantityMasterPackPerPallet = quantityMasterPackPerPallet;
                mock.Object.QuantityPerLayer = quantityPerLayer;
                mock.Object.QuantityPerMasterPack = quantityPerMasterPack;
                mock.Object.QuantityPerPallet = quantityPerPallet;
                mock.Object.RequiresRoles = requiresRoles;
                mock.Object.RequiresRolesAlt = requiresRolesAlt;
                mock.Object.RestockingFeeAmount = restockingFeeAmount;
                mock.Object.RestockingFeeAmountCurrencyID = restockingFeeAmountCurrencyID;
                mock.Object.RestockingFeePercent = restockingFeePercent;
                mock.Object.ShippingLeadTimeDays = shippingLeadTimeDays;
                mock.Object.ShippingLeadTimeIsCalendarDays = shippingLeadTimeIsCalendarDays;
                mock.Object.ShortDescription = shortDescription;
                mock.Object.SortOrder = sortOrder;
                mock.Object.StockQuantity = stockQuantity;
                mock.Object.StockQuantityAllocated = stockQuantityAllocated;
                mock.Object.StockQuantityPreSold = stockQuantityPreSold;
                mock.Object.TaxCode = taxCode;
                mock.Object.TotalPurchasedAmount = totalPurchasedAmount;
                mock.Object.TotalPurchasedAmountCurrencyID = totalPurchasedAmountCurrencyID;
                mock.Object.TotalPurchasedQuantity = totalPurchasedQuantity;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.Weight = weight;
                mock.Object.WeightUnitOfMeasure = weightUnitOfMeasure;
                mock.Object.Width = width;
                mock.Object.WidthUnitOfMeasure = widthUnitOfMeasure;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawProductStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawProductImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawProductFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductFile>());
                // Product's Related Objects
                mock.Setup(m => m.MasterPack).Returns(() => RawPackages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterPackID)?.Object);
                mock.Setup(m => m.Package).Returns(() => RawPackages?.FirstOrDefault(x => x.Object.ID == mock.Object.PackageID)?.Object);
                mock.Setup(m => m.Pallet).Returns(() => RawPackages?.FirstOrDefault(x => x.Object.ID == mock.Object.PalletID)?.Object);
                mock.Setup(m => m.RestockingFeeAmountCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.RestockingFeeAmountCurrencyID)?.Object);
                mock.Setup(m => m.TotalPurchasedAmountCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.TotalPurchasedAmountCurrencyID)?.Object);
                // Product's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawAccountProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountProduct>());
                mock.Setup(m => m.Brands).Returns(() => RawBrandProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandProduct>());
                mock.Setup(m => m.CartItems).Returns(() => RawCartItems?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartItem>());
                mock.Setup(m => m.Categories).Returns(() => RawProductCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductCategory>());
                mock.Setup(m => m.DiscountProducts).Returns(() => RawDiscountProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountProduct>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseProduct>());
                mock.Setup(m => m.Manufacturers).Returns(() => RawManufacturerProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ManufacturerProduct>());
                mock.Setup(m => m.ProductAssociations).Returns(() => RawProductAssociations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductAssociation>());
                mock.Setup(m => m.ProductDownloads).Returns(() => RawProductDownloads?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductDownload>());
                mock.Setup(m => m.ProductInventoryLocationSections).Returns(() => RawProductInventoryLocationSections?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductInventoryLocationSection>());
                mock.Setup(m => m.ProductMembershipLevels).Returns(() => RawProductMembershipLevels?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductMembershipLevel>());
                mock.Setup(m => m.ProductNotifications).Returns(() => RawProductNotifications?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductNotification>());
                mock.Setup(m => m.ProductPricePoints).Returns(() => RawProductPricePoints?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductPricePoint>());
                mock.Setup(m => m.ProductRestrictions).Returns(() => RawProductRestrictions?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductRestriction>());
                mock.Setup(m => m.ProductsAssociatedWith).Returns(() => RawProductAssociations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductAssociation>());
                mock.Setup(m => m.ProductShipCarrierMethods).Returns(() => RawProductShipCarrierMethods?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductShipCarrierMethod>());
                mock.Setup(m => m.ProductSubscriptionTypes).Returns(() => RawProductSubscriptionTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductSubscriptionType>());
                mock.Setup(m => m.Reviews).Returns(() => RawReviews?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.SalesOrderItems).Returns(() => RawSalesOrderItems?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderItem>());
                mock.Setup(m => m.SalesReturnItems).Returns(() => RawSalesReturnItems?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnItem>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreProduct>());
                mock.Setup(m => m.Vendors).Returns(() => RawVendorProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorProduct>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductAssociation.</summary>
        /// <returns>The new ProductAssociation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductAssociation>> CreateADummyProductAssociationAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandID = null!, int masterID = 1, decimal? quantity = null!, int slaveID = 1, int? sortOrder = null!, int? storeID = null!, string unitOfMeasure = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductAssociation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ProductAssociation Properties
                mock.Object.BrandID = brandID;
                mock.Object.MasterID = masterID;
                mock.Object.Quantity = quantity;
                mock.Object.SlaveID = slaveID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.StoreID = storeID;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawProductAssociationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ProductAssociation's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // ProductAssociation's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductAssociationType.</summary>
        /// <returns>The new ProductAssociationType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductAssociationType>> CreateADummyProductAssociationTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductAssociationType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ProductAssociationType Properties
                // Dynamic Linking
                // ProductAssociationType's Related Objects
                // ProductAssociationType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductCategory.</summary>
        /// <returns>The new ProductCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductCategory>> CreateADummyProductCategoryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int? sortOrder = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProductCategory Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.SortOrder = sortOrder;
                // Dynamic Linking
                // ProductCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductDownload.</summary>
        /// <returns>The new ProductDownload.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductDownload>> CreateADummyProductDownloadAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, string? jsonAttributes = null, string absoluteUrl = null!, bool isAbsoluteUrl = false, int productID = 1, string relativeUrl = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductDownload>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ProductDownload Properties
                mock.Object.AbsoluteUrl = absoluteUrl;
                mock.Object.IsAbsoluteUrl = isAbsoluteUrl;
                mock.Object.ProductID = productID;
                mock.Object.RelativeUrl = relativeUrl;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawProductDownloadTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ProductDownload's Related Objects
                mock.Setup(m => m.Product).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                // ProductDownload's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductDownloadType.</summary>
        /// <returns>The new ProductDownloadType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductDownloadType>> CreateADummyProductDownloadTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductDownloadType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ProductDownloadType Properties
                // Dynamic Linking
                // ProductDownloadType's Related Objects
                // ProductDownloadType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductFile.</summary>
        /// <returns>The new ProductFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductFile>> CreateADummyProductFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // ProductFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductFile's Related Objects
                // ProductFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductImage.</summary>
        /// <returns>The new ProductImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductImage>> CreateADummyProductImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // ProductImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawProductImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ProductImage's Related Objects
                // ProductImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductImageType.</summary>
        /// <returns>The new ProductImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductImageType>> CreateADummyProductImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ProductImageType Properties
                // Dynamic Linking
                // ProductImageType's Related Objects
                // ProductImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductInventoryLocationSection.</summary>
        /// <returns>The new ProductInventoryLocationSection.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductInventoryLocationSection>> CreateADummyProductInventoryLocationSectionAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, decimal? quantity = null!, decimal? quantityAllocated = null!, decimal? quantityBroken = null!, decimal? quantityPreSold = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductInventoryLocationSection>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProductInventoryLocationSection Properties
                mock.Object.MasterID = masterID;
                mock.Object.Quantity = quantity;
                mock.Object.QuantityAllocated = quantityAllocated;
                mock.Object.QuantityBroken = quantityBroken;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // ProductInventoryLocationSection's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductInventoryLocationSection's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductMembershipLevel.</summary>
        /// <returns>The new ProductMembershipLevel.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductMembershipLevel>> CreateADummyProductMembershipLevelAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int membershipRepeatTypeID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductMembershipLevel>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProductMembershipLevel Properties
                mock.Object.MasterID = masterID;
                mock.Object.MembershipRepeatTypeID = membershipRepeatTypeID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // ProductMembershipLevel's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.MembershipRepeatType).Returns(() => RawMembershipRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.MembershipRepeatTypeID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawMembershipLevels?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductMembershipLevel's Associated Objects
                mock.Setup(m => m.Subscriptions).Returns(() => RawSubscriptions?.Where(x => x.Object.ProductMembershipLevelID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Subscription>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductPricePoint.</summary>
        /// <returns>The new ProductPricePoint.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductPricePoint>> CreateADummyProductPricePointAsync(int id, string? key, string? jsonAttributes = null, int? brandID = null!, int? currencyID = null!, int? franchiseID = null!, DateTime? from = null!, int masterID = 1, decimal? maxQuantity = null!, decimal? minQuantity = null!, decimal? percentDiscount = null!, decimal? price = null!, int? priceRoundingID = null!, int slaveID = 1, int? storeID = null!, DateTime? to = null!, string unitOfMeasure = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductPricePoint>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProductPricePoint Properties
                mock.Object.BrandID = brandID;
                mock.Object.CurrencyID = currencyID;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.From = from;
                mock.Object.MasterID = masterID;
                mock.Object.MaxQuantity = maxQuantity;
                mock.Object.MinQuantity = minQuantity;
                mock.Object.PercentDiscount = percentDiscount;
                mock.Object.Price = price;
                mock.Object.PriceRoundingID = priceRoundingID;
                mock.Object.SlaveID = slaveID;
                mock.Object.StoreID = storeID;
                mock.Object.To = to;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                // Dynamic Linking
                // ProductPricePoint's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PriceRounding).Returns(() => RawPriceRoundings?.FirstOrDefault(x => x.Object.ID == mock.Object.PriceRoundingID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // ProductPricePoint's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductRestriction.</summary>
        /// <returns>The new ProductRestriction.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductRestriction>> CreateADummyProductRestrictionAsync(int id, string? key, string? jsonAttributes = null, bool canPurchaseDomestically = false, bool canPurchaseInternationally = false, bool canPurchaseIntraRegion = false, bool canShipDomestically = false, bool canShipInternationally = false, bool canShipIntraRegion = false, int? overrideWithAccountTypeID = null!, string overrideWithRoles = null!, int productID = 1, string restrictionsApplyToCity = null!, int? restrictionsApplyToCountryID = null!, string restrictionsApplyToPostalCode = null!, int? restrictionsApplyToRegionID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductRestriction>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProductRestriction Properties
                mock.Object.CanPurchaseDomestically = canPurchaseDomestically;
                mock.Object.CanPurchaseInternationally = canPurchaseInternationally;
                mock.Object.CanPurchaseIntraRegion = canPurchaseIntraRegion;
                mock.Object.CanShipDomestically = canShipDomestically;
                mock.Object.CanShipInternationally = canShipInternationally;
                mock.Object.CanShipIntraRegion = canShipIntraRegion;
                mock.Object.OverrideWithAccountTypeID = overrideWithAccountTypeID;
                mock.Object.OverrideWithRoles = overrideWithRoles;
                mock.Object.ProductID = productID;
                mock.Object.RestrictionsApplyToCity = restrictionsApplyToCity;
                mock.Object.RestrictionsApplyToCountryID = restrictionsApplyToCountryID;
                mock.Object.RestrictionsApplyToPostalCode = restrictionsApplyToPostalCode;
                mock.Object.RestrictionsApplyToRegionID = restrictionsApplyToRegionID;
                // Dynamic Linking
                // ProductRestriction's Related Objects
                mock.Setup(m => m.OverrideWithAccountType).Returns(() => RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.OverrideWithAccountTypeID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.RestrictionsApplyToCountry).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.RestrictionsApplyToCountryID)?.Object);
                mock.Setup(m => m.RestrictionsApplyToRegion).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RestrictionsApplyToRegionID)?.Object);
                // ProductRestriction's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductShipCarrierMethod.</summary>
        /// <returns>The new ProductShipCarrierMethod.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductShipCarrierMethod>> CreateADummyProductShipCarrierMethodAsync(int id, string? key, string? jsonAttributes = null, int? brandID = null!, int? currencyID = null!, DateTime? from = null!, int masterID = 1, decimal? maxQuantity = null!, decimal? minQuantity = null!, decimal price = 0m, int slaveID = 1, int? storeID = null!, DateTime? to = null!, string unitOfMeasure = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductShipCarrierMethod>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProductShipCarrierMethod Properties
                mock.Object.BrandID = brandID;
                mock.Object.CurrencyID = currencyID;
                mock.Object.From = from;
                mock.Object.MasterID = masterID;
                mock.Object.MaxQuantity = maxQuantity;
                mock.Object.MinQuantity = minQuantity;
                mock.Object.Price = price;
                mock.Object.SlaveID = slaveID;
                mock.Object.StoreID = storeID;
                mock.Object.To = to;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                // Dynamic Linking
                // ProductShipCarrierMethod's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // ProductShipCarrierMethod's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductStatus.</summary>
        /// <returns>The new ProductStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductStatus>> CreateADummyProductStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ProductStatus Properties
                // Dynamic Linking
                // ProductStatus's Related Objects
                // ProductStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductSubscriptionType.</summary>
        /// <returns>The new ProductSubscriptionType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductSubscriptionType>> CreateADummyProductSubscriptionTypeAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int? sortOrder = null!, int subscriptionTypeRepeatTypeID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductSubscriptionType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProductSubscriptionType Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.SubscriptionTypeRepeatTypeID = subscriptionTypeRepeatTypeID;
                // Dynamic Linking
                // ProductSubscriptionType's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.SubscriptionTypeRepeatType).Returns(() => RawSubscriptionTypeRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SubscriptionTypeRepeatTypeID)?.Object);
                // ProductSubscriptionType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductType.</summary>
        /// <returns>The new ProductType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductType>> CreateADummyProductTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ProductType Properties
                // Dynamic Linking
                // ProductType's Related Objects
                // ProductType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForProducts(MockingSetup mockingSetup)
        {
            Func<FutureImport> mockFuncFutureImport = () =>
            {
                var mock = new Mock<FutureImport>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FutureImport Properties
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawFutureImportStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // FutureImport's Associated Objects
                // FutureImport's Related Objects
                return mock.Object;
            };
            For<IFutureImport>().Use(() => mockFuncFutureImport());
            For<FutureImport>().Use(() => mockFuncFutureImport());
            Func<FutureImportStatus> mockFuncFutureImportStatus = () =>
            {
                var mock = new Mock<FutureImportStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FutureImportStatus Properties
                // Dynamic Linking
                // FutureImportStatus's Associated Objects
                // FutureImportStatus's Related Objects
                return mock.Object;
            };
            For<IFutureImportStatus>().Use(() => mockFuncFutureImportStatus());
            For<FutureImportStatus>().Use(() => mockFuncFutureImportStatus());
            Func<Product> mockFuncProduct = () =>
            {
                var mock = new Mock<Product>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Product Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawProductStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawProductImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawProductFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductFile>());
                mock.Setup(m => m.MasterPack).Returns(() => mockingSetup.RawPackages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterPackID)?.Object);
                mock.Setup(m => m.Package).Returns(() => mockingSetup.RawPackages?.FirstOrDefault(x => x.Object.ID == mock.Object.PackageID)?.Object);
                mock.Setup(m => m.Pallet).Returns(() => mockingSetup.RawPackages?.FirstOrDefault(x => x.Object.ID == mock.Object.PalletID)?.Object);
                mock.Setup(m => m.RestockingFeeAmountCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.RestockingFeeAmountCurrencyID)?.Object);
                mock.Setup(m => m.TotalPurchasedAmountCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.TotalPurchasedAmountCurrencyID)?.Object);
                // Product's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawAccountProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountProduct>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandProduct>());
                mock.Setup(m => m.CartItems).Returns(() => mockingSetup.RawCartItems?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartItem>());
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawProductCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductCategory>());
                mock.Setup(m => m.DiscountProducts).Returns(() => mockingSetup.RawDiscountProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountProduct>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseProduct>());
                mock.Setup(m => m.Manufacturers).Returns(() => mockingSetup.RawManufacturerProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ManufacturerProduct>());
                mock.Setup(m => m.ProductAssociations).Returns(() => mockingSetup.RawProductAssociations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductAssociation>());
                mock.Setup(m => m.ProductDownloads).Returns(() => mockingSetup.RawProductDownloads?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductDownload>());
                mock.Setup(m => m.ProductInventoryLocationSections).Returns(() => mockingSetup.RawProductInventoryLocationSections?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductInventoryLocationSection>());
                mock.Setup(m => m.ProductMembershipLevels).Returns(() => mockingSetup.RawProductMembershipLevels?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductMembershipLevel>());
                mock.Setup(m => m.ProductNotifications).Returns(() => mockingSetup.RawProductNotifications?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductNotification>());
                mock.Setup(m => m.ProductPricePoints).Returns(() => mockingSetup.RawProductPricePoints?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductPricePoint>());
                mock.Setup(m => m.ProductRestrictions).Returns(() => mockingSetup.RawProductRestrictions?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductRestriction>());
                mock.Setup(m => m.ProductsAssociatedWith).Returns(() => mockingSetup.RawProductAssociations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductAssociation>());
                mock.Setup(m => m.ProductShipCarrierMethods).Returns(() => mockingSetup.RawProductShipCarrierMethods?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductShipCarrierMethod>());
                mock.Setup(m => m.ProductSubscriptionTypes).Returns(() => mockingSetup.RawProductSubscriptionTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductSubscriptionType>());
                mock.Setup(m => m.Reviews).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.SalesOrderItems).Returns(() => mockingSetup.RawSalesOrderItems?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderItem>());
                mock.Setup(m => m.SalesReturnItems).Returns(() => mockingSetup.RawSalesReturnItems?.Where(x => x.Object.ProductID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnItem>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreProduct>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawVendorProducts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorProduct>());
                // Product's Related Objects
                return mock.Object;
            };
            For<IProduct>().Use(() => mockFuncProduct());
            For<Product>().Use(() => mockFuncProduct());
            Func<ProductAssociation> mockFuncProductAssociation = () =>
            {
                var mock = new Mock<ProductAssociation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductAssociation Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawProductAssociationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // ProductAssociation's Associated Objects
                // ProductAssociation's Related Objects
                return mock.Object;
            };
            For<IProductAssociation>().Use(() => mockFuncProductAssociation());
            For<ProductAssociation>().Use(() => mockFuncProductAssociation());
            Func<ProductAssociationType> mockFuncProductAssociationType = () =>
            {
                var mock = new Mock<ProductAssociationType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductAssociationType Properties
                // Dynamic Linking
                // ProductAssociationType's Associated Objects
                // ProductAssociationType's Related Objects
                return mock.Object;
            };
            For<IProductAssociationType>().Use(() => mockFuncProductAssociationType());
            For<ProductAssociationType>().Use(() => mockFuncProductAssociationType());
            Func<ProductCategory> mockFuncProductCategory = () =>
            {
                var mock = new Mock<ProductCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductCategory's Associated Objects
                // ProductCategory's Related Objects
                return mock.Object;
            };
            For<IProductCategory>().Use(() => mockFuncProductCategory());
            For<ProductCategory>().Use(() => mockFuncProductCategory());
            Func<ProductDownload> mockFuncProductDownload = () =>
            {
                var mock = new Mock<ProductDownload>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductDownload Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawProductDownloadTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                // ProductDownload's Associated Objects
                // ProductDownload's Related Objects
                return mock.Object;
            };
            For<IProductDownload>().Use(() => mockFuncProductDownload());
            For<ProductDownload>().Use(() => mockFuncProductDownload());
            Func<ProductDownloadType> mockFuncProductDownloadType = () =>
            {
                var mock = new Mock<ProductDownloadType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductDownloadType Properties
                // Dynamic Linking
                // ProductDownloadType's Associated Objects
                // ProductDownloadType's Related Objects
                return mock.Object;
            };
            For<IProductDownloadType>().Use(() => mockFuncProductDownloadType());
            For<ProductDownloadType>().Use(() => mockFuncProductDownloadType());
            Func<ProductFile> mockFuncProductFile = () =>
            {
                var mock = new Mock<ProductFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductFile's Associated Objects
                // ProductFile's Related Objects
                return mock.Object;
            };
            For<IProductFile>().Use(() => mockFuncProductFile());
            For<ProductFile>().Use(() => mockFuncProductFile());
            Func<ProductImage> mockFuncProductImage = () =>
            {
                var mock = new Mock<ProductImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawProductImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ProductImage's Associated Objects
                // ProductImage's Related Objects
                return mock.Object;
            };
            For<IProductImage>().Use(() => mockFuncProductImage());
            For<ProductImage>().Use(() => mockFuncProductImage());
            Func<ProductImageType> mockFuncProductImageType = () =>
            {
                var mock = new Mock<ProductImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductImageType Properties
                // Dynamic Linking
                // ProductImageType's Associated Objects
                // ProductImageType's Related Objects
                return mock.Object;
            };
            For<IProductImageType>().Use(() => mockFuncProductImageType());
            For<ProductImageType>().Use(() => mockFuncProductImageType());
            Func<ProductInventoryLocationSection> mockFuncProductInventoryLocationSection = () =>
            {
                var mock = new Mock<ProductInventoryLocationSection>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductInventoryLocationSection Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductInventoryLocationSection's Associated Objects
                // ProductInventoryLocationSection's Related Objects
                return mock.Object;
            };
            For<IProductInventoryLocationSection>().Use(() => mockFuncProductInventoryLocationSection());
            For<ProductInventoryLocationSection>().Use(() => mockFuncProductInventoryLocationSection());
            Func<ProductMembershipLevel> mockFuncProductMembershipLevel = () =>
            {
                var mock = new Mock<ProductMembershipLevel>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductMembershipLevel Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.MembershipRepeatType).Returns(() => mockingSetup.RawMembershipRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.MembershipRepeatTypeID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawMembershipLevels?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ProductMembershipLevel's Associated Objects
                mock.Setup(m => m.Subscriptions).Returns(() => mockingSetup.RawSubscriptions?.Where(x => x.Object.ProductMembershipLevelID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Subscription>());
                // ProductMembershipLevel's Related Objects
                return mock.Object;
            };
            For<IProductMembershipLevel>().Use(() => mockFuncProductMembershipLevel());
            For<ProductMembershipLevel>().Use(() => mockFuncProductMembershipLevel());
            Func<ProductPricePoint> mockFuncProductPricePoint = () =>
            {
                var mock = new Mock<ProductPricePoint>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductPricePoint Properties
                // Dynamic Linking
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PriceRounding).Returns(() => mockingSetup.RawPriceRoundings?.FirstOrDefault(x => x.Object.ID == mock.Object.PriceRoundingID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // ProductPricePoint's Associated Objects
                // ProductPricePoint's Related Objects
                return mock.Object;
            };
            For<IProductPricePoint>().Use(() => mockFuncProductPricePoint());
            For<ProductPricePoint>().Use(() => mockFuncProductPricePoint());
            Func<ProductRestriction> mockFuncProductRestriction = () =>
            {
                var mock = new Mock<ProductRestriction>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductRestriction Properties
                // Dynamic Linking
                mock.Setup(m => m.OverrideWithAccountType).Returns(() => mockingSetup.RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.OverrideWithAccountTypeID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.RestrictionsApplyToCountry).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.RestrictionsApplyToCountryID)?.Object);
                mock.Setup(m => m.RestrictionsApplyToRegion).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RestrictionsApplyToRegionID)?.Object);
                // ProductRestriction's Associated Objects
                // ProductRestriction's Related Objects
                return mock.Object;
            };
            For<IProductRestriction>().Use(() => mockFuncProductRestriction());
            For<ProductRestriction>().Use(() => mockFuncProductRestriction());
            Func<ProductShipCarrierMethod> mockFuncProductShipCarrierMethod = () =>
            {
                var mock = new Mock<ProductShipCarrierMethod>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductShipCarrierMethod Properties
                // Dynamic Linking
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // ProductShipCarrierMethod's Associated Objects
                // ProductShipCarrierMethod's Related Objects
                return mock.Object;
            };
            For<IProductShipCarrierMethod>().Use(() => mockFuncProductShipCarrierMethod());
            For<ProductShipCarrierMethod>().Use(() => mockFuncProductShipCarrierMethod());
            Func<ProductStatus> mockFuncProductStatus = () =>
            {
                var mock = new Mock<ProductStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductStatus Properties
                // Dynamic Linking
                // ProductStatus's Associated Objects
                // ProductStatus's Related Objects
                return mock.Object;
            };
            For<IProductStatus>().Use(() => mockFuncProductStatus());
            For<ProductStatus>().Use(() => mockFuncProductStatus());
            Func<ProductSubscriptionType> mockFuncProductSubscriptionType = () =>
            {
                var mock = new Mock<ProductSubscriptionType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductSubscriptionType Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.SubscriptionTypeRepeatType).Returns(() => mockingSetup.RawSubscriptionTypeRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SubscriptionTypeRepeatTypeID)?.Object);
                // ProductSubscriptionType's Associated Objects
                // ProductSubscriptionType's Related Objects
                return mock.Object;
            };
            For<IProductSubscriptionType>().Use(() => mockFuncProductSubscriptionType());
            For<ProductSubscriptionType>().Use(() => mockFuncProductSubscriptionType());
            Func<ProductType> mockFuncProductType = () =>
            {
                var mock = new Mock<ProductType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductType Properties
                // Dynamic Linking
                // ProductType's Associated Objects
                // ProductType's Related Objects
                return mock.Object;
            };
            For<IProductType>().Use(() => mockFuncProductType());
            For<ProductType>().Use(() => mockFuncProductType());
        }
    }
}
