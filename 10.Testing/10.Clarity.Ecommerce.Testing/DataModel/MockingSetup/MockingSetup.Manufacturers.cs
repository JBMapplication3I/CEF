// <autogenerated>
// <copyright file="Manufacturers.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Manufacturers section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoManufacturers { private get; set; }

        // Enable the tables specifically on run
        public bool DoManufacturerTable { private get; set; }
        public bool DoManufacturerImageTable { private get; set; }
        public bool DoManufacturerImageTypeTable { private get; set; }
        public bool DoManufacturerProductTable { private get; set; }
        public bool DoManufacturerTypeTable { private get; set; }

        // Dirty Checking
        public bool ManufacturerDirty { private get; set; }
        public bool ManufacturerImageDirty { private get; set; }
        public bool ManufacturerImageTypeDirty { private get; set; }
        public bool ManufacturerProductDirty { private get; set; }
        public bool ManufacturerTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Manufacturer>>? Manufacturers { get; private set; }
        public Mock<DbSet<ManufacturerImage>>? ManufacturerImages { get; private set; }
        public Mock<DbSet<ManufacturerImageType>>? ManufacturerImageTypes { get; private set; }
        public Mock<DbSet<ManufacturerProduct>>? ManufacturerProducts { get; private set; }
        public Mock<DbSet<ManufacturerType>>? ManufacturerTypes { get; private set; }

        // Raw Data
        public List<Mock<Manufacturer>>? RawManufacturers { get; private set; }
        public List<Mock<ManufacturerImage>>? RawManufacturerImages { get; private set; }
        public List<Mock<ManufacturerImageType>>? RawManufacturerImageTypes { get; private set; }
        public List<Mock<ManufacturerProduct>>? RawManufacturerProducts { get; private set; }
        public List<Mock<ManufacturerType>>? RawManufacturerTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksManufacturersAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoManufacturers || (DoManufacturerTable && (!dirtyOnly || ManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawManufacturers == null) { throw new InvalidOperationException("Raw Manufacturers was null"); }
                    await InitializeMockSetFromListAsync(Manufacturers, RawManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.Manufacturers).Returns(() => Manufacturers?.Object!);
                    context.Setup(m => m.Set<Manufacturer>()).Returns(() => Manufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoManufacturers || (DoManufacturerImageTable && (!dirtyOnly || ManufacturerImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawManufacturerImages == null) { throw new InvalidOperationException("Raw ManufacturerImages was null"); }
                    await InitializeMockSetFromListAsync(ManufacturerImages, RawManufacturerImages).ConfigureAwait(false);
                    context.Setup(m => m.ManufacturerImages).Returns(() => ManufacturerImages?.Object!);
                    context.Setup(m => m.Set<ManufacturerImage>()).Returns(() => ManufacturerImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoManufacturers || (DoManufacturerImageTypeTable && (!dirtyOnly || ManufacturerImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawManufacturerImageTypes == null) { throw new InvalidOperationException("Raw ManufacturerImageTypes was null"); }
                    await InitializeMockSetFromListAsync(ManufacturerImageTypes, RawManufacturerImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.ManufacturerImageTypes).Returns(() => ManufacturerImageTypes?.Object!);
                    context.Setup(m => m.Set<ManufacturerImageType>()).Returns(() => ManufacturerImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoManufacturers || (DoManufacturerProductTable && (!dirtyOnly || ManufacturerProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawManufacturerProducts == null) { throw new InvalidOperationException("Raw ManufacturerProducts was null"); }
                    await InitializeMockSetFromListAsync(ManufacturerProducts, RawManufacturerProducts).ConfigureAwait(false);
                    context.Setup(m => m.ManufacturerProducts).Returns(() => ManufacturerProducts?.Object!);
                    context.Setup(m => m.Set<ManufacturerProduct>()).Returns(() => ManufacturerProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoManufacturers || (DoManufacturerTypeTable && (!dirtyOnly || ManufacturerTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawManufacturerTypes == null) { throw new InvalidOperationException("Raw ManufacturerTypes was null"); }
                    await InitializeMockSetFromListAsync(ManufacturerTypes, RawManufacturerTypes).ConfigureAwait(false);
                    context.Setup(m => m.ManufacturerTypes).Returns(() => ManufacturerTypes?.Object!);
                    context.Setup(m => m.Set<ManufacturerType>()).Returns(() => ManufacturerTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Manufacturer>> data)
        {
            if (!DoAll && !DoManufacturers && !DoManufacturerTable) { return; }
            Manufacturers ??= new Mock<DbSet<Manufacturer>>();
            await InitializeMockSetFromListAsync(Manufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.Manufacturers).Returns(() => Manufacturers.Object);
            context.Setup(m => m.Set<Manufacturer>()).Returns(() => Manufacturers.Object);
            TableRecordCounts[typeof(Manufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Manufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Manufacturer)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Manufacturer)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetManufacturerImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ManufacturerImage>> data)
        {
            if (!DoAll && !DoManufacturers && !DoManufacturerImageTable) { return; }
            ManufacturerImages ??= new Mock<DbSet<ManufacturerImage>>();
            await InitializeMockSetFromListAsync(ManufacturerImages, data).ConfigureAwait(false);
            context.Setup(m => m.ManufacturerImages).Returns(() => ManufacturerImages.Object);
            context.Setup(m => m.Set<ManufacturerImage>()).Returns(() => ManufacturerImages.Object);
            TableRecordCounts[typeof(ManufacturerImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ManufacturerImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ManufacturerImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ManufacturerImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetManufacturerImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ManufacturerImageType>> data)
        {
            if (!DoAll && !DoManufacturers && !DoManufacturerImageTypeTable) { return; }
            ManufacturerImageTypes ??= new Mock<DbSet<ManufacturerImageType>>();
            await InitializeMockSetFromListAsync(ManufacturerImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ManufacturerImageTypes).Returns(() => ManufacturerImageTypes.Object);
            context.Setup(m => m.Set<ManufacturerImageType>()).Returns(() => ManufacturerImageTypes.Object);
            TableRecordCounts[typeof(ManufacturerImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ManufacturerImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ManufacturerImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ManufacturerImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ManufacturerImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetManufacturerProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ManufacturerProduct>> data)
        {
            if (!DoAll && !DoManufacturers && !DoManufacturerProductTable) { return; }
            ManufacturerProducts ??= new Mock<DbSet<ManufacturerProduct>>();
            await InitializeMockSetFromListAsync(ManufacturerProducts, data).ConfigureAwait(false);
            context.Setup(m => m.ManufacturerProducts).Returns(() => ManufacturerProducts.Object);
            context.Setup(m => m.Set<ManufacturerProduct>()).Returns(() => ManufacturerProducts.Object);
            TableRecordCounts[typeof(ManufacturerProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ManufacturerProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ManufacturerProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetManufacturerTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ManufacturerType>> data)
        {
            if (!DoAll && !DoManufacturers && !DoManufacturerTypeTable) { return; }
            ManufacturerTypes ??= new Mock<DbSet<ManufacturerType>>();
            await InitializeMockSetFromListAsync(ManufacturerTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ManufacturerTypes).Returns(() => ManufacturerTypes.Object);
            context.Setup(m => m.Set<ManufacturerType>()).Returns(() => ManufacturerTypes.Object);
            TableRecordCounts[typeof(ManufacturerType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ManufacturerType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ManufacturerType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ManufacturerType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ManufacturerType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Manufacturer.</summary>
        /// <returns>The new Manufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Manufacturer>> CreateADummyManufacturerAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int? contactID = null, string? jsonAttributes = null, decimal? minimumForFreeShippingDollarAmount = null!, decimal? minimumForFreeShippingDollarAmountAfter = null!, int? minimumForFreeShippingDollarAmountBufferCategoryID = null!, int? minimumForFreeShippingDollarAmountBufferProductID = null!, string minimumForFreeShippingDollarAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingDollarAmountWarningMessage = null!, decimal? minimumForFreeShippingQuantityAmount = null!, decimal? minimumForFreeShippingQuantityAmountAfter = null!, int? minimumForFreeShippingQuantityAmountBufferCategoryID = null!, int? minimumForFreeShippingQuantityAmountBufferProductID = null!, string minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingQuantityAmountWarningMessage = null!, decimal? minimumOrderDollarAmount = null!, decimal? minimumOrderDollarAmountAfter = null!, int? minimumOrderDollarAmountBufferCategoryID = null!, int? minimumOrderDollarAmountBufferProductID = null!, decimal? minimumOrderDollarAmountOverrideFee = null!, string minimumOrderDollarAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderDollarAmountOverrideFeeIsPercent = false, string minimumOrderDollarAmountOverrideFeeWarningMessage = null!, string minimumOrderDollarAmountWarningMessage = null!, decimal? minimumOrderQuantityAmount = null!, decimal? minimumOrderQuantityAmountAfter = null!, int? minimumOrderQuantityAmountBufferCategoryID = null!, int? minimumOrderQuantityAmountBufferProductID = null!, decimal? minimumOrderQuantityAmountOverrideFee = null!, string minimumOrderQuantityAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderQuantityAmountOverrideFeeIsPercent = false, string minimumOrderQuantityAmountOverrideFeeWarningMessage = null!, string minimumOrderQuantityAmountWarningMessage = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Manufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // Manufacturer Properties
                mock.Object.MinimumForFreeShippingDollarAmount = minimumForFreeShippingDollarAmount;
                mock.Object.MinimumForFreeShippingDollarAmountAfter = minimumForFreeShippingDollarAmountAfter;
                mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID = minimumForFreeShippingDollarAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingDollarAmountBufferProductID = minimumForFreeShippingDollarAmountBufferProductID;
                mock.Object.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = minimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingDollarAmountWarningMessage = minimumForFreeShippingDollarAmountWarningMessage;
                mock.Object.MinimumForFreeShippingQuantityAmount = minimumForFreeShippingQuantityAmount;
                mock.Object.MinimumForFreeShippingQuantityAmountAfter = minimumForFreeShippingQuantityAmountAfter;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID = minimumForFreeShippingQuantityAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID = minimumForFreeShippingQuantityAmountBufferProductID;
                mock.Object.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingQuantityAmountWarningMessage = minimumForFreeShippingQuantityAmountWarningMessage;
                mock.Object.MinimumOrderDollarAmount = minimumOrderDollarAmount;
                mock.Object.MinimumOrderDollarAmountAfter = minimumOrderDollarAmountAfter;
                mock.Object.MinimumOrderDollarAmountBufferCategoryID = minimumOrderDollarAmountBufferCategoryID;
                mock.Object.MinimumOrderDollarAmountBufferProductID = minimumOrderDollarAmountBufferProductID;
                mock.Object.MinimumOrderDollarAmountOverrideFee = minimumOrderDollarAmountOverrideFee;
                mock.Object.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = minimumOrderDollarAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderDollarAmountOverrideFeeIsPercent = minimumOrderDollarAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderDollarAmountOverrideFeeWarningMessage = minimumOrderDollarAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderDollarAmountWarningMessage = minimumOrderDollarAmountWarningMessage;
                mock.Object.MinimumOrderQuantityAmount = minimumOrderQuantityAmount;
                mock.Object.MinimumOrderQuantityAmountAfter = minimumOrderQuantityAmountAfter;
                mock.Object.MinimumOrderQuantityAmountBufferCategoryID = minimumOrderQuantityAmountBufferCategoryID;
                mock.Object.MinimumOrderQuantityAmountBufferProductID = minimumOrderQuantityAmountBufferProductID;
                mock.Object.MinimumOrderQuantityAmountOverrideFee = minimumOrderQuantityAmountOverrideFee;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = minimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeIsPercent = minimumOrderQuantityAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeWarningMessage = minimumOrderQuantityAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderQuantityAmountWarningMessage = minimumOrderQuantityAmountWarningMessage;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawManufacturerTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawManufacturerImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ManufacturerImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.ManufacturerID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // Manufacturer's Related Objects
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Manufacturer's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => RawBrandManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandManufacturer>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseManufacturer>());
                mock.Setup(m => m.Products).Returns(() => RawManufacturerProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ManufacturerProduct>());
                mock.Setup(m => m.Reviews).Returns(() => RawReviews?.Where(x => x.Object.ManufacturerID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreManufacturer>());
                mock.Setup(m => m.Vendors).Returns(() => RawVendorManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorManufacturer>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ManufacturerImage.</summary>
        /// <returns>The new ManufacturerImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ManufacturerImage>> CreateADummyManufacturerImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ManufacturerImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // ManufacturerImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawManufacturerImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ManufacturerImage's Related Objects
                // ManufacturerImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ManufacturerImageType.</summary>
        /// <returns>The new ManufacturerImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ManufacturerImageType>> CreateADummyManufacturerImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ManufacturerImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ManufacturerImageType Properties
                // Dynamic Linking
                // ManufacturerImageType's Related Objects
                // ManufacturerImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ManufacturerProduct.</summary>
        /// <returns>The new ManufacturerProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ManufacturerProduct>> CreateADummyManufacturerProductAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ManufacturerProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ManufacturerProduct Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // ManufacturerProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ManufacturerProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ManufacturerType.</summary>
        /// <returns>The new ManufacturerType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ManufacturerType>> CreateADummyManufacturerTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ManufacturerType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ManufacturerType Properties
                // Dynamic Linking
                // ManufacturerType's Related Objects
                // ManufacturerType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForManufacturers(MockingSetup mockingSetup)
        {
            Func<Manufacturer> mockFuncManufacturer = () =>
            {
                var mock = new Mock<Manufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Manufacturer Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawManufacturerTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawManufacturerImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ManufacturerImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.ManufacturerID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Manufacturer's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandManufacturer>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseManufacturer>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawManufacturerProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ManufacturerProduct>());
                mock.Setup(m => m.Reviews).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.ManufacturerID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreManufacturer>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawVendorManufacturers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorManufacturer>());
                // Manufacturer's Related Objects
                return mock.Object;
            };
            For<IManufacturer>().Use(() => mockFuncManufacturer());
            For<Manufacturer>().Use(() => mockFuncManufacturer());
            Func<ManufacturerImage> mockFuncManufacturerImage = () =>
            {
                var mock = new Mock<ManufacturerImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ManufacturerImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawManufacturerImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ManufacturerImage's Associated Objects
                // ManufacturerImage's Related Objects
                return mock.Object;
            };
            For<IManufacturerImage>().Use(() => mockFuncManufacturerImage());
            For<ManufacturerImage>().Use(() => mockFuncManufacturerImage());
            Func<ManufacturerImageType> mockFuncManufacturerImageType = () =>
            {
                var mock = new Mock<ManufacturerImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ManufacturerImageType Properties
                // Dynamic Linking
                // ManufacturerImageType's Associated Objects
                // ManufacturerImageType's Related Objects
                return mock.Object;
            };
            For<IManufacturerImageType>().Use(() => mockFuncManufacturerImageType());
            For<ManufacturerImageType>().Use(() => mockFuncManufacturerImageType());
            Func<ManufacturerProduct> mockFuncManufacturerProduct = () =>
            {
                var mock = new Mock<ManufacturerProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ManufacturerProduct Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ManufacturerProduct's Associated Objects
                // ManufacturerProduct's Related Objects
                return mock.Object;
            };
            For<IManufacturerProduct>().Use(() => mockFuncManufacturerProduct());
            For<ManufacturerProduct>().Use(() => mockFuncManufacturerProduct());
            Func<ManufacturerType> mockFuncManufacturerType = () =>
            {
                var mock = new Mock<ManufacturerType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ManufacturerType Properties
                // Dynamic Linking
                // ManufacturerType's Associated Objects
                // ManufacturerType's Related Objects
                return mock.Object;
            };
            For<IManufacturerType>().Use(() => mockFuncManufacturerType());
            For<ManufacturerType>().Use(() => mockFuncManufacturerType());
        }
    }
}
