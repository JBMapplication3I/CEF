// <autogenerated>
// <copyright file="Contacts.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Contacts section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoContacts { private get; set; }

        // Enable the tables specifically on run
        public bool DoContactTable { private get; set; }
        public bool DoContactImageTable { private get; set; }
        public bool DoContactImageTypeTable { private get; set; }
        public bool DoContactTypeTable { private get; set; }
        public bool DoPermissionTable { private get; set; }
        public bool DoProfanityFilterTable { private get; set; }
        public bool DoReferralCodeTable { private get; set; }
        public bool DoReferralCodeStatusTable { private get; set; }
        public bool DoReferralCodeTypeTable { private get; set; }
        public bool DoRolePermissionTable { private get; set; }
        public bool DoRoleUserTable { private get; set; }
        public bool DoUserTable { private get; set; }
        public bool DoUserClaimTable { private get; set; }
        public bool DoUserFileTable { private get; set; }
        public bool DoUserImageTable { private get; set; }
        public bool DoUserImageTypeTable { private get; set; }
        public bool DoUserLoginTable { private get; set; }
        public bool DoUserOnlineStatusTable { private get; set; }
        public bool DoUserProductTypeTable { private get; set; }
        public bool DoUserRoleTable { private get; set; }
        public bool DoUserStatusTable { private get; set; }
        public bool DoUserTypeTable { private get; set; }

        // Dirty Checking
        public bool ContactDirty { private get; set; }
        public bool ContactImageDirty { private get; set; }
        public bool ContactImageTypeDirty { private get; set; }
        public bool ContactTypeDirty { private get; set; }
        public bool PermissionDirty { private get; set; }
        public bool ProfanityFilterDirty { private get; set; }
        public bool ReferralCodeDirty { private get; set; }
        public bool ReferralCodeStatusDirty { private get; set; }
        public bool ReferralCodeTypeDirty { private get; set; }
        public bool RolePermissionDirty { private get; set; }
        public bool RoleUserDirty { private get; set; }
        public bool UserDirty { private get; set; }
        public bool UserClaimDirty { private get; set; }
        public bool UserFileDirty { private get; set; }
        public bool UserImageDirty { private get; set; }
        public bool UserImageTypeDirty { private get; set; }
        public bool UserLoginDirty { private get; set; }
        public bool UserOnlineStatusDirty { private get; set; }
        public bool UserProductTypeDirty { private get; set; }
        public bool UserRoleDirty { private get; set; }
        public bool UserStatusDirty { private get; set; }
        public bool UserTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Contact>>? Contacts { get; private set; }
        public Mock<DbSet<ContactImage>>? ContactImages { get; private set; }
        public Mock<DbSet<ContactImageType>>? ContactImageTypes { get; private set; }
        public Mock<DbSet<ContactType>>? ContactTypes { get; private set; }
        public Mock<DbSet<Permission>>? Permissions { get; private set; }
        public Mock<DbSet<ProfanityFilter>>? ProfanityFilters { get; private set; }
        public Mock<DbSet<ReferralCode>>? ReferralCodes { get; private set; }
        public Mock<DbSet<ReferralCodeStatus>>? ReferralCodeStatuses { get; private set; }
        public Mock<DbSet<ReferralCodeType>>? ReferralCodeTypes { get; private set; }
        public Mock<DbSet<RolePermission>>? RolePermissions { get; private set; }
        public Mock<DbSet<RoleUser>>? RoleUsers { get; private set; }
        public Mock<DbSet<User>>? Users { get; private set; }
        public Mock<DbSet<UserClaim>>? UserClaims { get; private set; }
        public Mock<DbSet<UserFile>>? UserFiles { get; private set; }
        public Mock<DbSet<UserImage>>? UserImages { get; private set; }
        public Mock<DbSet<UserImageType>>? UserImageTypes { get; private set; }
        public Mock<DbSet<UserLogin>>? UserLogins { get; private set; }
        public Mock<DbSet<UserOnlineStatus>>? UserOnlineStatuses { get; private set; }
        public Mock<DbSet<UserProductType>>? UserProductTypes { get; private set; }
        public Mock<DbSet<UserRole>>? UserRoles { get; private set; }
        public Mock<DbSet<UserStatus>>? UserStatuses { get; private set; }
        public Mock<DbSet<UserType>>? UserTypes { get; private set; }

        // Raw Data
        public List<Mock<Contact>>? RawContacts { get; private set; }
        public List<Mock<ContactImage>>? RawContactImages { get; private set; }
        public List<Mock<ContactImageType>>? RawContactImageTypes { get; private set; }
        public List<Mock<ContactType>>? RawContactTypes { get; private set; }
        public List<Mock<Permission>>? RawPermissions { get; private set; }
        public List<Mock<ProfanityFilter>>? RawProfanityFilters { get; private set; }
        public List<Mock<ReferralCode>>? RawReferralCodes { get; private set; }
        public List<Mock<ReferralCodeStatus>>? RawReferralCodeStatuses { get; private set; }
        public List<Mock<ReferralCodeType>>? RawReferralCodeTypes { get; private set; }
        public List<Mock<RolePermission>>? RawRolePermissions { get; private set; }
        public List<Mock<RoleUser>>? RawRoleUsers { get; private set; }
        public List<Mock<User>>? RawUsers { get; private set; }
        public List<Mock<UserClaim>>? RawUserClaims { get; private set; }
        public List<Mock<UserFile>>? RawUserFiles { get; private set; }
        public List<Mock<UserImage>>? RawUserImages { get; private set; }
        public List<Mock<UserImageType>>? RawUserImageTypes { get; private set; }
        public List<Mock<UserLogin>>? RawUserLogins { get; private set; }
        public List<Mock<UserOnlineStatus>>? RawUserOnlineStatuses { get; private set; }
        public List<Mock<UserProductType>>? RawUserProductTypes { get; private set; }
        public List<Mock<UserRole>>? RawUserRoles { get; private set; }
        public List<Mock<UserStatus>>? RawUserStatuses { get; private set; }
        public List<Mock<UserType>>? RawUserTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksContactsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoContacts || (DoContactTable && (!dirtyOnly || ContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawContacts == null) { throw new InvalidOperationException("Raw Contacts was null"); }
                    await InitializeMockSetFromListAsync(Contacts, RawContacts).ConfigureAwait(false);
                    context.Setup(m => m.Contacts).Returns(() => Contacts?.Object!);
                    context.Setup(m => m.Set<Contact>()).Returns(() => Contacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoContactImageTable && (!dirtyOnly || ContactImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawContactImages == null) { throw new InvalidOperationException("Raw ContactImages was null"); }
                    await InitializeMockSetFromListAsync(ContactImages, RawContactImages).ConfigureAwait(false);
                    context.Setup(m => m.ContactImages).Returns(() => ContactImages?.Object!);
                    context.Setup(m => m.Set<ContactImage>()).Returns(() => ContactImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoContactImageTypeTable && (!dirtyOnly || ContactImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawContactImageTypes == null) { throw new InvalidOperationException("Raw ContactImageTypes was null"); }
                    await InitializeMockSetFromListAsync(ContactImageTypes, RawContactImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.ContactImageTypes).Returns(() => ContactImageTypes?.Object!);
                    context.Setup(m => m.Set<ContactImageType>()).Returns(() => ContactImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoContactTypeTable && (!dirtyOnly || ContactTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawContactTypes == null) { throw new InvalidOperationException("Raw ContactTypes was null"); }
                    await InitializeMockSetFromListAsync(ContactTypes, RawContactTypes).ConfigureAwait(false);
                    context.Setup(m => m.ContactTypes).Returns(() => ContactTypes?.Object!);
                    context.Setup(m => m.Set<ContactType>()).Returns(() => ContactTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoPermissionTable && (!dirtyOnly || PermissionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPermissions == null) { throw new InvalidOperationException("Raw Permissions was null"); }
                    await InitializeMockSetFromListNonIBaseAsync(Permissions, RawPermissions).ConfigureAwait(false);
                    context.Setup(m => m.Permissions).Returns(() => Permissions?.Object!);
                    context.Setup(m => m.Set<Permission>()).Returns(() => Permissions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoProfanityFilterTable && (!dirtyOnly || ProfanityFilterDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProfanityFilters == null) { throw new InvalidOperationException("Raw ProfanityFilters was null"); }
                    await InitializeMockSetFromListAsync(ProfanityFilters, RawProfanityFilters).ConfigureAwait(false);
                    context.Setup(m => m.ProfanityFilters).Returns(() => ProfanityFilters?.Object!);
                    context.Setup(m => m.Set<ProfanityFilter>()).Returns(() => ProfanityFilters?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoReferralCodeTable && (!dirtyOnly || ReferralCodeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawReferralCodes == null) { throw new InvalidOperationException("Raw ReferralCodes was null"); }
                    await InitializeMockSetFromListAsync(ReferralCodes, RawReferralCodes).ConfigureAwait(false);
                    context.Setup(m => m.ReferralCodes).Returns(() => ReferralCodes?.Object!);
                    context.Setup(m => m.Set<ReferralCode>()).Returns(() => ReferralCodes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoReferralCodeStatusTable && (!dirtyOnly || ReferralCodeStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawReferralCodeStatuses == null) { throw new InvalidOperationException("Raw ReferralCodeStatuses was null"); }
                    await InitializeMockSetFromListAsync(ReferralCodeStatuses, RawReferralCodeStatuses).ConfigureAwait(false);
                    context.Setup(m => m.ReferralCodeStatuses).Returns(() => ReferralCodeStatuses?.Object!);
                    context.Setup(m => m.Set<ReferralCodeStatus>()).Returns(() => ReferralCodeStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoReferralCodeTypeTable && (!dirtyOnly || ReferralCodeTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawReferralCodeTypes == null) { throw new InvalidOperationException("Raw ReferralCodeTypes was null"); }
                    await InitializeMockSetFromListAsync(ReferralCodeTypes, RawReferralCodeTypes).ConfigureAwait(false);
                    context.Setup(m => m.ReferralCodeTypes).Returns(() => ReferralCodeTypes?.Object!);
                    context.Setup(m => m.Set<ReferralCodeType>()).Returns(() => ReferralCodeTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoRolePermissionTable && (!dirtyOnly || RolePermissionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRolePermissions == null) { throw new InvalidOperationException("Raw RolePermissions was null"); }
                    await InitializeMockSetFromListNonIBaseAsync(RolePermissions, RawRolePermissions).ConfigureAwait(false);
                    context.Setup(m => m.RolePermissions).Returns(() => RolePermissions?.Object!);
                    context.Setup(m => m.Set<RolePermission>()).Returns(() => RolePermissions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoRoleUserTable && (!dirtyOnly || RoleUserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRoleUsers == null) { throw new InvalidOperationException("Raw RoleUsers was null"); }
                    await InitializeMockSetFromListAsync(RoleUsers, RawRoleUsers).ConfigureAwait(false);
                    context.Setup(m => m.RoleUsers).Returns(() => RoleUsers?.Object!);
                    context.Setup(m => m.Set<RoleUser>()).Returns(() => RoleUsers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserTable && (!dirtyOnly || UserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUsers == null) { throw new InvalidOperationException("Raw Users was null"); }
                    await InitializeMockSetFromListAsync(Users, RawUsers).ConfigureAwait(false);
                    context.Setup(m => m.Users).Returns(() => Users?.Object!);
                    context.Setup(m => m.Set<User>()).Returns(() => Users?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserClaimTable && (!dirtyOnly || UserClaimDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserClaims == null) { throw new InvalidOperationException("Raw UserClaims was null"); }
                    await InitializeMockSetFromListNonIBaseAsync(UserClaims, RawUserClaims).ConfigureAwait(false);
                    context.Setup(m => m.UserClaims).Returns(() => UserClaims?.Object!);
                    context.Setup(m => m.Set<UserClaim>()).Returns(() => UserClaims?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserFileTable && (!dirtyOnly || UserFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserFiles == null) { throw new InvalidOperationException("Raw UserFiles was null"); }
                    await InitializeMockSetFromListAsync(UserFiles, RawUserFiles).ConfigureAwait(false);
                    context.Setup(m => m.UserFiles).Returns(() => UserFiles?.Object!);
                    context.Setup(m => m.Set<UserFile>()).Returns(() => UserFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserImageTable && (!dirtyOnly || UserImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserImages == null) { throw new InvalidOperationException("Raw UserImages was null"); }
                    await InitializeMockSetFromListAsync(UserImages, RawUserImages).ConfigureAwait(false);
                    context.Setup(m => m.UserImages).Returns(() => UserImages?.Object!);
                    context.Setup(m => m.Set<UserImage>()).Returns(() => UserImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserImageTypeTable && (!dirtyOnly || UserImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserImageTypes == null) { throw new InvalidOperationException("Raw UserImageTypes was null"); }
                    await InitializeMockSetFromListAsync(UserImageTypes, RawUserImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.UserImageTypes).Returns(() => UserImageTypes?.Object!);
                    context.Setup(m => m.Set<UserImageType>()).Returns(() => UserImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserLoginTable && (!dirtyOnly || UserLoginDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserLogins == null) { throw new InvalidOperationException("Raw UserLogins was null"); }
                    await InitializeMockSetFromListNonIBaseAsync(UserLogins, RawUserLogins).ConfigureAwait(false);
                    context.Setup(m => m.UserLogins).Returns(() => UserLogins?.Object!);
                    context.Setup(m => m.Set<UserLogin>()).Returns(() => UserLogins?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserOnlineStatusTable && (!dirtyOnly || UserOnlineStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserOnlineStatuses == null) { throw new InvalidOperationException("Raw UserOnlineStatuses was null"); }
                    await InitializeMockSetFromListAsync(UserOnlineStatuses, RawUserOnlineStatuses).ConfigureAwait(false);
                    context.Setup(m => m.UserOnlineStatuses).Returns(() => UserOnlineStatuses?.Object!);
                    context.Setup(m => m.Set<UserOnlineStatus>()).Returns(() => UserOnlineStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserProductTypeTable && (!dirtyOnly || UserProductTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserProductTypes == null) { throw new InvalidOperationException("Raw UserProductTypes was null"); }
                    await InitializeMockSetFromListAsync(UserProductTypes, RawUserProductTypes).ConfigureAwait(false);
                    context.Setup(m => m.UserProductTypes).Returns(() => UserProductTypes?.Object!);
                    context.Setup(m => m.Set<UserProductType>()).Returns(() => UserProductTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserRoleTable && (!dirtyOnly || UserRoleDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserRoles == null) { throw new InvalidOperationException("Raw UserRoles was null"); }
                    await InitializeMockSetFromListNonIBaseAsync(UserRoles, RawUserRoles).ConfigureAwait(false);
                    context.Setup(m => m.Roles).Returns(() => UserRoles?.Object!);
                    context.Setup(m => m.Set<UserRole>()).Returns(() => UserRoles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserStatusTable && (!dirtyOnly || UserStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserStatuses == null) { throw new InvalidOperationException("Raw UserStatuses was null"); }
                    await InitializeMockSetFromListAsync(UserStatuses, RawUserStatuses).ConfigureAwait(false);
                    context.Setup(m => m.UserStatuses).Returns(() => UserStatuses?.Object!);
                    context.Setup(m => m.Set<UserStatus>()).Returns(() => UserStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoContacts || (DoUserTypeTable && (!dirtyOnly || UserTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserTypes == null) { throw new InvalidOperationException("Raw UserTypes was null"); }
                    await InitializeMockSetFromListAsync(UserTypes, RawUserTypes).ConfigureAwait(false);
                    context.Setup(m => m.UserTypes).Returns(() => UserTypes?.Object!);
                    context.Setup(m => m.Set<UserType>()).Returns(() => UserTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Contact>> data)
        {
            if (!DoAll && !DoContacts && !DoContactTable) { return; }
            Contacts ??= new Mock<DbSet<Contact>>();
            await InitializeMockSetFromListAsync(Contacts, data).ConfigureAwait(false);
            context.Setup(m => m.Contacts).Returns(() => Contacts.Object);
            context.Setup(m => m.Set<Contact>()).Returns(() => Contacts.Object);
            TableRecordCounts[typeof(Contact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Contact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Contact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetContactImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ContactImage>> data)
        {
            if (!DoAll && !DoContacts && !DoContactImageTable) { return; }
            ContactImages ??= new Mock<DbSet<ContactImage>>();
            await InitializeMockSetFromListAsync(ContactImages, data).ConfigureAwait(false);
            context.Setup(m => m.ContactImages).Returns(() => ContactImages.Object);
            context.Setup(m => m.Set<ContactImage>()).Returns(() => ContactImages.Object);
            TableRecordCounts[typeof(ContactImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ContactImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ContactImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ContactImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetContactImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ContactImageType>> data)
        {
            if (!DoAll && !DoContacts && !DoContactImageTypeTable) { return; }
            ContactImageTypes ??= new Mock<DbSet<ContactImageType>>();
            await InitializeMockSetFromListAsync(ContactImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ContactImageTypes).Returns(() => ContactImageTypes.Object);
            context.Setup(m => m.Set<ContactImageType>()).Returns(() => ContactImageTypes.Object);
            TableRecordCounts[typeof(ContactImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ContactImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ContactImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ContactImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ContactImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetContactTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ContactType>> data)
        {
            if (!DoAll && !DoContacts && !DoContactTypeTable) { return; }
            ContactTypes ??= new Mock<DbSet<ContactType>>();
            await InitializeMockSetFromListAsync(ContactTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ContactTypes).Returns(() => ContactTypes.Object);
            context.Setup(m => m.Set<ContactType>()).Returns(() => ContactTypes.Object);
            TableRecordCounts[typeof(ContactType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ContactType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ContactType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ContactType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ContactType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPermissionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Permission>> data)
        {
            if (!DoAll && !DoContacts && !DoPermissionTable) { return; }
            Permissions ??= new Mock<DbSet<Permission>>();
            await InitializeMockSetFromListNonIBaseAsync(Permissions, data).ConfigureAwait(false);
            context.Setup(m => m.Permissions).Returns(() => Permissions.Object);
            context.Setup(m => m.Set<Permission>()).Returns(() => Permissions.Object);
            TableRecordCounts[typeof(Permission)] = data.Count;
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProfanityFiltersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProfanityFilter>> data)
        {
            if (!DoAll && !DoContacts && !DoProfanityFilterTable) { return; }
            ProfanityFilters ??= new Mock<DbSet<ProfanityFilter>>();
            await InitializeMockSetFromListAsync(ProfanityFilters, data).ConfigureAwait(false);
            context.Setup(m => m.ProfanityFilters).Returns(() => ProfanityFilters.Object);
            context.Setup(m => m.Set<ProfanityFilter>()).Returns(() => ProfanityFilters.Object);
            TableRecordCounts[typeof(ProfanityFilter)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProfanityFilter)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProfanityFilter)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetReferralCodesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ReferralCode>> data)
        {
            if (!DoAll && !DoContacts && !DoReferralCodeTable) { return; }
            ReferralCodes ??= new Mock<DbSet<ReferralCode>>();
            await InitializeMockSetFromListAsync(ReferralCodes, data).ConfigureAwait(false);
            context.Setup(m => m.ReferralCodes).Returns(() => ReferralCodes.Object);
            context.Setup(m => m.Set<ReferralCode>()).Returns(() => ReferralCodes.Object);
            TableRecordCounts[typeof(ReferralCode)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ReferralCode)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ReferralCode)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ReferralCode)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetReferralCodeStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ReferralCodeStatus>> data)
        {
            if (!DoAll && !DoContacts && !DoReferralCodeStatusTable) { return; }
            ReferralCodeStatuses ??= new Mock<DbSet<ReferralCodeStatus>>();
            await InitializeMockSetFromListAsync(ReferralCodeStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.ReferralCodeStatuses).Returns(() => ReferralCodeStatuses.Object);
            context.Setup(m => m.Set<ReferralCodeStatus>()).Returns(() => ReferralCodeStatuses.Object);
            TableRecordCounts[typeof(ReferralCodeStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ReferralCodeStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ReferralCodeStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ReferralCodeStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ReferralCodeStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetReferralCodeTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ReferralCodeType>> data)
        {
            if (!DoAll && !DoContacts && !DoReferralCodeTypeTable) { return; }
            ReferralCodeTypes ??= new Mock<DbSet<ReferralCodeType>>();
            await InitializeMockSetFromListAsync(ReferralCodeTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ReferralCodeTypes).Returns(() => ReferralCodeTypes.Object);
            context.Setup(m => m.Set<ReferralCodeType>()).Returns(() => ReferralCodeTypes.Object);
            TableRecordCounts[typeof(ReferralCodeType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ReferralCodeType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ReferralCodeType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ReferralCodeType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ReferralCodeType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRolePermissionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RolePermission>> data)
        {
            if (!DoAll && !DoContacts && !DoRolePermissionTable) { return; }
            RolePermissions ??= new Mock<DbSet<RolePermission>>();
            await InitializeMockSetFromListNonIBaseAsync(RolePermissions, data).ConfigureAwait(false);
            context.Setup(m => m.RolePermissions).Returns(() => RolePermissions.Object);
            context.Setup(m => m.Set<RolePermission>()).Returns(() => RolePermissions.Object);
            TableRecordCounts[typeof(RolePermission)] = data.Count;
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRoleUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RoleUser>> data)
        {
            if (!DoAll && !DoContacts && !DoRoleUserTable) { return; }
            RoleUsers ??= new Mock<DbSet<RoleUser>>();
            await InitializeMockSetFromListAsync(RoleUsers, data).ConfigureAwait(false);
            context.Setup(m => m.RoleUsers).Returns(() => RoleUsers.Object);
            context.Setup(m => m.Set<RoleUser>()).Returns(() => RoleUsers.Object);
            TableRecordCounts[typeof(RoleUser)] = data.Count;
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<User>> data)
        {
            if (!DoAll && !DoContacts && !DoUserTable) { return; }
            Users ??= new Mock<DbSet<User>>();
            await InitializeMockSetFromListAsync(Users, data).ConfigureAwait(false);
            context.Setup(m => m.Users).Returns(() => Users.Object);
            context.Setup(m => m.Set<User>()).Returns(() => Users.Object);
            TableRecordCounts[typeof(User)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(User)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(User)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserClaimsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserClaim>> data)
        {
            if (!DoAll && !DoContacts && !DoUserClaimTable) { return; }
            UserClaims ??= new Mock<DbSet<UserClaim>>();
            await InitializeMockSetFromListNonIBaseAsync(UserClaims, data).ConfigureAwait(false);
            context.Setup(m => m.UserClaims).Returns(() => UserClaims.Object);
            context.Setup(m => m.Set<UserClaim>()).Returns(() => UserClaims.Object);
            TableRecordCounts[typeof(UserClaim)] = data.Count;
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserFile>> data)
        {
            if (!DoAll && !DoContacts && !DoUserFileTable) { return; }
            UserFiles ??= new Mock<DbSet<UserFile>>();
            await InitializeMockSetFromListAsync(UserFiles, data).ConfigureAwait(false);
            context.Setup(m => m.UserFiles).Returns(() => UserFiles.Object);
            context.Setup(m => m.Set<UserFile>()).Returns(() => UserFiles.Object);
            TableRecordCounts[typeof(UserFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(UserFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserImage>> data)
        {
            if (!DoAll && !DoContacts && !DoUserImageTable) { return; }
            UserImages ??= new Mock<DbSet<UserImage>>();
            await InitializeMockSetFromListAsync(UserImages, data).ConfigureAwait(false);
            context.Setup(m => m.UserImages).Returns(() => UserImages.Object);
            context.Setup(m => m.Set<UserImage>()).Returns(() => UserImages.Object);
            TableRecordCounts[typeof(UserImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(UserImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserImageType>> data)
        {
            if (!DoAll && !DoContacts && !DoUserImageTypeTable) { return; }
            UserImageTypes ??= new Mock<DbSet<UserImageType>>();
            await InitializeMockSetFromListAsync(UserImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.UserImageTypes).Returns(() => UserImageTypes.Object);
            context.Setup(m => m.Set<UserImageType>()).Returns(() => UserImageTypes.Object);
            TableRecordCounts[typeof(UserImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(UserImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(UserImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserLoginsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserLogin>> data)
        {
            if (!DoAll && !DoContacts && !DoUserLoginTable) { return; }
            UserLogins ??= new Mock<DbSet<UserLogin>>();
            await InitializeMockSetFromListNonIBaseAsync(UserLogins, data).ConfigureAwait(false);
            context.Setup(m => m.UserLogins).Returns(() => UserLogins.Object);
            context.Setup(m => m.Set<UserLogin>()).Returns(() => UserLogins.Object);
            TableRecordCounts[typeof(UserLogin)] = data.Count;
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserOnlineStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserOnlineStatus>> data)
        {
            if (!DoAll && !DoContacts && !DoUserOnlineStatusTable) { return; }
            UserOnlineStatuses ??= new Mock<DbSet<UserOnlineStatus>>();
            await InitializeMockSetFromListAsync(UserOnlineStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.UserOnlineStatuses).Returns(() => UserOnlineStatuses.Object);
            context.Setup(m => m.Set<UserOnlineStatus>()).Returns(() => UserOnlineStatuses.Object);
            TableRecordCounts[typeof(UserOnlineStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserOnlineStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserOnlineStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(UserOnlineStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(UserOnlineStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserProductTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserProductType>> data)
        {
            if (!DoAll && !DoContacts && !DoUserProductTypeTable) { return; }
            UserProductTypes ??= new Mock<DbSet<UserProductType>>();
            await InitializeMockSetFromListAsync(UserProductTypes, data).ConfigureAwait(false);
            context.Setup(m => m.UserProductTypes).Returns(() => UserProductTypes.Object);
            context.Setup(m => m.Set<UserProductType>()).Returns(() => UserProductTypes.Object);
            TableRecordCounts[typeof(UserProductType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserProductType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserProductType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserRolesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserRole>> data)
        {
            if (!DoAll && !DoContacts && !DoUserRoleTable) { return; }
            UserRoles ??= new Mock<DbSet<UserRole>>();
            await InitializeMockSetFromListNonIBaseAsync(UserRoles, data).ConfigureAwait(false);
            context.Setup(m => m.Roles).Returns(() => UserRoles.Object);
            context.Setup(m => m.Set<UserRole>()).Returns(() => UserRoles.Object);
            TableRecordCounts[typeof(UserRole)] = data.Count;
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserStatus>> data)
        {
            if (!DoAll && !DoContacts && !DoUserStatusTable) { return; }
            UserStatuses ??= new Mock<DbSet<UserStatus>>();
            await InitializeMockSetFromListAsync(UserStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.UserStatuses).Returns(() => UserStatuses.Object);
            context.Setup(m => m.Set<UserStatus>()).Returns(() => UserStatuses.Object);
            TableRecordCounts[typeof(UserStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(UserStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(UserStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserType>> data)
        {
            if (!DoAll && !DoContacts && !DoUserTypeTable) { return; }
            UserTypes ??= new Mock<DbSet<UserType>>();
            await InitializeMockSetFromListAsync(UserTypes, data).ConfigureAwait(false);
            context.Setup(m => m.UserTypes).Returns(() => UserTypes.Object);
            context.Setup(m => m.Set<UserType>()).Returns(() => UserTypes.Object);
            TableRecordCounts[typeof(UserType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(UserType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(UserType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Contact.</summary>
        /// <returns>The new Contact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Contact>> CreateADummyContactAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? addressID = null!, string email1 = null!, string fax1 = null!, string firstName = null!, string fullName = null!, string lastName = null!, string middleName = null!, string phone1 = null!, string phone2 = null!, string phone3 = null!, string website1 = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Contact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // Contact Properties
                mock.Object.AddressID = addressID;
                mock.Object.Email1 = email1;
                mock.Object.Fax1 = fax1;
                mock.Object.FirstName = firstName;
                mock.Object.FullName = fullName;
                mock.Object.LastName = lastName;
                mock.Object.MiddleName = middleName;
                mock.Object.Phone1 = phone1;
                mock.Object.Phone2 = phone2;
                mock.Object.Phone3 = phone3;
                mock.Object.Website1 = website1;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawContactTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawContactImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ContactImage>());
                // Contact's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                // Contact's Associated Objects
                mock.Setup(m => m.BillingContactsPurchaseOrders).Returns(() => RawPurchaseOrders?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.BillingContactsSalesInvoices).Returns(() => RawSalesInvoices?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoice>());
                mock.Setup(m => m.BillingContactsSalesOrders).Returns(() => RawSalesOrders?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrder>());
                mock.Setup(m => m.BillingContactsSalesQuotes).Returns(() => RawSalesQuotes?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuote>());
                mock.Setup(m => m.BillingContactsSalesReturns).Returns(() => RawSalesReturns?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturn>());
                mock.Setup(m => m.DestinationContactsShipments).Returns(() => RawShipments?.Where(x => x.Object.DestinationContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                mock.Setup(m => m.OriginContactsShipments).Returns(() => RawShipments?.Where(x => x.Object.OriginContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                mock.Setup(m => m.Payments).Returns(() => RawPayments?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Payment>());
                mock.Setup(m => m.ShippingContactsPurchaseOrders).Returns(() => RawPurchaseOrders?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.ShippingContactsSalesInvoices).Returns(() => RawSalesInvoices?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoice>());
                mock.Setup(m => m.ShippingContactsSalesOrders).Returns(() => RawSalesOrders?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrder>());
                mock.Setup(m => m.ShippingContactsSalesQuotes).Returns(() => RawSalesQuotes?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuote>());
                mock.Setup(m => m.ShippingContactsSalesReturns).Returns(() => RawSalesReturns?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturn>());
                mock.Setup(m => m.Stores).Returns(() => RawStores?.Where(x => x.Object.ContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Store>());
                mock.Setup(m => m.Vendors).Returns(() => RawVendors?.Where(x => x.Object.ContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Vendor>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ContactImage.</summary>
        /// <returns>The new ContactImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ContactImage>> CreateADummyContactImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ContactImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // ContactImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawContactImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ContactImage's Related Objects
                // ContactImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ContactImageType.</summary>
        /// <returns>The new ContactImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ContactImageType>> CreateADummyContactImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ContactImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ContactImageType Properties
                // Dynamic Linking
                // ContactImageType's Related Objects
                // ContactImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ContactType.</summary>
        /// <returns>The new ContactType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ContactType>> CreateADummyContactTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ContactType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ContactType Properties
                // Dynamic Linking
                // ContactType's Related Objects
                // ContactType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Permission.</summary>
        /// <returns>The new Permission.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Permission>> CreateADummyPermissionAsync(int id = 1, string name = null!)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Permission>();
                mock.SetupAllProperties();
                // Permission Properties
                mock.Object.Id = id;
                mock.Object.Name = name;
                // Dynamic Linking
                // Permission's Related Objects
                // Permission's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ProfanityFilter.</summary>
        /// <returns>The new ProfanityFilter.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProfanityFilter>> CreateADummyProfanityFilterAsync(int id, string? key, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProfanityFilter>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ProfanityFilter Properties
                // Dynamic Linking
                // ProfanityFilter's Related Objects
                // ProfanityFilter's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ReferralCode.</summary>
        /// <returns>The new ReferralCode.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ReferralCode>> CreateADummyReferralCodeAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, string code = null!, int userID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ReferralCode>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // ReferralCode Properties
                mock.Object.Code = code;
                mock.Object.UserID = userID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawReferralCodeTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawReferralCodeStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // ReferralCode's Related Objects
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // ReferralCode's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ReferralCodeStatus.</summary>
        /// <returns>The new ReferralCodeStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ReferralCodeStatus>> CreateADummyReferralCodeStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ReferralCodeStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ReferralCodeStatus Properties
                // Dynamic Linking
                // ReferralCodeStatus's Related Objects
                // ReferralCodeStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ReferralCodeType.</summary>
        /// <returns>The new ReferralCodeType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ReferralCodeType>> CreateADummyReferralCodeTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ReferralCodeType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ReferralCodeType Properties
                // Dynamic Linking
                // ReferralCodeType's Related Objects
                // ReferralCodeType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy RolePermission.</summary>
        /// <returns>The new RolePermission.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RolePermission>> CreateADummyRolePermissionAsync(int permissionId = 1, int roleId = 1)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RolePermission>();
                mock.SetupAllProperties();
                // RolePermission Properties
                mock.Object.PermissionId = permissionId;
                mock.Object.RoleId = roleId;
                // Dynamic Linking
                // RolePermission's Related Objects
                mock.Setup(m => m.Permission).Returns(() => RawPermissions?.FirstOrDefault(x => x.Object.Id == mock.Object.PermissionId)?.Object);
                mock.Setup(m => m.Role).Returns(() => RawUserRoles?.FirstOrDefault(x => x.Object.Id == mock.Object.RoleId)?.Object);
                // RolePermission's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy RoleUser.</summary>
        /// <returns>The new RoleUser.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RoleUser>> CreateADummyRoleUserAsync(int id, string? key, string? jsonAttributes = null, DateTime? endDate = null!, int? groupID = null!, int roleId = 1, DateTime? startDate = null!, int userId = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RoleUser>();
                mock.SetupAllProperties();
                // RoleUser Properties
                mock.Object.EndDate = endDate;
                mock.Object.GroupID = groupID;
                mock.Object.RoleId = roleId;
                mock.Object.StartDate = startDate;
                mock.Object.UserId = userId;
                // Dynamic Linking
                // RoleUser's Related Objects
                mock.Setup(m => m.Group).Returns(() => RawGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.GroupID)?.Object);
                mock.Setup(m => m.Role).Returns(() => RawUserRoles?.FirstOrDefault(x => x.Object.Id == mock.Object.RoleId)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserId)?.Object);
                // RoleUser's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy User.</summary>
        /// <returns>The new User.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<User>> CreateADummyUserAsync(int id, string? key, int contactID = 1, int typeID = 1, int statusID = 1, string? jsonAttributes = null, int accessFailedCount = 1, int? accountID = null!, int? currencyID = null!, DateTime? dateOfBirth = null!, string displayName = null!, string email = null!, bool emailConfirmed = false, string gender = null!, bool isApproved = false, bool isSMSAllowed = false, int? languageID = null!, bool lockoutEnabled = false, DateTime? lockoutEndDateUtc = null!, string passwordHash = null!, string phoneNumber = null!, bool phoneNumberConfirmed = false, int? preferredStoreID = null!, bool requirePasswordChangeOnNextLogin = false, string securityStamp = null!, bool twoFactorEnabled = false, bool useAutoPay = false, string userName = null!, int? userOnlineStatusID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<User>();
                mock.SetupAllProperties();
                mock.Setup(m => m.Roles).Returns(() => RawRoleUsers?.Where(x => x.Object.UserId == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RoleUser>());
                mock.Setup(m => m.Id).CallBase();//.Returns(() => mock.Object.ID);
                mock.Object.Id = id;
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IHaveAContactBase Properties
                mock.Object.ContactID = contactID;
                // User Properties
                mock.Object.AccessFailedCount = accessFailedCount;
                mock.Object.AccountID = accountID;
                mock.Object.CurrencyID = currencyID;
                mock.Object.DateOfBirth = dateOfBirth;
                mock.Object.DisplayName = displayName;
                mock.Object.Email = email;
                mock.Object.EmailConfirmed = emailConfirmed;
                mock.Object.Gender = gender;
                mock.Object.IsApproved = isApproved;
                mock.Object.IsSMSAllowed = isSMSAllowed;
                mock.Object.LanguageID = languageID;
                mock.Object.LockoutEnabled = lockoutEnabled;
                mock.Object.LockoutEndDateUtc = lockoutEndDateUtc;
                mock.Object.PasswordHash = passwordHash;
                mock.Object.PhoneNumber = phoneNumber;
                mock.Object.PhoneNumberConfirmed = phoneNumberConfirmed;
                mock.Object.PreferredStoreID = preferredStoreID;
                mock.Object.RequirePasswordChangeOnNextLogin = requirePasswordChangeOnNextLogin;
                mock.Object.SecurityStamp = securityStamp;
                mock.Object.TwoFactorEnabled = twoFactorEnabled;
                mock.Object.UseAutoPay = useAutoPay;
                mock.Object.UserName = userName;
                mock.Object.UserOnlineStatusID = userOnlineStatusID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawUserTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawUserStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveAContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawUserImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawUserFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // User's Related Objects
                mock.Setup(m => m.Account).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.Language).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.LanguageID)?.Object);
                mock.Setup(m => m.PreferredStore).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.PreferredStoreID)?.Object);
                mock.Setup(m => m.UserOnlineStatus).Returns(() => RawUserOnlineStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.UserOnlineStatusID)?.Object);
                // User's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => RawBrandUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandUser>());
                mock.Setup(m => m.ConversationUsers).Returns(() => RawConversationUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ConversationUser>());
                mock.Setup(m => m.DiscountCodes).Returns(() => RawDiscountCodes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCode>());
                mock.Setup(m => m.FavoriteCategories).Returns(() => RawFavoriteCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteCategory>());
                mock.Setup(m => m.FavoriteManufacturers).Returns(() => RawFavoriteManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteManufacturer>());
                mock.Setup(m => m.FavoriteStores).Returns(() => RawFavoriteStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteStore>());
                mock.Setup(m => m.FavoriteVendors).Returns(() => RawFavoriteVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteVendor>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseUser>());
                mock.Setup(m => m.MessageAttachmentsCreated).Returns(() => RawMessageAttachments?.Where(x => x.Object.CreatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageAttachment>());
                mock.Setup(m => m.MessageAttachmentsUpdated).Returns(() => RawMessageAttachments?.Where(x => x.Object.UpdatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageAttachment>());
                mock.Setup(m => m.NotesCreated).Returns(() => RawNotes?.Where(x => x.Object.CreatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.NotesUpdated).Returns(() => RawNotes?.Where(x => x.Object.UpdatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.ReceivedMessages).Returns(() => RawMessageRecipients?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageRecipient>());
                mock.Setup(m => m.ReferralCodes).Returns(() => RawReferralCodes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ReferralCode>());
                mock.Setup(m => m.Reviews).Returns(() => RawReviews?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.ReviewsApproved).Returns(() => RawReviews?.Where(x => x.Object.ApprovedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.ReviewsSubmitted).Returns(() => RawReviews?.Where(x => x.Object.SubmittedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.SalesInvoices).Returns(() => RawSalesInvoices?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoice>());
                mock.Setup(m => m.SalesOrders).Returns(() => RawSalesOrders?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrder>());
                mock.Setup(m => m.SalesQuotes).Returns(() => RawSalesQuotes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuote>());
                mock.Setup(m => m.SentMessages).Returns(() => RawMessages?.Where(x => x.Object.SentByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Message>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreUser>());
                mock.Setup(m => m.Subscriptions).Returns(() => RawSubscriptions?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Subscription>());
                mock.Setup(m => m.UserEventAttendances).Returns(() => RawUserEventAttendances?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserEventAttendance>());
                mock.Setup(m => m.UserProductTypes).Returns(() => RawUserProductTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserProductType>());
                mock.Setup(m => m.Wallets).Returns(() => RawWallets?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Wallet>());
                return mock;
            });
        }

        /// <summary>Creates a dummy UserClaim.</summary>
        /// <returns>The new UserClaim.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserClaim>> CreateADummyUserClaimAsync(string claimType = null!, string claimValue = null!, int id = 1, int userId = 1)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserClaim>();
                mock.SetupAllProperties();
                // UserClaim Properties
                mock.Object.ClaimType = claimType;
                mock.Object.ClaimValue = claimValue;
                mock.Object.Id = id;
                mock.Object.UserId = userId;
                // Dynamic Linking
                // UserClaim's Related Objects
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserId)?.Object);
                // UserClaim's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserFile.</summary>
        /// <returns>The new UserFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserFile>> CreateADummyUserFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // UserFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // UserFile's Related Objects
                // UserFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserImage.</summary>
        /// <returns>The new UserImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserImage>> CreateADummyUserImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // UserImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawUserImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // UserImage's Related Objects
                // UserImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserImageType.</summary>
        /// <returns>The new UserImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserImageType>> CreateADummyUserImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // UserImageType Properties
                // Dynamic Linking
                // UserImageType's Related Objects
                // UserImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserLogin.</summary>
        /// <returns>The new UserLogin.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserLogin>> CreateADummyUserLoginAsync(string loginProvider = null!, string providerKey = null!, int userId = 1)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserLogin>();
                mock.SetupAllProperties();
                // UserLogin Properties
                mock.Object.LoginProvider = loginProvider;
                mock.Object.ProviderKey = providerKey;
                mock.Object.UserId = userId;
                // Dynamic Linking
                // UserLogin's Related Objects
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserId)?.Object);
                // UserLogin's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserOnlineStatus.</summary>
        /// <returns>The new UserOnlineStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserOnlineStatus>> CreateADummyUserOnlineStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserOnlineStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // UserOnlineStatus Properties
                // Dynamic Linking
                // UserOnlineStatus's Related Objects
                // UserOnlineStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserProductType.</summary>
        /// <returns>The new UserProductType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserProductType>> CreateADummyUserProductTypeAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserProductType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // UserProductType Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // UserProductType's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // UserProductType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserRole.</summary>
        /// <returns>The new UserRole.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserRole>> CreateADummyUserRoleAsync(int id = 1, string name = null!)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserRole>();
                mock.SetupAllProperties();
                // UserRole Properties
                mock.Object.Id = id;
                mock.Object.Name = name;
                // Dynamic Linking
                // UserRole's Related Objects
                // UserRole's Associated Objects
                mock.Setup(m => m.Permissions).Returns(() => RawRolePermissions?.Where(x => x.Object.PermissionId == mock.Object.Id).Select(x => x.Object).ToList() ?? new List<RolePermission>());
                mock.Setup(m => m.Users).Returns(() => RawRoleUsers?.Where(x => x.Object.UserId == mock.Object.Id).Select(x => x.Object).ToList() ?? new List<RoleUser>());
                return mock;
            });
        }

        /// <summary>Creates a dummy UserStatus.</summary>
        /// <returns>The new UserStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserStatus>> CreateADummyUserStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // UserStatus Properties
                // Dynamic Linking
                // UserStatus's Related Objects
                // UserStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserType.</summary>
        /// <returns>The new UserType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserType>> CreateADummyUserTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // UserType Properties
                // Dynamic Linking
                // UserType's Related Objects
                // UserType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForContacts(MockingSetup mockingSetup)
        {
            Func<Contact> mockFuncContact = () =>
            {
                var mock = new Mock<Contact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Contact Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawContactTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawContactImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ContactImage>());
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                // Contact's Associated Objects
                mock.Setup(m => m.BillingContactsPurchaseOrders).Returns(() => mockingSetup.RawPurchaseOrders?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.BillingContactsSalesInvoices).Returns(() => mockingSetup.RawSalesInvoices?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoice>());
                mock.Setup(m => m.BillingContactsSalesOrders).Returns(() => mockingSetup.RawSalesOrders?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrder>());
                mock.Setup(m => m.BillingContactsSalesQuotes).Returns(() => mockingSetup.RawSalesQuotes?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuote>());
                mock.Setup(m => m.BillingContactsSalesReturns).Returns(() => mockingSetup.RawSalesReturns?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturn>());
                mock.Setup(m => m.DestinationContactsShipments).Returns(() => mockingSetup.RawShipments?.Where(x => x.Object.DestinationContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                mock.Setup(m => m.OriginContactsShipments).Returns(() => mockingSetup.RawShipments?.Where(x => x.Object.OriginContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                mock.Setup(m => m.Payments).Returns(() => mockingSetup.RawPayments?.Where(x => x.Object.BillingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Payment>());
                mock.Setup(m => m.ShippingContactsPurchaseOrders).Returns(() => mockingSetup.RawPurchaseOrders?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.ShippingContactsSalesInvoices).Returns(() => mockingSetup.RawSalesInvoices?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoice>());
                mock.Setup(m => m.ShippingContactsSalesOrders).Returns(() => mockingSetup.RawSalesOrders?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrder>());
                mock.Setup(m => m.ShippingContactsSalesQuotes).Returns(() => mockingSetup.RawSalesQuotes?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuote>());
                mock.Setup(m => m.ShippingContactsSalesReturns).Returns(() => mockingSetup.RawSalesReturns?.Where(x => x.Object.ShippingContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturn>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStores?.Where(x => x.Object.ContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Store>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawVendors?.Where(x => x.Object.ContactID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Vendor>());
                // Contact's Related Objects
                return mock.Object;
            };
            For<IContact>().Use(() => mockFuncContact());
            For<Contact>().Use(() => mockFuncContact());
            Func<ContactImage> mockFuncContactImage = () =>
            {
                var mock = new Mock<ContactImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ContactImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawContactImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ContactImage's Associated Objects
                // ContactImage's Related Objects
                return mock.Object;
            };
            For<IContactImage>().Use(() => mockFuncContactImage());
            For<ContactImage>().Use(() => mockFuncContactImage());
            Func<ContactImageType> mockFuncContactImageType = () =>
            {
                var mock = new Mock<ContactImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ContactImageType Properties
                // Dynamic Linking
                // ContactImageType's Associated Objects
                // ContactImageType's Related Objects
                return mock.Object;
            };
            For<IContactImageType>().Use(() => mockFuncContactImageType());
            For<ContactImageType>().Use(() => mockFuncContactImageType());
            Func<ContactType> mockFuncContactType = () =>
            {
                var mock = new Mock<ContactType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ContactType Properties
                // Dynamic Linking
                // ContactType's Associated Objects
                // ContactType's Related Objects
                return mock.Object;
            };
            For<IContactType>().Use(() => mockFuncContactType());
            For<ContactType>().Use(() => mockFuncContactType());
            Func<Permission> mockFuncPermission = () =>
            {
                var mock = new Mock<Permission>();
                mock.SetupAllProperties();
                // Permission Properties
                // Dynamic Linking
                // Permission's Associated Objects
                // Permission's Related Objects
                return mock.Object;
            };
            For<IPermission>().Use(() => mockFuncPermission());
            For<Permission>().Use(() => mockFuncPermission());
            Func<ProfanityFilter> mockFuncProfanityFilter = () =>
            {
                var mock = new Mock<ProfanityFilter>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProfanityFilter Properties
                // Dynamic Linking
                // ProfanityFilter's Associated Objects
                // ProfanityFilter's Related Objects
                return mock.Object;
            };
            For<IProfanityFilter>().Use(() => mockFuncProfanityFilter());
            For<ProfanityFilter>().Use(() => mockFuncProfanityFilter());
            Func<ReferralCode> mockFuncReferralCode = () =>
            {
                var mock = new Mock<ReferralCode>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ReferralCode Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawReferralCodeTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawReferralCodeStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // ReferralCode's Associated Objects
                // ReferralCode's Related Objects
                return mock.Object;
            };
            For<IReferralCode>().Use(() => mockFuncReferralCode());
            For<ReferralCode>().Use(() => mockFuncReferralCode());
            Func<ReferralCodeStatus> mockFuncReferralCodeStatus = () =>
            {
                var mock = new Mock<ReferralCodeStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ReferralCodeStatus Properties
                // Dynamic Linking
                // ReferralCodeStatus's Associated Objects
                // ReferralCodeStatus's Related Objects
                return mock.Object;
            };
            For<IReferralCodeStatus>().Use(() => mockFuncReferralCodeStatus());
            For<ReferralCodeStatus>().Use(() => mockFuncReferralCodeStatus());
            Func<ReferralCodeType> mockFuncReferralCodeType = () =>
            {
                var mock = new Mock<ReferralCodeType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ReferralCodeType Properties
                // Dynamic Linking
                // ReferralCodeType's Associated Objects
                // ReferralCodeType's Related Objects
                return mock.Object;
            };
            For<IReferralCodeType>().Use(() => mockFuncReferralCodeType());
            For<ReferralCodeType>().Use(() => mockFuncReferralCodeType());
            Func<RolePermission> mockFuncRolePermission = () =>
            {
                var mock = new Mock<RolePermission>();
                mock.SetupAllProperties();
                // RolePermission Properties
                // Dynamic Linking
                mock.Setup(m => m.Permission).Returns(() => mockingSetup.RawPermissions?.FirstOrDefault(x => x.Object.Id == mock.Object.PermissionId)?.Object);
                mock.Setup(m => m.Role).Returns(() => mockingSetup.RawUserRoles?.FirstOrDefault(x => x.Object.Id == mock.Object.RoleId)?.Object);
                // RolePermission's Associated Objects
                // RolePermission's Related Objects
                return mock.Object;
            };
            For<IRolePermission>().Use(() => mockFuncRolePermission());
            For<RolePermission>().Use(() => mockFuncRolePermission());
            Func<RoleUser> mockFuncRoleUser = () =>
            {
                var mock = new Mock<RoleUser>();
                mock.SetupAllProperties();
                // RoleUser Properties
                // Dynamic Linking
                mock.Setup(m => m.Group).Returns(() => mockingSetup.RawGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.GroupID)?.Object);
                mock.Setup(m => m.Role).Returns(() => mockingSetup.RawUserRoles?.FirstOrDefault(x => x.Object.Id == mock.Object.RoleId)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserId)?.Object);
                // RoleUser's Associated Objects
                // RoleUser's Related Objects
                return mock.Object;
            };
            For<IRoleUser>().Use(() => mockFuncRoleUser());
            For<RoleUser>().Use(() => mockFuncRoleUser());
            Func<User> mockFuncUser = () =>
            {
                var mock = new Mock<User>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                mock.Setup(m => m.Roles).Returns(() => mockingSetup.RawRoleUsers?.Where(x => x.Object.UserId == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RoleUser>());
                mock.Setup(m => m.Id).CallBase();//.Returns(() => mock.Object.ID);
                // User Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawUserTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawUserStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveAContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawUserImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawUserFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.Language).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.LanguageID)?.Object);
                mock.Setup(m => m.PreferredStore).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.PreferredStoreID)?.Object);
                mock.Setup(m => m.UserOnlineStatus).Returns(() => mockingSetup.RawUserOnlineStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.UserOnlineStatusID)?.Object);
                // User's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandUser>());
                mock.Setup(m => m.ConversationUsers).Returns(() => mockingSetup.RawConversationUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ConversationUser>());
                mock.Setup(m => m.DiscountCodes).Returns(() => mockingSetup.RawDiscountCodes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCode>());
                mock.Setup(m => m.FavoriteCategories).Returns(() => mockingSetup.RawFavoriteCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteCategory>());
                mock.Setup(m => m.FavoriteManufacturers).Returns(() => mockingSetup.RawFavoriteManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteManufacturer>());
                mock.Setup(m => m.FavoriteStores).Returns(() => mockingSetup.RawFavoriteStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteStore>());
                mock.Setup(m => m.FavoriteVendors).Returns(() => mockingSetup.RawFavoriteVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FavoriteVendor>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseUser>());
                mock.Setup(m => m.MessageAttachmentsCreated).Returns(() => mockingSetup.RawMessageAttachments?.Where(x => x.Object.CreatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageAttachment>());
                mock.Setup(m => m.MessageAttachmentsUpdated).Returns(() => mockingSetup.RawMessageAttachments?.Where(x => x.Object.UpdatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageAttachment>());
                mock.Setup(m => m.NotesCreated).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.CreatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.NotesUpdated).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.UpdatedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.ReceivedMessages).Returns(() => mockingSetup.RawMessageRecipients?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageRecipient>());
                mock.Setup(m => m.ReferralCodes).Returns(() => mockingSetup.RawReferralCodes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ReferralCode>());
                mock.Setup(m => m.Reviews).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.ReviewsApproved).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.ApprovedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.ReviewsSubmitted).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.SubmittedByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.SalesInvoices).Returns(() => mockingSetup.RawSalesInvoices?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoice>());
                mock.Setup(m => m.SalesOrders).Returns(() => mockingSetup.RawSalesOrders?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrder>());
                mock.Setup(m => m.SalesQuotes).Returns(() => mockingSetup.RawSalesQuotes?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuote>());
                mock.Setup(m => m.SentMessages).Returns(() => mockingSetup.RawMessages?.Where(x => x.Object.SentByUserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Message>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreUsers?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreUser>());
                mock.Setup(m => m.Subscriptions).Returns(() => mockingSetup.RawSubscriptions?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Subscription>());
                mock.Setup(m => m.UserEventAttendances).Returns(() => mockingSetup.RawUserEventAttendances?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserEventAttendance>());
                mock.Setup(m => m.UserProductTypes).Returns(() => mockingSetup.RawUserProductTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserProductType>());
                mock.Setup(m => m.Wallets).Returns(() => mockingSetup.RawWallets?.Where(x => x.Object.UserID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Wallet>());
                // User's Related Objects
                return mock.Object;
            };
            For<IUser>().Use(() => mockFuncUser());
            For<User>().Use(() => mockFuncUser());
            Func<UserClaim> mockFuncUserClaim = () =>
            {
                var mock = new Mock<UserClaim>();
                mock.SetupAllProperties();
                // UserClaim Properties
                // Dynamic Linking
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserId)?.Object);
                // UserClaim's Associated Objects
                // UserClaim's Related Objects
                return mock.Object;
            };
            For<IUserClaim>().Use(() => mockFuncUserClaim());
            For<UserClaim>().Use(() => mockFuncUserClaim());
            Func<UserFile> mockFuncUserFile = () =>
            {
                var mock = new Mock<UserFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // UserFile's Associated Objects
                // UserFile's Related Objects
                return mock.Object;
            };
            For<IUserFile>().Use(() => mockFuncUserFile());
            For<UserFile>().Use(() => mockFuncUserFile());
            Func<UserImage> mockFuncUserImage = () =>
            {
                var mock = new Mock<UserImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawUserImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // UserImage's Associated Objects
                // UserImage's Related Objects
                return mock.Object;
            };
            For<IUserImage>().Use(() => mockFuncUserImage());
            For<UserImage>().Use(() => mockFuncUserImage());
            Func<UserImageType> mockFuncUserImageType = () =>
            {
                var mock = new Mock<UserImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserImageType Properties
                // Dynamic Linking
                // UserImageType's Associated Objects
                // UserImageType's Related Objects
                return mock.Object;
            };
            For<IUserImageType>().Use(() => mockFuncUserImageType());
            For<UserImageType>().Use(() => mockFuncUserImageType());
            Func<UserLogin> mockFuncUserLogin = () =>
            {
                var mock = new Mock<UserLogin>();
                mock.SetupAllProperties();
                // UserLogin Properties
                // Dynamic Linking
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserId)?.Object);
                // UserLogin's Associated Objects
                // UserLogin's Related Objects
                return mock.Object;
            };
            For<IUserLogin>().Use(() => mockFuncUserLogin());
            For<UserLogin>().Use(() => mockFuncUserLogin());
            Func<UserOnlineStatus> mockFuncUserOnlineStatus = () =>
            {
                var mock = new Mock<UserOnlineStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserOnlineStatus Properties
                // Dynamic Linking
                // UserOnlineStatus's Associated Objects
                // UserOnlineStatus's Related Objects
                return mock.Object;
            };
            For<IUserOnlineStatus>().Use(() => mockFuncUserOnlineStatus());
            For<UserOnlineStatus>().Use(() => mockFuncUserOnlineStatus());
            Func<UserProductType> mockFuncUserProductType = () =>
            {
                var mock = new Mock<UserProductType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserProductType Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // UserProductType's Associated Objects
                // UserProductType's Related Objects
                return mock.Object;
            };
            For<IUserProductType>().Use(() => mockFuncUserProductType());
            For<UserProductType>().Use(() => mockFuncUserProductType());
            Func<UserRole> mockFuncUserRole = () =>
            {
                var mock = new Mock<UserRole>();
                mock.SetupAllProperties();
                // UserRole Properties
                // Dynamic Linking
                // UserRole's Associated Objects
                mock.Setup(m => m.Permissions).Returns(() => mockingSetup.RawRolePermissions?.Where(x => x.Object.PermissionId == mock.Object.Id).Select(x => x.Object).ToList() ?? new List<RolePermission>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawRoleUsers?.Where(x => x.Object.UserId == mock.Object.Id).Select(x => x.Object).ToList() ?? new List<RoleUser>());
                // UserRole's Related Objects
                return mock.Object;
            };
            For<IUserRole>().Use(() => mockFuncUserRole());
            For<UserRole>().Use(() => mockFuncUserRole());
            Func<UserStatus> mockFuncUserStatus = () =>
            {
                var mock = new Mock<UserStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserStatus Properties
                // Dynamic Linking
                // UserStatus's Associated Objects
                // UserStatus's Related Objects
                return mock.Object;
            };
            For<IUserStatus>().Use(() => mockFuncUserStatus());
            For<UserStatus>().Use(() => mockFuncUserStatus());
            Func<UserType> mockFuncUserType = () =>
            {
                var mock = new Mock<UserType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserType Properties
                // Dynamic Linking
                // UserType's Associated Objects
                // UserType's Related Objects
                return mock.Object;
            };
            For<IUserType>().Use(() => mockFuncUserType());
            For<UserType>().Use(() => mockFuncUserType());
        }
    }
}
