// <autogenerated>
// <copyright file="Categories.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Categories section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoCategories { private get; set; }

        // Enable the tables specifically on run
        public bool DoCategoryTable { private get; set; }
        public bool DoCategoryFileTable { private get; set; }
        public bool DoCategoryImageTable { private get; set; }
        public bool DoCategoryImageTypeTable { private get; set; }
        public bool DoCategoryTypeTable { private get; set; }

        // Dirty Checking
        public bool CategoryDirty { private get; set; }
        public bool CategoryFileDirty { private get; set; }
        public bool CategoryImageDirty { private get; set; }
        public bool CategoryImageTypeDirty { private get; set; }
        public bool CategoryTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Category>>? Categories { get; private set; }
        public Mock<DbSet<CategoryFile>>? CategoryFiles { get; private set; }
        public Mock<DbSet<CategoryImage>>? CategoryImages { get; private set; }
        public Mock<DbSet<CategoryImageType>>? CategoryImageTypes { get; private set; }
        public Mock<DbSet<CategoryType>>? CategoryTypes { get; private set; }

        // Raw Data
        public List<Mock<Category>>? RawCategories { get; private set; }
        public List<Mock<CategoryFile>>? RawCategoryFiles { get; private set; }
        public List<Mock<CategoryImage>>? RawCategoryImages { get; private set; }
        public List<Mock<CategoryImageType>>? RawCategoryImageTypes { get; private set; }
        public List<Mock<CategoryType>>? RawCategoryTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksCategoriesAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoCategories || (DoCategoryTable && (!dirtyOnly || CategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCategories == null) { throw new InvalidOperationException("Raw Categories was null"); }
                    await InitializeMockSetFromListAsync(Categories, RawCategories).ConfigureAwait(false);
                    context.Setup(m => m.Categories).Returns(() => Categories?.Object!);
                    context.Setup(m => m.Set<Category>()).Returns(() => Categories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCategories || (DoCategoryFileTable && (!dirtyOnly || CategoryFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCategoryFiles == null) { throw new InvalidOperationException("Raw CategoryFiles was null"); }
                    await InitializeMockSetFromListAsync(CategoryFiles, RawCategoryFiles).ConfigureAwait(false);
                    context.Setup(m => m.CategoryFiles).Returns(() => CategoryFiles?.Object!);
                    context.Setup(m => m.Set<CategoryFile>()).Returns(() => CategoryFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCategories || (DoCategoryImageTable && (!dirtyOnly || CategoryImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCategoryImages == null) { throw new InvalidOperationException("Raw CategoryImages was null"); }
                    await InitializeMockSetFromListAsync(CategoryImages, RawCategoryImages).ConfigureAwait(false);
                    context.Setup(m => m.CategoryImages).Returns(() => CategoryImages?.Object!);
                    context.Setup(m => m.Set<CategoryImage>()).Returns(() => CategoryImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCategories || (DoCategoryImageTypeTable && (!dirtyOnly || CategoryImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCategoryImageTypes == null) { throw new InvalidOperationException("Raw CategoryImageTypes was null"); }
                    await InitializeMockSetFromListAsync(CategoryImageTypes, RawCategoryImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.CategoryImageTypes).Returns(() => CategoryImageTypes?.Object!);
                    context.Setup(m => m.Set<CategoryImageType>()).Returns(() => CategoryImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCategories || (DoCategoryTypeTable && (!dirtyOnly || CategoryTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCategoryTypes == null) { throw new InvalidOperationException("Raw CategoryTypes was null"); }
                    await InitializeMockSetFromListAsync(CategoryTypes, RawCategoryTypes).ConfigureAwait(false);
                    context.Setup(m => m.CategoryTypes).Returns(() => CategoryTypes?.Object!);
                    context.Setup(m => m.Set<CategoryType>()).Returns(() => CategoryTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Category>> data)
        {
            if (!DoAll && !DoCategories && !DoCategoryTable) { return; }
            Categories ??= new Mock<DbSet<Category>>();
            await InitializeMockSetFromListAsync(Categories, data).ConfigureAwait(false);
            context.Setup(m => m.Categories).Returns(() => Categories.Object);
            context.Setup(m => m.Set<Category>()).Returns(() => Categories.Object);
            TableRecordCounts[typeof(Category)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Category)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Category)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Category)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCategoryFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CategoryFile>> data)
        {
            if (!DoAll && !DoCategories && !DoCategoryFileTable) { return; }
            CategoryFiles ??= new Mock<DbSet<CategoryFile>>();
            await InitializeMockSetFromListAsync(CategoryFiles, data).ConfigureAwait(false);
            context.Setup(m => m.CategoryFiles).Returns(() => CategoryFiles.Object);
            context.Setup(m => m.Set<CategoryFile>()).Returns(() => CategoryFiles.Object);
            TableRecordCounts[typeof(CategoryFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CategoryFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CategoryFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CategoryFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCategoryImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CategoryImage>> data)
        {
            if (!DoAll && !DoCategories && !DoCategoryImageTable) { return; }
            CategoryImages ??= new Mock<DbSet<CategoryImage>>();
            await InitializeMockSetFromListAsync(CategoryImages, data).ConfigureAwait(false);
            context.Setup(m => m.CategoryImages).Returns(() => CategoryImages.Object);
            context.Setup(m => m.Set<CategoryImage>()).Returns(() => CategoryImages.Object);
            TableRecordCounts[typeof(CategoryImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CategoryImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CategoryImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CategoryImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCategoryImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CategoryImageType>> data)
        {
            if (!DoAll && !DoCategories && !DoCategoryImageTypeTable) { return; }
            CategoryImageTypes ??= new Mock<DbSet<CategoryImageType>>();
            await InitializeMockSetFromListAsync(CategoryImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CategoryImageTypes).Returns(() => CategoryImageTypes.Object);
            context.Setup(m => m.Set<CategoryImageType>()).Returns(() => CategoryImageTypes.Object);
            TableRecordCounts[typeof(CategoryImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CategoryImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CategoryImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CategoryImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CategoryImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCategoryTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CategoryType>> data)
        {
            if (!DoAll && !DoCategories && !DoCategoryTypeTable) { return; }
            CategoryTypes ??= new Mock<DbSet<CategoryType>>();
            await InitializeMockSetFromListAsync(CategoryTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CategoryTypes).Returns(() => CategoryTypes.Object);
            context.Setup(m => m.Set<CategoryType>()).Returns(() => CategoryTypes.Object);
            TableRecordCounts[typeof(CategoryType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CategoryType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CategoryType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CategoryType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CategoryType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Category.</summary>
        /// <returns>The new Category.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Category>> CreateADummyCategoryAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, int? parentID = null, int typeID = 1, string? jsonAttributes = null, string displayName = null!, string footerContent = null!, decimal? handlingCharge = null!, string headerContent = null!, bool includeInMenu = false, bool isVisible = false, decimal? minimumForFreeShippingDollarAmount = null!, decimal? minimumForFreeShippingDollarAmountAfter = null!, int? minimumForFreeShippingDollarAmountBufferCategoryID = null!, int? minimumForFreeShippingDollarAmountBufferProductID = null!, string minimumForFreeShippingDollarAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingDollarAmountWarningMessage = null!, decimal? minimumForFreeShippingQuantityAmount = null!, decimal? minimumForFreeShippingQuantityAmountAfter = null!, int? minimumForFreeShippingQuantityAmountBufferCategoryID = null!, int? minimumForFreeShippingQuantityAmountBufferProductID = null!, string minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingQuantityAmountWarningMessage = null!, decimal? minimumOrderDollarAmount = null!, decimal? minimumOrderDollarAmountAfter = null!, int? minimumOrderDollarAmountBufferCategoryID = null!, int? minimumOrderDollarAmountBufferProductID = null!, decimal? minimumOrderDollarAmountOverrideFee = null!, string minimumOrderDollarAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderDollarAmountOverrideFeeIsPercent = false, string minimumOrderDollarAmountOverrideFeeWarningMessage = null!, string minimumOrderDollarAmountWarningMessage = null!, decimal? minimumOrderQuantityAmount = null!, decimal? minimumOrderQuantityAmountAfter = null!, int? minimumOrderQuantityAmountBufferCategoryID = null!, int? minimumOrderQuantityAmountBufferProductID = null!, decimal? minimumOrderQuantityAmountOverrideFee = null!, string minimumOrderQuantityAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderQuantityAmountOverrideFeeIsPercent = false, string minimumOrderQuantityAmountOverrideFeeWarningMessage = null!, string minimumOrderQuantityAmountWarningMessage = null!, string requiresRoles = null!, string requiresRolesAlt = null!, decimal? restockingFeeAmount = null!, int? restockingFeeAmountCurrencyID = null!, decimal? restockingFeePercent = null!, string sidebarContent = null!, int? sortOrder = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Category>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAParentBase Properties
                mock.Object.ParentID = parentID;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // Category Properties
                mock.Object.DisplayName = displayName;
                mock.Object.FooterContent = footerContent;
                mock.Object.HandlingCharge = handlingCharge;
                mock.Object.HeaderContent = headerContent;
                mock.Object.IncludeInMenu = includeInMenu;
                mock.Object.IsVisible = isVisible;
                mock.Object.MinimumForFreeShippingDollarAmount = minimumForFreeShippingDollarAmount;
                mock.Object.MinimumForFreeShippingDollarAmountAfter = minimumForFreeShippingDollarAmountAfter;
                mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID = minimumForFreeShippingDollarAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingDollarAmountBufferProductID = minimumForFreeShippingDollarAmountBufferProductID;
                mock.Object.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = minimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingDollarAmountWarningMessage = minimumForFreeShippingDollarAmountWarningMessage;
                mock.Object.MinimumForFreeShippingQuantityAmount = minimumForFreeShippingQuantityAmount;
                mock.Object.MinimumForFreeShippingQuantityAmountAfter = minimumForFreeShippingQuantityAmountAfter;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID = minimumForFreeShippingQuantityAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID = minimumForFreeShippingQuantityAmountBufferProductID;
                mock.Object.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingQuantityAmountWarningMessage = minimumForFreeShippingQuantityAmountWarningMessage;
                mock.Object.MinimumOrderDollarAmount = minimumOrderDollarAmount;
                mock.Object.MinimumOrderDollarAmountAfter = minimumOrderDollarAmountAfter;
                mock.Object.MinimumOrderDollarAmountBufferCategoryID = minimumOrderDollarAmountBufferCategoryID;
                mock.Object.MinimumOrderDollarAmountBufferProductID = minimumOrderDollarAmountBufferProductID;
                mock.Object.MinimumOrderDollarAmountOverrideFee = minimumOrderDollarAmountOverrideFee;
                mock.Object.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = minimumOrderDollarAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderDollarAmountOverrideFeeIsPercent = minimumOrderDollarAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderDollarAmountOverrideFeeWarningMessage = minimumOrderDollarAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderDollarAmountWarningMessage = minimumOrderDollarAmountWarningMessage;
                mock.Object.MinimumOrderQuantityAmount = minimumOrderQuantityAmount;
                mock.Object.MinimumOrderQuantityAmountAfter = minimumOrderQuantityAmountAfter;
                mock.Object.MinimumOrderQuantityAmountBufferCategoryID = minimumOrderQuantityAmountBufferCategoryID;
                mock.Object.MinimumOrderQuantityAmountBufferProductID = minimumOrderQuantityAmountBufferProductID;
                mock.Object.MinimumOrderQuantityAmountOverrideFee = minimumOrderQuantityAmountOverrideFee;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = minimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeIsPercent = minimumOrderQuantityAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeWarningMessage = minimumOrderQuantityAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderQuantityAmountWarningMessage = minimumOrderQuantityAmountWarningMessage;
                mock.Object.RequiresRoles = requiresRoles;
                mock.Object.RequiresRolesAlt = requiresRolesAlt;
                mock.Object.RestockingFeeAmount = restockingFeeAmount;
                mock.Object.RestockingFeeAmountCurrencyID = restockingFeeAmountCurrencyID;
                mock.Object.RestockingFeePercent = restockingFeePercent;
                mock.Object.SidebarContent = sidebarContent;
                mock.Object.SortOrder = sortOrder;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawCategoryTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAParentBase Properties
                mock.Setup(m => m.Parent).Returns(() => RawCategories == null || mock.Object.ParentID == null ? null : RawCategories.FirstOrDefault(x => x.Object.ID == mock.Object.ParentID)?.Object);
                mock.Setup(m => m.Children).Returns(() => RawCategories?.Where(x => x.Object.ParentID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Category>());
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawCategoryImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CategoryImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawCategoryFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CategoryFile>());
                // Category's Related Objects
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.RestockingFeeAmountCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.RestockingFeeAmountCurrencyID)?.Object);
                // Category's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => RawBrandCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandCategory>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCategory>());
                mock.Setup(m => m.Products).Returns(() => RawProductCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductCategory>());
                mock.Setup(m => m.Reviews).Returns(() => RawReviews?.Where(x => x.Object.CategoryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreCategory>());
                return mock;
            });
        }

        /// <summary>Creates a dummy CategoryFile.</summary>
        /// <returns>The new CategoryFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CategoryFile>> CreateADummyCategoryFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CategoryFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // CategoryFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CategoryFile's Related Objects
                // CategoryFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CategoryImage.</summary>
        /// <returns>The new CategoryImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CategoryImage>> CreateADummyCategoryImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CategoryImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // CategoryImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawCategoryImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CategoryImage's Related Objects
                // CategoryImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CategoryImageType.</summary>
        /// <returns>The new CategoryImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CategoryImageType>> CreateADummyCategoryImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CategoryImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CategoryImageType Properties
                // Dynamic Linking
                // CategoryImageType's Related Objects
                // CategoryImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CategoryType.</summary>
        /// <returns>The new CategoryType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CategoryType>> CreateADummyCategoryTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CategoryType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CategoryType Properties
                // Dynamic Linking
                // CategoryType's Related Objects
                // CategoryType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForCategories(MockingSetup mockingSetup)
        {
            Func<Category> mockFuncCategory = () =>
            {
                var mock = new Mock<Category>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Category Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCategoryTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAParentBase Properties
                mock.Setup(m => m.Parent).Returns(() => mockingSetup.RawCategories == null || mock.Object.ParentID == null ? null : mockingSetup.RawCategories.FirstOrDefault(x => x.Object.ID == mock.Object.ParentID)?.Object);
                mock.Setup(m => m.Children).Returns(() => mockingSetup.RawCategories?.Where(x => x.Object.ParentID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Category>());
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawCategoryImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CategoryImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawCategoryFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CategoryFile>());
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.RestockingFeeAmountCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.RestockingFeeAmountCurrencyID)?.Object);
                // Category's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandCategory>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCategory>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawProductCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductCategory>());
                mock.Setup(m => m.Reviews).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.CategoryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreCategories?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreCategory>());
                // Category's Related Objects
                return mock.Object;
            };
            For<ICategory>().Use(() => mockFuncCategory());
            For<Category>().Use(() => mockFuncCategory());
            Func<CategoryFile> mockFuncCategoryFile = () =>
            {
                var mock = new Mock<CategoryFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CategoryFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CategoryFile's Associated Objects
                // CategoryFile's Related Objects
                return mock.Object;
            };
            For<ICategoryFile>().Use(() => mockFuncCategoryFile());
            For<CategoryFile>().Use(() => mockFuncCategoryFile());
            Func<CategoryImage> mockFuncCategoryImage = () =>
            {
                var mock = new Mock<CategoryImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CategoryImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCategoryImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CategoryImage's Associated Objects
                // CategoryImage's Related Objects
                return mock.Object;
            };
            For<ICategoryImage>().Use(() => mockFuncCategoryImage());
            For<CategoryImage>().Use(() => mockFuncCategoryImage());
            Func<CategoryImageType> mockFuncCategoryImageType = () =>
            {
                var mock = new Mock<CategoryImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CategoryImageType Properties
                // Dynamic Linking
                // CategoryImageType's Associated Objects
                // CategoryImageType's Related Objects
                return mock.Object;
            };
            For<ICategoryImageType>().Use(() => mockFuncCategoryImageType());
            For<CategoryImageType>().Use(() => mockFuncCategoryImageType());
            Func<CategoryType> mockFuncCategoryType = () =>
            {
                var mock = new Mock<CategoryType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CategoryType Properties
                // Dynamic Linking
                // CategoryType's Associated Objects
                // CategoryType's Related Objects
                return mock.Object;
            };
            For<ICategoryType>().Use(() => mockFuncCategoryType());
            For<CategoryType>().Use(() => mockFuncCategoryType());
        }
    }
}
