<#@ template debug="true" hostspecific="True" language="C#"
#><#@ output extension=".cs"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#@ import namespace="CodeGenerator"
#><#@ include file="$(SolutionDir)11.T4\11.T4.CodeGenerator\MultiOutput.old.ttinclude"
#><#@ include file="MockingSetup.ttinclude"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var dirtySkips = new List<string>()
{
    "RoleUser", "UserSupportRequest", "HangfireAggregatedCounter", "HangfireCounter", "HangfireHash", "HangfireJob",
    "HangfireJobParameter", "HangfireJobQueue", "HangfireList", "HangfireSchema", "HangfireServer", "HangfireSet",
    "HangfireState",
};
var reloaders = new List<string>();
foreach (var group in tableClasses)
{
    GenerateMockingSetupFile(group, group.Key);
    reloaders.Add(group.Key);
    SaveOutput("MockingSetup." + group.Key, "cs", true);
}
#>// <autogenerated>
// <copyright file="MockingSetupMaster.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Master section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
namespace Clarity.Ecommerce.Testing
{
    using System.Threading.Tasks;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // ReSharper disable once CyclomaticComplexity, FunctionComplexityOverflow
        private Task DoAssignMocksAsync(Mock<IClarityEcommerceEntities> mockContext, bool dirtyOnly = false)
        {
            return Task.WhenAll(
<#      foreach (var schema in reloaders) { #>
                AssignSchemaMocks<#= schema #>Async(mockContext, dirtyOnly),
<#      } #>
                AssignSchemaMocksAccountsExtrasAsync(mockContext, dirtyOnly),
                AssignSchemaMocksContactsExtrasAsync(mockContext, dirtyOnly),
                Task.FromResult(0));
        }

        // ReSharper disable once CyclomaticComplexity, FunctionComplexityOverflow
        private async Task<Mock<IClarityEcommerceEntities>> DoMockingSetupForContextRunnerAsync(
            Mock<IClarityEcommerceEntities> mockContext)
        {
            await Task.WhenAll(
<#      foreach (var schema in reloaders) { #>
                    DoMockingSetupForContextRunner<#= schema #>Async(mockContext),
<#      } #>
                    Task.FromResult(0))
                .ConfigureAwait(false);
            // Return
            return mockContext;
        }

        private void MarkDirty<TEntity>()
        {
            var type = typeof(TEntity);
            var name = type.Name;
            switch (name)
            {
<#      foreach (var group in tableClasses) { #>
                #region <#= group.Key #>
<#          foreach (var table in group)
            {
                var td = new TypeDeterminer(table);
                if (td.IsExcludedFromT4 || dirtySkips.Contains(table.Name)) { continue; }
                var addedPropertyTypes = new List<string>();
                var requiredRelatedIDProperties = new List<string>();
                var optionalRelatedIDProperties = new List<string>();
                addedPropertyTypes.Add(table.Name);
                foreach (PropertyInfo property in table.GetProperties()
                    .Where(x => x.CanWrite
                            && ((!x.Name.EndsWith("ID") && x.Name != "Parent"
                                    && x.GetMethod.ReturnType.Name != "ICollection`1"
                                    && x.GetMethod.ReturnType.Name != "String" && x.GetMethod.ReturnType.Name != "DateTime"
                                    && x.GetMethod.ReturnType.Name != "Boolean" && x.GetMethod.ReturnType.Name != "Nullable`1"
                                    && !x.GetCustomAttributes<DontMapInWithRelateWorkflowsAttribute>().Any()
                                    && !x.GetCustomAttributes<DontMapInEverAttribute>().Any()
                            ) || (x.GetMethod.ReturnType.Name == "ICollection`1"
                                    && !x.GetCustomAttributes<DontMapInWithAssociateWorkflowsAttribute>().Any()
                                    && !x.GetCustomAttributes<DontMapInEverAttribute>().Any()
                            )
                        )
                    )
                ) {
                    PropertyInfo idProperty = table.GetProperties().FirstOrDefault(x => x.Name == property.Name + "ID");
                    if (property.GetMethod.ReturnType.Name != "ICollection`1" && idProperty == null) { continue; }
                    if (idProperty != null)
                    {
                        if (idProperty.GetMethod.ReturnType.Name == "Nullable`1"
                            && !optionalRelatedIDProperties.Contains(idProperty.Name))
                        {
                            optionalRelatedIDProperties.Add(idProperty.Name);
                        }
                        else if (idProperty.GetMethod.ReturnType.Name != "Nullable`1"
                                    && !requiredRelatedIDProperties.Contains(idProperty.Name))
                        {
                            requiredRelatedIDProperties.Add(idProperty.Name);
                        }
                    }
                    // Look for directly Related and Associated objects
                    string propertyTypeName = property.GetMethod.ReturnType.Name == "ICollection`1"
                        ? property.GetMethod.ReturnType.GetGenericArguments()[0].Name
                        : property.GetMethod.ReturnType.Name;
                    addedPropertyTypes.Add(propertyTypeName);
                }
                addedPropertyTypes = addedPropertyTypes.Distinct().OrderBy(x => x).ToList();
                int totalCount, thisCount;
                do
                {
                    totalCount = addedPropertyTypes.Count;
                    thisCount = 0;
                    for (var i = 0; i < addedPropertyTypes.Count; i++)
                    {
                        // TODO: Use reflection (see above loop) 4 layers deep instead of this manual process
                        if (addedPropertyTypes[i].EndsWith("Contact"))
                        {
                            if (!addedPropertyTypes.Contains("Contact"))
                            {
                                addedPropertyTypes.Add("Contact");
                            }
                        }
                        if (addedPropertyTypes[i] == "Contact")
                        {
                            if (!addedPropertyTypes.Contains("Address"))
                            {
                                addedPropertyTypes.Add("Address");
                            }
                            if (!addedPropertyTypes.Contains("ContactType"))
                            {
                                addedPropertyTypes.Add("ContactType");
                            }
                        }
                        if (addedPropertyTypes[i] == "Address")
                        {
                            if (!addedPropertyTypes.Contains("Country"))
                            {
                                addedPropertyTypes.Add("Country");
                            }
                            if (!addedPropertyTypes.Contains("Region"))
                            {
                                addedPropertyTypes.Add("Region");
                            }
                        }
                        if (addedPropertyTypes[i] == "AccountPricePoint")
                        {
                            if (!addedPropertyTypes.Contains("PricePoint"))
                            {
                                addedPropertyTypes.Add("PricePoint");
                            }
                        }
                        if (addedPropertyTypes[i] == "Account")
                        {
                            if (!addedPropertyTypes.Contains("AccountType"))
                            {
                                addedPropertyTypes.Add("AccountType");
                            }
                            if (!addedPropertyTypes.Contains("AccountStatus"))
                            {
                                addedPropertyTypes.Add("AccountStatus");
                            }
                        }
                        if (addedPropertyTypes[i] == "Product")
                        {
                            if (!addedPropertyTypes.Contains("ProductImage"))
                            {
                                addedPropertyTypes.Add("ProductImage");
                            }
                            if (!addedPropertyTypes.Contains("ProductFile"))
                            {
                                addedPropertyTypes.Add("ProductFile");
                            }
                            if (!addedPropertyTypes.Contains("ProductInventoryLocationSection"))
                            {
                                addedPropertyTypes.Add("ProductInventoryLocationSection");
                            }
                            if (!addedPropertyTypes.Contains("PackageType"))
                            {
                                addedPropertyTypes.Add("PackageType");
                            }
                            if (!addedPropertyTypes.Contains("GeneralAttribute"))
                            {
                                addedPropertyTypes.Add("GeneralAttribute");
                            }
                        }
                        if (addedPropertyTypes[i] == "Package")
                        {
                            if (!addedPropertyTypes.Contains("PackageType"))
                            {
                                addedPropertyTypes.Add("PackageType");
                            }
                        }
                        if (addedPropertyTypes[i] == "SalesReturn")
                        {
                            if (!addedPropertyTypes.Contains("SalesReturnReason"))
                            {
                                addedPropertyTypes.Add("SalesReturnReason");
                            }
                        }
                        if (addedPropertyTypes[i] == "Note")
                        {
                            if (!addedPropertyTypes.Contains("NoteType"))
                            {
                                addedPropertyTypes.Add("NoteType");
                            }
                        }
                        if (addedPropertyTypes[i] == "CartItem")
                        {
                            if (!addedPropertyTypes.Contains("Cart"))
                            {
                                addedPropertyTypes.Add("Cart");
                            }
                        }
                        if (addedPropertyTypes[i].EndsWith("Event"))
                        {
                            if (addedPropertyTypes[i].Contains("Cart") && !addedPropertyTypes.Contains("Cart"))
                            {
                                addedPropertyTypes.Add("Cart");
                            }
                            if (addedPropertyTypes[i].Contains("SalesInvoice") && !addedPropertyTypes.Contains("SalesInvoice"))
                            {
                                addedPropertyTypes.Add("SalesInvoice");
                            }
                            if (addedPropertyTypes[i].Contains("SalesOrder") && !addedPropertyTypes.Contains("SalesOrder"))
                            {
                                addedPropertyTypes.Add("SalesOrder");
                            }
                            if (addedPropertyTypes[i].Contains("SalesQuote") && !addedPropertyTypes.Contains("SalesQuote"))
                            {
                                addedPropertyTypes.Add("SalesQuote");
                            }
                            if (addedPropertyTypes[i].Contains("SalesReturn") && !addedPropertyTypes.Contains("SalesReturn"))
                            {
                                addedPropertyTypes.Add("SalesReturn");
                            }
                            if (addedPropertyTypes[i].Contains("PurchaseOrder") && !addedPropertyTypes.Contains("PurchaseOrder"))
                            {
                                addedPropertyTypes.Add("PurchaseOrder");
                            }
                            if (addedPropertyTypes[i].Contains("SampleRequest") && !addedPropertyTypes.Contains("SampleRequest"))
                            {
                                addedPropertyTypes.Add("SampleRequest");
                            }
                        }
                        if (addedPropertyTypes[i] == "Cart" && addedPropertyTypes.Contains("CartItem"))
                        {
                            if (!addedPropertyTypes.Contains("AppliedCartItemDiscount"))
                            {
                                addedPropertyTypes.Add("AppliedCartItemDiscount");
                            }
                            if (!addedPropertyTypes.Contains("CartItemTarget"))
                            {
                                addedPropertyTypes.Add("CartItemTarget");
                            }
                            if (!addedPropertyTypes.Contains("Product"))
                            {
                                addedPropertyTypes.Add("Product");
                            }
                            if (!addedPropertyTypes.Contains("VendorProduct"))
                            {
                                addedPropertyTypes.Add("VendorProduct");
                            }
                            if (!addedPropertyTypes.Contains("ManufacturerProduct"))
                            {
                                addedPropertyTypes.Add("ManufacturerProduct");
                            }
                            if (!addedPropertyTypes.Contains("StoreProduct"))
                            {
                                addedPropertyTypes.Add("StoreProduct");
                            }
                            if (!addedPropertyTypes.Contains("ProductPricePoint"))
                            {
                                addedPropertyTypes.Add("ProductPricePoint");
                            }
                        }
                    }
                    thisCount = addedPropertyTypes.Count;
                }
                while (thisCount != totalCount); #>
                case nameof(DataModel.<#= table.Name #>):
                {
<#              foreach (var addedPropertyType in addedPropertyTypes) { #>
                    <#= addedPropertyType #>Dirty = true;
<#              } #>
                    break;
                }
<#          } #>
                #endregion
<#      } #>
            }
        }

        private void MarkPristine()
        {
<#      foreach (var group in tableClasses) { #>
            #region <#= group.Key #>
<#          foreach (var table in group) {
                var td = new TypeDeterminer(table);
                if (td.IsExcludedFromT4 || dirtySkips.Contains(table.Name)) { continue; } #>
            <#= table.Name #>Dirty = false;
<#          } #>
            #endregion
<#      } #>
        }
    }
}
<# DeleteOldOutputs(); #>