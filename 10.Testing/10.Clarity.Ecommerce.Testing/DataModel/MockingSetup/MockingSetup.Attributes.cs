// <autogenerated>
// <copyright file="Attributes.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Attributes section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoAttributes { private get; set; }

        // Enable the tables specifically on run
        public bool DoAttributeGroupTable { private get; set; }
        public bool DoAttributeTabTable { private get; set; }
        public bool DoAttributeTypeTable { private get; set; }
        public bool DoGeneralAttributeTable { private get; set; }
        public bool DoGeneralAttributePredefinedOptionTable { private get; set; }

        // Dirty Checking
        public bool AttributeGroupDirty { private get; set; }
        public bool AttributeTabDirty { private get; set; }
        public bool AttributeTypeDirty { private get; set; }
        public bool GeneralAttributeDirty { private get; set; }
        public bool GeneralAttributePredefinedOptionDirty { private get; set; }

        // Sets
        public Mock<DbSet<AttributeGroup>>? AttributeGroups { get; private set; }
        public Mock<DbSet<AttributeTab>>? AttributeTabs { get; private set; }
        public Mock<DbSet<AttributeType>>? AttributeTypes { get; private set; }
        public Mock<DbSet<GeneralAttribute>>? GeneralAttributes { get; private set; }
        public Mock<DbSet<GeneralAttributePredefinedOption>>? GeneralAttributePredefinedOptions { get; private set; }

        // Raw Data
        public List<Mock<AttributeGroup>>? RawAttributeGroups { get; private set; }
        public List<Mock<AttributeTab>>? RawAttributeTabs { get; private set; }
        public List<Mock<AttributeType>>? RawAttributeTypes { get; private set; }
        public List<Mock<GeneralAttribute>>? RawGeneralAttributes { get; private set; }
        public List<Mock<GeneralAttributePredefinedOption>>? RawGeneralAttributePredefinedOptions { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksAttributesAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoAttributes || (DoAttributeGroupTable && (!dirtyOnly || AttributeGroupDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAttributeGroups == null) { throw new InvalidOperationException("Raw AttributeGroups was null"); }
                    await InitializeMockSetFromListAsync(AttributeGroups, RawAttributeGroups).ConfigureAwait(false);
                    context.Setup(m => m.AttributeGroups).Returns(() => AttributeGroups?.Object!);
                    context.Setup(m => m.Set<AttributeGroup>()).Returns(() => AttributeGroups?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAttributes || (DoAttributeTabTable && (!dirtyOnly || AttributeTabDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAttributeTabs == null) { throw new InvalidOperationException("Raw AttributeTabs was null"); }
                    await InitializeMockSetFromListAsync(AttributeTabs, RawAttributeTabs).ConfigureAwait(false);
                    context.Setup(m => m.AttributeTabs).Returns(() => AttributeTabs?.Object!);
                    context.Setup(m => m.Set<AttributeTab>()).Returns(() => AttributeTabs?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAttributes || (DoAttributeTypeTable && (!dirtyOnly || AttributeTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAttributeTypes == null) { throw new InvalidOperationException("Raw AttributeTypes was null"); }
                    await InitializeMockSetFromListAsync(AttributeTypes, RawAttributeTypes).ConfigureAwait(false);
                    context.Setup(m => m.AttributeTypes).Returns(() => AttributeTypes?.Object!);
                    context.Setup(m => m.Set<AttributeType>()).Returns(() => AttributeTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAttributes || (DoGeneralAttributeTable && (!dirtyOnly || GeneralAttributeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawGeneralAttributes == null) { throw new InvalidOperationException("Raw GeneralAttributes was null"); }
                    await InitializeMockSetFromListAsync(GeneralAttributes, RawGeneralAttributes).ConfigureAwait(false);
                    context.Setup(m => m.GeneralAttributes).Returns(() => GeneralAttributes?.Object!);
                    context.Setup(m => m.Set<GeneralAttribute>()).Returns(() => GeneralAttributes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAttributes || (DoGeneralAttributePredefinedOptionTable && (!dirtyOnly || GeneralAttributePredefinedOptionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawGeneralAttributePredefinedOptions == null) { throw new InvalidOperationException("Raw GeneralAttributePredefinedOptions was null"); }
                    await InitializeMockSetFromListAsync(GeneralAttributePredefinedOptions, RawGeneralAttributePredefinedOptions).ConfigureAwait(false);
                    context.Setup(m => m.GeneralAttributePredefinedOptions).Returns(() => GeneralAttributePredefinedOptions?.Object!);
                    context.Setup(m => m.Set<GeneralAttributePredefinedOption>()).Returns(() => GeneralAttributePredefinedOptions?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAttributeGroupsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AttributeGroup>> data)
        {
            if (!DoAll && !DoAttributes && !DoAttributeGroupTable) { return; }
            AttributeGroups ??= new Mock<DbSet<AttributeGroup>>();
            await InitializeMockSetFromListAsync(AttributeGroups, data).ConfigureAwait(false);
            context.Setup(m => m.AttributeGroups).Returns(() => AttributeGroups.Object);
            context.Setup(m => m.Set<AttributeGroup>()).Returns(() => AttributeGroups.Object);
            TableRecordCounts[typeof(AttributeGroup)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AttributeGroup)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AttributeGroup)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AttributeGroup)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AttributeGroup)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAttributeTabsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AttributeTab>> data)
        {
            if (!DoAll && !DoAttributes && !DoAttributeTabTable) { return; }
            AttributeTabs ??= new Mock<DbSet<AttributeTab>>();
            await InitializeMockSetFromListAsync(AttributeTabs, data).ConfigureAwait(false);
            context.Setup(m => m.AttributeTabs).Returns(() => AttributeTabs.Object);
            context.Setup(m => m.Set<AttributeTab>()).Returns(() => AttributeTabs.Object);
            TableRecordCounts[typeof(AttributeTab)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AttributeTab)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AttributeTab)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AttributeTab)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AttributeTab)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAttributeTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AttributeType>> data)
        {
            if (!DoAll && !DoAttributes && !DoAttributeTypeTable) { return; }
            AttributeTypes ??= new Mock<DbSet<AttributeType>>();
            await InitializeMockSetFromListAsync(AttributeTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AttributeTypes).Returns(() => AttributeTypes.Object);
            context.Setup(m => m.Set<AttributeType>()).Returns(() => AttributeTypes.Object);
            TableRecordCounts[typeof(AttributeType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AttributeType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AttributeType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AttributeType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AttributeType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetGeneralAttributesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<GeneralAttribute>> data)
        {
            if (!DoAll && !DoAttributes && !DoGeneralAttributeTable) { return; }
            GeneralAttributes ??= new Mock<DbSet<GeneralAttribute>>();
            await InitializeMockSetFromListAsync(GeneralAttributes, data).ConfigureAwait(false);
            context.Setup(m => m.GeneralAttributes).Returns(() => GeneralAttributes.Object);
            context.Setup(m => m.Set<GeneralAttribute>()).Returns(() => GeneralAttributes.Object);
            TableRecordCounts[typeof(GeneralAttribute)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(GeneralAttribute)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(GeneralAttribute)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(GeneralAttribute)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(GeneralAttribute)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetGeneralAttributePredefinedOptionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<GeneralAttributePredefinedOption>> data)
        {
            if (!DoAll && !DoAttributes && !DoGeneralAttributePredefinedOptionTable) { return; }
            GeneralAttributePredefinedOptions ??= new Mock<DbSet<GeneralAttributePredefinedOption>>();
            await InitializeMockSetFromListAsync(GeneralAttributePredefinedOptions, data).ConfigureAwait(false);
            context.Setup(m => m.GeneralAttributePredefinedOptions).Returns(() => GeneralAttributePredefinedOptions.Object);
            context.Setup(m => m.Set<GeneralAttributePredefinedOption>()).Returns(() => GeneralAttributePredefinedOptions.Object);
            TableRecordCounts[typeof(GeneralAttributePredefinedOption)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(GeneralAttributePredefinedOption)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(GeneralAttributePredefinedOption)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy AttributeGroup.</summary>
        /// <returns>The new AttributeGroup.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AttributeGroup>> CreateADummyAttributeGroupAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AttributeGroup>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AttributeGroup Properties
                // Dynamic Linking
                // AttributeGroup's Related Objects
                // AttributeGroup's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AttributeTab.</summary>
        /// <returns>The new AttributeTab.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AttributeTab>> CreateADummyAttributeTabAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AttributeTab>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AttributeTab Properties
                // Dynamic Linking
                // AttributeTab's Related Objects
                // AttributeTab's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AttributeType.</summary>
        /// <returns>The new AttributeType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AttributeType>> CreateADummyAttributeTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AttributeType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AttributeType Properties
                // Dynamic Linking
                // AttributeType's Related Objects
                // AttributeType's Associated Objects
                mock.Setup(m => m.GeneralAttributes).Returns(() => RawGeneralAttributes?.Where(x => x.Object.TypeID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<GeneralAttribute>());
                return mock;
            });
        }

        /// <summary>Creates a dummy GeneralAttribute.</summary>
        /// <returns>The new GeneralAttribute.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<GeneralAttribute>> CreateADummyGeneralAttributeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, int typeID = 1, string? jsonAttributes = null, int? attributeGroupID = null!, int? attributeTabID = null!, bool hideFromCatalogViews = false, bool hideFromProductDetailView = false, bool hideFromStorefront = false, bool hideFromSuppliers = false, bool isComparable = false, bool isFilter = false, bool isMarkup = false, bool isPredefined = false, bool isTab = false, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<GeneralAttribute>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // GeneralAttribute Properties
                mock.Object.AttributeGroupID = attributeGroupID;
                mock.Object.AttributeTabID = attributeTabID;
                mock.Object.HideFromCatalogViews = hideFromCatalogViews;
                mock.Object.HideFromProductDetailView = hideFromProductDetailView;
                mock.Object.HideFromStorefront = hideFromStorefront;
                mock.Object.HideFromSuppliers = hideFromSuppliers;
                mock.Object.IsComparable = isComparable;
                mock.Object.IsFilter = isFilter;
                mock.Object.IsMarkup = isMarkup;
                mock.Object.IsPredefined = isPredefined;
                mock.Object.IsTab = isTab;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawAttributeTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // GeneralAttribute's Related Objects
                mock.Setup(m => m.AttributeGroup).Returns(() => RawAttributeGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.AttributeGroupID)?.Object);
                mock.Setup(m => m.AttributeTab).Returns(() => RawAttributeTabs?.FirstOrDefault(x => x.Object.ID == mock.Object.AttributeTabID)?.Object);
                // GeneralAttribute's Associated Objects
                mock.Setup(m => m.GeneralAttributePredefinedOptions).Returns(() => RawGeneralAttributePredefinedOptions?.Where(x => x.Object.AttributeID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<GeneralAttributePredefinedOption>());
                return mock;
            });
        }

        /// <summary>Creates a dummy GeneralAttributePredefinedOption.</summary>
        /// <returns>The new GeneralAttributePredefinedOption.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<GeneralAttributePredefinedOption>> CreateADummyGeneralAttributePredefinedOptionAsync(int id, string? key, string? jsonAttributes = null, int attributeID = 1, int? sortOrder = null!, string uofM = null!, string value = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<GeneralAttributePredefinedOption>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // GeneralAttributePredefinedOption Properties
                mock.Object.AttributeID = attributeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.UofM = uofM;
                mock.Object.Value = value;
                // Dynamic Linking
                // GeneralAttributePredefinedOption's Related Objects
                mock.Setup(m => m.Attribute).Returns(() => RawGeneralAttributes?.FirstOrDefault(x => x.Object.ID == mock.Object.AttributeID)?.Object);
                // GeneralAttributePredefinedOption's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForAttributes(MockingSetup mockingSetup)
        {
            Func<AttributeGroup> mockFuncAttributeGroup = () =>
            {
                var mock = new Mock<AttributeGroup>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AttributeGroup Properties
                // Dynamic Linking
                // AttributeGroup's Associated Objects
                // AttributeGroup's Related Objects
                return mock.Object;
            };
            For<IAttributeGroup>().Use(() => mockFuncAttributeGroup());
            For<AttributeGroup>().Use(() => mockFuncAttributeGroup());
            Func<AttributeTab> mockFuncAttributeTab = () =>
            {
                var mock = new Mock<AttributeTab>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AttributeTab Properties
                // Dynamic Linking
                // AttributeTab's Associated Objects
                // AttributeTab's Related Objects
                return mock.Object;
            };
            For<IAttributeTab>().Use(() => mockFuncAttributeTab());
            For<AttributeTab>().Use(() => mockFuncAttributeTab());
            Func<AttributeType> mockFuncAttributeType = () =>
            {
                var mock = new Mock<AttributeType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AttributeType Properties
                // Dynamic Linking
                // AttributeType's Associated Objects
                mock.Setup(m => m.GeneralAttributes).Returns(() => mockingSetup.RawGeneralAttributes?.Where(x => x.Object.TypeID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<GeneralAttribute>());
                // AttributeType's Related Objects
                return mock.Object;
            };
            For<IAttributeType>().Use(() => mockFuncAttributeType());
            For<AttributeType>().Use(() => mockFuncAttributeType());
            Func<GeneralAttribute> mockFuncGeneralAttribute = () =>
            {
                var mock = new Mock<GeneralAttribute>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // GeneralAttribute Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAttributeTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.AttributeGroup).Returns(() => mockingSetup.RawAttributeGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.AttributeGroupID)?.Object);
                mock.Setup(m => m.AttributeTab).Returns(() => mockingSetup.RawAttributeTabs?.FirstOrDefault(x => x.Object.ID == mock.Object.AttributeTabID)?.Object);
                // GeneralAttribute's Associated Objects
                mock.Setup(m => m.GeneralAttributePredefinedOptions).Returns(() => mockingSetup.RawGeneralAttributePredefinedOptions?.Where(x => x.Object.AttributeID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<GeneralAttributePredefinedOption>());
                // GeneralAttribute's Related Objects
                return mock.Object;
            };
            For<IGeneralAttribute>().Use(() => mockFuncGeneralAttribute());
            For<GeneralAttribute>().Use(() => mockFuncGeneralAttribute());
            Func<GeneralAttributePredefinedOption> mockFuncGeneralAttributePredefinedOption = () =>
            {
                var mock = new Mock<GeneralAttributePredefinedOption>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // GeneralAttributePredefinedOption Properties
                // Dynamic Linking
                mock.Setup(m => m.Attribute).Returns(() => mockingSetup.RawGeneralAttributes?.FirstOrDefault(x => x.Object.ID == mock.Object.AttributeID)?.Object);
                // GeneralAttributePredefinedOption's Associated Objects
                // GeneralAttributePredefinedOption's Related Objects
                return mock.Object;
            };
            For<IGeneralAttributePredefinedOption>().Use(() => mockFuncGeneralAttributePredefinedOption());
            For<GeneralAttributePredefinedOption>().Use(() => mockFuncGeneralAttributePredefinedOption());
        }
    }
}
