// <autogenerated>
// <copyright file="Ordering.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Ordering section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoOrdering { private get; set; }

        // Enable the tables specifically on run
        public bool DoSalesOrderTable { private get; set; }
        public bool DoSalesOrderContactTable { private get; set; }
        public bool DoSalesOrderEventTable { private get; set; }
        public bool DoSalesOrderEventTypeTable { private get; set; }
        public bool DoSalesOrderFileTable { private get; set; }
        public bool DoSalesOrderItemTable { private get; set; }
        public bool DoSalesOrderItemTargetTable { private get; set; }
        public bool DoSalesOrderStateTable { private get; set; }
        public bool DoSalesOrderStatusTable { private get; set; }
        public bool DoSalesOrderTypeTable { private get; set; }

        // Dirty Checking
        public bool SalesOrderDirty { private get; set; }
        public bool SalesOrderContactDirty { private get; set; }
        public bool SalesOrderEventDirty { private get; set; }
        public bool SalesOrderEventTypeDirty { private get; set; }
        public bool SalesOrderFileDirty { private get; set; }
        public bool SalesOrderItemDirty { private get; set; }
        public bool SalesOrderItemTargetDirty { private get; set; }
        public bool SalesOrderStateDirty { private get; set; }
        public bool SalesOrderStatusDirty { private get; set; }
        public bool SalesOrderTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<SalesOrder>>? SalesOrders { get; private set; }
        public Mock<DbSet<SalesOrderContact>>? SalesOrderContacts { get; private set; }
        public Mock<DbSet<SalesOrderEvent>>? SalesOrderEvents { get; private set; }
        public Mock<DbSet<SalesOrderEventType>>? SalesOrderEventTypes { get; private set; }
        public Mock<DbSet<SalesOrderFile>>? SalesOrderFiles { get; private set; }
        public Mock<DbSet<SalesOrderItem>>? SalesOrderItems { get; private set; }
        public Mock<DbSet<SalesOrderItemTarget>>? SalesOrderItemTargets { get; private set; }
        public Mock<DbSet<SalesOrderState>>? SalesOrderStates { get; private set; }
        public Mock<DbSet<SalesOrderStatus>>? SalesOrderStatuses { get; private set; }
        public Mock<DbSet<SalesOrderType>>? SalesOrderTypes { get; private set; }

        // Raw Data
        public List<Mock<SalesOrder>>? RawSalesOrders { get; private set; }
        public List<Mock<SalesOrderContact>>? RawSalesOrderContacts { get; private set; }
        public List<Mock<SalesOrderEvent>>? RawSalesOrderEvents { get; private set; }
        public List<Mock<SalesOrderEventType>>? RawSalesOrderEventTypes { get; private set; }
        public List<Mock<SalesOrderFile>>? RawSalesOrderFiles { get; private set; }
        public List<Mock<SalesOrderItem>>? RawSalesOrderItems { get; private set; }
        public List<Mock<SalesOrderItemTarget>>? RawSalesOrderItemTargets { get; private set; }
        public List<Mock<SalesOrderState>>? RawSalesOrderStates { get; private set; }
        public List<Mock<SalesOrderStatus>>? RawSalesOrderStatuses { get; private set; }
        public List<Mock<SalesOrderType>>? RawSalesOrderTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksOrderingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoOrdering || (DoSalesOrderTable && (!dirtyOnly || SalesOrderDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrders == null) { throw new InvalidOperationException("Raw SalesOrders was null"); }
                    await InitializeMockSetFromListAsync(SalesOrders, RawSalesOrders).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrders).Returns(() => SalesOrders?.Object!);
                    context.Setup(m => m.Set<SalesOrder>()).Returns(() => SalesOrders?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderContactTable && (!dirtyOnly || SalesOrderContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderContacts == null) { throw new InvalidOperationException("Raw SalesOrderContacts was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderContacts, RawSalesOrderContacts).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderContacts).Returns(() => SalesOrderContacts?.Object!);
                    context.Setup(m => m.Set<SalesOrderContact>()).Returns(() => SalesOrderContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderEventTable && (!dirtyOnly || SalesOrderEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderEvents == null) { throw new InvalidOperationException("Raw SalesOrderEvents was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderEvents, RawSalesOrderEvents).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderEvents).Returns(() => SalesOrderEvents?.Object!);
                    context.Setup(m => m.Set<SalesOrderEvent>()).Returns(() => SalesOrderEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderEventTypeTable && (!dirtyOnly || SalesOrderEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderEventTypes == null) { throw new InvalidOperationException("Raw SalesOrderEventTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderEventTypes, RawSalesOrderEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderEventTypes).Returns(() => SalesOrderEventTypes?.Object!);
                    context.Setup(m => m.Set<SalesOrderEventType>()).Returns(() => SalesOrderEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderFileTable && (!dirtyOnly || SalesOrderFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderFiles == null) { throw new InvalidOperationException("Raw SalesOrderFiles was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderFiles, RawSalesOrderFiles).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderFiles).Returns(() => SalesOrderFiles?.Object!);
                    context.Setup(m => m.Set<SalesOrderFile>()).Returns(() => SalesOrderFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderItemTable && (!dirtyOnly || SalesOrderItemDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderItems == null) { throw new InvalidOperationException("Raw SalesOrderItems was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderItems, RawSalesOrderItems).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderItems).Returns(() => SalesOrderItems?.Object!);
                    context.Setup(m => m.Set<SalesOrderItem>()).Returns(() => SalesOrderItems?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderItemTargetTable && (!dirtyOnly || SalesOrderItemTargetDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderItemTargets == null) { throw new InvalidOperationException("Raw SalesOrderItemTargets was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderItemTargets, RawSalesOrderItemTargets).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderItemTargets).Returns(() => SalesOrderItemTargets?.Object!);
                    context.Setup(m => m.Set<SalesOrderItemTarget>()).Returns(() => SalesOrderItemTargets?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderStateTable && (!dirtyOnly || SalesOrderStateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderStates == null) { throw new InvalidOperationException("Raw SalesOrderStates was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderStates, RawSalesOrderStates).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderStates).Returns(() => SalesOrderStates?.Object!);
                    context.Setup(m => m.Set<SalesOrderState>()).Returns(() => SalesOrderStates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderStatusTable && (!dirtyOnly || SalesOrderStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderStatuses == null) { throw new InvalidOperationException("Raw SalesOrderStatuses was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderStatuses, RawSalesOrderStatuses).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderStatuses).Returns(() => SalesOrderStatuses?.Object!);
                    context.Setup(m => m.Set<SalesOrderStatus>()).Returns(() => SalesOrderStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoOrdering || (DoSalesOrderTypeTable && (!dirtyOnly || SalesOrderTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderTypes == null) { throw new InvalidOperationException("Raw SalesOrderTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderTypes, RawSalesOrderTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderTypes).Returns(() => SalesOrderTypes?.Object!);
                    context.Setup(m => m.Set<SalesOrderType>()).Returns(() => SalesOrderTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrdersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrder>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderTable) { return; }
            SalesOrders ??= new Mock<DbSet<SalesOrder>>();
            await InitializeMockSetFromListAsync(SalesOrders, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrders).Returns(() => SalesOrders.Object);
            context.Setup(m => m.Set<SalesOrder>()).Returns(() => SalesOrders.Object);
            TableRecordCounts[typeof(SalesOrder)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrder)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrder)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderContact>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderContactTable) { return; }
            SalesOrderContacts ??= new Mock<DbSet<SalesOrderContact>>();
            await InitializeMockSetFromListAsync(SalesOrderContacts, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderContacts).Returns(() => SalesOrderContacts.Object);
            context.Setup(m => m.Set<SalesOrderContact>()).Returns(() => SalesOrderContacts.Object);
            TableRecordCounts[typeof(SalesOrderContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderContact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderEvent>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderEventTable) { return; }
            SalesOrderEvents ??= new Mock<DbSet<SalesOrderEvent>>();
            await InitializeMockSetFromListAsync(SalesOrderEvents, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderEvents).Returns(() => SalesOrderEvents.Object);
            context.Setup(m => m.Set<SalesOrderEvent>()).Returns(() => SalesOrderEvents.Object);
            TableRecordCounts[typeof(SalesOrderEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesOrderEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderEventType>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderEventTypeTable) { return; }
            SalesOrderEventTypes ??= new Mock<DbSet<SalesOrderEventType>>();
            await InitializeMockSetFromListAsync(SalesOrderEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderEventTypes).Returns(() => SalesOrderEventTypes.Object);
            context.Setup(m => m.Set<SalesOrderEventType>()).Returns(() => SalesOrderEventTypes.Object);
            TableRecordCounts[typeof(SalesOrderEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesOrderEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesOrderEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderFile>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderFileTable) { return; }
            SalesOrderFiles ??= new Mock<DbSet<SalesOrderFile>>();
            await InitializeMockSetFromListAsync(SalesOrderFiles, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderFiles).Returns(() => SalesOrderFiles.Object);
            context.Setup(m => m.Set<SalesOrderFile>()).Returns(() => SalesOrderFiles.Object);
            TableRecordCounts[typeof(SalesOrderFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesOrderFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderItemsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderItem>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderItemTable) { return; }
            SalesOrderItems ??= new Mock<DbSet<SalesOrderItem>>();
            await InitializeMockSetFromListAsync(SalesOrderItems, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderItems).Returns(() => SalesOrderItems.Object);
            context.Setup(m => m.Set<SalesOrderItem>()).Returns(() => SalesOrderItems.Object);
            TableRecordCounts[typeof(SalesOrderItem)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderItem)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderItem)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesOrderItem)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderItemTargetsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderItemTarget>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderItemTargetTable) { return; }
            SalesOrderItemTargets ??= new Mock<DbSet<SalesOrderItemTarget>>();
            await InitializeMockSetFromListAsync(SalesOrderItemTargets, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderItemTargets).Returns(() => SalesOrderItemTargets.Object);
            context.Setup(m => m.Set<SalesOrderItemTarget>()).Returns(() => SalesOrderItemTargets.Object);
            TableRecordCounts[typeof(SalesOrderItemTarget)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderItemTarget)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderItemTarget)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderStatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderState>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderStateTable) { return; }
            SalesOrderStates ??= new Mock<DbSet<SalesOrderState>>();
            await InitializeMockSetFromListAsync(SalesOrderStates, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderStates).Returns(() => SalesOrderStates.Object);
            context.Setup(m => m.Set<SalesOrderState>()).Returns(() => SalesOrderStates.Object);
            TableRecordCounts[typeof(SalesOrderState)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderState)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderState)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesOrderState)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesOrderState)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderStatus>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderStatusTable) { return; }
            SalesOrderStatuses ??= new Mock<DbSet<SalesOrderStatus>>();
            await InitializeMockSetFromListAsync(SalesOrderStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderStatuses).Returns(() => SalesOrderStatuses.Object);
            context.Setup(m => m.Set<SalesOrderStatus>()).Returns(() => SalesOrderStatuses.Object);
            TableRecordCounts[typeof(SalesOrderStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesOrderStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesOrderStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderType>> data)
        {
            if (!DoAll && !DoOrdering && !DoSalesOrderTypeTable) { return; }
            SalesOrderTypes ??= new Mock<DbSet<SalesOrderType>>();
            await InitializeMockSetFromListAsync(SalesOrderTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderTypes).Returns(() => SalesOrderTypes.Object);
            context.Setup(m => m.Set<SalesOrderType>()).Returns(() => SalesOrderTypes.Object);
            TableRecordCounts[typeof(SalesOrderType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesOrderType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesOrderType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy SalesOrder.</summary>
        /// <returns>The new SalesOrder.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrder>> CreateADummySalesOrderAsync(int id, string? key, string? jsonAttributes = null, DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null, DateTime? actualShipDate = null!, decimal? balanceDue = null!, int? brandID = null!, int? franchiseID = null!, int? inventoryLocationID = null!, DateTime? orderApprovedDate = null!, DateTime? orderCommitmentDate = null!, string paymentTransactionID = null!, string purchaseOrderNumber = null!, DateTime? requestedShipDate = null!, DateTime? requiredShipDate = null!, int? salesGroupAsMasterID = null!, int? salesGroupAsSubID = null!, int? storeID = null!, string taxTransactionID = null!, string trackingNumber = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrder>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
                // SalesOrder Properties
                mock.Object.ActualShipDate = actualShipDate;
                mock.Object.BalanceDue = balanceDue;
                mock.Object.BrandID = brandID;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.InventoryLocationID = inventoryLocationID;
                mock.Object.OrderApprovedDate = orderApprovedDate;
                mock.Object.OrderCommitmentDate = orderCommitmentDate;
                mock.Object.PaymentTransactionID = paymentTransactionID;
                mock.Object.PurchaseOrderNumber = purchaseOrderNumber;
                mock.Object.RequestedShipDate = requestedShipDate;
                mock.Object.RequiredShipDate = requiredShipDate;
                mock.Object.SalesGroupAsMasterID = salesGroupAsMasterID;
                mock.Object.SalesGroupAsSubID = salesGroupAsSubID;
                mock.Object.StoreID = storeID;
                mock.Object.TaxTransactionID = taxTransactionID;
                mock.Object.TrackingNumber = trackingNumber;
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawSalesOrderFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => RawSalesOrderStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => RawSalesOrderStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawSalesOrderTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => RawSalesOrderItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderItem>());
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesOrderDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesOrderDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => RawSalesOrderContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                // SalesOrder's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.InventoryLocation).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationID)?.Object);
                mock.Setup(m => m.SalesGroupAsMaster).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsMasterID)?.Object);
                mock.Setup(m => m.SalesGroupAsSub).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsSubID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesOrder's Associated Objects
                mock.Setup(m => m.AssociatedPurchaseOrders).Returns(() => RawSalesOrderPurchaseOrders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderPurchaseOrder>());
                mock.Setup(m => m.AssociatedSalesInvoices).Returns(() => RawSalesOrderSalesInvoices?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderSalesInvoice>());
                mock.Setup(m => m.AssociatedSalesQuotes).Returns(() => RawSalesQuoteSalesOrders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteSalesOrder>());
                mock.Setup(m => m.AssociatedSalesReturns).Returns(() => RawSalesReturnSalesOrders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnSalesOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => RawRateQuotes?.Where(x => x.Object.SalesOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => RawSalesOrderEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderEvent>());
                mock.Setup(m => m.SalesOrderPayments).Returns(() => RawSalesOrderPayments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderPayment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderContact.</summary>
        /// <returns>The new SalesOrderContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderContact>> CreateADummySalesOrderContactAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // SalesOrderContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderContact's Related Objects
                // SalesOrderContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderEvent.</summary>
        /// <returns>The new SalesOrderEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderEvent>> CreateADummySalesOrderEventAsync(int id, string? key, string? name, string? desc = null, int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null, int typeID = 1, string? jsonAttributes = null, decimal? newBalanceDue = null!, decimal? oldBalanceDue = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
                // SalesOrderEvent Properties
                mock.Object.NewBalanceDue = newBalanceDue;
                mock.Object.OldBalanceDue = oldBalanceDue;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesOrderEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesOrderEvent's Related Objects
                // SalesOrderEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderEventType.</summary>
        /// <returns>The new SalesOrderEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderEventType>> CreateADummySalesOrderEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesOrderEventType Properties
                // Dynamic Linking
                // SalesOrderEventType's Related Objects
                // SalesOrderEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderFile.</summary>
        /// <returns>The new SalesOrderFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderFile>> CreateADummySalesOrderFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // SalesOrderFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderFile's Related Objects
                // SalesOrderFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderItem.</summary>
        /// <returns>The new SalesOrderItem.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderItem>> CreateADummySalesOrderItemAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1, string forceUniqueLineItemKey = null!, int? originalCurrencyID = null!, int? sellingCurrencyID = null!, decimal? unitCorePriceInSellingCurrency = null!, decimal? unitSoldPriceInSellingCurrency = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderItem>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives && !DoInactiveSalesItems;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
                // SalesOrderItem Properties
                mock.Object.ForceUniqueLineItemKey = forceUniqueLineItemKey;
                mock.Object.OriginalCurrencyID = originalCurrencyID;
                mock.Object.SellingCurrencyID = sellingCurrencyID;
                mock.Object.UnitCorePriceInSellingCurrency = unitCorePriceInSellingCurrency;
                mock.Object.UnitSoldPriceInSellingCurrency = unitSoldPriceInSellingCurrency;
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesOrderItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesOrderItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesOrderItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => RawSalesOrderItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderItemTarget>());
                // SalesOrderItem's Related Objects
                mock.Setup(m => m.OriginalCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesOrderItem's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderItemTarget.</summary>
        /// <returns>The new SalesOrderItemTarget.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderItemTarget>> CreateADummySalesOrderItemTargetAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandProductID = null!, int destinationContactID = 1, int masterID = 1, bool nothingToShip = false, int? originProductInventoryLocationSectionID = null!, int? originStoreProductID = null!, int? originVendorProductID = null!, decimal quantity = 0m, int? selectedRateQuoteID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderItemTarget>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // SalesOrderItemTarget Properties
                mock.Object.BrandProductID = brandProductID;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.MasterID = masterID;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.OriginProductInventoryLocationSectionID = originProductInventoryLocationSectionID;
                mock.Object.OriginStoreProductID = originStoreProductID;
                mock.Object.OriginVendorProductID = originVendorProductID;
                mock.Object.Quantity = quantity;
                mock.Object.SelectedRateQuoteID = selectedRateQuoteID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // SalesOrderItemTarget's Related Objects
                mock.Setup(m => m.BrandProduct).Returns(() => RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawSalesOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesOrderItemTarget's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderState.</summary>
        /// <returns>The new SalesOrderState.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderState>> CreateADummySalesOrderStateAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderState>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesOrderState Properties
                // Dynamic Linking
                // SalesOrderState's Related Objects
                // SalesOrderState's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderStatus.</summary>
        /// <returns>The new SalesOrderStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderStatus>> CreateADummySalesOrderStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesOrderStatus Properties
                // Dynamic Linking
                // SalesOrderStatus's Related Objects
                // SalesOrderStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderType.</summary>
        /// <returns>The new SalesOrderType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderType>> CreateADummySalesOrderTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesOrderType Properties
                // Dynamic Linking
                // SalesOrderType's Related Objects
                // SalesOrderType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForOrdering(MockingSetup mockingSetup)
        {
            Func<SalesOrder> mockFuncSalesOrder = () =>
            {
                var mock = new Mock<SalesOrder>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrder Properties
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawSalesOrderFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawSalesOrderStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.RawSalesOrderStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesOrderTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.RawSalesOrderItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderItem>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesOrderDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesOrderDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.RawSalesOrderContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.InventoryLocation).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationID)?.Object);
                mock.Setup(m => m.SalesGroupAsMaster).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsMasterID)?.Object);
                mock.Setup(m => m.SalesGroupAsSub).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsSubID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesOrder's Associated Objects
                mock.Setup(m => m.AssociatedPurchaseOrders).Returns(() => mockingSetup.RawSalesOrderPurchaseOrders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderPurchaseOrder>());
                mock.Setup(m => m.AssociatedSalesInvoices).Returns(() => mockingSetup.RawSalesOrderSalesInvoices?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderSalesInvoice>());
                mock.Setup(m => m.AssociatedSalesQuotes).Returns(() => mockingSetup.RawSalesQuoteSalesOrders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteSalesOrder>());
                mock.Setup(m => m.AssociatedSalesReturns).Returns(() => mockingSetup.RawSalesReturnSalesOrders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnSalesOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => mockingSetup.RawRateQuotes?.Where(x => x.Object.SalesOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => mockingSetup.RawSalesOrderEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderEvent>());
                mock.Setup(m => m.SalesOrderPayments).Returns(() => mockingSetup.RawSalesOrderPayments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderPayment>());
                // SalesOrder's Related Objects
                return mock.Object;
            };
            For<ISalesOrder>().Use(() => mockFuncSalesOrder());
            For<SalesOrder>().Use(() => mockFuncSalesOrder());
            Func<SalesOrderContact> mockFuncSalesOrderContact = () =>
            {
                var mock = new Mock<SalesOrderContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderContact's Associated Objects
                // SalesOrderContact's Related Objects
                return mock.Object;
            };
            For<ISalesOrderContact>().Use(() => mockFuncSalesOrderContact());
            For<SalesOrderContact>().Use(() => mockFuncSalesOrderContact());
            Func<SalesOrderEvent> mockFuncSalesOrderEvent = () =>
            {
                var mock = new Mock<SalesOrderEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesOrderEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesOrderEvent's Associated Objects
                // SalesOrderEvent's Related Objects
                return mock.Object;
            };
            For<ISalesOrderEvent>().Use(() => mockFuncSalesOrderEvent());
            For<SalesOrderEvent>().Use(() => mockFuncSalesOrderEvent());
            Func<SalesOrderEventType> mockFuncSalesOrderEventType = () =>
            {
                var mock = new Mock<SalesOrderEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderEventType Properties
                // Dynamic Linking
                // SalesOrderEventType's Associated Objects
                // SalesOrderEventType's Related Objects
                return mock.Object;
            };
            For<ISalesOrderEventType>().Use(() => mockFuncSalesOrderEventType());
            For<SalesOrderEventType>().Use(() => mockFuncSalesOrderEventType());
            Func<SalesOrderFile> mockFuncSalesOrderFile = () =>
            {
                var mock = new Mock<SalesOrderFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderFile's Associated Objects
                // SalesOrderFile's Related Objects
                return mock.Object;
            };
            For<ISalesOrderFile>().Use(() => mockFuncSalesOrderFile());
            For<SalesOrderFile>().Use(() => mockFuncSalesOrderFile());
            Func<SalesOrderItem> mockFuncSalesOrderItem = () =>
            {
                var mock = new Mock<SalesOrderItem>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderItem Properties
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesOrderItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesOrderItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesOrderItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.RawSalesOrderItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderItemTarget>());
                mock.Setup(m => m.OriginalCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesOrderItem's Associated Objects
                // SalesOrderItem's Related Objects
                return mock.Object;
            };
            For<ISalesOrderItem>().Use(() => mockFuncSalesOrderItem());
            For<SalesOrderItem>().Use(() => mockFuncSalesOrderItem());
            Func<SalesOrderItemTarget> mockFuncSalesOrderItemTarget = () =>
            {
                var mock = new Mock<SalesOrderItemTarget>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderItemTarget Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.BrandProduct).Returns(() => mockingSetup.RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => mockingSetup.RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => mockingSetup.RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => mockingSetup.RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => mockingSetup.RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesOrderItemTarget's Associated Objects
                // SalesOrderItemTarget's Related Objects
                return mock.Object;
            };
            For<ISalesOrderItemTarget>().Use(() => mockFuncSalesOrderItemTarget());
            For<SalesOrderItemTarget>().Use(() => mockFuncSalesOrderItemTarget());
            Func<SalesOrderState> mockFuncSalesOrderState = () =>
            {
                var mock = new Mock<SalesOrderState>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderState Properties
                // Dynamic Linking
                // SalesOrderState's Associated Objects
                // SalesOrderState's Related Objects
                return mock.Object;
            };
            For<ISalesOrderState>().Use(() => mockFuncSalesOrderState());
            For<SalesOrderState>().Use(() => mockFuncSalesOrderState());
            Func<SalesOrderStatus> mockFuncSalesOrderStatus = () =>
            {
                var mock = new Mock<SalesOrderStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderStatus Properties
                // Dynamic Linking
                // SalesOrderStatus's Associated Objects
                // SalesOrderStatus's Related Objects
                return mock.Object;
            };
            For<ISalesOrderStatus>().Use(() => mockFuncSalesOrderStatus());
            For<SalesOrderStatus>().Use(() => mockFuncSalesOrderStatus());
            Func<SalesOrderType> mockFuncSalesOrderType = () =>
            {
                var mock = new Mock<SalesOrderType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderType Properties
                // Dynamic Linking
                // SalesOrderType's Associated Objects
                // SalesOrderType's Related Objects
                return mock.Object;
            };
            For<ISalesOrderType>().Use(() => mockFuncSalesOrderType());
            For<SalesOrderType>().Use(() => mockFuncSalesOrderType());
        }
    }
}
