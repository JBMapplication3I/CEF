// <autogenerated>
// <copyright file="Scouting.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Scouting section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoScouting { private get; set; }

        // Enable the tables specifically on run
        public bool DoScoutTable { private get; set; }
        public bool DoScoutCategoryTable { private get; set; }
        public bool DoScoutCategoryTypeTable { private get; set; }

        // Dirty Checking
        public bool ScoutDirty { private get; set; }
        public bool ScoutCategoryDirty { private get; set; }
        public bool ScoutCategoryTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Scout>>? Scouts { get; private set; }
        public Mock<DbSet<ScoutCategory>>? ScoutCategories { get; private set; }
        public Mock<DbSet<ScoutCategoryType>>? ScoutCategoryTypes { get; private set; }

        // Raw Data
        public List<Mock<Scout>>? RawScouts { get; private set; }
        public List<Mock<ScoutCategory>>? RawScoutCategories { get; private set; }
        public List<Mock<ScoutCategoryType>>? RawScoutCategoryTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksScoutingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoScouting || (DoScoutTable && (!dirtyOnly || ScoutDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawScouts == null) { throw new InvalidOperationException("Raw Scouts was null"); }
                    await InitializeMockSetFromListAsync(Scouts, RawScouts).ConfigureAwait(false);
                    context.Setup(m => m.Scouts).Returns(() => Scouts?.Object!);
                    context.Setup(m => m.Set<Scout>()).Returns(() => Scouts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoScouting || (DoScoutCategoryTable && (!dirtyOnly || ScoutCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawScoutCategories == null) { throw new InvalidOperationException("Raw ScoutCategories was null"); }
                    await InitializeMockSetFromListAsync(ScoutCategories, RawScoutCategories).ConfigureAwait(false);
                    context.Setup(m => m.ScoutCategories).Returns(() => ScoutCategories?.Object!);
                    context.Setup(m => m.Set<ScoutCategory>()).Returns(() => ScoutCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoScouting || (DoScoutCategoryTypeTable && (!dirtyOnly || ScoutCategoryTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawScoutCategoryTypes == null) { throw new InvalidOperationException("Raw ScoutCategoryTypes was null"); }
                    await InitializeMockSetFromListAsync(ScoutCategoryTypes, RawScoutCategoryTypes).ConfigureAwait(false);
                    context.Setup(m => m.ScoutCategoryTypes).Returns(() => ScoutCategoryTypes?.Object!);
                    context.Setup(m => m.Set<ScoutCategoryType>()).Returns(() => ScoutCategoryTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetScoutsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Scout>> data)
        {
            if (!DoAll && !DoScouting && !DoScoutTable) { return; }
            Scouts ??= new Mock<DbSet<Scout>>();
            await InitializeMockSetFromListAsync(Scouts, data).ConfigureAwait(false);
            context.Setup(m => m.Scouts).Returns(() => Scouts.Object);
            context.Setup(m => m.Set<Scout>()).Returns(() => Scouts.Object);
            TableRecordCounts[typeof(Scout)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Scout)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Scout)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetScoutCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ScoutCategory>> data)
        {
            if (!DoAll && !DoScouting && !DoScoutCategoryTable) { return; }
            ScoutCategories ??= new Mock<DbSet<ScoutCategory>>();
            await InitializeMockSetFromListAsync(ScoutCategories, data).ConfigureAwait(false);
            context.Setup(m => m.ScoutCategories).Returns(() => ScoutCategories.Object);
            context.Setup(m => m.Set<ScoutCategory>()).Returns(() => ScoutCategories.Object);
            TableRecordCounts[typeof(ScoutCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ScoutCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ScoutCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetScoutCategoryTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ScoutCategoryType>> data)
        {
            if (!DoAll && !DoScouting && !DoScoutCategoryTypeTable) { return; }
            ScoutCategoryTypes ??= new Mock<DbSet<ScoutCategoryType>>();
            await InitializeMockSetFromListAsync(ScoutCategoryTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ScoutCategoryTypes).Returns(() => ScoutCategoryTypes.Object);
            context.Setup(m => m.Set<ScoutCategoryType>()).Returns(() => ScoutCategoryTypes.Object);
            TableRecordCounts[typeof(ScoutCategoryType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ScoutCategoryType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ScoutCategoryType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ScoutCategoryType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ScoutCategoryType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Scout.</summary>
        /// <returns>The new Scout.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Scout>> CreateADummyScoutAsync(int id, string? key, string? jsonAttributes = null, int createdByUserID = 1, string distanceUnitOfMeasure = null!, decimal? distanceUsedMax = null!, decimal? distanceUsedMin = null!, decimal? hoursUsedMax = null!, decimal? hoursUsedMin = null!, decimal? priceMax = null!, decimal? priceMin = null!, DateTime? yearMax = null!, DateTime? yearMin = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Scout>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Scout Properties
                mock.Object.CreatedByUserID = createdByUserID;
                mock.Object.DistanceUnitOfMeasure = distanceUnitOfMeasure;
                mock.Object.DistanceUsedMax = distanceUsedMax;
                mock.Object.DistanceUsedMin = distanceUsedMin;
                mock.Object.HoursUsedMax = hoursUsedMax;
                mock.Object.HoursUsedMin = hoursUsedMin;
                mock.Object.PriceMax = priceMax;
                mock.Object.PriceMin = priceMin;
                mock.Object.YearMax = yearMax;
                mock.Object.YearMin = yearMin;
                // Dynamic Linking
                // Scout's Related Objects
                mock.Setup(m => m.CreatedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                // Scout's Associated Objects
                mock.Setup(m => m.Categories).Returns(() => RawScoutCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ScoutCategory>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ScoutCategory.</summary>
        /// <returns>The new ScoutCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ScoutCategory>> CreateADummyScoutCategoryAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ScoutCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ScoutCategory Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawScoutCategoryTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ScoutCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawScouts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ScoutCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ScoutCategoryType.</summary>
        /// <returns>The new ScoutCategoryType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ScoutCategoryType>> CreateADummyScoutCategoryTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ScoutCategoryType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ScoutCategoryType Properties
                // Dynamic Linking
                // ScoutCategoryType's Related Objects
                // ScoutCategoryType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForScouting(MockingSetup mockingSetup)
        {
            Func<Scout> mockFuncScout = () =>
            {
                var mock = new Mock<Scout>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Scout Properties
                // Dynamic Linking
                mock.Setup(m => m.CreatedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                // Scout's Associated Objects
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawScoutCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ScoutCategory>());
                // Scout's Related Objects
                return mock.Object;
            };
            For<IScout>().Use(() => mockFuncScout());
            For<Scout>().Use(() => mockFuncScout());
            Func<ScoutCategory> mockFuncScoutCategory = () =>
            {
                var mock = new Mock<ScoutCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ScoutCategory Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawScoutCategoryTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawScouts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ScoutCategory's Associated Objects
                // ScoutCategory's Related Objects
                return mock.Object;
            };
            For<IScoutCategory>().Use(() => mockFuncScoutCategory());
            For<ScoutCategory>().Use(() => mockFuncScoutCategory());
            Func<ScoutCategoryType> mockFuncScoutCategoryType = () =>
            {
                var mock = new Mock<ScoutCategoryType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ScoutCategoryType Properties
                // Dynamic Linking
                // ScoutCategoryType's Associated Objects
                // ScoutCategoryType's Related Objects
                return mock.Object;
            };
            For<IScoutCategoryType>().Use(() => mockFuncScoutCategoryType());
            For<ScoutCategoryType>().Use(() => mockFuncScoutCategoryType());
        }
    }
}
